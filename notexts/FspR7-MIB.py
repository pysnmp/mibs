#
# PySNMP MIB module FspR7-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/FspR7-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 13:29:24 2024
# On host fv-az573-215 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
VirtualContainerType, ProtectionMech, SonetTraceFormCaps, ProtectionMechCaps, ApsHoldoffTimeCaps, LoopConfig, OhTerminationLevel, controlPlaneWdmEntityIndex, EthDuplexModeCaps, config, EntityIndex, OtnTcmLevel, ptpEntityIndex, Grade, ptpEntityClass, LogicalIfTransportCaps, controlPlaneEthEntityIndex, Counter64String, entityIndex, entityClass, SonetTimingSourceCaps, SonetTraceForm, fspR7, TrapAlarmSeverity, ApsHoldoffTime, SonetVcBundleAllocationCaps, OtnTcmLevelCaps, neTrapsinkAddress, EthDuplexMode, ServiceImpairment, ptpEntityContainedIn, OnOff, VirtualContainerTypeCaps, EnableState, OtnPayloadType, OhTerminationLevelCaps, snmpProxyEntrySingleTargetOutNodeAgentStatus, TimModeCaps, EnableStateCaps, vtpEntityIndex, TimMode, snmpProxyServerSynchroStage, controlPlaneOtnEntityIndex, OtnPayloadTypeCaps, LoopConfigCaps, SonetTimingSource, entityContainedIn, neEventLogTimeStamp, neEventLogIdentityTranslation, SonetVcBundleAllocation = mibBuilder.importSymbols("ADVA-MIB", "VirtualContainerType", "ProtectionMech", "SonetTraceFormCaps", "ProtectionMechCaps", "ApsHoldoffTimeCaps", "LoopConfig", "OhTerminationLevel", "controlPlaneWdmEntityIndex", "EthDuplexModeCaps", "config", "EntityIndex", "OtnTcmLevel", "ptpEntityIndex", "Grade", "ptpEntityClass", "LogicalIfTransportCaps", "controlPlaneEthEntityIndex", "Counter64String", "entityIndex", "entityClass", "SonetTimingSourceCaps", "SonetTraceForm", "fspR7", "TrapAlarmSeverity", "ApsHoldoffTime", "SonetVcBundleAllocationCaps", "OtnTcmLevelCaps", "neTrapsinkAddress", "EthDuplexMode", "ServiceImpairment", "ptpEntityContainedIn", "OnOff", "VirtualContainerTypeCaps", "EnableState", "OtnPayloadType", "OhTerminationLevelCaps", "snmpProxyEntrySingleTargetOutNodeAgentStatus", "TimModeCaps", "EnableStateCaps", "vtpEntityIndex", "TimMode", "snmpProxyServerSynchroStage", "controlPlaneOtnEntityIndex", "OtnPayloadTypeCaps", "LoopConfigCaps", "SonetTimingSource", "entityContainedIn", "neEventLogTimeStamp", "neEventLogIdentityTranslation", "SonetVcBundleAllocation")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, MibIdentifier, IpAddress, NotificationType, iso, ModuleIdentity, ObjectIdentity, Unsigned32, Counter32, Bits, Counter64, Integer32, snmpModules, Gauge32, enterprises, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "MibIdentifier", "IpAddress", "NotificationType", "iso", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Counter32", "Bits", "Counter64", "Integer32", "snmpModules", "Gauge32", "enterprises", "TimeTicks")
TextualConvention, DateAndTime, TestAndIncr, RowStatus, MacAddress, TimeStamp, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "TestAndIncr", "RowStatus", "MacAddress", "TimeStamp", "DisplayString", "TruthValue")
fspR7MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2))
fspR7MIB.setRevisions(('2010-10-29 00:00', '2010-10-22 00:00', '2010-08-31 00:00', '2010-06-14 00:00', '2010-03-24 00:00', '2009-11-20 00:00', '2009-06-05 00:00', '2009-01-31 00:00', '2008-08-28 00:00', '2007-10-04 00:00', '2007-09-24 00:00', '2007-05-07 00:00', '2007-01-03 00:00', '2006-11-28 00:00', '2006-09-05 00:00', '2006-06-14 00:00', '2006-05-04 00:00',))
if mibBuilder.loadTexts: fspR7MIB.setLastUpdated('200906050000Z')
if mibBuilder.loadTexts: fspR7MIB.setOrganization('ADVA AG Optical Networking')
adminMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2))
neAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1))
neTimeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30))
routingMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2))
fspUser = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3))
srvSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4))
channelTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5))
dcnOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6))
conditionMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1))
conditionFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1))
currentConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2))
alarmProfileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3))
trapMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3))
trapMibPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0))
trapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 1))
configAndStatusMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4))
commonConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1))
equipmentConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2))
interfaceConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3))
serviceConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4))
gfpServiceConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1))
connectionConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5))
systemConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 6))
controlPlaneConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7))
deploymentProvisioningMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5))
shelfDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1))
moduleDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2))
plugDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3))
facilityDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4))
connectionDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5))
crossConnectionDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6))
cloningEntitiesDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7))
controlPlaneDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8))
parameterCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9))
performanceMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6))
performanceAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1))
performanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2))
fspR7Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 7))
fspR7VendorTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8))
fspR7Products = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 1))
fspR7V1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 1, 1))
if mibBuilder.loadTexts: fspR7V1.setStatus('current')
class ApsDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("bidirectional", 1), ("unidirectional", 2))

class ApsDirectionCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBidirectional", 1), ("capUnidirectional", 2))

class ApsRevertMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("nonrevertive", 1), ("revertive", 2))

class ApsRevertModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNonrevertive", 1), ("capRevertive", 2))

class ApsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("undefined", 0), ("line", 2), ("sncN", 3), ("sncI", 4), ("sncS", 5), ("eth", 6), ("phys", 7), ("sncNPM", 8), ("sncNTCM", 9), ("sncISM", 10), ("mux", 11), ("pcs", 12), ("ethSncI", 13), ("ethSncN", 14), ("ethSncS", 15), ("ethSncT", 16))

class ApsTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLine", 2), ("capSncN", 3), ("capSncI", 4), ("capSncS", 5), ("capEth", 6), ("capPhys", 7), ("capSncNPM", 8), ("capSncNTCM", 9), ("capSncISM", 10), ("capMux", 11), ("capPcs", 12), ("capEthSncI", 13), ("capEthSncN", 14), ("capEthSncS", 15), ("capEthSncT", 16))

class Counter64StringCaps(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class FspR7AccessProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("serial", 2), ("telnet", 3), ("ssh", 4), ("ftp", 5), ("snmp", 6), ("http", 7), ("https", 8), ("tl1", 9))

class FspR7AccessStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("success", 2), ("authenticationError", 3), ("sessionError", 4))

class FspR7AccountFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("authForced", 2))

class FspR7Action(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("accept", 1), ("drop", 2), ("jump", 3))

class FspR7ActionCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAccept", 1), ("capDrop", 2), ("capJump", 3))

class FspR7AdminState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("uas", 1), ("is", 2), ("ains", 3), ("mgt", 4), ("mt", 5), ("dsbld", 6), ("pps", 7))

class FspR7AdminStateCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capUas", 1), ("capIs", 2), ("capAins", 3), ("capMgt", 4), ("capMt", 5), ("capDsbld", 6), ("capPps", 7))

class FspR7AidType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("sys", 2), ("eqpt", 3), ("ch", 4), ("dcn", 5), ("ol", 6), ("om", 7), ("sts1", 8), ("sts3c", 9), ("sts24c", 10), ("sts48c", 11), ("vc3", 12), ("vc4", 13), ("vs1", 14), ("vs4c", 15), ("sh", 16), ("lif", 17), ("lifCp", 18), ("tnlWdm", 19), ("vc4c8", 20), ("vc4c16", 21), ("otl", 22))

class FspR7AlsHoldoff(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("del0ms", 1), ("del250ms", 2), ("del550ms", 3))

class FspR7AlsHoldoffCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capDel0ms", 1), ("capDel250ms", 2), ("capDel550ms", 3))

class FspR7AlsMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("advaALS", 1), ("sonetALS", 2), ("noALS", 3))

class FspR7AlsModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAdvaALS", 1), ("capSonetALS", 2), ("capNoALS", 3))

class FspR7ApplyAlarmProfile(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("apply", 2))

class FspR7ApplyAlarmProfileCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capApply", 2))

class FspR7APSCommand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("release", 1), ("manualSwitch", 2))

class FspR7APSCommandCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRelease", 1), ("capManualSwitch", 2))

class FspR7AseTabOpr(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("build", 2))

class FspR7AseTabOprCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capBuild", 2))

class FspR7AutopLif(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7AutopLifCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7AutoThresReset(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("rtf", 2))

class FspR7AutoThresResetCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capRtf", 2))

class FspR7Baund(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("baud2400", 1), ("baud4800", 2), ("baud9600", 3), ("baud19200", 4), ("baud38400", 5), ("baud57600", 6), ("baud115200", 7))

class FspR7BaundCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBaud2400", 1), ("capBaud4800", 2), ("capBaud9600", 3), ("capBaud19200", 4), ("capBaud38400", 5), ("capBaud57600", 6), ("capBaud115200", 7))

class FspR7BERThreshold(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("exp5", 1), ("exp6", 2), ("exp7", 3), ("exp8", 4), ("exp9", 5))

class FspR7BERThresholdCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capExp5", 1), ("capExp6", 2), ("capExp7", 3), ("capExp8", 4), ("capExp9", 5))

class FspR7BERThresholdSection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("exp7", 3), ("exp8", 4), ("exp9", 5))

class FspR7BERThresholdSectionCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capExp7", 3), ("capExp8", 4), ("capExp9", 5))

class FspR7Bip(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("transparent", 1), ("terminate", 2))

class FspR7BipCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capTransparent", 1), ("capTerminate", 2))

class FspR7Bitrate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("bitrate10", 1), ("bitrate100", 2), ("bitrate1000", 3), ("bitrate10000", 4))

class FspR7BitrateCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBitrate10", 1), ("capBitrate100", 2), ("capBitrate1000", 3), ("capBitrate10000", 4))

class FspR7CapInventory(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 50))
    namedValues = NamedValues(("undefined", 0), ("level0", 1), ("level1", 2), ("level2", 3), ("level3", 4), ("level4", 5), ("level5", 6), ("unknown", 50))

class FspR7CapInventoryCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLevel0", 1), ("capLevel1", 2), ("capLevel2", 3), ("capLevel3", 4), ("capLevel4", 5), ("capLevel5", 6), ("capUnknown", 50))

class FspR7Category(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("undefined", 0), ("shelf", 1), ("channelMod", 2), ("plug", 3), ("filter", 4), ("amplifier", 5), ("dcm", 6), ("switch", 7), ("oscm", 8), ("dummy", 9), ("common", 10), ("att", 11), ("jumper", 12), ("accessory", 13), ("fiber", 14), ("protectionMod", 15), ("any", 16), ("roadm", 17), ("ethernetMod", 18), ("powerSplitter", 19))

class FspR7ChannelBandwidth(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("undefined", 0), ("band50G", 1), ("band75G", 2), ("band100G", 3), ("band125G", 4), ("band150G", 5), ("band175G", 6), ("band200G", 7), ("band225G", 8), ("band250G", 9), ("band275G", 10), ("band300G", 11))

class FspR7ChannelBandwidthCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBand50G", 1), ("capBand75G", 2), ("capBand100G", 3), ("capBand125G", 4), ("capBand150G", 5), ("capBand175G", 6), ("capBand200G", 7), ("capBand225G", 8), ("capBand250G", 9), ("capBand275G", 10), ("capBand300G", 11))

class FspR7ChannelIdentifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 443, 447, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 499, 500))
    namedValues = NamedValues(("undefined", 0), ("d01", 1), ("d02", 2), ("d03", 3), ("d04", 4), ("d05", 5), ("d06", 6), ("d07", 7), ("d08", 8), ("d09", 9), ("d10", 10), ("d11", 11), ("d12", 12), ("d13", 13), ("d14", 14), ("d15", 15), ("d16", 16), ("d17", 17), ("d18", 18), ("d19", 19), ("d20", 20), ("d21", 21), ("d22", 22), ("d23", 23), ("d24", 24), ("d25", 25), ("d26", 26), ("d27", 27), ("d28", 28), ("d29", 29), ("d30", 30), ("d31", 31), ("d32", 32), ("d33", 33), ("d34", 34), ("d35", 35), ("d36", 36), ("d37", 37), ("d38", 38), ("d39", 39), ("d40", 40), ("d41", 41), ("d42", 42), ("d43", 43), ("d44", 44), ("d45", 45), ("d46", 46), ("d47", 47), ("d48", 48), ("d49", 49), ("d50", 50), ("d51", 51), ("d52", 52), ("d53", 53), ("d54", 54), ("d55", 55), ("d56", 56), ("d57", 57), ("d58", 58), ("d59", 59), ("d60", 60), ("d61", 61), ("d62", 62), ("d63", 63), ("d64", 64), ("dc1", 65), ("dc2", 66), ("dc3", 67), ("dc4", 68), ("dc5", 69), ("dc6", 70), ("dc7", 71), ("dc8", 72), ("dl1", 73), ("dl2", 74), ("dl3", 75), ("dl4", 76), ("dl5", 77), ("dl6", 78), ("dl7", 79), ("dl8", 80), ("dc9", 81), ("dl9", 82), ("c1470", 91), ("c1490", 92), ("c1510", 93), ("c1530", 94), ("c1550", 95), ("c1570", 96), ("c1590", 97), ("c1610", 98), ("s1310", 99), ("s1630", 100), ("g850", 101), ("g1310", 102), ("g1550", 103), ("notInGrid", 105), ("s1510", 106), ("f19610", 107), ("f19595", 108), ("f19585", 109), ("f19575", 110), ("f19565", 111), ("f19555", 112), ("f19545", 113), ("f19535", 114), ("f19525", 115), ("f19515", 116), ("f19505", 117), ("f19495", 118), ("f19485", 119), ("f19475", 120), ("f19465", 121), ("f19455", 122), ("f19445", 123), ("f19435", 124), ("f19425", 125), ("f19415", 126), ("f19405", 127), ("f19395", 128), ("f19385", 129), ("f19375", 130), ("f19365", 131), ("f19355", 132), ("f19345", 133), ("f19335", 134), ("f19325", 135), ("f19315", 136), ("f19305", 137), ("f19295", 138), ("f19285", 139), ("f19275", 140), ("f19265", 141), ("f19255", 142), ("f19245", 143), ("f19235", 144), ("f19225", 145), ("f19215", 146), ("f19205", 147), ("f19600", 148), ("f19590", 149), ("f19580", 150), ("f19570", 151), ("f19560", 152), ("f19550", 153), ("f19540", 154), ("f19530", 155), ("f19520", 156), ("f19510", 157), ("f19500", 158), ("f19490", 159), ("f19480", 160), ("f19470", 161), ("f19460", 162), ("f19450", 163), ("f19440", 164), ("f19430", 165), ("f19420", 166), ("f19410", 167), ("f19400", 168), ("f19390", 169), ("f19380", 170), ("f19370", 171), ("f19360", 172), ("f19350", 173), ("f19340", 174), ("f19330", 175), ("f19320", 176), ("f19310", 177), ("f19300", 178), ("f19290", 179), ("f19280", 180), ("f19270", 181), ("f19260", 182), ("f19250", 183), ("f19240", 184), ("f19230", 185), ("f19220", 186), ("f19210", 187), ("f19200", 188), ("c1270", 189), ("c1290", 190), ("c1310", 191), ("c1330", 192), ("c1350", 193), ("c1370", 194), ("c1430", 195), ("c1450", 196), ("s1610", 197), ("t1650", 198), ("s1490", 199), ("f19195", 443), ("f19190", 447), ("f19185", 451), ("f19180", 455), ("f19175", 459), ("f19170", 463), ("f19165", 467), ("f19160", 471), ("f19155", 475), ("f19150", 479), ("f19145", 483), ("f19140", 487), ("f19135", 491), ("f19130", 495), ("f19125", 499), ("notDefined", 500))

class FspR7ChannelIdentifierCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capD01", 1), ("capD02", 2), ("capD03", 3), ("capD04", 4), ("capD05", 5), ("capD06", 6), ("capD07", 7), ("capD08", 8), ("capD09", 9), ("capD10", 10), ("capD11", 11), ("capD12", 12), ("capD13", 13), ("capD14", 14), ("capD15", 15), ("capD16", 16), ("capD17", 17), ("capD18", 18), ("capD19", 19), ("capD20", 20), ("capD21", 21), ("capD22", 22), ("capD23", 23), ("capD24", 24), ("capD25", 25), ("capD26", 26), ("capD27", 27), ("capD28", 28), ("capD29", 29), ("capD30", 30), ("capD31", 31), ("capD32", 32), ("capD33", 33), ("capD34", 34), ("capD35", 35), ("capD36", 36), ("capD37", 37), ("capD38", 38), ("capD39", 39), ("capD40", 40), ("capD41", 41), ("capD42", 42), ("capD43", 43), ("capD44", 44), ("capD45", 45), ("capD46", 46), ("capD47", 47), ("capD48", 48), ("capD49", 49), ("capD50", 50), ("capD51", 51), ("capD52", 52), ("capD53", 53), ("capD54", 54), ("capD55", 55), ("capD56", 56), ("capD57", 57), ("capD58", 58), ("capD59", 59), ("capD60", 60), ("capD61", 61), ("capD62", 62), ("capD63", 63), ("capD64", 64), ("capDc1", 65), ("capDc2", 66), ("capDc3", 67), ("capDc4", 68), ("capDc5", 69), ("capDc6", 70), ("capDc7", 71), ("capDc8", 72), ("capDl1", 73), ("capDl2", 74), ("capDl3", 75), ("capDl4", 76), ("capDl5", 77), ("capDl6", 78), ("capDl7", 79), ("capDl8", 80), ("capDc9", 81), ("capDl9", 82), ("capC1470", 91), ("capC1490", 92), ("capC1510", 93), ("capC1530", 94), ("capC1550", 95), ("capC1570", 96), ("capC1590", 97), ("capC1610", 98), ("capS1310", 99), ("capS1630", 100), ("capG850", 101), ("capG1310", 102), ("capG1550", 103), ("capNotInGrid", 105), ("capS1510", 106), ("capF19610", 107), ("capF19595", 108), ("capF19585", 109), ("capF19575", 110), ("capF19565", 111), ("capF19555", 112), ("capF19545", 113), ("capF19535", 114), ("capF19525", 115), ("capF19515", 116), ("capF19505", 117), ("capF19495", 118), ("capF19485", 119), ("capF19475", 120), ("capF19465", 121), ("capF19455", 122), ("capF19445", 123), ("capF19435", 124), ("capF19425", 125), ("capF19415", 126), ("capF19405", 127), ("capF19395", 128), ("capF19385", 129), ("capF19375", 130), ("capF19365", 131), ("capF19355", 132), ("capF19345", 133), ("capF19335", 134), ("capF19325", 135), ("capF19315", 136), ("capF19305", 137), ("capF19295", 138), ("capF19285", 139), ("capF19275", 140), ("capF19265", 141), ("capF19255", 142), ("capF19245", 143), ("capF19235", 144), ("capF19225", 145), ("capF19215", 146), ("capF19205", 147), ("capF19600", 148), ("capF19590", 149), ("capF19580", 150), ("capF19570", 151), ("capF19560", 152), ("capF19550", 153), ("capF19540", 154), ("capF19530", 155), ("capF19520", 156), ("capF19510", 157), ("capF19500", 158), ("capF19490", 159), ("capF19480", 160), ("capF19470", 161), ("capF19460", 162), ("capF19450", 163), ("capF19440", 164), ("capF19430", 165), ("capF19420", 166), ("capF19410", 167), ("capF19400", 168), ("capF19390", 169), ("capF19380", 170), ("capF19370", 171), ("capF19360", 172), ("capF19350", 173), ("capF19340", 174), ("capF19330", 175), ("capF19320", 176), ("capF19310", 177), ("capF19300", 178), ("capF19290", 179), ("capF19280", 180), ("capF19270", 181), ("capF19260", 182), ("capF19250", 183), ("capF19240", 184), ("capF19230", 185), ("capF19220", 186), ("capF19210", 187), ("capF19200", 188), ("capC1270", 189), ("capC1290", 190), ("capC1310", 191), ("capC1330", 192), ("capC1350", 193), ("capC1370", 194), ("capC1430", 195), ("capC1450", 196), ("capS1610", 197), ("capT1650", 198), ("capS1490", 199), ("capF19195", 443), ("capF19190", 447), ("capF19185", 451), ("capF19180", 455), ("capF19175", 459), ("capF19170", 463), ("capF19165", 467), ("capF19160", 471), ("capF19155", 475), ("capF19150", 479), ("capF19145", 483), ("capF19140", 487), ("capF19135", 491), ("capF19130", 495), ("capF19125", 499), ("capNotDefined", 500))

class FspR7ChannelNumber(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215))
    namedValues = NamedValues(("undefined", 0), ("f19600", 1), ("f19590", 2), ("f19580", 3), ("f19570", 4), ("f19550", 5), ("f19540", 6), ("f19530", 7), ("f19520", 8), ("f19500", 9), ("f19490", 10), ("f19480", 11), ("f19470", 12), ("f19450", 13), ("f19440", 14), ("f19430", 15), ("f19420", 16), ("f19380", 17), ("f19370", 18), ("f19360", 19), ("f19350", 20), ("f19330", 21), ("f19320", 22), ("f19310", 23), ("f19300", 24), ("f19280", 25), ("f19270", 26), ("f19260", 27), ("f19250", 28), ("f19230", 29), ("f19220", 30), ("f19210", 31), ("f19200", 32), ("f19100", 33), ("f19090", 34), ("f19080", 35), ("f19070", 36), ("f19050", 37), ("f19040", 38), ("f19030", 39), ("f19020", 40), ("f19000", 41), ("f18990", 42), ("f18980", 43), ("f18970", 44), ("f18950", 45), ("f18940", 46), ("f18930", 47), ("f18920", 48), ("f18880", 49), ("f18870", 50), ("f18860", 51), ("f18850", 52), ("f18830", 53), ("f18820", 54), ("f18810", 55), ("f18800", 56), ("f18780", 57), ("f18770", 58), ("f18760", 59), ("f18750", 60), ("f18730", 61), ("f18720", 62), ("f18710", 63), ("f18700", 64), ("f19560", 65), ("f19510", 66), ("f19460", 67), ("f19410", 68), ("f19390", 69), ("f19340", 70), ("f19290", 71), ("f19240", 72), ("f19060", 73), ("f19010", 74), ("f18960", 75), ("f18910", 76), ("f18890", 77), ("f18840", 78), ("f18790", 79), ("f18740", 80), ("f19400", 81), ("f18900", 82), ("f19640", 83), ("f19635", 84), ("f19630", 85), ("f19625", 86), ("f19620", 87), ("f19615", 88), ("f19605", 89), ("c1470", 90), ("c1490", 91), ("c1510", 92), ("c1530", 93), ("c1550", 94), ("c1570", 95), ("c1590", 96), ("c1610", 97), ("s1310", 98), ("s1630", 99), ("g850", 100), ("g1310", 101), ("g1550", 102), ("null", 103), ("nig", 104), ("s1510", 105), ("f19610", 106), ("f19595", 107), ("f19585", 108), ("f19575", 109), ("f19565", 110), ("f19555", 111), ("f19545", 112), ("f19535", 113), ("f19525", 114), ("f19515", 115), ("f19505", 116), ("f19495", 117), ("f19485", 118), ("f19475", 119), ("f19465", 120), ("f19455", 121), ("f19445", 122), ("f19435", 123), ("f19425", 124), ("f19415", 125), ("f19405", 126), ("f19395", 127), ("f19385", 128), ("f19375", 129), ("f19365", 130), ("f19355", 131), ("f19345", 132), ("f19335", 133), ("f19325", 134), ("f19315", 135), ("f19305", 136), ("f19295", 137), ("f19285", 138), ("f19275", 139), ("f19265", 140), ("f19255", 141), ("f19245", 142), ("f19235", 143), ("f19225", 144), ("f19215", 145), ("f19205", 146), ("f19195", 147), ("f19190", 148), ("f19185", 149), ("f19180", 150), ("f19175", 151), ("f19170", 152), ("f19165", 153), ("f19160", 154), ("f19155", 155), ("f19150", 156), ("f19145", 157), ("f19140", 158), ("f19135", 159), ("f19130", 160), ("f19125", 161), ("f19120", 162), ("f19115", 163), ("f19110", 164), ("f19105", 165), ("f19095", 166), ("f19085", 167), ("f19075", 168), ("f19065", 169), ("f19055", 170), ("f19045", 171), ("f19035", 172), ("f19025", 173), ("f19015", 174), ("f19005", 175), ("f18995", 176), ("f18985", 177), ("f18975", 178), ("f18965", 179), ("f18955", 180), ("f18945", 181), ("f18935", 182), ("f18925", 183), ("f18915", 184), ("f18905", 185), ("f18895", 186), ("f18885", 187), ("f18875", 188), ("f18865", 189), ("f18855", 190), ("f18845", 191), ("f18835", 192), ("f18825", 193), ("f18815", 194), ("f18805", 195), ("f18795", 196), ("f18785", 197), ("f18775", 198), ("f18765", 199), ("f18755", 200), ("f18745", 201), ("f18735", 202), ("f18725", 203), ("f18715", 204), ("f18705", 205), ("c1270", 206), ("c1290", 207), ("c1310", 208), ("c1330", 209), ("c1350", 210), ("c1370", 211), ("c1430", 212), ("c1450", 213), ("t1650", 214), ("s1490", 215))

class FspR7ChannelNumberCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capF19600", 1), ("capF19590", 2), ("capF19580", 3), ("capF19570", 4), ("capF19550", 5), ("capF19540", 6), ("capF19530", 7), ("capF19520", 8), ("capF19500", 9), ("capF19490", 10), ("capF19480", 11), ("capF19470", 12), ("capF19450", 13), ("capF19440", 14), ("capF19430", 15), ("capF19420", 16), ("capF19380", 17), ("capF19370", 18), ("capF19360", 19), ("capF19350", 20), ("capF19330", 21), ("capF19320", 22), ("capF19310", 23), ("capF19300", 24), ("capF19280", 25), ("capF19270", 26), ("capF19260", 27), ("capF19250", 28), ("capF19230", 29), ("capF19220", 30), ("capF19210", 31), ("capF19200", 32), ("capF19100", 33), ("capF19090", 34), ("capF19080", 35), ("capF19070", 36), ("capF19050", 37), ("capF19040", 38), ("capF19030", 39), ("capF19020", 40), ("capF19000", 41), ("capF18990", 42), ("capF18980", 43), ("capF18970", 44), ("capF18950", 45), ("capF18940", 46), ("capF18930", 47), ("capF18920", 48), ("capF18880", 49), ("capF18870", 50), ("capF18860", 51), ("capF18850", 52), ("capF18830", 53), ("capF18820", 54), ("capF18810", 55), ("capF18800", 56), ("capF18780", 57), ("capF18770", 58), ("capF18760", 59), ("capF18750", 60), ("capF18730", 61), ("capF18720", 62), ("capF18710", 63), ("capF18700", 64), ("capF19560", 65), ("capF19510", 66), ("capF19460", 67), ("capF19410", 68), ("capF19390", 69), ("capF19340", 70), ("capF19290", 71), ("capF19240", 72), ("capF19060", 73), ("capF19010", 74), ("capF18960", 75), ("capF18910", 76), ("capF18890", 77), ("capF18840", 78), ("capF18790", 79), ("capF18740", 80), ("capF19400", 81), ("capF18900", 82), ("capF19640", 83), ("capF19635", 84), ("capF19630", 85), ("capF19625", 86), ("capF19620", 87), ("capF19615", 88), ("capF19605", 89), ("capC1470", 90), ("capC1490", 91), ("capC1510", 92), ("capC1530", 93), ("capC1550", 94), ("capC1570", 95), ("capC1590", 96), ("capC1610", 97), ("capS1310", 98), ("capS1630", 99), ("capG850", 100), ("capG1310", 101), ("capG1550", 102), ("capNull", 103), ("capNig", 104), ("capS1510", 105), ("capF19610", 106), ("capF19595", 107), ("capF19585", 108), ("capF19575", 109), ("capF19565", 110), ("capF19555", 111), ("capF19545", 112), ("capF19535", 113), ("capF19525", 114), ("capF19515", 115), ("capF19505", 116), ("capF19495", 117), ("capF19485", 118), ("capF19475", 119), ("capF19465", 120), ("capF19455", 121), ("capF19445", 122), ("capF19435", 123), ("capF19425", 124), ("capF19415", 125), ("capF19405", 126), ("capF19395", 127), ("capF19385", 128), ("capF19375", 129), ("capF19365", 130), ("capF19355", 131), ("capF19345", 132), ("capF19335", 133), ("capF19325", 134), ("capF19315", 135), ("capF19305", 136), ("capF19295", 137), ("capF19285", 138), ("capF19275", 139), ("capF19265", 140), ("capF19255", 141), ("capF19245", 142), ("capF19235", 143), ("capF19225", 144), ("capF19215", 145), ("capF19205", 146), ("capF19195", 147), ("capF19190", 148), ("capF19185", 149), ("capF19180", 150), ("capF19175", 151), ("capF19170", 152), ("capF19165", 153), ("capF19160", 154), ("capF19155", 155), ("capF19150", 156), ("capF19145", 157), ("capF19140", 158), ("capF19135", 159), ("capF19130", 160), ("capF19125", 161), ("capF19120", 162), ("capF19115", 163), ("capF19110", 164), ("capF19105", 165), ("capF19095", 166), ("capF19085", 167), ("capF19075", 168), ("capF19065", 169), ("capF19055", 170), ("capF19045", 171), ("capF19035", 172), ("capF19025", 173), ("capF19015", 174), ("capF19005", 175), ("capF18995", 176), ("capF18985", 177), ("capF18975", 178), ("capF18965", 179), ("capF18955", 180), ("capF18945", 181), ("capF18935", 182), ("capF18925", 183), ("capF18915", 184), ("capF18905", 185), ("capF18895", 186), ("capF18885", 187), ("capF18875", 188), ("capF18865", 189), ("capF18855", 190), ("capF18845", 191), ("capF18835", 192), ("capF18825", 193), ("capF18815", 194), ("capF18805", 195), ("capF18795", 196), ("capF18785", 197), ("capF18775", 198), ("capF18765", 199), ("capF18755", 200), ("capF18745", 201), ("capF18735", 202), ("capF18725", 203), ("capF18715", 204), ("capF18705", 205), ("capC1270", 206), ("capC1290", 207), ("capC1310", 208), ("capC1330", 209), ("capC1350", 210), ("capC1370", 211), ("capC1430", 212), ("capC1450", 213), ("capT1650", 214), ("capS1490", 215))

class FspR7ChannelSpacing(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("spacing50Ghz", 1), ("spacing100Ghz", 2), ("spacing200Ghz", 3), ("spacing25GHz", 4))

class FspR7ChannelSpacingCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSpacing50Ghz", 1), ("capSpacing100Ghz", 2), ("capSpacing200Ghz", 3), ("capSpacing25GHz", 4))

class FspR7CommandModifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("generic", 1), ("adopt", 2), ("release", 3))

class FspR7CommandModifierCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capGeneric", 1), ("capAdopt", 2), ("capRelease", 3))

class FspR7Conn(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("bi", 1), ("uni", 2))

class FspR7ConnCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBi", 1), ("capUni", 2))

class FspR7ConnCommand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("create", 2), ("destroy", 3), ("forceCreate", 4), ("forceDestroy", 5))

class FspR7ConnectorType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("undefined", 0), ("lc", 1), ("rj45", 2), ("mupc", 3), ("dsub8", 4), ("usbS", 5), ("dsub44hd", 6), ("fcApc", 7), ("mpo", 8))

class FspR7ConnectorTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLc", 1), ("capRj45", 2), ("capMupc", 3), ("capDsub8", 4), ("capUsbS", 5), ("capDsub44hd", 6), ("capFcApc", 7), ("capMpo", 8))

class FspR7ConnectState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("idle", 1), ("idleReceive", 2), ("idleTransmit", 3), ("busy", 4))

class FspR7CpAbortProcess(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("undefined", 0), ("abt", 1))

class FspR7CpAbortProcessCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAbt", 1))

class FspR7CpActivState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("inactive", 1), ("activating", 2), ("active", 3), ("deactivating", 4), ("modifying", 5), ("restoring", 6), ("reverting", 7))

class FspR7CpActivStateCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capInactive", 1), ("capActivating", 2), ("capActive", 3), ("capDeactivating", 4), ("capModifying", 5), ("capRestoring", 6), ("capReverting", 7))

class FspR7CpAffinityInclusion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("any", 2), ("all", 3))

class FspR7CpAffinityInclusionCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capAny", 2), ("capAll", 3))

class FspR7CpAuthType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("simple", 2), ("md5", 3))

class FspR7CpAuthTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capSimple", 2), ("capMd5", 3))

class FspR7CpCancConnection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("opr", 2))

class FspR7CpCancConnectionCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOpr", 2))

class FspR7CpCommand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("compute", 2), ("abort", 3))

class FspR7CpCommandCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capCompute", 2), ("capAbort", 3))

class FspR7CpCompState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("idle", 1), ("fail", 2), ("inprogs", 3), ("abt", 4), ("compl", 5))

class FspR7CpCompStateCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capIdle", 1), ("capFail", 2), ("capInprogs", 3), ("capAbt", 4), ("capCompl", 5))

class FspR7CpEncapsulation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("ipip", 2), ("greip", 3))

class FspR7CpEncapsulationCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capIpip", 2), ("capGreip", 3))

class FspR7CpEncode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("undefined", 0), ("otn", 1), ("sonet", 2), ("sdh", 3), ("eth", 4), ("fc", 5), ("trans", 6), ("cl", 7), ("ib", 8), ("otnp", 9), ("unspecified", 10))

class FspR7CpEncodeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOtn", 1), ("capSonet", 2), ("capSdh", 3), ("capEth", 4), ("capFc", 5), ("capTrans", 6), ("capCl", 7), ("capIb", 8), ("capOtnp", 9), ("capUnspecified", 10))

class FspR7CpErrorCategory(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("undefined", 0), ("success", 1), ("nonOptimal", 2), ("provision", 3), ("pathComputation", 4), ("communicationConnection", 5), ("networkCommunication", 6), ("resourceUnavailable", 7), ("progress", 8), ("noPath", 9))

class FspR7CpNePosition(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("local", 1), ("ingress", 2), ("egress", 3), ("transit", 4))

class FspR7CpNodeId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("tid", 1), ("ip", 2))

class FspR7CpOperateReversion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("release", 1), ("manual", 2))

class FspR7CpOspfTeRouting(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7CpOspfTeRoutingCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7CpPathType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("prov", 1), ("sig", 2), ("comp", 3))

class FspR7CpPinning(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7CpPinningCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7CpPreprovUeqState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7CpPreprovUeqStateCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7CpProtectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("desired", 2), ("required", 3))

class FspR7CpProtectionTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capDesired", 2), ("capRequired", 3))

class FspR7CpProtType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("onePlusOne", 1), ("oneToOne", 2))

class FspR7CpRecoveryType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("desired", 2), ("required", 3), ("restoration", 4))

class FspR7CpRecoveryTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capDesired", 2), ("capRequired", 3), ("capRestoration", 4))

class FspR7CpRestorationState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("idle", 1), ("fail", 2), ("inProgress", 3), ("abort", 4), ("completed", 5), ("completedNotReverted", 6))

class FspR7CpRestorationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("primary", 2), ("secondary", 3), ("all", 4))

class FspR7CpRestorationTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capPrimary", 2), ("capSecondary", 3), ("capAll", 4))

class FspR7CpRestorationMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("dynamic", 2), ("guaranteed", 3))

class FspR7CpRestorationModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capDynamic", 2), ("capGuaranteed", 3))

class FspR7CpReversionState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("idle", 1), ("waitToRevert", 2), ("inProgress", 3), ("failed", 4))

class FspR7CpReversionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("manual", 2), ("auto", 3))

class FspR7CpReversionTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capManual", 2), ("capAuto", 3))

class FspR7CpRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("undefined", 0), ("working", 1), ("protection", 2), ("na", 3), ("workingNominal", 4), ("workingRestored", 5), ("protectionNominal", 6), ("protectionRestored", 7), ("nominal", 8), ("restored", 9))

class FspR7CpRsvpSignalling(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7CpRsvpSignallingCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7CpTEType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("node", 1), ("linkun", 2), ("linknr", 3))

class FspR7CpTETypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNode", 1), ("capLinkun", 2), ("capLinknr", 3))

class FspR7CpTie(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("strict", 1), ("loose", 2))

class FspR7CpTieCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capStrict", 1), ("capLoose", 2))

class FspR7CpTunnelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("undefined", 0), ("p2p", 1))

class FspR7CpTunnelTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capP2p", 1))

class FspR7CpTunnelScope(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("clientPort", 1), ("networkPort", 2))

class FspR7CpTunnelScopeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capClientPort", 1), ("capNetworkPort", 2))

class FspR7CpType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("intern", 1), ("gmpls", 2), ("none", 3), ("passive", 4), ("uni", 5), ("oifUni", 6), ("oifNni", 7))

class FspR7CpTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capIntern", 1), ("capGmpls", 2), ("capNone", 3), ("capPassive", 4), ("capUni", 5), ("capOifUni", 6), ("capOifNni", 7))

class FspR7CpVTeType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("vTeLink", 1), ("vTeNode", 2), ("vTeNodeRlink", 3), ("vTeNodeVlink", 4))

class FspR7CpVTeTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capVTeLink", 1), ("capVTeNode", 2), ("capVTeNodeRlink", 3), ("capVTeNodeVlink", 4))

class FspR7DatabaseType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("auxiliary", 1), ("normal", 2))

class FspR7Date(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2d-1d-1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class FspR7DCFiberType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("singleMode", 1), ("trueWaveRs", 2))

class FspR7DCFiberTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSingleMode", 1), ("capTrueWaveRs", 2))

class FspR7DeploymentScenario(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("generic", 1), ("backToBack", 2), ("clientProt", 3), ("passThrough", 4))

class FspR7DeploymentScenarioCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capGeneric", 1), ("capBackToBack", 2), ("capClientProt", 3), ("capPassThrough", 4))

class FspR7DispersionCompensation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("undefined", 0), ("dispertion10", 1), ("dispertion20", 2), ("dispertion40", 3), ("dispertion60", 4), ("dispertion80", 5), ("dispertion100", 6), ("dispertion30", 7), ("dispertion50", 8), ("dispertion70", 9), ("dispertion90", 10), ("dispertion160", 11), ("dispertion240", 12), ("dispertion320", 13))

class FspR7DispersionCompensationCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capDispertion10", 1), ("capDispertion20", 2), ("capDispertion40", 3), ("capDispertion60", 4), ("capDispertion80", 5), ("capDispertion100", 6), ("capDispertion30", 7), ("capDispertion50", 8), ("capDispertion70", 9), ("capDispertion90", 10), ("capDispertion160", 11), ("capDispertion240", 12), ("capDispertion320", 13))

class FspR7DispersionConfig(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("oprCdc", 2))

class FspR7DispersionConfigCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOprCdc", 2))

class FspR7DispersionModes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("auto", 1), ("man", 2))

class FspR7DispersionModesCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAuto", 1), ("capMan", 2))

class FspR7DispersionOperation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("man", 2), ("auto", 3))

class FspR7DispersionOperationCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capMan", 2), ("capAuto", 3))

class FspR7EdfaOutputPowerRating(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("pwrOut10", 1), ("pwrOut17", 2), ("pwrOut18", 3), ("pwrOut20", 4), ("pwrOut15", 5), ("pwrOut27", 6), ("pwrOut26", 7))

class FspR7EdfaOutputPowerRatingCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capPwrOut10", 1), ("capPwrOut17", 2), ("capPwrOut18", 3), ("capPwrOut20", 4), ("capPwrOut15", 5), ("capPwrOut27", 6), ("capPwrOut26", 7))

class FspR7EnableDisable(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7EnableDisableCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7EntitySecondaryStates(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("ueq", 0), ("meaState", 1), ("sgeo", 2), ("lpbkState", 3), ("lkdo", 4), ("frcdState", 5), ("faf", 6), ("flt", 7), ("act", 8), ("stbyh", 9), ("psi", 10), ("pri", 11), ("dgn", 12), ("busy", 13), ("idleState", 14), ("receiveIdleState", 15), ("transmitIdleState", 16), ("sgeoSrv", 17), ("farEndPlugOutage", 18), ("aseTableBuildState", 19), ("testState", 20), ("testFailed", 21))

class FspR7EntityType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 137, 138, 140, 141, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 192, 193, 194, 203, 204, 205, 213, 214, 218, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593), SingleValueConstraint(594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 660, 662, 663, 665, 667, 673, 674, 1000, 1001, 1002, 1003, 1004, 1005, 1101, 1102, 1103))
    namedValues = NamedValues(("undefined", 0), ("eqpSh1hu", 1), ("eqpSh1huDc", 2), ("eqpSh3hu", 3), ("eqpSh7hu", 4), ("eqpF2kSh5hu", 5), ("eqpF2kSh6hu", 6), ("eqpDcm", 7), ("eqpSh9hu", 8), ("eqpUnknown", 19), ("eqpNcu", 20), ("eqpNcutif", 21), ("eqpScu", 22), ("eqpScue", 23), ("eqpR6cu", 24), ("eqpPsu1huac", 25), ("eqpPsu7huac", 26), ("eqpPsu7hudc", 27), ("eqpFcu7hu", 28), ("eqp2clsmd", 29), ("eqp2absmc", 30), ("eqp2bsmd", 31), ("eqp1Gsmud", 32), ("eqp4gsmd", 33), ("eqp8gsmd", 34), ("eqp1csmuc", 35), ("eqp1csmuewc", 36), ("eqp4csmd", 37), ("eqp4csmud", 38), ("eqp4csmc", 39), ("eqpOsfm", 40), ("eqp1pm", 41), ("eqp2pm", 42), ("eqp40csmd", 43), ("eqpDcf", 44), ("eqpEdfas", 45), ("eqpEdfasgc", 46), ("eqpEdfadgc", 47), ("eqpRaman", 48), ("eqp4tcc2g5", 49), ("eqp4tcc2g5d", 50), ("eqp4tcc10gd", 51), ("eqp4tcc10gc", 52), ("eqpWcc10gd", 53), ("eqpWcc10gc", 54), ("eqpWcc2g71N", 55), ("eqpWcc2g7d", 56), ("eqp2tcm2g5", 57), ("eqp2tca2g5", 58), ("eqp8tca10gd", 59), ("eqp8tca10gc", 60), ("eqpWca10gd", 61), ("eqpWca10gc", 62), ("eqp4tca4gd", 63), ("eqp4tca4gc", 64), ("eqpwca2g5", 65), ("eqp4tca1g3d", 66), ("eqp4tca1g3c", 67), ("eqp8tce2g5d", 68), ("eqp8tce2g5c", 69), ("eqpWcelsd", 70), ("eqpWcelsc", 71), ("eqpVsm", 72), ("eqpRsmolm", 73), ("eqpRsmsf", 74), ("eqpOscm", 75), ("eqp2oscm", 76), ("eqpDrm", 77), ("eqpXfpG", 78), ("eqpsfpd", 79), ("eqpSfpc", 80), ("eqpSfpg", 81), ("eqpSfpe", 82), ("eqpSh1hudcm", 83), ("eqpCustomc", 84), ("eqpCustomd", 85), ("eqpPsu1hudc", 86), ("eqpWcc2g7c", 87), ("eqp1csmuEwD", 88), ("eqp1csmuG", 89), ("eqp3BsmC", 90), ("eqp2Tca2g5s", 91), ("eqp8Csmuc", 92), ("eqpEdfaDgcb", 93), ("eqpOscmPn", 94), ("eqp4Tcc10gtd", 95), ("eqp4Tca4g", 96), ("eqpDcg", 97), ("eqp2Tcm2g5d", 98), ("eqp2Tcm2g5c", 99), ("eqpWcm2g5d", 100), ("eqpWcm2g5c", 101), ("eqpEdfmSgc", 102), ("eqpF2kDemiV2", 103), ("eqpPsm", 104), ("eqpNcu2e", 105), ("eqp8TceGl2g5d", 106), ("eqp8TceGl2g5c", 107), ("eqpDcf1hu", 108), ("eqp10tcc10gtd", 109), ("eqp10tcc10gd", 110), ("eqp10tcc10gc", 111), ("eqp16csmSfd", 112), ("eqpOsfmSf", 113), ("eqp2clsmSfd", 114), ("eqp3bsmEwc", 115), ("eqpEdfaSgcb", 116), ("eqpEdfaDgcv", 117), ("eqpWcc10gtd", 118), ("eqp2csmuEwc", 119), ("eqpEroadmDc", 120), ("eqpScuS", 122), ("eqp4opcm", 123), ("eqpUtm", 124), ("eqpPscu", 125), ("eqp40Csm2hu", 126), ("eqp2Twcc2g7", 127), ("eqp2Wca10g", 130), ("eqpNcuHp", 131), ("eqpNcu20085hu", 132), ("eqpXfpC", 137), ("eqpXfpD", 138), ("eqpWcc40gtd", 140), ("eqpIlm", 141), ("eqpNcuII", 142), ("eqpCem9hu", 143), ("eqp8roadmC40", 148), ("eqp4Tcc40gtd", 149), ("eqp2pca10g", 150), ("eqp10pca10g", 151), ("eqp1csmuD", 152), ("eqpSfpOsC", 153), ("eqpSfpOdC", 154), ("eqpSfpOsG", 155), ("eqpSfpOdG", 156), ("eqpRoadmC80", 157), ("eqpccm8", 158), ("eqpPsu9hudc", 159), ("eqp4tca4gus", 160), ("eqp40Csm3huD", 161), ("eqp5psm", 162), ("eqpFan9hu", 163), ("eqp5tce10gtd", 164), ("eqp10tccs10gtd", 165), ("eqp40Csm3hudcD", 166), ("eqp40Csm3hudcDi", 167), ("eqp5gsmD", 169), ("eqp8csmD", 170), ("eqp2otfm", 171), ("eqp8otdr3hu", 172), ("eqpXfptD", 173), ("eqp40Csm3huDi", 174), ("eqp8CcmC80", 175), ("eqpEdfaD27", 176), ("eqp2Wcc10g", 177), ("eqp8RoadmC80", 178), ("eqp2Wcc10gAes", 180), ("eqp5tce10gtaesd", 182), ("eqpSh1hupf", 183), ("eqpFan1hu", 185), ("eqp10tcc10g", 186), ("eqpXfpOtnD", 187), ("eqp2Raman", 192), ("eqpEdfaS26", 193), ("eqp5tces10gtd", 194), ("eqpWcc100gtD", 203), ("eqpCfp4g", 204), ("eqpCfp10g", 205), ("eqpXfpTlnD", 213), ("eqp5tces10gtaesd", 214), ("eqp2psm", 218), ("ifTypeOtu1", 501), ("ifTypeOtu2", 502), ("ifType10GbE", 503), ("ifTypeOc192", 504), ("ifTypeOc48", 505), ("ifTypeStm16", 506), ("ifTypeStm64", 507), ("ifType10GFC", 508), ("ifTypeF1062", 510), ("ifTypeF1250", 511), ("ifTypeFC", 512), ("ifTypeF125", 513), ("ifTypeF200", 514), ("ifTypeF9953", 515), ("ifTypeF10312", 516), ("ifTypeF10518", 517), ("ifTypeF2488", 518), ("ifTypeGfpF", 519), ("ifTypeGfpT", 520), ("ifTypeDccL", 521), ("ifTypeDccS", 522), ("ifTypeDccP", 523), ("ifTypeOdu1", 524), ("ifTypeGcc0", 525), ("ifTypeGcc1", 526), ("ifTypeGcc2", 527), ("ifTypeoch", 528), ("ifTypeOm", 529), ("ifTypeOt", 534), ("ifTypeE10or100bt", 536), ("ifTypeE100fx", 537), ("ifTypeCl", 538), ("ifType2GFC", 539), ("ifType2GCL", 540), ("ifType1GbE", 541), ("ifTypeEoc", 542), ("ifTypeSwitch", 543), ("ifTypePassive", 544), ("ifTypeF2500", 545), ("ifTypeSc", 546), ("ifTypeUch", 547), ("ifTypeF155", 548), ("ifTypeF622", 549), ("ifTypeF2125", 550), ("ifTypeF2666", 551), ("ifTypeF4250", 552), ("ifTypeF10709", 554), ("ifTypeF11095", 555), ("ifTypeF11318", 556), ("ifTypeLs", 557), ("ifType4Gfc", 558), ("ifTypeGcc0S", 559), ("ifType2R", 560), ("ifTypePppIp", 561), ("ifTypeLanIp", 562), ("ifTypeSerial", 564), ("ifTypeModem", 565), ("ifTypeAdapt", 566), ("ifTypeAdaptd", 567), ("ifTypeGBEFR", 569), ("ifTypeVc4", 570), ("ifTypeVc3", 571), ("ifTypeSts1", 572), ("ifTypeEdfa", 573), ("ifTypeEdfaMid", 574), ("ifType10Gdw", 575), ("ifTypeOtu2Lan", 576), ("ifTypeOtu1Lan", 577), ("ifTypeOtu1Fc", 578), ("ifTypeOtu1Fc2G", 579), ("ifTypeF197", 580), ("ifTypeTif", 581), ("ifTypeSts3c", 582), ("ifTypeVs1", 583), ("ifType1GbETH", 584), ("ifTypeStm1", 585), ("ifTypeStm4", 586), ("ifTypeOc3", 587), ("ifTypeOc12", 588), ("ifTypeOtu1Stm1", 589), ("ifTypeOtu1Stm4", 590), ("ifTypeF166", 591), ("ifTypeF666", 592), ("ifTypeI2C", 593)) + NamedValues(("ifTypeLifIP", 594), ("ifTypeSts24c", 595), ("ifTypeSts48c", 596), ("ifTypeLifte", 597), ("ifTypeRaman", 598), ("ifTypeIpWhiteList", 599), ("ifTypeOspfIp", 600), ("ifTypeEncapIp", 601), ("ifTypeOtu3", 602), ("ifTypeStm256", 603), ("ifTypeOc768", 604), ("ifTypeF10664", 605), ("ifTypeOdu2", 606), ("ifTypeF39813", 607), ("ifTypeVc4c8", 608), ("ifTypeVc4c16", 609), ("ifTypeF8500", 610), ("ifTypePb", 611), ("ifTypePolicer", 612), ("ifTypeQueue", 613), ("ifTypeFlowPoint", 614), ("ifTypeLag", 615), ("ifTypeElinePPP", 616), ("ifTypeEtree", 617), ("ifTypeEline", 618), ("ifTypeElan", 619), ("ifTypeCtrans", 620), ("ifTypeVs0", 621), ("ifTypeTug", 622), ("ifTypeMd", 623), ("ifTypeMa", 624), ("ifTypeDownMep", 625), ("ifTypeFMep", 626), ("ifType8Gfc", 627), ("ifType10Gib", 628), ("ifTypeF10000", 629), ("ifTypeOtu2pFC8", 630), ("ifTypeOtu2pIB", 631), ("ifTypeOtu2pFC", 632), ("ifTypeOtu2pLAN", 633), ("ifTypeOtu2p", 634), ("ifTypeUpMep", 635), ("ifTypeOtdrCh", 636), ("ifTypeMaNet", 637), ("ifTypeMaComp", 638), ("ifTypeBridge", 639), ("ifType1000BaseT", 640), ("ifTypeOtu2E", 641), ("ifTypeOtu1E", 642), ("ifTypeOtu2F", 643), ("ifTypeF11049", 644), ("ifTypeLifteNum", 645), ("ifTypeLifteUnn", 646), ("ifTypeLifPbNum", 647), ("ifTypeLifSubUnn", 648), ("ifType5Gib", 649), ("ifTypeF5000", 650), ("ifTypeOtu2eEth", 651), ("ifTypeOdu0", 652), ("ifTypeFcu", 653), ("ifTypeOtu4", 654), ("ifType100GbE", 660), ("ifType10GbEWan", 662), ("ifType10GbELan", 663), ("ifTypeOtlc", 665), ("ifTypeOtu2ps", 667), ("ifTypeLifVTeNum", 673), ("ifTypeLifVTeUnn", 674), ("grpffpCh", 1000), ("grpffpOm", 1001), ("grpCrsDcn", 1002), ("grpLanDcn", 1003), ("grpConn", 1004), ("grpffpVchN", 1005), ("conFanContainer", 1101), ("conModContainer", 1102), ("conPlugContainer", 1103))

class FspR7EocProtAvailability(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("no", 1), ("yes", 2))

class FspR7EqlzAdminState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enabled", 1), ("disabled", 2))

class FspR7EqlzAdminStateCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnabled", 1), ("capDisabled", 2))

class FspR7EqlzInterval(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("interval-2-hr", 1), ("interval-4-hr", 2), ("interval-12-hr", 3), ("interval-1-day", 4), ("interval-7-day", 5), ("interval-5-min", 6))

class FspR7EqlzIntervalCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capInterval-2-hr", 1), ("capInterval-4-hr", 2), ("capInterval-12-hr", 3), ("capInterval-1-day", 4), ("capInterval-7-day", 5), ("capInterval-5-min", 6))

class FspR7EquipmentType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 137, 138, 140, 141, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 192, 193, 194, 203, 204, 205, 213, 214, 218))
    namedValues = NamedValues(("undefined", 0), ("eqpSh1hu", 1), ("eqpSh1huDc", 2), ("eqpSh3hu", 3), ("eqpSh7hu", 4), ("eqpF2kSh5hu", 5), ("eqpF2kSh6hu", 6), ("eqpDcm", 7), ("eqpSh9hu", 8), ("eqpUnknown", 19), ("eqpNcu", 20), ("eqpNcutif", 21), ("eqpScu", 22), ("eqpScue", 23), ("eqpR6cu", 24), ("eqpPsu1huac", 25), ("eqpPsu7huac", 26), ("eqpPsu7hudc", 27), ("eqpFcu7hu", 28), ("eqp2clsmd", 29), ("eqp2absmc", 30), ("eqp2bsmd", 31), ("eqp1Gsmud", 32), ("eqp4gsmd", 33), ("eqp8gsmd", 34), ("eqp1csmuc", 35), ("eqp1csmuewc", 36), ("eqp4csmd", 37), ("eqp4csmud", 38), ("eqp4csmc", 39), ("eqpOsfm", 40), ("eqp1pm", 41), ("eqp2pm", 42), ("eqp40csmd", 43), ("eqpDcf", 44), ("eqpEdfas", 45), ("eqpEdfasgc", 46), ("eqpEdfadgc", 47), ("eqpRaman", 48), ("eqp4tcc2g5", 49), ("eqp4tcc2g5d", 50), ("eqp4tcc10gd", 51), ("eqp4tcc10gc", 52), ("eqpWcc10gd", 53), ("eqpWcc10gc", 54), ("eqpWcc2g71N", 55), ("eqpWcc2g7d", 56), ("eqp2tcm2g5", 57), ("eqp2tca2g5", 58), ("eqp8tca10gd", 59), ("eqp8tca10gc", 60), ("eqpWca10gd", 61), ("eqpWca10gc", 62), ("eqp4tca4gd", 63), ("eqp4tca4gc", 64), ("eqpwca2g5", 65), ("eqp4tca1g3d", 66), ("eqp4tca1g3c", 67), ("eqp8tce2g5d", 68), ("eqp8tce2g5c", 69), ("eqpWcelsd", 70), ("eqpWcelsc", 71), ("eqpVsm", 72), ("eqpRsmolm", 73), ("eqpRsmsf", 74), ("eqpOscm", 75), ("eqp2oscm", 76), ("eqpDrm", 77), ("eqpXfpG", 78), ("eqpsfpd", 79), ("eqpSfpc", 80), ("eqpSfpg", 81), ("eqpSfpe", 82), ("eqpSh1hudcm", 83), ("eqpCustomc", 84), ("eqpCustomd", 85), ("eqpPsu1hudc", 86), ("eqpWcc2g7c", 87), ("eqp1csmuEwD", 88), ("eqp1csmuG", 89), ("eqp3BsmC", 90), ("eqp2Tca2g5s", 91), ("eqp8Csmuc", 92), ("eqpEdfaDgcb", 93), ("eqpOscmPn", 94), ("eqp4Tcc10gtd", 95), ("eqp4Tca4g", 96), ("eqpDcg", 97), ("eqp2Tcm2g5d", 98), ("eqp2Tcm2g5c", 99), ("eqpWcm2g5d", 100), ("eqpWcm2g5c", 101), ("eqpEdfmSgc", 102), ("eqpF2kDemiV2", 103), ("eqpPsm", 104), ("eqpNcu2e", 105), ("eqp8TceGl2g5d", 106), ("eqp8TceGl2g5c", 107), ("eqpDcf1hu", 108), ("eqp10tcc10gtd", 109), ("eqp10tcc10gd", 110), ("eqp10tcc10gc", 111), ("eqp16csmSfd", 112), ("eqpOsfmSf", 113), ("eqp2clsmSfd", 114), ("eqp3bsmEwc", 115), ("eqpEdfaSgcb", 116), ("eqpEdfaDgcv", 117), ("eqpWcc10gtd", 118), ("eqp2csmuEwc", 119), ("eqpEroadmDc", 120), ("eqpScuS", 122), ("eqp4opcm", 123), ("eqpUtm", 124), ("eqpPscu", 125), ("eqp40Csm2hu", 126), ("eqp2Twcc2g7", 127), ("eqp2Wca10g", 130), ("eqpNcuHp", 131), ("eqpNcu20085hu", 132), ("eqpXfpC", 137), ("eqpXfpD", 138), ("eqpWcc40gtd", 140), ("eqpIlm", 141), ("eqpNcuII", 142), ("eqpCem9hu", 143), ("eqp8roadmC40", 148), ("eqp4Tcc40gtd", 149), ("eqp2pca10g", 150), ("eqp10pca10g", 151), ("eqp1csmuD", 152), ("eqpSfpOsC", 153), ("eqpSfpOdC", 154), ("eqpSfpOsG", 155), ("eqpSfpOdG", 156), ("eqpRoadmC80", 157), ("eqpccm8", 158), ("eqpPsu9hudc", 159), ("eqp4tca4gus", 160), ("eqp40Csm3huD", 161), ("eqp5psm", 162), ("eqpFan9hu", 163), ("eqp5tce10gtd", 164), ("eqp10tccs10gtd", 165), ("eqp40Csm3hudcD", 166), ("eqp40Csm3hudcDi", 167), ("eqp5gsmD", 169), ("eqp8csmD", 170), ("eqp2otfm", 171), ("eqp8otdr3hu", 172), ("eqpXfptD", 173), ("eqp40Csm3huDi", 174), ("eqp8CcmC80", 175), ("eqpEdfaD27", 176), ("eqp2Wcc10g", 177), ("eqp8RoadmC80", 178), ("eqp2Wcc10gAes", 180), ("eqp5tce10gtaesd", 182), ("eqpSh1hupf", 183), ("eqpFan1hu", 185), ("eqp10tcc10g", 186), ("eqpXfpOtnD", 187), ("eqp2Raman", 192), ("eqpEdfaS26", 193), ("eqp5tces10gtd", 194), ("eqpWcc100gtD", 203), ("eqpCfp4g", 204), ("eqpCfp10g", 205), ("eqpXfpTlnD", 213), ("eqp5tces10gtaesd", 214), ("eqp2psm", 218))

class FspR7EquipmentTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEqpSh1hu", 1), ("capEqpSh1huDc", 2), ("capEqpSh3hu", 3), ("capEqpSh7hu", 4), ("capEqpF2kSh5hu", 5), ("capEqpF2kSh6hu", 6), ("capEqpDcm", 7), ("capEqpSh9hu", 8), ("capEqpUnknown", 19), ("capEqpNcu", 20), ("capEqpNcutif", 21), ("capEqpScu", 22), ("capEqpScue", 23), ("capEqpR6cu", 24), ("capEqpPsu1huac", 25), ("capEqpPsu7huac", 26), ("capEqpPsu7hudc", 27), ("capEqpFcu7hu", 28), ("capEqp2clsmd", 29), ("capEqp2absmc", 30), ("capEqp2bsmd", 31), ("capEqp1Gsmud", 32), ("capEqp4gsmd", 33), ("capEqp8gsmd", 34), ("capEqp1csmuc", 35), ("capEqp1csmuewc", 36), ("capEqp4csmd", 37), ("capEqp4csmud", 38), ("capEqp4csmc", 39), ("capEqpOsfm", 40), ("capEqp1pm", 41), ("capEqp2pm", 42), ("capEqp40csmd", 43), ("capEqpDcf", 44), ("capEqpEdfas", 45), ("capEqpEdfasgc", 46), ("capEqpEdfadgc", 47), ("capEqpRaman", 48), ("capEqp4tcc2g5", 49), ("capEqp4tcc2g5d", 50), ("capEqp4tcc10gd", 51), ("capEqp4tcc10gc", 52), ("capEqpWcc10gd", 53), ("capEqpWcc10gc", 54), ("capEqpWcc2g71N", 55), ("capEqpWcc2g7d", 56), ("capEqp2tcm2g5", 57), ("capEqp2tca2g5", 58), ("capEqp8tca10gd", 59), ("capEqp8tca10gc", 60), ("capEqpWca10gd", 61), ("capEqpWca10gc", 62), ("capEqp4tca4gd", 63), ("capEqp4tca4gc", 64), ("capEqpwca2g5", 65), ("capEqp4tca1g3d", 66), ("capEqp4tca1g3c", 67), ("capEqp8tce2g5d", 68), ("capEqp8tce2g5c", 69), ("capEqpWcelsd", 70), ("capEqpWcelsc", 71), ("capEqpVsm", 72), ("capEqpRsmolm", 73), ("capEqpRsmsf", 74), ("capEqpOscm", 75), ("capEqp2oscm", 76), ("capEqpDrm", 77), ("capEqpXfpG", 78), ("capEqpsfpd", 79), ("capEqpSfpc", 80), ("capEqpSfpg", 81), ("capEqpSfpe", 82), ("capEqpSh1hudcm", 83), ("capEqpCustomc", 84), ("capEqpCustomd", 85), ("capEqpPsu1hudc", 86), ("capEqpWcc2g7c", 87), ("capEqp1csmuEwD", 88), ("capEqp1csmuG", 89), ("capEqp3BsmC", 90), ("capEqp2Tca2g5s", 91), ("capEqp8Csmuc", 92), ("capEqpEdfaDgcb", 93), ("capEqpOscmPn", 94), ("capEqp4Tcc10gtd", 95), ("capEqp4Tca4g", 96), ("capEqpDcg", 97), ("capEqp2Tcm2g5d", 98), ("capEqp2Tcm2g5c", 99), ("capEqpWcm2g5d", 100), ("capEqpWcm2g5c", 101), ("capEqpEdfmSgc", 102), ("capEqpF2kDemiV2", 103), ("capEqpPsm", 104), ("capEqpNcu2e", 105), ("capEqp8TceGl2g5d", 106), ("capEqp8TceGl2g5c", 107), ("capEqpDcf1hu", 108), ("capEqp10tcc10gtd", 109), ("capEqp10tcc10gd", 110), ("capEqp10tcc10gc", 111), ("capEqp16csmSfd", 112), ("capEqpOsfmSf", 113), ("capEqp2clsmSfd", 114), ("capEqp3bsmEwc", 115), ("capEqpEdfaSgcb", 116), ("capEqpEdfaDgcv", 117), ("capEqpWcc10gtd", 118), ("capEqp2csmuEwc", 119), ("capEqpEroadmDc", 120), ("capEqpScuS", 122), ("capEqp4opcm", 123), ("capEqpUtm", 124), ("capEqpPscu", 125), ("capEqp40Csm2hu", 126), ("capEqp2Twcc2g7", 127), ("capEqp2Wca10g", 130), ("capEqpNcuHp", 131), ("capEqpNcu20085hu", 132), ("capEqpXfpC", 137), ("capEqpXfpD", 138), ("capEqpWcc40gtd", 140), ("capEqpIlm", 141), ("capEqpNcuII", 142), ("capEqpCem9hu", 143), ("capEqp8roadmC40", 148), ("capEqp4Tcc40gtd", 149), ("capEqp2pca10g", 150), ("capEqp10pca10g", 151), ("capEqp1csmuD", 152), ("capEqpSfpOsC", 153), ("capEqpSfpOdC", 154), ("capEqpSfpOsG", 155), ("capEqpSfpOdG", 156), ("capEqpRoadmC80", 157), ("capEqpccm8", 158), ("capEqpPsu9hudc", 159), ("capEqp4tca4gus", 160), ("capEqp40Csm3huD", 161), ("capEqp5psm", 162), ("capEqpFan9hu", 163), ("capEqp5tce10gtd", 164), ("capEqp10tccs10gtd", 165), ("capEqp40Csm3hudcD", 166), ("capEqp40Csm3hudcDi", 167), ("capEqp5gsmD", 169), ("capEqp8csmD", 170), ("capEqp2otfm", 171), ("capEqp8otdr3hu", 172), ("capEqpXfptD", 173), ("capEqp40Csm3huDi", 174), ("capEqp8CcmC80", 175), ("capEqpEdfaD27", 176), ("capEqp2Wcc10g", 177), ("capEqp8RoadmC80", 178), ("capEqp2Wcc10gAes", 180), ("capEqp5tce10gtaesd", 182), ("capEqpSh1hupf", 183), ("capEqpFan1hu", 185), ("capEqp10tcc10g", 186), ("capEqpXfpOtnD", 187), ("capEqp2Raman", 192), ("capEqpEdfaS26", 193), ("capEqp5tces10gtd", 194), ("capEqpWcc100gtD", 203), ("capEqpCfp4g", 204), ("capEqpCfp10g", 205), ("capEqpXfpTlnD", 213), ("capEqp5tces10gtaesd", 214), ("capEqp2psm", 218))

class FspR7ErrorFwdMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("ais", 1), ("epc", 2), ("idle", 3), ("lsrOff", 4), ("lsrBrk", 5), ("txOff", 6))

class FspR7ErrorFwdModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAis", 1), ("capEpc", 2), ("capIdle", 3), ("capLsrOff", 4), ("capLsrBrk", 5), ("capTxOff", 6))

class FspR7FalseTrue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("false", 1), ("true", 2))

class FspR7FalseTrueCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capFalse", 1), ("capTrue", 2))

class FspR7FecType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("gFec", 1), ("eFec", 2), ("noFec", 3), ("eFec1", 4), ("eFec2", 5), ("eFec3", 6), ("eFec4", 7))

class FspR7FecTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capGFec", 1), ("capEFec", 2), ("capNoFec", 3), ("capEFec1", 4), ("capEFec2", 5), ("capEFec3", 6), ("capEFec4", 7))

class FspR7FiberBrand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("undefined", 0), ("g652", 1), ("g653", 2), ("g655", 3), ("smf28e", 4), ("allWave", 5), ("leaf", 6), ("twRs", 7), ("twPl", 8), ("twCl", 9), ("teraLight", 10), ("smfLs", 11), ("metrocor", 12))

class FspR7FiberBrandCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capG652", 1), ("capG653", 2), ("capG655", 3), ("capSmf28e", 4), ("capAllWave", 5), ("capLeaf", 6), ("capTwRs", 7), ("capTwPl", 8), ("capTwCl", 9), ("capTeraLight", 10), ("capSmfLs", 11), ("capMetrocor", 12))

class FspR7FlowControlMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("hwControl", 2), ("pause", 3))

class FspR7FlowControlModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capHwControl", 2), ("capPause", 3))

class FspR7ForcedStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("active", 1), ("forcedDestroy", 2))

class FspR7ForcedStatusCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capActive", 1), ("capForcedDestroy", 2))

class FspR7FrameFormat(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 99))
    namedValues = NamedValues(("undefined", 0), ("otn", 1), ("sdh", 2), ("sonet", 3), ("ethernet", 4), ("fiberchannel", 5), ("infiniband", 6), ("couplinglink", 7), ("transparent", 8), ("notDefined", 99))

class FspR7FrameFormatCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOtn", 1), ("capSdh", 2), ("capSonet", 3), ("capEthernet", 4), ("capFiberchannel", 5), ("capInfiniband", 6), ("capCouplinglink", 7), ("capTransparent", 8), ("capNotDefined", 99))

class FspR7FtpServer(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7FtpServerCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7FtpClient(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7FunctionCrs(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("add", 1), ("drop", 2), ("pass", 3), ("hairpin", 4))

class FspR7Gain(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("gain24", 1), ("gain25", 2))

class FspR7GainCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capGain24", 1), ("capGain25", 2))

class FspR7GainRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("high", 1), ("low", 2))

class FspR7GainRangeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capHigh", 1), ("capLow", 2))

class FspR7InitEqualization(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("opr", 2))

class FspR7InitEqualizationCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOpr", 2))

class FspR7InterfaceFunction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("transport", 1), ("switch", 2), ("edfa", 3), ("super", 4), ("passive", 5), ("active", 6), ("raman", 7))

class FspR7InterfaceFunctionCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capTransport", 1), ("capSwitch", 2), ("capEdfa", 3), ("capSuper", 4), ("capPassive", 5), ("capActive", 6), ("capRaman", 7))

class FspR7InterfaceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 160, 162, 163, 165, 167, 173, 174))
    namedValues = NamedValues(("undefined", 0), ("ifTypeOtu1", 1), ("ifTypeOtu2", 2), ("ifType10GbE", 3), ("ifTypeOc192", 4), ("ifTypeOc48", 5), ("ifTypeStm16", 6), ("ifTypeStm64", 7), ("ifType10GFC", 8), ("ifTypeF1062", 10), ("ifTypeF1250", 11), ("ifTypeFC", 12), ("ifTypeF125", 13), ("ifTypeF200", 14), ("ifTypeF9953", 15), ("ifTypeF10312", 16), ("ifTypeF10518", 17), ("ifTypeF2488", 18), ("ifTypeGfpF", 19), ("ifTypeGfpT", 20), ("ifTypeDccL", 21), ("ifTypeDccS", 22), ("ifTypeDccP", 23), ("ifTypeOdu1", 24), ("ifTypeGcc0", 25), ("ifTypeGcc1", 26), ("ifTypeGcc2", 27), ("ifTypeoch", 28), ("ifTypeOm", 29), ("ifTypeOt", 34), ("ifTypeE10or100bt", 36), ("ifTypeE100fx", 37), ("ifTypeCl", 38), ("ifType2GFC", 39), ("ifType2GCL", 40), ("ifType1GbE", 41), ("ifTypeEoc", 42), ("ifTypeSwitch", 43), ("ifTypePassive", 44), ("ifTypeF2500", 45), ("ifTypeSc", 46), ("ifTypeUch", 47), ("ifTypeF155", 48), ("ifTypeF622", 49), ("ifTypeF2125", 50), ("ifTypeF2666", 51), ("ifTypeF4250", 52), ("ifTypeF10709", 54), ("ifTypeF11095", 55), ("ifTypeF11318", 56), ("ifTypeLs", 57), ("ifType4Gfc", 58), ("ifTypeGcc0S", 59), ("ifType2R", 60), ("ifTypePppIp", 61), ("ifTypeLanIp", 62), ("ifTypeSerial", 64), ("ifTypeModem", 65), ("ifTypeAdapt", 66), ("ifTypeAdaptd", 67), ("ifTypeGBEFR", 69), ("ifTypeVc4", 70), ("ifTypeVc3", 71), ("ifTypeSts1", 72), ("ifTypeEdfa", 73), ("ifTypeEdfaMid", 74), ("ifType10Gdw", 75), ("ifTypeOtu2Lan", 76), ("ifTypeOtu1Lan", 77), ("ifTypeOtu1Fc", 78), ("ifTypeOtu1Fc2G", 79), ("ifTypeF197", 80), ("ifTypeTif", 81), ("ifTypeSts3c", 82), ("ifTypeVs1", 83), ("ifType1GbETH", 84), ("ifTypeStm1", 85), ("ifTypeStm4", 86), ("ifTypeOc3", 87), ("ifTypeOc12", 88), ("ifTypeOtu1Stm1", 89), ("ifTypeOtu1Stm4", 90), ("ifTypeF166", 91), ("ifTypeF666", 92), ("ifTypeI2C", 93), ("ifTypeLifIP", 94), ("ifTypeSts24c", 95), ("ifTypeSts48c", 96), ("ifTypeLifte", 97), ("ifTypeRaman", 98), ("ifTypeIpWhiteList", 99), ("ifTypeOspfIp", 100), ("ifTypeEncapIp", 101), ("ifTypeOtu3", 102), ("ifTypeStm256", 103), ("ifTypeOc768", 104), ("ifTypeF10664", 105), ("ifTypeOdu2", 106), ("ifTypeF39813", 107), ("ifTypeVc4c8", 108), ("ifTypeVc4c16", 109), ("ifTypeF8500", 110), ("ifTypePb", 111), ("ifTypePolicer", 112), ("ifTypeQueue", 113), ("ifTypeFlowPoint", 114), ("ifTypeLag", 115), ("ifTypeElinePPP", 116), ("ifTypeEtree", 117), ("ifTypeEline", 118), ("ifTypeElan", 119), ("ifTypeCtrans", 120), ("ifTypeVs0", 121), ("ifTypeTug", 122), ("ifTypeMd", 123), ("ifTypeMa", 124), ("ifTypeDownMep", 125), ("ifTypeFMep", 126), ("ifType8Gfc", 127), ("ifType10Gib", 128), ("ifTypeF10000", 129), ("ifTypeOtu2pFC8", 130), ("ifTypeOtu2pIB", 131), ("ifTypeOtu2pFC", 132), ("ifTypeOtu2pLAN", 133), ("ifTypeOtu2p", 134), ("ifTypeUpMep", 135), ("ifTypeOtdrCh", 136), ("ifTypeMaNet", 137), ("ifTypeMaComp", 138), ("ifTypeBridge", 139), ("ifType1000BaseT", 140), ("ifTypeOtu2E", 141), ("ifTypeOtu1E", 142), ("ifTypeOtu2F", 143), ("ifTypeF11049", 144), ("ifTypeLifteNum", 145), ("ifTypeLifteUnn", 146), ("ifTypeLifPbNum", 147), ("ifTypeLifSubUnn", 148), ("ifType5Gib", 149), ("ifTypeF5000", 150), ("ifTypeOtu2eEth", 151), ("ifTypeOdu0", 152), ("ifTypeFcu", 153), ("ifTypeOtu4", 154), ("ifType100GbE", 160), ("ifType10GbEWan", 162), ("ifType10GbELan", 163), ("ifTypeOtlc", 165), ("ifTypeOtu2ps", 167), ("ifTypeLifVTeNum", 173), ("ifTypeLifVTeUnn", 174))

class FspR7InterfaceTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capIfTypeOtu1", 1), ("capIfTypeOtu2", 2), ("capIfType10GbE", 3), ("capIfTypeOc192", 4), ("capIfTypeOc48", 5), ("capIfTypeStm16", 6), ("capIfTypeStm64", 7), ("capIfType10GFC", 8), ("capIfTypeF1062", 10), ("capIfTypeF1250", 11), ("capIfTypeFC", 12), ("capIfTypeF125", 13), ("capIfTypeF200", 14), ("capIfTypeF9953", 15), ("capIfTypeF10312", 16), ("capIfTypeF10518", 17), ("capIfTypeF2488", 18), ("capIfTypeGfpF", 19), ("capIfTypeGfpT", 20), ("capIfTypeDccL", 21), ("capIfTypeDccS", 22), ("capIfTypeDccP", 23), ("capIfTypeOdu1", 24), ("capIfTypeGcc0", 25), ("capIfTypeGcc1", 26), ("capIfTypeGcc2", 27), ("capIfTypeoch", 28), ("capIfTypeOm", 29), ("capIfTypeOt", 34), ("capIfTypeE10or100bt", 36), ("capIfTypeE100fx", 37), ("capIfTypeCl", 38), ("capIfType2GFC", 39), ("capIfType2GCL", 40), ("capIfType1GbE", 41), ("capIfTypeEoc", 42), ("capIfTypeSwitch", 43), ("capIfTypePassive", 44), ("capIfTypeF2500", 45), ("capIfTypeSc", 46), ("capIfTypeUch", 47), ("capIfTypeF155", 48), ("capIfTypeF622", 49), ("capIfTypeF2125", 50), ("capIfTypeF2666", 51), ("capIfTypeF4250", 52), ("capIfTypeF10709", 54), ("capIfTypeF11095", 55), ("capIfTypeF11318", 56), ("capIfTypeLs", 57), ("capIfType4Gfc", 58), ("capIfTypeGcc0S", 59), ("capIfType2R", 60), ("capIfTypePppIp", 61), ("capIfTypeLanIp", 62), ("capIfTypeSerial", 64), ("capIfTypeModem", 65), ("capIfTypeAdapt", 66), ("capIfTypeAdaptd", 67), ("capIfTypeGBEFR", 69), ("capIfTypeVc4", 70), ("capIfTypeVc3", 71), ("capIfTypeSts1", 72), ("capIfTypeEdfa", 73), ("capIfTypeEdfaMid", 74), ("capIfType10Gdw", 75), ("capIfTypeOtu2Lan", 76), ("capIfTypeOtu1Lan", 77), ("capIfTypeOtu1Fc", 78), ("capIfTypeOtu1Fc2G", 79), ("capIfTypeF197", 80), ("capIfTypeTif", 81), ("capIfTypeSts3c", 82), ("capIfTypeVs1", 83), ("capIfType1GbETH", 84), ("capIfTypeStm1", 85), ("capIfTypeStm4", 86), ("capIfTypeOc3", 87), ("capIfTypeOc12", 88), ("capIfTypeOtu1Stm1", 89), ("capIfTypeOtu1Stm4", 90), ("capIfTypeF166", 91), ("capIfTypeF666", 92), ("capIfTypeI2C", 93), ("capIfTypeLifIP", 94), ("capIfTypeSts24c", 95), ("capIfTypeSts48c", 96), ("capIfTypeLifte", 97), ("capIfTypeRaman", 98), ("capIfTypeIpWhiteList", 99), ("capIfTypeOspfIp", 100), ("capIfTypeEncapIp", 101), ("capIfTypeOtu3", 102), ("capIfTypeStm256", 103), ("capIfTypeOc768", 104), ("capIfTypeF10664", 105), ("capIfTypeOdu2", 106), ("capIfTypeF39813", 107), ("capIfTypeVc4c8", 108), ("capIfTypeVc4c16", 109), ("capIfTypeF8500", 110), ("capIfTypePb", 111), ("capIfTypePolicer", 112), ("capIfTypeQueue", 113), ("capIfTypeFlowPoint", 114), ("capIfTypeLag", 115), ("capIfTypeElinePPP", 116), ("capIfTypeEtree", 117), ("capIfTypeEline", 118), ("capIfTypeElan", 119), ("capIfTypeCtrans", 120), ("capIfTypeVs0", 121), ("capIfTypeTug", 122), ("capIfTypeMd", 123), ("capIfTypeMa", 124), ("capIfTypeDownMep", 125), ("capIfTypeFMep", 126), ("capIfType8Gfc", 127), ("capIfType10Gib", 128), ("capIfTypeF10000", 129), ("capIfTypeOtu2pFC8", 130), ("capIfTypeOtu2pIB", 131), ("capIfTypeOtu2pFC", 132), ("capIfTypeOtu2pLAN", 133), ("capIfTypeOtu2p", 134), ("capIfTypeUpMep", 135), ("capIfTypeOtdrCh", 136), ("capIfTypeMaNet", 137), ("capIfTypeMaComp", 138), ("capIfTypeBridge", 139), ("capIfType1000BaseT", 140), ("capIfTypeOtu2E", 141), ("capIfTypeOtu1E", 142), ("capIfTypeOtu2F", 143), ("capIfTypeF11049", 144), ("capIfTypeLifteNum", 145), ("capIfTypeLifteUnn", 146), ("capIfTypeLifPbNum", 147), ("capIfTypeLifSubUnn", 148), ("capIfType5Gib", 149), ("capIfTypeF5000", 150), ("capIfTypeOtu2eEth", 151), ("capIfTypeOdu0", 152), ("capIfTypeFcu", 153), ("capIfTypeOtu4", 154), ("capIfType100GbE", 160), ("capIfType10GbEWan", 162), ("capIfType10GbELan", 163), ("capIfTypeOtlc", 165), ("capIfTypeOtu2ps", 167), ("capIfTypeLifVTeNum", 173), ("capIfTypeLifVTeUnn", 174))

class FspR7Integer32Caps(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class FspR7InvertTelemetryInputLogic(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("almClosed", 1), ("almOpen", 2))

class FspR7InvertTelemetryInputLogicCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAlmClosed", 1), ("capAlmOpen", 2))

class FspR7IpType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("unnumbered", 1), ("numbered", 2))

class FspR7IpTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capUnnumbered", 1), ("capNumbered", 2))

class FspR7L2CacEnable(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7L2CacEnableCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7LacpMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("active", 1), ("passive", 2), ("disable", 3))

class FspR7LacpModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capActive", 1), ("capPassive", 2), ("capDisable", 3))

class FspR7LacpTimeout(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("advaExtraShort", 1), ("short", 2), ("long", 3))

class FspR7LacpTimeoutCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAdvaExtraShort", 1), ("capShort", 2), ("capLong", 3))

class FspR7LagFendState(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 2)

class FspR7LagIdFend(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 10)

class FspR7LagLoadBallanceSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("srcMac", 1), ("destMac", 2), ("srcDestMac", 3), ("srcIp", 4), ("destIp", 5), ("srcDestIp", 6), ("vlanId", 7))

class FspR7LagLoadBallanceSourceCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSrcMac", 1), ("capDestMac", 2), ("capSrcDestMac", 3), ("capSrcIp", 4), ("capDestIp", 5), ("capSrcDestIp", 6), ("capVlanId", 7))

class FspR7LagPorts(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 200)

class FspR7LagPortType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("type1gb", 1), ("type10gb", 2))

class FspR7LagPortTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capType1gb", 1), ("capType10gb", 2))

class FspR7LagStandby(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 200)

class FspR7LagState(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 2)

class FspR7LagSysIdFend(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class FspR7LaserForcedOperation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("opr", 2))

class FspR7LaserForcedOperationCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOpr", 2))

class FspR7LaserOffDelayTime(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("del0ms", 1), ("del10ms", 2), ("del250ms", 3))

class FspR7LaserOffDelayTimeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capDel0ms", 1), ("capDel10ms", 2), ("capDel250ms", 3))

class FspR7LineCoding(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 99))
    namedValues = NamedValues(("undefined", 0), ("ookNrz", 1), ("dpsk", 2), ("qpsk", 3), ("dpQpsk", 4), ("odbPsbt", 5), ("mQam", 6), ("ofdm", 7), ("notDefined", 99))

class FspR7LineCodingCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOokNrz", 1), ("capDpsk", 2), ("capQpsk", 3), ("capDpQpsk", 4), ("capOdbPsbt", 5), ("capMQam", 6), ("capOfdm", 7), ("capNotDefined", 99))

class FspR7LossAttenuation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("opr", 2))

class FspR7LossAttenuationCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOpr", 2))

class FspR7ManualAuto(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("manual", 1), ("automatic", 2))

class FspR7ManualAutoCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capManual", 1), ("capAutomatic", 2))

class FspR7Mapping(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("frame", 1), ("trans", 2))

class FspR7MappingCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capFrame", 1), ("capTrans", 2))

class FspR7MaxBitErrorRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("undefined", 0), ("ber1e2", 1), ("ber1e3", 2), ("ber1e4", 3), ("ber1e5", 4), ("ber1e6", 5), ("ber1e7", 6), ("ber1e8", 7), ("ber1e9", 8), ("ber1e10", 9), ("ber1e11", 10), ("ber1e12", 11), ("ber1e13", 12), ("ber1e14", 13), ("ber1e15", 14))

class FspR7MaxBitErrorRateCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBer1e2", 1), ("capBer1e3", 2), ("capBer1e4", 3), ("capBer1e5", 4), ("capBer1e6", 5), ("capBer1e7", 6), ("capBer1e8", 7), ("capBer1e9", 8), ("capBer1e10", 9), ("capBer1e11", 10), ("capBer1e12", 11), ("capBer1e13", 12), ("capBer1e14", 13), ("capBer1e15", 14))

class FspR7ModeDbInit(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("restore", 2), ("startUpDefault", 3), ("startUpEqpt", 4))

class FspR7Model(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("fsp3000R7", 1), ("flashwave74200", 2))

class FspR7ModusLastRestart(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("reload", 1), ("cold", 2), ("warm", 3))

class FspR7NCTraceId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("undefined", 0), ("id1", 1), ("id2", 2), ("id3", 3), ("id4", 4), ("id5", 5), ("id6", 6), ("id7", 7), ("id8", 8))

class FspR7NCTRouteType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("fiber", 2), ("cable", 3), ("backPlane", 4), ("equipment", 5), ("provisioned", 6))

class FspR7NeType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("undefined", 0), ("wdm", 1))

class FspR7NodeId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("tid", 1), ("ip", 2))

class FspR7NodeIdCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capTid", 1), ("capIp", 2))

class FspR7NoYes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("no", 1), ("yes", 2))

class FspR7NoYesCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNo", 1), ("capYes", 2))

class FspR7NtpAdminState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 6))
    namedValues = NamedValues(("undefined", 0), ("is", 2), ("dsbld", 6))

class FspR7NtpMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("ntpOff", 1), ("ntpClientOnly", 2), ("ntpServerOnly", 3), ("ntpRelay", 4))

class FspR7NtpServerStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("unreachable", 1), ("reachable", 2))

class FspR7NtpSyncStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("noData", 1), ("systemPeer", 2), ("falseTicker", 3), ("candidate", 4), ("discarded", 5), ("inProgress", 6))

class FspR7NtpTest(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("ntpTest", 2))

class FspR7NtpTestStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("success", 1), ("fail", 2), ("idle", 3), ("inProgress", 4))

class FspR7NumberOfChannels(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("channels20", 1), ("channels40", 2), ("channels80", 3))

class FspR7NumberOfChannelsCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capChannels20", 1), ("capChannels40", 2), ("capChannels80", 3))

class FspR7OdtuType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("undefined", 0), ("odtu01", 1), ("odtu12", 2), ("odtu2dsh1", 3), ("odtu2dshTS", 4), ("odtu13", 5), ("odtu23", 6), ("odtu3dsh1", 7), ("odtu3dsh9", 8), ("odtu3dshTS", 9), ("odtu4dsh1", 10), ("odtu4dsh2", 11), ("odtu4dsh8", 12), ("odtu4dsh31", 13), ("odtu4dshTS", 14))

class FspR7OdtuTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOdtu01", 1), ("capOdtu12", 2), ("capOdtu2dsh1", 3), ("capOdtu2dshTS", 4), ("capOdtu13", 5), ("capOdtu23", 6), ("capOdtu3dsh1", 7), ("capOdtu3dsh9", 8), ("capOdtu3dshTS", 9), ("capOdtu4dsh1", 10), ("capOdtu4dsh2", 11), ("capOdtu4dsh8", 12), ("capOdtu4dsh31", 13), ("capOdtu4dshTS", 14))

class FspR7OperState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("nr", 1), ("anr", 2), ("out", 3), ("un", 4))

class FspR7OpticalBand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("bandC", 1), ("bandL", 2), ("bandA", 3), ("bandB", 4), ("bandCi", 5), ("bandCandCi", 6))

class FspR7OpticalBandCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBandC", 1), ("capBandL", 2), ("capBandA", 3), ("capBandB", 4), ("capBandCi", 5), ("capBandCandCi", 6))

class FspR7OpticalFiberType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("singleMode", 1), ("multiMode", 2), ("any", 3))

class FspR7OpticalFiberTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSingleMode", 1), ("capMultiMode", 2), ("capAny", 3))

class FspR7OpticalGroup(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))
    namedValues = NamedValues(("undefined", 0), ("d01d04", 1), ("d05d08", 2), ("d09d12", 3), ("d13d16", 4), ("d17d20", 5), ("d21d24", 6), ("d25d28", 7), ("d29d32", 8), ("d33d36", 9), ("d37d40", 10), ("d41d44", 11), ("d45d48", 12), ("d49d52", 13), ("d53d56", 14), ("d57d60", 15), ("d61d64", 16), ("f19590f19560", 17), ("f19550f19520", 18), ("f19510f19480", 19), ("f19470f19440", 20), ("f19430f19400", 21), ("f19390f19360", 22), ("f19350f19320", 23), ("f19310f19280", 24), ("f19270f19240", 25), ("f19230f19200", 26), ("f19590f19520", 27), ("f19510f19440", 28), ("f19430f19360", 29), ("f19350f19280", 30), ("f19270f19200", 31))

class FspR7OpticalGroupCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capD01d04", 1), ("capD05d08", 2), ("capD09d12", 3), ("capD13d16", 4), ("capD17d20", 5), ("capD21d24", 6), ("capD25d28", 7), ("capD29d32", 8), ("capD33d36", 9), ("capD37d40", 10), ("capD41d44", 11), ("capD45d48", 12), ("capD49d52", 13), ("capD53d56", 14), ("capD57d60", 15), ("capD61d64", 16), ("capF19590f19560", 17), ("capF19550f19520", 18), ("capF19510f19480", 19), ("capF19470f19440", 20), ("capF19430f19400", 21), ("capF19390f19360", 22), ("capF19350f19320", 23), ("capF19310f19280", 24), ("capF19270f19240", 25), ("capF19230f19200", 26), ("capF19590f19520", 27), ("capF19510f19440", 28), ("capF19430f19360", 29), ("capF19350f19280", 30), ("capF19270f19200", 31))

class FspR7OpticalInterfaceReach(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("undefined", 0), ("intra", 1), ("short", 2), ("long", 4), ("vlong", 5), ("ulong", 6), ("reg", 7), ("xlong", 8), ("longn", 10), ("extended", 11), ("hyperlong", 12), ("longNR", 13), ("ulongHaul", 14))

class FspR7OpticalInterfaceReachCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capIntra", 1), ("capShort", 2), ("capLong", 4), ("capVlong", 5), ("capUlong", 6), ("capReg", 7), ("capXlong", 8), ("capLongn", 10), ("capExtended", 11), ("capHyperlong", 12), ("capLongNR", 13), ("capUlongHaul", 14))

class FspR7OpticalMultiplexLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("undefined", 0), ("levelOm1D", 1), ("levelOm1C", 2), ("levelOm4D", 3), ("levelOm4C", 4), ("levelOm16D", 5), ("levelOm32D", 6), ("levelOm40D", 7), ("levelOmC", 9), ("levelOmD", 10), ("levelOtD", 11), ("levelOtC", 12), ("levelOt", 13))

class FspR7OpticalSubBand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("d01d16", 1), ("d17d32", 2), ("d33d48", 3), ("d49d64", 4))

class FspR7OpticalSubBandCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capD01d16", 1), ("capD17d32", 2), ("capD33d48", 3), ("capD49d64", 4))

class FspR7OpuPayloadType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))
    namedValues = NamedValues(("undefined", 0), ("pt01", 1), ("pt02", 2), ("pt03", 3), ("pt04", 4), ("pt05", 5), ("pt06", 6), ("pt07", 7), ("pt08", 8), ("pt09", 9), ("pt0A", 10), ("pt0B", 11), ("pt0C", 12), ("pt0D", 13), ("pt0E", 14), ("pt0F", 15), ("pt10", 16), ("pt11", 17), ("pt20", 18), ("pt21", 19), ("pt80", 20), ("pt81", 21), ("pt82", 22), ("pt83", 23), ("pt84", 24), ("pt85", 25), ("pt86", 26), ("pt87", 27), ("pt88", 28), ("pt89", 29), ("pt8A", 30), ("pt8B", 31), ("pt8C", 32), ("pt8D", 33), ("pt8E", 34), ("pt8F", 35), ("ptFD", 36), ("ptFE", 37))

class FspR7OpuPayloadTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capPt01", 1), ("capPt02", 2), ("capPt03", 3), ("capPt04", 4), ("capPt05", 5), ("capPt06", 6), ("capPt07", 7), ("capPt08", 8), ("capPt09", 9), ("capPt0A", 10), ("capPt0B", 11), ("capPt0C", 12), ("capPt0D", 13), ("capPt0E", 14), ("capPt0F", 15), ("capPt10", 16), ("capPt11", 17), ("capPt20", 18), ("capPt21", 19), ("capPt80", 20), ("capPt81", 21), ("capPt82", 22), ("capPt83", 23), ("capPt84", 24), ("capPt85", 25), ("capPt86", 26), ("capPt87", 27), ("capPt88", 28), ("capPt89", 29), ("capPt8A", 30), ("capPt8B", 31), ("capPt8C", 32), ("capPt8D", 33), ("capPt8E", 34), ("capPt8F", 35), ("capPtFD", 36), ("capPtFE", 37))

class FspR7OspfAreaType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("stub", 1), ("normal", 2))

class FspR7OspfAreaTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capStub", 1), ("capNormal", 2))

class FspR7OspfMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2), ("passive", 3))

class FspR7OspfModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2), ("capPassive", 3))

class FspR7OscChannel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 99, 100, 106, 197))
    namedValues = NamedValues(("undefined", 0), ("s1310", 99), ("s1630", 100), ("s1510", 106), ("s1610", 197))

class FspR7OscChannelCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capS1310", 99), ("capS1630", 100), ("capS1510", 106), ("capS1610", 197))

class FspR7OtdrPeriod(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("periodNone", 1), ("period5ms", 2), ("period20ms", 3), ("period40ms", 4), ("period60ms", 5))

class FspR7PacketsLayer(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("undefined", 0), ("lambda", 1), ("fiber", 2), ("tdm", 3), ("psc1", 4), ("psc2", 5), ("psc3", 6), ("psc4", 7), ("l2sc", 8), ("ethSvlan", 9), ("unspecified", 10), ("subLsc", 11), ("dcsc", 12), ("otn", 13))

class FspR7PacketsLayerCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLambda", 1), ("capFiber", 2), ("capTdm", 3), ("capPsc1", 4), ("capPsc2", 5), ("capPsc3", 6), ("capPsc4", 7), ("capL2sc", 8), ("capEthSvlan", 9), ("capUnspecified", 10), ("capSubLsc", 11), ("capDcsc", 12), ("capOtn", 13))

class FspR7ParityBit(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("undefined", 0), ("no", 1))

class FspR7PathNode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))
    namedValues = NamedValues(("undefined", 0), ("node1", 1), ("node2", 2), ("node3", 3), ("node4", 4), ("node5", 5), ("node6", 6), ("node7", 7), ("node8", 8), ("node9", 9), ("node10", 10), ("node11", 11), ("node12", 12), ("node13", 13), ("node14", 14), ("node15", 15), ("node16", 16), ("node17", 17), ("node18", 18), ("node19", 19), ("node20", 20), ("node21", 21), ("node22", 22), ("node23", 23), ("node24", 24), ("node25", 25), ("node26", 26), ("node27", 27), ("node28", 28), ("node29", 29), ("node30", 30), ("node31", 31), ("node32", 32), ("node33", 33), ("node34", 34), ("node35", 35), ("node36", 36), ("node37", 37), ("node38", 38), ("node39", 39), ("node40", 40))

class FspR7PathNodeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNode1", 1), ("capNode2", 2), ("capNode3", 3), ("capNode4", 4), ("capNode5", 5), ("capNode6", 6), ("capNode7", 7), ("capNode8", 8), ("capNode9", 9), ("capNode10", 10), ("capNode11", 11), ("capNode12", 12), ("capNode13", 13), ("capNode14", 14), ("capNode15", 15), ("capNode16", 16), ("capNode17", 17), ("capNode18", 18), ("capNode19", 19), ("capNode20", 20), ("capNode21", 21), ("capNode22", 22), ("capNode23", 23), ("capNode24", 24), ("capNode25", 25), ("capNode26", 26), ("capNode27", 27), ("capNode28", 28), ("capNode29", 29), ("capNode30", 30), ("capNode31", 31), ("capNode32", 32), ("capNode33", 33), ("capNode34", 34), ("capNode35", 35), ("capNode36", 36), ("capNode37", 37), ("capNode38", 38), ("capNode39", 39), ("capNode40", 40))

class FspR7PceMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("optimalTe", 1), ("osnrConstr", 2), ("optimalOsnr", 3))

class FspR7PceModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOptimalTe", 1), ("capOsnrConstr", 2), ("capOptimalOsnr", 3))

class FspR7PlugDataRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("undefined", 0), ("rateCouplingLink", 1), ("rateHighSpeed", 2), ("rateGBe", 3), ("rate2G1", 4), ("rate2G5", 5), ("rate4G", 6), ("rate10G", 7), ("any", 8), ("rate11G", 9), ("rateFE", 10), ("rate10G2R", 11), ("rate8G", 12), ("rate103G", 13), ("rate112G", 14))

class FspR7PlugDataRateCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRateCouplingLink", 1), ("capRateHighSpeed", 2), ("capRateGBe", 3), ("capRate2G1", 4), ("capRate2G5", 5), ("capRate4G", 6), ("capRate10G", 7), ("capAny", 8), ("capRate11G", 9), ("capRateFE", 10), ("capRate10G2R", 11), ("capRate8G", 12), ("capRate103G", 13), ("capRate112G", 14))

class FspR7PmSnapshotParameterTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("undefined", 0), ("outputPower", 1), ("inputPower", 2), ("attenuation", 3), ("attenuationOfVoa", 4), ("oscGain", 5), ("backreflectionPowerReceived", 6), ("ramanPumpPower", 7), ("oscPowerReceived", 8), ("variableGain", 9), ("txLineAttenuation", 10), ("rxLineAttenuation", 11))

class FspR7PmReset(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("all", 2), ("curr", 3))

class FspR7PmResetCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capAll", 2), ("capCurr", 3))

class FspR7PmSnapshotStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("inProgress", 2), ("success", 3), ("error", 4))

class FspR7PortBehaviour(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("client", 1), ("network", 2))

class FspR7PortBehaviourCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capClient", 1), ("capNetwork", 2))

class FspR7PortMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("port", 1), ("cTag", 2), ("sTag", 3))

class FspR7PortModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capPort", 1), ("capCTag", 2), ("capSTag", 3))

class FspR7PortRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("uni", 1), ("i-nni", 2), ("nni", 3))

class FspR7PortRoleCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capUni", 1), ("capI-nni", 2), ("capNni", 3))

class FspR7PrbsPmReset(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("all", 2))

class FspR7PrbsPmResetCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capAll", 2))

class FspR7PreferredFacilityType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("sdh", 1), ("sonet", 2))

class FspR7PreferredFacilityTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSdh", 1), ("capSonet", 2))

class FspR7ProtectionRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("wkg", 1), ("protn", 2), ("na", 3))

class FspR7ProtectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("dpring", 1), ("line", 2))

class FspR7ProtectionTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capDpring", 1), ("capLine", 2))

class FspR7Protocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("local", 1), ("static", 2), ("ospf", 3))

class FspR7PsuOutputPower(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("undefined", 0), ("pwrOut120w", 1), ("pwrOut130w", 2), ("pwrOut400w", 3), ("pwrOut600w", 4), ("pwrOut170w", 5), ("pwrOut200w", 6), ("pwrOut1000w", 7), ("pwrOut0w", 8), ("pwrOut800w", 9), ("pwrOut150w", 10))

class FspR7PsuOutputPowerCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capPwrOut120w", 1), ("capPwrOut130w", 2), ("capPwrOut400w", 3), ("capPwrOut600w", 4), ("capPwrOut170w", 5), ("capPwrOut200w", 6), ("capPwrOut1000w", 7), ("capPwrOut0w", 8), ("capPwrOut800w", 9), ("capPwrOut150w", 10))

class FspR7RedLinedState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7RedLinedStateCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7RemoteAlarmPath(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("curr", 1), ("nonCurr", 2))

class FspR7RemoteAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("out", 1), ("outAndOscDown", 2))

class FspR7ResetRfi(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("resetRfi", 2))

class FspR7ResetRfiCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capResetRfi", 2))

class FspR7RoadmNumber(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("undefined", 0), ("rNo1", 1), ("rNo2", 2), ("rNo3", 3), ("rNo4", 4), ("rNo5", 5), ("rNo6", 6), ("rNo7", 7), ("rNo8", 8))

class FspR7RoadmNumberCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRNo1", 1), ("capRNo2", 2), ("capRNo3", 3), ("capRNo4", 4), ("capRNo5", 5), ("capRNo6", 6), ("capRNo7", 7), ("capRNo8", 8))

class FspR7RouteRedist(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("static", 2))

class FspR7RowStatusCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capActive", 1), ("capNotInService", 2), ("capNotReady", 3), ("capCreateAndGo", 4), ("capCreateAndWait", 5), ("capDestroy", 6))

class FspR7Scrambling(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7ScramblingCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7ScuDbBackup(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7ScuRing(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7ScuRingCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7SecurityMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("basic", 1), ("enhanced", 2))

class FspR7SecurityModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBasic", 1), ("capEnhanced", 2))

class FspR7SessionStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("active", 1), ("inactive", 2))

class FspR7SessionStatusCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capActive", 1), ("capInactive", 2))

class FspR7SignalMapping(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("gfp", 1), ("proprietary", 2))

class FspR7SignalMappingCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capGfp", 1), ("capProprietary", 2))

class FspR7SingleFiberLocation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("locationA", 1), ("locationB", 2))

class FspR7SingleFiberLocationCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLocationA", 1), ("capLocationB", 2))

class FspR7SnmpHexString(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class FspR7SnmpLongString(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 65535)

class FspR7SnmpPrivLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("admin", 1), ("provision", 2), ("operator", 3), ("monitor", 4), ("crypto", 5))

class FspR7SnmpPrivLevelCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAdmin", 1), ("capProvision", 2), ("capOperator", 3), ("capMonitor", 4), ("capCrypto", 5))

class FspR7SnmpSecuLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("noAuthNoPriv", 1), ("authNoPriv", 2), ("authPriv", 3))

class FspR7SnmpSecuLevelCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNoAuthNoPriv", 1), ("capAuthNoPriv", 2), ("capAuthPriv", 3))

class FspR7SshDeamon(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7SshHostKeyEncryptAlgorithm(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("rsa", 1), ("dsa", 2), ("rsa1", 3))

class FspR7SshHostKeyEncryptAlgorithmCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRsa", 1), ("capDsa", 2), ("capRsa1", 3))

class FspR7Stages(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("st1", 1), ("st2", 2))

class FspR7StandingConditionTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1030, 1031, 1034, 1037, 1040, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1142, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285), SingleValueConstraint(1286, 1287, 1288, 1289, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1315, 1316, 1317, 1320, 1321, 1322, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1380, 1381, 1386, 1385, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1450, 1451))
    namedValues = NamedValues(("undefined", 0), ("thirdPartyPlug", 1001), ("facilityLoopback", 1002), ("terminalLoopback", 1003), ("facilityForcedOn", 1004), ("oosDisabled", 1005), ("receiverDisabled", 1006), ("transmitterDisabledOff", 1007), ("transmittedDisabledIdle", 1008), ("transmitterDisabledAis", 1009), ("transmitterDisabledEpc", 1010), ("oosManagement", 1011), ("oosMaintenance", 1012), ("oosAins", 1013), ("dcnCommunicationFail", 1014), ("removed", 1015), ("mismatch", 1016), ("equipmentNotAccepted", 1017), ("facilityDataRateNotSupported", 1018), ("equipmentNotSupportedByPhysicalLayer", 1019), ("equipmentNotApproved", 1020), ("equipmentMismatch", 1021), ("powerMissing", 1026), ("temperatureTooLow", 1030), ("temperatureTooHigh", 1031), ("lossOfSignal", 1034), ("lossOfReceiverClockRecovery", 1037), ("laserFailure", 1040), ("switchFailed", 1041), ("autoShutdownLaserOffDueToErrFwd", 1043), ("autoShutdownAls", 1045), ("thermoElectricCoolerEndOfLife", 1047), ("opticalInputPwrReceivedTooLow", 1048), ("opticalInputPwrReceivedTooHigh", 1049), ("laserTemperatureTooHigh", 1050), ("laserTemperatureTooLow", 1051), ("opticalOutputPowerTransmittedTooLow", 1052), ("opticalOutputPowerTransmittedTooHigh", 1053), ("laserBiasCurrentNormalizedtooHigh", 1054), ("lossOfSignalTransmitter", 1055), ("attOnReceiverFiberLowerThanMonitor", 1056), ("attOnReceiverFiberHigherThanMonitor", 1057), ("attOnTransmitterFiberLowerThanMonitor", 1058), ("attOnTransmitterFiberHigherThanMonitor", 1059), ("autoShutdownSendingAisOtu", 1060), ("lossOfFrameOtu", 1061), ("lossOfMultiFrameOtu", 1062), ("alarmIndicationSignalOtu", 1063), ("signalDegradeOtu", 1064), ("backwardDefectIndicationOtu", 1065), ("autoShutdownSendingAisOdu", 1066), ("lossOfFrameLossOfMultiFrameOdu", 1067), ("alarmIndicationSignalOdu", 1068), ("openConnectionIndicationOdu", 1069), ("lockedDefectOdu", 1070), ("signalDegradeOdu", 1071), ("backwardDefectIndicationOdu", 1072), ("alarmIndicationSignalOduTcmA", 1073), ("openConnectionIndicationOduTcmA", 1074), ("lockedDefectOduTcmA", 1075), ("lossofTandemConnectionOduTcmA", 1076), ("signalDegradeOduTcmA", 1077), ("backwardDefectIndicationOduTcmA", 1078), ("payloadMismatchOPU", 1079), ("multiplexStructureIdentifierMismatchOPU", 1080), ("lossOfFrame", 1081), ("autoShutdownSendingAisLine", 1083), ("alarmIndicationSignalLine", 1084), ("remoteDefectIndicationLine", 1085), ("signalDegradeLine", 1086), ("alarmIndicationSignalHigherOrderPath", 1087), ("lossOfPointerHigherOrderPath", 1088), ("lossofMultiframeHigherOrderPath", 1089), ("lossofSequenceHigherOrderPath", 1090), ("unequippedHigherOrderPath", 1091), ("payloadMismatchHigherOrderPath", 1092), ("remoteDefectIndicationHigherOrderPath", 1093), ("alarmIndicationSignalLowerOrderPath", 1095), ("lossOfPointerLowerOrderPath", 1096), ("lossofMultiframeLowerOrderPath", 1097), ("lossofSequenceLowerOrderPath", 1098), ("unequippedLowerOrderPath", 1099), ("payloadMismatchLowerOrderPath", 1100), ("remoteDefectIndicationLowerOrderPath", 1101), ("autoShutdownSendingEPC", 1105), ("thres15MinExceededPhysConvES", 1106), ("thres15MinExceededPhysConvCV", 1107), ("thres15MinExceededPhysConvDE", 1108), ("thres15MinExceededPhysConvCVDE", 1109), ("lossOfGfpFrame", 1110), ("payloadMismatchGfp", 1111), ("gfpLossOfClientSig", 1112), ("lossOfCharSyncFromFarEnd", 1113), ("switchtoProtectionInhibited", 1114), ("switchtoWorkingInhibited", 1115), ("oTDRMeasuringinProgress", 1116), ("protectionNotAvailable", 1117), ("apsConfigMismatch", 1118), ("embeddedOperationsChannelFailure", 1119), ("signalDegradationonLinkVector", 1121), ("signalFailureonLinkVector", 1122), ("inputVoltageFailure", 1123), ("powerSupplyUnitFailure", 1124), ("currentTooLow", 1125), ("currentTooHigh", 1126), ("multipleFanFailure", 1127), ("singleFanFailure", 1128), ("linkDown", 1129), ("voltageOutOfRange", 1130), ("peerLink", 1131), ("hwFailure", 1132), ("alarmIndicationSignalOduTcmB", 1133), ("openConnectionIndicationOduTcmB", 1134), ("lockedDefectOduTcmB", 1135), ("lossofTandemConnectionOduTcmB", 1136), ("signalDegradeOduTcmB", 1137), ("backwardDefectIndicationOduTcmB", 1138), ("apsProtocolFailure", 1139), ("linkControlProtocolFailure", 1142), ("subModuleTempTooHigh", 1147), ("signalDegradeOlm", 1148), ("receiverOverloadProtection", 1149), ("lossOfFrameMux", 1150), ("lossOfFrameMuxFarEnd", 1151), ("lossOfCharSync", 1152), ("thres15MinExceededFecCE", 1153), ("thres15MinExceededFecUBE", 1154), ("thres15MinExceededFecES", 1155), ("thres15MinExceededFecSES", 1156), ("thres15MinExceededMuxES", 1157), ("thres15MinExceededMuxSES", 1158), ("thres15MinExceededGfpCHEC", 1159), ("thres15MinExceededGfpTHEC", 1160), ("thres15MinExceededGfpTHecDisc", 1161), ("thres15MinExceededGfpTsuperblockDisc", 1162), ("autoShutdownLaserOffDueToHighTemp", 1165), ("autoShutdownLaserOffDueToHighTxPwr", 1166), ("laserEndOfLife", 1167), ("laserBiasCurrAbnormal", 1168), ("opticalPowerTxLOS", 1169), ("midstageFault", 1170), ("farEndIpAddressUnknown", 1171), ("topologyDataCalculationInProgress", 1172), ("ntpServer1Unreachable", 1173), ("ntpServer2Unreachable", 1174), ("ntpServer3Unreachable", 1175), ("autoShutdownSendingAisOpu", 1176), ("alarmIndicationSignalOpu", 1177), ("alarmIndicationSignalOduTcmC", 1178), ("backwardDefectIndicationOduTcmC", 1179), ("lockedDefectOduTcmC", 1180), ("lossofTandemConnectionOduTcmC", 1181), ("openConnectionIndicationOduTcmC", 1182), ("signalDegradeOduTcmC", 1183), ("loopbackError", 1184), ("sectionTraceMismatch", 1185), ("traceIdentifierMismatchOtu", 1186), ("traceIdentifierMismatchOdu", 1187), ("traceIdentifierMismatchOduTcmA", 1188), ("traceIdentifierMismatchOduTcmC", 1189), ("traceIdentifierMismatchOduTcmB", 1190), ("databaseMismatch", 1191), ("databaseNcuMismatch", 1192), ("serverSignalFailureSectionRS", 1193), ("fwpMismatchDownloadServiceAffecting", 1194), ("fwpMismatchDownloadNotServiceAffecting", 1195), ("databaseVersionMismatch", 1196), ("clientFailForwarding", 1197), ("virtualChannelAis", 1198), ("serverSignalFailureVf", 1199), ("signalFailureOnLink", 1200), ("serverSignalFailureGfp", 1201), ("serverSignalFailurePath", 1202), ("gainTiltNotSettable", 1203), ("txPowerLimited", 1204), ("equalizationProgress", 1205), ("uPortFailure", 1206), ("autoShutdownBlock", 1207), ("serverSignalFailTx", 1208), ("payloadMismatch", 1209), ("voaControlFail", 1210), ("provisioningLocked", 1211), ("mansw", 1212), ("wtrTimerRunning", 1213), ("pcsSignalDegrade", 1214), ("alarmInputTIF", 1215), ("thres15MinExceededSonetSectES", 1216), ("thres15MinExceededSonetSectSES", 1217), ("thres15MinExceededSonetSectSEFS", 1218), ("thres15MinExceededSonetSectCV", 1219), ("thres15MinExceededSonetLineES", 1220), ("thres15MinExceededSonetLineSES", 1221), ("thres15MinExceededSonetLineCV", 1222), ("thres15MinExceededSonetLineUAS", 1223), ("thres15MinExceededOduTcmAES", 1224), ("thres15MinExceededOduTcmASES", 1225), ("thres15MinExceededOduTcmAUAS", 1226), ("thres15MinExceededOduTcmABbe", 1227), ("thres15MinExceededOduTcmBES", 1228), ("thres15MinExceededOduTcmBSES", 1229), ("thres15MinExceededOduTcmBUAS", 1230), ("thres15MinExceededOduTcmBBbe", 1231), ("thres15MinExceededOduTcmCES", 1232), ("thres15MinExceededOduTcmCSES", 1233), ("thres15MinExceededOduTcmCUAS", 1234), ("thres15MinExceededOduTcmCBbe", 1235), ("thres15MinExceededOtuES", 1236), ("thres15MinExceededOtuSES", 1237), ("thres15MinExceededOtuUAS", 1238), ("thres15MinExceededOtuBbe", 1239), ("thres15MinExceededOduES", 1240), ("thres15MinExceededOduSES", 1241), ("thres15MinExceededOduUAS", 1242), ("thres15MinExceededOduBbe", 1243), ("thresOptPowerCtrlFailureLow", 1244), ("thresOptPowerCtrlFailureHigh", 1245), ("dcnServerSignalFailure", 1246), ("maxPowerConsEquipModulesToHigh", 1247), ("maxPowerConsProvModulesToHigh", 1248), ("equipmentMismatchAllow", 1249), ("oosPrePostSig", 1250), ("oosPrePostSigInSetUpProcess", 1251), ("oosPrePostSigInTearDownProcess", 1252), ("cpTunnelModificationInProgess", 1253), ("capabilityLevelMismatch", 1254), ("oosPrePostSigEstablishFailed", 1255), ("oosPrePostSigAfterPrecompFailed", 1256), ("cpTunnelEstablishFailed", 1257), ("cpTunnelPrecompFailed", 1258), ("localFault", 1259), ("oscPwrTooHigh", 1260), ("oscPwrTooLow", 1261), ("aseTableBuild", 1262), ("aseTableNotAvailable", 1263), ("automaticPowerReduction", 1264), ("highBer", 1266), ("pumpLaser1TempTooHigh", 1267), ("pumpLaser1TempTooLow", 1268), ("pumpLaser2TempTooHigh", 1269), ("pumpLaser2TempTooLow", 1270), ("ospfIpServerNotAvailable", 1271), ("lossOsc", 1272), ("brPwrRxTooHigh", 1273), ("aseTableGenFailSignalinput", 1274), ("aseTableGenFailOscMissing", 1275), ("aseTableGenFailHighBackreflection", 1276), ("ramanPumpPwrTooHigh", 1277), ("ramanPumpPwrTooLow", 1278), ("autoPowerShutdown", 1279), ("aseTableGenFailLow", 1280), ("aseLow", 1281), ("configurableOpticalOutputPowerTransmittedTooHigh", 1282), ("configurableOpticalOutputPowerTransmittedTooLow", 1283), ("losAttProgress", 1284), ("aseTableGenProgress", 1285)) + NamedValues(("signalDegradeScn", 1286), ("dispertionTunningCondition", 1287), ("turnupCondition", 1288), ("turnupFailed", 1289), ("faultOnOpm", 1301), ("optSignalFailure", 1302), ("opmAbnormalCondition", 1303), ("hwOprReachedHT", 1304), ("disabledChannelPowerTooHigh", 1305), ("lossOfSignalCPort", 1306), ("serverSignalFailureODU", 1308), ("signalFailureOPU", 1309), ("serverSignalFail", 1310), ("serverSignalReduced", 1311), ("dispersionCompensationTooLow", 1312), ("dispersionCompensationTooHigh", 1313), ("farEndCommFailure", 1315), ("linkAttenuationTooLow", 1316), ("linkAttenuationTooHigh", 1317), ("entityOutageIndication", 1320), ("fiberConnectionMissing", 1321), ("farEndInformationMismatch", 1322), ("automaticPowerReductionForEyeSafety", 1325), ("lossOfPilotSignal", 1326), ("pumpLaser3TempTooHigh", 1327), ("pumpLaser3TempTooLow", 1328), ("pilotReceiveLevelHigh", 1329), ("autoShutdownStbyProtection", 1330), ("databaseFailure", 1331), ("latencyTooHigh", 1335), ("latencyTooLow", 1336), ("thres15MinExceededFecBERCE", 1337), ("autoShutdownSendingLckOdu", 1338), ("ntpNotInSync", 1339), ("encryptionModuleTamperDetected", 1340), ("encryptionModuleCryPasswdMissing", 1341), ("encryptionModuleCryPasswdError", 1342), ("encryptionModuleFwpUpdateEnabled", 1343), ("encryptionModuleSelfTestStarted", 1344), ("encryptionModuleSelfTestFail", 1345), ("encryptionModuleSelfTestFailCritical", 1346), ("encryptionPortAuthPasswdMissing", 1350), ("encryptionPortMaxKeyExchgFailuresReachedIs", 1351), ("encryptionPortMaxKeyExchgFailuresReachedOos", 1352), ("encryptionPortEncryptionSwitchedOff", 1353), ("encryptionPortKeyExchangedForced", 1354), ("encryptionPortEncryptionSwitchOffEnabled", 1355), ("encryptionPortKeyInitExchgMissed", 1356), ("roundTripDelayTooHigh", 1380), ("roundTripDelayTooLow", 1381), ("ntpForSchedEqlzRequired", 1386), ("airDustFilterClogged", 1385), ("oscOpticalPowerControlFailHigh", 1387), ("oscOpticalPowerControlFailLow", 1388), ("amplifierAbnormal", 1389), ("aseTableGenFailPilot", 1390), ("pumpLaser4TempTooHigh", 1391), ("pumpLaser4TempTooLow", 1392), ("fwdAseTableFailPilot", 1393), ("fwdAseTableOnPilot", 1394), ("inputVoltageFailurePort1", 1395), ("inputVoltageFailurePort2", 1396), ("xfpDecisionThresSetFailed", 1397), ("thres15MinExceededPhysConvSE", 1399), ("thres15MinExceededPhysConvESTX", 1400), ("thres15MinExceededPhysConvCVTX", 1401), ("thres15MinExceededPhysConvSETX", 1402), ("prbsRcvActivated", 1403), ("prbsTrmtActivated", 1404), ("prbsLossOfSeqSynch", 1405), ("opuClientSignalFail", 1406), ("lossOfTestSeqSynchOpu", 1407), ("autoShutdownOpuClientSignalFail", 1408), ("localOscTemperatureTooLow", 1409), ("localOscTemperatureTooHigh", 1410), ("differentialGroupDelayTooHigh", 1412), ("chromaticDispersionTooLow", 1413), ("chromaticDispersionTooHigh", 1414), ("signalToNoiseRatioTooLow", 1415), ("localOscLevelAbnormal", 1416), ("carrierFreqOffsetTooLow", 1417), ("carrierFreqOffsetTooHigh", 1418), ("lossOfLane", 1419), ("serverSignalFailureODUcrs", 1420), ("autoShutdownSendingOciOdu", 1421), ("oduTribMsiMismatch", 1422), ("channelMismatch", 1423), ("laserOnDelay", 1450), ("autoShutdownTxRxLasersDueToHighTemp", 1451))

class FspR7StartPmSnapshot(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("apply", 2))

class FspR7StateConnection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("undefined", 0), ("standard", 1), ("mismatchEquipment", 2), ("mismatchConnection", 3), ("mismatchChannel", 4), ("mismatchPhysical", 5), ("invalidConfig", 6), ("nonStandard", 7), ("standardSpeq", 8))

class FspR7Stuff(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7StuffCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7SubLayer(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("undefined", 0), ("lambda", 1), ("fiber", 2), ("tdm", 3), ("psc1", 4), ("psc2", 5), ("psc3", 6), ("psc4", 7), ("l2sc", 8), ("ethSvlan", 9), ("none", 10), ("subLsc", 11), ("dcsc", 12), ("otn", 13))

class FspR7SubLayerCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLambda", 1), ("capFiber", 2), ("capTdm", 3), ("capPsc1", 4), ("capPsc2", 5), ("capPsc3", 6), ("capPsc4", 7), ("capL2sc", 8), ("capEthSvlan", 9), ("capNone", 10), ("capSubLsc", 11), ("capDcsc", 12), ("capOtn", 13))

class FspR7SubLayerEncoding(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("undefined", 0), ("otn", 1), ("sonet", 2), ("sdh", 3), ("eth", 4), ("fc", 5), ("trans", 6), ("cl", 7), ("ib", 8), ("otnp", 9), ("unspecified", 10))

class FspR7SubLayerEncodingCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOtn", 1), ("capSonet", 2), ("capSdh", 3), ("capEth", 4), ("capFc", 5), ("capTrans", 6), ("capCl", 7), ("capIb", 8), ("capOtnp", 9), ("capUnspecified", 10))

class FspR7SupplyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("front", 1), ("rear", 2))

class FspR7SupplyTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capFront", 1), ("capRear", 2))

class FspR7SystemBusy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("idle", 1), ("busyFileTransfer", 2), ("busySystemUpdate", 3), ("busyEqptUpdate", 4))

class FspR7SysType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("otm", 1), ("oadm", 2), ("converter", 3), ("ila", 4), ("hub", 5))

class FspR7TelemetryOutput(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("undefined", 0), ("neAlmCr", 1), ("neAlmMj", 2), ("neAlmMn", 3), ("neAlmMjGe", 4), ("neAlmMnGe", 5), ("fcuAlmCr", 6), ("fcuAlmMj", 7), ("fcuAlmMn", 8), ("fcuAlmMjGe", 9), ("fcuAlmMnGe", 10), ("psuAlmCr", 11), ("psuAlmMj", 12), ("psuAlmMn", 13), ("psuAlmMjGe", 14), ("psuAlmMnGe", 15), ("none", 16))

class FspR7TelemetryOutputCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNeAlmCr", 1), ("capNeAlmMj", 2), ("capNeAlmMn", 3), ("capNeAlmMjGe", 4), ("capNeAlmMnGe", 5), ("capFcuAlmCr", 6), ("capFcuAlmMj", 7), ("capFcuAlmMn", 8), ("capFcuAlmMjGe", 9), ("capFcuAlmMnGe", 10), ("capPsuAlmCr", 11), ("capPsuAlmMj", 12), ("capPsuAlmMn", 13), ("capPsuAlmMjGe", 14), ("capPsuAlmMnGe", 15), ("capNone", 16))

class FspR7TestMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("testModeRls", 1), ("testModePRBS23", 2), ("testModePRBS23Inv", 3), ("testModePRBS31", 4), ("testModePRBS31Inv", 5), ("testModeRls", 1), ("testModePRBS23", 2), ("testModePRBS23Inv", 3), ("testModePRBS31", 4), ("testModePRBS31Inv", 5))

class FspR7TestModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capTestModeRls", 1), ("capTestModePRBS23", 2), ("capTestModePRBS23Inv", 3), ("capTestModePRBS31", 4), ("capTestModePRBS31Inv", 5), ("capTestModeRls", 1), ("capTestModePRBS23", 2), ("capTestModePRBS23Inv", 3), ("capTestModePRBS31", 4), ("capTestModePRBS31Inv", 5))

class FspR7TifOutputReset(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("opr", 2))

class FspR7TifOutputResetCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOpr", 2))

class FspR7Time(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1d-1d-1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class FspR7TimeChangeReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("manual", 2), ("correction", 3), ("dst", 4))

class FspR7TiltSet(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("minus1dB0", 1), ("minus1dB5", 2), ("minus2dB0", 3))

class FspR7TiltSetCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capMinus1dB0", 1), ("capMinus1dB5", 2), ("capMinus2dB0", 3))

class FspR7TL1InternalState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("alw", 1), ("inh", 2))

class FspR7TL1InternalStateCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAlw", 1), ("capInh", 2))

class FspR7TL1TimoutAvailable(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7TL1TimoutAvailableCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7TopologyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("lad", 1), ("ring", 2), ("p2p", 3), ("unknown", 4))

class FspR7TopologyTypeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLad", 1), ("capRing", 2), ("capP2p", 3), ("capUnknown", 4))

class FspR7TransmissionMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("undefined", 0), ("trans", 1), ("transE", 2), ("transW", 3), ("transHst", 4), ("mux", 5), ("muxE", 6), ("muxW", 7), ("muxHst", 8), ("regen1Way", 9), ("regen2Way", 10), ("obsolete", 11), ("adm", 12), ("transDual", 13), ("muxDual", 14), ("nFixed", 15), ("cSelect", 16), ("dualClient", 17))

class FspR7TransmissionModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capTrans", 1), ("capTransE", 2), ("capTransW", 3), ("capTransHst", 4), ("capMux", 5), ("capMuxE", 6), ("capMuxW", 7), ("capMuxHst", 8), ("capRegen1Way", 9), ("capRegen2Way", 10), ("capObsolete", 11), ("capAdm", 12), ("capTransDual", 13), ("capMuxDual", 14), ("capNFixed", 15), ("capCSelect", 16), ("capDualClient", 17))

class FspR7TurnupConfig(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("oprTurnup", 2))

class FspR7TurnupConfigCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOprTurnup", 2))

class FspR7TypeConnection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("connection1Way", 1), ("connection2Way", 2))

class FspR7TypeConnectionCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capConnection1Way", 1), ("capConnection2Way", 2))

class FspR7TypeCrs(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("connection1Way", 1), ("connection2Way", 2))

class FspR7TypeCrsCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capConnection1Way", 1), ("capConnection2Way", 2))

class FspR7Unsigned32Caps(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class FspR7UntaggedFrames(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("accept", 1), ("reject", 2))

class FspR7UntaggedFramesCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAccept", 1), ("capReject", 2))

class FspR7VoaMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("power", 1), ("att", 2))

class FspR7VoaModeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capPower", 1), ("capAtt", 2))

class FspR7XfpDecisionThres(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("standard", 1), ("forwardRaman", 2))

class FspR7XfpDecisionThresCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capStandard", 1), ("capForwardRaman", 2))

class FspR7YesNo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7YesNoCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class SourceIpAddress(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("sysIp", 1), ("defaultIp", 2))

class SourceIpAddressCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSysIp", 1), ("capDefaultIp", 2))

neSystemId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSystemId.setStatus('current')
neSysType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 2), FspR7SysType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSysType.setStatus('current')
neAutoProvisioning = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 3), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoProvisioning.setStatus('current')
neType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 4), FspR7NeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neType.setStatus('current')
neSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neSwVersion.setStatus('current')
neGradeInventory = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 6), Grade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neGradeInventory.setStatus('current')
neModel = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 7), FspR7Model()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModel.setStatus('current')
neVendorId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neVendorId.setStatus('current')
neAINSProvEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 9), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAINSProvEnabled.setStatus('current')
neAINSDefaultTimer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5760), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAINSDefaultTimer.setStatus('current')
nePreferredFacilityType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 11), FspR7PreferredFacilityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nePreferredFacilityType.setStatus('current')
neForceDelete = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 12), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neForceDelete.setStatus('current')
neSdhSesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSdhSesThreshold.setStatus('current')
neOtnSesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neOtnSesThreshold.setStatus('current')
neTopologyType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 16), FspR7TopologyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neTopologyType.setStatus('deprecated')
neDatabaseSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDatabaseSerialNumber.setStatus('current')
neDatabaseType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 18), FspR7DatabaseType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDatabaseType.setStatus('current')
neRackSize = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 45), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neRackSize.setStatus('current')
neDatabaseNcuType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 20), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDatabaseNcuType.setStatus('current')
neDatabaseNcuAid = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 21), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDatabaseNcuAid.setStatus('current')
neModusLastRestart = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 22), FspR7ModusLastRestart()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModusLastRestart.setStatus('current')
neSystemIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSystemIp.setStatus('current')
neSystemIpMask = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSystemIpMask.setStatus('current')
neAreaId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAreaId.setStatus('current')
neBackupScuAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 26), FspR7ScuDbBackup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neBackupScuAvailable.setStatus('current')
neRouteRedistribution = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 27), FspR7RouteRedist()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neRouteRedistribution.setStatus('current')
neAlarmActivationTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAlarmActivationTime.setStatus('current')
neAlarmDeactivationTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAlarmDeactivationTime.setStatus('current')
neDate = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 1), FspR7Date()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neDate.setStatus('current')
neTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 2), FspR7Time()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neTime.setStatus('current')
neTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neTimeZone.setStatus('current')
neNetworkTimeProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 4), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neNetworkTimeProtocol.setStatus('deprecated')
neNtpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNtpServer1.setStatus('deprecated')
neNtpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNtpServer2.setStatus('deprecated')
neNtpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNtpServer3.setStatus('deprecated')
neNtpStatusServer1 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 8), FspR7NtpServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neNtpStatusServer1.setStatus('deprecated')
neNtpStatusServer2 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 9), FspR7NtpServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neNtpStatusServer2.setStatus('deprecated')
neNtpStatusServer3 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 10), FspR7NtpServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neNtpStatusServer3.setStatus('deprecated')
neNtpSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 11), SourceIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNtpSourceIp.setStatus('deprecated')
neTimeZoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neTimeZoneOffset.setStatus('current')
neDaylightSavingsTimeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 13), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDaylightSavingsTimeEnabled.setStatus('current')
neNtpMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 14), FspR7NtpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNtpMode.setStatus('current')
neTimeChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 15), FspR7TimeChangeReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neTimeChangeReason.setStatus('current')
ntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20), )
if mibBuilder.loadTexts: ntpServerTable.setStatus('current')
ntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1), ).setIndexNames((0, "FspR7-MIB", "ntpServerIp"))
if mibBuilder.loadTexts: ntpServerEntry.setStatus('current')
ntpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpServerIp.setStatus('current')
ntpServerSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 2), SourceIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerSourceIp.setStatus('current')
ntpServerTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 3), FspR7NtpTest()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerTest.setStatus('current')
ntpServerTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 4), FspR7NtpTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerTestStatus.setStatus('current')
ntpServerSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 5), FspR7NtpSyncStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerSyncStatus.setStatus('current')
ntpServerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 6), FspR7NtpAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerAdminState.setStatus('current')
ntpServerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 7), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerOperState.setStatus('current')
ntpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerRowStatus.setStatus('current')
ntpTimeZoneCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 21), )
if mibBuilder.loadTexts: ntpTimeZoneCapsTable.setStatus('current')
ntpTimeZoneCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 21, 1), ).setIndexNames((0, "FspR7-MIB", "ntpTimeZoneCapsIndex"))
if mibBuilder.loadTexts: ntpTimeZoneCapsEntry.setStatus('current')
ntpTimeZoneCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 101)))
if mibBuilder.loadTexts: ntpTimeZoneCapsIndex.setStatus('current')
ntpTimeZoneCapsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 21, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpTimeZoneCapsValue.setStatus('current')
neTimerForceOprToRls = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1440), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neTimerForceOprToRls.setStatus('current')
neScuRing = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 32), FspR7ScuRing()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neScuRing.setStatus('current')
neScuRingCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 33), FspR7ScuRingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neScuRingCap.setStatus('current')
neAlarmProfileApply = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 34), FspR7ApplyAlarmProfile()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAlarmProfileApply.setStatus('current')
neAlarmProfileApplyCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 35), FspR7ApplyAlarmProfileCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neAlarmProfileApplyCap.setStatus('current')
neFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 36), FspR7FtpServer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neFtpServer.setStatus('current')
neFtpServerCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 37), FspR7FtpServerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neFtpServerCap.setStatus('current')
neFtpClient = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 38), FspR7FtpClient()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neFtpClient.setStatus('current')
neSshDeamon = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 39), FspR7SshDeamon()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSshDeamon.setStatus('current')
neEqlzAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 40), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neEqlzAdmin.setStatus('current')
neEqlzAdminCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 41), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neEqlzAdminCap.setStatus('current')
neEqlzInterval = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 42), FspR7EqlzInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neEqlzInterval.setStatus('current')
neEqlzIntervalCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 43), FspR7EqlzIntervalCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neEqlzIntervalCap.setStatus('current')
neEqlzStartDate = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 44), FspR7Date()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neEqlzStartDate.setStatus('current')
neEqlzStartTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 45), FspR7Time()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neEqlzStartTime.setStatus('current')
neDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 46), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neDefaultGateway.setStatus('current')
neSwType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 47), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neSwType.setStatus('current')
neCpPcsPriority = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 48), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 127), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCpPcsPriority.setStatus('current')
neScuAutoRestoreEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 49), FspR7ScuDbBackup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neScuAutoRestoreEnabled.setStatus('current')
neNodeNameSyntax = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 50), FspR7NodeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNodeNameSyntax.setStatus('current')
neAutoProvLifCp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 51), FspR7AutopLif()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoProvLifCp.setStatus('current')
authTrapSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 60), IpAddress())
if mibBuilder.loadTexts: authTrapSrcIp.setStatus('current')
authTrapLctIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 61), IpAddress())
if mibBuilder.loadTexts: authTrapLctIp.setStatus('current')
authTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 62), FspR7AccessStatus())
if mibBuilder.loadTexts: authTrapStatus.setStatus('current')
authTrapSessionId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 63), SnmpAdminString())
if mibBuilder.loadTexts: authTrapSessionId.setStatus('current')
authTrapProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 64), FspR7AccessProtocol())
if mibBuilder.loadTexts: authTrapProtocol.setStatus('current')
authTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 65), Unsigned32())
if mibBuilder.loadTexts: authTrapPort.setStatus('current')
authTrapUserName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 66), SnmpAdminString())
if mibBuilder.loadTexts: authTrapUserName.setStatus('current')
authTrapRadUserName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 67), SnmpAdminString())
if mibBuilder.loadTexts: authTrapRadUserName.setStatus('current')
authTrapSuccessfulAuthCount = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 68), Unsigned32())
if mibBuilder.loadTexts: authTrapSuccessfulAuthCount.setStatus('current')
authTrapUnsuccessfulAuthCount = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 69), Unsigned32())
if mibBuilder.loadTexts: authTrapUnsuccessfulAuthCount.setStatus('current')
systemBusy = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 70), FspR7SystemBusy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBusy.setStatus('current')
snmpAgentStartupDate = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 71), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentStartupDate.setStatus('current')
lastErrorStatusCounter = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 72), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastErrorStatusCounter.setStatus('current')
lastErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 73), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastErrorStatus.setStatus('current')
startPmSnapshot = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 74), FspR7StartPmSnapshot()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startPmSnapshot.setStatus('current')
pmSnapshotStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 75), FspR7PmSnapshotStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotStatus.setStatus('current')
maxBackplaneBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 76), Unsigned32()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBackplaneBandwidth.setStatus('current')
usedBackplaneBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 77), Unsigned32()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: usedBackplaneBandwidth.setStatus('current')
neSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 78), FspR7SecurityMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSecurityMode.setStatus('current')
neSecurityModeCapability = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 79), FspR7SecurityModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neSecurityModeCapability.setStatus('current')
neMinPasswordLength = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 80), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(8, 31), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neMinPasswordLength.setStatus('current')
routingIpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1), )
if mibBuilder.loadTexts: routingIpTable.setStatus('current')
routingIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1), ).setIndexNames((0, "FspR7-MIB", "routingIpDestination"), (0, "FspR7-MIB", "routingIpMask"), (0, "FspR7-MIB", "routingIpGateway"), (0, "FspR7-MIB", "routingIpDevice"))
if mibBuilder.loadTexts: routingIpEntry.setStatus('current')
routingIpDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: routingIpDestination.setStatus('current')
routingIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: routingIpMask.setStatus('current')
routingIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: routingIpGateway.setStatus('current')
routingIpDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 4), EntityIndex())
if mibBuilder.loadTexts: routingIpDevice.setStatus('current')
routingIpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 5), FspR7Protocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingIpRouteType.setStatus('current')
routingIpRoutingMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingIpRoutingMetric.setStatus('current')
routingIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingIpRowStatus.setStatus('current')
inactiveRoutingIpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2), )
if mibBuilder.loadTexts: inactiveRoutingIpTable.setStatus('current')
inactiveRoutingIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1), ).setIndexNames((0, "FspR7-MIB", "routingIpDestination"), (0, "FspR7-MIB", "routingIpMask"), (0, "FspR7-MIB", "routingIpGateway"), (0, "FspR7-MIB", "routingIpDevice"))
if mibBuilder.loadTexts: inactiveRoutingIpEntry.setStatus('current')
inactiveRoutingIpDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: inactiveRoutingIpDestination.setStatus('current')
inactiveRoutingIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: inactiveRoutingIpMask.setStatus('current')
inactiveRoutingIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: inactiveRoutingIpGateway.setStatus('current')
inactiveRoutingIpDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 4), EntityIndex())
if mibBuilder.loadTexts: inactiveRoutingIpDevice.setStatus('current')
inactiveRoutingIpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 5), FspR7Protocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inactiveRoutingIpRouteType.setStatus('current')
inactiveRoutingIpRoutingMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inactiveRoutingIpRoutingMetric.setStatus('current')
inactiveRoutingIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inactiveRoutingIpRowStatus.setStatus('current')
knownHostTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3), )
if mibBuilder.loadTexts: knownHostTable.setStatus('current')
knownHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3, 1), ).setIndexNames((0, "FspR7-MIB", "knownHostIP"), (0, "FspR7-MIB", "knownHostKeyEncryptAlgorithm"))
if mibBuilder.loadTexts: knownHostEntry.setStatus('current')
knownHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: knownHostIP.setStatus('current')
knownHostKeyEncryptAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3, 1, 2), FspR7SshHostKeyEncryptAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownHostKeyEncryptAlgorithm.setStatus('current')
knownHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: knownHostRowStatus.setStatus('current')
knownHostFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3, 1, 4), FspR7SnmpHexString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: knownHostFingerprint.setStatus('current')
fspUserSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserSpinLock.setStatus('current')
fspUserManagementTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10), )
if mibBuilder.loadTexts: fspUserManagementTable.setStatus('current')
fspUserManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1), ).setIndexNames((0, "FspR7-MIB", "fspUserManagementEngineID"), (0, "FspR7-MIB", "fspUserManagementName"))
if mibBuilder.loadTexts: fspUserManagementEntry.setStatus('current')
fspUserManagementEngineID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: fspUserManagementEngineID.setStatus('current')
fspUserManagementName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 2), SnmpAdminString())
if mibBuilder.loadTexts: fspUserManagementName.setStatus('current')
fspUserManagementRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementRowStatus.setStatus('current')
fspUserManagementSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementSecurityName.setStatus('current')
fspUserManagementPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 5), FspR7SnmpPrivLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementPrivilegeLevel.setStatus('current')
fspUserManagementSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 6), FspR7SnmpSecuLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementSecurityLevel.setStatus('current')
fspUserManagementAuthPrivKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementAuthPrivKey.setStatus('current')
fspUserManagementInternalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 8), FspR7TL1InternalState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementInternalState.setStatus('current')
fspUserManagementTl1TimeoutAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 9), FspR7TL1TimoutAvailable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementTl1TimeoutAvailable.setStatus('current')
fspUserManagementTl1TimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 60), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementTl1TimeoutValue.setStatus('current')
fspUserManagementSnmpTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementSnmpTimeoutValue.setStatus('current')
fspUserManagementUdpSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 12), FspR7SessionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementUdpSessionStatus.setStatus('current')
fspUserManagementTcpSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 13), FspR7SessionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementTcpSessionStatus.setStatus('current')
fspUserManagementAuthPrivKeyOld = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 14), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementAuthPrivKeyOld.setStatus('current')
fspUserManagementAccountFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 15), FspR7AccountFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementAccountFlag.setStatus('current')
fspUserManagementCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11), )
if mibBuilder.loadTexts: fspUserManagementCapTable.setStatus('current')
fspUserManagementCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1), ).setIndexNames((0, "FspR7-MIB", "fspUserManagementEngineID"), (0, "FspR7-MIB", "fspUserManagementName"))
if mibBuilder.loadTexts: fspUserManagementCapEntry.setStatus('current')
fspUserManagementCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementCapRowStatus.setStatus('current')
fspUserManagementCapPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1, 2), FspR7SnmpPrivLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementCapPrivilegeLevel.setStatus('current')
fspUserManagementCapSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1, 3), FspR7SnmpSecuLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementCapSecurityLevel.setStatus('current')
fspUserManagementCapInternalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1, 4), FspR7TL1InternalStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementCapInternalState.setStatus('current')
fspUserManagementCapTimeoutAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1, 5), FspR7TL1TimoutAvailableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementCapTimeoutAvailable.setStatus('current')
fspUserManagementDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12), )
if mibBuilder.loadTexts: fspUserManagementDefaultsTable.setStatus('current')
fspUserManagementDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1), ).setIndexNames((0, "FspR7-MIB", "fspUserManagementEngineID"), (0, "FspR7-MIB", "fspUserManagementName"))
if mibBuilder.loadTexts: fspUserManagementDefaultsEntry.setStatus('current')
fspUserManagementDefaultsPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 1), FspR7SnmpPrivLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsPrivilegeLevel.setStatus('current')
fspUserManagementDefaultsSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 2), FspR7SnmpSecuLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsSecurityLevel.setStatus('current')
fspUserManagementDefaultsInternalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 3), FspR7TL1InternalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsInternalState.setStatus('current')
fspUserManagementDefaultsTimeoutAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 4), FspR7TL1TimoutAvailable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsTimeoutAvailable.setStatus('current')
fspUserManagementDefaultsTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 60), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsTimeoutValue.setStatus('current')
fspUserManagementDefaultsSnmpTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsSnmpTimeoutValue.setStatus('current')
deployProvSyslogTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1), )
if mibBuilder.loadTexts: deployProvSyslogTable.setStatus('current')
deployProvSyslogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1, 1), ).setIndexNames((0, "FspR7-MIB", "syslogDataIp"))
if mibBuilder.loadTexts: deployProvSyslogEntry.setStatus('current')
deployProvSyslogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvSyslogRowStatus.setStatus('current')
deployProvSyslogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1, 1, 2), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvSyslogStatus.setStatus('current')
deployProvSyslogReportsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1, 1, 3), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvSyslogReportsStatus.setStatus('current')
deployProvSyslogSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1, 1, 4), SourceIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvSyslogSourceIp.setStatus('deprecated')
syslogConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 4), )
if mibBuilder.loadTexts: syslogConfigTable.setStatus('current')
syslogConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 4, 1), ).setIndexNames((0, "FspR7-MIB", "syslogDataIp"))
if mibBuilder.loadTexts: syslogConfigEntry.setStatus('current')
syslogConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 4, 1, 1), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogConfigStatus.setStatus('current')
syslogConfigReportsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 4, 1, 2), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogConfigReportsStatus.setStatus('current')
syslogConfigSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 4, 1, 3), SourceIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogConfigSourceIp.setStatus('deprecated')
syslogDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 6), )
if mibBuilder.loadTexts: syslogDataTable.setStatus('current')
syslogDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 6, 1), ).setIndexNames((0, "FspR7-MIB", "syslogDataIp"))
if mibBuilder.loadTexts: syslogDataEntry.setStatus('current')
syslogDataIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 6, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: syslogDataIp.setStatus('current')
syslogDataIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogDataIpAddr.setStatus('current')
nodeChannelTraceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2), )
if mibBuilder.loadTexts: nodeChannelTraceTable.setStatus('current')
nodeChannelTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1), ).setIndexNames((0, "FspR7-MIB", "nodeChannelTraceStartAid"), (0, "FspR7-MIB", "nodeChannelTraceChannelNumber"), (0, "FspR7-MIB", "nodeChannelTraceRouteId"), (0, "FspR7-MIB", "nodeChannelTraceRouteElementId"))
if mibBuilder.loadTexts: nodeChannelTraceEntry.setStatus('current')
nodeChannelTraceStartAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodeChannelTraceStartAid.setStatus('current')
nodeChannelTraceChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 2), FspR7ChannelNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodeChannelTraceChannelNumber.setStatus('current')
nodeChannelTraceRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 3), FspR7NCTraceId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodeChannelTraceRouteId.setStatus('current')
nodeChannelTraceRouteElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 4), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodeChannelTraceRouteElementId.setStatus('current')
nodeChannelTraceFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 5), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeChannelTraceFromAid.setStatus('current')
nodeChannelTraceToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeChannelTraceToAid.setStatus('current')
nodeChannelTraceRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 7), FspR7NCTRouteType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeChannelTraceRouteType.setStatus('current')
nodeChannelTraceChannelRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 8), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeChannelTraceChannelRx.setStatus('current')
nodeChannelTraceChannelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 9), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeChannelTraceChannelTx.setStatus('current')
dcnOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1), )
if mibBuilder.loadTexts: dcnOspfAreaTable.setStatus('current')
dcnOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1), ).setIndexNames((0, "FspR7-MIB", "dcnOspfAreaId"), (0, "FspR7-MIB", "dcnOspfAreaType"))
if mibBuilder.loadTexts: dcnOspfAreaEntry.setStatus('current')
dcnOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcnOspfAreaId.setStatus('current')
dcnOspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1, 2), FspR7OspfAreaType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcnOspfAreaType.setStatus('current')
dcnOspfAreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcnOspfAreaRowStatus.setStatus('current')
dcnOspfAreaIfListSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnOspfAreaIfListSize.setStatus('current')
dcnOspfAreaStubDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcnOspfAreaStubDefaultMetric.setStatus('current')
dcnOspfAreaCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 2), )
if mibBuilder.loadTexts: dcnOspfAreaCapTable.setStatus('current')
dcnOspfAreaCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 2, 1), ).setIndexNames((0, "FspR7-MIB", "dcnOspfAreaId"), (0, "FspR7-MIB", "dcnOspfAreaType"))
if mibBuilder.loadTexts: dcnOspfAreaCapEntry.setStatus('current')
dcnOspfAreaCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnOspfAreaCapRowStatus.setStatus('current')
dcnOspfAreaCapStubDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 2, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnOspfAreaCapStubDefaultMetric.setStatus('current')
dcnOspfAreaInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 3), )
if mibBuilder.loadTexts: dcnOspfAreaInterfaceTable.setStatus('current')
dcnOspfAreaInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 3, 1), ).setIndexNames((0, "FspR7-MIB", "dcnOspfAreaId"), (0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: dcnOspfAreaInterfaceEntry.setStatus('current')
dcnOspfAreaInterfaceIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 3, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnOspfAreaInterfaceIndexAid.setStatus('current')
conditionSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 1), )
if mibBuilder.loadTexts: conditionSeverityTable.setStatus('current')
conditionSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "conditionSeverityType"))
if mibBuilder.loadTexts: conditionSeverityEntry.setStatus('current')
conditionSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 1, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: conditionSeverityType.setStatus('current')
conditionSeverityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 1, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: conditionSeverityValue.setStatus('current')
ntpSysConditionSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 2), )
if mibBuilder.loadTexts: ntpSysConditionSeverityTable.setStatus('current')
ntpSysConditionSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 2, 1), ).setIndexNames((0, "FspR7-MIB", "ntpSysConditionSeverityType"))
if mibBuilder.loadTexts: ntpSysConditionSeverityEntry.setStatus('current')
ntpSysConditionSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 2, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: ntpSysConditionSeverityType.setStatus('current')
ntpSysConditionSeverityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 2, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSysConditionSeverityValue.setStatus('current')
ntpSrvConditionSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 3), )
if mibBuilder.loadTexts: ntpSrvConditionSeverityTable.setStatus('current')
ntpSrvConditionSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 3, 1), ).setIndexNames((0, "FspR7-MIB", "ntpServerIp"), (0, "FspR7-MIB", "ntpSysConditionSeverityType"))
if mibBuilder.loadTexts: ntpSrvConditionSeverityEntry.setStatus('current')
ntpSrvConditionSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 3, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: ntpSrvConditionSeverityType.setStatus('current')
ntpSrvConditionSeverityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 3, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSrvConditionSeverityValue.setStatus('current')
currentConditionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1), )
if mibBuilder.loadTexts: currentConditionTable.setStatus('current')
currentConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "currentConditionType"))
if mibBuilder.loadTexts: currentConditionEntry.setStatus('current')
currentConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: currentConditionType.setStatus('current')
currentConditionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentConditionSeverity.setStatus('current')
currentConditionAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentConditionAffect.setStatus('current')
currentConditionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentConditionTimeStamp.setStatus('current')
ntpSysCurrentConditionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2), )
if mibBuilder.loadTexts: ntpSysCurrentConditionTable.setStatus('current')
ntpSysCurrentConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2, 1), ).setIndexNames((0, "FspR7-MIB", "ntpSysConditionSeverityType"))
if mibBuilder.loadTexts: ntpSysCurrentConditionEntry.setStatus('current')
ntpSysCurrentConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: ntpSysCurrentConditionType.setStatus('current')
ntpSysCurrentConditionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSysCurrentConditionSeverity.setStatus('current')
ntpSysCurrentConditionAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSysCurrentConditionAffect.setStatus('current')
ntpSysCurrentConditionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSysCurrentConditionTimeStamp.setStatus('current')
ntpSrvCurrentConditionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3), )
if mibBuilder.loadTexts: ntpSrvCurrentConditionTable.setStatus('current')
ntpSrvCurrentConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3, 1), ).setIndexNames((0, "FspR7-MIB", "ntpServerIp"), (0, "FspR7-MIB", "ntpSrvConditionSeverityType"))
if mibBuilder.loadTexts: ntpSrvCurrentConditionEntry.setStatus('current')
ntpSrvCurrentConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: ntpSrvCurrentConditionType.setStatus('current')
ntpSrvCurrentConditionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSrvCurrentConditionSeverity.setStatus('current')
ntpSrvCurrentConditionAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSrvCurrentConditionAffect.setStatus('current')
ntpSrvCurrentConditionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSrvCurrentConditionTimeStamp.setStatus('current')
alarmProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3, 1), )
if mibBuilder.loadTexts: alarmProfileTable.setStatus('current')
alarmProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3, 1, 1), ).setIndexNames((0, "FspR7-MIB", "alarmProfileAidType"), (0, "FspR7-MIB", "conditionSeverityType"))
if mibBuilder.loadTexts: alarmProfileEntry.setStatus('current')
alarmProfileAidType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3, 1, 1, 1), FspR7AidType())
if mibBuilder.loadTexts: alarmProfileAidType.setStatus('current')
alarmProfileValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3, 1, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmProfileValue.setStatus('current')
alarmProfileDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3, 1, 1, 3), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProfileDefaultValue.setStatus('current')
chassisCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 2)).setObjects(("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: chassisCreation.setStatus('current')
chassisDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3)).setObjects(("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: chassisDeletion.setStatus('current')
entityCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 4)).setObjects(("ADVA-MIB", "entityContainedIn"), ("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: entityCreation.setStatus('current')
entityDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 5)).setObjects(("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: entityDeletion.setStatus('current')
neTrapsinkObjectCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 6)).setObjects(("ADVA-MIB", "neTrapsinkAddress"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: neTrapsinkObjectCreation.setStatus('current')
neTrapsinkObjectDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 7)).setObjects(("ADVA-MIB", "neTrapsinkAddress"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: neTrapsinkObjectDeletion.setStatus('current')
equipmentInserted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 8)).setObjects(("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: equipmentInserted.setStatus('current')
equipmentRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 9)).setObjects(("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: equipmentRemoved.setStatus('current')
crossConnectionCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 10)).setObjects(("FspR7-MIB", "crsConnDeployProvConn"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: crossConnectionCreation.setStatus('current')
crossConnectionDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 11)).setObjects(("FspR7-MIB", "crsConnDeployProvFrom"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: crossConnectionDeletion.setStatus('current')
neStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 20)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: neStateChange.setStatus('current')
entityStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 21)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: entityStateChange.setStatus('current')
neSysTypeChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 22)).setObjects(("FspR7-MIB", "neSysType"), ("ADVA-MIB", "neEventLogTimeStamp"))
if mibBuilder.loadTexts: neSysTypeChanged.setStatus('current')
neAttributeValueChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 30)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: neAttributeValueChange.setStatus('current')
facilityAttributeValueChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 31)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: facilityAttributeValueChange.setStatus('current')
loopbackChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 32)).setObjects(("ADVA-MIB", "entityIndex"), ("FspR7-MIB", "interfaceConfigLoopConfig"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: loopbackChange.setStatus('current')
snmpAgentStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 33)).setObjects(("ADVA-MIB", "snmpProxyEntrySingleTargetOutNodeAgentStatus"), ("ADVA-MIB", "neEventLogTimeStamp"))
if mibBuilder.loadTexts: snmpAgentStateChanged.setStatus('current')
snmpAgentSynchronizationStageChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 34)).setObjects(("ADVA-MIB", "snmpProxyServerSynchroStage"), ("ADVA-MIB", "neEventLogTimeStamp"))
if mibBuilder.loadTexts: snmpAgentSynchronizationStageChanged.setStatus('current')
coldStartAgentReconfigured = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 35)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"))
if mibBuilder.loadTexts: coldStartAgentReconfigured.setStatus('current')
dcnOspfAreaCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 36)).setObjects(("FspR7-MIB", "dcnOspfAreaId"), ("FspR7-MIB", "dcnOspfAreaType"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: dcnOspfAreaCreation.setStatus('current')
dcnOspfAreaDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 37)).setObjects(("FspR7-MIB", "dcnOspfAreaId"), ("FspR7-MIB", "dcnOspfAreaType"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: dcnOspfAreaDeletion.setStatus('current')
dcnOspfAreaPropertiesChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 38)).setObjects(("FspR7-MIB", "dcnOspfAreaId"), ("FspR7-MIB", "dcnOspfAreaType"), ("FspR7-MIB", "dcnOspfAreaStubDefaultMetric"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: dcnOspfAreaPropertiesChange.setStatus('current')
timeNtpAttributeValueChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 39))
if mibBuilder.loadTexts: timeNtpAttributeValueChange.setStatus('current')
ntpSrvAttributeValueChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 40))
if mibBuilder.loadTexts: ntpSrvAttributeValueChange.setStatus('current')
ntpSrvObjectChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 41))
if mibBuilder.loadTexts: ntpSrvObjectChange.setStatus('current')
ntpSrvCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 42))
if mibBuilder.loadTexts: ntpSrvCreation.setStatus('current')
ntpSrvDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 43))
if mibBuilder.loadTexts: ntpSrvDeletion.setStatus('current')
knownHostCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 44)).setObjects(("FspR7-MIB", "knownHostIP"), ("FspR7-MIB", "knownHostKeyEncryptAlgorithm"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: knownHostCreation.setStatus('current')
knownHostDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 45)).setObjects(("FspR7-MIB", "knownHostIP"), ("FspR7-MIB", "knownHostKeyEncryptAlgorithm"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: knownHostDeletion.setStatus('current')
entityObjectChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 100)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: entityObjectChange.setStatus('current')
crsConnObjectChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 101)).setObjects(("FspR7-MIB", "crsConnDeployProvFrom"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: crsConnObjectChange.setStatus('current')
authenticationNotification = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 102)).setObjects(("FspR7-MIB", "authTrapSrcIp"), ("FspR7-MIB", "authTrapLctIp"), ("FspR7-MIB", "authTrapStatus"), ("FspR7-MIB", "authTrapSessionId"), ("FspR7-MIB", "authTrapProtocol"), ("FspR7-MIB", "authTrapPort"), ("FspR7-MIB", "authTrapUserName"), ("FspR7-MIB", "authTrapRadUserName"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: authenticationNotification.setStatus('current')
authenticationNotificationSummary = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 103)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"), ("FspR7-MIB", "authTrapSuccessfulAuthCount"), ("FspR7-MIB", "authTrapUnsuccessfulAuthCount"))
if mibBuilder.loadTexts: authenticationNotificationSummary.setStatus('current')
wdmTunnelResultNotification = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 110)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"), ("FspR7-MIB", "tunnelWdmDataErrorCodeMajor"), ("FspR7-MIB", "tunnelWdmDataErrorCodeMinor"), ("FspR7-MIB", "tunnelWdmDataErrorCategory"), ("FspR7-MIB", "tunnelWdmDataErrorIp"), ("FspR7-MIB", "tunnelWdmDataErrorTid"), ("FspR7-MIB", "tunnelWdmDataSpecificErrorMessage"))
if mibBuilder.loadTexts: wdmTunnelResultNotification.setStatus('current')
ethTunnelResultNotification = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 111)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"), ("FspR7-MIB", "tunnelEthDataErrorCodeMajor"), ("FspR7-MIB", "tunnelEthDataErrorCodeMinor"), ("FspR7-MIB", "tunnelEthDataErrorCategory"), ("FspR7-MIB", "tunnelEthDataErrorIp"), ("FspR7-MIB", "tunnelEthDataErrorTid"), ("FspR7-MIB", "tunnelEthDataSpecificErrorMessage"))
if mibBuilder.loadTexts: ethTunnelResultNotification.setStatus('current')
alarmInputTIF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1215)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("FspR7-MIB", "tifiConfigTifAlarmType"), ("FspR7-MIB", "tifiConfigTifAlarmMessage"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmInputTIF.setStatus('current')
alarmThirdPartyPlug = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1001)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThirdPartyPlug.setStatus('current')
alarmFacilityLoopback = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1002)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFacilityLoopback.setStatus('current')
alarmTerminalLoopback = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1003)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTerminalLoopback.setStatus('current')
alarmFacilityForcedOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1004)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFacilityForcedOn.setStatus('current')
alarmOosDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1005)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosDisabled.setStatus('current')
alarmReceiverDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1006)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmReceiverDisabled.setStatus('current')
alarmTransmitterDisabledOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1007)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTransmitterDisabledOff.setStatus('current')
alarmTransmittedDisabledIdle = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1008)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTransmittedDisabledIdle.setStatus('current')
alarmTransmitterDisabledAis = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1009)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTransmitterDisabledAis.setStatus('current')
alarmTransmitterDisabledEpc = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1010)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTransmitterDisabledEpc.setStatus('current')
alarmOosManagement = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1011)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosManagement.setStatus('current')
alarmOosMaintenance = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1012)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosMaintenance.setStatus('current')
alarmOosAins = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1013)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosAins.setStatus('current')
alarmDcnCommunicationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1014)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDcnCommunicationFail.setStatus('current')
alarmRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1015)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRemoved.setStatus('current')
alarmMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1016)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMismatch.setStatus('current')
alarmEquipmentNotAccepted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1017)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEquipmentNotAccepted.setStatus('current')
alarmFacilityDataRateNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1018)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFacilityDataRateNotSupported.setStatus('current')
alarmEquipmentNotSupportedByPhysicalLayer = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1019)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEquipmentNotSupportedByPhysicalLayer.setStatus('current')
alarmEquipmentNotApproved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1020)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEquipmentNotApproved.setStatus('current')
alarmEquipmentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1021)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEquipmentMismatch.setStatus('current')
alarmFuseAlarm1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1022)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFuseAlarm1.setStatus('deprecated')
alarmFuseAlarm2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1023)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFuseAlarm2.setStatus('deprecated')
alarmFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1024)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFanAlarm.setStatus('deprecated')
alarmFanUnitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1025)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFanUnitAlarm.setStatus('deprecated')
alarmPowerMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1026)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPowerMissing.setStatus('current')
alarmPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1027)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPowerFailure.setStatus('deprecated')
alarmVoltageTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1028)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmVoltageTooLow.setStatus('deprecated')
alarmVoltageTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1029)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmVoltageTooHigh.setStatus('deprecated')
alarmTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1030)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTemperatureTooLow.setStatus('current')
alarmTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1031)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTemperatureTooHigh.setStatus('current')
alarmReceiverFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1032)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmReceiverFailure.setStatus('deprecated')
alarmOpticalInputPowerReceiverFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1033)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalInputPowerReceiverFailure.setStatus('deprecated')
alarmLossOfSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1034)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfSignal.setStatus('current')
alarmIdleSignalReceived = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1035)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmIdleSignalReceived.setStatus('deprecated')
alarmLossOfLinkPulse = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1036)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfLinkPulse.setStatus('deprecated')
alarmLossOfReceiverClockRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1037)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfReceiverClockRecovery.setStatus('current')
alarmElasticStoreOverflowReceiver = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1038)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmElasticStoreOverflowReceiver.setStatus('deprecated')
alarmLossOfTransmitterClockRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1039)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfTransmitterClockRecovery.setStatus('deprecated')
alarmLaserFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1040)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserFailure.setStatus('current')
alarmSwitchFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1041)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSwitchFailed.setStatus('current')
alarmElasticStoreOverflowTransmitter = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1042)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmElasticStoreOverflowTransmitter.setStatus('deprecated')
alarmAutoShutdownLaserOffDueToErrFwd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1043)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToErrFwd.setStatus('current')
alarmAutoShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1044)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdown.setStatus('deprecated')
alarmAutoShutdownAls = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1045)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownAls.setStatus('current')
alarmAutoShutdownSendingIdle = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1046)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingIdle.setStatus('deprecated')
alarmThermoElectricCoolerEndOfLife = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1047)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThermoElectricCoolerEndOfLife.setStatus('current')
alarmOpticalInputPwrReceivedTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1048)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalInputPwrReceivedTooLow.setStatus('current')
alarmOpticalInputPwrReceivedTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1049)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalInputPwrReceivedTooHigh.setStatus('current')
alarmLaserTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1050)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserTemperatureTooHigh.setStatus('current')
alarmLaserTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1051)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserTemperatureTooLow.setStatus('current')
alarmOpticalOutputPowerTransmittedTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1052)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalOutputPowerTransmittedTooLow.setStatus('current')
alarmOpticalOutputPowerTransmittedTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1053)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalOutputPowerTransmittedTooHigh.setStatus('current')
alarmLaserBiasCurrentNormalizedtooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1054)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserBiasCurrentNormalizedtooHigh.setStatus('current')
alarmLossOfSignalTransmitter = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1055)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfSignalTransmitter.setStatus('current')
alarmAttOnReceiverFiberLowerThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1056)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAttOnReceiverFiberLowerThanMonitor.setStatus('current')
alarmAttOnReceiverFiberHigherThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1057)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAttOnReceiverFiberHigherThanMonitor.setStatus('current')
alarmAttOnTransmitterFiberLowerThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1058)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberLowerThanMonitor.setStatus('current')
alarmAttOnTransmitterFiberHigherThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1059)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberHigherThanMonitor.setStatus('current')
alarmAutoShutdownSendingAisOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1060)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOtu.setStatus('current')
alarmLossOfFrameOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1061)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfFrameOtu.setStatus('current')
alarmLossOfMultiFrameOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1062)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfMultiFrameOtu.setStatus('current')
alarmAlarmIndicationSignalOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1063)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOtu.setStatus('current')
alarmSignalDegradeOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1064)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOtu.setStatus('current')
alarmBackwardDefectIndicationOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1065)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOtu.setStatus('current')
alarmAutoShutdownSendingAisOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1066)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOdu.setStatus('current')
alarmLossOfFrameLossOfMultiFrameOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1067)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfFrameLossOfMultiFrameOdu.setStatus('current')
alarmAlarmIndicationSignalOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1068)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOdu.setStatus('current')
alarmOpenConnectionIndicationOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1069)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOdu.setStatus('current')
alarmLockedDefectOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1070)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLockedDefectOdu.setStatus('current')
alarmSignalDegradeOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1071)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOdu.setStatus('current')
alarmBackwardDefectIndicationOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1072)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOdu.setStatus('current')
alarmAlarmIndicationSignalOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1073)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmA.setStatus('current')
alarmOpenConnectionIndicationOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1074)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmA.setStatus('current')
alarmLockedDefectOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1075)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmA.setStatus('current')
alarmLossofTandemConnectionOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1076)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmA.setStatus('current')
alarmSignalDegradeOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1077)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmA.setStatus('current')
alarmBackwardDefectIndicationOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1078)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmA.setStatus('current')
alarmPayloadMismatchOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1079)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPayloadMismatchOPU.setStatus('current')
alarmMultiplexStructureIdentifierMismatchOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1080)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMultiplexStructureIdentifierMismatchOPU.setStatus('current')
alarmLossOfFrame = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1081)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfFrame.setStatus('current')
alarmSectionSignalFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1082)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSectionSignalFailure.setStatus('deprecated')
alarmAutoShutdownSendingAisLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1083)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisLine.setStatus('current')
alarmAlarmIndicationSignalLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1084)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLine.setStatus('current')
alarmRemoteDefectIndicationLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1085)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLine.setStatus('current')
alarmSignalDegradeLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1086)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeLine.setStatus('current')
alarmAlarmIndicationSignalHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1087)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalHigherOrderPath.setStatus('current')
alarmLossOfPointerHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1088)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfPointerHigherOrderPath.setStatus('current')
alarmLossofMultiframeHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1089)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofMultiframeHigherOrderPath.setStatus('current')
alarmLossofSequenceHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1090)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofSequenceHigherOrderPath.setStatus('current')
alarmUnequippedHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1091)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmUnequippedHigherOrderPath.setStatus('current')
alarmPayloadMismatchHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1092)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPayloadMismatchHigherOrderPath.setStatus('current')
alarmRemoteDefectIndicationHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1093)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationHigherOrderPath.setStatus('current')
alarmSignalDegradeHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1094)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeHigherOrderPath.setStatus('deprecated')
alarmAlarmIndicationSignalLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1095)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLowerOrderPath.setStatus('current')
alarmLossOfPointerLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1096)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfPointerLowerOrderPath.setStatus('current')
alarmLossofMultiframeLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1097)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofMultiframeLowerOrderPath.setStatus('current')
alarmLossofSequenceLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1098)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofSequenceLowerOrderPath.setStatus('current')
alarmUnequippedLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1099)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmUnequippedLowerOrderPath.setStatus('current')
alarmPayloadMismatchLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1100)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPayloadMismatchLowerOrderPath.setStatus('current')
alarmRemoteDefectIndicationLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1101)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLowerOrderPath.setStatus('current')
alarmLossOfMultiframeVCG = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1102)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfMultiframeVCG.setStatus('deprecated')
alarmLossOfSequenceVCG = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1103)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfSequenceVCG.setStatus('deprecated')
alarmLossofAlignmentVCG = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1104)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofAlignmentVCG.setStatus('deprecated')
alarmAutoShutdownSendingEPC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1105)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingEPC.setStatus('current')
alarmThres15MinExceededPhysConvES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1106)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvES.setStatus('current')
alarmThres15MinExceededPhysConvCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1107)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCV.setStatus('current')
alarmThres15MinExceededPhysConvDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1108)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvDE.setStatus('current')
alarmThres15MinExceededPhysConvCVDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1109)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCVDE.setStatus('current')
alarmLossOfGfpFrame = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1110)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfGfpFrame.setStatus('current')
alarmPayloadMismatchGfp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1111)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPayloadMismatchGfp.setStatus('current')
alarmGfpLossOfClientSig = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1112)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmGfpLossOfClientSig.setStatus('current')
alarmLossOfCharSyncFromFarEnd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1113)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfCharSyncFromFarEnd.setStatus('current')
alarmSwitchtoProtectionInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1114)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSwitchtoProtectionInhibited.setStatus('current')
alarmSwitchtoWorkingInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1115)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSwitchtoWorkingInhibited.setStatus('current')
alarmOTDRMeasuringinProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1116)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOTDRMeasuringinProgress.setStatus('current')
alarmProtectionNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1117)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmProtectionNotAvailable.setStatus('current')
alarmApsConfigMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1118)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmApsConfigMismatch.setStatus('current')
alarmEmbeddedOperationsChannelFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1119)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEmbeddedOperationsChannelFailure.setStatus('current')
alarmSignalDegradeSection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1120)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeSection.setStatus('deprecated')
alarmSignalDegradationonLinkVector = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1121)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradationonLinkVector.setStatus('current')
alarmSignalFailureonLinkVector = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1122)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalFailureonLinkVector.setStatus('current')
alarmInputVoltageFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1123)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmInputVoltageFailure.setStatus('current')
alarmPowerSupplyUnitFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1124)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPowerSupplyUnitFailure.setStatus('current')
alarmCurrentTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1125)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCurrentTooLow.setStatus('current')
alarmCurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1126)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCurrentTooHigh.setStatus('current')
alarmMultipleFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1127)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMultipleFanFailure.setStatus('current')
alarmSingleFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1128)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSingleFanFailure.setStatus('current')
alarmLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1129)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLinkDown.setStatus('current')
alarmVoltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1130)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmVoltageOutOfRange.setStatus('current')
alarmPeerLink = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1131)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPeerLink.setStatus('current')
alarmHwFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1132)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmHwFailure.setStatus('current')
alarmAlarmIndicationSignalOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1133)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmB.setStatus('current')
alarmOpenConnectionIndicationOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1134)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmB.setStatus('current')
alarmLockedDefectOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1135)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmB.setStatus('current')
alarmLossofTandemConnectionOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1136)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmB.setStatus('current')
alarmSignalDegradeOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1137)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmB.setStatus('current')
alarmBackwardDefectIndicationOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1138)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmB.setStatus('current')
alarmApsProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1139)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmApsProtocolFailure.setStatus('current')
alarmApdLowVoltage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1140)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmApdLowVoltage.setStatus('deprecated')
alarmApdHighVoltage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1141)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmApdHighVoltage.setStatus('deprecated')
alarmLinkControlProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1142)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLinkControlProtocolFailure.setStatus('current')
alarmReceiverLowTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1143)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmReceiverLowTemp.setStatus('deprecated')
alarmReceiverHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1144)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmReceiverHighTemp.setStatus('deprecated')
alarmThermoElectricCoolerCurrentTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1145)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThermoElectricCoolerCurrentTooLow.setStatus('deprecated')
alarmThermoElectricCoolerCurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1146)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThermoElectricCoolerCurrentTooHigh.setStatus('deprecated')
alarmSubModuleTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1147)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSubModuleTempTooHigh.setStatus('current')
alarmSignalDegradeOlm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1148)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOlm.setStatus('current')
alarmReceiverOverloadProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1149)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmReceiverOverloadProtection.setStatus('current')
alarmLossOfFrameMux = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1150)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfFrameMux.setStatus('current')
alarmLossOfFrameMuxFarEnd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1151)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfFrameMuxFarEnd.setStatus('current')
alarmLossOfCharSync = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1152)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfCharSync.setStatus('current')
alarmThres15MinExceededFecCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1153)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededFecCE.setStatus('current')
alarmThres15MinExceededFecUBE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1154)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededFecUBE.setStatus('current')
alarmThres15MinExceededFecES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1155)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededFecES.setStatus('current')
alarmThres15MinExceededFecSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1156)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededFecSES.setStatus('current')
alarmThres15MinExceededMuxES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1157)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededMuxES.setStatus('current')
alarmThres15MinExceededMuxSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1158)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededMuxSES.setStatus('current')
alarmThres15MinExceededGfpCHEC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1159)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededGfpCHEC.setStatus('current')
alarmThres15MinExceededGfpTHEC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1160)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededGfpTHEC.setStatus('current')
alarmThres15MinExceededGfpTHecDisc = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1161)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededGfpTHecDisc.setStatus('current')
alarmThres15MinExceededGfpTsuperblockDisc = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1162)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededGfpTsuperblockDisc.setStatus('current')
alarmIntrusionRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1163)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmIntrusionRx.setStatus('deprecated')
alarmIntrusionTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1164)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmIntrusionTx.setStatus('deprecated')
alarmAutoShutdownLaserOffDueToHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1165)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToHighTemp.setStatus('current')
alarmAutoShutdownLaserOffDueToHighTxPwr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1166)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToHighTxPwr.setStatus('current')
alarmLaserEndOfLife = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1167)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserEndOfLife.setStatus('current')
alarmLaserBiasCurrAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1168)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserBiasCurrAbnormal.setStatus('current')
alarmOpticalPowerTxLOS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1169)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalPowerTxLOS.setStatus('current')
alarmMidstageFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1170)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMidstageFault.setStatus('current')
alarmFarEndIpAddressUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1171)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFarEndIpAddressUnknown.setStatus('current')
alarmTopologyDataCalculationInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1172)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTopologyDataCalculationInProgress.setStatus('current')
alarmNtpServer1Unreachable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1173)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpServer1Unreachable.setStatus('current')
alarmNtpServer2Unreachable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1174)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpServer2Unreachable.setStatus('current')
alarmNtpServer3Unreachable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1175)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpServer3Unreachable.setStatus('current')
alarmAutoShutdownSendingAisOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1176)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOpu.setStatus('current')
alarmAlarmIndicationSignalOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1177)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOpu.setStatus('current')
alarmAlarmIndicationSignalOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1178)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmC.setStatus('current')
alarmBackwardDefectIndicationOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1179)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmC.setStatus('current')
alarmLockedDefectOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1180)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmC.setStatus('current')
alarmLossofTandemConnectionOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1181)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmC.setStatus('current')
alarmOpenConnectionIndicationOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1182)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmC.setStatus('current')
alarmSignalDegradeOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1183)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmC.setStatus('current')
alarmLoopbackError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1184)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLoopbackError.setStatus('current')
alarmSectionTraceMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1185)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSectionTraceMismatch.setStatus('current')
alarmTraceIdentifierMismatchOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1186)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOtu.setStatus('current')
alarmTraceIdentifierMismatchOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1187)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOdu.setStatus('current')
alarmTraceIdentifierMismatchOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1188)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmA.setStatus('current')
alarmTraceIdentifierMismatchOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1189)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmC.setStatus('current')
alarmTraceIdentifierMismatchOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1190)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmB.setStatus('current')
alarmDatabaseMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1191)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDatabaseMismatch.setStatus('current')
alarmDatabaseNcuMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1192)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDatabaseNcuMismatch.setStatus('current')
alarmServerSignalFailureSectionRS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1193)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailureSectionRS.setStatus('current')
alarmFwpMismatchDownloadServiceAffecting = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1194)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFwpMismatchDownloadServiceAffecting.setStatus('current')
alarmFwpMismatchDownloadNotServiceAffecting = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1195)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFwpMismatchDownloadNotServiceAffecting.setStatus('current')
alarmDatabaseVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1196)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDatabaseVersionMismatch.setStatus('current')
alarmClientFailForwarding = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1197)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmClientFailForwarding.setStatus('current')
alarmVirtualChannelAis = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1198)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmVirtualChannelAis.setStatus('current')
alarmServerSignalFailureVf = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1199)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailureVf.setStatus('current')
alarmSignalFailureOnLink = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1200)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalFailureOnLink.setStatus('current')
alarmServerSignalFailureGfp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1201)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailureGfp.setStatus('current')
alarmServerSignalFailurePath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1202)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailurePath.setStatus('current')
alarmGainTiltNotSettable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1203)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmGainTiltNotSettable.setStatus('current')
alarmTxPowerLimited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1204)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTxPowerLimited.setStatus('current')
alarmEqualizationProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1205)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEqualizationProgress.setStatus('current')
alarmUPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1206)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmUPortFailure.setStatus('current')
alarmAutoShutdownBlock = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1207)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownBlock.setStatus('current')
alarmServerSignalFailTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1208)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailTx.setStatus('current')
alarmPayloadMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1209)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPayloadMismatch.setStatus('current')
alarmVoaControlFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1210)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmVoaControlFail.setStatus('current')
alarmProvisioningLocked = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1211)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmProvisioningLocked.setStatus('current')
alarmMansw = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1212)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMansw.setStatus('current')
alarmWtrTimerRunning = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1213)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmWtrTimerRunning.setStatus('current')
alarmPcsSignalDegrade = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1214)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPcsSignalDegrade.setStatus('current')
alarmThres15MinExceededSonetSectES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1216)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectES.setStatus('current')
alarmThres15MinExceededSonetSectSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1217)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSES.setStatus('current')
alarmThres15MinExceededSonetSectSEFS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1218)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSEFS.setStatus('current')
alarmThres15MinExceededSonetSectCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1219)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectCV.setStatus('current')
alarmThres15MinExceededSonetLineES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1220)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineES.setStatus('current')
alarmThres15MinExceededSonetLineSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1221)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineSES.setStatus('current')
alarmThres15MinExceededSonetLineCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1222)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineCV.setStatus('current')
alarmThres15MinExceededSonetLineUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1223)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineUAS.setStatus('current')
alarmThres15MinExceededOduTcmAES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1224)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAES.setStatus('current')
alarmThres15MinExceededOduTcmASES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1225)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmASES.setStatus('current')
alarmThres15MinExceededOduTcmAUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1226)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAUAS.setStatus('current')
alarmThres15MinExceededOduTcmABbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1227)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmABbe.setStatus('current')
alarmThres15MinExceededOduTcmBES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1228)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBES.setStatus('current')
alarmThres15MinExceededOduTcmBSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1229)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBSES.setStatus('current')
alarmThres15MinExceededOduTcmBUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1230)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBUAS.setStatus('current')
alarmThres15MinExceededOduTcmBBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1231)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBBbe.setStatus('current')
alarmThres15MinExceededOduTcmCES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1232)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCES.setStatus('current')
alarmThres15MinExceededOduTcmCSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1233)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCSES.setStatus('current')
alarmThres15MinExceededOduTcmCUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1234)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCUAS.setStatus('current')
alarmThres15MinExceededOduTcmCBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1235)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCBbe.setStatus('current')
alarmThres15MinExceededOtuES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1236)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuES.setStatus('current')
alarmThres15MinExceededOtuSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1237)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuSES.setStatus('current')
alarmThres15MinExceededOtuUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1238)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuUAS.setStatus('current')
alarmThres15MinExceededOtuBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1239)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuBbe.setStatus('current')
alarmThres15MinExceededOduES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1240)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduES.setStatus('current')
alarmThres15MinExceededOduSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1241)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduSES.setStatus('current')
alarmThres15MinExceededOduUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1242)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduUAS.setStatus('current')
alarmThres15MinExceededOduBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1243)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduBbe.setStatus('current')
alarmThresOptPowerCtrlFailureLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1244)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureLow.setStatus('current')
alarmThresOptPowerCtrlFailureHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1245)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureHigh.setStatus('current')
alarmDcnServerSignalFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1246)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDcnServerSignalFailure.setStatus('current')
alarmMaxPowerConsEquipModulesToHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1247)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMaxPowerConsEquipModulesToHigh.setStatus('current')
alarmMaxPowerConsProvModulesToHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1248)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMaxPowerConsProvModulesToHigh.setStatus('current')
alarmEquipmentMismatchAllow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1249)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEquipmentMismatchAllow.setStatus('current')
alarmOosPrePostSig = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1250)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosPrePostSig.setStatus('current')
alarmOosPrePostSigInSetUpProcess = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1251)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosPrePostSigInSetUpProcess.setStatus('current')
alarmOosPrePostSigInTearDownProcess = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1252)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosPrePostSigInTearDownProcess.setStatus('current')
alarmCpTunnelModificationInProgess = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1253)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCpTunnelModificationInProgess.setStatus('current')
alarmCapabilityLevelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1254)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCapabilityLevelMismatch.setStatus('current')
alarmOosPrePostSigEstablishFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1255)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosPrePostSigEstablishFailed.setStatus('current')
alarmOosPrePostSigAfterPrecompFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1256)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosPrePostSigAfterPrecompFailed.setStatus('current')
alarmCpTunnelEstablishFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1257)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCpTunnelEstablishFailed.setStatus('current')
alarmCpTunnelPrecompFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1258)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCpTunnelPrecompFailed.setStatus('current')
alarmLocalFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1259)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLocalFault.setStatus('current')
alarmOscPwrTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1260)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOscPwrTooHigh.setStatus('current')
alarmOscPwrTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1261)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOscPwrTooLow.setStatus('current')
alarmAseTableBuild = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1262)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableBuild.setStatus('current')
alarmAseTableNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1263)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableNotAvailable.setStatus('current')
alarmAutomaticPowerReduction = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1264)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutomaticPowerReduction.setStatus('current')
alarmHighBer = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1266)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmHighBer.setStatus('current')
alarmPumpLaser1TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1267)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser1TempTooHigh.setStatus('current')
alarmPumpLaser1TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1268)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser1TempTooLow.setStatus('current')
alarmPumpLaser2TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1269)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser2TempTooHigh.setStatus('current')
alarmPumpLaser2TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1270)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser2TempTooLow.setStatus('current')
alarmOspfIpServerNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1271)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOspfIpServerNotAvailable.setStatus('current')
alarmLossOsc = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1272)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOsc.setStatus('current')
alarmBrPwrRxTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1273)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBrPwrRxTooHigh.setStatus('current')
alarmAseTableGenFailSignalinput = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1274)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenFailSignalinput.setStatus('current')
alarmAseTableGenFailOscMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1275)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenFailOscMissing.setStatus('current')
alarmAseTableGenFailHighBackreflection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1276)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenFailHighBackreflection.setStatus('current')
alarmRamanPumpPwrTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1277)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRamanPumpPwrTooHigh.setStatus('current')
alarmRamanPumpPwrTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1278)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRamanPumpPwrTooLow.setStatus('current')
alarmAutoPowerShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1279)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoPowerShutdown.setStatus('current')
alarmAseTableGenFailLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1280)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenFailLow.setStatus('current')
alarmAseLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1281)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseLow.setStatus('current')
alarmConfigurableOpticalOutputPowerTransmittedTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1282)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmConfigurableOpticalOutputPowerTransmittedTooHigh.setStatus('current')
alarmConfigurableOpticalOutputPowerTransmittedTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1283)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmConfigurableOpticalOutputPowerTransmittedTooLow.setStatus('current')
alarmLosAttProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1284)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLosAttProgress.setStatus('current')
alarmAseTableGenProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1285)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenProgress.setStatus('current')
alarmSignalDegradeScn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1286)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeScn.setStatus('current')
alarmDispertionTunningCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1287)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDispertionTunningCondition.setStatus('current')
alarmTurnupCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1288)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTurnupCondition.setStatus('current')
alarmTurnupFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1289)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTurnupFailed.setStatus('current')
alarmFaultOnOpm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1301)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFaultOnOpm.setStatus('current')
alarmOptSignalFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1302)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOptSignalFailure.setStatus('current')
alarmOpmAbnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1303)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpmAbnormalCondition.setStatus('current')
alarmHwOprReachedHT = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1304)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmHwOprReachedHT.setStatus('current')
alarmDisabledChannelPowerTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1305)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDisabledChannelPowerTooHigh.setStatus('current')
alarmLossOfSignalCPort = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1306)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfSignalCPort.setStatus('current')
alarmServerSignalFailureODU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1308)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailureODU.setStatus('current')
alarmSignalFailureOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1309)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalFailureOPU.setStatus('current')
alarmServerSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1310)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFail.setStatus('current')
alarmServerSignalReduced = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1311)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalReduced.setStatus('current')
alarmDispersionCompensationTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1312)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDispersionCompensationTooLow.setStatus('current')
alarmDispersionCompensationTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1313)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDispersionCompensationTooHigh.setStatus('current')
alarmFarEndCommFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1315)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFarEndCommFailure.setStatus('current')
alarmLinkAttenuationTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1316)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLinkAttenuationTooLow.setStatus('current')
alarmLinkAttenuationTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1317)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLinkAttenuationTooHigh.setStatus('current')
alarmEntityOutageIndication = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1320)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEntityOutageIndication.setStatus('current')
alarmFiberConnectionMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1321)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFiberConnectionMissing.setStatus('current')
alarmFarEndInformationMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1322)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFarEndInformationMismatch.setStatus('current')
alarmAutomaticPowerReductionForEyeSafety = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1325)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutomaticPowerReductionForEyeSafety.setStatus('current')
alarmLossOfPilotSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1326)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfPilotSignal.setStatus('current')
alarmPumpLaser3TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1327)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser3TempTooHigh.setStatus('current')
alarmPumpLaser3TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1328)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser3TempTooLow.setStatus('current')
alarmPilotReceiveLevelHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1329)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPilotReceiveLevelHigh.setStatus('current')
alarmAutoShutdownStbyProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1330)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownStbyProtection.setStatus('current')
alarmDatabaseFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1331)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDatabaseFailure.setStatus('current')
alarmLatencyTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1335)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLatencyTooHigh.setStatus('current')
alarmLatencyTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1336)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLatencyTooLow.setStatus('current')
alarmThres15MinExceededFecBERCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1337)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededFecBERCE.setStatus('current')
alarmAutoShutdownSendingLckOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1338)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingLckOdu.setStatus('current')
alarmNtpNotInSync = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1339)).setObjects(("FspR7-MIB", "ntpSrvCurrentConditionSeverity"), ("FspR7-MIB", "ntpSrvCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpNotInSync.setStatus('current')
alarmEncryptionModuleTamperDetected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1340)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleTamperDetected.setStatus('current')
alarmEncryptionModuleCryPasswdMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1341)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdMissing.setStatus('current')
alarmEncryptionModuleCryPasswdError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1342)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdError.setStatus('current')
alarmEncryptionModuleFwpUpdateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1343)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleFwpUpdateEnabled.setStatus('current')
alarmEncryptionModuleSelfTestStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1344)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestStarted.setStatus('current')
alarmEncryptionModuleSelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1345)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFail.setStatus('current')
alarmEncryptionModuleSelfTestFailCritical = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1346)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFailCritical.setStatus('current')
alarmEncryptionPortAuthPasswdMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1350)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortAuthPasswdMissing.setStatus('current')
alarmEncryptionPortMaxKeyExchgFailuresReachedIs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1351)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedIs.setStatus('current')
alarmEncryptionPortMaxKeyExchgFailuresReachedOos = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1352)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedOos.setStatus('current')
alarmEncryptionPortEncryptionSwitchedOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1353)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchedOff.setStatus('current')
alarmEncryptionPortKeyExchangedForced = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1354)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortKeyExchangedForced.setStatus('current')
alarmEncryptionPortEncryptionSwitchOffEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1355)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchOffEnabled.setStatus('current')
alarmEncryptionPortKeyInitExchgMissed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1356)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortKeyInitExchgMissed.setStatus('current')
alarmRoundTripDelayTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1380)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRoundTripDelayTooHigh.setStatus('current')
alarmRoundTripDelayTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1381)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRoundTripDelayTooLow.setStatus('current')
alarmNtpForSchedEqlzRequired = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1386)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpForSchedEqlzRequired.setStatus('current')
alarmAirDustFilterClogged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1385)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAirDustFilterClogged.setStatus('current')
alarmOscOpticalPowerControlFailHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1387)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailHigh.setStatus('current')
alarmOscOpticalPowerControlFailLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1388)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailLow.setStatus('current')
alarmAmplifierAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1389)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAmplifierAbnormal.setStatus('current')
alarmAseTableGenFailPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1390)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenFailPilot.setStatus('current')
alarmPumpLaser4TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1391)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser4TempTooHigh.setStatus('current')
alarmPumpLaser4TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1392)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser4TempTooLow.setStatus('current')
alarmFwdAseTableFailPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1393)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFwdAseTableFailPilot.setStatus('current')
alarmFwdAseTableOnPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1394)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFwdAseTableOnPilot.setStatus('current')
alarmInputVoltageFailurePort1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1395)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmInputVoltageFailurePort1.setStatus('current')
alarmInputVoltageFailurePort2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1396)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmInputVoltageFailurePort2.setStatus('current')
alarmXfpDecisionThresSetFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1397)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmXfpDecisionThresSetFailed.setStatus('current')
alarmNtpSrvOosDsbld = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1398)).setObjects(("FspR7-MIB", "ntpSrvCurrentConditionSeverity"), ("FspR7-MIB", "ntpSrvCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpSrvOosDsbld.setStatus('current')
alarmThres15MinExceededPhysConvSE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1399)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvSE.setStatus('current')
alarmThres15MinExceededPhysConvESTX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1400)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvESTX.setStatus('current')
alarmThres15MinExceededPhysConvCVTX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1401)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCVTX.setStatus('current')
alarmThres15MinExceededPhysConvSETX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1402)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvSETX.setStatus('current')
alarmPrbsRcvActivated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1403)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPrbsRcvActivated.setStatus('current')
alarmPrbsTrmtActivated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1404)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPrbsTrmtActivated.setStatus('current')
alarmPrbsLossOfSeqSynch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1405)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPrbsLossOfSeqSynch.setStatus('current')
alarmOpuClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1406)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpuClientSignalFail.setStatus('current')
alarmLossOfTestSeqSynchOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1407)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfTestSeqSynchOpu.setStatus('current')
alarmAutoShutdownOpuClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1408)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownOpuClientSignalFail.setStatus('current')
alarmLocalOscTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1409)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooLow.setStatus('current')
alarmLocalOscTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1410)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooHigh.setStatus('current')
alarmDifferentialGroupDelayTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1412)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDifferentialGroupDelayTooHigh.setStatus('current')
alarmChromaticDispersionTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1413)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmChromaticDispersionTooLow.setStatus('current')
alarmChromaticDispersionTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1414)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmChromaticDispersionTooHigh.setStatus('current')
alarmSignalToNoiseRatioTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1415)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalToNoiseRatioTooLow.setStatus('current')
alarmLocalOscLevelAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1416)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLocalOscLevelAbnormal.setStatus('current')
alarmCarrierFreqOffsetTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1417)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooLow.setStatus('current')
alarmCarrierFreqOffsetTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1418)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooHigh.setStatus('current')
alarmLossOfLane = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1419)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfLane.setStatus('current')
alarmServerSignalFailureODUcrs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1420)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailureODUcrs.setStatus('current')
alarmAutoShutdownSendingOciOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1421)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingOciOdu.setStatus('current')
alarmOduTribMsiMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1422)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOduTribMsiMismatch.setStatus('current')
alarmChannelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1423)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmChannelMismatch.setStatus('current')
alarmLaserOnDelay = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1450)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserOnDelay.setStatus('current')
alarmAutoShutdownTxRxLasersDueToHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1451)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownTxRxLasersDueToHighTemp.setStatus('current')
transientThres1DayExceededPhysConvES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3001)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvES.setStatus('current')
transientThres1DayExceededPhysConvCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3002)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCV.setStatus('current')
transientThres1DayExceededPhysConvDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3003)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvDE.setStatus('current')
transientThres1DayExceededPhysConvCVDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3004)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCVDE.setStatus('current')
transientMin15RecordsAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3005)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientMin15RecordsAvailable.setStatus('current')
transientDay1RecordsAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3006)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientDay1RecordsAvailable.setStatus('current')
transientWeek1RecordsAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3007)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientWeek1RecordsAvailable.setStatus('current')
transientNeColdStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3008)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNeColdStart.setStatus('current')
transientWorkingSwitchedtoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3009)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientWorkingSwitchedtoProtection.setStatus('current')
transientWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3010)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientWorkingSwitchedBacktoWorking.setStatus('current')
transientManualWorkingSwitchedtoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3011)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientManualWorkingSwitchedtoProtection.setStatus('current')
transientManualWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3012)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientManualWorkingSwitchedBacktoWorking.setStatus('current')
transientForcedWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3013)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoWorking.setStatus('current')
transientForcedWorkingSwitchedBacktoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3014)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoProtection.setStatus('current')
transientThres1DayExceededBytesTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3015)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededBytesTx.setStatus('deprecated')
transientThres1DayExceededFecCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3016)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededFecCE.setStatus('current')
transientThres1DayExceededFecUBE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3017)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededFecUBE.setStatus('current')
transientThres1DayExceededFecES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3018)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededFecES.setStatus('current')
transientThres1DayExceededFecSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3019)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededFecSES.setStatus('current')
transientThres1DayExceededMuxES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3020)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededMuxES.setStatus('current')
transientThres1DayExceededMuxSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3021)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededMuxSES.setStatus('current')
transientTopologyDataInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3022)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientTopologyDataInvalid.setStatus('current')
transientCopyFileFailNotExist = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3023)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileFailNotExist.setStatus('current')
transientCopyFileConnectionFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3024)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileConnectionFail.setStatus('current')
transientCopyFileLoginFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3025)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileLoginFail.setStatus('current')
transientCopyFileSpaceFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3026)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileSpaceFail.setStatus('current')
transientCopyFileProtocolFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3027)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileProtocolFail.setStatus('current')
transientCopyFileAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3028)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileAccessDenied.setStatus('current')
transientCopyFileChecksumFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3029)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileChecksumFail.setStatus('current')
transientCopyFileTransferStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3030)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileTransferStart.setStatus('current')
transientCopyFileTransferInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3031)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileTransferInProgress.setStatus('current')
transientCopyFileTransferComplete = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3032)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileTransferComplete.setStatus('current')
transientLocalCopyMemFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3033)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFail.setStatus('current')
transientLocalCopyFileStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3034)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyFileStarted.setStatus('current')
transientLocalCopyMemComplted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3035)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemComplted.setStatus('current')
transientSoftwareActivation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3036)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientSoftwareActivation.setStatus('current')
transientSoftwareActivationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3037)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientSoftwareActivationFail.setStatus('current')
transientDatabaseActivationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3038)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientDatabaseActivationFail.setStatus('current')
transientDatabaseActivation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3039)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientDatabaseActivation.setStatus('current')
transientBootUpFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3040)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientBootUpFailed.setStatus('current')
transientBootUpCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3041)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientBootUpCompleted.setStatus('current')
transientBootUpStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3042)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientBootUpStarted.setStatus('current')
transientIntrusionRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3043)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientIntrusionRx.setStatus('current')
transientIntrusionTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3044)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientIntrusionTx.setStatus('current')
transientDatabaseMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3045)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientDatabaseMismatch.setStatus('deprecated')
transientSwResetReload = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3046)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientSwResetReload.setStatus('current')
transientInstallFwpCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3047)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientInstallFwpCompleted.setStatus('current')
transientCopyFileSshHostKeyFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3048)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileSshHostKeyFail.setStatus('current')
transientCopyFileNoHostKeyFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3049)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileNoHostKeyFail.setStatus('current')
transientHardwareResetInputTIF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3050)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientHardwareResetInputTIF.setStatus('current')
transientThres1DayExceededSonetSectES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3051)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectES.setStatus('current')
transientThres1DayExceededSonetSectSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3052)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSES.setStatus('current')
transientThres1DayExceededSonetSectSEFS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3053)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSEFS.setStatus('current')
transientThres1DayExceededSonetSectCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3054)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectCV.setStatus('current')
transientThres1DayExceededSonetLineES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3055)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineES.setStatus('current')
transientThres1DayExceededSonetLineSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3056)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineSES.setStatus('current')
transientThres1DayExceededSonetLineCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3057)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineCV.setStatus('current')
transientThres1DayExceededSonetLineUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3058)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineUAS.setStatus('current')
transientThres1DayExceededOduTcmAES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3059)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAES.setStatus('current')
transientThres1DayExceededOduTcmASES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3060)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmASES.setStatus('current')
transientThres1DayExceededOduTcmAUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3061)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAUAS.setStatus('current')
transientThres1DayExceededOduTcmABbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3062)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmABbe.setStatus('current')
transientThres1DayExceededOduTcmBES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3063)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBES.setStatus('current')
transientThres1DayExceededOduTcmBSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3064)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBSES.setStatus('current')
transientThres1DayExceededOduTcmBUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3065)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBUAS.setStatus('current')
transientThres1DayExceededOduTcmBBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3066)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBBbe.setStatus('current')
transientThres1DayExceededOduTcmCES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3067)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCES.setStatus('current')
transientThres1DayExceededOduTcmCSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3068)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCSES.setStatus('current')
transientThres1DayExceededOduTcmCUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3069)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCUAS.setStatus('current')
transientThres1DayExceededOduTcmCBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3070)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCBbe.setStatus('current')
transientThres1DayExceededOtuES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3071)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOtuES.setStatus('current')
transientThres1DayExceededOtuSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3072)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOtuSES.setStatus('current')
transientThres1DayExceededOtuUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3073)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOtuUAS.setStatus('current')
transientThres1DayExceededOtuBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3074)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOtuBbe.setStatus('current')
transientThres1DayExceededOduES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3075)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduES.setStatus('current')
transientThres1DayExceededOduSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3076)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduSES.setStatus('current')
transientThres1DayExceededOduUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3077)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduUAS.setStatus('current')
transientThres1DayExceededOduBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3078)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduBbe.setStatus('current')
transientCpConnectionEstablishmentStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3080)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionEstablishmentStart.setStatus('current')
transientCpConnectionEstablishmentFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3081)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionEstablishmentFail.setStatus('current')
transientCpConnectionEstablishmentCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3082)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionEstablishmentCompleted.setStatus('current')
transientCpConnectionModificationStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3083)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionModificationStart.setStatus('current')
transientCpConnectionModificationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3084)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionModificationFail.setStatus('current')
transientCpConnectionModificationCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3085)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionModificationCompleted.setStatus('current')
transientAlarmProfileActivation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3086)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAlarmProfileActivation.setStatus('current')
transientAlarmProfileActivationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3087)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAlarmProfileActivationFail.setStatus('current')
transientCpConnectionEstablishmentAborted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3088)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionEstablishmentAborted.setStatus('current')
transientEqlzStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3089)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzStart.setStatus('current')
transientEqlzFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3090)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzFailed.setStatus('current')
transientEqlzCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3091)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzCompleted.setStatus('current')
transientEqlzRequestDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3100)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzRequestDenied.setStatus('current')
transientEqlzNotRequired = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3101)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzNotRequired.setStatus('current')
transientEqlzProcessPassed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3102)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzProcessPassed.setStatus('current')
transientEqlzProcessWait = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3103)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzProcessWait.setStatus('current')
transientDispersionCompFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3110)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientDispersionCompFailed.setStatus('current')
transientAlpSettingStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3111)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAlpSettingStarted.setStatus('current')
transientAlpSettingFinished = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3112)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAlpSettingFinished.setStatus('current')
transientFarEndDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3113)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientFarEndDyingGasp.setStatus('current')
transientLocalCopyMemFailDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3114)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailDenied.setStatus('current')
transientLocalCopyMemFailCrcErr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3115)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailCrcErr.setStatus('current')
transientAlarmProfileFactoryDefaultActivation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3116)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAlarmProfileFactoryDefaultActivation.setStatus('current')
transientLocalCopyMemFailVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3120)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailVersionMismatch.setStatus('current')
transientLocalCopyMemFailWrongState = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3121)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailWrongState.setStatus('current')
transientLocalCopyMemFailDamagedConfFile = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3122)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailDamagedConfFile.setStatus('current')
transientLocalCopyMemFailFsckFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3123)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailFsckFailed.setStatus('current')
transientLocalCopyMemFailNotExist = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3124)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailNotExist.setStatus('current')
transientLocalCopyMemFailGeneration = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3140)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailGeneration.setStatus('current')
transientCopyFileFailDisabledProtocol = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3141)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileFailDisabledProtocol.setStatus('current')
transientAutomaticBackupReport = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3142)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAutomaticBackupReport.setStatus('current')
transientRestorationStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3160)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientRestorationStart.setStatus('current')
transientRestorationFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3161)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientRestorationFailed.setStatus('current')
transientRestorationCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3162)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientRestorationCompleted.setStatus('current')
transientFarEndChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3163)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientFarEndChanged.setStatus('current')
transientBootUpRejected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3170)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientBootUpRejected.setStatus('current')
transientThres1DayExceededFecBERCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3175)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededFecBERCE.setStatus('current')
transientPreComputationReady = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3180)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientPreComputationReady.setStatus('current')
transientNeTimeChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3181))
if mibBuilder.loadTexts: transientNeTimeChanged.setStatus('current')
transientNtpSrvTestSuccessed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3182)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvTestSuccessed.setStatus('current')
transientNtpSrvTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3183)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvTestFailed.setStatus('current')
transientNtpSrvSyncStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3184)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvSyncStarted.setStatus('current')
transientNtpSrvSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3185)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvSyncFailed.setStatus('current')
transientNtpSrvSyncEnded = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3186)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvSyncEnded.setStatus('current')
transientPmSnapshotStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3187)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientPmSnapshotStarted.setStatus('current')
transientPmSnapshotEnded = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3188)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientPmSnapshotEnded.setStatus('current')
transientNtpSrvSyncChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3189)).setObjects(("FspR7-MIB", "ntpServerSyncStatus"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvSyncChanged.setStatus('current')
transientThres1DayExceededPhysConvSE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3190)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvSE.setStatus('current')
transientThres1DayExceededPhysConvESTX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3191)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvESTX.setStatus('current')
transientThres1DayExceededPhysConvCVTX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3192)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCVTX.setStatus('current')
transientThres1DayExceededPhysConvSETX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3193)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvSETX.setStatus('current')
transientCryptoRtf = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3194)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoRtf.setStatus('current')
transientCryptoFwpRevChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3195)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoFwpRevChanged.setStatus('current')
transientCryptoPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3196)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoPasswdChanged.setStatus('current')
transientCryptoFwpUpdate = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3197)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoFwpUpdate.setStatus('current')
transientCryptoKeyExchgFailCondClr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3198)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoKeyExchgFailCondClr.setStatus('current')
transientCryptoAuthPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3199)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoAuthPasswdChanged.setStatus('current')
transientCryptoSessKeyLifetimeChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3200)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoSessKeyLifetimeChanged.setStatus('current')
transientCryptoAuthPasswdInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3201)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoAuthPasswdInvalid.setStatus('current')
transientEncryptionPortSingleKeyExchgFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3202)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEncryptionPortSingleKeyExchgFailed.setStatus('current')
transientWaitToRevert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3203)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientWaitToRevert.setStatus('current')
transientReversionStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3204)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientReversionStarted.setStatus('current')
transientReversionFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3205)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientReversionFailed.setStatus('current')
transientReversionCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3206)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientReversionCompleted.setStatus('current')
entityStateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 1), )
if mibBuilder.loadTexts: entityStateTable.setStatus('current')
entityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: entityStateEntry.setStatus('current')
entityStateAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 1, 1, 1), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entityStateAdmin.setStatus('current')
entityStateOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 1, 1, 2), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityStateOper.setStatus('current')
entityStateSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 1, 1, 3), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityStateSecondaryStates.setStatus('current')
entityStateCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 2), )
if mibBuilder.loadTexts: entityStateCapTable.setStatus('current')
entityStateCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: entityStateCapEntry.setStatus('current')
entityStateCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 2, 1, 1), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityStateCapAdmin.setStatus('current')
controlPlaneWdmEntityStateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 3), )
if mibBuilder.loadTexts: controlPlaneWdmEntityStateTable.setStatus('current')
controlPlaneWdmEntityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 3, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: controlPlaneWdmEntityStateEntry.setStatus('current')
controlPlaneWdmEntityStateAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 3, 1, 1), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmEntityStateAdmin.setStatus('current')
controlPlaneWdmEntityStateOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 3, 1, 2), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmEntityStateOper.setStatus('current')
controlPlaneWdmEntityStateSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 3, 1, 3), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmEntityStateSecondaryStates.setStatus('current')
controlPlaneEntityStateCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 4), )
if mibBuilder.loadTexts: controlPlaneEntityStateCapTable.setStatus('current')
controlPlaneEntityStateCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 4, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: controlPlaneEntityStateCapEntry.setStatus('current')
controlPlaneEntityStateCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 4, 1, 1), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEntityStateCapAdmin.setStatus('current')
dependenciesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 5), )
if mibBuilder.loadTexts: dependenciesTable.setStatus('current')
dependenciesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "dependenciesIndex"))
if mibBuilder.loadTexts: dependenciesEntry.setStatus('current')
dependenciesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dependenciesIndex.setStatus('current')
dependenciesAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 5, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dependenciesAid.setStatus('current')
controlPlaneEthEntityStateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 6), )
if mibBuilder.loadTexts: controlPlaneEthEntityStateTable.setStatus('current')
controlPlaneEthEntityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 6, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: controlPlaneEthEntityStateEntry.setStatus('current')
controlPlaneEthEntityStateAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 6, 1, 1), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthEntityStateAdmin.setStatus('current')
controlPlaneEthEntityStateOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 6, 1, 2), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthEntityStateOper.setStatus('current')
controlPlaneEthEntityStateSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 6, 1, 3), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthEntityStateSecondaryStates.setStatus('current')
controlPlaneEthEntityStateCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 7), )
if mibBuilder.loadTexts: controlPlaneEthEntityStateCapTable.setStatus('current')
controlPlaneEthEntityStateCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 7, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: controlPlaneEthEntityStateCapEntry.setStatus('current')
controlPlaneEthEntityStateCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 7, 1, 1), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthEntityStateCapAdmin.setStatus('current')
controlPlaneOtnEntityStateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 8), )
if mibBuilder.loadTexts: controlPlaneOtnEntityStateTable.setStatus('current')
controlPlaneOtnEntityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 8, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: controlPlaneOtnEntityStateEntry.setStatus('current')
controlPlaneOtnEntityStateAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 8, 1, 1), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnEntityStateAdmin.setStatus('current')
controlPlaneOtnEntityStateOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 8, 1, 2), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnEntityStateOper.setStatus('current')
controlPlaneOtnEntityStateSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 8, 1, 3), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnEntityStateSecondaryStates.setStatus('current')
controlPlaneOtnEntityStateCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 9), )
if mibBuilder.loadTexts: controlPlaneOtnEntityStateCapTable.setStatus('current')
controlPlaneOtnEntityStateCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 9, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: controlPlaneOtnEntityStateCapEntry.setStatus('current')
controlPlaneOtnEntityStateCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 9, 1, 1), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnEntityStateCapAdmin.setStatus('current')
moduleDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1), )
if mibBuilder.loadTexts: moduleDiagnosticsTable.setStatus('current')
moduleDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: moduleDiagnosticsEntry.setStatus('current')
moduleDiagnosticsTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 1), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsTemp.setStatus('current')
moduleDiagnosticsUpperTempThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 2), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsUpperTempThres.setStatus('current')
moduleDiagnosticsLowerTempThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 3), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsLowerTempThres.setStatus('current')
moduleDiagnosticsCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 4), FspR7CapInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsCapabilityLevel.setStatus('current')
moduleDiagnosticsCurrentLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 5), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsCurrentLowThres.setStatus('current')
moduleDiagnosticsCurrentHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 6), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsCurrentHighThres.setStatus('current')
moduleDiagnosticsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsDescription.setStatus('current')
moduleDiagnosticsInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsInventoryDescription.setStatus('current')
currentDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 2), )
if mibBuilder.loadTexts: currentDiagnosticsTable.setStatus('current')
currentDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentDiagnosticsEntry.setStatus('current')
currentDiagnosticsAmpere = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 2, 1, 1), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDiagnosticsAmpere.setStatus('current')
currentDiagnosticsUpperThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 2, 1, 2), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDiagnosticsUpperThres.setStatus('current')
currentDiagnosticsPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 2, 1, 3), FspR7PsuOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDiagnosticsPsuOutputPower.setStatus('current')
moduleConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3), )
if mibBuilder.loadTexts: moduleConfigTable.setStatus('current')
moduleConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: moduleConfigEntry.setStatus('current')
moduleConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigAlias.setStatus('current')
moduleConfigCapabilityLevelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 2), FspR7CapInventory()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigCapabilityLevelProvision.setStatus('current')
moduleConfigOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 3), FspR7TifOutputReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigOutputReset.setStatus('current')
moduleConfigScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 4), FspR7Scrambling()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigScrambling.setStatus('current')
moduleConfigLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigLagSysPrio.setStatus('current')
moduleConfigEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 6), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigEqlzAdmin.setStatus('current')
moduleConfigInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 7), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigInitiateEqualization.setStatus('current')
moduleConfigCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 8), FspR7L2CacEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigCac.setStatus('current')
moduleDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4), )
if mibBuilder.loadTexts: moduleDataTable.setStatus('current')
moduleDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: moduleDataEntry.setStatus('current')
moduleDataDeploymentScenario = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 1), FspR7DeploymentScenario()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataDeploymentScenario.setStatus('current')
moduleDataHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 2), Unsigned32()).setUnits('0.1 HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataHeight.setStatus('current')
moduleDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 3), Unsigned32()).setUnits('0.1 HP').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataWidth.setStatus('current')
moduleDataNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataNetworkPorts.setStatus('current')
moduleDataClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 96), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataClientPorts.setStatus('current')
moduleDataStages = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 6), FspR7Stages()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataStages.setStatus('current')
moduleDataConnectionLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataConnectionLocation.setStatus('current')
moduleDataInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataInternalPorts.setStatus('current')
moduleDataInternalPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 9), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataInternalPlugs.setStatus('current')
moduleDataInternalPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 10), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataInternalPlugRates.setStatus('current')
moduleDataChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 11), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataChannel.setStatus('current')
moduleDataUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataUpgradePorts.setStatus('current')
moduleDataSerialPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataSerialPorts.setStatus('current')
moduleDataEccPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataEccPorts.setStatus('current')
moduleDataMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 15), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataMaxPowerConsumption.setStatus('current')
moduleDataScuRing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 16), FspR7ScuRing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataScuRing.setStatus('current')
moduleDataNetworkPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 17), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataNetworkPlugs.setStatus('current')
moduleDataMidstagePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataMidstagePorts.setStatus('current')
moduleDataMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 19), FspR7TransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataMode.setStatus('current')
moduleDataRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 20), FspR7RoadmNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataRoadmNumber.setStatus('current')
moduleDataChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 21), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataChannelsNumber.setStatus('current')
moduleDataChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 22), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataChannelSpacing.setStatus('current')
moduleDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 23), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataTransmitChannel.setStatus('current')
moduleDataCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 24), FspR7Category()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataCategory.setStatus('current')
moduleDataFanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataFanPorts.setStatus('current')
moduleDataLanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 26), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataLanPorts.setStatus('current')
moduleDataMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 27), FspR7Mapping()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataMapping.setStatus('current')
moduleDataBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 28), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataBand.setStatus('current')
moduleDataChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 29), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataChannelsProvision.setStatus('current')
moduleDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 30), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataType.setStatus('current')
moduleDataInternalPlugsReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 33), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataInternalPlugsReach.setStatus('current')
wdmChannelModuleInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 5), )
if mibBuilder.loadTexts: wdmChannelModuleInventoryTable.setStatus('current')
wdmChannelModuleInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: wdmChannelModuleInventoryEntry.setStatus('current')
wdmChannelModuleInventoryChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 5, 1, 1), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleInventoryChannelId.setStatus('current')
wdmChannelModuleInventoryReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 5, 1, 2), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleInventoryReach.setStatus('current')
wdmChannelModuleDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6), )
if mibBuilder.loadTexts: wdmChannelModuleDataTable.setStatus('current')
wdmChannelModuleDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: wdmChannelModuleDataEntry.setStatus('current')
wdmChannelModuleDataSuppClientPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6, 1, 1), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleDataSuppClientPlugRates.setStatus('current')
wdmChannelModuleDataSuppNetworkPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6, 1, 2), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleDataSuppNetworkPlugRates.setStatus('current')
wdmChannelModuleDataSuppClientPlugTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleDataSuppClientPlugTypes.setStatus('current')
wdmChannelModuleDataSuppNetworkPlugTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6, 1, 4), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleDataSuppNetworkPlugTypes.setStatus('current')
plugInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 7), )
if mibBuilder.loadTexts: plugInventoryTable.setStatus('current')
plugInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: plugInventoryEntry.setStatus('current')
plugInventoryMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 7, 1, 1), FspR7PlugDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugInventoryMaxDataRate.setStatus('current')
plugInventoryChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 7, 1, 2), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugInventoryChannelId.setStatus('current')
plugInventoryReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 7, 1, 3), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugInventoryReach.setStatus('current')
plugDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8), )
if mibBuilder.loadTexts: plugDataTable.setStatus('current')
plugDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: plugDataEntry.setStatus('current')
plugDataConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8, 1, 1), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDataConnectorType.setStatus('current')
plugDataFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8, 1, 2), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDataFiberType.setStatus('current')
plugDataLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDataLoopbackAttenuation.setStatus('current')
plugDataMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8, 1, 4), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDataMaxPowerConsumption.setStatus('current')
apsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 9), )
if mibBuilder.loadTexts: apsConfigTable.setStatus('current')
apsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: apsConfigEntry.setStatus('current')
apsConfigSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 9, 1, 1), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsConfigSDswitching.setStatus('current')
apsConfigHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 9, 1, 2), ApsHoldoffTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsConfigHoldOffTime.setStatus('current')
apsConfigWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsConfigWaitToRestore.setStatus('current')
apsProtGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10), )
if mibBuilder.loadTexts: apsProtGroupStatusTable.setStatus('current')
apsProtGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: apsProtGroupStatusEntry.setStatus('current')
apsProtGroupStatusApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 1), ApsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusApsType.setStatus('current')
apsProtGroupStatusDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 2), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusDirection.setStatus('current')
apsProtGroupStatusRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 3), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusRevertiveMode.setStatus('current')
apsProtGroupStatusProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 4), ProtectionMech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusProtectionMech.setStatus('current')
apsProtGroupStatusWorkingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 5), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusWorkingIndex.setStatus('current')
apsProtGroupStatusProtectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusProtectionIndex.setStatus('current')
apsProtGroupStatusProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 7), FspR7ProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusProtectionType.setStatus('current')
apsProtFacilityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 11), )
if mibBuilder.loadTexts: apsProtFacilityConfigTable.setStatus('current')
apsProtFacilityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: apsProtFacilityConfigEntry.setStatus('current')
apsProtFacilityConfigSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 11, 1, 1), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsProtFacilityConfigSwitchCommand.setStatus('current')
apsProtFacilityConfigInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 11, 1, 2), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsProtFacilityConfigInhibitSwitchToProt.setStatus('current')
apsProtFacilityConfigInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 11, 1, 3), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsProtFacilityConfigInhibitSwitchToWork.setStatus('current')
shelfDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 12), )
if mibBuilder.loadTexts: shelfDiagnosticsTable.setStatus('current')
shelfDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: shelfDiagnosticsEntry.setStatus('current')
shelfDiagnosticsPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 12, 1, 1), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDiagnosticsPowerConsumption.setStatus('current')
shelfDiagnosticsPowerOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 12, 1, 2), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDiagnosticsPowerOutput.setStatus('current')
shelfDiagnosticsMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 12, 1, 3), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDiagnosticsMaxPowerConsumption.setStatus('current')
dcnTopologyDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 13), )
if mibBuilder.loadTexts: dcnTopologyDataTable.setStatus('current')
dcnTopologyDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "dcnTopologyDataIndex"))
if mibBuilder.loadTexts: dcnTopologyDataEntry.setStatus('current')
dcnTopologyDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dcnTopologyDataIndex.setStatus('current')
dcnTopologyDataNodeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnTopologyDataNodeIpAddress.setStatus('current')
dcnTopologyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 14), )
if mibBuilder.loadTexts: dcnTopologyConfigTable.setStatus('current')
dcnTopologyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: dcnTopologyConfigEntry.setStatus('current')
dcnTopologyConfigActivateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 14, 1, 1), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcnTopologyConfigActivateDetect.setStatus('current')
dcnTopologyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 15), )
if mibBuilder.loadTexts: dcnTopologyStatusTable.setStatus('current')
dcnTopologyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 15, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: dcnTopologyStatusEntry.setStatus('current')
dcnTopologyStatusTopologyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 15, 1, 1), FspR7TopologyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnTopologyStatusTopologyType.setStatus('current')
otdrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 16), )
if mibBuilder.loadTexts: otdrConfigTable.setStatus('current')
otdrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 16, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: otdrConfigEntry.setStatus('current')
otdrConfigTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 16, 1, 1), FspR7OtdrPeriod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdrConfigTimePeriod.setStatus('current')
otdrDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 17), )
if mibBuilder.loadTexts: otdrDataTable.setStatus('current')
otdrDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 17, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: otdrDataEntry.setStatus('current')
otdrDataRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 17, 1, 1), Unsigned32()).setUnits('Min').setMaxAccess("readonly")
if mibBuilder.loadTexts: otdrDataRemainingTime.setStatus('current')
edfaConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 18), )
if mibBuilder.loadTexts: edfaConfigTable.setStatus('current')
edfaConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 18, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: edfaConfigEntry.setStatus('current')
edfaConfigTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaConfigTilt.setStatus('current')
edfaConfigGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 18, 1, 2), FspR7Gain()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaConfigGain.setStatus('current')
edfaConfigVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 18, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(50, 350), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaConfigVariableGain.setStatus('current')
opticalAmplifierEquipmentDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 19), )
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsTable.setStatus('current')
opticalAmplifierEquipmentDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 19, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsEntry.setStatus('current')
opticalAmplifierEquipmentDiagnosticsSubTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 19, 1, 1), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsSubTemp.setStatus('current')
opticalAmplifierEquipmentDiagnosticsUpperSubTempThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 19, 1, 2), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsUpperSubTempThres.setStatus('current')
shelfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 20), )
if mibBuilder.loadTexts: shelfConfigTable.setStatus('current')
shelfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 20, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: shelfConfigEntry.setStatus('current')
shelfConfigRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 20, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfConfigRack.setStatus('current')
shelfConfigRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfConfigRackNumber.setStatus('current')
shelfConfigRackOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 20, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 45), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfConfigRackOrder.setStatus('current')
dcnTopologyConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 21), )
if mibBuilder.loadTexts: dcnTopologyConfigCapTable.setStatus('current')
dcnTopologyConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 21, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: dcnTopologyConfigCapEntry.setStatus('current')
dcnTopologyConfigCapActivateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 21, 1, 1), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnTopologyConfigCapActivateDetect.setStatus('current')
lanIpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 22), )
if mibBuilder.loadTexts: lanIpDataTable.setStatus('current')
lanIpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 22, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: lanIpDataEntry.setStatus('current')
lanIpDataOscmMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 22, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIpDataOscmMembers.setStatus('current')
eRoadmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23), )
if mibBuilder.loadTexts: eRoadmConfigTable.setStatus('current')
eRoadmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eRoadmConfigEntry.setStatus('current')
eRoadmConfigOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eRoadmConfigOpticalSetPoint.setStatus('current')
eRoadmConfigOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eRoadmConfigOffset.setStatus('current')
eRoadmConfigTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eRoadmConfigTilt.setStatus('current')
eRoadmConfigInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23, 1, 4), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eRoadmConfigInitiateEqualization.setStatus('current')
eRoadmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 24), )
if mibBuilder.loadTexts: eRoadmDataTable.setStatus('current')
eRoadmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 24, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eRoadmDataEntry.setStatus('current')
eRoadmDataSumTransmited = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 24, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 80), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmDataSumTransmited.setStatus('current')
eRoadmDataSumReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 24, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 80), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmDataSumReceived.setStatus('current')
eRoadmDataConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 24, 1, 3), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmDataConnectionState.setStatus('current')
eRoadmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25), )
if mibBuilder.loadTexts: eRoadmInfoTable.setStatus('current')
eRoadmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eRoadmInfoEntry.setStatus('current')
eRoadmInfoNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoNetworkPorts.setStatus('current')
eRoadmInfoClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 96), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoClientPorts.setStatus('current')
eRoadmInfoInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoInternalPorts.setStatus('current')
eRoadmInfoInternalPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 4), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoInternalPlugs.setStatus('current')
eRoadmInfoInternalPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 5), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoInternalPlugRates.setStatus('current')
eRoadmInfoChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 6), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoChannel.setStatus('current')
eRoadmInfoShelfHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 7), Unsigned32()).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoShelfHeight.setStatus('current')
eRoadmInfoUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoUpgradePorts.setStatus('current')
eRoadmInfoMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 9), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoMaxPowerConsumption.setStatus('current')
eRoadmInfoScuRing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 10), FspR7ScuRing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoScuRing.setStatus('current')
eRoadmInfoChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 11), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoChannelSpacing.setStatus('current')
shelfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26), )
if mibBuilder.loadTexts: shelfInfoTable.setStatus('current')
shelfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: shelfInfoEntry.setStatus('current')
shelfInfoStandardSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoStandardSlots.setStatus('current')
shelfInfoShelfHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 2), Unsigned32()).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoShelfHeight.setStatus('current')
shelfInfoStandardSlotHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 3), Unsigned32()).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoStandardSlotHeight.setStatus('current')
shelfInfoNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoNetworkPorts.setStatus('current')
shelfInfoClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 96), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoClientPorts.setStatus('current')
shelfInfoInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoInternalPorts.setStatus('current')
shelfInfoUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoUpgradePorts.setStatus('current')
shelfInfoOscPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoOscPorts.setStatus('current')
shelfInfoOscChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 9), FspR7OscChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoOscChannel.setStatus('current')
shelfInfoOmBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 10), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoOmBand.setStatus('current')
shelfInfoShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoShelfId.setStatus('current')
eRoadmConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27), )
if mibBuilder.loadTexts: eRoadmConfigCapTable.setStatus('current')
eRoadmConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eRoadmConfigCapEntry.setStatus('current')
eRoadmConfigCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmConfigCapOpticalSetPoint.setStatus('current')
eRoadmConfigCapOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmConfigCapOffset.setStatus('current')
eRoadmConfigCapTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmConfigCapTilt.setStatus('current')
eRoadmConfigCapInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27, 1, 4), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmConfigCapInitiateEqualization.setStatus('current')
capabilityDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 28), )
if mibBuilder.loadTexts: capabilityDataTable.setStatus('current')
capabilityDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 28, 1), ).setIndexNames((0, "FspR7-MIB", "capabilityDataType"), (0, "FspR7-MIB", "capabilityDataCapabilityLevel"))
if mibBuilder.loadTexts: capabilityDataEntry.setStatus('current')
capabilityDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 28, 1, 1), FspR7EquipmentType())
if mibBuilder.loadTexts: capabilityDataType.setStatus('current')
capabilityDataCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 28, 1, 2), FspR7CapInventory())
if mibBuilder.loadTexts: capabilityDataCapabilityLevel.setStatus('current')
capabilityDataDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 28, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityDataDescription.setStatus('current')
farEndPlugDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 29), )
if mibBuilder.loadTexts: farEndPlugDiagnosticsTable.setStatus('current')
farEndPlugDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 29, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndPlugDiagnosticsEntry.setStatus('current')
farEndPlugDiagnosticsTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 29, 1, 1), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDiagnosticsTemp.setStatus('current')
farEndPlugDiagnosticsUpperTempThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 29, 1, 2), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDiagnosticsUpperTempThres.setStatus('current')
farEndPlugDiagnosticsLowerTempThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 29, 1, 3), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDiagnosticsLowerTempThres.setStatus('current')
farEndPlugConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 30), )
if mibBuilder.loadTexts: farEndPlugConfigTable.setStatus('current')
farEndPlugConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 30, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndPlugConfigEntry.setStatus('current')
farEndPlugConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 30, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: farEndPlugConfigAlias.setStatus('current')
farEndPlugConfigMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 30, 1, 2), FspR7PlugDataRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: farEndPlugConfigMaxDataRate.setStatus('current')
farEndPlugConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 31), )
if mibBuilder.loadTexts: farEndPlugConfigCapTable.setStatus('current')
farEndPlugConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 31, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndPlugConfigCapEntry.setStatus('current')
farEndPlugConfigCapMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 31, 1, 1), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugConfigCapMaxDataRate.setStatus('current')
farEndPlugDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32), )
if mibBuilder.loadTexts: farEndPlugDataTable.setStatus('current')
farEndPlugDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndPlugDataEntry.setStatus('current')
farEndPlugDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 1), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataType.setStatus('current')
farEndPlugDataMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 2), FspR7PlugDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataMaxDataRate.setStatus('current')
farEndPlugDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataTransmitChannel.setStatus('current')
farEndPlugDataReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 4), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataReach.setStatus('current')
farEndPlugDataFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 5), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataFiberType.setStatus('current')
farEndPlugDataConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 6), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataConnectorType.setStatus('current')
farEndPlugDataAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 7), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataAdmin.setStatus('current')
moduleConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 35), )
if mibBuilder.loadTexts: moduleConfigCapTable.setStatus('current')
moduleConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 35, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: moduleConfigCapEntry.setStatus('current')
moduleConfigCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 35, 1, 1), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConfigCapEqlzAdmin.setStatus('current')
moduleConfigCapInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 35, 1, 2), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConfigCapInitiateEqualization.setStatus('current')
moduleConfigCapCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 35, 1, 3), FspR7L2CacEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConfigCapCac.setStatus('current')
interfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1), )
if mibBuilder.loadTexts: interfaceConfigTable.setStatus('current')
interfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: interfaceConfigEntry.setStatus('current')
interfaceConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigIdentifier.setStatus('current')
interfaceConfigLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 2), LoopConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigLoopConfig.setStatus('current')
interfaceConfigDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 3), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigDataLayerPmReset.setStatus('current')
interfaceConfigEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 4), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigEqlzAdmin.setStatus('current')
interfaceConfigDispertionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 5), FspR7DispersionConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigDispertionConfig.setStatus('current')
interfaceConfigTurnupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 6), FspR7TurnupConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigTurnupConfig.setStatus('current')
interfaceConfigInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 7), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigInitiateEqualization.setStatus('current')
interfaceConfigExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigExternalVid.setStatus('current')
interfaceConfigLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 9), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigLanAid.setStatus('current')
interfaceConfigBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 10), FspR7PortBehaviour()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigBehaviour.setStatus('current')
interfaceConfigDispersionOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 12), FspR7DispersionOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigDispersionOperation.setStatus('current')
interfaceDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2), )
if mibBuilder.loadTexts: interfaceDataTable.setStatus('current')
interfaceDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: interfaceDataEntry.setStatus('current')
interfaceDataConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 1), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataConnector.setStatus('current')
interfaceDataSignalMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 2), FspR7SignalMapping()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataSignalMapping.setStatus('deprecated')
interfaceDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 3), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataRate.setStatus('current')
interfaceDataBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 4), FspR7PortBehaviour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataBehaviour.setStatus('current')
interfaceDataTermLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 5), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataTermLevel.setStatus('current')
interfaceDataConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 6), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataConnectionType.setStatus('current')
interfaceDataMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 7), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataMonLevel.setStatus('current')
interfaceDataValidSignalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5760), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataValidSignalTimer.setStatus('current')
interfaceDataPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 9), OtnPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataPayload.setStatus('current')
interfaceDataParity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 10), FspR7ParityBit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataParity.setStatus('current')
interfaceDataPhysIfBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 11), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataPhysIfBaseType.setStatus('current')
interfaceDataLaserReleaseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1440), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataLaserReleaseTimer.setStatus('current')
interfaceDataCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 13), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataCir.setStatus('current')
interfaceDataTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 14), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataTransmitWavelength.setStatus('current')
interfaceDataTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 15), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataTransmitFrequency.setStatus('current')
interfaceDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 16), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataTransmitChannel.setStatus('current')
interfaceDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 17), FspR7EquipmentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceDataType.setStatus('current')
interfaceDataConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 18), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataConnectionState.setStatus('current')
interfaceDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 19), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataFacilityType.setStatus('current')
interfaceDataProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 20), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataProtectionRole.setStatus('current')
interfaceDataReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 21), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataReach.setStatus('current')
interfaceDataFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 22), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataFiberType.setStatus('current')
interfaceDataOdtuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 23), FspR7OdtuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataOdtuType.setStatus('current')
interfaceDataOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 24), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataOduTribPortNo.setStatus('current')
interfaceDataOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataOduTribTimeSlottNo.setStatus('current')
interfaceDataRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 26), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataRevertiveMode.setStatus('current')
opticalIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3), )
if mibBuilder.loadTexts: opticalIfConfigTable.setStatus('current')
opticalIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalIfConfigEntry.setStatus('current')
opticalIfConfigAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 1), FspR7AlsMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigAlsMode.setStatus('current')
opticalIfConfigErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 2), FspR7ErrorFwdMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigErrorForwarding.setStatus('current')
opticalIfConfigFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 3), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigFecType.setStatus('current')
opticalIfConfigLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 4), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLaserOffDelayFunction.setStatus('current')
opticalIfConfigForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 5), FspR7LaserForcedOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigForceLaserOn.setStatus('current')
opticalIfConfigLossAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 6), FspR7LossAttenuation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLossAttenuation.setStatus('current')
opticalIfConfigAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 7), Unsigned32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigAprHighThreshold.setStatus('current')
opticalIfConfigAseTabCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 8), FspR7AseTabOpr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigAseTabCreation.setStatus('current')
opticalIfConfigWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigWdmRxChannel.setStatus('current')
opticalIfConfigSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegThresOtu.setStatus('current')
opticalIfConfigSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegPeriodOtu.setStatus('current')
opticalIfConfigSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegThresOdu.setStatus('current')
opticalIfConfigSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegPeriodOdu.setStatus('current')
opticalIfConfigSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 14), FspR7BERThresholdSection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegThresSonetSection.setStatus('current')
opticalIfConfigSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegThresSdhSection.setStatus('current')
opticalIfConfigSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegPeriodSdhSection.setStatus('current')
opticalIfConfigDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 17), FspR7DispersionModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigDispersionMode.setStatus('current')
opticalIfConfigDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigDispersionSetting.setStatus('current')
opticalIfConfigOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigOpticalSetPoint.setStatus('current')
opticalIfConfigOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigOffset.setStatus('current')
opticalIfConfigTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTilt.setStatus('current')
opticalIfConfigAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigAreaId.setStatus('current')
opticalIfConfigAutoThresReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 23), FspR7AutoThresReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigAutoThresReset.setStatus('current')
opticalIfConfigUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 24), FspR7UntaggedFrames()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigUtag.setStatus('current')
opticalIfConfigPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigPvid.setStatus('current')
opticalIfConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 26), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigPriority.setStatus('current')
opticalIfConfigStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 27), FspR7SnmpHexString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigStagType.setStatus('current')
opticalIfConfigCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 28), FspR7L2CacEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigCac.setStatus('current')
opticalIfConfigMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1518, 9600), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigMaxFrameSize.setStatus('current')
opticalIfConfigLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLagActivePorts.setStatus('current')
opticalIfConfigLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLagPrio.setStatus('current')
opticalIfConfigLagLoadBallanceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 32), FspR7LagLoadBallanceSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLagLoadBallanceSource.setStatus('current')
opticalIfConfigLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 33), FspR7LacpTimeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLacpTimeout.setStatus('current')
opticalIfConfigTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 34), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTransmitChannel.setStatus('current')
opticalIfConfigFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 35), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigFarEndCommunication.setStatus('current')
opticalIfConfigLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 36), FspR7LacpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLacpMode.setStatus('current')
opticalIfConfigTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 37), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTxOffDelay.setStatus('current')
opticalIfConfigOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 38), FspR7OpuPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigOpuPayloadType.setStatus('current')
opticalIfConfigOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigOscOpticalSetpoint.setStatus('current')
opticalIfConfigFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 40), FspR7FiberBrand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigFiberBrand.setStatus('current')
opticalIfConfigTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 41), FspR7TiltSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTiltSet.setStatus('current')
opticalIfConfigForceFwdAsePilotOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 42), FspR7LaserForcedOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigForceFwdAsePilotOn.setStatus('current')
opticalIfConfigXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 43), FspR7XfpDecisionThres()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigXfpDecisionThres.setStatus('current')
opticalIfConfigDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 44), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigDisparityCorrection.setStatus('current')
opticalIfConfigPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 45), FspR7PrbsPmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigPrbsPmReset.setStatus('current')
opticalIfConfigTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 46), FspR7TestMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTestPrbsRcvMode.setStatus('current')
opticalIfConfigTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 47), FspR7TestMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTestPrbsTrmtMode.setStatus('current')
opticalIfConfigTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 48), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTributarySlotMethod.setStatus('current')
opticalIfConfigBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 53), FspR7Bip()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigBip.setStatus('current')
opticalIfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4), )
if mibBuilder.loadTexts: opticalIfDataTable.setStatus('current')
opticalIfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalIfDataEntry.setStatus('current')
opticalIfDataWdmChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 1), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataWdmChannel.setStatus('current')
opticalIfDataWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataWavelength.setStatus('deprecated')
opticalIfDataFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 3), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataFiberType.setStatus('current')
opticalIfDataLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 4), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLinkLength.setStatus('current')
opticalIfDataAlsHoldoff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 5), FspR7AlsHoldoff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataAlsHoldoff.setStatus('current')
opticalIfDataLaserOffDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 6), FspR7LaserOffDelayTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLaserOffDelayTime.setStatus('current')
opticalIfDataProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 7), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataProtectionRole.setStatus('current')
opticalIfDataChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 8), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataChannelSpacing.setStatus('current')
opticalIfDataTunableLowestChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataTunableLowestChannel.setStatus('current')
opticalIfDataTunableHighestChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 10), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataTunableHighestChannel.setStatus('current')
opticalIfDataTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 11), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataTransmitWavelength.setStatus('current')
opticalIfDataFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 12), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataFrequency.setStatus('current')
opticalIfDataChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 13), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataChannelsNumber.setStatus('current')
opticalIfDataFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 14), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataFunction.setStatus('current')
opticalIfDataPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 15), FspR7PortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataPortMode.setStatus('current')
opticalIfDataPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 16), FspR7PortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataPortRole.setStatus('current')
opticalIfDataCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 17), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataCirRcv.setStatus('current')
opticalIfDataCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataCbsRcv.setStatus('current')
opticalIfDataCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 19), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataCirTrmt.setStatus('current')
opticalIfDataCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataCbsTrmt.setStatus('current')
opticalIfDataVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 21), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataVethAid.setStatus('current')
opticalIfDataLagPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 22), FspR7LagPorts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagPorts.setStatus('current')
opticalIfDataLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 23), FspR7LagPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagPortType.setStatus('current')
opticalIfDataLagStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 24), FspR7LagStandby()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagStandby.setStatus('current')
opticalIfDataLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 25), FspR7LacpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLacpMode.setStatus('current')
opticalIfDataLagKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagKey.setStatus('current')
opticalIfDataLagPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagPortNo.setStatus('current')
opticalIfDataLagState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 28), FspR7LagState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagState.setStatus('current')
opticalIfDataLagIdFend = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 29), FspR7LagIdFend()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagIdFend.setStatus('current')
opticalIfDataLagFendState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 30), FspR7LagFendState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagFendState.setStatus('current')
opticalIfDataLagSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 31), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagSysMac.setStatus('current')
opticalIfDataLagSysIdFend = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 32), FspR7LagSysIdFend()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagSysIdFend.setStatus('current')
opticalIfDataLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 33), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagSysPrio.setStatus('current')
opticalIfDataBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 34), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataBand.setStatus('current')
opticalIfDataStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 35), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataStuff.setStatus('current')
opticalIfDataChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 36), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataChannelsProvision.setStatus('current')
opticalIfDataAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 37), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataAutoPTassignment.setStatus('current')
opticalIfDataTributaryFreeSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 38), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 512), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataTributaryFreeSlotNo.setStatus('current')
opticalIfDataTributaryAssignedSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 39), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 512), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataTributaryAssignedSlotNo.setStatus('current')
opticalIfDataOdtuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 40), FspR7OdtuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataOdtuType.setStatus('current')
opticalIfDataOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 41), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataOduTribPortNo.setStatus('current')
opticalIfDataOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 42), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataOduTribTimeSlottNo.setStatus('current')
opticalIfDiagTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5), )
if mibBuilder.loadTexts: opticalIfDiagTable.setStatus('current')
opticalIfDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalIfDiagEntry.setStatus('current')
opticalIfDiagLaserBiasCurrentNormalized = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 1), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLaserBiasCurrentNormalized.setStatus('current')
opticalIfDiagLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 2), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLaserTemp.setStatus('current')
opticalIfDiagInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagInputPower.setStatus('current')
opticalIfDiagOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagOutputPower.setStatus('current')
opticalIfDiagLaserBiasCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 5), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLaserBiasCurrentLevel.setStatus('current')
opticalIfDiagPumpLaser1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 6), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaser1Temp.setStatus('current')
opticalIfDiagPumpLaser2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 7), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaser2Temp.setStatus('current')
opticalIfDiagPumpLaserBiasCurrent1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 8), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent1.setStatus('current')
opticalIfDiagPumpLaserBiasCurrent2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 9), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent2.setStatus('current')
opticalIfDiagAttenuationOfVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 10), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagAttenuationOfVoa.setStatus('current')
opticalIfDiagBackreflectionPowerReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 11), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagBackreflectionPowerReceived.setStatus('current')
opticalIfDiagOscGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 12), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagOscGain.setStatus('current')
opticalIfDiagOscPowerReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 13), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagOscPowerReceived.setStatus('current')
opticalIfDiagRamanPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 14), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagRamanPumpPower.setStatus('current')
opticalIfDiagRamanEstSignalGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 15), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagRamanEstSignalGain.setStatus('current')
opticalIfDiagChromaticDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 16), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagChromaticDispersionCompensation.setStatus('current')
opticalIfDiagLinkAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 17), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLinkAttenuation.setStatus('current')
opticalIfDiagPumpLaserBiasCurrent3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 18), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent3.setStatus('current')
opticalIfDiagPumpLaser3Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 19), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaser3Temp.setStatus('current')
opticalIfDiagLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300000), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLatency.setStatus('current')
opticalIfDiagRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30000000), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagRoundTripDelay.setStatus('current')
opticalIfDiagOscOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 22), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagOscOutputPower.setStatus('current')
opticalIfDiagPumpLaser4Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 23), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaser4Temp.setStatus('current')
opticalIfDiagPumpLaserBiasCurrent4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 24), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent4.setStatus('current')
opticalIfDiagLocalOscTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 26), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLocalOscTemp.setStatus('current')
opticalIfDiagDifferentialGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 27), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagDifferentialGroupDelay.setStatus('current')
opticalIfDiagChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 28), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagChromaticDispersion.setStatus('current')
opticalIfDiagSignalToNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 29), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagSignalToNoiseRatio.setStatus('current')
opticalIfDiagCarrierFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 30), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagCarrierFreqOffset.setStatus('current')
opticalIfDiagLocalOscBiasLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 31), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLocalOscBiasLevel.setStatus('current')
opticalIfDiagPrbsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPrbsElapsedTime.setStatus('current')
opticalIfDiagPrbsErrorFreeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 33), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPrbsErrorFreeTime.setStatus('current')
opticalIfDiagPrbsAvgBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 34), Counter64String()).setUnits('1.0E-14').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPrbsAvgBER.setStatus('current')
opticalIfDiagPrbsMaxBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 35), Counter64String()).setUnits('1.0E-14').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPrbsMaxBER.setStatus('current')
ethernetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6), )
if mibBuilder.loadTexts: ethernetConfigTable.setStatus('current')
ethernetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: ethernetConfigEntry.setStatus('current')
ethernetConfigAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 1), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigAutoNegotiation.setStatus('current')
ethernetConfigDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 2), EthDuplexMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigDuplexMode.setStatus('current')
ethernetConfigBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 3), FspR7Bitrate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigBitrate.setStatus('current')
ethernetConfigFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 4), FspR7FlowControlMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigFlowControl.setStatus('current')
ethernetConfigIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 5), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigIpType.setStatus('current')
ethernetConfigIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetConfigIpAddrMonitor.setStatus('current')
ethernetConfigIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetConfigIpMaskMonitor.setStatus('current')
ethernetConfigAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigAreaId.setStatus('current')
lanIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 8), )
if mibBuilder.loadTexts: lanIpConfigTable.setStatus('current')
lanIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: lanIpConfigEntry.setStatus('current')
lanIpConfigIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIpConfigIpAddr.setStatus('current')
lanIpConfigIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIpConfigIpAddrMask.setStatus('current')
ospfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 9), )
if mibBuilder.loadTexts: ospfConfigTable.setStatus('current')
ospfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: ospfConfigEntry.setStatus('current')
ospfConfigOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 9, 1, 1), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfConfigOspf.setStatus('current')
ospfConfigMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfConfigMetric.setStatus('current')
ospfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 10), )
if mibBuilder.loadTexts: ospfDataTable.setStatus('current')
ospfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: ospfDataEntry.setStatus('current')
ospfDataDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfDataDesignatedRouter.setStatus('current')
ospfDataBkupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfDataBkupDesignatedRouter.setStatus('current')
pppfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11), )
if mibBuilder.loadTexts: pppfConfigTable.setStatus('current')
pppfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: pppfConfigEntry.setStatus('current')
pppfConfigBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1312), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('kbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigBitrate.setStatus('current')
pppfConfigIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 2), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigIpType.setStatus('current')
pppfConfigDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 3), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigDataLayerPmReset.setStatus('current')
pppfConfigAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigAreaId.setStatus('current')
pppfConfigBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 5), FspR7Baund()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigBaud.setStatus('current')
pppfConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigAlias.setStatus('current')
pppDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12), )
if mibBuilder.loadTexts: pppDataTable.setStatus('current')
pppDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: pppDataEntry.setStatus('current')
pppDataNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDataNearEndIp.setStatus('current')
pppDataFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDataFarEndIp.setStatus('current')
pppDataEccInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDataEccInstance.setStatus('current')
pppDataNearEndIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDataNearEndIpMonitor.setStatus('current')
pppDataProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1, 5), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDataProxyArp.setStatus('current')
crsDcnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 13), )
if mibBuilder.loadTexts: crsDcnDataTable.setStatus('current')
crsDcnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: crsDcnDataEntry.setStatus('current')
crsDcnDataPppInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 13, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsDcnDataPppInstance.setStatus('current')
crsDcnDataEccInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 13, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsDcnDataEccInstance.setStatus('current')
eocDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14), )
if mibBuilder.loadTexts: eocDataTable.setStatus('current')
eocDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eocDataEntry.setStatus('current')
eocDataProtAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1, 1), FspR7EocProtAvailability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eocDataProtAvailability.setStatus('current')
eocDataIpEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eocDataIpEntity.setStatus('current')
eocDataMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1, 3), Unsigned32()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: eocDataMaxDataRate.setStatus('current')
eocDataConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1, 4), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eocDataConnectionType.setStatus('current')
eocDataProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1, 5), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eocDataProtectionRole.setStatus('current')
opticalIfOlmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 15), )
if mibBuilder.loadTexts: opticalIfOlmTable.setStatus('current')
opticalIfOlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 15, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalIfOlmEntry.setStatus('current')
opticalIfOlmRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 15, 1, 1), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfOlmRxLineAttenuation.setStatus('current')
opticalIfOlmTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 15, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfOlmTxLineAttenuation.setStatus('current')
opticalIfOlmFarEndSigDegThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 15, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfOlmFarEndSigDegThres.setStatus('current')
opticalAmplifierInterfaceDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16), )
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsTable.setStatus('current')
opticalAmplifierInterfaceDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsEntry.setStatus('current')
opticalAmplifierInterfaceDiagnosticsOperatingHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16, 1, 1), Unsigned32()).setUnits('0.1 H').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsOperatingHours.setStatus('current')
opticalAmplifierInterfaceDiagnosticsLaserBiasCurrentLevelAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16, 1, 2), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsLaserBiasCurrentLevelAverage.setStatus('current')
opticalAmplifierInterfaceDiagnosticsAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsAttenuation.setStatus('current')
opticalAmplifierInterfaceDiagnosticsAttenuationVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsAttenuationVoa.setStatus('current')
ethernetDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17), )
if mibBuilder.loadTexts: ethernetDataTable.setStatus('current')
ethernetDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: ethernetDataEntry.setStatus('current')
ethernetDataMonitoredDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17, 1, 1), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetDataMonitoredDuplexMode.setStatus('current')
ethernetDataMonitoredBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17, 1, 2), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetDataMonitoredBitrate.setStatus('current')
ethernetDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetDataType.setStatus('current')
ethernetDataValidSignalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5760), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetDataValidSignalTimer.setStatus('current')
opticalFilterIfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 19), )
if mibBuilder.loadTexts: opticalFilterIfDataTable.setStatus('current')
opticalFilterIfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 19, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalFilterIfDataEntry.setStatus('current')
opticalFilterIfDataMultiplexLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 19, 1, 1), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalFilterIfDataMultiplexLevel.setStatus('current')
apsProtFacilityConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 20), )
if mibBuilder.loadTexts: apsProtFacilityConfigCapTable.setStatus('current')
apsProtFacilityConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 20, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: apsProtFacilityConfigCapEntry.setStatus('current')
apsProtFacilityConfigCapSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 20, 1, 1), FspR7APSCommandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtFacilityConfigCapSwitchCommand.setStatus('current')
apsProtFacilityConfigCapInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 20, 1, 2), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtFacilityConfigCapInhibitSwitchToProt.setStatus('current')
apsProtFacilityConfigCapInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 20, 1, 3), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtFacilityConfigCapInhibitSwitchToWork.setStatus('current')
interfaceConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21), )
if mibBuilder.loadTexts: interfaceConfigCapTable.setStatus('current')
interfaceConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: interfaceConfigCapEntry.setStatus('current')
interfaceConfigCapLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 1), LoopConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapLoopConfig.setStatus('current')
interfaceConfigCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 2), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapDataLayerPmReset.setStatus('current')
interfaceConfigCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 3), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapEqlzAdmin.setStatus('current')
interfaceConfigCapDispertionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 4), FspR7DispersionConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapDispertionConfig.setStatus('current')
interfaceConfigCapTurnupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 5), FspR7TurnupConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapTurnupConfig.setStatus('current')
interfaceConfigCapInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 6), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapInitiateEqualization.setStatus('current')
interfaceConfigCapBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 7), FspR7PortBehaviourCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapBehaviour.setStatus('current')
interfaceConfigCapDispersionOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 9), FspR7DispersionOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapDispersionOperation.setStatus('current')
opticalIfConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22), )
if mibBuilder.loadTexts: opticalIfConfigCapTable.setStatus('current')
opticalIfConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalIfConfigCapEntry.setStatus('current')
opticalIfConfigCapForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 1), FspR7LaserForcedOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapForceLaserOn.setStatus('current')
opticalIfConfigCapLossAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 2), FspR7LossAttenuationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapLossAttenuation.setStatus('current')
opticalIfConfigCapWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 3), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapWdmRxChannel.setStatus('current')
opticalIfConfigCapSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 4), FspR7BERThresholdSectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapSigDegThresSonetSection.setStatus('current')
opticalIfConfigCapDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 5), FspR7DispersionModesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapDispersionMode.setStatus('current')
opticalIfConfigCapAutoThresReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 6), FspR7AutoThresResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapAutoThresReset.setStatus('current')
opticalIfConfigCapAseTabCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 7), FspR7AseTabOprCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapAseTabCreation.setStatus('current')
opticalIfConfigCapUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 8), FspR7UntaggedFramesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapUtag.setStatus('current')
opticalIfConfigCapCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 9), FspR7L2CacEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapCac.setStatus('current')
opticalIfConfigCapLagLoadBallanceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 10), FspR7LagLoadBallanceSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapLagLoadBallanceSource.setStatus('current')
opticalIfConfigCapLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 11), FspR7LacpTimeoutCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapLacpTimeout.setStatus('current')
opticalIfConfigCapFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 12), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapFarEndCommunication.setStatus('current')
opticalIfConfigCapLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 13), FspR7LacpModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapLacpMode.setStatus('current')
opticalIfConfigCapTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 14), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTxOffDelay.setStatus('current')
opticalIfConfigCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 15), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapOpuPayloadType.setStatus('current')
opticalIfConfigCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 16), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapOpticalSetPoint.setStatus('current')
opticalIfConfigCapTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 17), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTransmitChannel.setStatus('current')
opticalIfConfigCapFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 18), FspR7FiberBrandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapFiberBrand.setStatus('current')
opticalIfConfigCapTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 19), FspR7TiltSetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTiltSet.setStatus('current')
opticalIfConfigCapForceFwdAsePilotOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 20), FspR7LaserForcedOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapForceFwdAsePilotOn.setStatus('current')
opticalIfConfigCapXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 21), FspR7XfpDecisionThresCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapXfpDecisionThres.setStatus('current')
opticalIfConfigCapPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 22), FspR7PrbsPmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapPrbsPmReset.setStatus('current')
opticalIfConfigCapTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 23), FspR7TestModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTestPrbsRcvMode.setStatus('current')
opticalIfConfigCapTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 24), FspR7TestModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTestPrbsTrmtMode.setStatus('current')
opticalIfConfigCapTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 25), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTributarySlotMethod.setStatus('current')
opticalIfConfigCapBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 32), FspR7BipCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapBip.setStatus('current')
eroadmIfDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 23), )
if mibBuilder.loadTexts: eroadmIfDiagnosticsTable.setStatus('current')
eroadmIfDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 23, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eroadmIfDiagnosticsEntry.setStatus('current')
eroadmIfDiagnosticsAttenuationVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 23, 1, 1), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eroadmIfDiagnosticsAttenuationVoa.setStatus('current')
eroadmIfDiagnosticsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 23, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: eroadmIfDiagnosticsOutputPower.setStatus('current')
tifiConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 24), )
if mibBuilder.loadTexts: tifiConfigTable.setStatus('current')
tifiConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 24, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: tifiConfigEntry.setStatus('current')
tifiConfigInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 24, 1, 1), FspR7InvertTelemetryInputLogic()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tifiConfigInvertTifInputLogic.setStatus('current')
tifiConfigTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 24, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tifiConfigTifAlarmType.setStatus('current')
tifiConfigTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 24, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tifiConfigTifAlarmMessage.setStatus('current')
tifiDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 25), )
if mibBuilder.loadTexts: tifiDataTable.setStatus('current')
tifiDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 25, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: tifiDataEntry.setStatus('current')
tifiDataTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 25, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tifiDataTifAlarmType.setStatus('current')
tifiDataTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 25, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tifiDataTifAlarmMessage.setStatus('current')
tifoDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 26), )
if mibBuilder.loadTexts: tifoDataTable.setStatus('current')
tifoDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 26, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: tifoDataEntry.setStatus('current')
tifoDataTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 26, 1, 1), FspR7TelemetryOutput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tifoDataTelemetry.setStatus('current')
tifoConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 27), )
if mibBuilder.loadTexts: tifoConfigTable.setStatus('current')
tifoConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 27, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: tifoConfigEntry.setStatus('current')
tifoConfigTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 27, 1, 1), FspR7TelemetryOutput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tifoConfigTelemetry.setStatus('current')
opticalLinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 28), )
if mibBuilder.loadTexts: opticalLinkConfigTable.setStatus('current')
opticalLinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 28, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalLinkConfigEntry.setStatus('current')
opticalLinkConfigTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 28, 1, 1), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalLinkConfigTxLineAttenuation.setStatus('current')
opticalLinkConfigRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 28, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalLinkConfigRxLineAttenuation.setStatus('current')
opticalLinkConfigFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 28, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalLinkConfigFarEndLocation.setStatus('current')
opticalLinkDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 29), )
if mibBuilder.loadTexts: opticalLinkDataTable.setStatus('current')
opticalLinkDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 29, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalLinkDataEntry.setStatus('current')
opticalLinkDataLogicalInterfaceAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 29, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLinkDataLogicalInterfaceAid.setStatus('current')
virtualOpticalChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 30), )
if mibBuilder.loadTexts: virtualOpticalChannelConfigTable.setStatus('current')
virtualOpticalChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 30, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: virtualOpticalChannelConfigEntry.setStatus('current')
virtualOpticalChannelConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 30, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualOpticalChannelConfigAlias.setStatus('current')
virtualOpticalChannelDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31), )
if mibBuilder.loadTexts: virtualOpticalChannelDataTable.setStatus('current')
virtualOpticalChannelDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: virtualOpticalChannelDataEntry.setStatus('current')
virtualOpticalChannelDataTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31, 1, 1), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualOpticalChannelDataTransmitWavelength.setStatus('current')
virtualOpticalChannelDataTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31, 1, 2), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualOpticalChannelDataTransmitFrequency.setStatus('current')
virtualOpticalChannelDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualOpticalChannelDataTransmitChannel.setStatus('current')
virtualOpticalChannelDataConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31, 1, 4), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualOpticalChannelDataConnectState.setStatus('current')
logicalIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32), )
if mibBuilder.loadTexts: logicalIfConfigTable.setStatus('current')
logicalIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: logicalIfConfigEntry.setStatus('current')
logicalIfConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigAlias.setStatus('current')
logicalIfConfigAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigAreaId.setStatus('current')
logicalIfConfigMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigMetric.setStatus('current')
logicalIfConfigHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigHelloInterval.setStatus('current')
logicalIfConfigDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigDeadInterval.setStatus('current')
logicalIfConfigPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigPrio.setStatus('current')
logicalIfConfigRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigRetransmitInterval.setStatus('current')
logicalIfConfigAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 8), FspR7CpAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigAuthType.setStatus('current')
logicalIfConfigAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigAuthString.setStatus('current')
logicalIfConfigOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 10), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigOspf.setStatus('current')
logicalIfConfigPushedNearEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigPushedNearEndIpHeader.setStatus('current')
logicalIfConfigPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigPushedFarEndIpHeader.setStatus('current')
logicalIfConfigTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigTimeToLive.setStatus('current')
logicalIfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33), )
if mibBuilder.loadTexts: logicalIfDataTable.setStatus('current')
logicalIfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: logicalIfDataEntry.setStatus('current')
logicalIfDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 1), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataFacilityType.setStatus('current')
logicalIfDataLanLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataLanLinkAid.setStatus('current')
logicalIfDataLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataLogicalInterfaceId.setStatus('current')
logicalIfDataOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 4), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataOspf.setStatus('current')
logicalIfDataDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 5), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataDcnAid.setStatus('current')
logicalIfDataLanLinkAidDerived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataLanLinkAidDerived.setStatus('current')
logicalIfDataIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 7), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataIpType.setStatus('current')
logicalIfDataIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataIpAddr.setStatus('current')
logicalIfDataIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataIpAddrMonitor.setStatus('current')
logicalIfDataIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataIpMask.setStatus('current')
logicalIfDataIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataIpMaskMonitor.setStatus('current')
logicalIfDataEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 12), FspR7CpEncapsulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataEncapsulation.setStatus('current')
ptpEntityDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34), )
if mibBuilder.loadTexts: ptpEntityDataTable.setStatus('current')
ptpEntityDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1), ).setIndexNames((0, "ADVA-MIB", "ptpEntityIndex"))
if mibBuilder.loadTexts: ptpEntityDataEntry.setStatus('current')
ptpEntityDataConnEqptState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 1), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataConnEqptState.setStatus('current')
ptpEntityDataChannelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 2), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataChannelProvision.setStatus('current')
ptpEntityDataLambda = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 3), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataLambda.setStatus('current')
ptpEntityDataFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 4), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataFrequency.setStatus('current')
ptpEntityDataReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 5), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataReach.setStatus('current')
ptpEntityDataBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 6), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataBandProvision.setStatus('current')
ptpEntityDataSubBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 7), FspR7OpticalSubBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataSubBandProvision.setStatus('current')
ptpEntityDataGroupProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 8), FspR7OpticalGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataGroupProvision.setStatus('current')
ptpEntityDataSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 9), FspR7SingleFiberLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataSfProvision.setStatus('current')
ptpEntityDataConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 10), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataConnector.setStatus('current')
ptpEntityDataFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 11), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataFiber.setStatus('current')
ptpEntityDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 12), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataDirection.setStatus('current')
ptpEntityDataLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 13), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataLevel.setStatus('current')
ptpEntityDataFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 14), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataFunction.setStatus('current')
farEndIfDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 35), )
if mibBuilder.loadTexts: farEndIfDiagnosticsTable.setStatus('current')
farEndIfDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 35, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndIfDiagnosticsEntry.setStatus('current')
farEndIfDiagnosticsLaserBiasCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 35, 1, 1), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDiagnosticsLaserBiasCurrentLevel.setStatus('current')
farEndIfDiagnosticsInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 35, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDiagnosticsInputPower.setStatus('current')
farEndIfDiagnosticsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 35, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDiagnosticsOutputPower.setStatus('current')
farEndIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 36), )
if mibBuilder.loadTexts: farEndIfConfigTable.setStatus('current')
farEndIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 36, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndIfConfigEntry.setStatus('current')
farEndIfConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 36, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: farEndIfConfigAlias.setStatus('current')
farEndIfConfigLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 36, 1, 2), LoopConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: farEndIfConfigLoopConfig.setStatus('current')
farEndIfConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 37), )
if mibBuilder.loadTexts: farEndIfConfigCapTable.setStatus('current')
farEndIfConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 37, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndIfConfigCapEntry.setStatus('current')
farEndIfConfigCapLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 37, 1, 1), LoopConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfConfigCapLoopConfig.setStatus('current')
farEndIfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38), )
if mibBuilder.loadTexts: farEndIfDataTable.setStatus('current')
farEndIfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndIfDataEntry.setStatus('current')
farEndIfDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 1), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataType.setStatus('current')
farEndIfDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 2), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataTransmitChannel.setStatus('current')
farEndIfDataTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 3), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataTransmitWavelength.setStatus('current')
farEndIfDataTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 4), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataTransmitFrequency.setStatus('current')
farEndIfDataReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 5), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataReach.setStatus('current')
farEndIfDataConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 6), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataConnector.setStatus('current')
farEndIfDataFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 7), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataFiberType.setStatus('current')
farEndIfDataConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 8), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataConnectionType.setStatus('current')
farEndIfDataAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 9), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataAdmin.setStatus('current')
interfaceConfigExternalVidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 39), )
if mibBuilder.loadTexts: interfaceConfigExternalVidCapsTable.setStatus('current')
interfaceConfigExternalVidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 39, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvDcnExternalVidCapsIndexCap"))
if mibBuilder.loadTexts: interfaceConfigExternalVidCapsEntry.setStatus('current')
interfaceConfigExternalVidCapsStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 39, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigExternalVidCapsStringCap.setStatus('current')
interfaceConfigLanAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 40), )
if mibBuilder.loadTexts: interfaceConfigLanAidCapsTable.setStatus('current')
interfaceConfigLanAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 40, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "interfaceConfigLanAidCapsIndex"))
if mibBuilder.loadTexts: interfaceConfigLanAidCapsEntry.setStatus('current')
interfaceConfigLanAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 40, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigLanAidCapsIndex.setStatus('current')
neighborDiscoveryDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41), )
if mibBuilder.loadTexts: neighborDiscoveryDataTable.setStatus('current')
neighborDiscoveryDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: neighborDiscoveryDataEntry.setStatus('current')
neighborDiscoveryDataFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndIp.setStatus('current')
neighborDiscoveryDataFarEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndPort.setStatus('current')
neighborDiscoveryDataFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndTid.setStatus('current')
neighborDiscoveryDataFarEndTranLayerTermPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndTranLayerTermPoint.setStatus('current')
neighborDiscoveryDataFarEndPortAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndPortAid.setStatus('current')
neighborDiscoveryDataFarEndTranLayerTermPointAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndTranLayerTermPointAid.setStatus('current')
exChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42), )
if mibBuilder.loadTexts: exChannelConfigTable.setStatus('current')
exChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: exChannelConfigEntry.setStatus('current')
exChannelConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigAlias.setStatus('current')
exChannelConfigFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigFarEndLocation.setStatus('current')
exChannelConfigBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 3), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: exChannelConfigBitrate.setStatus('current')
exChannelConfigFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 4), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigFecType.setStatus('current')
exChannelConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 5), FspR7LineCoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigLineCoding.setStatus('current')
exChannelConfigFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 6), FspR7FrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigFrameFormat.setStatus('current')
exChannelConfigOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-9900, 600), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigOpticalPowerTx.setStatus('current')
exChannelConfigOSNRTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigOSNRTransmit.setStatus('current')
exChannelConfigPMDTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigPMDTransmit.setStatus('current')
exChannelConfigChromaticDispersionTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigChromaticDispersionTx.setStatus('current')
exChannelConfigMinimumOSNRRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigMinimumOSNRRcv.setStatus('current')
exChannelConfigMinimumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2500, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigMinimumOpticalPowerRcv.setStatus('current')
exChannelConfigMaximumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigMaximumOpticalPowerRcv.setStatus('current')
exChannelConfigMaximumPMDRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigMaximumPMDRcv.setStatus('current')
exChannelConfigChromaticDispersionRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigChromaticDispersionRcv.setStatus('current')
exChannelConfigMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 16), FspR7MaxBitErrorRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigMaxBitErrorRate.setStatus('current')
exChannelDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43), )
if mibBuilder.loadTexts: exChannelDataTable.setStatus('current')
exChannelDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: exChannelDataEntry.setStatus('current')
exChannelDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43, 1, 1), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exChannelDataType.setStatus('current')
exChannelDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43, 1, 2), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelDataTransmitChannel.setStatus('current')
exChannelDataChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43, 1, 3), FspR7ChannelBandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelDataChannelBandwidth.setStatus('current')
exChannelDataConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43, 1, 4), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exChannelDataConnectionState.setStatus('current')
vtpEntityDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44), )
if mibBuilder.loadTexts: vtpEntityDataTable.setStatus('current')
vtpEntityDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1), ).setIndexNames((0, "ADVA-MIB", "vtpEntityIndex"))
if mibBuilder.loadTexts: vtpEntityDataEntry.setStatus('current')
vtpEntityDataConnEqptState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 1), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataConnEqptState.setStatus('current')
vtpEntityDataChannelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 2), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataChannelProvision.setStatus('current')
vtpEntityDataLambda = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 3), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataLambda.setStatus('current')
vtpEntityDataFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 4), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataFrequency.setStatus('current')
vtpEntityDataReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 5), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataReach.setStatus('current')
vtpEntityDataBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 6), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataBandProvision.setStatus('current')
vtpEntityDataSubBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 7), FspR7OpticalSubBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataSubBandProvision.setStatus('current')
vtpEntityDataGroupProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 8), FspR7OpticalGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataGroupProvision.setStatus('current')
vtpEntityDataSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 9), FspR7SingleFiberLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataSfProvision.setStatus('current')
vtpEntityDataConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 10), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataConnector.setStatus('current')
vtpEntityDataFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 11), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataFiber.setStatus('current')
vtpEntityDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 12), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataDirection.setStatus('current')
vtpEntityDataLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 13), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataLevel.setStatus('current')
vtpEntityDataFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 14), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataFunction.setStatus('current')
vc4allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 1), )
if mibBuilder.loadTexts: vc4allocatedTable.setStatus('current')
vc4allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vc4allocatedEntry.setStatus('current')
vc4allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 1, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4allocatedContainer.setStatus('current')
vc4allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4allocatedClassInstanceNumber.setStatus('current')
vc4allocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4allocatedSequenceNumber.setStatus('current')
vc3allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 2), )
if mibBuilder.loadTexts: vc3allocatedTable.setStatus('current')
vc3allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vc3allocatedEntry.setStatus('current')
vc3allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 2, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3allocatedContainer.setStatus('current')
vc3allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3allocatedClassInstanceNumber.setStatus('current')
vc3allocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3allocatedSequenceNumber.setStatus('current')
sts1allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 3), )
if mibBuilder.loadTexts: sts1allocatedTable.setStatus('current')
sts1allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: sts1allocatedEntry.setStatus('current')
sts1allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 3, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts1allocatedContainer.setStatus('current')
sts1allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts1allocatedClassInstanceNumber.setStatus('current')
sts1allocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts1allocatedSequenceNumber.setStatus('current')
vchConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 4), )
if mibBuilder.loadTexts: vchConfigTable.setStatus('current')
vchConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vchConfigEntry.setStatus('current')
vchConfigBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 4, 1, 1), SonetVcBundleAllocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vchConfigBundle.setStatus('current')
vchConfigCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 4, 1, 2), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vchConfigCir.setStatus('current')
vchDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 5), )
if mibBuilder.loadTexts: vchDataTable.setStatus('current')
vchDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vchDataEntry.setStatus('current')
vchDataVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 5, 1, 1), VirtualContainerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vchDataVcType.setStatus('current')
vchDataOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 5, 1, 2), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vchDataOpuPayloadType.setStatus('current')
gfpServiceDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 6), )
if mibBuilder.loadTexts: gfpServiceDefTable.setStatus('current')
gfpServiceDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: gfpServiceDefEntry.setStatus('current')
gfpServiceDefBundleAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 6, 1, 1), SonetVcBundleAllocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpServiceDefBundleAllocation.setStatus('current')
gfpServiceDefBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1000), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpServiceDefBandwidth.setStatus('current')
gfpServiceDefVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 6, 1, 3), VirtualContainerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpServiceDefVcType.setStatus('current')
sts3callocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 7), )
if mibBuilder.loadTexts: sts3callocatedTable.setStatus('current')
sts3callocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: sts3callocatedEntry.setStatus('current')
sts3callocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 7, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts3callocatedContainer.setStatus('current')
sts3callocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts3callocatedClassInstanceNumber.setStatus('current')
sts3callocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts3callocatedSequenceNumber.setStatus('current')
vs1allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8), )
if mibBuilder.loadTexts: vs1allocatedTable.setStatus('current')
vs1allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vs1allocatedEntry.setStatus('current')
vs1allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs1allocatedContainer.setStatus('current')
vs1allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs1allocatedClassInstanceNumber.setStatus('current')
vs1allocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs1allocatedSequenceNumber.setStatus('current')
vs1allocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8, 1, 4), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs1allocatedFacilityType.setStatus('current')
sts24callocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9), )
if mibBuilder.loadTexts: sts24callocatedTable.setStatus('current')
sts24callocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: sts24callocatedEntry.setStatus('current')
sts24callocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts24callocatedContainer.setStatus('current')
sts24callocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts24callocatedClassInstanceNumber.setStatus('current')
sts24callocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts24callocatedSequenceNumber.setStatus('current')
sts24callocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9, 1, 4), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts24callocatedFacilityType.setStatus('current')
sts48callocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10), )
if mibBuilder.loadTexts: sts48callocatedTable.setStatus('current')
sts48callocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: sts48callocatedEntry.setStatus('current')
sts48callocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts48callocatedContainer.setStatus('current')
sts48callocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts48callocatedClassInstanceNumber.setStatus('current')
sts48callocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts48callocatedSequenceNumber.setStatus('current')
sts48callocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10, 1, 4), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts48callocatedFacilityType.setStatus('current')
vc4c8allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12), )
if mibBuilder.loadTexts: vc4c8allocatedTable.setStatus('current')
vc4c8allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vc4c8allocatedEntry.setStatus('current')
vc4c8allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c8allocatedContainer.setStatus('current')
vc4c8allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c8allocatedClassInstanceNumber.setStatus('current')
vc4c8allocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c8allocatedSequenceNumber.setStatus('current')
vc4c8allocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12, 1, 4), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c8allocatedFacilityType.setStatus('current')
vs0allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 13), )
if mibBuilder.loadTexts: vs0allocatedTable.setStatus('current')
vs0allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vs0allocatedEntry.setStatus('current')
vs0allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 13, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs0allocatedContainer.setStatus('current')
vs0allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs0allocatedClassInstanceNumber.setStatus('current')
vs0allocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 13, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs0allocatedFacilityType.setStatus('current')
vc4c16allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 14), )
if mibBuilder.loadTexts: vc4c16allocatedTable.setStatus('current')
vc4c16allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vc4c16allocatedEntry.setStatus('current')
vc4c16allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 14, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c16allocatedContainer.setStatus('current')
vc4c16allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c16allocatedClassInstanceNumber.setStatus('current')
vc4c16allocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 14, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c16allocatedFacilityType.setStatus('current')
intraNeConnectionsLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("undefined", 0), ("notYetDefined", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraNeConnectionsLastChanged.setStatus('deprecated')
intraNeConnectionsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3), )
if mibBuilder.loadTexts: intraNeConnectionsTable.setStatus('current')
intraNeConnectionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: intraNeConnectionsEntry.setStatus('current')
intraNeConnectionsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3, 1, 1), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraNeConnectionsType.setStatus('current')
intraNeConnectionsEndpointA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraNeConnectionsEndpointA.setStatus('current')
intraNeConnectionsEndpointB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraNeConnectionsEndpointB.setStatus('current')
intraNeConnectionsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3, 1, 4), FspR7StateConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraNeConnectionsState.setStatus('current')
crsConnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4), )
if mibBuilder.loadTexts: crsConnConfigTable.setStatus('current')
crsConnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnConfigEntry.setStatus('current')
crsConnConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnConfigAlias.setStatus('current')
crsConnConfigRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1, 2), FspR7RedLinedState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnConfigRedLineState.setStatus('current')
crsConnConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnConfigType.setStatus('deprecated')
crsConnConfigPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1, 4), FspR7PathNode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnConfigPathNode.setStatus('current')
crsConnConfigTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnConfigTunnelAid.setStatus('deprecated')
crsConnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5), )
if mibBuilder.loadTexts: crsConnDataTable.setStatus('current')
crsConnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnDataEntry.setStatus('current')
crsConnDataCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 1), FspR7TypeCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataCrsType.setStatus('current')
crsConnDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataType.setStatus('current')
crsConnDataConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 3), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataConn.setStatus('current')
crsConnDataCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 4), FspR7FunctionCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataCrsFunction.setStatus('current')
crsConnDataOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 5), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataOper.setStatus('current')
crsConnDataEntityOutage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 6), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataEntityOutage.setStatus('current')
crsConnDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataTunnelId.setStatus('current')
crsConnDataTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataTunnelAid.setStatus('current')
crsConnDataIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataIngressTid.setStatus('current')
crsConnDataIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataIngressNodeIp.setStatus('current')
crsConnDataChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 11), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataChannelSpacing.setStatus('current')
crsConnWdmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6), )
if mibBuilder.loadTexts: crsConnWdmConfigTable.setStatus('current')
crsConnWdmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnWdmConfigEntry.setStatus('current')
crsConnWdmConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnWdmConfigAlias.setStatus('current')
crsConnWdmConfigRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1, 2), FspR7RedLinedState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnWdmConfigRedLineState.setStatus('current')
crsConnWdmConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnWdmConfigType.setStatus('current')
crsConnWdmConfigTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnWdmConfigTunnelAid.setStatus('deprecated')
crsConnWdmConfigPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1, 5), FspR7PathNode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnWdmConfigPathNode.setStatus('current')
crsConnWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7), )
if mibBuilder.loadTexts: crsConnWdmDataTable.setStatus('current')
crsConnWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnWdmDataEntry.setStatus('current')
crsConnWdmDataCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 1), FspR7TypeCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataCrsType.setStatus('current')
crsConnWdmDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataType.setStatus('current')
crsConnWdmDataConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 3), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataConn.setStatus('current')
crsConnWdmDataCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 4), FspR7FunctionCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataCrsFunction.setStatus('current')
crsConnWdmDataOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 5), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataOper.setStatus('current')
crsConnWdmDataEntityOutage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 6), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataEntityOutage.setStatus('current')
crsConnWdmDataTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataTunnelAid.setStatus('current')
crsConnWdmDataIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataIngressTid.setStatus('current')
crsConnWdmDataIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataIngressNodeIp.setStatus('current')
crsConnWdmDataChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 10), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataChannelSpacing.setStatus('current')
physicalTerminationPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 8), )
if mibBuilder.loadTexts: physicalTerminationPointTable.setStatus('current')
physicalTerminationPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: physicalTerminationPointEntry.setStatus('current')
physicalTerminationPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 8, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalTerminationPointIndex.setStatus('current')
controlPlaneWdmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1), )
if mibBuilder.loadTexts: controlPlaneWdmConfigTable.setStatus('current')
controlPlaneWdmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: controlPlaneWdmConfigEntry.setStatus('current')
controlPlaneWdmConfigCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmConfigFlag.setStatus('current')
controlPlaneWdmConfigCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmTraceDetail.setStatus('current')
controlPlaneWdmConfigCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 3), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmSetupTimeout.setStatus('current')
controlPlaneWdmConfigCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmShutdownTimeout.setStatus('current')
controlPlaneWdmConfigCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmRetryWait.setStatus('current')
controlPlaneWdmConfigCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmRetryWaitMultiplier.setStatus('current')
controlPlaneWdmConfigCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 7), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmMaximumRetryWait.setStatus('current')
controlPlaneWdmConfigCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmMaximumRetryNumber.setStatus('current')
controlPlaneWdmConfigRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRaConfigFlag.setStatus('current')
controlPlaneWdmConfigRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRaTraceDetail.setStatus('current')
controlPlaneWdmConfigRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 11), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRaAlarmActivationTime.setStatus('current')
controlPlaneWdmConfigCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCmConfigFlag.setStatus('current')
controlPlaneWdmConfigCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCmTraceDetail.setStatus('current')
controlPlaneWdmConfigCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 14), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCmAlarmActivationTime.setStatus('current')
controlPlaneWdmConfigCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCmFisFrsTimeout.setStatus('current')
controlPlaneWdmConfigCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCmCrankBackTimeout.setStatus('current')
controlPlaneWdmConfigCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdbConfigFlag.setStatus('current')
controlPlaneWdmConfigCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdbDetail.setStatus('current')
controlPlaneWdmConfigCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdbMaxSize.setStatus('current')
controlPlaneWdmConfigRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRsvpConfigFlag.setStatus('current')
controlPlaneWdmConfigRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRsvpMaxExpRestartTime.setStatus('current')
controlPlaneWdmConfigRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRsvpMaxExpRecoveryTime.setStatus('current')
controlPlaneWdmConfigTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbConfigFlag.setStatus('current')
controlPlaneWdmConfigTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbTraceDetail.setStatus('current')
controlPlaneWdmConfigTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbMaxSize.setStatus('current')
controlPlaneWdmConfigTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbRouterId.setStatus('current')
controlPlaneWdmConfigTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 27), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbMinAdvertWait.setStatus('current')
controlPlaneWdmConfigNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasConfigFlag.setStatus('current')
controlPlaneWdmConfigNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasTraceDetail.setStatus('current')
controlPlaneWdmConfigNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasMaxSize.setStatus('current')
controlPlaneWdmConfigNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 31), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasAdvertWait.setStatus('current')
controlPlaneWdmConfigPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigPcConfigFlag.setStatus('current')
controlPlaneWdmConfigPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigPcTraceDetail.setStatus('current')
controlPlaneWdmConfigCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdConfigFlag.setStatus('current')
controlPlaneWdmConfigCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdTraceDetail.setStatus('current')
controlPlaneWdmConfigCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdResyncTimeout.setStatus('current')
controlPlaneWdmConfigRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRmConfigFlag.setStatus('current')
controlPlaneWdmConfigRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRmTraceDetail.setStatus('current')
controlPlaneWdmConfigRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRmTraceTarget.setStatus('current')
controlPlaneWdmConfigWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigWaitToRestore.setStatus('current')
controlPlaneWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2), )
if mibBuilder.loadTexts: controlPlaneWdmDataTable.setStatus('current')
controlPlaneWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: controlPlaneWdmDataEntry.setStatus('current')
controlPlaneWdmDataCtmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataCtmAlias.setStatus('current')
controlPlaneWdmDataRaAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataRaAlias.setStatus('current')
controlPlaneWdmDataCmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataCmAlias.setStatus('current')
controlPlaneWdmDataCdbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataCdbAlias.setStatus('current')
controlPlaneWdmDataTedbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataTedbAlias.setStatus('current')
controlPlaneWdmDataNaasAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataNaasAlias.setStatus('current')
controlPlaneWdmDataPcAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataPcAlias.setStatus('current')
controlPlaneWdmDataRsvpAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataRsvpAlias.setStatus('current')
controlPlaneWdmDataCdAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataCdAlias.setStatus('current')
controlPlaneWdmDataRmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataRmAlias.setStatus('current')
controlPlaneWdmDataNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 11), FspR7NodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataNodeNameSyntax.setStatus('deprecated')
tunnelWdmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3), )
if mibBuilder.loadTexts: tunnelWdmConfigTable.setStatus('current')
tunnelWdmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: tunnelWdmConfigEntry.setStatus('current')
tunnelWdmConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigAlias.setStatus('current')
tunnelWdmConfigFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigFacilityType.setStatus('current')
tunnelWdmConfigTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 3), OhTerminationLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigTerminationLevel.setStatus('current')
tunnelWdmConfigFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 4), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigFecType.setStatus('current')
tunnelWdmConfigStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 5), FspR7Stuff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigStuff.setStatus('current')
tunnelWdmConfigProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigProvisionedPaths.setStatus('current')
tunnelWdmConfigRecoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 7), FspR7CpRecoveryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRecoveryType.setStatus('current')
tunnelWdmConfigPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 8), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigPin.setStatus('current')
tunnelWdmConfigInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 9), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigInitiateEqualization.setStatus('current')
tunnelWdmConfigAbortProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 10), FspR7CpAbortProcess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigAbortProcess.setStatus('current')
tunnelWdmConfigAdminModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 11), FspR7CommandModifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigAdminModifier.setStatus('current')
tunnelWdmConfigCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 12), FspR7CpCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigCommand.setStatus('current')
tunnelWdmConfigRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 13), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRestorationType.setStatus('current')
tunnelWdmConfigSubLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 14), FspR7SubLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigSubLayer.setStatus('current')
tunnelWdmConfigMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 15), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigMonitorEntities.setStatus('current')
tunnelWdmConfigSubLayerEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 16), FspR7SubLayerEncoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigSubLayerEncoding.setStatus('current')
tunnelWdmConfigPceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 17), FspR7PceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigPceMode.setStatus('current')
tunnelWdmConfigOperateReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 18), FspR7CpOperateReversion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigOperateReversion.setStatus('current')
tunnelWdmConfigReversionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 19), FspR7CpReversionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigReversionType.setStatus('current')
tunnelWdmConfigRestorationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 20), FspR7CpRestorationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRestorationMode.setStatus('current')
tunnelWdmConfigRestPathsNoProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRestPathsNoProv.setStatus('current')
tunnelWdmConfigRestorationPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 22), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRestorationPaths.setStatus('current')
tunnelWdmConfigRestorationPathsComputed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 23), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRestorationPathsComputed.setStatus('current')
tunnelWdmConfigResetRetainedFailureIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 24), FspR7ResetRfi()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigResetRetainedFailureIndications.setStatus('current')
tunnelWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4), )
if mibBuilder.loadTexts: tunnelWdmDataTable.setStatus('current')
tunnelWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: tunnelWdmDataEntry.setStatus('current')
tunnelWdmDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelId.setStatus('current')
tunnelWdmDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelNo.setStatus('current')
tunnelWdmDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelType.setStatus('current')
tunnelWdmDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataFromTid.setStatus('current')
tunnelWdmDataFromNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataFromNodeIP.setStatus('current')
tunnelWdmDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataToTid.setStatus('current')
tunnelWdmDataToTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataToTidMonitor.setStatus('current')
tunnelWdmDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataToNodeIp.setStatus('current')
tunnelWdmDataToNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataToNodeIpMonitor.setStatus('current')
tunnelWdmDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 10), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataFromAid.setStatus('current')
tunnelWdmDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataToAid.setStatus('current')
tunnelWdmDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 12), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataConnectionDirection.setStatus('current')
tunnelWdmDataBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 13), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataBitrate.setStatus('current')
tunnelWdmDataEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 14), FspR7CpEncode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataEncode.setStatus('current')
tunnelWdmDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataComputedPaths.setStatus('current')
tunnelWdmDataComputationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 16), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataComputationState.setStatus('current')
tunnelWdmDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorMessage.setStatus('current')
tunnelWdmDataErrorCodeMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorCodeMajor.setStatus('current')
tunnelWdmDataErrorCodeMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorCodeMinor.setStatus('current')
tunnelWdmDataErrorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorIp.setStatus('current')
tunnelWdmDataErrorTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorTid.setStatus('current')
tunnelWdmDataErrorCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 22), FspR7CpErrorCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorCategory.setStatus('current')
tunnelWdmDataSpecificErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 23), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataSpecificErrorMessage.setStatus('current')
tunnelWdmDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 24), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelScope.setStatus('current')
tunnelWdmDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 25), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataLayer.setStatus('current')
tunnelWdmDataLogicalIfAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 26), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataLogicalIfAid.setStatus('current')
tunnelWdmDataOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataOifUni.setStatus('current')
tunnelWdmDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelNumberExtension.setStatus('current')
tunnelWdmDataRestorationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 29), FspR7CpRestorationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataRestorationState.setStatus('current')
tunnelWdmDataTunnelTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 30), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelTemplate.setStatus('current')
tunnelWdmDataRestPathsNoAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataRestPathsNoAvail.setStatus('current')
tunnelWdmDataReversionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 32), FspR7CpReversionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataReversionState.setStatus('current')
tunnelWdmDataMonitorEntitiesDerive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 33), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataMonitorEntitiesDerive.setStatus('current')
tunnelWdmDataRfiList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 34), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataRfiList.setStatus('current')
pathWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6), )
if mibBuilder.loadTexts: pathWdmDataTable.setStatus('current')
pathWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: pathWdmDataEntry.setStatus('current')
pathWdmDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathWdmDataPathId.setStatus('current')
pathWdmDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6, 1, 2), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathWdmDataPathType.setStatus('current')
pathWdmDataConnectionTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathWdmDataConnectionTunnelAid.setStatus('current')
pathWdmDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6, 1, 4), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathWdmDataRole.setStatus('current')
pathElementWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8), )
if mibBuilder.loadTexts: pathElementWdmDataTable.setStatus('current')
pathElementWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: pathElementWdmDataEntry.setStatus('current')
pathElementWdmDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataPathId.setStatus('current')
pathElementWdmDataSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataSequenceNumber.setStatus('current')
pathElementWdmDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 3), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataPathType.setStatus('current')
pathElementWdmDataTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 4), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataTrafficEngineeringType.setStatus('current')
pathElementWdmDataLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataLifIp.setStatus('current')
pathElementWdmDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataNodeIp.setStatus('current')
pathElementWdmDataNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataNodeIpMonitor.setStatus('current')
pathElementWdmDataTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataTid.setStatus('current')
pathElementWdmDataTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataTidMonitor.setStatus('current')
pathElementWdmDataLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataLogicalInterfaceId.setStatus('current')
pathElementWdmDataTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 11), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataTie.setStatus('current')
pathElementWdmDataChannelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 12), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataChannelUp.setStatus('current')
pathElementWdmDataChannelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 13), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataChannelDown.setStatus('current')
pathElementWdmDataLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 14), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataLine.setStatus('current')
pathElementWdmDataUpstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 15), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataUpstreamModuleAid.setStatus('current')
pathElementWdmDataDownstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 16), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataDownstreamModuleAid.setStatus('current')
pathElementWdmDataComputedOnsrForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 17), Integer32()).setUnits('0.01 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataComputedOnsrForward.setStatus('current')
pathElementWdmDataComputedOnsrReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 18), Integer32()).setUnits('0.01 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataComputedOnsrReverse.setStatus('current')
pathElementWdmDataComputedOptPowerForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 19), Integer32()).setUnits('0.01 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataComputedOptPowerForward.setStatus('current')
pathElementWdmDataComputedOptPowerReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 20), Integer32()).setUnits('0.01 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataComputedOptPowerReverse.setStatus('current')
connectionWdmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 9), )
if mibBuilder.loadTexts: connectionWdmConfigTable.setStatus('current')
connectionWdmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 9, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: connectionWdmConfigEntry.setStatus('current')
connectionWdmConfigCancelConnEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 9, 1, 1), FspR7CpCancConnection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionWdmConfigCancelConnEntities.setStatus('current')
connectionWdmConfigCancelModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 9, 1, 2), FspR7CommandModifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionWdmConfigCancelModifier.setStatus('current')
connectionWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10), )
if mibBuilder.loadTexts: connectionWdmDataTable.setStatus('current')
connectionWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: connectionWdmDataEntry.setStatus('current')
connectionWdmDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelId.setStatus('current')
connectionWdmDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelNo.setStatus('current')
connectionWdmDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelType.setStatus('current')
connectionWdmDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataFromTid.setStatus('current')
connectionWdmDataFromNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataFromNodeIp.setStatus('current')
connectionWdmDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataToTid.setStatus('current')
connectionWdmDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataToNodeIp.setStatus('current')
connectionWdmDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataFromAid.setStatus('current')
connectionWdmDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataToAid.setStatus('current')
connectionWdmDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataConnectionDirection.setStatus('current')
connectionWdmDataNetworkElementPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 11), FspR7CpNePosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataNetworkElementPosition.setStatus('current')
connectionWdmDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 12), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataFacilityType.setStatus('current')
connectionWdmDataBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 13), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataBitrate.setStatus('current')
connectionWdmDataEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 14), FspR7CpEncode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataEncode.setStatus('current')
connectionWdmDataTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 15), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTerminationLevel.setStatus('current')
connectionWdmDataFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 16), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataFecType.setStatus('current')
connectionWdmDataStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 17), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataStuff.setStatus('current')
connectionWdmDataSignalledPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataSignalledPaths.setStatus('current')
connectionWdmDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataComputedPaths.setStatus('current')
connectionWdmDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 20), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataRole.setStatus('current')
connectionWdmDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataErrorMessage.setStatus('current')
connectionWdmDataActivationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 22), FspR7CpActivState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataActivationState.setStatus('current')
connectionWdmDataRestorable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 23), FspR7FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataRestorable.setStatus('current')
connectionWdmDataRestorationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 24), FspR7CpRestorationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataRestorationState.setStatus('deprecated')
connectionWdmDataEqualizationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 25), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataEqualizationState.setStatus('current')
connectionWdmDataModificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 26), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataModificationState.setStatus('current')
connectionWdmDataMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 27), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataMonitorEntities.setStatus('deprecated')
connectionWdmDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 28), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelScope.setStatus('current')
connectionWdmDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 29), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataLayer.setStatus('current')
connectionWdmDataSourceTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataSourceTna.setStatus('current')
connectionWdmDataDestinationTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataDestinationTna.setStatus('current')
connectionWdmDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelNumberExtension.setStatus('current')
connectionWdmDataTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelInstance.setStatus('current')
connectionWdmDataConnectionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataConnectionNo.setStatus('current')
logicalCpIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11), )
if mibBuilder.loadTexts: logicalCpIfConfigTable.setStatus('current')
logicalCpIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: logicalCpIfConfigEntry.setStatus('current')
logicalCpIfConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigAlias.setStatus('current')
logicalCpIfConfigOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 2), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigOspf.setStatus('current')
logicalCpIfConfigLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 3), FspR7PacketsLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigLayer.setStatus('current')
logicalCpIfConfigAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigAreaId.setStatus('current')
logicalCpIfConfigMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigMetric.setStatus('current')
logicalCpIfConfigHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigHelloInterval.setStatus('current')
logicalCpIfConfigDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigDeadInterval.setStatus('current')
logicalCpIfConfigPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigPrio.setStatus('current')
logicalCpIfConfigRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigRetransmitInterval.setStatus('current')
logicalCpIfConfigAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 10), FspR7CpAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigAuthType.setStatus('current')
logicalCpIfConfigAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigAuthString.setStatus('current')
logicalCpIfConfigCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 12), FspR7CpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigCpType.setStatus('current')
logicalCpIfConfigRefreshTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigRefreshTimeout.setStatus('current')
logicalCpIfConfigRefreshMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigRefreshMultiplier.setStatus('current')
logicalCpIfConfigTeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigTeMetric.setStatus('current')
logicalCpIfConfigTeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigTeAreaId.setStatus('current')
logicalCpIfConfigLinkColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigLinkColor.setStatus('current')
logicalCpIfConfigPushedNearEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigPushedNearEndIpHeader.setStatus('current')
logicalCpIfConfigPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigPushedFarEndIpHeader.setStatus('current')
logicalCpIfConfigTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigTimeToLive.setStatus('current')
logicalCpIfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12), )
if mibBuilder.loadTexts: logicalCpIfDataTable.setStatus('current')
logicalCpIfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: logicalCpIfDataEntry.setStatus('current')
logicalCpIfDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 1), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFacilityType.setStatus('current')
logicalCpIfDataDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataDcnAid.setStatus('current')
logicalCpIfDataLanLinkAidDerived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataLanLinkAidDerived.setStatus('current')
logicalCpIfDataLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataLogicalInterfaceId.setStatus('current')
logicalCpIfDataTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataTransport.setStatus('current')
logicalCpIfDataFarEndLifId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFarEndLifId.setStatus('current')
logicalCpIfDataFarEndNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFarEndNodeIp.setStatus('current')
logicalCpIfDataFarEndNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFarEndNodeIpMonitor.setStatus('current')
logicalCpIfDataFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFarEndTid.setStatus('current')
logicalCpIfDataFarEndTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFarEndTidMonitor.setStatus('current')
logicalCpIfDataIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 11), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataIpType.setStatus('current')
logicalCpIfDataIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataIpAddr.setStatus('current')
logicalCpIfDataIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataIpAddrMonitor.setStatus('current')
logicalCpIfDataIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataIpMask.setStatus('current')
logicalCpIfDataIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataIpMaskMonitor.setStatus('current')
logicalCpIfDataOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 16), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataOspf.setStatus('current')
logicalCpIfDataEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 17), FspR7CpEncapsulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataEncapsulation.setStatus('current')
logicalCpIfDataNendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataNendTeLinkIdNum.setStatus('current')
logicalCpIfDataFendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFendTeLinkIdNum.setStatus('current')
logicalCpIfDataFendDataLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFendDataLinkId.setStatus('current')
logicalCpIfDataNendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataNendTeLinkIdUnn.setStatus('current')
logicalCpIfDataFendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFendTeLinkIdUnn.setStatus('current')
logicalCpIfDataPushedNearEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataPushedNearEndIpHeader.setStatus('current')
logicalCpIfDataPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataPushedFarEndIpHeader.setStatus('current')
logicalCpIfDataEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 25), FspR7CpEncode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataEncoding.setStatus('current')
logicalCpIfDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 26), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataLayer.setStatus('current')
logicalCpIfDataNendTeLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 27), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataNendTeLinkAid.setStatus('current')
logicalCpIfDataFendTeLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 28), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFendTeLinkAid.setStatus('current')
logicalCpIfDataTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 29), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataTunnelAid.setStatus('current')
logicalCpIfDataActivationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 30), FspR7CpActivState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataActivationState.setStatus('current')
logicalCpIfDataExtAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 31), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataExtAdvertised.setStatus('current')
logicalCpIfDataVTeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 32), FspR7CpVTeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataVTeType.setStatus('current')
logicalCpIfDataVNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataVNodeIp.setStatus('current')
logicalCpIfDataVNodeTltp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 34), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataVNodeTltp.setStatus('current')
inventoryCpWdmDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13), )
if mibBuilder.loadTexts: inventoryCpWdmDownDataTable.setStatus('current')
inventoryCpWdmDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "inventoryCpWdmDownDataNumber"))
if mibBuilder.loadTexts: inventoryCpWdmDownDataEntry.setStatus('current')
inventoryCpWdmDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpWdmDownDataNumber.setStatus('current')
inventoryCpWdmDownDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmDownDataResources.setStatus('current')
inventoryCpWdmDownDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmDownDataFacilities.setStatus('current')
inventoryCpWdmDownDataPhysicalTermPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmDownDataPhysicalTermPoints.setStatus('current')
inventoryCpWdmUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14), )
if mibBuilder.loadTexts: inventoryCpWdmUpDataTable.setStatus('current')
inventoryCpWdmUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "inventoryCpWdmUpDataNumber"))
if mibBuilder.loadTexts: inventoryCpWdmUpDataEntry.setStatus('current')
inventoryCpWdmUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpWdmUpDataNumber.setStatus('current')
inventoryCpWdmUpDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmUpDataResources.setStatus('current')
inventoryCpWdmUpDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmUpDataFacilities.setStatus('current')
inventoryCpWdmUpDataPhysicalTermPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmUpDataPhysicalTermPoints.setStatus('current')
inventoryCpWdmCrsDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 15), )
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataTable.setStatus('current')
inventoryCpWdmCrsDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 15, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "inventoryCpWdmCrsDownDataNumber"), (0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataEntry.setStatus('current')
inventoryCpWdmCrsDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 15, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataNumber.setStatus('current')
inventoryCpWdmCrsDownDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 15, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataAids.setStatus('current')
inventoryCpWdmCrsUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 16), )
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataTable.setStatus('current')
inventoryCpWdmCrsUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 16, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "inventoryCpWdmCrsUpDataNumber"), (0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataEntry.setStatus('current')
inventoryCpWdmCrsUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 16, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataNumber.setStatus('current')
inventoryCpWdmCrsUpDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 16, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataAids.setStatus('current')
teRouterDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17), )
if mibBuilder.loadTexts: teRouterDataTable.setStatus('current')
teRouterDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"))
if mibBuilder.loadTexts: teRouterDataEntry.setStatus('current')
teRouterDataIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: teRouterDataIp.setStatus('current')
teRouterDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teRouterDataNodeIp.setStatus('current')
teRouterDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teRouterDataNodeTid.setStatus('current')
teRouterDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teRouterDataInfo.setStatus('current')
teUnnumLinkWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18), )
if mibBuilder.loadTexts: teUnnumLinkWdmDataTable.setStatus('current')
teUnnumLinkWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"), (0, "FspR7-MIB", "teUnnumLinkWdmDataNumber"))
if mibBuilder.loadTexts: teUnnumLinkWdmDataEntry.setStatus('current')
teUnnumLinkWdmDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: teUnnumLinkWdmDataNumber.setStatus('current')
teUnnumLinkWdmDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataNodeIp.setStatus('current')
teUnnumLinkWdmDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataNodeTid.setStatus('current')
teUnnumLinkWdmDataTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataTeLinkId.setStatus('current')
teUnnumLinkWdmDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataPhysicalLink.setStatus('current')
teUnnumLinkWdmDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataSynchronization.setStatus('current')
teUnnumLinkWdmDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataDiscarded.setStatus('current')
teUnnumLinkWdmDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataFendNodeIp.setStatus('current')
teUnnumLinkWdmDataFendTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataFendTeLinkId.setStatus('current')
teUnnumLinkWdmDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataInfo.setStatus('current')
teNumLinkWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19), )
if mibBuilder.loadTexts: teNumLinkWdmDataTable.setStatus('current')
teNumLinkWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"))
if mibBuilder.loadTexts: teNumLinkWdmDataEntry.setStatus('current')
teNumLinkWdmDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataNodeIp.setStatus('current')
teNumLinkWdmDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataNodeTid.setStatus('current')
teNumLinkWdmDataTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataTeLinkIp.setStatus('current')
teNumLinkWdmDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataPhysicalLink.setStatus('current')
teNumLinkWdmDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataSynchronization.setStatus('current')
teNumLinkWdmDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataDiscarded.setStatus('current')
teNumLinkWdmDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataFendNodeIp.setStatus('current')
teNumLinkWdmDataFendTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataFendTeLinkIp.setStatus('current')
teNumLinkWdmDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataInfo.setStatus('current')
tnaMapDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20), )
if mibBuilder.loadTexts: tnaMapDataTable.setStatus('current')
tnaMapDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20, 1), ).setIndexNames((0, "FspR7-MIB", "tnaMapDataNodeIp"), (0, "FspR7-MIB", "tnaMapDataRemoteTna"))
if mibBuilder.loadTexts: tnaMapDataEntry.setStatus('current')
tnaMapDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnaMapDataNodeIp.setStatus('current')
tnaMapDataRemoteTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnaMapDataRemoteTna.setStatus('current')
tnaMapDataRemoteTnaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnaMapDataRemoteTnaMask.setStatus('current')
tnaMapDataLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnaMapDataLocalPort.setStatus('current')
controlPlaneEthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32), )
if mibBuilder.loadTexts: controlPlaneEthConfigTable.setStatus('current')
controlPlaneEthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: controlPlaneEthConfigEntry.setStatus('current')
controlPlaneEthConfigCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmConfigFlag.setStatus('current')
controlPlaneEthConfigCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmTraceDetail.setStatus('current')
controlPlaneEthConfigCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 3), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmSetupTimeout.setStatus('current')
controlPlaneEthConfigCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmShutdownTimeout.setStatus('current')
controlPlaneEthConfigCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmRetryWait.setStatus('current')
controlPlaneEthConfigCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmRetryWaitMultiplier.setStatus('current')
controlPlaneEthConfigCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 7), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmMaximumRetryWait.setStatus('current')
controlPlaneEthConfigCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmMaximumRetryNumber.setStatus('current')
controlPlaneEthConfigRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRaConfigFlag.setStatus('current')
controlPlaneEthConfigRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRaTraceDetail.setStatus('current')
controlPlaneEthConfigRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 11), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRaAlarmActivationTime.setStatus('current')
controlPlaneEthConfigCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCmConfigFlag.setStatus('current')
controlPlaneEthConfigCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCmTraceDetail.setStatus('current')
controlPlaneEthConfigCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 14), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCmAlarmActivationTime.setStatus('current')
controlPlaneEthConfigCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCmFisFrsTimeout.setStatus('current')
controlPlaneEthConfigCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCmCrankBackTimeout.setStatus('current')
controlPlaneEthConfigCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdbConfigFlag.setStatus('current')
controlPlaneEthConfigCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdbDetail.setStatus('current')
controlPlaneEthConfigCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdbMaxSize.setStatus('current')
controlPlaneEthConfigRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRsvpConfigFlag.setStatus('current')
controlPlaneEthConfigRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRsvpMaxExpRestartTime.setStatus('current')
controlPlaneEthConfigRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRsvpMaxExpRecoveryTime.setStatus('current')
controlPlaneEthConfigTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigTedbConfigFlag.setStatus('current')
controlPlaneEthConfigTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigTedbTraceDetail.setStatus('current')
controlPlaneEthConfigTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigTedbMaxSize.setStatus('current')
controlPlaneEthConfigTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigTedbRouterId.setStatus('current')
controlPlaneEthConfigTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 27), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigTedbMinAdvertWait.setStatus('current')
controlPlaneEthConfigNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigNaasConfigFlag.setStatus('current')
controlPlaneEthConfigNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigNaasTraceDetail.setStatus('current')
controlPlaneEthConfigNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigNaasMaxSize.setStatus('current')
controlPlaneEthConfigNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 31), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigNaasAdvertWait.setStatus('current')
controlPlaneEthConfigPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigPcConfigFlag.setStatus('current')
controlPlaneEthConfigPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigPcTraceDetail.setStatus('current')
controlPlaneEthConfigCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdConfigFlag.setStatus('current')
controlPlaneEthConfigCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdTraceDetail.setStatus('current')
controlPlaneEthConfigCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdResyncTimeout.setStatus('current')
controlPlaneEthConfigRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRmConfigFlag.setStatus('current')
controlPlaneEthConfigRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRmTraceDetail.setStatus('current')
controlPlaneEthConfigRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRmTraceTarget.setStatus('current')
controlPlaneEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33), )
if mibBuilder.loadTexts: controlPlaneEthDataTable.setStatus('current')
controlPlaneEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: controlPlaneEthDataEntry.setStatus('current')
controlPlaneEthDataCtmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataCtmAlias.setStatus('current')
controlPlaneEthDataRaAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataRaAlias.setStatus('current')
controlPlaneEthDataCmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataCmAlias.setStatus('current')
controlPlaneEthDataCdbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataCdbAlias.setStatus('current')
controlPlaneEthDataTedbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataTedbAlias.setStatus('current')
controlPlaneEthDataNaasAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataNaasAlias.setStatus('current')
controlPlaneEthDataPcAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataPcAlias.setStatus('current')
controlPlaneEthDataRsvpAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataRsvpAlias.setStatus('current')
controlPlaneEthDataCdAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataCdAlias.setStatus('current')
controlPlaneEthDataRmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataRmAlias.setStatus('current')
tunnelEthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34), )
if mibBuilder.loadTexts: tunnelEthConfigTable.setStatus('current')
tunnelEthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: tunnelEthConfigEntry.setStatus('current')
tunnelEthConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigAlias.setStatus('current')
tunnelEthConfigProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigProvisionedPaths.setStatus('current')
tunnelEthConfigPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 3), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigPin.setStatus('current')
tunnelEthConfigAbortProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 4), FspR7CpAbortProcess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigAbortProcess.setStatus('current')
tunnelEthConfigCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 5), FspR7CpCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigCommand.setStatus('current')
tunnelEthConfigCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 6), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigCirRcv.setStatus('current')
tunnelEthConfigCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigCbsRcv.setStatus('current')
tunnelEthConfigProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 8), FspR7CpProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigProtectionType.setStatus('current')
tunnelEthConfigRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 9), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigRestorationType.setStatus('current')
tunnelEthConfigMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 10), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigMonitorEntities.setStatus('current')
tunnelEthConfigAdminModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 11), FspR7CommandModifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigAdminModifier.setStatus('current')
tunnelEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35), )
if mibBuilder.loadTexts: tunnelEthDataTable.setStatus('current')
tunnelEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: tunnelEthDataEntry.setStatus('current')
tunnelEthDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataTunnelId.setStatus('current')
tunnelEthDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataTunnelNo.setStatus('current')
tunnelEthDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataTunnelType.setStatus('current')
tunnelEthDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataFromTid.setStatus('current')
tunnelEthDataFromNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataFromNodeIP.setStatus('current')
tunnelEthDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataToTid.setStatus('current')
tunnelEthDataToTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataToTidMonitor.setStatus('current')
tunnelEthDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataToNodeIp.setStatus('current')
tunnelEthDataToNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataToNodeIpMonitor.setStatus('current')
tunnelEthDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 10), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataFromAid.setStatus('current')
tunnelEthDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataToAid.setStatus('current')
tunnelEthDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 12), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataConnectionDirection.setStatus('current')
tunnelEthDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 13), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataFacilityType.setStatus('current')
tunnelEthDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataComputedPaths.setStatus('current')
tunnelEthDataComputationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 15), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataComputationState.setStatus('current')
tunnelEthDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorMessage.setStatus('current')
tunnelEthDataCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 17), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataCirTrmt.setStatus('current')
tunnelEthDataCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataCbsTrmt.setStatus('current')
tunnelEthDataErrorCodeMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorCodeMajor.setStatus('current')
tunnelEthDataErrorCodeMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorCodeMinor.setStatus('current')
tunnelEthDataErrorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorIp.setStatus('current')
tunnelEthDataErrorTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorTid.setStatus('current')
tunnelEthDataErrorCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 23), FspR7CpErrorCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorCategory.setStatus('current')
tunnelEthDataSpecificErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 24), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataSpecificErrorMessage.setStatus('current')
tunnelEthDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 25), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataTunnelScope.setStatus('current')
tunnelEthDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 26), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataLayer.setStatus('current')
tunnelEthDataOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataOifUni.setStatus('current')
tunnelEthDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataTunnelNumberExtension.setStatus('current')
connectionEthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 36), )
if mibBuilder.loadTexts: connectionEthConfigTable.setStatus('current')
connectionEthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 36, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: connectionEthConfigEntry.setStatus('current')
connectionEthConfigCancelConnEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 36, 1, 1), FspR7CpCancConnection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionEthConfigCancelConnEntities.setStatus('current')
connectionEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37), )
if mibBuilder.loadTexts: connectionEthDataTable.setStatus('current')
connectionEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: connectionEthDataEntry.setStatus('current')
connectionEthDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelId.setStatus('current')
connectionEthDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelNo.setStatus('current')
connectionEthDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelType.setStatus('current')
connectionEthDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataFromTid.setStatus('current')
connectionEthDataFromNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataFromNodeIp.setStatus('current')
connectionEthDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataToTid.setStatus('current')
connectionEthDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataToNodeIp.setStatus('current')
connectionEthDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataFromAid.setStatus('current')
connectionEthDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataToAid.setStatus('current')
connectionEthDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataConnectionDirection.setStatus('current')
connectionEthDataNetworkElementPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 11), FspR7CpNePosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataNetworkElementPosition.setStatus('current')
connectionEthDataSignalledPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataSignalledPaths.setStatus('current')
connectionEthDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataComputedPaths.setStatus('current')
connectionEthDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 14), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataRole.setStatus('current')
connectionEthDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataErrorMessage.setStatus('current')
connectionEthDataCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 16), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataCirTrmt.setStatus('current')
connectionEthDataCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataCbsTrmt.setStatus('current')
connectionEthDataCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 18), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataCirRcv.setStatus('current')
connectionEthDataCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataCbsRcv.setStatus('current')
connectionEthDataActivationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 20), FspR7CpActivState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataActivationState.setStatus('current')
connectionEthDataRestorable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 21), FspR7FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataRestorable.setStatus('current')
connectionEthDataModificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 22), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataModificationState.setStatus('current')
connectionEthDataRestorationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 23), FspR7CpRestorationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataRestorationState.setStatus('current')
connectionEthDataMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 24), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataMonitorEntities.setStatus('current')
connectionEthDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 25), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelScope.setStatus('current')
connectionEthDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 26), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataLayer.setStatus('current')
connectionEthDataSourceTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataSourceTna.setStatus('current')
connectionEthDataDestinationTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataDestinationTna.setStatus('current')
connectionEthDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelNumberExtension.setStatus('current')
connectionEthDataTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelInstance.setStatus('current')
connectionEthDataConnectionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataConnectionNo.setStatus('current')
pathEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38), )
if mibBuilder.loadTexts: pathEthDataTable.setStatus('current')
pathEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: pathEthDataEntry.setStatus('current')
pathEthDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathEthDataPathId.setStatus('current')
pathEthDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38, 1, 2), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathEthDataPathType.setStatus('current')
pathEthDataConnectionTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathEthDataConnectionTunnelAid.setStatus('current')
pathEthDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38, 1, 4), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathEthDataRole.setStatus('current')
pathElementEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39), )
if mibBuilder.loadTexts: pathElementEthDataTable.setStatus('current')
pathElementEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: pathElementEthDataEntry.setStatus('current')
pathElementEthDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataPathId.setStatus('current')
pathElementEthDataSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataSequenceNumber.setStatus('current')
pathElementEthDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 3), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataPathType.setStatus('current')
pathElementEthDataTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 4), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataTrafficEngineeringType.setStatus('current')
pathElementEthDataLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataLifIp.setStatus('current')
pathElementEthDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataNodeIp.setStatus('current')
pathElementEthDataNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataNodeIpMonitor.setStatus('current')
pathElementEthDataTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataTid.setStatus('current')
pathElementEthDataTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataTidMonitor.setStatus('current')
pathElementEthDataLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataLogicalInterfaceId.setStatus('current')
pathElementEthDataTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 11), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataTie.setStatus('current')
pathElementEthDataUpstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataUpstreamSvid.setStatus('current')
pathElementEthDataDownstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataDownstreamSvid.setStatus('current')
inventoryCpEthDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 40), )
if mibBuilder.loadTexts: inventoryCpEthDownDataTable.setStatus('current')
inventoryCpEthDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 40, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthDownDataNumber"))
if mibBuilder.loadTexts: inventoryCpEthDownDataEntry.setStatus('current')
inventoryCpEthDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 40, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpEthDownDataNumber.setStatus('current')
inventoryCpEthDownDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 40, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthDownDataResources.setStatus('current')
inventoryCpEthDownDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 40, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthDownDataFacilities.setStatus('current')
inventoryCpEthUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 41), )
if mibBuilder.loadTexts: inventoryCpEthUpDataTable.setStatus('current')
inventoryCpEthUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 41, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthUpDataNumber"))
if mibBuilder.loadTexts: inventoryCpEthUpDataEntry.setStatus('current')
inventoryCpEthUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 41, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpEthUpDataNumber.setStatus('current')
inventoryCpEthUpDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 41, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthUpDataResources.setStatus('current')
inventoryCpEthUpDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 41, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthUpDataFacilities.setStatus('current')
inventoryCpEthCrsDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42), )
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataTable.setStatus('current')
inventoryCpEthCrsDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataNumber"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexEthFrom"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexFlowFrom"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexEthTo"))
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataEntry.setStatus('current')
inventoryCpEthCrsDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataNumber.setStatus('current')
inventoryCpEthCrsDownDataIndexEthFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1, 2), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataIndexEthFrom.setStatus('current')
inventoryCpEthCrsDownDataIndexFlowFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1, 3), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataIndexFlowFrom.setStatus('current')
inventoryCpEthCrsDownDataIndexEthTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1, 4), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataIndexEthTo.setStatus('current')
inventoryCpEthCrsDownDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1, 5), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataAids.setStatus('current')
inventoryCpEthCrsUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 43), )
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataTable.setStatus('current')
inventoryCpEthCrsUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 43, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthCrsUpDataNumber"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexEthFrom"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexFlowFrom"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexEthTo"))
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataEntry.setStatus('current')
inventoryCpEthCrsUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 43, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataNumber.setStatus('current')
inventoryCpEthCrsUpDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 43, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataAids.setStatus('current')
teUnnumLinkEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44), )
if mibBuilder.loadTexts: teUnnumLinkEthDataTable.setStatus('current')
teUnnumLinkEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"), (0, "FspR7-MIB", "teUnnumLinkEthDataNumber"))
if mibBuilder.loadTexts: teUnnumLinkEthDataEntry.setStatus('current')
teUnnumLinkEthDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 1), Unsigned32())
if mibBuilder.loadTexts: teUnnumLinkEthDataNumber.setStatus('current')
teUnnumLinkEthDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataNodeIp.setStatus('current')
teUnnumLinkEthDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataNodeTid.setStatus('current')
teUnnumLinkEthDataTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataTeLinkId.setStatus('current')
teUnnumLinkEthDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataPhysicalLink.setStatus('current')
teUnnumLinkEthDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataSynchronization.setStatus('current')
teUnnumLinkEthDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataDiscarded.setStatus('current')
teUnnumLinkEthDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataFendNodeIp.setStatus('current')
teUnnumLinkEthDataFendTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataFendTeLinkId.setStatus('current')
teUnnumLinkEthDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataInfo.setStatus('current')
teNumLinkEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45), )
if mibBuilder.loadTexts: teNumLinkEthDataTable.setStatus('current')
teNumLinkEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"))
if mibBuilder.loadTexts: teNumLinkEthDataEntry.setStatus('current')
teNumLinkEthDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataNodeIp.setStatus('current')
teNumLinkEthDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataNodeTid.setStatus('current')
teNumLinkEthDataTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataTeLinkIp.setStatus('current')
teNumLinkEthDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataPhysicalLink.setStatus('current')
teNumLinkEthDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataSynchronization.setStatus('current')
teNumLinkEthDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataDiscarded.setStatus('current')
teNumLinkEthDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataFendNodeIp.setStatus('current')
teNumLinkEthDataFendTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataFendTeLinkIp.setStatus('current')
teNumLinkEthDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataInfo.setStatus('current')
remoteAlarmCpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46), )
if mibBuilder.loadTexts: remoteAlarmCpDataTable.setStatus('current')
remoteAlarmCpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: remoteAlarmCpDataEntry.setStatus('current')
remoteAlarmCpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 1), EntityIndex())
if mibBuilder.loadTexts: remoteAlarmCpDataNumber.setStatus('current')
remoteAlarmCpDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataNodeTid.setStatus('current')
remoteAlarmCpDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataNodeIp.setStatus('current')
remoteAlarmCpDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataSource.setStatus('current')
remoteAlarmCpDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 5), FspR7RemoteAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataType.setStatus('current')
remoteAlarmCpDataDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 6), FspR7Date()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataDate.setStatus('current')
remoteAlarmCpDataTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 7), FspR7Time()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataTime.setStatus('current')
remoteAlarmCpDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 8), FspR7RemoteAlarmPath()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataPath.setStatus('current')
inventoryCpEthDownFlowDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 47), )
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataTable.setStatus('current')
inventoryCpEthDownFlowDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 47, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthDownDataNumber"), (0, "FspR7-MIB", "inventoryCpEthDownFlowDataIndexEth"))
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataEntry.setStatus('current')
inventoryCpEthDownFlowDataIndexEth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 47, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataIndexEth.setStatus('current')
inventoryCpEthDownFlowDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 47, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataFacilities.setStatus('current')
inventoryCpEthUpFlowDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 48), )
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataTable.setStatus('current')
inventoryCpEthUpFlowDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 48, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthUpDataNumber"), (0, "FspR7-MIB", "inventoryCpEthUpFlowDataIndexEth"))
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataEntry.setStatus('current')
inventoryCpEthUpFlowDataIndexEth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 48, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataIndexEth.setStatus('current')
inventoryCpEthUpFlowDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 48, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataFacilities.setStatus('current')
portBindingDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51), )
if mibBuilder.loadTexts: portBindingDataTable.setStatus('current')
portBindingDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: portBindingDataEntry.setStatus('current')
portBindingDataLogicalIfAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataLogicalIfAid.setStatus('current')
portBindingDataLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataLocalPort.setStatus('current')
portBindingDataLocalTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataLocalTna.setStatus('current')
portBindingDataRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemotePort.setStatus('current')
portBindingDataRemoteTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemoteTna.setStatus('current')
portBindingDataRemoteTnaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemoteTnaMask.setStatus('current')
portBindingDataRemoteNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemoteNodeIp.setStatus('current')
portBindingDataRemoteScn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemoteScn.setStatus('current')
portBindingDataRemoteScPc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemoteScPc.setStatus('current')
portBindingDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 10), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataLayer.setStatus('current')
portBindingLifAidTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 52), )
if mibBuilder.loadTexts: portBindingLifAidTable.setStatus('current')
portBindingLifAidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 52, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "portBindingLifAidIndex"))
if mibBuilder.loadTexts: portBindingLifAidEntry.setStatus('current')
portBindingLifAidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 52, 1, 1), EntityIndex())
if mibBuilder.loadTexts: portBindingLifAidIndex.setStatus('current')
portBindingLifAidValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 52, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingLifAidValue.setStatus('current')
reservationCpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53), )
if mibBuilder.loadTexts: reservationCpDataTable.setStatus('current')
reservationCpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: reservationCpDataEntry.setStatus('current')
reservationCpDataSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataSeqNumber.setStatus('current')
reservationCpDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataTunnelNo.setStatus('current')
reservationCpDataTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataTunnelInstance.setStatus('current')
reservationCpDataIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataIngressTid.setStatus('current')
reservationCpDataIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataIngressNodeIp.setStatus('current')
reservationCpDataChannelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 6), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataChannelUp.setStatus('current')
reservationCpDataChannelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 7), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataChannelDown.setStatus('current')
controlPlaneOtnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55), )
if mibBuilder.loadTexts: controlPlaneOtnConfigTable.setStatus('current')
controlPlaneOtnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: controlPlaneOtnConfigEntry.setStatus('current')
controlPlaneOtnConfigCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmConfigFlag.setStatus('current')
controlPlaneOtnConfigCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmTraceDetail.setStatus('current')
controlPlaneOtnConfigCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 3), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmSetupTimeout.setStatus('current')
controlPlaneOtnConfigCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmShutdownTimeout.setStatus('current')
controlPlaneOtnConfigCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmRetryWait.setStatus('current')
controlPlaneOtnConfigCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmRetryWaitMultiplier.setStatus('current')
controlPlaneOtnConfigCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 7), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmMaximumRetryWait.setStatus('current')
controlPlaneOtnConfigCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmMaximumRetryNumber.setStatus('current')
controlPlaneOtnConfigRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRaConfigFlag.setStatus('current')
controlPlaneOtnConfigRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRaTraceDetail.setStatus('current')
controlPlaneOtnConfigRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 11), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRaAlarmActivationTime.setStatus('current')
controlPlaneOtnConfigCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCmConfigFlag.setStatus('current')
controlPlaneOtnConfigCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCmTraceDetail.setStatus('current')
controlPlaneOtnConfigCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 14), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCmAlarmActivationTime.setStatus('current')
controlPlaneOtnConfigCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCmFisFrsTimeout.setStatus('current')
controlPlaneOtnConfigCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCmCrankBackTimeout.setStatus('current')
controlPlaneOtnConfigCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdbConfigFlag.setStatus('current')
controlPlaneOtnConfigCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdbDetail.setStatus('current')
controlPlaneOtnConfigCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdbMaxSize.setStatus('current')
controlPlaneOtnConfigRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRsvpConfigFlag.setStatus('current')
controlPlaneOtnConfigRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRsvpMaxExpRestartTime.setStatus('current')
controlPlaneOtnConfigRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRsvpMaxExpRecoveryTime.setStatus('current')
controlPlaneOtnConfigTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbConfigFlag.setStatus('current')
controlPlaneOtnConfigTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbTraceDetail.setStatus('current')
controlPlaneOtnConfigTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbMaxSize.setStatus('current')
controlPlaneOtnConfigTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbRouterId.setStatus('current')
controlPlaneOtnConfigTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 27), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbMinAdvertWait.setStatus('current')
controlPlaneOtnConfigNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasConfigFlag.setStatus('current')
controlPlaneOtnConfigNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasTraceDetail.setStatus('current')
controlPlaneOtnConfigNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasMaxSize.setStatus('current')
controlPlaneOtnConfigNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 31), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasAdvertWait.setStatus('current')
controlPlaneOtnConfigPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigPcConfigFlag.setStatus('current')
controlPlaneOtnConfigPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigPcTraceDetail.setStatus('current')
controlPlaneOtnConfigCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdConfigFlag.setStatus('current')
controlPlaneOtnConfigCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdTraceDetail.setStatus('current')
controlPlaneOtnConfigCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdResyncTimeout.setStatus('current')
controlPlaneOtnConfigRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRmConfigFlag.setStatus('current')
controlPlaneOtnConfigRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRmTraceDetail.setStatus('current')
controlPlaneOtnConfigRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRmTraceTarget.setStatus('current')
controlPlaneOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56), )
if mibBuilder.loadTexts: controlPlaneOtnDataTable.setStatus('current')
controlPlaneOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: controlPlaneOtnDataEntry.setStatus('current')
controlPlaneOtnDataCtmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataCtmAlias.setStatus('current')
controlPlaneOtnDataRaAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataRaAlias.setStatus('current')
controlPlaneOtnDataCmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataCmAlias.setStatus('current')
controlPlaneOtnDataCdbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataCdbAlias.setStatus('current')
controlPlaneOtnDataTedbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataTedbAlias.setStatus('current')
controlPlaneOtnDataNaasAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataNaasAlias.setStatus('current')
controlPlaneOtnDataPcAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataPcAlias.setStatus('current')
controlPlaneOtnDataRsvpAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataRsvpAlias.setStatus('current')
controlPlaneOtnDataCdAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataCdAlias.setStatus('current')
controlPlaneOtnDataRmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataRmAlias.setStatus('current')
tunnelOtnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57), )
if mibBuilder.loadTexts: tunnelOtnConfigTable.setStatus('current')
tunnelOtnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: tunnelOtnConfigEntry.setStatus('current')
tunnelOtnConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigAlias.setStatus('current')
tunnelOtnConfigProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigProvisionedPaths.setStatus('current')
tunnelOtnConfigPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 3), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigPin.setStatus('current')
tunnelOtnConfigAbortProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 4), FspR7CpAbortProcess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigAbortProcess.setStatus('current')
tunnelOtnConfigCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 5), FspR7CpCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigCommand.setStatus('current')
tunnelOtnConfigProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 6), FspR7CpProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigProtectionType.setStatus('current')
tunnelOtnConfigRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 7), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigRestorationType.setStatus('current')
tunnelOtnConfigMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 8), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigMonitorEntities.setStatus('current')
tunnelOtnConfigAdminModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 9), FspR7CommandModifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigAdminModifier.setStatus('current')
tunnelOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58), )
if mibBuilder.loadTexts: tunnelOtnDataTable.setStatus('current')
tunnelOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: tunnelOtnDataEntry.setStatus('current')
tunnelOtnDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataTunnelId.setStatus('current')
tunnelOtnDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataTunnelNo.setStatus('current')
tunnelOtnDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataTunnelType.setStatus('current')
tunnelOtnDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataFromTid.setStatus('current')
tunnelOtnDataFromNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataFromNodeIP.setStatus('current')
tunnelOtnDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataToTid.setStatus('current')
tunnelOtnDataToTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataToTidMonitor.setStatus('current')
tunnelOtnDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataToNodeIp.setStatus('current')
tunnelOtnDataToNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataToNodeIpMonitor.setStatus('current')
tunnelOtnDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 10), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataFromAid.setStatus('current')
tunnelOtnDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataToAid.setStatus('current')
tunnelOtnDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 12), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataConnectionDirection.setStatus('current')
tunnelOtnDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 13), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataFacilityType.setStatus('current')
tunnelOtnDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataComputedPaths.setStatus('current')
tunnelOtnDataComputationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 15), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataComputationState.setStatus('current')
tunnelOtnDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorMessage.setStatus('current')
tunnelOtnDataCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 17), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataCirTrmt.setStatus('current')
tunnelOtnDataCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataCbsTrmt.setStatus('current')
tunnelOtnDataErrorCodeMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorCodeMajor.setStatus('current')
tunnelOtnDataErrorCodeMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorCodeMinor.setStatus('current')
tunnelOtnDataErrorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorIp.setStatus('current')
tunnelOtnDataErrorTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorTid.setStatus('current')
tunnelOtnDataErrorCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 23), FspR7CpErrorCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorCategory.setStatus('current')
tunnelOtnDataSpecificErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 24), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataSpecificErrorMessage.setStatus('current')
tunnelOtnDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 25), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataTunnelScope.setStatus('current')
tunnelOtnDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 26), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataLayer.setStatus('current')
tunnelOtnDataOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataOifUni.setStatus('current')
tunnelOtnDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataTunnelNumberExtension.setStatus('current')
tunnelOtnDataMonitorEntitiesDerive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 29), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataMonitorEntitiesDerive.setStatus('current')
connectionOtnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 59), )
if mibBuilder.loadTexts: connectionOtnConfigTable.setStatus('current')
connectionOtnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 59, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: connectionOtnConfigEntry.setStatus('current')
connectionOtnConfigCancelConnEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 59, 1, 1), FspR7CpCancConnection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionOtnConfigCancelConnEntities.setStatus('current')
connectionOtnConfigCancelModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 59, 1, 2), FspR7CommandModifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionOtnConfigCancelModifier.setStatus('current')
connectionOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60), )
if mibBuilder.loadTexts: connectionOtnDataTable.setStatus('current')
connectionOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: connectionOtnDataEntry.setStatus('current')
connectionOtnDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelId.setStatus('current')
connectionOtnDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelNo.setStatus('current')
connectionOtnDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelType.setStatus('current')
connectionOtnDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataFromTid.setStatus('current')
connectionOtnDataFromNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataFromNodeIp.setStatus('current')
connectionOtnDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataToTid.setStatus('current')
connectionOtnDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataToNodeIp.setStatus('current')
connectionOtnDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataFromAid.setStatus('current')
connectionOtnDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataToAid.setStatus('current')
connectionOtnDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataConnectionDirection.setStatus('current')
connectionOtnDataNetworkElementPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 11), FspR7CpNePosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataNetworkElementPosition.setStatus('current')
connectionOtnDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 12), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataFacilityType.setStatus('current')
connectionOtnDataBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 13), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataBitrate.setStatus('current')
connectionOtnDataEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 14), FspR7CpEncode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataEncode.setStatus('current')
connectionOtnDataTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 15), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTerminationLevel.setStatus('current')
connectionOtnDataFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 16), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataFecType.setStatus('current')
connectionOtnDataStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 17), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataStuff.setStatus('current')
connectionOtnDataSignalledPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataSignalledPaths.setStatus('current')
connectionOtnDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataComputedPaths.setStatus('current')
connectionOtnDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 20), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataRole.setStatus('current')
connectionOtnDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataErrorMessage.setStatus('current')
connectionOtnDataActivationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 22), FspR7CpActivState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataActivationState.setStatus('current')
connectionOtnDataRestorable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 23), FspR7FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataRestorable.setStatus('current')
connectionOtnDataEqualizationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 24), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataEqualizationState.setStatus('current')
connectionOtnDataModificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 25), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataModificationState.setStatus('current')
connectionOtnDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 26), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelScope.setStatus('current')
connectionOtnDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 27), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataLayer.setStatus('current')
connectionOtnDataSourceTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataSourceTna.setStatus('current')
connectionOtnDataDestinationTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 29), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataDestinationTna.setStatus('current')
connectionOtnDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelNumberExtension.setStatus('current')
connectionOtnDataTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelInstance.setStatus('current')
connectionOtnDataConnectionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataConnectionNo.setStatus('current')
inventoryCpOtnDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61), )
if mibBuilder.loadTexts: inventoryCpOtnDownDataTable.setStatus('current')
inventoryCpOtnDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"), (0, "FspR7-MIB", "inventoryCpOtnDownDataNumber"))
if mibBuilder.loadTexts: inventoryCpOtnDownDataEntry.setStatus('current')
inventoryCpOtnDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpOtnDownDataNumber.setStatus('current')
inventoryCpOtnDownDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnDownDataResources.setStatus('current')
inventoryCpOtnDownDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnDownDataFacilities.setStatus('current')
inventoryCpOtnDownDataPhysicalTermPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnDownDataPhysicalTermPoints.setStatus('current')
inventoryCpOtnUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62), )
if mibBuilder.loadTexts: inventoryCpOtnUpDataTable.setStatus('current')
inventoryCpOtnUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"), (0, "FspR7-MIB", "inventoryCpOtnUpDataNumber"))
if mibBuilder.loadTexts: inventoryCpOtnUpDataEntry.setStatus('current')
inventoryCpOtnUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpOtnUpDataNumber.setStatus('current')
inventoryCpOtnUpDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnUpDataResources.setStatus('current')
inventoryCpOtnUpDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnUpDataFacilities.setStatus('current')
inventoryCpOtnUpDataPhysicalTermPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnUpDataPhysicalTermPoints.setStatus('current')
inventoryCpOtnCrsDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 63), )
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataTable.setStatus('current')
inventoryCpOtnCrsDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 63, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"), (0, "FspR7-MIB", "inventoryCpOtnCrsDownDataNumber"), (0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataEntry.setStatus('current')
inventoryCpOtnCrsDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 63, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataNumber.setStatus('current')
inventoryCpOtnCrsDownDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 63, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataAids.setStatus('current')
inventoryCpOtnCrsUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 64), )
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataTable.setStatus('current')
inventoryCpOtnCrsUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 64, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"), (0, "FspR7-MIB", "inventoryCpOtnCrsUpDataNumber"), (0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataEntry.setStatus('current')
inventoryCpOtnCrsUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 64, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataNumber.setStatus('current')
inventoryCpOtnCrsUpDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 64, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataAids.setStatus('current')
pathOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65), )
if mibBuilder.loadTexts: pathOtnDataTable.setStatus('current')
pathOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: pathOtnDataEntry.setStatus('current')
pathOtnDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathOtnDataPathId.setStatus('current')
pathOtnDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65, 1, 2), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathOtnDataPathType.setStatus('current')
pathOtnDataConnectionTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathOtnDataConnectionTunnelAid.setStatus('current')
pathOtnDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65, 1, 4), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathOtnDataRole.setStatus('current')
pathElementOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66), )
if mibBuilder.loadTexts: pathElementOtnDataTable.setStatus('current')
pathElementOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: pathElementOtnDataEntry.setStatus('current')
pathElementOtnDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataPathId.setStatus('current')
pathElementOtnDataSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataSequenceNumber.setStatus('current')
pathElementOtnDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 3), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataPathType.setStatus('current')
pathElementOtnDataTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 4), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataTrafficEngineeringType.setStatus('current')
pathElementOtnDataLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataLifIp.setStatus('current')
pathElementOtnDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataNodeIp.setStatus('current')
pathElementOtnDataNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataNodeIpMonitor.setStatus('current')
pathElementOtnDataTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataTid.setStatus('current')
pathElementOtnDataTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataTidMonitor.setStatus('current')
pathElementOtnDataLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataLogicalInterfaceId.setStatus('current')
pathElementOtnDataTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 11), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataTie.setStatus('current')
pathElementOtnDataUpTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 12), FspR7OdtuType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataUpTributaryODTUType.setStatus('current')
pathElementOtnDataDownTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 13), FspR7OdtuType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataDownTributaryODTUType.setStatus('current')
pathElementOtnDataUpTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 14), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataUpTributaryPort.setStatus('current')
pathElementOtnDataDownTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 15), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataDownTributaryPort.setStatus('current')
pathElementOtnDataUpTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 16), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataUpTributarySlot.setStatus('current')
pathElementOtnDataDownTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 17), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataDownTributarySlot.setStatus('current')
pathElementOtnDataUpTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 18), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataUpTributaryTSMethod.setStatus('current')
pathElementOtnDataDownTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 19), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataDownTributaryTSMethod.setStatus('current')
teUnnumLinkOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67), )
if mibBuilder.loadTexts: teUnnumLinkOtnDataTable.setStatus('current')
teUnnumLinkOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"), (0, "FspR7-MIB", "teUnnumLinkOtnDataNumber"))
if mibBuilder.loadTexts: teUnnumLinkOtnDataEntry.setStatus('current')
teUnnumLinkOtnDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 1), Unsigned32())
if mibBuilder.loadTexts: teUnnumLinkOtnDataNumber.setStatus('current')
teUnnumLinkOtnDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataNodeIp.setStatus('current')
teUnnumLinkOtnDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataNodeTid.setStatus('current')
teUnnumLinkOtnDataTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataTeLinkId.setStatus('current')
teUnnumLinkOtnDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataPhysicalLink.setStatus('current')
teUnnumLinkOtnDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataSynchronization.setStatus('current')
teUnnumLinkOtnDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataDiscarded.setStatus('current')
teUnnumLinkOtnDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataFendNodeIp.setStatus('current')
teUnnumLinkOtnDataFendTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataFendTeLinkId.setStatus('current')
teUnnumLinkOtnDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataInfo.setStatus('current')
teNumLinkOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68), )
if mibBuilder.loadTexts: teNumLinkOtnDataTable.setStatus('current')
teNumLinkOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"))
if mibBuilder.loadTexts: teNumLinkOtnDataEntry.setStatus('current')
teNumLinkOtnDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataNodeIp.setStatus('current')
teNumLinkOtnDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataNodeTid.setStatus('current')
teNumLinkOtnDataTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataTeLinkIp.setStatus('current')
teNumLinkOtnDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataPhysicalLink.setStatus('current')
teNumLinkOtnDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataSynchronization.setStatus('current')
teNumLinkOtnDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataDiscarded.setStatus('current')
teNumLinkOtnDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataFendNodeIp.setStatus('current')
teNumLinkOtnDataFendTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataFendTeLinkIp.setStatus('current')
teNumLinkOtnDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataInfo.setStatus('current')
deployProvShelfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1), )
if mibBuilder.loadTexts: deployProvShelfTable.setStatus('current')
deployProvShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvShelfEntry.setStatus('current')
deployProvShelfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfRowStatus.setStatus('current')
deployProvShelfForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfForceDestroy.setStatus('current')
deployProvShelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 3), FspR7EquipmentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfType.setStatus('current')
deployProvShelfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 4), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfAdmin.setStatus('current')
deployProvShelfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 5), FspR7SupplyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfSupply.setStatus('current')
deployProvShelfBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 6), FspR7OpticalBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfBand.setStatus('current')
deployProvShelfPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 7), FspR7PsuOutputPower()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfPsuOutputPower.setStatus('current')
deployProvShelfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2), )
if mibBuilder.loadTexts: deployProvShelfCapTable.setStatus('current')
deployProvShelfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvShelfCapEntry.setStatus('current')
deployProvShelfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapRowStatus.setStatus('current')
deployProvShelfCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapForceDestroy.setStatus('current')
deployProvShelfCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapType.setStatus('current')
deployProvShelfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 4), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapAdmin.setStatus('current')
deployProvShelfCapSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 5), FspR7SupplyTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapSupply.setStatus('current')
deployProvShelfCapBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 6), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapBand.setStatus('current')
deployProvShelfCapPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 7), FspR7PsuOutputPowerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapPsuOutputPower.setStatus('current')
deployProvShelfDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3), )
if mibBuilder.loadTexts: deployProvShelfDefaultsTable.setStatus('current')
deployProvShelfDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvShelfDefaultsEntry.setStatus('current')
deployProvShelfDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsRowStatus.setStatus('current')
deployProvShelfDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsForceDestroy.setStatus('current')
deployProvShelfDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsType.setStatus('current')
deployProvShelfDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 4), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsAdmin.setStatus('current')
deployProvShelfDefaultsSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 5), FspR7SupplyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsSupply.setStatus('current')
deployProvShelfDefaultsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 6), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsBand.setStatus('current')
deployProvShelfDefaultsPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 7), FspR7PsuOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsPsuOutputPower.setStatus('current')
deployProvModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1), )
if mibBuilder.loadTexts: deployProvModuleTable.setStatus('current')
deployProvModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvModuleEntry.setStatus('current')
deployProvModuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleRowStatus.setStatus('current')
deployProvModuleForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleForceDestroy.setStatus('current')
deployProvModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 3), FspR7EquipmentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleType.setStatus('current')
deployProvModuleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 4), FspR7TransmissionMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleMode.setStatus('current')
deployProvModuleDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 5), FspR7DeploymentScenario()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleDeploy.setStatus('current')
deployProvModuleChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleChannel.setStatus('current')
deployProvModuleReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 7), FspR7OpticalInterfaceReach()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleReach.setStatus('current')
deployProvModuleBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 8), FspR7OpticalBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleBand.setStatus('current')
deployProvModuleSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 9), FspR7OpticalSubBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleSubBand.setStatus('current')
deployProvModuleGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 10), FspR7OpticalGroup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleGroup.setStatus('current')
deployProvModuleFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 11), FspR7OpticalFiberType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleFiber.setStatus('current')
deployProvModuleEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 12), FspR7EdfaOutputPowerRating()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleEdfaPwrOut.setStatus('current')
deployProvModuleAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 13), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleAdmin.setStatus('current')
deployProvModuleSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 14), FspR7SupplyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleSupply.setStatus('current')
deployProvModuleDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 15), FspR7DispersionCompensation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleDispersionCompensation.setStatus('current')
deployProvModuleLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 16), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleLanAid.setStatus('current')
deployProvModuleSingleFiberLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 17), FspR7SingleFiberLocation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleSingleFiberLocation.setStatus('current')
deployProvModulePsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 18), FspR7PsuOutputPower()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModulePsuOutputPower.setStatus('current')
deployProvModuleTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleTilt.setStatus('current')
deployProvModuleGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 20), FspR7Gain()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleGain.setStatus('current')
deployProvModuleCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 21), FspR7CapInventory()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleCapabilityLevel.setStatus('current')
deployProvModuleRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 22), FspR7RoadmNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleRoadmNumber.setStatus('current')
deployProvModuleScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 23), FspR7Scrambling()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleScrambling.setStatus('current')
deployProvModuleChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 24), FspR7ChannelSpacing()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleChannelSpacing.setStatus('current')
deployProvModuleLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleLagSysPrio.setStatus('current')
deployProvModuleGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 26), FspR7GainRange()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleGainRange.setStatus('current')
deployProvModuleEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 27), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleEqlzAdmin.setStatus('current')
deployProvModuleChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 28), FspR7NumberOfChannels()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleChannelsNumber.setStatus('current')
deployProvModuleDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 29), FspR7DCFiberType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleDCFiberType.setStatus('current')
deployProvModuleMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 30), FspR7Mapping()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleMapping.setStatus('current')
deployProvModuleCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 31), FspR7L2CacEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleCac.setStatus('current')
deployProvModuleChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 32), FspR7ChannelSpacing()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleChannelSpacingProvision.setStatus('current')
deployProvModuleChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 33), FspR7NumberOfChannels()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleChannelsProvision.setStatus('current')
deployProvModuleCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2), )
if mibBuilder.loadTexts: deployProvModuleCapTable.setStatus('current')
deployProvModuleCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvModuleCapEntry.setStatus('current')
deployProvModuleCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapRowStatus.setStatus('current')
deployProvModuleCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapForceDestroy.setStatus('current')
deployProvModuleCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapType.setStatus('current')
deployProvModuleCapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 4), FspR7TransmissionModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapMode.setStatus('current')
deployProvModuleCapDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 5), FspR7DeploymentScenarioCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapDeploy.setStatus('current')
deployProvModuleCapChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 6), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapChannel.setStatus('current')
deployProvModuleCapReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 7), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapReach.setStatus('current')
deployProvModuleCapBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 8), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapBand.setStatus('current')
deployProvModuleCapSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 9), FspR7OpticalSubBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapSubBand.setStatus('current')
deployProvModuleCapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 10), FspR7OpticalGroupCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapGroup.setStatus('current')
deployProvModuleCapFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 11), FspR7OpticalFiberTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapFiber.setStatus('current')
deployProvModuleCapEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 12), FspR7EdfaOutputPowerRatingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapEdfaPwrOut.setStatus('current')
deployProvModuleCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 13), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapAdmin.setStatus('current')
deployProvModuleCapSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 14), FspR7SupplyTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapSupply.setStatus('current')
deployProvModuleCapDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 15), FspR7DispersionCompensationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapDispersionCompensation.setStatus('current')
deployProvModuleCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapLanAid.setStatus('current')
deployProvModuleCapSingleFiberLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 17), FspR7SingleFiberLocationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapSingleFiberLocation.setStatus('current')
deployProvModuleCapPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 18), FspR7PsuOutputPowerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapPsuOutputPower.setStatus('current')
deployProvModuleCapTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 19), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapTilt.setStatus('current')
deployProvModuleCapGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 20), FspR7GainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapGain.setStatus('current')
deployProvModuleCapCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 21), FspR7CapInventoryCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapCapabilityLevel.setStatus('current')
deployProvModuleCapRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 22), FspR7RoadmNumberCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapRoadmNumber.setStatus('current')
deployProvModuleCapScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 23), FspR7ScramblingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapScrambling.setStatus('current')
deployProvModuleCapChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 24), FspR7ChannelSpacingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapChannelSpacing.setStatus('current')
deployProvModuleCapLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 25), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapLagSysPrio.setStatus('current')
deployProvModuleCapGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 26), FspR7GainRangeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapGainRange.setStatus('current')
deployProvModuleCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 27), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapEqlzAdmin.setStatus('current')
deployProvModuleCapChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 28), FspR7NumberOfChannelsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapChannelsNumber.setStatus('current')
deployProvModuleCapDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 29), FspR7DCFiberTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapDCFiberType.setStatus('current')
deployProvModuleCapMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 30), FspR7MappingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapMapping.setStatus('current')
deployProvModuleCapCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 31), FspR7L2CacEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapCac.setStatus('current')
deployProvModuleCapChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 32), FspR7ChannelSpacingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapChannelSpacingProvision.setStatus('current')
deployProvModuleCapChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 33), FspR7NumberOfChannelsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapChannelsProvision.setStatus('current')
deployProvModuleDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3), )
if mibBuilder.loadTexts: deployProvModuleDefaultsTable.setStatus('current')
deployProvModuleDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvModuleDefaultsEntry.setStatus('current')
deployProvModuleDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsRowStatus.setStatus('current')
deployProvModuleDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsForceDestroy.setStatus('current')
deployProvModuleDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsType.setStatus('current')
deployProvModuleDefaultsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 4), FspR7TransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsMode.setStatus('current')
deployProvModuleDefaultsDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 5), FspR7DeploymentScenario()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsDeploy.setStatus('current')
deployProvModuleDefaultsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsChannel.setStatus('current')
deployProvModuleDefaultsReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 7), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsReach.setStatus('current')
deployProvModuleDefaultsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 8), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsBand.setStatus('current')
deployProvModuleDefaultsSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 9), FspR7OpticalSubBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsSubBand.setStatus('current')
deployProvModuleDefaultsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 10), FspR7OpticalGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsGroup.setStatus('current')
deployProvModuleDefaultsFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 11), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsFiber.setStatus('current')
deployProvModuleDefaultsEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 12), FspR7EdfaOutputPowerRating()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsEdfaPwrOut.setStatus('current')
deployProvModuleDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 13), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsAdmin.setStatus('current')
deployProvModuleDefaultsSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 14), FspR7SupplyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsSupply.setStatus('current')
deployProvModuleDefaultsDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 15), FspR7DispersionCompensation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsDispersionCompensation.setStatus('current')
deployProvModuleDefaultsLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 16), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsLanAid.setStatus('current')
deployProvModuleDefaultsSingleFiberLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 17), FspR7SingleFiberLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsSingleFiberLocation.setStatus('current')
deployProvModuleDefaultsPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 18), FspR7PsuOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsPsuOutputPower.setStatus('current')
deployProvModuleDefaultsTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsTilt.setStatus('current')
deployProvModuleDefaultsGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 20), FspR7Gain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsGain.setStatus('current')
deployProvModuleDefaultsCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 21), FspR7CapInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsCapabilityLevel.setStatus('current')
deployProvModuleDefaultsRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 22), FspR7RoadmNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsRoadmNumber.setStatus('current')
deployProvModuleDefaultsScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 23), FspR7Scrambling()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsScrambling.setStatus('current')
deployProvModuleDefaultsChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 24), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelSpacing.setStatus('current')
deployProvModuleDefaultsLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsLagSysPrio.setStatus('current')
deployProvModuleDefaultsGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 26), FspR7GainRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsGainRange.setStatus('current')
deployProvModuleDefaultsEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 27), FspR7EqlzAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsEqlzAdmin.setStatus('current')
deployProvModuleDefaultsChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 28), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelsNumber.setStatus('current')
deployProvModuleDefaultsDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 29), FspR7DCFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsDCFiberType.setStatus('current')
deployProvModuleDefaultsMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 30), FspR7Mapping()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsMapping.setStatus('current')
deployProvModuleDefaultsCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 31), FspR7L2CacEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsCac.setStatus('current')
deployProvModuleDefaultsChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 32), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelSpacingProvision.setStatus('current')
deployProvModuleDefaultsChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 33), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelsProvision.setStatus('current')
deployProvPlugTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1), )
if mibBuilder.loadTexts: deployProvPlugTable.setStatus('current')
deployProvPlugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPlugEntry.setStatus('current')
deployProvPlugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugRowStatus.setStatus('current')
deployProvPlugForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugForceDestroy.setStatus('current')
deployProvPlugType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 3), FspR7EquipmentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugType.setStatus('current')
deployProvPlugMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 4), FspR7PlugDataRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugMaxDataRate.setStatus('current')
deployProvPlugChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 5), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugChannelId.setStatus('current')
deployProvPlugThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 6), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugThirdPartyUsage.setStatus('current')
deployProvPlugReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 7), FspR7OpticalInterfaceReach()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugReach.setStatus('current')
deployProvPlugAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 8), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugAdmin.setStatus('current')
deployProvPlugLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugLoopbackAttenuation.setStatus('current')
deployProvPlugCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2), )
if mibBuilder.loadTexts: deployProvPlugCapTable.setStatus('current')
deployProvPlugCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPlugCapEntry.setStatus('current')
deployProvPlugCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapRowStatus.setStatus('current')
deployProvPlugCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapForceDestroy.setStatus('current')
deployProvPlugCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapType.setStatus('current')
deployProvPlugCapMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 4), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapMaxDataRate.setStatus('current')
deployProvPlugCapChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 5), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapChannelId.setStatus('current')
deployProvPlugCapThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 6), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapThirdPartyUsage.setStatus('current')
deployProvPlugCapReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 7), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapReach.setStatus('current')
deployProvPlugCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 8), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapAdmin.setStatus('current')
deployProvPlugCapLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 9), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapLoopbackAttenuation.setStatus('current')
deployProvPlugDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3), )
if mibBuilder.loadTexts: deployProvPlugDefaultsTable.setStatus('current')
deployProvPlugDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPlugDefaultsEntry.setStatus('current')
deployProvPlugDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsRowStatus.setStatus('current')
deployProvPlugDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsForceDestroy.setStatus('current')
deployProvPlugDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsType.setStatus('current')
deployProvPlugDefaultsMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 4), FspR7PlugDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsMaxDataRate.setStatus('current')
deployProvPlugDefaultsChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 5), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsChannelId.setStatus('current')
deployProvPlugDefaultsThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 6), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsThirdPartyUsage.setStatus('current')
deployProvPlugDefaultsReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 7), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsReach.setStatus('current')
deployProvPlugDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 8), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsAdmin.setStatus('current')
deployProvPlugDefaultsLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsLoopbackAttenuation.setStatus('current')
deployProvIfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1), )
if mibBuilder.loadTexts: deployProvIfTable.setStatus('current')
deployProvIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvIfEntry.setStatus('current')
deployProvIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfRowStatus.setStatus('current')
deployProvIfForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfForceDestroy.setStatus('current')
deployProvIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfType.setStatus('current')
deployProvIfPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 4), OtnPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPayload.setStatus('current')
deployProvIfBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 5), FspR7PortBehaviour()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfBehaviour.setStatus('current')
deployProvIfTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 6), OhTerminationLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTerminationLevel.setStatus('current')
deployProvIfAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 7), FspR7AlsMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAlsMode.setStatus('current')
deployProvIfErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 8), FspR7ErrorFwdMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfErrorForwarding.setStatus('current')
deployProvIfLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 9), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLaserOffDelayFunction.setStatus('current')
deployProvIfFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 10), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfFecType.setStatus('current')
deployProvIfTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 11), SonetTimingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimingSource.setStatus('current')
deployProvIfTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 12), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTcmALevel.setStatus('current')
deployProvIfTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 13), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTcmBLevel.setStatus('current')
deployProvIfSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 14), FspR7BERThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresSonetLine.setStatus('current')
deployProvIfSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresSdhMs.setStatus('current')
deployProvIfSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSignalDegradePeriod.setStatus('current')
deployProvIfAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 17), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAutonegotiation.setStatus('current')
deployProvIfBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 18), FspR7Bitrate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfBitrate.setStatus('current')
deployProvIfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 19), EthDuplexMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfDuplex.setStatus('current')
deployProvIfFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 20), FspR7FlowControlMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfFlowControl.setStatus('current')
deployProvIfOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 21), FspR7Stuff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOtnStuffing.setStatus('current')
deployProvIfSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresOtu.setStatus('current')
deployProvIfSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOtu.setStatus('current')
deployProvIfSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresOdu.setStatus('current')
deployProvIfSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOdu.setStatus('current')
deployProvIfSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresOduTcmA.setStatus('current')
deployProvIfSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOduTcmA.setStatus('current')
deployProvIfSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresOduTcmB.setStatus('current')
deployProvIfSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOduTcmB.setStatus('current')
deployProvIfTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTilt.setStatus('current')
deployProvIfGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 31), FspR7Gain()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfGain.setStatus('current')
deployProvIfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 32), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAdmin.setStatus('current')
deployProvIfAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB/min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAttenuationGradient.setStatus('current')
deployProvIfSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 34), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresReceiver.setStatus('current')
deployProvIfTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 35), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTcmCLevel.setStatus('current')
deployProvIfSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresOduTcmC.setStatus('current')
deployProvIfSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOduTcmC.setStatus('current')
deployProvIfDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 38), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfDisparityCorrection.setStatus('current')
deployProvIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 39), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfIpAddr.setStatus('current')
deployProvIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 40), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfIpMask.setStatus('current')
deployProvIfOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 41), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOspf.setStatus('current')
deployProvIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfMetric.setStatus('current')
deployProvIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 43), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAreaId.setStatus('current')
deployProvIfTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 44), SonetTraceForm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceFormSonetSection.setStatus('current')
deployProvIfTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedSonetSection.setStatus('current')
deployProvIfTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSonetSection.setStatus('current')
deployProvIfTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 47), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeSonetSection.setStatus('current')
deployProvIfTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedOtu.setStatus('current')
deployProvIfTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOtu.setStatus('current')
deployProvIfTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOtu.setStatus('current')
deployProvIfTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOtu.setStatus('current')
deployProvIfTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 52), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeOtu.setStatus('current')
deployProvIfTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedOdu.setStatus('current')
deployProvIfTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOdu.setStatus('current')
deployProvIfTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOdu.setStatus('current')
deployProvIfTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 56), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOdu.setStatus('current')
deployProvIfTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 57), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeOdu.setStatus('current')
deployProvIfTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 58), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedOduTcmA.setStatus('current')
deployProvIfTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOduTcmA.setStatus('current')
deployProvIfTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOduTcmA.setStatus('current')
deployProvIfTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOduTcmA.setStatus('current')
deployProvIfTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 62), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeOduTcmA.setStatus('current')
deployProvIfTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedOduTcmB.setStatus('current')
deployProvIfTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOduTcmB.setStatus('current')
deployProvIfTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOduTcmB.setStatus('current')
deployProvIfTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOduTcmB.setStatus('current')
deployProvIfTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 67), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeOduTcmB.setStatus('current')
deployProvIfTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedOduTcmC.setStatus('current')
deployProvIfTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOduTcmC.setStatus('current')
deployProvIfTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOduTcmC.setStatus('current')
deployProvIfTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOduTcmC.setStatus('current')
deployProvIfTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 72), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeOduTcmC.setStatus('current')
deployProvIfChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 73), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfChannelProvisioning.setStatus('current')
deployProvIfVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 74), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(50, 350), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfVariableGain.setStatus('current')
deployProvIfBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 75), FspR7OpticalBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfBand.setStatus('current')
deployProvIfSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 76), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10000), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThreshold.setStatus('current')
deployProvIfSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 77), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodIntegration.setStatus('current')
deployProvIfVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 78), FspR7VoaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfVoaMode.setStatus('current')
deployProvIfOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOpticalSetPoint.setStatus('current')
deployProvIfVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 80), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfVoaSetpoint.setStatus('current')
deployProvIfLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 81), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLanAid.setStatus('current')
deployProvIfAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 82), Unsigned32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAprHighThreshold.setStatus('current')
deployProvIfPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(115, 138), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.2 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPumpPower.setStatus('current')
deployProvIfIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 84), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfIpType.setStatus('current')
deployProvIfWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 85), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfWdmRxChannel.setStatus('current')
deployProvIfSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 86), FspR7BERThresholdSection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresSonetSection.setStatus('current')
deployProvIfSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 87), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresSdhSection.setStatus('current')
deployProvIfSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 88), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodSdhSection.setStatus('current')
deployProvIfDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 89), FspR7DispersionModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfDispersionMode.setStatus('current')
deployProvIfDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfDispersionSetting.setStatus('current')
deployProvIfOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOffset.setStatus('current')
deployProvIfFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 92), FspR7InterfaceFunction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfFunction.setStatus('current')
deployProvIfPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 93), FspR7PortMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPortMode.setStatus('current')
deployProvIfPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 94), FspR7PortRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPortRole.setStatus('current')
deployProvIfUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 95), FspR7UntaggedFrames()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfUtag.setStatus('current')
deployProvIfPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 96), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPvid.setStatus('current')
deployProvIfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 97), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPriority.setStatus('current')
deployProvIfStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 98), FspR7SnmpHexString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfStagType.setStatus('current')
deployProvIfCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 99), FspR7L2CacEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfCac.setStatus('current')
deployProvIfMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 100), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1518, 9600), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfMaxFrameSize.setStatus('current')
deployProvIfVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 101), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfVethAid.setStatus('current')
deployProvIfLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 102), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLagPrio.setStatus('current')
deployProvIfLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 103), FspR7LagPortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLagPortType.setStatus('current')
deployProvIfLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 104), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLagActivePorts.setStatus('current')
deployProvIfLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 105), FspR7LacpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLacpMode.setStatus('current')
deployProvIfLagLoadBallanceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 106), FspR7LagLoadBallanceSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLagLoadBallanceSource.setStatus('current')
deployProvIfLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 107), FspR7LacpTimeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLacpTimeout.setStatus('current')
deployProvIfFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 108), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfFarEndCommunication.setStatus('current')
deployProvIfEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 109), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfEqlzAdmin.setStatus('current')
deployProvIfTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 110), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTxOffDelay.setStatus('current')
deployProvIfOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 111), FspR7OpuPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOpuPayloadType.setStatus('current')
deployProvIfOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOscOpticalSetpoint.setStatus('current')
deployProvIfFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 113), FspR7FiberBrand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfFiberBrand.setStatus('current')
deployProvIfTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 114), FspR7TiltSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTiltSet.setStatus('current')
deployProvIfXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 115), FspR7XfpDecisionThres()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfXfpDecisionThres.setStatus('current')
deployProvIfAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 116), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAutoPTassignment.setStatus('current')
deployProvIfTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 117), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTributarySlotMethod.setStatus('current')
deployProvIfOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 118), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOduTribPortNo.setStatus('current')
deployProvIfOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 119), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOduTribTimeSlottNo.setStatus('current')
deployProvIfRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 120), ApsRevertMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfRevertiveMode.setStatus('current')
deployProvIfBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 125), FspR7Bip()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfBip.setStatus('current')
deployProvIfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2), )
if mibBuilder.loadTexts: deployProvIfCapTable.setStatus('current')
deployProvIfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvIfCapEntry.setStatus('current')
deployProvIfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapRowStatus.setStatus('current')
deployProvIfCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapForceDestroy.setStatus('current')
deployProvIfCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapType.setStatus('current')
deployProvIfCapPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 4), OtnPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPayload.setStatus('current')
deployProvIfCapBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 5), FspR7PortBehaviourCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapBehaviour.setStatus('current')
deployProvIfCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 6), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTerminationLevel.setStatus('current')
deployProvIfCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 7), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAlsMode.setStatus('current')
deployProvIfCapErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 8), FspR7ErrorFwdModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapErrorForwarding.setStatus('current')
deployProvIfCapLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 9), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLaserOffDelayFunction.setStatus('current')
deployProvIfCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 10), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapFecType.setStatus('current')
deployProvIfCapTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 11), SonetTimingSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimingSource.setStatus('current')
deployProvIfCapTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 12), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTcmALevel.setStatus('current')
deployProvIfCapTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 13), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTcmBLevel.setStatus('current')
deployProvIfCapSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 14), FspR7BERThresholdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSonetLine.setStatus('current')
deployProvIfCapSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 15), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSdhMs.setStatus('current')
deployProvIfCapSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 16), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSignalDegradePeriod.setStatus('current')
deployProvIfCapAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 17), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAutonegotiation.setStatus('current')
deployProvIfCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 18), FspR7BitrateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapBitrate.setStatus('current')
deployProvIfCapDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 19), EthDuplexModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapDuplex.setStatus('current')
deployProvIfCapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 20), FspR7FlowControlModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapFlowControl.setStatus('current')
deployProvIfCapOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 21), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOtnStuffing.setStatus('current')
deployProvIfCapSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 22), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOtu.setStatus('current')
deployProvIfCapSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 23), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOtu.setStatus('current')
deployProvIfCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 24), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOdu.setStatus('current')
deployProvIfCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 25), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOdu.setStatus('current')
deployProvIfCapSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 26), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOduTcmA.setStatus('current')
deployProvIfCapSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 27), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOduTcmA.setStatus('current')
deployProvIfCapSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 28), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOduTcmB.setStatus('current')
deployProvIfCapSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 29), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOduTcmB.setStatus('current')
deployProvIfCapTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 30), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTilt.setStatus('current')
deployProvIfCapGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 31), FspR7GainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapGain.setStatus('current')
deployProvIfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 32), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAdmin.setStatus('current')
deployProvIfCapAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 33), FspR7Unsigned32Caps()).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAttenuationGradient.setStatus('current')
deployProvIfCapSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 34), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresReceiver.setStatus('current')
deployProvIfCapTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 35), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTcmCLevel.setStatus('current')
deployProvIfCapSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 36), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOduTcmC.setStatus('current')
deployProvIfCapSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 37), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOduTcmC.setStatus('current')
deployProvIfCapDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 38), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapDisparityCorrection.setStatus('current')
deployProvIfCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 39), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapIpAddr.setStatus('current')
deployProvIfCapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 40), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapIpMask.setStatus('current')
deployProvIfCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 41), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOspf.setStatus('current')
deployProvIfCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 42), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapMetric.setStatus('current')
deployProvIfCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 43), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAreaId.setStatus('current')
deployProvIfCapTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 44), SonetTraceFormCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceFormSonetSection.setStatus('current')
deployProvIfCapTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedSonetSection.setStatus('current')
deployProvIfCapTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSonetSection.setStatus('current')
deployProvIfCapTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 47), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeSonetSection.setStatus('current')
deployProvIfCapTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOtu.setStatus('current')
deployProvIfCapTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOtu.setStatus('current')
deployProvIfCapTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOtu.setStatus('current')
deployProvIfCapTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOtu.setStatus('current')
deployProvIfCapTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 52), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeOtu.setStatus('current')
deployProvIfCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOdu.setStatus('current')
deployProvIfCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOdu.setStatus('current')
deployProvIfCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOdu.setStatus('current')
deployProvIfCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOdu.setStatus('current')
deployProvIfCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 57), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeOdu.setStatus('current')
deployProvIfCapTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOduTcmA.setStatus('current')
deployProvIfCapTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOduTcmA.setStatus('current')
deployProvIfCapTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOduTcmA.setStatus('current')
deployProvIfCapTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOduTcmA.setStatus('current')
deployProvIfCapTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 62), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeOduTcmA.setStatus('current')
deployProvIfCapTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOduTcmB.setStatus('current')
deployProvIfCapTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOduTcmB.setStatus('current')
deployProvIfCapTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOduTcmB.setStatus('current')
deployProvIfCapTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOduTcmB.setStatus('current')
deployProvIfCapTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 67), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeOduTcmB.setStatus('current')
deployProvIfCapTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOduTcmC.setStatus('current')
deployProvIfCapTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOduTcmC.setStatus('current')
deployProvIfCapTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOduTcmC.setStatus('current')
deployProvIfCapTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOduTcmC.setStatus('current')
deployProvIfCapTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 72), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeOduTcmC.setStatus('current')
deployProvIfCapChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 73), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapChannelProvisioning.setStatus('current')
deployProvIfCapVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 74), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapVariableGain.setStatus('current')
deployProvIfCapBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 75), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapBand.setStatus('current')
deployProvIfCapSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 76), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThreshold.setStatus('current')
deployProvIfCapSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 77), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodIntegration.setStatus('current')
deployProvIfCapVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 78), FspR7VoaModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapVoaMode.setStatus('current')
deployProvIfCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 79), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOpticalSetPoint.setStatus('current')
deployProvIfCapVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 80), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapVoaSetpoint.setStatus('current')
deployProvIfCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLanAid.setStatus('current')
deployProvIfCapAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 82), FspR7Unsigned32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAprHighThreshold.setStatus('current')
deployProvIfCapPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 83), FspR7Integer32Caps()).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPumpPower.setStatus('current')
deployProvIfCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 84), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapIpType.setStatus('current')
deployProvIfCapWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 85), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapWdmRxChannel.setStatus('current')
deployProvIfCapSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 86), FspR7BERThresholdSectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSonetSection.setStatus('current')
deployProvIfCapSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 87), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSdhSection.setStatus('current')
deployProvIfCapSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 88), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodSdhSection.setStatus('current')
deployProvIfCapDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 89), FspR7DispersionModesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapDispersionMode.setStatus('current')
deployProvIfCapDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 90), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapDispersionSetting.setStatus('current')
deployProvIfCapOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 91), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOffset.setStatus('current')
deployProvIfCapFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 92), FspR7InterfaceFunctionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapFunction.setStatus('current')
deployProvIfCapPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 93), FspR7PortModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPortMode.setStatus('current')
deployProvIfCapPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 94), FspR7PortRoleCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPortRole.setStatus('current')
deployProvIfCapUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 95), FspR7UntaggedFramesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapUtag.setStatus('current')
deployProvIfCapPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 96), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPvid.setStatus('current')
deployProvIfCapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 97), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPriority.setStatus('current')
deployProvIfCapStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapStagType.setStatus('current')
deployProvIfCapCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 99), FspR7L2CacEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapCac.setStatus('current')
deployProvIfCapMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 100), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapMaxFrameSize.setStatus('current')
deployProvIfCapVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapVethAid.setStatus('current')
deployProvIfCapLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 102), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLagPrio.setStatus('current')
deployProvIfCapLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 103), FspR7LagPortTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLagPortType.setStatus('current')
deployProvIfCapLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 104), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLagActivePorts.setStatus('current')
deployProvIfCapLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 105), FspR7LacpModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLacpMode.setStatus('current')
deployProvIfCapLagLoadBallanceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 106), FspR7LagLoadBallanceSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLagLoadBallanceSource.setStatus('current')
deployProvIfCapLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 107), FspR7LacpTimeoutCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLacpTimeout.setStatus('current')
deployProvIfCapFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 108), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapFarEndCommunication.setStatus('current')
deployProvIfCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 109), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapEqlzAdmin.setStatus('current')
deployProvIfCapTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 110), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTxOffDelay.setStatus('current')
deployProvIfCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 111), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOpuPayloadType.setStatus('current')
deployProvIfCapOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 112), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOscOpticalSetpoint.setStatus('current')
deployProvIfCapFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 113), FspR7FiberBrandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapFiberBrand.setStatus('current')
deployProvIfCapTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 114), FspR7TiltSetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTiltSet.setStatus('current')
deployProvIfCapXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 115), FspR7XfpDecisionThresCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapXfpDecisionThres.setStatus('current')
deployProvIfCapAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 116), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAutoPTassignment.setStatus('current')
deployProvIfCapTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 117), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTributarySlotMethod.setStatus('current')
deployProvIfCapOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 118), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOduTribPortNo.setStatus('current')
deployProvIfCapOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 119), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOduTribTimeSlottNo.setStatus('current')
deployProvIfCapRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 120), ApsRevertModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapRevertiveMode.setStatus('current')
deployProvIfCapBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 125), FspR7BipCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapBip.setStatus('current')
deployProvIfDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3), )
if mibBuilder.loadTexts: deployProvIfDefaultsTable.setStatus('current')
deployProvIfDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvIfDefaultsEntry.setStatus('current')
deployProvIfDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsRowStatus.setStatus('current')
deployProvIfDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsForceDestroy.setStatus('current')
deployProvIfDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsType.setStatus('current')
deployProvIfDefaultsPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 4), OtnPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPayload.setStatus('current')
deployProvIfDefaultsBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 5), FspR7PortBehaviour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsBehaviour.setStatus('current')
deployProvIfDefaultsTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 6), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTerminationLevel.setStatus('current')
deployProvIfDefaultsAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 7), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAlsMode.setStatus('current')
deployProvIfDefaultsErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 8), FspR7ErrorFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsErrorForwarding.setStatus('current')
deployProvIfDefaultsLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLaserOffDelayFunction.setStatus('current')
deployProvIfDefaultsFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 10), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsFecType.setStatus('current')
deployProvIfDefaultsTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 11), SonetTimingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimingSource.setStatus('current')
deployProvIfDefaultsTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 12), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTcmALevel.setStatus('current')
deployProvIfDefaultsTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 13), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTcmBLevel.setStatus('current')
deployProvIfDefaultsSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 14), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSonetLine.setStatus('current')
deployProvIfDefaultsSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSdhMs.setStatus('current')
deployProvIfDefaultsSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSignalDegradePeriod.setStatus('current')
deployProvIfDefaultsAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 17), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAutonegotiation.setStatus('current')
deployProvIfDefaultsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 18), FspR7Bitrate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsBitrate.setStatus('current')
deployProvIfDefaultsDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 19), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsDuplex.setStatus('current')
deployProvIfDefaultsFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 20), FspR7FlowControlMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsFlowControl.setStatus('current')
deployProvIfDefaultsOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 21), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOtnStuffing.setStatus('current')
deployProvIfDefaultsSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOtu.setStatus('current')
deployProvIfDefaultsSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOtu.setStatus('current')
deployProvIfDefaultsSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOdu.setStatus('current')
deployProvIfDefaultsSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOdu.setStatus('current')
deployProvIfDefaultsSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOduTcmA.setStatus('current')
deployProvIfDefaultsSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 27), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOduTcmA.setStatus('current')
deployProvIfDefaultsSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOduTcmB.setStatus('current')
deployProvIfDefaultsSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOduTcmB.setStatus('current')
deployProvIfDefaultsTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTilt.setStatus('current')
deployProvIfDefaultsGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 31), FspR7Gain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsGain.setStatus('current')
deployProvIfDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 32), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAdmin.setStatus('current')
deployProvIfDefaultsAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 33), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAttenuationGradient.setStatus('current')
deployProvIfDefaultsSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 34), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresReceiver.setStatus('current')
deployProvIfDefaultsTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 35), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTcmCLevel.setStatus('current')
deployProvIfDefaultsSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOduTcmC.setStatus('current')
deployProvIfDefaultsSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 37), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOduTcmC.setStatus('current')
deployProvIfDefaultsDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 38), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsDisparityCorrection.setStatus('current')
deployProvIfDefaultsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsIpAddr.setStatus('current')
deployProvIfDefaultsIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsIpMask.setStatus('current')
deployProvIfDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 41), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOspf.setStatus('current')
deployProvIfDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsMetric.setStatus('current')
deployProvIfDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 43), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAreaId.setStatus('current')
deployProvIfDefaultsTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 44), SonetTraceForm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceFormSonetSection.setStatus('current')
deployProvIfDefaultsTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedSonetSection.setStatus('current')
deployProvIfDefaultsTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSonetSection.setStatus('current')
deployProvIfDefaultsTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 47), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeSonetSection.setStatus('current')
deployProvIfDefaultsTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOtu.setStatus('current')
deployProvIfDefaultsTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOtu.setStatus('current')
deployProvIfDefaultsTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOtu.setStatus('current')
deployProvIfDefaultsTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOtu.setStatus('current')
deployProvIfDefaultsTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 52), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOtu.setStatus('current')
deployProvIfDefaultsTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOdu.setStatus('current')
deployProvIfDefaultsTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOdu.setStatus('current')
deployProvIfDefaultsTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOdu.setStatus('current')
deployProvIfDefaultsTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 56), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOdu.setStatus('current')
deployProvIfDefaultsTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 57), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOdu.setStatus('current')
deployProvIfDefaultsTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 58), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOduTcmA.setStatus('current')
deployProvIfDefaultsTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOduTcmA.setStatus('current')
deployProvIfDefaultsTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOduTcmA.setStatus('current')
deployProvIfDefaultsTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOduTcmA.setStatus('current')
deployProvIfDefaultsTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 62), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOduTcmA.setStatus('current')
deployProvIfDefaultsTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOduTcmB.setStatus('current')
deployProvIfDefaultsTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOduTcmB.setStatus('current')
deployProvIfDefaultsTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOduTcmB.setStatus('current')
deployProvIfDefaultsTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOduTcmB.setStatus('current')
deployProvIfDefaultsTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 67), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOduTcmB.setStatus('current')
deployProvIfDefaultsTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOduTcmC.setStatus('current')
deployProvIfDefaultsTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOduTcmC.setStatus('current')
deployProvIfDefaultsTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOduTcmC.setStatus('current')
deployProvIfDefaultsTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOduTcmC.setStatus('current')
deployProvIfDefaultsTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 72), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOduTcmC.setStatus('current')
deployProvIfDefaultsChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 73), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsChannelProvisioning.setStatus('current')
deployProvIfDefaultsVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 74), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(50, 350), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsVariableGain.setStatus('current')
deployProvIfDefaultsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 75), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsBand.setStatus('current')
deployProvIfDefaultsSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 76), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10000), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThreshold.setStatus('current')
deployProvIfDefaultsSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 77), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodIntegration.setStatus('current')
deployProvIfDefaultsVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 78), FspR7VoaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsVoaMode.setStatus('current')
deployProvIfDefaultsOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOpticalSetPoint.setStatus('current')
deployProvIfDefaultsVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 80), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsVoaSetpoint.setStatus('current')
deployProvIfDefaultsLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 81), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLanAid.setStatus('current')
deployProvIfDefaultsAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 82), Unsigned32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAprHighThreshold.setStatus('current')
deployProvIfDefaultsPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(115, 138), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPumpPower.setStatus('current')
deployProvIfDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 84), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsIpType.setStatus('current')
deployProvIfDefaultsWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 85), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsWdmRxChannel.setStatus('current')
deployProvIfDefaultsSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 86), FspR7BERThresholdSection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSonetSection.setStatus('current')
deployProvIfDefaultsSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 87), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSdhSection.setStatus('current')
deployProvIfDefaultsSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 88), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodSdhSection.setStatus('current')
deployProvIfDefaultsDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 89), FspR7DispersionModes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsDispersionMode.setStatus('current')
deployProvIfDefaultsDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsDispersionSetting.setStatus('current')
deployProvIfDefaultsOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOffset.setStatus('current')
deployProvIfDefaultsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 92), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsFunction.setStatus('current')
deployProvIfDefaultsPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 93), FspR7PortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPortMode.setStatus('current')
deployProvIfDefaultsPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 94), FspR7PortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPortRole.setStatus('current')
deployProvIfDefaultsUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 95), FspR7UntaggedFrames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsUtag.setStatus('current')
deployProvIfDefaultsPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 96), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPvid.setStatus('current')
deployProvIfDefaultsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 97), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPriority.setStatus('current')
deployProvIfDefaultsStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 98), FspR7SnmpHexString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsStagType.setStatus('current')
deployProvIfDefaultsCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 99), FspR7L2CacEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsCac.setStatus('current')
deployProvIfDefaultsMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 100), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1518, 9600), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsMaxFrameSize.setStatus('current')
deployProvIfDefaultsVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 101), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsVethAid.setStatus('current')
deployProvIfDefaultsLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 102), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLagPrio.setStatus('current')
deployProvIfDefaultsLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 103), FspR7LagPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLagPortType.setStatus('current')
deployProvIfDefaultsLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 104), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLagActivePorts.setStatus('current')
deployProvIfDefaultsLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 105), FspR7LacpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLacpMode.setStatus('current')
deployProvIfDefaultsLagLoadBallanceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 106), FspR7LagLoadBallanceSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLagLoadBallanceSource.setStatus('current')
deployProvIfDefaultsLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 107), FspR7LacpTimeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLacpTimeout.setStatus('current')
deployProvIfDefaultsFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 108), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsFarEndCommunication.setStatus('current')
deployProvIfDefaultsEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 109), FspR7EqlzAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsEqlzAdmin.setStatus('current')
deployProvIfDefaultsTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 110), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTxOffDelay.setStatus('current')
deployProvIfDefaultsOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 111), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOpuPayloadType.setStatus('current')
deployProvIfDefaultsOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOscOpticalSetpoint.setStatus('current')
deployProvIfDefaultsFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 113), FspR7FiberBrand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsFiberBrand.setStatus('current')
deployProvIfDefaultsTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 114), FspR7TiltSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTiltSet.setStatus('current')
deployProvIfDefaultsXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 115), FspR7XfpDecisionThres()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsXfpDecisionThres.setStatus('current')
deployProvIfDefaultsAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 116), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAutoPTassignment.setStatus('current')
deployProvIfDefaultsTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 117), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTributarySlotMethod.setStatus('current')
deployProvIfDefaultsOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 118), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOduTribPortNo.setStatus('current')
deployProvIfDefaultsOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 119), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOduTribTimeSlottNo.setStatus('current')
deployProvIfDefaultsRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 120), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsRevertiveMode.setStatus('current')
deployProvIfDefaultsBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 125), FspR7Bip()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsBip.setStatus('current')
deployProvVchChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4), )
if mibBuilder.loadTexts: deployProvVchChannelTable.setStatus('current')
deployProvVchChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVchChannelEntry.setStatus('current')
deployProvVchChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelRowStatus.setStatus('current')
deployProvVchChannelForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelForceDestroy.setStatus('current')
deployProvVchChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelType.setStatus('current')
deployProvVchChannelVcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 4), VirtualContainerType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelVcgType.setStatus('current')
deployProvVchChannelBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 5), SonetVcBundleAllocation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelBundle.setStatus('current')
deployProvVchChannelCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 6), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelCir.setStatus('current')
deployProvVchChannelAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 7), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelAdmin.setStatus('current')
deployProvVchChannelSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelSigDegThresOdu.setStatus('current')
deployProvVchChannelSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelSigDegPeriodOdu.setStatus('current')
deployProvVchChannelTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelTraceExpectedOdu.setStatus('current')
deployProvVchChannelTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelTraceTransmitSapiOdu.setStatus('current')
deployProvVchChannelTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelTraceTransmitDapiOdu.setStatus('current')
deployProvVchChannelTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelTraceTransmitOpspOdu.setStatus('current')
deployProvVchChannelTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 14), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelTimModeOdu.setStatus('current')
deployProvVchChannelEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 15), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelEqlzAdmin.setStatus('current')
deployProvVchChannelCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5), )
if mibBuilder.loadTexts: deployProvVchChannelCapTable.setStatus('current')
deployProvVchChannelCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVchChannelCapEntry.setStatus('current')
deployProvVchChannelCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapRowStatus.setStatus('current')
deployProvVchChannelCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapForceDestroy.setStatus('current')
deployProvVchChannelCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapType.setStatus('current')
deployProvVchChannelCapVcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 4), VirtualContainerTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapVcgType.setStatus('current')
deployProvVchChannelCapBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 5), SonetVcBundleAllocationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapBundle.setStatus('current')
deployProvVchChannelCapCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 6), FspR7Unsigned32Caps()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapCir.setStatus('current')
deployProvVchChannelCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 7), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapAdmin.setStatus('current')
deployProvVchChannelCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 8), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapSigDegThresOdu.setStatus('current')
deployProvVchChannelCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 9), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapSigDegPeriodOdu.setStatus('current')
deployProvVchChannelCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapTraceExpectedOdu.setStatus('current')
deployProvVchChannelCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapTraceTransmitSapiOdu.setStatus('current')
deployProvVchChannelCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapTraceTransmitDapiOdu.setStatus('current')
deployProvVchChannelCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapTraceTransmitOpspOdu.setStatus('current')
deployProvVchChannelCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 14), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapTimModeOdu.setStatus('current')
deployProvVchChannelCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 15), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapEqlzAdmin.setStatus('current')
deployProvVchChannelDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6), )
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTable.setStatus('current')
deployProvVchChannelDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVchChannelDefaultsEntry.setStatus('current')
deployProvVchChannelDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsRowStatus.setStatus('current')
deployProvVchChannelDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsForceDestroy.setStatus('current')
deployProvVchChannelDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsType.setStatus('current')
deployProvVchChannelDefaultsVcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 4), VirtualContainerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsVcgType.setStatus('current')
deployProvVchChannelDefaultsBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 5), SonetVcBundleAllocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsBundle.setStatus('current')
deployProvVchChannelDefaultsCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 6), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsCir.setStatus('current')
deployProvVchChannelDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 7), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsAdmin.setStatus('current')
deployProvVchChannelDefaultsSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsSigDegThresOdu.setStatus('current')
deployProvVchChannelDefaultsSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsSigDegPeriodOdu.setStatus('current')
deployProvVchChannelDefaultsTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceExpectedOdu.setStatus('current')
deployProvVchChannelDefaultsTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceTransmitSapiOdu.setStatus('current')
deployProvVchChannelDefaultsTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceTransmitDapiOdu.setStatus('current')
deployProvVchChannelDefaultsTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceTransmitOpspOdu.setStatus('current')
deployProvVchChannelDefaultsTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 14), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTimModeOdu.setStatus('current')
deployProvVchChannelDefaultsEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 15), FspR7EqlzAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsEqlzAdmin.setStatus('current')
deployProvApsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7), )
if mibBuilder.loadTexts: deployProvApsTable.setStatus('current')
deployProvApsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvApsEntry.setStatus('current')
deployProvApsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsRowStatus.setStatus('current')
deployProvApsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsForceDestroy.setStatus('current')
deployProvApsSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 3), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsSDswitching.setStatus('current')
deployProvApsHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 4), ApsHoldoffTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsHoldOffTime.setStatus('current')
deployProvApsProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 5), ProtectionMech()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsProtectionMech.setStatus('current')
deployProvApsWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 6), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsWorkingAid.setStatus('current')
deployProvApsProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 7), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsProtectionAid.setStatus('current')
deployProvApsSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 8), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsSignalDegradeSwitching.setStatus('current')
deployProvApsSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 9), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsSignalFailureSwitching.setStatus('current')
deployProvApsFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsFarEndIp.setStatus('current')
deployProvApsPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 11), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsPeerAid.setStatus('current')
deployProvApsApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 12), ApsType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsApsType.setStatus('current')
deployProvApsRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 13), ApsRevertMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsRevertMode.setStatus('current')
deployProvApsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsWaitToRestore.setStatus('current')
deployProvApsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 15), ApsDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsDirection.setStatus('current')
deployProvApsCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8), )
if mibBuilder.loadTexts: deployProvApsCapTable.setStatus('current')
deployProvApsCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvApsCapEntry.setStatus('current')
deployProvApsCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapRowStatus.setStatus('current')
deployProvApsCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapForceDestroy.setStatus('current')
deployProvApsCapSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 3), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapSDswitching.setStatus('current')
deployProvApsCapHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 4), ApsHoldoffTimeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapHoldOffTime.setStatus('current')
deployProvApsCapProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 5), ProtectionMechCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapProtectionMech.setStatus('current')
deployProvApsCapWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapWorkingAid.setStatus('current')
deployProvApsCapProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapProtectionAid.setStatus('current')
deployProvApsCapSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 8), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapSignalDegradeSwitching.setStatus('current')
deployProvApsCapSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 9), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapSignalFailureSwitching.setStatus('current')
deployProvApsCapFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 10), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapFarEndIp.setStatus('current')
deployProvApsCapPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapPeerAid.setStatus('current')
deployProvApsCapApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 12), ApsTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapApsType.setStatus('current')
deployProvApsCapRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 13), ApsRevertModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapRevertMode.setStatus('current')
deployProvApsCapWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 14), FspR7Unsigned32Caps()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapWaitToRestore.setStatus('current')
deployProvApsCapDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 15), ApsDirectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapDirection.setStatus('current')
deployProvApsDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9), )
if mibBuilder.loadTexts: deployProvApsDefaultsTable.setStatus('current')
deployProvApsDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvApsDefaultsEntry.setStatus('current')
deployProvApsDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsRowStatus.setStatus('current')
deployProvApsDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsForceDestroy.setStatus('current')
deployProvApsDefaultsSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 3), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsSDswitching.setStatus('current')
deployProvApsDefaultsHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 4), ApsHoldoffTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsHoldOffTime.setStatus('current')
deployProvApsDefaultsProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 5), ProtectionMech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsProtectionMech.setStatus('current')
deployProvApsDefaultsWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsWorkingAid.setStatus('current')
deployProvApsDefaultsProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 7), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsProtectionAid.setStatus('current')
deployProvApsDefaultsSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 8), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsSignalDegradeSwitching.setStatus('current')
deployProvApsDefaultsSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsSignalFailureSwitching.setStatus('current')
deployProvApsDefaultsFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsFarEndIp.setStatus('current')
deployProvApsDefaultsPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsPeerAid.setStatus('current')
deployProvApsDefaultsApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 12), ApsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsApsType.setStatus('current')
deployProvApsDefaultsRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 13), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsRevertMode.setStatus('current')
deployProvApsDefaultsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsWaitToRestore.setStatus('current')
deployProvApsDefaultsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 15), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsDirection.setStatus('current')
deployProvApsWorkingAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 10), )
if mibBuilder.loadTexts: deployProvApsWorkingAidCapsTable.setStatus('current')
deployProvApsWorkingAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsWorkingAidCapsIndex"))
if mibBuilder.loadTexts: deployProvApsWorkingAidCapsEntry.setStatus('current')
deployProvApsWorkingAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 10, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsWorkingAidCapsIndex.setStatus('current')
deployProvApsProtectingAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 11), )
if mibBuilder.loadTexts: deployProvApsProtectingAidCapsTable.setStatus('current')
deployProvApsProtectingAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsProtectingAidCapsIndex"))
if mibBuilder.loadTexts: deployProvApsProtectingAidCapsEntry.setStatus('current')
deployProvApsProtectingAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 11, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsProtectingAidCapsIndex.setStatus('current')
deployProvDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12), )
if mibBuilder.loadTexts: deployProvDcnTable.setStatus('current')
deployProvDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvDcnEntry.setStatus('current')
deployProvDcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnRowStatus.setStatus('current')
deployProvDcnForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnForceDestroy.setStatus('current')
deployProvDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnType.setStatus('current')
deployProvDcnAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 4), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnAdmin.setStatus('current')
deployProvDcnExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnExternalVid.setStatus('current')
deployProvDcnLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 6), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnLanAid.setStatus('current')
deployProvDcnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13), )
if mibBuilder.loadTexts: deployProvDcnCapTable.setStatus('current')
deployProvDcnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvDcnCapEntry.setStatus('current')
deployProvDcnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapRowStatus.setStatus('current')
deployProvDcnCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapForceDestroy.setStatus('current')
deployProvDcnCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapType.setStatus('current')
deployProvDcnCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 4), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapAdmin.setStatus('current')
deployProvDcnCapExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapExternalVid.setStatus('current')
deployProvDcnCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapLanAid.setStatus('current')
deployProvDcnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14), )
if mibBuilder.loadTexts: deployProvDcnDefaultsTable.setStatus('current')
deployProvDcnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvDcnDefaultsEntry.setStatus('current')
deployProvDcnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsRowStatus.setStatus('current')
deployProvDcnDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsForceDestroy.setStatus('current')
deployProvDcnDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsType.setStatus('current')
deployProvDcnDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 4), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsAdmin.setStatus('current')
deployProvDcnDefaultsExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsExternalVid.setStatus('current')
deployProvDcnDefaultsLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsLanAid.setStatus('current')
deployProvPppIpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15), )
if mibBuilder.loadTexts: deployProvPppIpTable.setStatus('current')
deployProvPppIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPppIpEntry.setStatus('current')
deployProvPppIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpRowStatus.setStatus('current')
deployProvPppIpForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpForceDestroy.setStatus('current')
deployProvPppIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpType.setStatus('current')
deployProvPppIpNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpNearEndIp.setStatus('current')
deployProvPppIpFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpFarEndIp.setStatus('current')
deployProvPppIpBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1312), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('kbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpBitrate.setStatus('current')
deployProvPppIpOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 7), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpOspf.setStatus('current')
deployProvPppIpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpMetric.setStatus('current')
deployProvPppIpDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpDefaultGateway.setStatus('deprecated')
deployProvPppIpProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 10), FspR7NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpProxyArp.setStatus('current')
deployProvPppIpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 11), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpAdmin.setStatus('current')
deployProvPppIpAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpAreaId.setStatus('current')
deployProvPppIpBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 13), FspR7Baund()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpBaud.setStatus('current')
deployProvPppIpFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 14), FspR7FlowControlMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpFlowControl.setStatus('current')
deployProvPppIpIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 15), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpIpType.setStatus('current')
deployProvPppIpCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16), )
if mibBuilder.loadTexts: deployProvPppIpCapTable.setStatus('current')
deployProvPppIpCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPppIpCapEntry.setStatus('current')
deployProvPppIpCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapRowStatus.setStatus('current')
deployProvPppIpCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapForceDestroy.setStatus('current')
deployProvPppIpCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapType.setStatus('current')
deployProvPppIpCapNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 4), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapNearEndIp.setStatus('current')
deployProvPppIpCapFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapFarEndIp.setStatus('current')
deployProvPppIpCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 6), FspR7Unsigned32Caps()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapBitrate.setStatus('current')
deployProvPppIpCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 7), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapOspf.setStatus('current')
deployProvPppIpCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapMetric.setStatus('current')
deployProvPppIpCapDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 9), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapDefaultGateway.setStatus('deprecated')
deployProvPppIpCapProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 10), FspR7NoYesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapProxyArp.setStatus('current')
deployProvPppIpCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 11), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapAdmin.setStatus('current')
deployProvPppIpCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 12), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapAreaId.setStatus('current')
deployProvPppIpCapBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 13), FspR7BaundCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapBaud.setStatus('current')
deployProvPppIpCapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 14), FspR7FlowControlModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapFlowControl.setStatus('current')
deployProvPppIpCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 15), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapIpType.setStatus('current')
deployProvPppIpDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17), )
if mibBuilder.loadTexts: deployProvPppIpDefaultsTable.setStatus('current')
deployProvPppIpDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPppIpDefaultsEntry.setStatus('current')
deployProvPppIpDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsRowStatus.setStatus('current')
deployProvPppIpDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsForceDestroy.setStatus('current')
deployProvPppIpDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsType.setStatus('current')
deployProvPppIpDefaultsNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsNearEndIp.setStatus('current')
deployProvPppIpDefaultsFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsFarEndIp.setStatus('current')
deployProvPppIpDefaultsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1312), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsBitrate.setStatus('current')
deployProvPppIpDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 7), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsOspf.setStatus('current')
deployProvPppIpDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsMetric.setStatus('current')
deployProvPppIpDefaultsDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsDefaultGateway.setStatus('deprecated')
deployProvPppIpDefaultsProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 10), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsProxyArp.setStatus('current')
deployProvPppIpDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 11), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsAdmin.setStatus('current')
deployProvPppIpDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsAreaId.setStatus('current')
deployProvPppIpDefaultsBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 13), FspR7Baund()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsBaud.setStatus('current')
deployProvPppIpDefaultsFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 14), FspR7FlowControlMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsFlowControl.setStatus('current')
deployProvPppIpDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 15), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsIpType.setStatus('current')
deployProvCrsDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18), )
if mibBuilder.loadTexts: deployProvCrsDcnTable.setStatus('current')
deployProvCrsDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvCrsDcnEntry.setStatus('current')
deployProvCrsDcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCrsDcnRowStatus.setStatus('current')
deployProvCrsDcnForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCrsDcnForceDestroy.setStatus('current')
deployProvCrsDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1, 3), FspR7TypeConnection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCrsDcnType.setStatus('current')
deployProvCrsDcnLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1, 4), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCrsDcnLink.setStatus('current')
deployProvCrsDcnEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1, 5), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCrsDcnEcc.setStatus('current')
deployProvCrsDcnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19), )
if mibBuilder.loadTexts: deployProvCrsDcnCapTable.setStatus('current')
deployProvCrsDcnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvCrsDcnCapEntry.setStatus('current')
deployProvCrsDcnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnCapRowStatus.setStatus('current')
deployProvCrsDcnCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnCapForceDestroy.setStatus('current')
deployProvCrsDcnCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1, 3), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnCapType.setStatus('current')
deployProvCrsDcnCapLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnCapLink.setStatus('current')
deployProvCrsDcnCapEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnCapEcc.setStatus('current')
deployProvCrsDcnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20), )
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsTable.setStatus('current')
deployProvCrsDcnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsEntry.setStatus('current')
deployProvCrsDcnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsRowStatus.setStatus('current')
deployProvCrsDcnDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsForceDestroy.setStatus('current')
deployProvCrsDcnDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1, 3), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsType.setStatus('current')
deployProvCrsDcnDefaultsLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsLink.setStatus('current')
deployProvCrsDcnDefaultsEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1, 5), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsEcc.setStatus('current')
deployProvCrsDcnLinkAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 21), )
if mibBuilder.loadTexts: deployProvCrsDcnLinkAidCapsTable.setStatus('current')
deployProvCrsDcnLinkAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 21, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvCrsDcnLinkAidCapsIndex"))
if mibBuilder.loadTexts: deployProvCrsDcnLinkAidCapsEntry.setStatus('current')
deployProvCrsDcnLinkAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 21, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnLinkAidCapsIndex.setStatus('current')
deployProvCrsDcnEccAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 22), )
if mibBuilder.loadTexts: deployProvCrsDcnEccAidCapsTable.setStatus('current')
deployProvCrsDcnEccAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 22, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvCrsDcnLinkAidCapsIndex"))
if mibBuilder.loadTexts: deployProvCrsDcnEccAidCapsEntry.setStatus('current')
deployProvCrsDcnEccAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 22, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnEccAidCapsIndex.setStatus('current')
deployProvApsPeerAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 23), )
if mibBuilder.loadTexts: deployProvApsPeerAidCapsTable.setStatus('current')
deployProvApsPeerAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 23, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsWorkingAidCapsIndex"))
if mibBuilder.loadTexts: deployProvApsPeerAidCapsEntry.setStatus('current')
deployProvApsPeerAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 23, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsPeerAidCapsIndex.setStatus('current')
deployProvLanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24), )
if mibBuilder.loadTexts: deployProvLanTable.setStatus('current')
deployProvLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLanEntry.setStatus('current')
deployProvLanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanRowStatus.setStatus('current')
deployProvLanForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanForceDestroy.setStatus('current')
deployProvLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanType.setStatus('current')
deployProvLanOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 4), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanOspf.setStatus('current')
deployProvLanMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanMetric.setStatus('current')
deployProvLanAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 6), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanAdmin.setStatus('current')
deployProvLanAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanAreaId.setStatus('current')
deployProvLanIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 8), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanIpType.setStatus('current')
deployProvLanIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanIpAddr.setStatus('current')
deployProvLanIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanIpMask.setStatus('current')
deployProvLanCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25), )
if mibBuilder.loadTexts: deployProvLanCapTable.setStatus('current')
deployProvLanCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLanCapEntry.setStatus('current')
deployProvLanCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapRowStatus.setStatus('current')
deployProvLanCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapForceDestroy.setStatus('current')
deployProvLanCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapType.setStatus('current')
deployProvLanCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 4), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapOspf.setStatus('current')
deployProvLanCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 5), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapMetric.setStatus('current')
deployProvLanCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 6), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapAdmin.setStatus('current')
deployProvLanCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapAreaId.setStatus('current')
deployProvLanCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 8), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapIpType.setStatus('current')
deployProvLanCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 9), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapIpAddr.setStatus('current')
deployProvLanCapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 10), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapIpMask.setStatus('current')
deployProvLanDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26), )
if mibBuilder.loadTexts: deployProvLanDefaultsTable.setStatus('current')
deployProvLanDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLanDefaultsEntry.setStatus('current')
deployProvLanDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsRowStatus.setStatus('current')
deployProvLanDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsForceDestroy.setStatus('current')
deployProvLanDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsType.setStatus('current')
deployProvLanDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 4), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsOspf.setStatus('current')
deployProvLanDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsMetric.setStatus('current')
deployProvLanDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 6), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsAdmin.setStatus('current')
deployProvLanDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsAreaId.setStatus('current')
deployProvLanDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 8), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsIpType.setStatus('current')
deployProvLanDefaultsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsIpAddr.setStatus('current')
deployProvLanDefaultsIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsIpMask.setStatus('current')
deployProvModuleLanAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 27), )
if mibBuilder.loadTexts: deployProvModuleLanAidCapsTable.setStatus('current')
deployProvModuleLanAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 27, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvModuleLanAidCapsIndex"))
if mibBuilder.loadTexts: deployProvModuleLanAidCapsEntry.setStatus('current')
deployProvModuleLanAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 27, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleLanAidCapsIndex.setStatus('current')
deployProvTifInputTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28), )
if mibBuilder.loadTexts: deployProvTifInputTable.setStatus('current')
deployProvTifInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifInputEntry.setStatus('current')
deployProvTifInputRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputRowStatus.setStatus('current')
deployProvTifInputForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputForceDestroy.setStatus('current')
deployProvTifInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputType.setStatus('current')
deployProvTifInputTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputTifAlarmType.setStatus('current')
deployProvTifInputTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputTifAlarmMessage.setStatus('current')
deployProvTifInputInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 6), FspR7InvertTelemetryInputLogic()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputInvertTifInputLogic.setStatus('current')
deployProvTifInputAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 7), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputAdmin.setStatus('current')
deployProvTifInputCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29), )
if mibBuilder.loadTexts: deployProvTifInputCapTable.setStatus('current')
deployProvTifInputCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifInputCapEntry.setStatus('current')
deployProvTifInputCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapRowStatus.setStatus('current')
deployProvTifInputCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapForceDestroy.setStatus('current')
deployProvTifInputCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapType.setStatus('current')
deployProvTifInputCapTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapTifAlarmType.setStatus('current')
deployProvTifInputCapTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapTifAlarmMessage.setStatus('current')
deployProvTifInputCapInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 6), FspR7InvertTelemetryInputLogicCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapInvertTifInputLogic.setStatus('current')
deployProvTifInputCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 7), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapAdmin.setStatus('current')
deployProvTifInputDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30), )
if mibBuilder.loadTexts: deployProvTifInputDefaultsTable.setStatus('current')
deployProvTifInputDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifInputDefaultsEntry.setStatus('current')
deployProvTifInputDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsRowStatus.setStatus('current')
deployProvTifInputDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsForceDestroy.setStatus('current')
deployProvTifInputDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsType.setStatus('current')
deployProvTifInputDefaultsTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsTifAlarmType.setStatus('current')
deployProvTifInputDefaultsTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsTifAlarmMessage.setStatus('current')
deployProvTifInputDefaultsInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 6), FspR7InvertTelemetryInputLogic()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsInvertTifInputLogic.setStatus('current')
deployProvTifInputDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 7), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsAdmin.setStatus('current')
deployProvTifOutputTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31), )
if mibBuilder.loadTexts: deployProvTifOutputTable.setStatus('current')
deployProvTifOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifOutputEntry.setStatus('current')
deployProvTifOutputRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifOutputRowStatus.setStatus('current')
deployProvTifOutputForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifOutputForceDestroy.setStatus('current')
deployProvTifOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifOutputType.setStatus('current')
deployProvTifOutputTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1, 4), FspR7TelemetryOutput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifOutputTelemetry.setStatus('current')
deployProvTifOutputAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1, 5), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifOutputAdmin.setStatus('current')
deployProvTifOutputCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32), )
if mibBuilder.loadTexts: deployProvTifOutputCapTable.setStatus('current')
deployProvTifOutputCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifOutputCapEntry.setStatus('current')
deployProvTifOutputCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputCapRowStatus.setStatus('current')
deployProvTifOutputCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputCapForceDestroy.setStatus('current')
deployProvTifOutputCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputCapType.setStatus('current')
deployProvTifOutputCapTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1, 4), FspR7TelemetryOutputCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputCapTelemetry.setStatus('current')
deployProvTifOutputCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1, 5), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputCapAdmin.setStatus('current')
deployProvTifOutputDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33), )
if mibBuilder.loadTexts: deployProvTifOutputDefaultsTable.setStatus('current')
deployProvTifOutputDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifOutputDefaultsEntry.setStatus('current')
deployProvTifOutputDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputDefaultsRowStatus.setStatus('current')
deployProvTifOutputDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputDefaultsForceDestroy.setStatus('current')
deployProvTifOutputDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputDefaultsType.setStatus('current')
deployProvTifOutputDefaultsTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1, 4), FspR7TelemetryOutput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputDefaultsTelemetry.setStatus('current')
deployProvTifOutputDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1, 5), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputDefaultsAdmin.setStatus('current')
changeServiceDeployProvIfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40), )
if mibBuilder.loadTexts: changeServiceDeployProvIfTable.setStatus('current')
changeServiceDeployProvIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: changeServiceDeployProvIfEntry.setStatus('current')
changeServiceDeployProvIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfRowStatus.setStatus('current')
changeServiceDeployProvIfForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfForceDestroy.setStatus('current')
changeServiceDeployProvIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfType.setStatus('current')
changeServiceDeployProvIfPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 4), OtnPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfPayload.setStatus('current')
changeServiceDeployProvIfBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 5), FspR7PortBehaviour()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfBehaviour.setStatus('current')
changeServiceDeployProvIfTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 6), OhTerminationLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTerminationLevel.setStatus('current')
changeServiceDeployProvIfAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 7), FspR7AlsMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAlsMode.setStatus('current')
changeServiceDeployProvIfErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 8), FspR7ErrorFwdMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfErrorForwarding.setStatus('current')
changeServiceDeployProvIfLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 9), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfLaserOffDelayFunction.setStatus('current')
changeServiceDeployProvIfFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 10), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfFecType.setStatus('current')
changeServiceDeployProvIfTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 11), SonetTimingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimingSource.setStatus('current')
changeServiceDeployProvIfTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 12), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTcmALevel.setStatus('current')
changeServiceDeployProvIfTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 13), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTcmBLevel.setStatus('current')
changeServiceDeployProvIfSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 14), FspR7BERThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSonetLine.setStatus('current')
changeServiceDeployProvIfSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSdhMs.setStatus('current')
changeServiceDeployProvIfSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSignalDegradePeriod.setStatus('current')
changeServiceDeployProvIfAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 17), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAutonegotiation.setStatus('current')
changeServiceDeployProvIfBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 18), FspR7Bitrate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfBitrate.setStatus('current')
changeServiceDeployProvIfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 19), EthDuplexMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfDuplex.setStatus('current')
changeServiceDeployProvIfFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 20), FspR7FlowControlMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfFlowControl.setStatus('current')
changeServiceDeployProvIfOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 21), FspR7Stuff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOtnStuffing.setStatus('current')
changeServiceDeployProvIfSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOtu.setStatus('current')
changeServiceDeployProvIfSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOtu.setStatus('current')
changeServiceDeployProvIfSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOdu.setStatus('current')
changeServiceDeployProvIfSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOdu.setStatus('current')
changeServiceDeployProvIfSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOduTcmA.setStatus('current')
changeServiceDeployProvIfSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 27), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOduTcmA.setStatus('current')
changeServiceDeployProvIfSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOduTcmB.setStatus('current')
changeServiceDeployProvIfSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOduTcmB.setStatus('current')
changeServiceDeployProvIfTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTilt.setStatus('current')
changeServiceDeployProvIfGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 31), FspR7Gain()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfGain.setStatus('current')
changeServiceDeployProvIfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 32), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAdmin.setStatus('current')
changeServiceDeployProvIfAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 33), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB/min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAttenuationGradient.setStatus('current')
changeServiceDeployProvIfSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 34), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresReceiver.setStatus('current')
changeServiceDeployProvIfTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 35), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTcmCLevel.setStatus('current')
changeServiceDeployProvIfSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOduTcmC.setStatus('current')
changeServiceDeployProvIfSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 37), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOduTcmC.setStatus('current')
changeServiceDeployProvIfDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 38), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfDisparityCorrection.setStatus('current')
changeServiceDeployProvIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 39), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfIpAddr.setStatus('current')
changeServiceDeployProvIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 40), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfIpMask.setStatus('current')
changeServiceDeployProvIfOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 41), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOspf.setStatus('current')
changeServiceDeployProvIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfMetric.setStatus('current')
changeServiceDeployProvIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 43), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAreaId.setStatus('current')
changeServiceDeployProvIfTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 44), SonetTraceForm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceFormSonetSection.setStatus('current')
changeServiceDeployProvIfTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedSonetSection.setStatus('current')
changeServiceDeployProvIfTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSonetSection.setStatus('current')
changeServiceDeployProvIfTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 47), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeSonetSection.setStatus('current')
changeServiceDeployProvIfTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOtu.setStatus('current')
changeServiceDeployProvIfTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOtu.setStatus('current')
changeServiceDeployProvIfTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOtu.setStatus('current')
changeServiceDeployProvIfTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOtu.setStatus('current')
changeServiceDeployProvIfTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 52), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOtu.setStatus('current')
changeServiceDeployProvIfTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOdu.setStatus('current')
changeServiceDeployProvIfTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOdu.setStatus('current')
changeServiceDeployProvIfTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOdu.setStatus('current')
changeServiceDeployProvIfTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 56), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOdu.setStatus('current')
changeServiceDeployProvIfTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 57), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOdu.setStatus('current')
changeServiceDeployProvIfTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 58), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOduTcmA.setStatus('current')
changeServiceDeployProvIfTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOduTcmA.setStatus('current')
changeServiceDeployProvIfTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOduTcmA.setStatus('current')
changeServiceDeployProvIfTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOduTcmA.setStatus('current')
changeServiceDeployProvIfTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 62), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOduTcmA.setStatus('current')
changeServiceDeployProvIfTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOduTcmB.setStatus('current')
changeServiceDeployProvIfTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOduTcmB.setStatus('current')
changeServiceDeployProvIfTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOduTcmB.setStatus('current')
changeServiceDeployProvIfTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOduTcmB.setStatus('current')
changeServiceDeployProvIfTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 67), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOduTcmB.setStatus('current')
changeServiceDeployProvIfTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOduTcmC.setStatus('current')
changeServiceDeployProvIfTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOduTcmC.setStatus('current')
changeServiceDeployProvIfTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOduTcmC.setStatus('current')
changeServiceDeployProvIfTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOduTcmC.setStatus('current')
changeServiceDeployProvIfTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 72), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOduTcmC.setStatus('current')
changeServiceDeployProvIfChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 73), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfChannelProvisioning.setStatus('current')
changeServiceDeployProvIfVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 74), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(50, 350), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfVariableGain.setStatus('current')
changeServiceDeployProvIfBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 75), FspR7OpticalBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfBand.setStatus('current')
changeServiceDeployProvIfSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 76), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10000), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThreshold.setStatus('current')
changeServiceDeployProvIfSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 77), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodIntegration.setStatus('current')
changeServiceDeployProvIfVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 78), FspR7VoaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfVoaMode.setStatus('current')
changeServiceDeployProvIfOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOpticalSetPoint.setStatus('current')
changeServiceDeployProvIfVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 80), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfVoaSetpoint.setStatus('current')
changeServiceDeployProvIfLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 81), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAid.setStatus('current')
changeServiceDeployProvIfAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 82), Unsigned32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAprHighThreshold.setStatus('current')
changeServiceDeployProvIfPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(115, 138), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.2 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfPumpPower.setStatus('current')
changeServiceDeployProvIfWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 84), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfWdmRxChannel.setStatus('current')
changeServiceDeployProvIfSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 85), FspR7BERThresholdSection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSonetSection.setStatus('current')
changeServiceDeployProvIfSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 86), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSdhSection.setStatus('current')
changeServiceDeployProvIfSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 87), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodSdhSection.setStatus('current')
changeServiceDeployProvIfDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 88), FspR7DispersionModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfDispersionMode.setStatus('current')
changeServiceDeployProvIfDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfDispersionSetting.setStatus('current')
changeServiceDeployProvIfIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 90), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfIpType.setStatus('current')
changeServiceDeployProvIfOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOffset.setStatus('current')
changeServiceDeployProvIfFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 92), FspR7InterfaceFunction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfFunction.setStatus('current')
changeServiceDeployProvIfFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 93), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfFarEndCommunication.setStatus('current')
changeServiceDeployProvIfEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 94), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfEqlzAdmin.setStatus('current')
changeServiceDeployProvIfTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 95), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTxOffDelay.setStatus('current')
changeServiceDeployProvIfOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 96), FspR7OpuPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOpuPayloadType.setStatus('current')
changeServiceDeployProvIfOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOscOpticalSetpoint.setStatus('current')
changeServiceDeployProvIfFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 98), FspR7FiberBrand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfFiberBrand.setStatus('current')
changeServiceDeployProvIfXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 99), FspR7XfpDecisionThres()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfXfpDecisionThres.setStatus('current')
changeServiceDeployProvIfBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 104), FspR7Bip()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfBip.setStatus('current')
changeServiceDeployProvIfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41), )
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTable.setStatus('current')
changeServiceDeployProvIfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: changeServiceDeployProvIfCapEntry.setStatus('current')
changeServiceDeployProvIfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapRowStatus.setStatus('current')
changeServiceDeployProvIfCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapForceDestroy.setStatus('current')
changeServiceDeployProvIfCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapType.setStatus('current')
changeServiceDeployProvIfCapPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 4), OtnPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapPayload.setStatus('current')
changeServiceDeployProvIfCapBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 5), FspR7PortBehaviourCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBehaviour.setStatus('current')
changeServiceDeployProvIfCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 6), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTerminationLevel.setStatus('current')
changeServiceDeployProvIfCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 7), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAlsMode.setStatus('current')
changeServiceDeployProvIfCapErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 8), FspR7ErrorFwdModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapErrorForwarding.setStatus('current')
changeServiceDeployProvIfCapLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 9), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapLaserOffDelayFunction.setStatus('current')
changeServiceDeployProvIfCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 10), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFecType.setStatus('current')
changeServiceDeployProvIfCapTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 11), SonetTimingSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimingSource.setStatus('current')
changeServiceDeployProvIfCapTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 12), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTcmALevel.setStatus('current')
changeServiceDeployProvIfCapTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 13), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTcmBLevel.setStatus('current')
changeServiceDeployProvIfCapSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 14), FspR7BERThresholdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSonetLine.setStatus('current')
changeServiceDeployProvIfCapSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 15), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSdhMs.setStatus('current')
changeServiceDeployProvIfCapSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 16), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSignalDegradePeriod.setStatus('current')
changeServiceDeployProvIfCapAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 17), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAutonegotiation.setStatus('current')
changeServiceDeployProvIfCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 18), FspR7BitrateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBitrate.setStatus('current')
changeServiceDeployProvIfCapDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 19), EthDuplexModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDuplex.setStatus('current')
changeServiceDeployProvIfCapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 20), FspR7FlowControlModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFlowControl.setStatus('current')
changeServiceDeployProvIfCapOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 21), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOtnStuffing.setStatus('current')
changeServiceDeployProvIfCapSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 22), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOtu.setStatus('current')
changeServiceDeployProvIfCapSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 23), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOtu.setStatus('current')
changeServiceDeployProvIfCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 24), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOdu.setStatus('current')
changeServiceDeployProvIfCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 25), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOdu.setStatus('current')
changeServiceDeployProvIfCapSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 26), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOduTcmA.setStatus('current')
changeServiceDeployProvIfCapSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 27), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOduTcmA.setStatus('current')
changeServiceDeployProvIfCapSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 28), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOduTcmB.setStatus('current')
changeServiceDeployProvIfCapSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 29), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOduTcmB.setStatus('current')
changeServiceDeployProvIfCapTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 30), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTilt.setStatus('current')
changeServiceDeployProvIfCapGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 31), FspR7GainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapGain.setStatus('current')
changeServiceDeployProvIfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 32), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAdmin.setStatus('current')
changeServiceDeployProvIfCapAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 33), FspR7Unsigned32Caps()).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAttenuationGradient.setStatus('current')
changeServiceDeployProvIfCapSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 34), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresReceiver.setStatus('current')
changeServiceDeployProvIfCapTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 35), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTcmCLevel.setStatus('current')
changeServiceDeployProvIfCapSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 36), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOduTcmC.setStatus('current')
changeServiceDeployProvIfCapSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 37), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOduTcmC.setStatus('current')
changeServiceDeployProvIfCapDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 38), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDisparityCorrection.setStatus('current')
changeServiceDeployProvIfCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 39), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapIpAddr.setStatus('current')
changeServiceDeployProvIfCapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 40), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapIpMask.setStatus('current')
changeServiceDeployProvIfCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 41), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOspf.setStatus('current')
changeServiceDeployProvIfCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 42), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapMetric.setStatus('current')
changeServiceDeployProvIfCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 43), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAreaId.setStatus('current')
changeServiceDeployProvIfCapTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 44), SonetTraceFormCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceFormSonetSection.setStatus('current')
changeServiceDeployProvIfCapTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedSonetSection.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSonetSection.setStatus('current')
changeServiceDeployProvIfCapTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 47), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeSonetSection.setStatus('current')
changeServiceDeployProvIfCapTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOtu.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOtu.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOtu.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOtu.setStatus('current')
changeServiceDeployProvIfCapTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 52), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOtu.setStatus('current')
changeServiceDeployProvIfCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOdu.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOdu.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOdu.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOdu.setStatus('current')
changeServiceDeployProvIfCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 57), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOdu.setStatus('current')
changeServiceDeployProvIfCapTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOduTcmA.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOduTcmA.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOduTcmA.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOduTcmA.setStatus('current')
changeServiceDeployProvIfCapTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 62), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOduTcmA.setStatus('current')
changeServiceDeployProvIfCapTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOduTcmB.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOduTcmB.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOduTcmB.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOduTcmB.setStatus('current')
changeServiceDeployProvIfCapTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 67), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOduTcmB.setStatus('current')
changeServiceDeployProvIfCapTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOduTcmC.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOduTcmC.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOduTcmC.setStatus('current')
changeServiceDeployProvIfCapTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOduTcmC.setStatus('current')
changeServiceDeployProvIfCapTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 72), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOduTcmC.setStatus('current')
changeServiceDeployProvIfCapChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 73), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapChannelProvisioning.setStatus('current')
changeServiceDeployProvIfCapVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 74), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapVariableGain.setStatus('current')
changeServiceDeployProvIfCapBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 75), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBand.setStatus('current')
changeServiceDeployProvIfCapSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 76), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThreshold.setStatus('current')
changeServiceDeployProvIfCapSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 77), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodIntegration.setStatus('current')
changeServiceDeployProvIfCapVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 78), FspR7VoaModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapVoaMode.setStatus('current')
changeServiceDeployProvIfCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 79), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOpticalSetPoint.setStatus('current')
changeServiceDeployProvIfCapVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 80), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapVoaSetpoint.setStatus('current')
changeServiceDeployProvIfCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapLanAid.setStatus('current')
changeServiceDeployProvIfCapAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 82), FspR7Unsigned32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAprHighThreshold.setStatus('current')
changeServiceDeployProvIfCapPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 83), FspR7Integer32Caps()).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapPumpPower.setStatus('current')
changeServiceDeployProvIfCapWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 84), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapWdmRxChannel.setStatus('current')
changeServiceDeployProvIfCapSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 85), FspR7BERThresholdSectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSonetSection.setStatus('current')
changeServiceDeployProvIfCapSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 86), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSdhSection.setStatus('current')
changeServiceDeployProvIfCapSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 87), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodSdhSection.setStatus('current')
changeServiceDeployProvIfCapDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 88), FspR7DispersionModesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDispersionMode.setStatus('current')
changeServiceDeployProvIfCapDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 89), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDispersionSetting.setStatus('current')
changeServiceDeployProvIfCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 90), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapIpType.setStatus('current')
changeServiceDeployProvIfCapOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 91), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOffset.setStatus('current')
changeServiceDeployProvIfCapFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 92), FspR7InterfaceFunctionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFunction.setStatus('current')
changeServiceDeployProvIfCapFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 93), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFarEndCommunication.setStatus('current')
changeServiceDeployProvIfCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 94), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapEqlzAdmin.setStatus('current')
changeServiceDeployProvIfCapTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 95), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTxOffDelay.setStatus('current')
changeServiceDeployProvIfCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 96), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOpuPayloadType.setStatus('current')
changeServiceDeployProvIfCapOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 97), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOscOpticalSetpoint.setStatus('current')
changeServiceDeployProvIfCapFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 98), FspR7FiberBrandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFiberBrand.setStatus('current')
changeServiceDeployProvIfCapXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 99), FspR7XfpDecisionThresCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapXfpDecisionThres.setStatus('current')
changeServiceDeployProvIfCapBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 104), FspR7BipCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBip.setStatus('current')
changeServiceDeployProvIfDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42), )
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTable.setStatus('current')
changeServiceDeployProvIfDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsEntry.setStatus('current')
changeServiceDeployProvIfDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsRowStatus.setStatus('current')
changeServiceDeployProvIfDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsForceDestroy.setStatus('current')
changeServiceDeployProvIfDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsType.setStatus('current')
changeServiceDeployProvIfDefaultsPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 4), OtnPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsPayload.setStatus('current')
changeServiceDeployProvIfDefaultsBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 5), FspR7PortBehaviour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBehaviour.setStatus('current')
changeServiceDeployProvIfDefaultsTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 6), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTerminationLevel.setStatus('current')
changeServiceDeployProvIfDefaultsAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 7), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAlsMode.setStatus('current')
changeServiceDeployProvIfDefaultsErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 8), FspR7ErrorFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsErrorForwarding.setStatus('current')
changeServiceDeployProvIfDefaultsLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsLaserOffDelayFunction.setStatus('current')
changeServiceDeployProvIfDefaultsFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 10), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFecType.setStatus('current')
changeServiceDeployProvIfDefaultsTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 11), SonetTimingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimingSource.setStatus('current')
changeServiceDeployProvIfDefaultsTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 12), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTcmALevel.setStatus('current')
changeServiceDeployProvIfDefaultsTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 13), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTcmBLevel.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 14), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSonetLine.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSdhMs.setStatus('current')
changeServiceDeployProvIfDefaultsSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSignalDegradePeriod.setStatus('current')
changeServiceDeployProvIfDefaultsAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 17), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAutonegotiation.setStatus('current')
changeServiceDeployProvIfDefaultsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 18), FspR7Bitrate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBitrate.setStatus('current')
changeServiceDeployProvIfDefaultsDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 19), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDuplex.setStatus('current')
changeServiceDeployProvIfDefaultsFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 20), FspR7FlowControlMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFlowControl.setStatus('current')
changeServiceDeployProvIfDefaultsOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 21), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOtnStuffing.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOtu.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOtu.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOdu.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOdu.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOduTcmA.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 27), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmA.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOduTcmB.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmB.setStatus('current')
changeServiceDeployProvIfDefaultsTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTilt.setStatus('current')
changeServiceDeployProvIfDefaultsGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 31), FspR7Gain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsGain.setStatus('current')
changeServiceDeployProvIfDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 32), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAdmin.setStatus('current')
changeServiceDeployProvIfDefaultsAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 33), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAttenuationGradient.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 34), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresReceiver.setStatus('current')
changeServiceDeployProvIfDefaultsTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 35), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTcmCLevel.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOduTcmC.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 37), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmC.setStatus('current')
changeServiceDeployProvIfDefaultsDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 38), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDisparityCorrection.setStatus('current')
changeServiceDeployProvIfDefaultsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsIpAddr.setStatus('current')
changeServiceDeployProvIfDefaultsIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsIpMask.setStatus('current')
changeServiceDeployProvIfDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 41), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOspf.setStatus('current')
changeServiceDeployProvIfDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsMetric.setStatus('current')
changeServiceDeployProvIfDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 43), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAreaId.setStatus('current')
changeServiceDeployProvIfDefaultsTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 44), SonetTraceForm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceFormSonetSection.setStatus('current')
changeServiceDeployProvIfDefaultsTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedSonetSection.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSonetSection.setStatus('current')
changeServiceDeployProvIfDefaultsTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 47), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeSonetSection.setStatus('current')
changeServiceDeployProvIfDefaultsTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOtu.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOtu.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOtu.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOtu.setStatus('current')
changeServiceDeployProvIfDefaultsTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 52), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOtu.setStatus('current')
changeServiceDeployProvIfDefaultsTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOdu.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOdu.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOdu.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 56), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOdu.setStatus('current')
changeServiceDeployProvIfDefaultsTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 57), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOdu.setStatus('current')
changeServiceDeployProvIfDefaultsTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 58), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOduTcmA.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmA.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmA.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmA.setStatus('current')
changeServiceDeployProvIfDefaultsTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 62), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOduTcmA.setStatus('current')
changeServiceDeployProvIfDefaultsTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOduTcmB.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmB.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmB.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmB.setStatus('current')
changeServiceDeployProvIfDefaultsTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 67), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOduTcmB.setStatus('current')
changeServiceDeployProvIfDefaultsTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOduTcmC.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmC.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmC.setStatus('current')
changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmC.setStatus('current')
changeServiceDeployProvIfDefaultsTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 72), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOduTcmC.setStatus('current')
changeServiceDeployProvIfDefaultsChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 73), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsChannelProvisioning.setStatus('current')
changeServiceDeployProvIfDefaultsVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 74), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(50, 350), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsVariableGain.setStatus('current')
changeServiceDeployProvIfDefaultsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 75), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBand.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 76), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10000), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThreshold.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 77), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodIntegration.setStatus('current')
changeServiceDeployProvIfDefaultsVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 78), FspR7VoaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsVoaMode.setStatus('current')
changeServiceDeployProvIfDefaultsOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOpticalSetPoint.setStatus('current')
changeServiceDeployProvIfDefaultsVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 80), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsVoaSetpoint.setStatus('current')
changeServiceDeployProvIfDefaultsLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 81), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsLanAid.setStatus('current')
changeServiceDeployProvIfDefaultsAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 82), Unsigned32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAprHighThreshold.setStatus('current')
changeServiceDeployProvIfDefaultsPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(115, 138), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsPumpPower.setStatus('current')
changeServiceDeployProvIfDefaultsWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 84), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsWdmRxChannel.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 85), FspR7BERThresholdSection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSonetSection.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 86), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSdhSection.setStatus('current')
changeServiceDeployProvIfDefaultsSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 87), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodSdhSection.setStatus('current')
changeServiceDeployProvIfDefaultsDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 88), FspR7DispersionModes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDispersionMode.setStatus('current')
changeServiceDeployProvIfDefaultsDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDispersionSetting.setStatus('current')
changeServiceDeployProvIfDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 90), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsIpType.setStatus('current')
changeServiceDeployProvIfDefaultsOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOffset.setStatus('current')
changeServiceDeployProvIfDefaultsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 92), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFunction.setStatus('current')
changeServiceDeployProvIfDefaultsFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 93), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFarEndCommunication.setStatus('current')
changeServiceDeployProvIfDefaultsEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 94), FspR7EqlzAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsEqlzAdmin.setStatus('current')
changeServiceDeployProvIfDefaultsTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 95), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTxOffDelay.setStatus('current')
changeServiceDeployProvIfDefaultsOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 96), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOpuPayloadType.setStatus('current')
changeServiceDeployProvIfDefaultsOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOscOpticalSetpoint.setStatus('current')
changeServiceDeployProvIfDefaultsFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 98), FspR7FiberBrand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFiberBrand.setStatus('current')
changeServiceDeployProvIfDefaultsXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 99), FspR7XfpDecisionThres()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsXfpDecisionThres.setStatus('current')
changeServiceDeployProvIfDefaultsBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 104), FspR7Bip()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBip.setStatus('current')
deployProvOpticalLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43), )
if mibBuilder.loadTexts: deployProvOpticalLinkTable.setStatus('current')
deployProvOpticalLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvOpticalLinkEntry.setStatus('current')
deployProvOpticalLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvOpticalLinkRowStatus.setStatus('current')
deployProvOpticalLinkTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvOpticalLinkTxLineAttenuation.setStatus('current')
deployProvOpticalLinkRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvOpticalLinkRxLineAttenuation.setStatus('current')
deployProvOpticalLinkFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvOpticalLinkFarEndLocation.setStatus('current')
deployProvOpticalLinkCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44), )
if mibBuilder.loadTexts: deployProvOpticalLinkCapTable.setStatus('current')
deployProvOpticalLinkCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvOpticalLinkCapEntry.setStatus('current')
deployProvOpticalLinkCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkCapRowStatus.setStatus('current')
deployProvOpticalLinkCapTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkCapTxLineAttenuation.setStatus('current')
deployProvOpticalLinkCapRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkCapRxLineAttenuation.setStatus('current')
deployProvOpticalLinkCapFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkCapFarEndLocation.setStatus('current')
deployProvOpticalLinkDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45), )
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsTable.setStatus('current')
deployProvOpticalLinkDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsEntry.setStatus('current')
deployProvOpticalLinkDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsRowStatus.setStatus('current')
deployProvOpticalLinkDefaultsTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsTxLineAttenuation.setStatus('current')
deployProvOpticalLinkDefaultsRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsRxLineAttenuation.setStatus('current')
deployProvOpticalLinkDefaultsFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsFarEndLocation.setStatus('current')
deployProvVirtualOpticalChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 46), )
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelTable.setStatus('current')
deployProvVirtualOpticalChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 46, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelEntry.setStatus('current')
deployProvVirtualOpticalChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 46, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelRowStatus.setStatus('current')
deployProvVirtualOpticalChannelAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 46, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelAlias.setStatus('current')
deployProvVirtualOpticalChannelCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 47), )
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapTable.setStatus('current')
deployProvVirtualOpticalChannelCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 47, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapEntry.setStatus('current')
deployProvVirtualOpticalChannelCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 47, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapRowStatus.setStatus('current')
deployProvVirtualOpticalChannelCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 47, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapAlias.setStatus('current')
deployProvVirtualOpticalChannelDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 48), )
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsTable.setStatus('current')
deployProvVirtualOpticalChannelDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 48, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsEntry.setStatus('current')
deployProvVirtualOpticalChannelDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 48, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsRowStatus.setStatus('current')
deployProvVirtualOpticalChannelDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 48, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsAlias.setStatus('current')
deployProvLogicalIfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49), )
if mibBuilder.loadTexts: deployProvLogicalIfTable.setStatus('current')
deployProvLogicalIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalIfEntry.setStatus('current')
deployProvLogicalIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfRowStatus.setStatus('current')
deployProvLogicalIfFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 2), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfFacilityType.setStatus('current')
deployProvLogicalIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfAlias.setStatus('current')
deployProvLogicalIfLanLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 4), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfLanLinkAid.setStatus('current')
deployProvLogicalIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfAreaId.setStatus('current')
deployProvLogicalIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfMetric.setStatus('current')
deployProvLogicalIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfHelloInterval.setStatus('current')
deployProvLogicalIfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfDeadInterval.setStatus('current')
deployProvLogicalIfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfPrio.setStatus('current')
deployProvLogicalIfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfRetransmitInterval.setStatus('current')
deployProvLogicalIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 11), FspR7CpAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfAuthType.setStatus('current')
deployProvLogicalIfAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfAuthString.setStatus('current')
deployProvLogicalIfIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 13), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfIpType.setStatus('current')
deployProvLogicalIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfIpAddr.setStatus('current')
deployProvLogicalIfIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfIpAddrMask.setStatus('current')
deployProvLogicalIfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 16), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfAdmin.setStatus('current')
deployProvLogicalIfDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 17), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfDcnAid.setStatus('current')
deployProvLogicalIfOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 18), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfOspf.setStatus('current')
deployProvLogicalIfEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 19), FspR7CpEncapsulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfEncapsulation.setStatus('current')
deployProvLogicalIfPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfPushedNendIpHeader.setStatus('current')
deployProvLogicalIfPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfPushedFarEndIpHeader.setStatus('current')
deployProvLogicalIfTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfTimeToLive.setStatus('current')
deployProvLogicalIfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50), )
if mibBuilder.loadTexts: deployProvLogicalIfCapTable.setStatus('current')
deployProvLogicalIfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalIfCapEntry.setStatus('current')
deployProvLogicalIfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapRowStatus.setStatus('current')
deployProvLogicalIfCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapFacilityType.setStatus('current')
deployProvLogicalIfCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapAlias.setStatus('current')
deployProvLogicalIfCapLanLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapLanLinkAid.setStatus('current')
deployProvLogicalIfCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapAreaId.setStatus('current')
deployProvLogicalIfCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapMetric.setStatus('current')
deployProvLogicalIfCapHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 7), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapHelloInterval.setStatus('current')
deployProvLogicalIfCapDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 8), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapDeadInterval.setStatus('current')
deployProvLogicalIfCapPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapPrio.setStatus('current')
deployProvLogicalIfCapRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 10), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapRetransmitInterval.setStatus('current')
deployProvLogicalIfCapAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 11), FspR7CpAuthTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapAuthType.setStatus('current')
deployProvLogicalIfCapAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapAuthString.setStatus('current')
deployProvLogicalIfCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 13), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapIpType.setStatus('current')
deployProvLogicalIfCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 14), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapIpAddr.setStatus('current')
deployProvLogicalIfCapIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 15), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapIpAddrMask.setStatus('current')
deployProvLogicalIfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 16), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapAdmin.setStatus('current')
deployProvLogicalIfCapDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapDcnAid.setStatus('current')
deployProvLogicalIfCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 18), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapOspf.setStatus('current')
deployProvLogicalIfCapEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 19), FspR7CpEncapsulationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapEncapsulation.setStatus('current')
deployProvLogicalIfCapPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 20), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapPushedNendIpHeader.setStatus('current')
deployProvLogicalIfCapPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 21), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapPushedFarEndIpHeader.setStatus('current')
deployProvLogicalIfCapTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 22), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapTimeToLive.setStatus('current')
deployProvLogicalIfDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51), )
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsTable.setStatus('current')
deployProvLogicalIfDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsEntry.setStatus('current')
deployProvLogicalIfDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsRowStatus.setStatus('current')
deployProvLogicalIfDefaultsFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsFacilityType.setStatus('current')
deployProvLogicalIfDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAlias.setStatus('current')
deployProvLogicalIfDefaultsLanLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsLanLinkAid.setStatus('current')
deployProvLogicalIfDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAreaId.setStatus('current')
deployProvLogicalIfDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsMetric.setStatus('current')
deployProvLogicalIfDefaultsHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsHelloInterval.setStatus('current')
deployProvLogicalIfDefaultsDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsDeadInterval.setStatus('current')
deployProvLogicalIfDefaultsPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsPrio.setStatus('current')
deployProvLogicalIfDefaultsRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsRetransmitInterval.setStatus('current')
deployProvLogicalIfDefaultsAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 11), FspR7CpAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAuthType.setStatus('current')
deployProvLogicalIfDefaultsAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAuthString.setStatus('current')
deployProvLogicalIfDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 13), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsIpType.setStatus('current')
deployProvLogicalIfDefaultsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsIpAddr.setStatus('current')
deployProvLogicalIfDefaultsIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsIpAddrMask.setStatus('current')
deployProvLogicalIfDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 16), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAdmin.setStatus('current')
deployProvLogicalIfDefaultsDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 17), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsDcnAid.setStatus('current')
deployProvLogicalIfDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 18), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsOspf.setStatus('current')
deployProvLogicalIfDefaultsEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 19), FspR7CpEncapsulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsEncapsulation.setStatus('current')
deployProvLogicalIfDefaultsPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsPushedNendIpHeader.setStatus('current')
deployProvLogicalIfDefaultsPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsPushedFarEndIpHeader.setStatus('current')
deployProvLogicalIfDefaultsTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsTimeToLive.setStatus('current')
deployProvIfLanAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 52), )
if mibBuilder.loadTexts: deployProvIfLanAidCapsTable.setStatus('current')
deployProvIfLanAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 52, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvIfLanAidCapsIndex"))
if mibBuilder.loadTexts: deployProvIfLanAidCapsEntry.setStatus('current')
deployProvIfLanAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 52, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfLanAidCapsIndex.setStatus('current')
changeServiceDeployProvIfLanAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 53), )
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAidCapsTable.setStatus('current')
changeServiceDeployProvIfLanAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 53, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "changeServiceDeployProvIfLanAidCapsIndex"))
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAidCapsEntry.setStatus('current')
changeServiceDeployProvIfLanAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 53, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAidCapsIndex.setStatus('current')
deployProvIfVethAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 54), )
if mibBuilder.loadTexts: deployProvIfVethAidCapsTable.setStatus('current')
deployProvIfVethAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 54, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvIfVethAidCapsIndex"))
if mibBuilder.loadTexts: deployProvIfVethAidCapsEntry.setStatus('current')
deployProvIfVethAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 54, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfVethAidCapsIndex.setStatus('current')
deployProvDcnExternalVidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 55), )
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsTable.setStatus('current')
deployProvDcnExternalVidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 55, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvDcnExternalVidCapsIndexCap"))
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsEntry.setStatus('current')
deployProvDcnExternalVidCapsIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 55, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsIndexCap.setStatus('current')
deployProvDcnExternalVidCapsStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 55, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsStringCap.setStatus('current')
deployProvDcnLanAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 56), )
if mibBuilder.loadTexts: deployProvDcnLanAidCapsTable.setStatus('current')
deployProvDcnLanAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 56, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvDcnLanAidCapsIndex"))
if mibBuilder.loadTexts: deployProvDcnLanAidCapsEntry.setStatus('current')
deployProvDcnLanAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 56, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnLanAidCapsIndex.setStatus('current')
deployProvExChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57), )
if mibBuilder.loadTexts: deployProvExChannelTable.setStatus('current')
deployProvExChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvExChannelEntry.setStatus('current')
deployProvExChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelRowStatus.setStatus('current')
deployProvExChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 2), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelType.setStatus('current')
deployProvExChannelTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelTransmitChannel.setStatus('current')
deployProvExChannelChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 4), FspR7ChannelBandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelChannelBandwith.setStatus('current')
deployProvExChannelAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelAlias.setStatus('current')
deployProvExChannelFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelFarEndLocation.setStatus('current')
deployProvExChannelBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 7), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelBitrate.setStatus('current')
deployProvExChannelFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 8), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelFecType.setStatus('current')
deployProvExChannelLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 9), FspR7LineCoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelLineCoding.setStatus('current')
deployProvExChannelFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 10), FspR7FrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelFrameFormat.setStatus('current')
deployProvExChannelOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-9900, 600), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelOpticalPowerTx.setStatus('current')
deployProvExChannelOSNRTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelOSNRTransmit.setStatus('current')
deployProvExChannelPMDTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelPMDTransmit.setStatus('current')
deployProvExChannelChromaticDispersionTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelChromaticDispersionTx.setStatus('current')
deployProvExChannelMinimumOSNRRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelMinimumOSNRRcv.setStatus('current')
deployProvExChannelMinimumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2500, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelMinimumOpticalPowerRcv.setStatus('current')
deployProvExChannelMaximumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelMaximumOpticalPowerRcv.setStatus('current')
deployProvExChannelMaximumPMDRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelMaximumPMDRcv.setStatus('current')
deployProvExChannelChromaticDispersionRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelChromaticDispersionRcv.setStatus('current')
deployProvExChannelMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 20), FspR7MaxBitErrorRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelMaxBitErrorRate.setStatus('current')
deployProvExChannelCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58), )
if mibBuilder.loadTexts: deployProvExChannelCapTable.setStatus('current')
deployProvExChannelCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvExChannelCapEntry.setStatus('current')
deployProvExChannelCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapRowStatus.setStatus('current')
deployProvExChannelCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapType.setStatus('current')
deployProvExChannelCapTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 3), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapTransmitChannel.setStatus('current')
deployProvExChannelCapChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 4), FspR7ChannelBandwidthCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapChannelBandwith.setStatus('current')
deployProvExChannelCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapAlias.setStatus('current')
deployProvExChannelCapFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapFarEndLocation.setStatus('current')
deployProvExChannelCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 7), FspR7Unsigned32Caps()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapBitrate.setStatus('current')
deployProvExChannelCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 8), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapFecType.setStatus('current')
deployProvExChannelCapLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 9), FspR7LineCodingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapLineCoding.setStatus('current')
deployProvExChannelCapFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 10), FspR7FrameFormatCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapFrameFormat.setStatus('current')
deployProvExChannelCapOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 11), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapOpticalPowerTx.setStatus('current')
deployProvExChannelCapOSNRTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 12), FspR7Unsigned32Caps()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapOSNRTransmit.setStatus('current')
deployProvExChannelCapPMDTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 13), FspR7Unsigned32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapPMDTransmit.setStatus('current')
deployProvExChannelCapChromaticDispersionTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 14), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapChromaticDispersionTx.setStatus('current')
deployProvExChannelCapMinimumOSNRRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 15), FspR7Unsigned32Caps()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapMinimumOSNRRcv.setStatus('current')
deployProvExChannelCapMinimumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 16), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapMinimumOpticalPowerRcv.setStatus('current')
deployProvExChannelCapMaximumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 17), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapMaximumOpticalPowerRcv.setStatus('current')
deployProvExChannelCapMaximumPMDRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 18), FspR7Unsigned32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapMaximumPMDRcv.setStatus('current')
deployProvExChannelCapChromaticDispersionRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 19), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapChromaticDispersionRcv.setStatus('current')
deployProvExChannelCapMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 20), FspR7MaxBitErrorRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapMaxBitErrorRate.setStatus('current')
deployProvExChannelDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59), )
if mibBuilder.loadTexts: deployProvExChannelDefaultsTable.setStatus('current')
deployProvExChannelDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvExChannelDefaultsEntry.setStatus('current')
deployProvExChannelDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsRowStatus.setStatus('current')
deployProvExChannelDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsType.setStatus('current')
deployProvExChannelDefaultsTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsTransmitChannel.setStatus('current')
deployProvExChannelDefaultsChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 4), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsChannelBandwith.setStatus('current')
deployProvExChannelDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsAlias.setStatus('current')
deployProvExChannelDefaultsFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsFarEndLocation.setStatus('current')
deployProvExChannelDefaultsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 7), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsBitrate.setStatus('current')
deployProvExChannelDefaultsFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 8), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsFecType.setStatus('current')
deployProvExChannelDefaultsLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 9), FspR7LineCoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsLineCoding.setStatus('current')
deployProvExChannelDefaultsFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 10), FspR7FrameFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsFrameFormat.setStatus('current')
deployProvExChannelDefaultsOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-9900, 600), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsOpticalPowerTx.setStatus('current')
deployProvExChannelDefaultsOSNRTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsOSNRTransmit.setStatus('current')
deployProvExChannelDefaultsPMDTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsPMDTransmit.setStatus('current')
deployProvExChannelDefaultsChromaticDispersionTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsChromaticDispersionTx.setStatus('current')
deployProvExChannelDefaultsMinimumOSNRRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsMinimumOSNRRcv.setStatus('current')
deployProvExChannelDefaultsMinimumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2500, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsMinimumOpticalPowerRcv.setStatus('current')
deployProvExChannelDefaultsMaximumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsMaximumOpticalPowerRcv.setStatus('current')
deployProvExChannelDefaultsMaximumPMDRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsMaximumPMDRcv.setStatus('current')
deployProvExChannelDefaultsChromaticDispersionRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsChromaticDispersionRcv.setStatus('current')
deployProvExChannelDefaultsMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 20), FspR7MaxBitErrorRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsMaxBitErrorRate.setStatus('current')
deployProvConnType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 1), FspR7TypeConnection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvConnType.setStatus('current')
deployProvConnEndpointA = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 2), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvConnEndpointA.setStatus('current')
deployProvConnEndpointB = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 3), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvConnEndpointB.setStatus('current')
deployProvConnCommand = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 4), FspR7ConnCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvConnCommand.setStatus('current')
deployProvConnState = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 5), FspR7StateConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnState.setStatus('current')
deployProvConnCommandCounter = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnCommandCounter.setStatus('current')
deployProvConnIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 7), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnIndex.setStatus('current')
deployProvConnStdCapFromTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 8), )
if mibBuilder.loadTexts: deployProvConnStdCapFromTable.setStatus('current')
deployProvConnStdCapFromEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 8, 1), ).setIndexNames((0, "FspR7-MIB", "deployProvConnStdCapFromEndpointA"), (0, "FspR7-MIB", "deployProvConnStdCapFromEndpointB"))
if mibBuilder.loadTexts: deployProvConnStdCapFromEntry.setStatus('current')
deployProvConnStdCapFromEndpointA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 8, 1, 1), EntityIndex())
if mibBuilder.loadTexts: deployProvConnStdCapFromEndpointA.setStatus('current')
deployProvConnStdCapFromEndpointB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 8, 1, 2), EntityIndex())
if mibBuilder.loadTexts: deployProvConnStdCapFromEndpointB.setStatus('current')
deployProvConnStdCapFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 8, 1, 3), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnStdCapFromType.setStatus('current')
deployProvConnStdCapToTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 9), )
if mibBuilder.loadTexts: deployProvConnStdCapToTable.setStatus('current')
deployProvConnStdCapToEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 9, 1), ).setIndexNames((0, "FspR7-MIB", "deployProvConnStdCapToEndpointB"), (0, "FspR7-MIB", "deployProvConnStdCapToEndpointA"))
if mibBuilder.loadTexts: deployProvConnStdCapToEntry.setStatus('current')
deployProvConnStdCapToEndpointB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 9, 1, 1), EntityIndex())
if mibBuilder.loadTexts: deployProvConnStdCapToEndpointB.setStatus('current')
deployProvConnStdCapToEndpointA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 9, 1, 2), EntityIndex())
if mibBuilder.loadTexts: deployProvConnStdCapToEndpointA.setStatus('current')
deployProvConnStdCapToType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 9, 1, 3), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnStdCapToType.setStatus('current')
deployProvConnNonStdCapFromTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 10), )
if mibBuilder.loadTexts: deployProvConnNonStdCapFromTable.setStatus('current')
deployProvConnNonStdCapFromEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 10, 1), ).setIndexNames((0, "FspR7-MIB", "deployProvConnNonStdCapFromEndpointA"), (0, "FspR7-MIB", "deployProvConnNonStdCapFromEndpointB"))
if mibBuilder.loadTexts: deployProvConnNonStdCapFromEntry.setStatus('current')
deployProvConnNonStdCapFromEndpointA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 10, 1, 1), EntityIndex())
if mibBuilder.loadTexts: deployProvConnNonStdCapFromEndpointA.setStatus('current')
deployProvConnNonStdCapFromEndpointB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 10, 1, 2), EntityIndex())
if mibBuilder.loadTexts: deployProvConnNonStdCapFromEndpointB.setStatus('current')
deployProvConnNonStdCapFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 10, 1, 3), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnNonStdCapFromType.setStatus('current')
deployProvConnNonStdCapToTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 11), )
if mibBuilder.loadTexts: deployProvConnNonStdCapToTable.setStatus('current')
deployProvConnNonStdCapToEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 11, 1), ).setIndexNames((0, "FspR7-MIB", "deployProvConnNonStdCapToEndpointB"), (0, "FspR7-MIB", "deployProvConnNonStdCapToEndpointA"))
if mibBuilder.loadTexts: deployProvConnNonStdCapToEntry.setStatus('current')
deployProvConnNonStdCapToEndpointB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 11, 1, 1), EntityIndex())
if mibBuilder.loadTexts: deployProvConnNonStdCapToEndpointB.setStatus('current')
deployProvConnNonStdCapToEndpointA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 11, 1, 2), EntityIndex())
if mibBuilder.loadTexts: deployProvConnNonStdCapToEndpointA.setStatus('current')
deployProvConnNonStdCapToType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 11, 1, 3), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnNonStdCapToType.setStatus('current')
crsConnUnusedFromPointsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 1), )
if mibBuilder.loadTexts: crsConnUnusedFromPointsTable.setStatus('current')
crsConnUnusedFromPointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 1, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnUnusedFromPointsAidValueFromPoint"))
if mibBuilder.loadTexts: crsConnUnusedFromPointsEntry.setStatus('current')
crsConnUnusedFromPointsAidValueFromPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 1, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnUnusedFromPointsAidValueFromPoint.setStatus('current')
crsConnPossibleToCreateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 2), )
if mibBuilder.loadTexts: crsConnPossibleToCreateTable.setStatus('current')
crsConnPossibleToCreateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 2, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnUnusedFromPointsAidValueFromPoint"), (0, "FspR7-MIB", "crsConnPossibleToCreateAidToFromPoint"))
if mibBuilder.loadTexts: crsConnPossibleToCreateEntry.setStatus('current')
crsConnPossibleToCreateAidToFromPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 2, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnPossibleToCreateAidToFromPoint.setStatus('current')
crsConnDeployProvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3), )
if mibBuilder.loadTexts: crsConnDeployProvTable.setStatus('current')
crsConnDeployProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnDeployProvEntry.setStatus('current')
crsConnDeployProvFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 1), EntityIndex())
if mibBuilder.loadTexts: crsConnDeployProvFrom.setStatus('current')
crsConnDeployProvTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 2), EntityIndex())
if mibBuilder.loadTexts: crsConnDeployProvTo.setStatus('current')
crsConnDeployProvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvRowStatus.setStatus('current')
crsConnDeployProvConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 4), FspR7Conn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvConn.setStatus('current')
crsConnDeployProvRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 5), FspR7RedLinedState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvRedLineState.setStatus('current')
crsConnDeployProvAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 6), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvAdmin.setStatus('current')
crsConnDeployProvTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvTunnelAid.setStatus('current')
crsConnDeployProvAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvAlias.setStatus('current')
crsConnDeployProvCrossConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 9), FspR7TypeCrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvCrossConnType.setStatus('current')
crsConnDeployProvPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 10), FspR7PathNode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvPathNode.setStatus('current')
crsConnDeployProvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 11), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvType.setStatus('current')
crsConnDeployProvCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4), )
if mibBuilder.loadTexts: crsConnDeployProvCapTable.setStatus('current')
crsConnDeployProvCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnDeployProvCapEntry.setStatus('current')
crsConnDeployProvCapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: crsConnDeployProvCapFrom.setStatus('current')
crsConnDeployProvCapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: crsConnDeployProvCapTo.setStatus('current')
crsConnDeployProvCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 3), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapRowStatus.setStatus('current')
crsConnDeployProvCapConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 4), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapConn.setStatus('current')
crsConnDeployProvCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 5), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapRedLineState.setStatus('current')
crsConnDeployProvCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 6), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapAdmin.setStatus('current')
crsConnDeployProvCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapTunnelAid.setStatus('current')
crsConnDeployProvCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapAlias.setStatus('current')
crsConnDeployProvCapCrossConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 9), FspR7TypeCrsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapCrossConnType.setStatus('current')
crsConnDeployProvCapPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 10), FspR7PathNodeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapPathNode.setStatus('current')
crsConnDeployProvCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 11), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapType.setStatus('current')
crsConnDeployProvDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5), )
if mibBuilder.loadTexts: crsConnDeployProvDefaultsTable.setStatus('current')
crsConnDeployProvDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnDeployProvDefaultsEntry.setStatus('current')
crsConnDeployProvDefaultsFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsFrom.setStatus('current')
crsConnDeployProvDefaultsTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsTo.setStatus('current')
crsConnDeployProvDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsRowStatus.setStatus('current')
crsConnDeployProvDefaultsConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 4), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsConn.setStatus('current')
crsConnDeployProvDefaultsRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 5), FspR7RedLinedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsRedLineState.setStatus('current')
crsConnDeployProvDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 6), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsAdmin.setStatus('current')
crsConnDeployProvDefaultsTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsTunnelAid.setStatus('current')
crsConnDeployProvDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsAlias.setStatus('current')
crsConnDeployProvDefaultsCrossConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 9), FspR7TypeCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsCrossConnType.setStatus('current')
crsConnDeployProvDefaultsPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 10), FspR7PathNode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsPathNode.setStatus('current')
crsConnDeployProvDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 11), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsType.setStatus('current')
crsConnWdmUnusedFromPointsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 6), )
if mibBuilder.loadTexts: crsConnWdmUnusedFromPointsTable.setStatus('current')
crsConnWdmUnusedFromPointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 6, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnWdmUnusedFromPointsAidValueFromPoint"))
if mibBuilder.loadTexts: crsConnWdmUnusedFromPointsEntry.setStatus('current')
crsConnWdmUnusedFromPointsAidValueFromPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 6, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmUnusedFromPointsAidValueFromPoint.setStatus('current')
cloningTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 1), )
if mibBuilder.loadTexts: cloningTable.setStatus('current')
cloningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: cloningEntry.setStatus('current')
cloningSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 1, 1, 1), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cloningSource.setStatus('current')
entitiesToCloningTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 2), )
if mibBuilder.loadTexts: entitiesToCloningTable.setStatus('current')
entitiesToCloningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "entitiesToCloningEntity"))
if mibBuilder.loadTexts: entitiesToCloningEntry.setStatus('current')
entitiesToCloningEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 2, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitiesToCloningEntity.setStatus('current')
forceDeployProvApsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3), )
if mibBuilder.loadTexts: forceDeployProvApsTable.setStatus('current')
forceDeployProvApsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: forceDeployProvApsEntry.setStatus('current')
forceDeployProvApsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsRowStatus.setStatus('current')
forceDeployProvApsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsForceDestroy.setStatus('current')
forceDeployProvApsSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 3), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsSDswitching.setStatus('current')
forceDeployProvApsHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 4), ApsHoldoffTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsHoldOffTime.setStatus('current')
forceDeployProvApsProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 5), ProtectionMech()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsProtectionMech.setStatus('current')
forceDeployProvApsWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 6), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsWorkingAid.setStatus('current')
forceDeployProvApsProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 7), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsProtectionAid.setStatus('current')
forceDeployProvApsSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 8), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsSignalDegradeSwitching.setStatus('current')
forceDeployProvApsSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 9), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsSignalFailureSwitching.setStatus('current')
forceDeployProvApsFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsFarEndIp.setStatus('current')
forceDeployProvApsPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 11), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsPeerAid.setStatus('current')
forceDeployProvApsApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 12), ApsType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsApsType.setStatus('current')
forceDeployProvApsRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 13), ApsRevertMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsRevertMode.setStatus('current')
forceDeployProvApsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsWaitToRestore.setStatus('current')
forceDeployProvApsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 15), ApsDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsDirection.setStatus('current')
forceDeployProvApsCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4), )
if mibBuilder.loadTexts: forceDeployProvApsCapTable.setStatus('current')
forceDeployProvApsCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: forceDeployProvApsCapEntry.setStatus('current')
forceDeployProvApsCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapRowStatus.setStatus('current')
forceDeployProvApsCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapForceDestroy.setStatus('current')
forceDeployProvApsCapSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 3), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapSDswitching.setStatus('current')
forceDeployProvApsCapHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 4), ApsHoldoffTimeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapHoldOffTime.setStatus('current')
forceDeployProvApsCapProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 5), ProtectionMechCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapProtectionMech.setStatus('current')
forceDeployProvApsCapWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapWorkingAid.setStatus('current')
forceDeployProvApsCapProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapProtectionAid.setStatus('current')
forceDeployProvApsCapSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 8), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapSignalDegradeSwitching.setStatus('current')
forceDeployProvApsCapSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 9), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapSignalFailureSwitching.setStatus('current')
forceDeployProvApsCapFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 10), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapFarEndIp.setStatus('current')
forceDeployProvApsCapPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapPeerAid.setStatus('current')
forceDeployProvApsCapApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 12), ApsTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapApsType.setStatus('current')
forceDeployProvApsCapRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 13), ApsRevertModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapRevertMode.setStatus('current')
forceDeployProvApsCapWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 14), FspR7Unsigned32Caps()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapWaitToRestore.setStatus('current')
forceDeployProvApsCapDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 15), ApsDirectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapDirection.setStatus('current')
forceDeployProvApsDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5), )
if mibBuilder.loadTexts: forceDeployProvApsDefaultsTable.setStatus('current')
forceDeployProvApsDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: forceDeployProvApsDefaultsEntry.setStatus('current')
forceDeployProvApsDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsRowStatus.setStatus('current')
forceDeployProvApsDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsForceDestroy.setStatus('current')
forceDeployProvApsDefaultsSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 3), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsSDswitching.setStatus('current')
forceDeployProvApsDefaultsHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 4), ApsHoldoffTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsHoldOffTime.setStatus('current')
forceDeployProvApsDefaultsProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 5), ProtectionMech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsProtectionMech.setStatus('current')
forceDeployProvApsDefaultsWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsWorkingAid.setStatus('current')
forceDeployProvApsDefaultsProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 7), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsProtectionAid.setStatus('current')
forceDeployProvApsDefaultsSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 8), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsSignalDegradeSwitching.setStatus('current')
forceDeployProvApsDefaultsSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsSignalFailureSwitching.setStatus('current')
forceDeployProvApsDefaultsFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsFarEndIp.setStatus('current')
forceDeployProvApsDefaultsPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsPeerAid.setStatus('current')
forceDeployProvApsDefaultsApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 12), ApsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsApsType.setStatus('current')
forceDeployProvApsDefaultsRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 13), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsRevertMode.setStatus('current')
forceDeployProvApsDefaultsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsWaitToRestore.setStatus('current')
forceDeployProvApsDefaultsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 15), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsDirection.setStatus('current')
forceDeployProvApsWorkingAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 6), )
if mibBuilder.loadTexts: forceDeployProvApsWorkingAidCapsTable.setStatus('current')
forceDeployProvApsWorkingAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsWorkingAidCapsIndex"))
if mibBuilder.loadTexts: forceDeployProvApsWorkingAidCapsEntry.setStatus('current')
forceDeployProvApsWorkingAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 6, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsWorkingAidCapsIndex.setStatus('current')
forceDeployProvApsProtectingAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 7), )
if mibBuilder.loadTexts: forceDeployProvApsProtectingAidCapsTable.setStatus('current')
forceDeployProvApsProtectingAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsProtectingAidCapsIndex"))
if mibBuilder.loadTexts: forceDeployProvApsProtectingAidCapsEntry.setStatus('current')
forceDeployProvApsProtectingAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 7, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsProtectingAidCapsIndex.setStatus('current')
forceDeployProvApsPeerAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 8), )
if mibBuilder.loadTexts: forceDeployProvApsPeerAidCapsTable.setStatus('current')
forceDeployProvApsPeerAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsWorkingAidCapsIndex"))
if mibBuilder.loadTexts: forceDeployProvApsPeerAidCapsEntry.setStatus('current')
forceDeployProvApsPeerAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 8, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsPeerAidCapsIndex.setStatus('current')
unusedWdmTunnelIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedWdmTunnelIndex.setStatus('current')
unusedWdmPathIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedWdmPathIndex.setStatus('current')
unusedOtnTunnelIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 95), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedOtnTunnelIndex.setStatus('current')
unusedOtnPathIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedOtnPathIndex.setStatus('current')
deployProvControlPlaneWdmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11), )
if mibBuilder.loadTexts: deployProvControlPlaneWdmTable.setStatus('current')
deployProvControlPlaneWdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneWdmEntry.setStatus('current')
deployProvControlPlaneWdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRowStatus.setStatus('current')
deployProvControlPlaneWdmCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmConfigFlag.setStatus('current')
deployProvControlPlaneWdmCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmTraceDetail.setStatus('current')
deployProvControlPlaneWdmCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmSetupTimeout.setStatus('current')
deployProvControlPlaneWdmCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmShutdownTimeout.setStatus('current')
deployProvControlPlaneWdmCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmRetryWait.setStatus('current')
deployProvControlPlaneWdmCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmRetryWaitMultiplier.setStatus('current')
deployProvControlPlaneWdmCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmMaximumRetryWait.setStatus('current')
deployProvControlPlaneWdmCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmMaximumRetryNumber.setStatus('current')
deployProvControlPlaneWdmRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRaConfigFlag.setStatus('current')
deployProvControlPlaneWdmRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRaTraceDetail.setStatus('current')
deployProvControlPlaneWdmRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRaAlarmActivationTime.setStatus('current')
deployProvControlPlaneWdmCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmConfigFlag.setStatus('current')
deployProvControlPlaneWdmCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmTraceDetail.setStatus('current')
deployProvControlPlaneWdmCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmAlarmActivationTime.setStatus('current')
deployProvControlPlaneWdmCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmFisFrsTimeout.setStatus('current')
deployProvControlPlaneWdmCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmCrankBackTimeout.setStatus('current')
deployProvControlPlaneWdmCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdbConfigFlag.setStatus('current')
deployProvControlPlaneWdmCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdbDetail.setStatus('current')
deployProvControlPlaneWdmCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdbMaxSize.setStatus('current')
deployProvControlPlaneWdmRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRsvpMaxExpRestartTime.setStatus('current')
deployProvControlPlaneWdmRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRsvpMaxExpRecoveryTime.setStatus('current')
deployProvControlPlaneWdmRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRsvpConfigFlag.setStatus('current')
deployProvControlPlaneWdmTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbConfigFlag.setStatus('current')
deployProvControlPlaneWdmTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbTraceDetail.setStatus('current')
deployProvControlPlaneWdmTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbMaxSize.setStatus('current')
deployProvControlPlaneWdmTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbRouterId.setStatus('current')
deployProvControlPlaneWdmTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbMinAdvertWait.setStatus('current')
deployProvControlPlaneWdmNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasConfigFlag.setStatus('current')
deployProvControlPlaneWdmNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasTraceDetail.setStatus('current')
deployProvControlPlaneWdmNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasMaxSize.setStatus('current')
deployProvControlPlaneWdmNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasAdvertWait.setStatus('current')
deployProvControlPlaneWdmPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmPcConfigFlag.setStatus('current')
deployProvControlPlaneWdmPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmPcTraceDetail.setStatus('current')
deployProvControlPlaneWdmCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdConfigFlag.setStatus('current')
deployProvControlPlaneWdmCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdTraceDetail.setStatus('current')
deployProvControlPlaneWdmCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdResyncTimeout.setStatus('current')
deployProvControlPlaneWdmRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRmConfigFlag.setStatus('current')
deployProvControlPlaneWdmRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRmTraceDetail.setStatus('current')
deployProvControlPlaneWdmRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRmTraceTarget.setStatus('current')
deployProvControlPlaneWdmNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 41), FspR7NodeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmNodeNameSyntax.setStatus('deprecated')
deployProvControlPlaneWdmWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmWaitToRestore.setStatus('current')
deployProvControlPlaneWdmCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12), )
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTable.setStatus('current')
deployProvControlPlaneWdmCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapEntry.setStatus('current')
deployProvControlPlaneWdmCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRowStatus.setStatus('current')
deployProvControlPlaneWdmCapCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmConfigFlag.setStatus('current')
deployProvControlPlaneWdmCapCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmTraceDetail.setStatus('current')
deployProvControlPlaneWdmCapCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 4), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmSetupTimeout.setStatus('current')
deployProvControlPlaneWdmCapCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 5), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmShutdownTimeout.setStatus('current')
deployProvControlPlaneWdmCapCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 6), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmRetryWait.setStatus('current')
deployProvControlPlaneWdmCapCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmRetryWaitMultiplier.setStatus('current')
deployProvControlPlaneWdmCapCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 8), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmMaximumRetryWait.setStatus('current')
deployProvControlPlaneWdmCapCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmMaximumRetryNumber.setStatus('current')
deployProvControlPlaneWdmCapRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 10), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRaConfigFlag.setStatus('current')
deployProvControlPlaneWdmCapRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRaTraceDetail.setStatus('current')
deployProvControlPlaneWdmCapRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 12), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRaAlarmActivationTime.setStatus('current')
deployProvControlPlaneWdmCapCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 13), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmConfigFlag.setStatus('current')
deployProvControlPlaneWdmCapCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 14), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmTraceDetail.setStatus('current')
deployProvControlPlaneWdmCapCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 15), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmAlarmActivationTime.setStatus('current')
deployProvControlPlaneWdmCapCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 16), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmFisFrsTimeout.setStatus('current')
deployProvControlPlaneWdmCapCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 17), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmCrankBackTimeout.setStatus('current')
deployProvControlPlaneWdmCapCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 18), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdbConfigFlag.setStatus('current')
deployProvControlPlaneWdmCapCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 19), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdbDetail.setStatus('current')
deployProvControlPlaneWdmCapCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 20), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdbMaxSize.setStatus('current')
deployProvControlPlaneWdmCapRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 21), Counter64StringCaps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRsvpMaxExpRestartTime.setStatus('current')
deployProvControlPlaneWdmCapRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 22), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRsvpMaxExpRecoveryTime.setStatus('current')
deployProvControlPlaneWdmCapRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 23), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRsvpConfigFlag.setStatus('current')
deployProvControlPlaneWdmCapTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 24), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbConfigFlag.setStatus('current')
deployProvControlPlaneWdmCapTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 25), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbTraceDetail.setStatus('current')
deployProvControlPlaneWdmCapTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 26), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbMaxSize.setStatus('current')
deployProvControlPlaneWdmCapTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbRouterId.setStatus('current')
deployProvControlPlaneWdmCapTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 28), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbMinAdvertWait.setStatus('current')
deployProvControlPlaneWdmCapNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 29), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasConfigFlag.setStatus('current')
deployProvControlPlaneWdmCapNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 30), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasTraceDetail.setStatus('current')
deployProvControlPlaneWdmCapNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 31), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasMaxSize.setStatus('current')
deployProvControlPlaneWdmCapNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 32), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasAdvertWait.setStatus('current')
deployProvControlPlaneWdmCapPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 33), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapPcConfigFlag.setStatus('current')
deployProvControlPlaneWdmCapPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 34), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapPcTraceDetail.setStatus('current')
deployProvControlPlaneWdmCapCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 35), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdConfigFlag.setStatus('current')
deployProvControlPlaneWdmCapCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 36), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdTraceDetail.setStatus('current')
deployProvControlPlaneWdmCapCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 37), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdResyncTimeout.setStatus('current')
deployProvControlPlaneWdmCapRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 38), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRmConfigFlag.setStatus('current')
deployProvControlPlaneWdmCapRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 39), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRmTraceDetail.setStatus('current')
deployProvControlPlaneWdmCapRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 40), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRmTraceTarget.setStatus('current')
deployProvControlPlaneWdmCapNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 41), FspR7NodeIdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNodeNameSyntax.setStatus('deprecated')
deployProvControlPlaneWdmCapWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 42), FspR7Unsigned32Caps()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapWaitToRestore.setStatus('current')
deployProvControlPlaneWdmDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13), )
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTable.setStatus('current')
deployProvControlPlaneWdmDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsEntry.setStatus('current')
deployProvControlPlaneWdmDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRowStatus.setStatus('current')
deployProvControlPlaneWdmDefaultsCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmConfigFlag.setStatus('current')
deployProvControlPlaneWdmDefaultsCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmTraceDetail.setStatus('current')
deployProvControlPlaneWdmDefaultsCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmSetupTimeout.setStatus('current')
deployProvControlPlaneWdmDefaultsCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmShutdownTimeout.setStatus('current')
deployProvControlPlaneWdmDefaultsCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmRetryWait.setStatus('current')
deployProvControlPlaneWdmDefaultsCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmRetryWaitMultiplier.setStatus('current')
deployProvControlPlaneWdmDefaultsCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmMaximumRetryWait.setStatus('current')
deployProvControlPlaneWdmDefaultsCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmMaximumRetryNumber.setStatus('current')
deployProvControlPlaneWdmDefaultsRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRaConfigFlag.setStatus('current')
deployProvControlPlaneWdmDefaultsRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRaTraceDetail.setStatus('current')
deployProvControlPlaneWdmDefaultsRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRaAlarmActivationTime.setStatus('current')
deployProvControlPlaneWdmDefaultsCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmConfigFlag.setStatus('current')
deployProvControlPlaneWdmDefaultsCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmTraceDetail.setStatus('current')
deployProvControlPlaneWdmDefaultsCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmAlarmActivationTime.setStatus('current')
deployProvControlPlaneWdmDefaultsCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmFisFrsTimeout.setStatus('current')
deployProvControlPlaneWdmDefaultsCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmCrankBackTimeout.setStatus('current')
deployProvControlPlaneWdmDefaultsCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdbConfigFlag.setStatus('current')
deployProvControlPlaneWdmDefaultsCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdbDetail.setStatus('current')
deployProvControlPlaneWdmDefaultsCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdbMaxSize.setStatus('current')
deployProvControlPlaneWdmDefaultsRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRsvpMaxExpRestartTime.setStatus('current')
deployProvControlPlaneWdmDefaultsRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRsvpMaxExpRecoveryTime.setStatus('current')
deployProvControlPlaneWdmDefaultsRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRsvpConfigFlag.setStatus('current')
deployProvControlPlaneWdmDefaultsTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbConfigFlag.setStatus('current')
deployProvControlPlaneWdmDefaultsTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbTraceDetail.setStatus('current')
deployProvControlPlaneWdmDefaultsTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbMaxSize.setStatus('current')
deployProvControlPlaneWdmDefaultsTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbRouterId.setStatus('current')
deployProvControlPlaneWdmDefaultsTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbMinAdvertWait.setStatus('current')
deployProvControlPlaneWdmDefaultsNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasConfigFlag.setStatus('current')
deployProvControlPlaneWdmDefaultsNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasTraceDetail.setStatus('current')
deployProvControlPlaneWdmDefaultsNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasMaxSize.setStatus('current')
deployProvControlPlaneWdmDefaultsNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasAdvertWait.setStatus('current')
deployProvControlPlaneWdmDefaultsPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsPcConfigFlag.setStatus('current')
deployProvControlPlaneWdmDefaultsPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsPcTraceDetail.setStatus('current')
deployProvControlPlaneWdmDefaultsCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdConfigFlag.setStatus('current')
deployProvControlPlaneWdmDefaultsCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdTraceDetail.setStatus('current')
deployProvControlPlaneWdmDefaultsCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdResyncTimeout.setStatus('current')
deployProvControlPlaneWdmDefaultsRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRmConfigFlag.setStatus('current')
deployProvControlPlaneWdmDefaultsRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRmTraceDetail.setStatus('current')
deployProvControlPlaneWdmDefaultsRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRmTraceTarget.setStatus('current')
deployProvControlPlaneWdmDefaultsNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 41), FspR7NodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNodeNameSyntax.setStatus('deprecated')
deployProvControlPlaneWdmDefaultsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsWaitToRestore.setStatus('current')
deployProvTunnelWdmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14), )
if mibBuilder.loadTexts: deployProvTunnelWdmTable.setStatus('current')
deployProvTunnelWdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelWdmEntry.setStatus('current')
deployProvTunnelWdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRowStatus.setStatus('current')
deployProvTunnelWdmTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelId.setStatus('current')
deployProvTunnelWdmTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelNo.setStatus('current')
deployProvTunnelWdmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmAlias.setStatus('current')
deployProvTunnelWdmTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 5), FspR7CpTunnelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelType.setStatus('current')
deployProvTunnelWdmToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmToTid.setStatus('current')
deployProvTunnelWdmToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmToNodeIp.setStatus('current')
deployProvTunnelWdmFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 8), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmFromAid.setStatus('current')
deployProvTunnelWdmToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 9), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmToAid.setStatus('current')
deployProvTunnelWdmConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 10), FspR7Conn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmConnectionDirection.setStatus('current')
deployProvTunnelWdmFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 11), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmFacilityType.setStatus('current')
deployProvTunnelWdmTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 12), OhTerminationLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTerminationLevel.setStatus('current')
deployProvTunnelWdmFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 13), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmFecType.setStatus('current')
deployProvTunnelWdmStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 14), FspR7Stuff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmStuff.setStatus('current')
deployProvTunnelWdmProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 15), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmProvisionedPaths.setStatus('current')
deployProvTunnelWdmRecoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 16), FspR7CpRecoveryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRecoveryType.setStatus('current')
deployProvTunnelWdmPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 17), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmPin.setStatus('current')
deployProvTunnelWdmRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 18), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationType.setStatus('current')
deployProvTunnelWdmSubLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 19), FspR7SubLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmSubLayer.setStatus('current')
deployProvTunnelWdmMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 20), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmMonitorEntities.setStatus('current')
deployProvTunnelWdmSubLayerEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 21), FspR7SubLayerEncoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmSubLayerEncoding.setStatus('current')
deployProvTunnelWdmPceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 22), FspR7PceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmPceMode.setStatus('current')
deployProvTunnelWdmTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 23), FspR7CpTunnelScope()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelScope.setStatus('current')
deployProvTunnelWdmLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 24), FspR7PacketsLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmLayer.setStatus('current')
deployProvTunnelWdmOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 25), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmOifUni.setStatus('current')
deployProvTunnelWdmReversionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 26), FspR7CpReversionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmReversionType.setStatus('current')
deployProvTunnelWdmRestorationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 27), FspR7CpRestorationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationMode.setStatus('current')
deployProvTunnelWdmRestPathsNoProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRestPathsNoProv.setStatus('current')
deployProvTunnelWdmRestorationPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 29), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationPaths.setStatus('current')
deployProvTunnelWdmTunnelTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 30), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelTemplate.setStatus('current')
deployProvTunnelWdmRestorationPathsComputed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 31), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationPathsComputed.setStatus('current')
deployProvTunnelWdmCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15), )
if mibBuilder.loadTexts: deployProvTunnelWdmCapTable.setStatus('current')
deployProvTunnelWdmCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelWdmCapEntry.setStatus('current')
deployProvTunnelWdmCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRowStatus.setStatus('current')
deployProvTunnelWdmCapTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelId.setStatus('current')
deployProvTunnelWdmCapTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelNo.setStatus('current')
deployProvTunnelWdmCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapAlias.setStatus('current')
deployProvTunnelWdmCapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 5), FspR7CpTunnelTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelType.setStatus('current')
deployProvTunnelWdmCapToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapToTid.setStatus('current')
deployProvTunnelWdmCapToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapToNodeIp.setStatus('current')
deployProvTunnelWdmCapFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapFromAid.setStatus('current')
deployProvTunnelWdmCapToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapToAid.setStatus('current')
deployProvTunnelWdmCapConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 10), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapConnectionDirection.setStatus('current')
deployProvTunnelWdmCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 11), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapFacilityType.setStatus('current')
deployProvTunnelWdmCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 12), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTerminationLevel.setStatus('current')
deployProvTunnelWdmCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 13), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapFecType.setStatus('current')
deployProvTunnelWdmCapStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 14), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapStuff.setStatus('current')
deployProvTunnelWdmCapProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapProvisionedPaths.setStatus('current')
deployProvTunnelWdmCapRecoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 16), FspR7CpRecoveryTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRecoveryType.setStatus('current')
deployProvTunnelWdmCapPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 17), FspR7CpPinningCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapPin.setStatus('current')
deployProvTunnelWdmCapRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 18), FspR7CpRestorationTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationType.setStatus('current')
deployProvTunnelWdmCapSubLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 19), FspR7SubLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapSubLayer.setStatus('current')
deployProvTunnelWdmCapMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 20), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapMonitorEntities.setStatus('current')
deployProvTunnelWdmCapSubLayerEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 21), FspR7SubLayerEncodingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapSubLayerEncoding.setStatus('current')
deployProvTunnelWdmCapPceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 22), FspR7PceModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapPceMode.setStatus('current')
deployProvTunnelWdmCapTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 23), FspR7CpTunnelScopeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelScope.setStatus('current')
deployProvTunnelWdmCapLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 24), FspR7PacketsLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapLayer.setStatus('current')
deployProvTunnelWdmCapOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 25), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapOifUni.setStatus('current')
deployProvTunnelWdmCapReversionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 26), FspR7CpReversionTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapReversionType.setStatus('current')
deployProvTunnelWdmCapRestorationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 27), FspR7CpRestorationModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationMode.setStatus('current')
deployProvTunnelWdmCapRestPathsNoProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 28), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestPathsNoProv.setStatus('current')
deployProvTunnelWdmCapRestorationPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationPaths.setStatus('current')
deployProvTunnelWdmCapTunnelTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 30), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelTemplate.setStatus('current')
deployProvTunnelWdmCapRestorationPathsComputed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationPathsComputed.setStatus('current')
deployProvTunnelWdmDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16), )
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTable.setStatus('current')
deployProvTunnelWdmDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsEntry.setStatus('current')
deployProvTunnelWdmDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRowStatus.setStatus('current')
deployProvTunnelWdmDefaultsTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelId.setStatus('current')
deployProvTunnelWdmDefaultsTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelNo.setStatus('current')
deployProvTunnelWdmDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsAlias.setStatus('current')
deployProvTunnelWdmDefaultsTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 5), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelType.setStatus('current')
deployProvTunnelWdmDefaultsToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsToTid.setStatus('current')
deployProvTunnelWdmDefaultsToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsToNodeIp.setStatus('current')
deployProvTunnelWdmDefaultsFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsFromAid.setStatus('current')
deployProvTunnelWdmDefaultsToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsToAid.setStatus('current')
deployProvTunnelWdmDefaultsConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsConnectionDirection.setStatus('current')
deployProvTunnelWdmDefaultsFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 11), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsFacilityType.setStatus('current')
deployProvTunnelWdmDefaultsTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 12), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTerminationLevel.setStatus('current')
deployProvTunnelWdmDefaultsFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 13), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsFecType.setStatus('current')
deployProvTunnelWdmDefaultsStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 14), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsStuff.setStatus('current')
deployProvTunnelWdmDefaultsProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsProvisionedPaths.setStatus('current')
deployProvTunnelWdmDefaultsRecoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 16), FspR7CpRecoveryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRecoveryType.setStatus('current')
deployProvTunnelWdmDefaultsPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 17), FspR7CpPinning()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsPin.setStatus('current')
deployProvTunnelWdmDefaultsRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 18), FspR7CpRestorationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationType.setStatus('current')
deployProvTunnelWdmDefaultsSubLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 19), FspR7SubLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsSubLayer.setStatus('current')
deployProvTunnelWdmDefaultsMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 20), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsMonitorEntities.setStatus('current')
deployProvTunnelWdmDefaultsSubLayerEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 21), FspR7SubLayerEncoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsSubLayerEncoding.setStatus('current')
deployProvTunnelWdmDefaultsPceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 22), FspR7PceMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsPceMode.setStatus('current')
deployProvTunnelWdmDefaultsTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 23), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelScope.setStatus('current')
deployProvTunnelWdmDefaultsLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 24), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsLayer.setStatus('current')
deployProvTunnelWdmDefaultsOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 25), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsOifUni.setStatus('current')
deployProvTunnelWdmDefaultsReversionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 26), FspR7CpReversionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsReversionType.setStatus('current')
deployProvTunnelWdmDefaultsRestorationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 27), FspR7CpRestorationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationMode.setStatus('current')
deployProvTunnelWdmDefaultsRestPathsNoProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestPathsNoProv.setStatus('current')
deployProvTunnelWdmDefaultsRestorationPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 29), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationPaths.setStatus('current')
deployProvTunnelWdmDefaultsTunnelTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 30), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelTemplate.setStatus('current')
deployProvTunnelWdmDefaultsRestorationPathsComputed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 31), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationPathsComputed.setStatus('current')
deployProvPathWdmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 18), )
if mibBuilder.loadTexts: deployProvPathWdmTable.setStatus('current')
deployProvPathWdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 18, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathWdmEntry.setStatus('current')
deployProvPathWdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 18, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathWdmRowStatus.setStatus('current')
deployProvPathWdmPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 18, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathWdmPathId.setStatus('current')
deployProvPathWdmCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 19), )
if mibBuilder.loadTexts: deployProvPathWdmCapTable.setStatus('current')
deployProvPathWdmCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 19, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathWdmCapEntry.setStatus('current')
deployProvPathWdmCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 19, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathWdmCapRowStatus.setStatus('current')
deployProvPathWdmCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathWdmCapPathId.setStatus('current')
deployProvPathWdmDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 20), )
if mibBuilder.loadTexts: deployProvPathWdmDefaultsTable.setStatus('current')
deployProvPathWdmDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 20, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathWdmDefaultsEntry.setStatus('current')
deployProvPathWdmDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 20, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathWdmDefaultsRowStatus.setStatus('current')
deployProvPathWdmDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 20, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathWdmDefaultsPathId.setStatus('current')
deployProvPathElementWdmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21), )
if mibBuilder.loadTexts: deployProvPathElementWdmTable.setStatus('current')
deployProvPathElementWdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementWdmEntry.setStatus('current')
deployProvPathElementWdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmRowStatus.setStatus('current')
deployProvPathElementWdmTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 2), FspR7CpTEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmTrafficEngineeringType.setStatus('current')
deployProvPathElementWdmLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmLifIp.setStatus('current')
deployProvPathElementWdmNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmNodeIp.setStatus('current')
deployProvPathElementWdmTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmTid.setStatus('current')
deployProvPathElementWdmLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmLogicalInterfaceId.setStatus('current')
deployProvPathElementWdmTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 7), FspR7CpTie()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmTie.setStatus('current')
deployProvPathElementWdmChannelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 8), FspR7ChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmChannelUp.setStatus('current')
deployProvPathElementWdmChannelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 9), FspR7ChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmChannelDown.setStatus('current')
deployProvPathElementWdmUpstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 10), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmUpstreamModuleAid.setStatus('current')
deployProvPathElementWdmDownstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 11), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmDownstreamModuleAid.setStatus('current')
deployProvPathElementWdmCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22), )
if mibBuilder.loadTexts: deployProvPathElementWdmCapTable.setStatus('current')
deployProvPathElementWdmCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementWdmCapEntry.setStatus('current')
deployProvPathElementWdmCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapRowStatus.setStatus('current')
deployProvPathElementWdmCapTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 2), FspR7CpTETypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapTrafficEngineeringType.setStatus('current')
deployProvPathElementWdmCapLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapLifIp.setStatus('current')
deployProvPathElementWdmCapNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 4), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapNodeIp.setStatus('current')
deployProvPathElementWdmCapTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapTid.setStatus('current')
deployProvPathElementWdmCapLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapLogicalInterfaceId.setStatus('current')
deployProvPathElementWdmCapTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 7), FspR7CpTieCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapTie.setStatus('current')
deployProvPathElementWdmCapChannelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 8), FspR7ChannelNumberCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapChannelUp.setStatus('current')
deployProvPathElementWdmCapChannelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 9), FspR7ChannelNumberCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapChannelDown.setStatus('current')
deployProvPathElementWdmCapUpstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapUpstreamModuleAid.setStatus('current')
deployProvPathElementWdmCapDownstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapDownstreamModuleAid.setStatus('current')
deployProvPathElementWdmDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23), )
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTable.setStatus('current')
deployProvPathElementWdmDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsEntry.setStatus('current')
deployProvPathElementWdmDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsRowStatus.setStatus('current')
deployProvPathElementWdmDefaultsTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 2), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTrafficEngineeringType.setStatus('current')
deployProvPathElementWdmDefaultsLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsLifIp.setStatus('current')
deployProvPathElementWdmDefaultsNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsNodeIp.setStatus('current')
deployProvPathElementWdmDefaultsTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTid.setStatus('current')
deployProvPathElementWdmDefaultsLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsLogicalInterfaceId.setStatus('current')
deployProvPathElementWdmDefaultsTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 7), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTie.setStatus('current')
deployProvPathElementWdmDefaultsChannelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 8), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsChannelUp.setStatus('current')
deployProvPathElementWdmDefaultsChannelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 9), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsChannelDown.setStatus('current')
deployProvPathElementWdmDefaultsUpstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 10), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsUpstreamModuleAid.setStatus('current')
deployProvPathElementWdmDefaultsDownstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsDownstreamModuleAid.setStatus('current')
deployProvCopyPathWdmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 24), )
if mibBuilder.loadTexts: deployProvCopyPathWdmTable.setStatus('current')
deployProvCopyPathWdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 24, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathWdmEntry.setStatus('current')
deployProvCopyPathWdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 24, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathWdmRowStatus.setStatus('current')
deployProvCopyPathWdmSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 24, 1, 2), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathWdmSourcePathIndex.setStatus('current')
deployProvCopyPathWdmPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 24, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathWdmPathId.setStatus('current')
deployProvCopyPathWdmCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 25), )
if mibBuilder.loadTexts: deployProvCopyPathWdmCapTable.setStatus('current')
deployProvCopyPathWdmCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 25, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathWdmCapEntry.setStatus('current')
deployProvCopyPathWdmCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 25, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmCapRowStatus.setStatus('current')
deployProvCopyPathWdmCapSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmCapSourcePathIndex.setStatus('current')
deployProvCopyPathWdmCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmCapPathId.setStatus('current')
deployProvCopyPathWdmDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 26), )
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsTable.setStatus('current')
deployProvCopyPathWdmDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 26, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsEntry.setStatus('current')
deployProvCopyPathWdmDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 26, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsRowStatus.setStatus('current')
deployProvCopyPathWdmDefaultsSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 26, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsSourcePathIndex.setStatus('current')
deployProvCopyPathWdmDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 26, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsPathId.setStatus('current')
deployProvLogicalCpIfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46), )
if mibBuilder.loadTexts: deployProvLogicalCpIfTable.setStatus('current')
deployProvLogicalCpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalCpIfEntry.setStatus('current')
deployProvLogicalCpIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfRowStatus.setStatus('current')
deployProvLogicalCpIfFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 2), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFacilityType.setStatus('current')
deployProvLogicalCpIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfAlias.setStatus('current')
deployProvLogicalCpIfDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 4), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfDcnAid.setStatus('current')
deployProvLogicalCpIfOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 5), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfOspf.setStatus('current')
deployProvLogicalCpIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfAreaId.setStatus('current')
deployProvLogicalCpIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfMetric.setStatus('current')
deployProvLogicalCpIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfHelloInterval.setStatus('current')
deployProvLogicalCpIfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfDeadInterval.setStatus('current')
deployProvLogicalCpIfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfPrio.setStatus('current')
deployProvLogicalCpIfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfRetransmitInterval.setStatus('current')
deployProvLogicalCpIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 12), FspR7CpAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfAuthType.setStatus('current')
deployProvLogicalCpIfAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 13), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfAuthString.setStatus('current')
deployProvLogicalCpIfTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 14), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfTransport.setStatus('current')
deployProvLogicalCpIfFarEndLifId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 15), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFarEndLifId.setStatus('current')
deployProvLogicalCpIfFarEndNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFarEndNodeIp.setStatus('current')
deployProvLogicalCpIfFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 17), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFarEndTid.setStatus('current')
deployProvLogicalCpIfLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 18), FspR7PacketsLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfLayer.setStatus('current')
deployProvLogicalCpIfCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 19), FspR7CpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfCpType.setStatus('current')
deployProvLogicalCpIfRefreshTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfRefreshTimeout.setStatus('current')
deployProvLogicalCpIfRefreshMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfRefreshMultiplier.setStatus('current')
deployProvLogicalCpIfTeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfTeMetric.setStatus('current')
deployProvLogicalCpIfTeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfTeAreaId.setStatus('current')
deployProvLogicalCpIfLinkColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfLinkColor.setStatus('current')
deployProvLogicalCpIfIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 25), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfIpType.setStatus('current')
deployProvLogicalCpIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfIpAddr.setStatus('current')
deployProvLogicalCpIfIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfIpAddrMask.setStatus('current')
deployProvLogicalCpIfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 28), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfAdmin.setStatus('current')
deployProvLogicalCpIfEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 29), FspR7CpEncapsulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfEncapsulation.setStatus('current')
deployProvLogicalCpIfPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfPushedNendIpHeader.setStatus('current')
deployProvLogicalCpIfPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfPushedFarEndIpHeader.setStatus('current')
deployProvLogicalCpIfTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfTimeToLive.setStatus('current')
deployProvLogicalCpIfNendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfNendTeLinkIdNum.setStatus('current')
deployProvLogicalCpIfFendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFendTeLinkIdNum.setStatus('current')
deployProvLogicalCpIfFendDataLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFendDataLinkId.setStatus('current')
deployProvLogicalCpIfNendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfNendTeLinkIdUnn.setStatus('current')
deployProvLogicalCpIfFendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFendTeLinkIdUnn.setStatus('current')
deployProvLogicalCpIfEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 38), FspR7CpEncode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfEncoding.setStatus('current')
deployProvLogicalCpIfTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 39), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfTunnelAid.setStatus('current')
deployProvLogicalCpIfExtAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 40), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfExtAdvertised.setStatus('current')
deployProvLogicalCpIfVTeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 41), FspR7CpVTeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfVTeType.setStatus('current')
deployProvLogicalCpIfVNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 42), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfVNodeIp.setStatus('current')
deployProvLogicalCpIfVNodeTltp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 43), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfVNodeTltp.setStatus('current')
deployProvLogicalCpIfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47), )
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTable.setStatus('current')
deployProvLogicalCpIfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalCpIfCapEntry.setStatus('current')
deployProvLogicalCpIfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRowStatus.setStatus('current')
deployProvLogicalCpIfCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFacilityType.setStatus('current')
deployProvLogicalCpIfCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAlias.setStatus('current')
deployProvLogicalCpIfCapDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapDcnAid.setStatus('current')
deployProvLogicalCpIfCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 5), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapOspf.setStatus('current')
deployProvLogicalCpIfCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAreaId.setStatus('current')
deployProvLogicalCpIfCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapMetric.setStatus('current')
deployProvLogicalCpIfCapHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 8), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapHelloInterval.setStatus('current')
deployProvLogicalCpIfCapDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 9), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapDeadInterval.setStatus('current')
deployProvLogicalCpIfCapPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 10), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapPrio.setStatus('current')
deployProvLogicalCpIfCapRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 11), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRetransmitInterval.setStatus('current')
deployProvLogicalCpIfCapAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 12), FspR7CpAuthTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAuthType.setStatus('current')
deployProvLogicalCpIfCapAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAuthString.setStatus('current')
deployProvLogicalCpIfCapTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTransport.setStatus('current')
deployProvLogicalCpIfCapFarEndLifId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFarEndLifId.setStatus('current')
deployProvLogicalCpIfCapFarEndNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 16), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFarEndNodeIp.setStatus('current')
deployProvLogicalCpIfCapFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFarEndTid.setStatus('current')
deployProvLogicalCpIfCapLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 18), FspR7PacketsLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapLayer.setStatus('current')
deployProvLogicalCpIfCapCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 19), FspR7CpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapCpType.setStatus('current')
deployProvLogicalCpIfCapRefreshTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 20), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRefreshTimeout.setStatus('current')
deployProvLogicalCpIfCapRefreshMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 21), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRefreshMultiplier.setStatus('current')
deployProvLogicalCpIfCapTeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 22), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTeMetric.setStatus('current')
deployProvLogicalCpIfCapTeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 23), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTeAreaId.setStatus('current')
deployProvLogicalCpIfCapLinkColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 24), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapLinkColor.setStatus('current')
deployProvLogicalCpIfCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 25), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapIpType.setStatus('current')
deployProvLogicalCpIfCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 26), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapIpAddr.setStatus('current')
deployProvLogicalCpIfCapIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapIpAddrMask.setStatus('current')
deployProvLogicalCpIfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 28), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAdmin.setStatus('current')
deployProvLogicalCpIfCapEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 29), FspR7CpEncapsulationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapEncapsulation.setStatus('current')
deployProvLogicalCpIfCapPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 30), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapPushedNendIpHeader.setStatus('current')
deployProvLogicalCpIfCapPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 31), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapPushedFarEndIpHeader.setStatus('current')
deployProvLogicalCpIfCapTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 32), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTimeToLive.setStatus('current')
deployProvLogicalCpIfCapNendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 33), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapNendTeLinkIdNum.setStatus('current')
deployProvLogicalCpIfCapFendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 34), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFendTeLinkIdNum.setStatus('current')
deployProvLogicalCpIfCapFendDataLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 35), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFendDataLinkId.setStatus('current')
deployProvLogicalCpIfCapNendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 36), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapNendTeLinkIdUnn.setStatus('current')
deployProvLogicalCpIfCapFendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 37), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFendTeLinkIdUnn.setStatus('current')
deployProvLogicalCpIfCapEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 38), FspR7CpEncodeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapEncoding.setStatus('current')
deployProvLogicalCpIfCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTunnelAid.setStatus('current')
deployProvLogicalCpIfCapExtAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 40), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapExtAdvertised.setStatus('current')
deployProvLogicalCpIfCapVTeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 41), FspR7CpVTeTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapVTeType.setStatus('current')
deployProvLogicalCpIfCapVNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 42), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapVNodeIp.setStatus('current')
deployProvLogicalCpIfCapVNodeTltp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 43), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapVNodeTltp.setStatus('current')
deployProvLogicalCpIfDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48), )
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTable.setStatus('current')
deployProvLogicalCpIfDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsEntry.setStatus('current')
deployProvLogicalCpIfDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRowStatus.setStatus('current')
deployProvLogicalCpIfDefaultsFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFacilityType.setStatus('current')
deployProvLogicalCpIfDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAlias.setStatus('current')
deployProvLogicalCpIfDefaultsDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsDcnAid.setStatus('current')
deployProvLogicalCpIfDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 5), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsOspf.setStatus('current')
deployProvLogicalCpIfDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAreaId.setStatus('current')
deployProvLogicalCpIfDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsMetric.setStatus('current')
deployProvLogicalCpIfDefaultsHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsHelloInterval.setStatus('current')
deployProvLogicalCpIfDefaultsDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsDeadInterval.setStatus('current')
deployProvLogicalCpIfDefaultsPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsPrio.setStatus('current')
deployProvLogicalCpIfDefaultsRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRetransmitInterval.setStatus('current')
deployProvLogicalCpIfDefaultsAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 12), FspR7CpAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAuthType.setStatus('current')
deployProvLogicalCpIfDefaultsAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAuthString.setStatus('current')
deployProvLogicalCpIfDefaultsTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTransport.setStatus('current')
deployProvLogicalCpIfDefaultsFarEndLifId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 15), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFarEndLifId.setStatus('current')
deployProvLogicalCpIfDefaultsFarEndNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFarEndNodeIp.setStatus('current')
deployProvLogicalCpIfDefaultsFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFarEndTid.setStatus('current')
deployProvLogicalCpIfDefaultsLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 18), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsLayer.setStatus('current')
deployProvLogicalCpIfDefaultsCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 19), FspR7CpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsCpType.setStatus('current')
deployProvLogicalCpIfDefaultsRefreshTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRefreshTimeout.setStatus('current')
deployProvLogicalCpIfDefaultsRefreshMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRefreshMultiplier.setStatus('current')
deployProvLogicalCpIfDefaultsTeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTeMetric.setStatus('current')
deployProvLogicalCpIfDefaultsTeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTeAreaId.setStatus('current')
deployProvLogicalCpIfDefaultsLinkColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsLinkColor.setStatus('current')
deployProvLogicalCpIfDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 25), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsIpType.setStatus('current')
deployProvLogicalCpIfDefaultsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsIpAddr.setStatus('current')
deployProvLogicalCpIfDefaultsIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsIpAddrMask.setStatus('current')
deployProvLogicalCpIfDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 28), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAdmin.setStatus('current')
deployProvLogicalCpIfDefaultsEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 29), FspR7CpEncapsulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsEncapsulation.setStatus('current')
deployProvLogicalCpIfDefaultsPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsPushedNendIpHeader.setStatus('current')
deployProvLogicalCpIfDefaultsPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsPushedFarEndIpHeader.setStatus('current')
deployProvLogicalCpIfDefaultsTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTimeToLive.setStatus('current')
deployProvLogicalCpIfDefaultsNendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsNendTeLinkIdNum.setStatus('current')
deployProvLogicalCpIfDefaultsFendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 34), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFendTeLinkIdNum.setStatus('current')
deployProvLogicalCpIfDefaultsFendDataLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFendDataLinkId.setStatus('current')
deployProvLogicalCpIfDefaultsNendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsNendTeLinkIdUnn.setStatus('current')
deployProvLogicalCpIfDefaultsFendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFendTeLinkIdUnn.setStatus('current')
deployProvLogicalCpIfDefaultsEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 38), FspR7CpEncode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsEncoding.setStatus('current')
deployProvLogicalCpIfDefaultsTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 39), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTunnelAid.setStatus('current')
deployProvLogicalCpIfDefaultsExtAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 40), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsExtAdvertised.setStatus('current')
deployProvLogicalCpIfDefaultsVTeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 41), FspR7CpVTeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsVTeType.setStatus('current')
deployProvLogicalCpIfDefaultsVNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 42), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsVNodeIp.setStatus('current')
deployProvLogicalCpIfDefaultsVNodeTltp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 43), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsVNodeTltp.setStatus('current')
deployProvControlPlaneEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61), )
if mibBuilder.loadTexts: deployProvControlPlaneEthTable.setStatus('current')
deployProvControlPlaneEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneEthEntry.setStatus('current')
deployProvControlPlaneEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRowStatus.setStatus('current')
deployProvControlPlaneEthCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmConfigFlag.setStatus('current')
deployProvControlPlaneEthCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmTraceDetail.setStatus('current')
deployProvControlPlaneEthCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmSetupTimeout.setStatus('current')
deployProvControlPlaneEthCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmShutdownTimeout.setStatus('current')
deployProvControlPlaneEthCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmRetryWait.setStatus('current')
deployProvControlPlaneEthCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmRetryWaitMultiplier.setStatus('current')
deployProvControlPlaneEthCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmMaximumRetryWait.setStatus('current')
deployProvControlPlaneEthCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmMaximumRetryNumber.setStatus('current')
deployProvControlPlaneEthRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRaConfigFlag.setStatus('current')
deployProvControlPlaneEthRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRaTraceDetail.setStatus('current')
deployProvControlPlaneEthRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRaAlarmActivationTime.setStatus('current')
deployProvControlPlaneEthCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCmConfigFlag.setStatus('current')
deployProvControlPlaneEthCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCmTraceDetail.setStatus('current')
deployProvControlPlaneEthCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCmAlarmActivationTime.setStatus('current')
deployProvControlPlaneEthCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCmFisFrsTimeout.setStatus('current')
deployProvControlPlaneEthCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCmCrankBackTimeout.setStatus('current')
deployProvControlPlaneEthCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdbConfigFlag.setStatus('current')
deployProvControlPlaneEthCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdbDetail.setStatus('current')
deployProvControlPlaneEthCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdbMaxSize.setStatus('current')
deployProvControlPlaneEthRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRsvpMaxExpRestartTime.setStatus('current')
deployProvControlPlaneEthRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRsvpMaxExpRecoveryTime.setStatus('current')
deployProvControlPlaneEthRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRsvpConfigFlag.setStatus('current')
deployProvControlPlaneEthTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbConfigFlag.setStatus('current')
deployProvControlPlaneEthTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbTraceDetail.setStatus('current')
deployProvControlPlaneEthTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbMaxSize.setStatus('current')
deployProvControlPlaneEthTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbRouterId.setStatus('current')
deployProvControlPlaneEthTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbMinAdvertWait.setStatus('current')
deployProvControlPlaneEthNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasConfigFlag.setStatus('current')
deployProvControlPlaneEthNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasTraceDetail.setStatus('current')
deployProvControlPlaneEthNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasMaxSize.setStatus('current')
deployProvControlPlaneEthNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasAdvertWait.setStatus('current')
deployProvControlPlaneEthPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthPcConfigFlag.setStatus('current')
deployProvControlPlaneEthPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthPcTraceDetail.setStatus('current')
deployProvControlPlaneEthCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdConfigFlag.setStatus('current')
deployProvControlPlaneEthCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdTraceDetail.setStatus('current')
deployProvControlPlaneEthCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdResyncTimeout.setStatus('current')
deployProvControlPlaneEthRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRmConfigFlag.setStatus('current')
deployProvControlPlaneEthRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRmTraceDetail.setStatus('current')
deployProvControlPlaneEthRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRmTraceTarget.setStatus('current')
deployProvControlPlaneEthCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62), )
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTable.setStatus('current')
deployProvControlPlaneEthCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneEthCapEntry.setStatus('current')
deployProvControlPlaneEthCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRowStatus.setStatus('current')
deployProvControlPlaneEthCapCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmConfigFlag.setStatus('current')
deployProvControlPlaneEthCapCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmTraceDetail.setStatus('current')
deployProvControlPlaneEthCapCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 4), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmSetupTimeout.setStatus('current')
deployProvControlPlaneEthCapCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 5), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmShutdownTimeout.setStatus('current')
deployProvControlPlaneEthCapCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 6), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmRetryWait.setStatus('current')
deployProvControlPlaneEthCapCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmRetryWaitMultiplier.setStatus('current')
deployProvControlPlaneEthCapCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 8), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmMaximumRetryWait.setStatus('current')
deployProvControlPlaneEthCapCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmMaximumRetryNumber.setStatus('current')
deployProvControlPlaneEthCapRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 10), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRaConfigFlag.setStatus('current')
deployProvControlPlaneEthCapRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRaTraceDetail.setStatus('current')
deployProvControlPlaneEthCapRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 12), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRaAlarmActivationTime.setStatus('current')
deployProvControlPlaneEthCapCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 13), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmConfigFlag.setStatus('current')
deployProvControlPlaneEthCapCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 14), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmTraceDetail.setStatus('current')
deployProvControlPlaneEthCapCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 15), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmAlarmActivationTime.setStatus('current')
deployProvControlPlaneEthCapCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 16), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmFisFrsTimeout.setStatus('current')
deployProvControlPlaneEthCapCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 17), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmCrankBackTimeout.setStatus('current')
deployProvControlPlaneEthCapCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 18), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdbConfigFlag.setStatus('current')
deployProvControlPlaneEthCapCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 19), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdbDetail.setStatus('current')
deployProvControlPlaneEthCapCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 20), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdbMaxSize.setStatus('current')
deployProvControlPlaneEthCapRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 21), Counter64StringCaps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRsvpMaxExpRestartTime.setStatus('current')
deployProvControlPlaneEthCapRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 22), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRsvpMaxExpRecoveryTime.setStatus('current')
deployProvControlPlaneEthCapRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 23), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRsvpConfigFlag.setStatus('current')
deployProvControlPlaneEthCapTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 24), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbConfigFlag.setStatus('current')
deployProvControlPlaneEthCapTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 25), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbTraceDetail.setStatus('current')
deployProvControlPlaneEthCapTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 26), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbMaxSize.setStatus('current')
deployProvControlPlaneEthCapTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbRouterId.setStatus('current')
deployProvControlPlaneEthCapTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 28), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbMinAdvertWait.setStatus('current')
deployProvControlPlaneEthCapNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 29), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasConfigFlag.setStatus('current')
deployProvControlPlaneEthCapNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 30), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasTraceDetail.setStatus('current')
deployProvControlPlaneEthCapNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 31), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasMaxSize.setStatus('current')
deployProvControlPlaneEthCapNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 32), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasAdvertWait.setStatus('current')
deployProvControlPlaneEthCapPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 33), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapPcConfigFlag.setStatus('current')
deployProvControlPlaneEthCapPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 34), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapPcTraceDetail.setStatus('current')
deployProvControlPlaneEthCapCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 35), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdConfigFlag.setStatus('current')
deployProvControlPlaneEthCapCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 36), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdTraceDetail.setStatus('current')
deployProvControlPlaneEthCapCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 37), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdResyncTimeout.setStatus('current')
deployProvControlPlaneEthCapRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 38), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRmConfigFlag.setStatus('current')
deployProvControlPlaneEthCapRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 39), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRmTraceDetail.setStatus('current')
deployProvControlPlaneEthCapRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 40), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRmTraceTarget.setStatus('current')
deployProvControlPlaneEthDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63), )
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTable.setStatus('current')
deployProvControlPlaneEthDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsEntry.setStatus('current')
deployProvControlPlaneEthDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRowStatus.setStatus('current')
deployProvControlPlaneEthDefaultsCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmConfigFlag.setStatus('current')
deployProvControlPlaneEthDefaultsCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmTraceDetail.setStatus('current')
deployProvControlPlaneEthDefaultsCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmSetupTimeout.setStatus('current')
deployProvControlPlaneEthDefaultsCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmShutdownTimeout.setStatus('current')
deployProvControlPlaneEthDefaultsCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmRetryWait.setStatus('current')
deployProvControlPlaneEthDefaultsCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmRetryWaitMultiplier.setStatus('current')
deployProvControlPlaneEthDefaultsCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmMaximumRetryWait.setStatus('current')
deployProvControlPlaneEthDefaultsCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmMaximumRetryNumber.setStatus('current')
deployProvControlPlaneEthDefaultsRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRaConfigFlag.setStatus('current')
deployProvControlPlaneEthDefaultsRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRaTraceDetail.setStatus('current')
deployProvControlPlaneEthDefaultsRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRaAlarmActivationTime.setStatus('current')
deployProvControlPlaneEthDefaultsCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmConfigFlag.setStatus('current')
deployProvControlPlaneEthDefaultsCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmTraceDetail.setStatus('current')
deployProvControlPlaneEthDefaultsCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmAlarmActivationTime.setStatus('current')
deployProvControlPlaneEthDefaultsCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmFisFrsTimeout.setStatus('current')
deployProvControlPlaneEthDefaultsCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmCrankBackTimeout.setStatus('current')
deployProvControlPlaneEthDefaultsCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdbConfigFlag.setStatus('current')
deployProvControlPlaneEthDefaultsCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdbDetail.setStatus('current')
deployProvControlPlaneEthDefaultsCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdbMaxSize.setStatus('current')
deployProvControlPlaneEthDefaultsRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRsvpMaxExpRestartTime.setStatus('current')
deployProvControlPlaneEthDefaultsRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRsvpMaxExpRecoveryTime.setStatus('current')
deployProvControlPlaneEthDefaultsRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRsvpConfigFlag.setStatus('current')
deployProvControlPlaneEthDefaultsTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbConfigFlag.setStatus('current')
deployProvControlPlaneEthDefaultsTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbTraceDetail.setStatus('current')
deployProvControlPlaneEthDefaultsTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbMaxSize.setStatus('current')
deployProvControlPlaneEthDefaultsTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbRouterId.setStatus('current')
deployProvControlPlaneEthDefaultsTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbMinAdvertWait.setStatus('current')
deployProvControlPlaneEthDefaultsNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasConfigFlag.setStatus('current')
deployProvControlPlaneEthDefaultsNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasTraceDetail.setStatus('current')
deployProvControlPlaneEthDefaultsNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasMaxSize.setStatus('current')
deployProvControlPlaneEthDefaultsNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasAdvertWait.setStatus('current')
deployProvControlPlaneEthDefaultsPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsPcConfigFlag.setStatus('current')
deployProvControlPlaneEthDefaultsPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsPcTraceDetail.setStatus('current')
deployProvControlPlaneEthDefaultsCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdConfigFlag.setStatus('current')
deployProvControlPlaneEthDefaultsCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdTraceDetail.setStatus('current')
deployProvControlPlaneEthDefaultsCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdResyncTimeout.setStatus('current')
deployProvControlPlaneEthDefaultsRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRmConfigFlag.setStatus('current')
deployProvControlPlaneEthDefaultsRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRmTraceDetail.setStatus('current')
deployProvControlPlaneEthDefaultsRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRmTraceTarget.setStatus('current')
deployProvTunnelEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64), )
if mibBuilder.loadTexts: deployProvTunnelEthTable.setStatus('current')
deployProvTunnelEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelEthEntry.setStatus('current')
deployProvTunnelEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthRowStatus.setStatus('current')
deployProvTunnelEthTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthTunnelId.setStatus('current')
deployProvTunnelEthTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthTunnelNo.setStatus('current')
deployProvTunnelEthAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthAlias.setStatus('current')
deployProvTunnelEthTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 5), FspR7CpTunnelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthTunnelType.setStatus('current')
deployProvTunnelEthToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthToTid.setStatus('current')
deployProvTunnelEthToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthToNodeIp.setStatus('current')
deployProvTunnelEthFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 8), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthFromAid.setStatus('current')
deployProvTunnelEthToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 9), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthToAid.setStatus('current')
deployProvTunnelEthConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 10), FspR7Conn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthConnectionDirection.setStatus('current')
deployProvTunnelEthFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 11), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthFacilityType.setStatus('current')
deployProvTunnelEthProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthProvisionedPaths.setStatus('current')
deployProvTunnelEthPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 13), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthPin.setStatus('current')
deployProvTunnelEthCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 14), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthCirRcv.setStatus('current')
deployProvTunnelEthCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthCbsRcv.setStatus('current')
deployProvTunnelEthProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 16), FspR7CpProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthProtectionType.setStatus('current')
deployProvTunnelEthRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 17), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthRestorationType.setStatus('current')
deployProvTunnelEthMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 18), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthMonitorEntities.setStatus('current')
deployProvTunnelEthTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 19), FspR7CpTunnelScope()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthTunnelScope.setStatus('current')
deployProvTunnelEthLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 20), FspR7PacketsLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthLayer.setStatus('current')
deployProvTunnelEthOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 21), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthOifUni.setStatus('current')
deployProvTunnelEthCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65), )
if mibBuilder.loadTexts: deployProvTunnelEthCapTable.setStatus('current')
deployProvTunnelEthCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelEthCapEntry.setStatus('current')
deployProvTunnelEthCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapRowStatus.setStatus('current')
deployProvTunnelEthCapTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelId.setStatus('current')
deployProvTunnelEthCapTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelNo.setStatus('current')
deployProvTunnelEthCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapAlias.setStatus('current')
deployProvTunnelEthCapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 5), FspR7CpTunnelTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelType.setStatus('current')
deployProvTunnelEthCapToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapToTid.setStatus('current')
deployProvTunnelEthCapToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapToNodeIp.setStatus('current')
deployProvTunnelEthCapFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapFromAid.setStatus('current')
deployProvTunnelEthCapToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapToAid.setStatus('current')
deployProvTunnelEthCapConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 10), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapConnectionDirection.setStatus('current')
deployProvTunnelEthCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 11), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapFacilityType.setStatus('current')
deployProvTunnelEthCapProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapProvisionedPaths.setStatus('current')
deployProvTunnelEthCapPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 13), FspR7CpPinningCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapPin.setStatus('current')
deployProvTunnelEthCapCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 14), FspR7Unsigned32Caps()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapCirRcv.setStatus('current')
deployProvTunnelEthCapCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 15), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapCbsRcv.setStatus('current')
deployProvTunnelEthCapProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 16), FspR7CpProtectionTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapProtectionType.setStatus('current')
deployProvTunnelEthCapRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 17), FspR7CpRestorationTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapRestorationType.setStatus('current')
deployProvTunnelEthCapMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 18), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapMonitorEntities.setStatus('current')
deployProvTunnelEthCapTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 19), FspR7CpTunnelScopeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelScope.setStatus('current')
deployProvTunnelEthCapLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 20), FspR7PacketsLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapLayer.setStatus('current')
deployProvTunnelEthCapOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 21), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapOifUni.setStatus('current')
deployProvTunnelEthDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66), )
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTable.setStatus('current')
deployProvTunnelEthDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsEntry.setStatus('current')
deployProvTunnelEthDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsRowStatus.setStatus('current')
deployProvTunnelEthDefaultsTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelId.setStatus('current')
deployProvTunnelEthDefaultsTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelNo.setStatus('current')
deployProvTunnelEthDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsAlias.setStatus('current')
deployProvTunnelEthDefaultsTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 5), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelType.setStatus('current')
deployProvTunnelEthDefaultsToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsToTid.setStatus('current')
deployProvTunnelEthDefaultsToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsToNodeIp.setStatus('current')
deployProvTunnelEthDefaultsFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsFromAid.setStatus('current')
deployProvTunnelEthDefaultsToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsToAid.setStatus('current')
deployProvTunnelEthDefaultsConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsConnectionDirection.setStatus('current')
deployProvTunnelEthDefaultsFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 11), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsFacilityType.setStatus('current')
deployProvTunnelEthDefaultsProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsProvisionedPaths.setStatus('current')
deployProvTunnelEthDefaultsPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 13), FspR7CpPinning()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsPin.setStatus('current')
deployProvTunnelEthDefaultsCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 14), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsCirRcv.setStatus('current')
deployProvTunnelEthDefaultsCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsCbsRcv.setStatus('current')
deployProvTunnelEthDefaultsProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 16), FspR7CpProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsProtectionType.setStatus('current')
deployProvTunnelEthDefaultsRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 17), FspR7CpRestorationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsRestorationType.setStatus('current')
deployProvTunnelEthDefaultsMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 18), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsMonitorEntities.setStatus('current')
deployProvTunnelEthDefaultsTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 19), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelScope.setStatus('current')
deployProvTunnelEthDefaultsLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 20), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsLayer.setStatus('current')
deployProvTunnelEthDefaultsOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 21), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsOifUni.setStatus('current')
deployProvPathEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 67), )
if mibBuilder.loadTexts: deployProvPathEthTable.setStatus('current')
deployProvPathEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 67, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathEthEntry.setStatus('current')
deployProvPathEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 67, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathEthRowStatus.setStatus('current')
deployProvPathEthPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 67, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathEthPathId.setStatus('current')
deployProvPathEthCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 68), )
if mibBuilder.loadTexts: deployProvPathEthCapTable.setStatus('current')
deployProvPathEthCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 68, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathEthCapEntry.setStatus('current')
deployProvPathEthCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 68, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathEthCapRowStatus.setStatus('current')
deployProvPathEthCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 68, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathEthCapPathId.setStatus('current')
deployProvPathEthDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 69), )
if mibBuilder.loadTexts: deployProvPathEthDefaultsTable.setStatus('current')
deployProvPathEthDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 69, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathEthDefaultsEntry.setStatus('current')
deployProvPathEthDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 69, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathEthDefaultsRowStatus.setStatus('current')
deployProvPathEthDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 69, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathEthDefaultsPathId.setStatus('current')
deployProvPathElementEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70), )
if mibBuilder.loadTexts: deployProvPathElementEthTable.setStatus('current')
deployProvPathElementEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementEthEntry.setStatus('current')
deployProvPathElementEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthRowStatus.setStatus('current')
deployProvPathElementEthTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 2), FspR7CpTEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthTrafficEngineeringType.setStatus('current')
deployProvPathElementEthLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthLifIp.setStatus('current')
deployProvPathElementEthNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthNodeIp.setStatus('current')
deployProvPathElementEthTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthTid.setStatus('current')
deployProvPathElementEthLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthLogicalInterfaceId.setStatus('current')
deployProvPathElementEthTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 7), FspR7CpTie()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthTie.setStatus('current')
deployProvPathElementEthUpstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthUpstreamSvid.setStatus('current')
deployProvPathElementEthDownstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthDownstreamSvid.setStatus('current')
deployProvPathElementEthCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71), )
if mibBuilder.loadTexts: deployProvPathElementEthCapTable.setStatus('current')
deployProvPathElementEthCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementEthCapEntry.setStatus('current')
deployProvPathElementEthCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapRowStatus.setStatus('current')
deployProvPathElementEthCapTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 2), FspR7CpTETypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapTrafficEngineeringType.setStatus('current')
deployProvPathElementEthCapLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapLifIp.setStatus('current')
deployProvPathElementEthCapNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 4), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapNodeIp.setStatus('current')
deployProvPathElementEthCapTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapTid.setStatus('current')
deployProvPathElementEthCapLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapLogicalInterfaceId.setStatus('current')
deployProvPathElementEthCapTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 7), FspR7CpTieCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapTie.setStatus('current')
deployProvPathElementEthCapUpstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapUpstreamSvid.setStatus('current')
deployProvPathElementEthCapDownstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapDownstreamSvid.setStatus('current')
deployProvPathElementEthDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72), )
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTable.setStatus('current')
deployProvPathElementEthDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsEntry.setStatus('current')
deployProvPathElementEthDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsRowStatus.setStatus('current')
deployProvPathElementEthDefaultsTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 2), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTrafficEngineeringType.setStatus('current')
deployProvPathElementEthDefaultsLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsLifIp.setStatus('current')
deployProvPathElementEthDefaultsNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsNodeIp.setStatus('current')
deployProvPathElementEthDefaultsTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTid.setStatus('current')
deployProvPathElementEthDefaultsLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsLogicalInterfaceId.setStatus('current')
deployProvPathElementEthDefaultsTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 7), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTie.setStatus('current')
deployProvPathElementEthDefaultsUpstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsUpstreamSvid.setStatus('current')
deployProvPathElementEthDefaultsDownstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsDownstreamSvid.setStatus('current')
deployProvCopyPathEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 73), )
if mibBuilder.loadTexts: deployProvCopyPathEthTable.setStatus('current')
deployProvCopyPathEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 73, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathEthEntry.setStatus('current')
deployProvCopyPathEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 73, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathEthRowStatus.setStatus('current')
deployProvCopyPathEthSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 73, 1, 2), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathEthSourcePathIndex.setStatus('current')
deployProvCopyPathEthPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 73, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathEthPathId.setStatus('current')
deployProvCopyPathEthCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 74), )
if mibBuilder.loadTexts: deployProvCopyPathEthCapTable.setStatus('current')
deployProvCopyPathEthCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 74, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathEthCapEntry.setStatus('current')
deployProvCopyPathEthCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 74, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthCapRowStatus.setStatus('current')
deployProvCopyPathEthCapSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 74, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthCapSourcePathIndex.setStatus('current')
deployProvCopyPathEthCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 74, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthCapPathId.setStatus('current')
deployProvCopyPathEthDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 75), )
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsTable.setStatus('current')
deployProvCopyPathEthDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 75, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsEntry.setStatus('current')
deployProvCopyPathEthDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 75, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsRowStatus.setStatus('current')
deployProvCopyPathEthDefaultsSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 75, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsSourcePathIndex.setStatus('current')
deployProvCopyPathEthDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 75, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsPathId.setStatus('current')
deployProvPortBindingTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76), )
if mibBuilder.loadTexts: deployProvPortBindingTable.setStatus('current')
deployProvPortBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPortBindingEntry.setStatus('current')
deployProvPortBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRowStatus.setStatus('current')
deployProvPortBindingLogicalIfAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 2), EntityIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingLogicalIfAid.setStatus('current')
deployProvPortBindingLocalTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingLocalTna.setStatus('current')
deployProvPortBindingRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemotePort.setStatus('current')
deployProvPortBindingRemoteTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemoteTna.setStatus('current')
deployProvPortBindingRemoteTnaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemoteTnaMask.setStatus('current')
deployProvPortBindingRemoteNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemoteNodeIp.setStatus('current')
deployProvPortBindingRemoteScn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemoteScn.setStatus('current')
deployProvPortBindingRemoteScPc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemoteScPc.setStatus('current')
deployProvPortBindingLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 10), FspR7PacketsLayer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingLayer.setStatus('current')
deployProvPortBindingCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77), )
if mibBuilder.loadTexts: deployProvPortBindingCapTable.setStatus('current')
deployProvPortBindingCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPortBindingCapEntry.setStatus('current')
deployProvPortBindingCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRowStatus.setStatus('current')
deployProvPortBindingCapLogicalIfAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapLogicalIfAid.setStatus('current')
deployProvPortBindingCapLocalTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapLocalTna.setStatus('current')
deployProvPortBindingCapRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemotePort.setStatus('current')
deployProvPortBindingCapRemoteTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteTna.setStatus('current')
deployProvPortBindingCapRemoteTnaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteTnaMask.setStatus('current')
deployProvPortBindingCapRemoteNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteNodeIp.setStatus('current')
deployProvPortBindingCapRemoteScn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 8), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteScn.setStatus('current')
deployProvPortBindingCapRemoteScPc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 9), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteScPc.setStatus('current')
deployProvPortBindingCapLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 10), FspR7PacketsLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapLayer.setStatus('current')
deployProvPortBindingDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78), )
if mibBuilder.loadTexts: deployProvPortBindingDefaultsTable.setStatus('current')
deployProvPortBindingDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPortBindingDefaultsEntry.setStatus('current')
deployProvPortBindingDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRowStatus.setStatus('current')
deployProvPortBindingDefaultsLogicalIfAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsLogicalIfAid.setStatus('current')
deployProvPortBindingDefaultsLocalTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsLocalTna.setStatus('current')
deployProvPortBindingDefaultsRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemotePort.setStatus('current')
deployProvPortBindingDefaultsRemoteTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteTna.setStatus('current')
deployProvPortBindingDefaultsRemoteTnaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteTnaMask.setStatus('current')
deployProvPortBindingDefaultsRemoteNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteNodeIp.setStatus('current')
deployProvPortBindingDefaultsRemoteScn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteScn.setStatus('current')
deployProvPortBindingDefaultsRemoteScPc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteScPc.setStatus('current')
deployProvPortBindingDefaultsLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 10), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsLayer.setStatus('current')
deployProvPortBindingLifAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 79), )
if mibBuilder.loadTexts: deployProvPortBindingLifAidCapsTable.setStatus('current')
deployProvPortBindingLifAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 79, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "deployProvPortBindingLifAidCapsIndex"))
if mibBuilder.loadTexts: deployProvPortBindingLifAidCapsEntry.setStatus('current')
deployProvPortBindingLifAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 79, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingLifAidCapsIndex.setStatus('current')
deployProvControlPlaneOtnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100), )
if mibBuilder.loadTexts: deployProvControlPlaneOtnTable.setStatus('current')
deployProvControlPlaneOtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneOtnEntry.setStatus('current')
deployProvControlPlaneOtnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRowStatus.setStatus('current')
deployProvControlPlaneOtnCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmConfigFlag.setStatus('current')
deployProvControlPlaneOtnCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmTraceDetail.setStatus('current')
deployProvControlPlaneOtnCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmSetupTimeout.setStatus('current')
deployProvControlPlaneOtnCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmShutdownTimeout.setStatus('current')
deployProvControlPlaneOtnCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmRetryWait.setStatus('current')
deployProvControlPlaneOtnCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmRetryWaitMultiplier.setStatus('current')
deployProvControlPlaneOtnCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmMaximumRetryWait.setStatus('current')
deployProvControlPlaneOtnCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmMaximumRetryNumber.setStatus('current')
deployProvControlPlaneOtnRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRaConfigFlag.setStatus('current')
deployProvControlPlaneOtnRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRaTraceDetail.setStatus('current')
deployProvControlPlaneOtnRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRaAlarmActivationTime.setStatus('current')
deployProvControlPlaneOtnCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmConfigFlag.setStatus('current')
deployProvControlPlaneOtnCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmTraceDetail.setStatus('current')
deployProvControlPlaneOtnCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmAlarmActivationTime.setStatus('current')
deployProvControlPlaneOtnCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmFisFrsTimeout.setStatus('current')
deployProvControlPlaneOtnCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmCrankBackTimeout.setStatus('current')
deployProvControlPlaneOtnCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdbConfigFlag.setStatus('current')
deployProvControlPlaneOtnCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdbDetail.setStatus('current')
deployProvControlPlaneOtnCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdbMaxSize.setStatus('current')
deployProvControlPlaneOtnRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRsvpMaxExpRestartTime.setStatus('current')
deployProvControlPlaneOtnRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRsvpMaxExpRecoveryTime.setStatus('current')
deployProvControlPlaneOtnRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRsvpConfigFlag.setStatus('current')
deployProvControlPlaneOtnTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbConfigFlag.setStatus('current')
deployProvControlPlaneOtnTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbTraceDetail.setStatus('current')
deployProvControlPlaneOtnTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbMaxSize.setStatus('current')
deployProvControlPlaneOtnTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbRouterId.setStatus('current')
deployProvControlPlaneOtnTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbMinAdvertWait.setStatus('current')
deployProvControlPlaneOtnNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasConfigFlag.setStatus('current')
deployProvControlPlaneOtnNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasTraceDetail.setStatus('current')
deployProvControlPlaneOtnNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasMaxSize.setStatus('current')
deployProvControlPlaneOtnNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasAdvertWait.setStatus('current')
deployProvControlPlaneOtnPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnPcConfigFlag.setStatus('current')
deployProvControlPlaneOtnPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnPcTraceDetail.setStatus('current')
deployProvControlPlaneOtnCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdConfigFlag.setStatus('current')
deployProvControlPlaneOtnCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdTraceDetail.setStatus('current')
deployProvControlPlaneOtnCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdResyncTimeout.setStatus('current')
deployProvControlPlaneOtnRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRmConfigFlag.setStatus('current')
deployProvControlPlaneOtnRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRmTraceDetail.setStatus('current')
deployProvControlPlaneOtnRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRmTraceTarget.setStatus('current')
deployProvControlPlaneOtnNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 41), FspR7NodeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnNodeNameSyntax.setStatus('deprecated')
deployProvControlPlaneOtnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101), )
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTable.setStatus('current')
deployProvControlPlaneOtnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapEntry.setStatus('current')
deployProvControlPlaneOtnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRowStatus.setStatus('current')
deployProvControlPlaneOtnCapCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmConfigFlag.setStatus('current')
deployProvControlPlaneOtnCapCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmTraceDetail.setStatus('current')
deployProvControlPlaneOtnCapCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 4), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmSetupTimeout.setStatus('current')
deployProvControlPlaneOtnCapCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 5), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmShutdownTimeout.setStatus('current')
deployProvControlPlaneOtnCapCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 6), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmRetryWait.setStatus('current')
deployProvControlPlaneOtnCapCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmRetryWaitMultiplier.setStatus('current')
deployProvControlPlaneOtnCapCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 8), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmMaximumRetryWait.setStatus('current')
deployProvControlPlaneOtnCapCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmMaximumRetryNumber.setStatus('current')
deployProvControlPlaneOtnCapRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 10), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRaConfigFlag.setStatus('current')
deployProvControlPlaneOtnCapRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRaTraceDetail.setStatus('current')
deployProvControlPlaneOtnCapRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 12), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRaAlarmActivationTime.setStatus('current')
deployProvControlPlaneOtnCapCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 13), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmConfigFlag.setStatus('current')
deployProvControlPlaneOtnCapCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 14), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmTraceDetail.setStatus('current')
deployProvControlPlaneOtnCapCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 15), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmAlarmActivationTime.setStatus('current')
deployProvControlPlaneOtnCapCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 16), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmFisFrsTimeout.setStatus('current')
deployProvControlPlaneOtnCapCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 17), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmCrankBackTimeout.setStatus('current')
deployProvControlPlaneOtnCapCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 18), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdbConfigFlag.setStatus('current')
deployProvControlPlaneOtnCapCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 19), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdbDetail.setStatus('current')
deployProvControlPlaneOtnCapCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 20), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdbMaxSize.setStatus('current')
deployProvControlPlaneOtnCapRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 21), Counter64StringCaps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRsvpMaxExpRestartTime.setStatus('current')
deployProvControlPlaneOtnCapRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 22), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRsvpMaxExpRecoveryTime.setStatus('current')
deployProvControlPlaneOtnCapRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 23), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRsvpConfigFlag.setStatus('current')
deployProvControlPlaneOtnCapTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 24), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbConfigFlag.setStatus('current')
deployProvControlPlaneOtnCapTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 25), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbTraceDetail.setStatus('current')
deployProvControlPlaneOtnCapTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 26), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbMaxSize.setStatus('current')
deployProvControlPlaneOtnCapTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbRouterId.setStatus('current')
deployProvControlPlaneOtnCapTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 28), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbMinAdvertWait.setStatus('current')
deployProvControlPlaneOtnCapNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 29), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasConfigFlag.setStatus('current')
deployProvControlPlaneOtnCapNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 30), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasTraceDetail.setStatus('current')
deployProvControlPlaneOtnCapNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 31), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasMaxSize.setStatus('current')
deployProvControlPlaneOtnCapNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 32), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasAdvertWait.setStatus('current')
deployProvControlPlaneOtnCapPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 33), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapPcConfigFlag.setStatus('current')
deployProvControlPlaneOtnCapPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 34), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapPcTraceDetail.setStatus('current')
deployProvControlPlaneOtnCapCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 35), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdConfigFlag.setStatus('current')
deployProvControlPlaneOtnCapCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 36), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdTraceDetail.setStatus('current')
deployProvControlPlaneOtnCapCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 37), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdResyncTimeout.setStatus('current')
deployProvControlPlaneOtnCapRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 38), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRmConfigFlag.setStatus('current')
deployProvControlPlaneOtnCapRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 39), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRmTraceDetail.setStatus('current')
deployProvControlPlaneOtnCapRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 40), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRmTraceTarget.setStatus('current')
deployProvControlPlaneOtnCapNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 41), FspR7NodeIdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNodeNameSyntax.setStatus('deprecated')
deployProvControlPlaneOtnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102), )
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTable.setStatus('current')
deployProvControlPlaneOtnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsEntry.setStatus('current')
deployProvControlPlaneOtnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRowStatus.setStatus('current')
deployProvControlPlaneOtnDefaultsCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmConfigFlag.setStatus('current')
deployProvControlPlaneOtnDefaultsCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmTraceDetail.setStatus('current')
deployProvControlPlaneOtnDefaultsCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmSetupTimeout.setStatus('current')
deployProvControlPlaneOtnDefaultsCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmShutdownTimeout.setStatus('current')
deployProvControlPlaneOtnDefaultsCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmRetryWait.setStatus('current')
deployProvControlPlaneOtnDefaultsCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmRetryWaitMultiplier.setStatus('current')
deployProvControlPlaneOtnDefaultsCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmMaximumRetryWait.setStatus('current')
deployProvControlPlaneOtnDefaultsCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmMaximumRetryNumber.setStatus('current')
deployProvControlPlaneOtnDefaultsRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRaConfigFlag.setStatus('current')
deployProvControlPlaneOtnDefaultsRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRaTraceDetail.setStatus('current')
deployProvControlPlaneOtnDefaultsRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRaAlarmActivationTime.setStatus('current')
deployProvControlPlaneOtnDefaultsCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmConfigFlag.setStatus('current')
deployProvControlPlaneOtnDefaultsCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmTraceDetail.setStatus('current')
deployProvControlPlaneOtnDefaultsCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmAlarmActivationTime.setStatus('current')
deployProvControlPlaneOtnDefaultsCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmFisFrsTimeout.setStatus('current')
deployProvControlPlaneOtnDefaultsCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmCrankBackTimeout.setStatus('current')
deployProvControlPlaneOtnDefaultsCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdbConfigFlag.setStatus('current')
deployProvControlPlaneOtnDefaultsCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdbDetail.setStatus('current')
deployProvControlPlaneOtnDefaultsCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdbMaxSize.setStatus('current')
deployProvControlPlaneOtnDefaultsRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRsvpMaxExpRestartTime.setStatus('current')
deployProvControlPlaneOtnDefaultsRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRsvpMaxExpRecoveryTime.setStatus('current')
deployProvControlPlaneOtnDefaultsRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRsvpConfigFlag.setStatus('current')
deployProvControlPlaneOtnDefaultsTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbConfigFlag.setStatus('current')
deployProvControlPlaneOtnDefaultsTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbTraceDetail.setStatus('current')
deployProvControlPlaneOtnDefaultsTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbMaxSize.setStatus('current')
deployProvControlPlaneOtnDefaultsTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbRouterId.setStatus('current')
deployProvControlPlaneOtnDefaultsTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbMinAdvertWait.setStatus('current')
deployProvControlPlaneOtnDefaultsNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasConfigFlag.setStatus('current')
deployProvControlPlaneOtnDefaultsNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasTraceDetail.setStatus('current')
deployProvControlPlaneOtnDefaultsNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasMaxSize.setStatus('current')
deployProvControlPlaneOtnDefaultsNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasAdvertWait.setStatus('current')
deployProvControlPlaneOtnDefaultsPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsPcConfigFlag.setStatus('current')
deployProvControlPlaneOtnDefaultsPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsPcTraceDetail.setStatus('current')
deployProvControlPlaneOtnDefaultsCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdConfigFlag.setStatus('current')
deployProvControlPlaneOtnDefaultsCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdTraceDetail.setStatus('current')
deployProvControlPlaneOtnDefaultsCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdResyncTimeout.setStatus('current')
deployProvControlPlaneOtnDefaultsRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRmConfigFlag.setStatus('current')
deployProvControlPlaneOtnDefaultsRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRmTraceDetail.setStatus('current')
deployProvControlPlaneOtnDefaultsRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRmTraceTarget.setStatus('current')
deployProvControlPlaneOtnDefaultsNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 41), FspR7NodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNodeNameSyntax.setStatus('deprecated')
deployProvTunnelOtnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103), )
if mibBuilder.loadTexts: deployProvTunnelOtnTable.setStatus('current')
deployProvTunnelOtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelOtnEntry.setStatus('current')
deployProvTunnelOtnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnRowStatus.setStatus('current')
deployProvTunnelOtnTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelId.setStatus('current')
deployProvTunnelOtnTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelNo.setStatus('current')
deployProvTunnelOtnAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnAlias.setStatus('current')
deployProvTunnelOtnTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 5), FspR7CpTunnelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelType.setStatus('current')
deployProvTunnelOtnToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnToTid.setStatus('current')
deployProvTunnelOtnToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnToNodeIp.setStatus('current')
deployProvTunnelOtnFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 8), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnFromAid.setStatus('current')
deployProvTunnelOtnToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 9), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnToAid.setStatus('current')
deployProvTunnelOtnConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 10), FspR7Conn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnConnectionDirection.setStatus('current')
deployProvTunnelOtnFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 11), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnFacilityType.setStatus('current')
deployProvTunnelOtnProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnProvisionedPaths.setStatus('current')
deployProvTunnelOtnProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 13), FspR7CpProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnProtectionType.setStatus('current')
deployProvTunnelOtnPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 14), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnPin.setStatus('current')
deployProvTunnelOtnRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 15), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnRestorationType.setStatus('current')
deployProvTunnelOtnMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 16), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnMonitorEntities.setStatus('current')
deployProvTunnelOtnTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 17), FspR7CpTunnelScope()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelScope.setStatus('current')
deployProvTunnelOtnLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 18), FspR7PacketsLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnLayer.setStatus('current')
deployProvTunnelOtnOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 19), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnOifUni.setStatus('current')
deployProvTunnelOtnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104), )
if mibBuilder.loadTexts: deployProvTunnelOtnCapTable.setStatus('current')
deployProvTunnelOtnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelOtnCapEntry.setStatus('current')
deployProvTunnelOtnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapRowStatus.setStatus('current')
deployProvTunnelOtnCapTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelId.setStatus('current')
deployProvTunnelOtnCapTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelNo.setStatus('current')
deployProvTunnelOtnCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapAlias.setStatus('current')
deployProvTunnelOtnCapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 5), FspR7CpTunnelTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelType.setStatus('current')
deployProvTunnelOtnCapToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapToTid.setStatus('current')
deployProvTunnelOtnCapToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapToNodeIp.setStatus('current')
deployProvTunnelOtnCapFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapFromAid.setStatus('current')
deployProvTunnelOtnCapToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapToAid.setStatus('current')
deployProvTunnelOtnCapConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 10), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapConnectionDirection.setStatus('current')
deployProvTunnelOtnCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 11), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapFacilityType.setStatus('current')
deployProvTunnelOtnCapProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapProvisionedPaths.setStatus('current')
deployProvTunnelOtnCapProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 13), FspR7CpProtectionTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapProtectionType.setStatus('current')
deployProvTunnelOtnCapPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 14), FspR7CpPinningCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapPin.setStatus('current')
deployProvTunnelOtnCapRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 15), FspR7CpRestorationTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapRestorationType.setStatus('current')
deployProvTunnelOtnCapMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 16), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapMonitorEntities.setStatus('current')
deployProvTunnelOtnCapTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 17), FspR7CpTunnelScopeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelScope.setStatus('current')
deployProvTunnelOtnCapLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 18), FspR7PacketsLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapLayer.setStatus('current')
deployProvTunnelOtnCapOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 19), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapOifUni.setStatus('current')
deployProvTunnelOtnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105), )
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTable.setStatus('current')
deployProvTunnelOtnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsEntry.setStatus('current')
deployProvTunnelOtnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsRowStatus.setStatus('current')
deployProvTunnelOtnDefaultsTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelId.setStatus('current')
deployProvTunnelOtnDefaultsTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelNo.setStatus('current')
deployProvTunnelOtnDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsAlias.setStatus('current')
deployProvTunnelOtnDefaultsTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 5), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelType.setStatus('current')
deployProvTunnelOtnDefaultsToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsToTid.setStatus('current')
deployProvTunnelOtnDefaultsToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsToNodeIp.setStatus('current')
deployProvTunnelOtnDefaultsFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsFromAid.setStatus('current')
deployProvTunnelOtnDefaultsToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsToAid.setStatus('current')
deployProvTunnelOtnDefaultsConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsConnectionDirection.setStatus('current')
deployProvTunnelOtnDefaultsFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 11), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsFacilityType.setStatus('current')
deployProvTunnelOtnDefaultsProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsProvisionedPaths.setStatus('current')
deployProvTunnelOtnDefaultsProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 13), FspR7CpProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsProtectionType.setStatus('current')
deployProvTunnelOtnDefaultsPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 14), FspR7CpPinning()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsPin.setStatus('current')
deployProvTunnelOtnDefaultsRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 15), FspR7CpRestorationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsRestorationType.setStatus('current')
deployProvTunnelOtnDefaultsMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 16), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsMonitorEntities.setStatus('current')
deployProvTunnelOtnDefaultsTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 17), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelScope.setStatus('current')
deployProvTunnelOtnDefaultsLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 18), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsLayer.setStatus('current')
deployProvTunnelOtnDefaultsOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 19), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsOifUni.setStatus('current')
deployProvPathOtnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 106), )
if mibBuilder.loadTexts: deployProvPathOtnTable.setStatus('current')
deployProvPathOtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 106, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathOtnEntry.setStatus('current')
deployProvPathOtnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 106, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathOtnRowStatus.setStatus('current')
deployProvPathOtnPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 106, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathOtnPathId.setStatus('current')
deployProvPathOtnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 107), )
if mibBuilder.loadTexts: deployProvPathOtnCapTable.setStatus('current')
deployProvPathOtnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 107, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathOtnCapEntry.setStatus('current')
deployProvPathOtnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 107, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathOtnCapRowStatus.setStatus('current')
deployProvPathOtnCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 107, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathOtnCapPathId.setStatus('current')
deployProvPathOtnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 108), )
if mibBuilder.loadTexts: deployProvPathOtnDefaultsTable.setStatus('current')
deployProvPathOtnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 108, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathOtnDefaultsEntry.setStatus('current')
deployProvPathOtnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 108, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathOtnDefaultsRowStatus.setStatus('current')
deployProvPathOtnDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 108, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathOtnDefaultsPathId.setStatus('current')
deployProvPathElementOtnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109), )
if mibBuilder.loadTexts: deployProvPathElementOtnTable.setStatus('current')
deployProvPathElementOtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementOtnEntry.setStatus('current')
deployProvPathElementOtnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnRowStatus.setStatus('current')
deployProvPathElementOtnTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 2), FspR7CpTEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnTrafficEngineeringType.setStatus('current')
deployProvPathElementOtnLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnLifIp.setStatus('current')
deployProvPathElementOtnNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnNodeIp.setStatus('current')
deployProvPathElementOtnTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnTid.setStatus('current')
deployProvPathElementOtnLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnLogicalInterfaceId.setStatus('current')
deployProvPathElementOtnTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 7), FspR7CpTie()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnTie.setStatus('current')
deployProvPathElementOtnUpTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 8), FspR7OdtuType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributaryODTUType.setStatus('current')
deployProvPathElementOtnDownTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 9), FspR7OdtuType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributaryODTUType.setStatus('current')
deployProvPathElementOtnUpTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributaryPort.setStatus('current')
deployProvPathElementOtnDownTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributaryPort.setStatus('current')
deployProvPathElementOtnUpTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributarySlot.setStatus('current')
deployProvPathElementOtnDownTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 13), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributarySlot.setStatus('current')
deployProvPathElementOtnUpTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 14), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributaryTSMethod.setStatus('current')
deployProvPathElementOtnDownTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 15), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributaryTSMethod.setStatus('current')
deployProvPathElementOtnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110), )
if mibBuilder.loadTexts: deployProvPathElementOtnCapTable.setStatus('current')
deployProvPathElementOtnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementOtnCapEntry.setStatus('current')
deployProvPathElementOtnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapRowStatus.setStatus('current')
deployProvPathElementOtnCapTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 2), FspR7CpTETypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapTrafficEngineeringType.setStatus('current')
deployProvPathElementOtnCapLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapLifIp.setStatus('current')
deployProvPathElementOtnCapNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 4), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapNodeIp.setStatus('current')
deployProvPathElementOtnCapTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapTid.setStatus('current')
deployProvPathElementOtnCapLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapLogicalInterfaceId.setStatus('current')
deployProvPathElementOtnCapTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 7), FspR7CpTieCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapTie.setStatus('current')
deployProvPathElementOtnCapUpTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 8), FspR7OdtuTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributaryODTUType.setStatus('current')
deployProvPathElementOtnCapDownTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 9), FspR7OdtuTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributaryODTUType.setStatus('current')
deployProvPathElementOtnCapUpTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributaryPort.setStatus('current')
deployProvPathElementOtnCapDownTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributaryPort.setStatus('current')
deployProvPathElementOtnCapUpTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributarySlot.setStatus('current')
deployProvPathElementOtnCapDownTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributarySlot.setStatus('current')
deployProvPathElementOtnCapUpTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 14), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributaryTSMethod.setStatus('current')
deployProvPathElementOtnCapDownTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 15), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributaryTSMethod.setStatus('current')
deployProvPathElementOtnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111), )
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTable.setStatus('current')
deployProvPathElementOtnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsEntry.setStatus('current')
deployProvPathElementOtnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsRowStatus.setStatus('current')
deployProvPathElementOtnDefaultsTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 2), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTrafficEngineeringType.setStatus('current')
deployProvPathElementOtnDefaultsLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsLifIp.setStatus('current')
deployProvPathElementOtnDefaultsNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsNodeIp.setStatus('current')
deployProvPathElementOtnDefaultsTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTid.setStatus('current')
deployProvPathElementOtnDefaultsLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsLogicalInterfaceId.setStatus('current')
deployProvPathElementOtnDefaultsTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 7), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTie.setStatus('current')
deployProvPathElementOtnDefaultsUpTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 8), FspR7OdtuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributaryODTUType.setStatus('current')
deployProvPathElementOtnDefaultsDownTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 9), FspR7OdtuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributaryODTUType.setStatus('current')
deployProvPathElementOtnDefaultsUpTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributaryPort.setStatus('current')
deployProvPathElementOtnDefaultsDownTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributaryPort.setStatus('current')
deployProvPathElementOtnDefaultsUpTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributarySlot.setStatus('current')
deployProvPathElementOtnDefaultsDownTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributarySlot.setStatus('current')
deployProvPathElementOtnDefaultsUpTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 14), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributaryTSMethod.setStatus('current')
deployProvPathElementOtnDefaultsDownTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 15), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributaryTSMethod.setStatus('current')
deployProvCopyPathOtnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 112), )
if mibBuilder.loadTexts: deployProvCopyPathOtnTable.setStatus('current')
deployProvCopyPathOtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 112, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathOtnEntry.setStatus('current')
deployProvCopyPathOtnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 112, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathOtnRowStatus.setStatus('current')
deployProvCopyPathOtnSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 112, 1, 2), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathOtnSourcePathIndex.setStatus('current')
deployProvCopyPathOtnPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 112, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathOtnPathId.setStatus('current')
deployProvCopyPathOtnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 113), )
if mibBuilder.loadTexts: deployProvCopyPathOtnCapTable.setStatus('current')
deployProvCopyPathOtnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 113, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathOtnCapEntry.setStatus('current')
deployProvCopyPathOtnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 113, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnCapRowStatus.setStatus('current')
deployProvCopyPathOtnCapSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 113, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnCapSourcePathIndex.setStatus('current')
deployProvCopyPathOtnCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 113, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnCapPathId.setStatus('current')
deployProvCopyPathOtnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 114), )
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsTable.setStatus('current')
deployProvCopyPathOtnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 114, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsEntry.setStatus('current')
deployProvCopyPathOtnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 114, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsRowStatus.setStatus('current')
deployProvCopyPathOtnDefaultsSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 114, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsSourcePathIndex.setStatus('current')
deployProvCopyPathOtnDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 114, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsPathId.setStatus('current')
areaIdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 10), )
if mibBuilder.loadTexts: areaIdCapTable.setStatus('deprecated')
areaIdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "areaIdCapIndexCap"))
if mibBuilder.loadTexts: areaIdCapEntry.setStatus('deprecated')
areaIdCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 10, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: areaIdCapIndexCap.setStatus('current')
areaIdCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 10, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: areaIdCapStringCap.setStatus('current')
nendIpCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 11), )
if mibBuilder.loadTexts: nendIpCapTable.setStatus('current')
nendIpCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "nendIpCapIndexCap"))
if mibBuilder.loadTexts: nendIpCapEntry.setStatus('current')
nendIpCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 11, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nendIpCapIndexCap.setStatus('current')
nendIpCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 11, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nendIpCapStringCap.setStatus('current')
areaAidCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 12), )
if mibBuilder.loadTexts: areaAidCapTable.setStatus('current')
areaAidCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "areaIdCapIndexCap"))
if mibBuilder.loadTexts: areaAidCapEntry.setStatus('current')
areaAidCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 12, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: areaAidCapIndexCap.setStatus('current')
areaAidCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 12, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: areaAidCapStringCap.setStatus('current')
thresholdOtuTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1), )
if mibBuilder.loadTexts: thresholdOtuTable.setStatus('current')
thresholdOtuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOtuEntry.setStatus('current')
thresholdOtuESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuESHighThres15min.setStatus('current')
thresholdOtuESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuESHighThres1day.setStatus('current')
thresholdOtuSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuSESHighThres15min.setStatus('current')
thresholdOtuSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuSESHighThres1day.setStatus('current')
thresholdOtuBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuBbeHighThres15min.setStatus('current')
thresholdOtuBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuBbeHighThres1day.setStatus('current')
thresholdOtuUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuUASHighThres15min.setStatus('current')
thresholdOtuUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuUASHighThres1day.setStatus('current')
thresholdOduTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2), )
if mibBuilder.loadTexts: thresholdOduTable.setStatus('current')
thresholdOduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOduEntry.setStatus('current')
thresholdOduESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduESHighThres15min.setStatus('current')
thresholdOduESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduESHighThres1day.setStatus('current')
thresholdOduSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduSESHighThres15min.setStatus('current')
thresholdOduSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduSESHighThres1day.setStatus('current')
thresholdOduBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduBbeHighThres15min.setStatus('current')
thresholdOduBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduBbeHighThres1day.setStatus('current')
thresholdOduUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduUASHighThres15min.setStatus('current')
thresholdOduUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduUASHighThres1day.setStatus('current')
thresholdOduTcmATable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3), )
if mibBuilder.loadTexts: thresholdOduTcmATable.setStatus('current')
thresholdOduTcmAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOduTcmAEntry.setStatus('current')
thresholdOduTcmAESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmAESHighThres15min.setStatus('current')
thresholdOduTcmAESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmAESHighThres1day.setStatus('current')
thresholdOduTcmASESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmASESHighThres15min.setStatus('current')
thresholdOduTcmASESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmASESHighThres1day.setStatus('current')
thresholdOduTcmABbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmABbeHighThres15min.setStatus('current')
thresholdOduTcmABbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmABbeHighThres1day.setStatus('current')
thresholdOduTcmAUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmAUASHighThres15min.setStatus('current')
thresholdOduTcmAUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmAUASHighThres1day.setStatus('current')
thresholdOduTcmBTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4), )
if mibBuilder.loadTexts: thresholdOduTcmBTable.setStatus('current')
thresholdOduTcmBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOduTcmBEntry.setStatus('current')
thresholdOduTcmBBESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBBESHighThres15min.setStatus('current')
thresholdOduTcmBESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBESHighThres1day.setStatus('current')
thresholdOduTcmBSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBSESHighThres15min.setStatus('current')
thresholdOduTcmBSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBSESHighThres1day.setStatus('current')
thresholdOduTcmBOduTcmBBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBOduTcmBBbeHighThres15min.setStatus('current')
thresholdOduTcmBOduTcmBBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBOduTcmBBbeHighThres1day.setStatus('current')
thresholdOduTcmBUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBUASHighThres15min.setStatus('current')
thresholdOduTcmBUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBUASHighThres1day.setStatus('current')
thresholdSonetSectTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5), )
if mibBuilder.loadTexts: thresholdSonetSectTable.setStatus('current')
thresholdSonetSectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSonetSectEntry.setStatus('current')
thresholdSonetSectESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectESHighThres15min.setStatus('current')
thresholdSonetSectESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectESHighThres1day.setStatus('current')
thresholdSonetSectSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectSESHighThres15min.setStatus('current')
thresholdSonetSectSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectSESHighThres1day.setStatus('current')
thresholdSonetSectSEFSHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectSEFSHighThres15min.setStatus('current')
thresholdSonetSectSEFSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectSEFSHighThres1day.setStatus('current')
thresholdSonetSectCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectCVHighThres15min.setStatus('current')
thresholdSonetSectCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectCVHighThres1day.setStatus('current')
thresholdSonetLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6), )
if mibBuilder.loadTexts: thresholdSonetLineTable.setStatus('deprecated')
thresholdSonetLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSonetLineEntry.setStatus('deprecated')
thresholdSonetLineESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineESHighThres15min.setStatus('deprecated')
thresholdSonetLineESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineESHighThres1day.setStatus('deprecated')
thresholdSonetLineSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineSESHighThres15min.setStatus('deprecated')
thresholdSonetLineSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineSESHighThres1day.setStatus('deprecated')
thresholdSonetLineUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineUASHighThres15min.setStatus('deprecated')
thresholdSonetLineUASSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineUASSHighThres1day.setStatus('deprecated')
thresholdSonetLineCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineCVHighThres15min.setStatus('deprecated')
thresholdSonetLineCVSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineCVSHighThres1day.setStatus('deprecated')
thresholdSonetLineCViolHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 9), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineCViolHighThres15min.setStatus('deprecated')
thresholdSonetHoPathTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7), )
if mibBuilder.loadTexts: thresholdSonetHoPathTable.setStatus('current')
thresholdSonetHoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSonetHoPathEntry.setStatus('current')
thresholdSonetHoPathESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathESHighThres15min.setStatus('current')
thresholdSonetHoPathESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathESHighThres1day.setStatus('current')
thresholdSonetHoPathSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathSESHighThres15min.setStatus('current')
thresholdSonetHoPathSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathSESHighThres1day.setStatus('current')
thresholdSonetHoPathUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathUASHighThres15min.setStatus('current')
thresholdSonetHoPathUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathUASHighThres1day.setStatus('current')
thresholdSonetHoPathCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathCVHighThres15min.setStatus('current')
thresholdSonetHoPathCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathCVHighThres1day.setStatus('current')
thresholdSonetLoPathTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8), )
if mibBuilder.loadTexts: thresholdSonetLoPathTable.setStatus('current')
thresholdSonetLoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSonetLoPathEntry.setStatus('current')
thresholdSonetLoPathESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathESHighThres15min.setStatus('current')
thresholdSonetLoPathESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathESHighThres1day.setStatus('current')
thresholdSonetLoPathSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathSESHighThres15min.setStatus('current')
thresholdSonetLoPathSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathSESHighThres1day.setStatus('current')
thresholdSonetLoPathUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathUASHighThres15min.setStatus('current')
thresholdSonetLoPathUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathUASHighThres1day.setStatus('current')
thresholdSonetLoPathCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathCVHighThres15min.setStatus('current')
thresholdSonetLoPathCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathCVHighThres1day.setStatus('current')
thresholdPhysPerfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9), )
if mibBuilder.loadTexts: thresholdPhysPerfTable.setStatus('current')
thresholdPhysPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysPerfEntry.setStatus('current')
thresholdPhysPerfOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-450, 260), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOpticalInputPwrLow.setStatus('current')
thresholdPhysPerfOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-450, 260), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOpticalInputPwrHigh.setStatus('current')
thresholdPhysPerfOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOpticalOutputPwrLow.setStatus('current')
thresholdPhysPerfOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOpticalOutputPwrHigh.setStatus('current')
thresholdPhysPerfLaserBiasCurrentNormalized = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 5), Unsigned32()).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLaserBiasCurrentNormalized.setStatus('current')
thresholdPhysPerfAttRxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfAttRxLow.setStatus('current')
thresholdPhysPerfAttRxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 7), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfAttRxHigh.setStatus('current')
thresholdPhysPerfAttTxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 8), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfAttTxLow.setStatus('current')
thresholdPhysPerfAttTxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 9), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfAttTxHigh.setStatus('current')
thresholdPhysPerfLaserTempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 10), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLaserTempLowThres.setStatus('current')
thresholdPhysPerfLaserTempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 11), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLaserTempHighThres.setStatus('current')
thresholdPhysPerfPumpLaser1TempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 12), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser1TempHighThres.setStatus('current')
thresholdPhysPerfPumpLaser1TempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 13), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser1TempLowThres.setStatus('current')
thresholdPhysPerfPumpLaser2TempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 14), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser2TempHighThres.setStatus('current')
thresholdPhysPerfPumpLaser2TempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 15), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser2TempLowThres.setStatus('current')
thresholdPhysPerfOscPwrRcvHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-470, -50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOscPwrRcvHighThres.setStatus('current')
thresholdPhysPerfOscPwrRcvLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-470, -50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOscPwrRcvLowThres.setStatus('current')
thresholdPhysPerfRamanPumpPwrHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 18), Integer32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfRamanPumpPwrHighThres.setStatus('current')
thresholdPhysPerfRamanPumpPwrLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 19), Integer32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfRamanPumpPwrLowThres.setStatus('current')
thresholdPhysPerfConfigurableOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-500, 300), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfConfigurableOpticalOutputPwrLow.setStatus('current')
thresholdPhysPerfConfigurableOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-500, 300), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfConfigurableOpticalOutputPwrHigh.setStatus('current')
thresholdPhysPerfBrPwrReceivedHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-300, -180), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfBrPwrReceivedHighThres.setStatus('current')
thresholdPhysPerfDispersionCompensationLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-700, 700), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfDispersionCompensationLowThres.setStatus('current')
thresholdPhysPerfDispersionCompensationHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-700, 700), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfDispersionCompensationHighThres.setStatus('current')
thresholdPhysPerfLowerAtlinkThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 500), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLowerAtlinkThres.setStatus('current')
thresholdPhysPerfUpperAtlinkThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 500), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfUpperAtlinkThres.setStatus('current')
thresholdPhysPerfPumpLaser3TempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 27), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser3TempHighThres.setStatus('current')
thresholdPhysPerfPumpLaser3TempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 28), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser3TempLowThres.setStatus('current')
thresholdPhysPerfLatencyHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 300000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 us').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLatencyHighThres.setStatus('current')
thresholdPhysPerfLatencyLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 us').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLatencyLowThres.setStatus('current')
thresholdPhysPerfRoundTripDelayHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 30000000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfRoundTripDelayHighThres.setStatus('current')
thresholdPhysPerfRoundTripDelayLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30000000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfRoundTripDelayLowThres.setStatus('current')
thresholdPhysPerfPumpLaser4TempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 33), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser4TempHighThres.setStatus('current')
thresholdPhysPerfPumpLaser4TempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 34), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser4TempLowThres.setStatus('current')
thresholdPhysPerfLocalOscTempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 35), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLocalOscTempLowThres.setStatus('current')
thresholdPhysPerfLocalOscTempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 36), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLocalOscTempHighThres.setStatus('current')
thresholdPhysPerfDifferentialGroupDelayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfDifferentialGroupDelayHigh.setStatus('current')
thresholdPhysPerfChromaticDispersionLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfChromaticDispersionLow.setStatus('current')
thresholdPhysPerfChromaticDispersionHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfChromaticDispersionHigh.setStatus('current')
thresholdPhysPerfSignalToNoiseRatioLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(105, 160), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfSignalToNoiseRatioLow.setStatus('current')
thresholdPhysPerfCarrierFreqOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-32000, 32000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.001 GHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfCarrierFreqOffsetLow.setStatus('current')
thresholdPhysPerfCarrierFreqOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-32000, 32000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.001 GHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfCarrierFreqOffsetHigh.setStatus('current')
thresholdPhysConvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10), )
if mibBuilder.loadTexts: thresholdPhysConvTable.setStatus('current')
thresholdPhysConvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysConvEntry.setStatus('current')
thresholdPhysConvESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvESHighThres15min.setStatus('current')
thresholdPhysConvESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 89400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvESHighThres1day.setStatus('current')
thresholdPhysConvDEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvDEHighThres15min.setStatus('current')
thresholdPhysConvDEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvDEHighThres1day.setStatus('current')
thresholdPhysConvCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCVHighThres15min.setStatus('current')
thresholdPhysConvCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCVHighThres1day.setStatus('current')
thresholdEthRxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11), )
if mibBuilder.loadTexts: thresholdEthRxTable.setStatus('current')
thresholdEthRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdEthRxEntry.setStatus('current')
thresholdEthRxPauseFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxPauseFramesHighThres15Min.setStatus('current')
thresholdEthRxPauseFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxPauseFramesHighThres1Day.setStatus('current')
thresholdEthRxCrcFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxCrcFramesHighThres15Min.setStatus('current')
thresholdEthRxCrcFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxCrcFramesHighThres1Day.setStatus('current')
thresholdEthRxDiscardedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxDiscardedFramesHighThres15Min.setStatus('current')
thresholdEthRxDiscardedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxDiscardedFramesHighThres1Day.setStatus('current')
thresholdEthTxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12), )
if mibBuilder.loadTexts: thresholdEthTxTable.setStatus('current')
thresholdEthTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdEthTxEntry.setStatus('current')
thresholdEthTxPauseFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthTxPauseFramesHighThres15Min.setStatus('current')
thresholdEthTxPauseFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthTxPauseFramesHighThres1Day.setStatus('current')
thresholdEthTxCrcFramesEgressHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthTxCrcFramesEgressHighThres15Min.setStatus('current')
thresholdEthTxCrcFramesEgressHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthTxCrcFramesEgressHighThres1Day.setStatus('current')
thresholdGfpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13), )
if mibBuilder.loadTexts: thresholdGfpTable.setStatus('deprecated')
thresholdGfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdGfpEntry.setStatus('deprecated')
thresholdGfpCoreHecCorrectedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpCoreHecCorrectedFramesHighThres15Min.setStatus('deprecated')
thresholdGfpCoreHecCorrectedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpCoreHecCorrectedFramesHighThres1Day.setStatus('deprecated')
thresholdGfpTypeHecCorrectedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpTypeHecCorrectedFramesHighThres15Min.setStatus('deprecated')
thresholdGfpTypeHecCorrectedFramesHighThres15Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpTypeHecCorrectedFramesHighThres15Day.setStatus('deprecated')
thresholdGfpTypeHecDiscardedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpTypeHecDiscardedFramesHighThres15Min.setStatus('deprecated')
thresholdGfpTypeHecDiscardedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpTypeHecDiscardedFramesHighThres1Day.setStatus('deprecated')
thresholdGfpTHecDiscardedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpTHecDiscardedFramesHighThres1Day.setStatus('deprecated')
thresholdIntrusionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 15), )
if mibBuilder.loadTexts: thresholdIntrusionTable.setStatus('current')
thresholdIntrusionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 15, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdIntrusionEntry.setStatus('current')
thresholdIntrusionGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB/min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdIntrusionGradient.setStatus('current')
thresholdOtuFecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16), )
if mibBuilder.loadTexts: thresholdOtuFecTable.setStatus('deprecated')
thresholdOtuFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOtuFecEntry.setStatus('deprecated')
thresholdOtuFecESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecESHighThres15min.setStatus('deprecated')
thresholdOtuFecESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecESHighThres1day.setStatus('deprecated')
thresholdOtuFecSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSESHighThres15min.setStatus('deprecated')
thresholdOtuFecSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSESHighThres1day.setStatus('deprecated')
thresholdOtuFecCEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecCEHighThres15min.setStatus('deprecated')
thresholdOtuFecCEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecCEHighThres1day.setStatus('deprecated')
thresholdOtuFecUBEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecUBEHighThres15min.setStatus('deprecated')
thresholdOtuFecUBEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecUBEHighThres1day.setStatus('deprecated')
thresholdOtuFecCErrHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 9), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecCErrHighThres15min.setStatus('deprecated')
thresholdOtuFecCErrHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 10), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecCErrHighThres1day.setStatus('deprecated')
thresholdGfptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 17), )
if mibBuilder.loadTexts: thresholdGfptTable.setStatus('current')
thresholdGfptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 17, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdGfptEntry.setStatus('current')
thresholdGfptDiscardedSuperblocksHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 17, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfptDiscardedSuperblocksHighThres15Min.setStatus('current')
thresholdGfptDiscardedSuperblocksHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 17, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfptDiscardedSuperblocksHighThres1Day.setStatus('current')
thresholdSubAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18), )
if mibBuilder.loadTexts: thresholdSubAggregateTable.setStatus('current')
thresholdSubAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSubAggregateEntry.setStatus('current')
thresholdSubAggregateESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSubAggregateESHighThres15min.setStatus('current')
thresholdSubAggregateESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSubAggregateESHighThres1day.setStatus('current')
thresholdSubAggregateSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSubAggregateSESHighThres15min.setStatus('current')
thresholdSubAggregateSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSubAggregateSESHighThres1day.setStatus('current')
thresholdOduTcmCTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19), )
if mibBuilder.loadTexts: thresholdOduTcmCTable.setStatus('current')
thresholdOduTcmCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOduTcmCEntry.setStatus('current')
thresholdOduTcmCBESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCBESHighThres15min.setStatus('current')
thresholdOduTcmCESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCESHighThres1day.setStatus('current')
thresholdOduTcmCSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCSESHighThres15min.setStatus('current')
thresholdOduTcmCSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCSESHighThres1day.setStatus('current')
thresholdOduTcmCOduTcmCBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCOduTcmCBbeHighThres15min.setStatus('current')
thresholdOduTcmCOduTcmCBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCOduTcmCBbeHighThres1day.setStatus('current')
thresholdOduTcmCUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCUASHighThres15min.setStatus('current')
thresholdOduTcmCUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCUASHighThres1day.setStatus('current')
thresholdPhysConvHighSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20), )
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedTable.setStatus('current')
thresholdPhysConvHighSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedEntry.setStatus('current')
thresholdPhysConvHighSpeedESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedESHighThres15min.setStatus('current')
thresholdPhysConvHighSpeedESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 89400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedESHighThres1day.setStatus('current')
thresholdPhysConvHighSpeedCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 3), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedCVHighThres15min.setStatus('current')
thresholdPhysConvHighSpeedCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 4), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedCVHighThres1day.setStatus('current')
thresholdPhysConvHighSpeedSEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedSEHighThres15min.setStatus('current')
thresholdPhysConvHighSpeedSEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedSEHighThres1day.setStatus('current')
thresholdEthRxHighSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21), )
if mibBuilder.loadTexts: thresholdEthRxHighSpeedTable.setStatus('current')
thresholdEthRxHighSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdEthRxHighSpeedEntry.setStatus('current')
thresholdEthRxHighSpeedPauseFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxHighSpeedPauseFramesHighThres15Min.setStatus('current')
thresholdEthRxHighSpeedPauseFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxHighSpeedPauseFramesHighThres1Day.setStatus('current')
thresholdEthRxHighSpeedCrcFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxHighSpeedCrcFramesHighThres15Min.setStatus('current')
thresholdEthRxHighSpeedCrcFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxHighSpeedCrcFramesHighThres1Day.setStatus('current')
thresholdPhysPerfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22), )
if mibBuilder.loadTexts: thresholdPhysPerfCapTable.setStatus('current')
thresholdPhysPerfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysPerfCapEntry.setStatus('current')
thresholdPhysPerfCapOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapOpticalInputPwrLow.setStatus('current')
thresholdPhysPerfCapOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapOpticalInputPwrHigh.setStatus('current')
thresholdPhysPerfCapAttRxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapAttRxLow.setStatus('current')
thresholdPhysPerfCapAttRxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 4), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapAttRxHigh.setStatus('current')
thresholdPhysPerfCapAttTxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 5), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapAttTxLow.setStatus('current')
thresholdPhysPerfCapAttTxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 6), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapAttTxHigh.setStatus('current')
thresholdPhysPerfCapOscPwrRcvHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 7), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapOscPwrRcvHighThres.setStatus('current')
thresholdPhysPerfCapOscPwrRcvLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 8), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapOscPwrRcvLowThres.setStatus('current')
thresholdPhysPerfCapConfigurableOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 9), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapConfigurableOpticalOutputPwrLow.setStatus('current')
thresholdPhysPerfCapConfigurableOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 10), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapConfigurableOpticalOutputPwrHigh.setStatus('current')
thresholdPhysPerfCapBrPwrReceivedHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 11), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapBrPwrReceivedHighThres.setStatus('current')
thresholdPhysPerfCapDispersionCompensationLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 12), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapDispersionCompensationLowThres.setStatus('current')
thresholdPhysPerfCapDispersionCompensationHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 13), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapDispersionCompensationHighThres.setStatus('current')
thresholdPhysPerfCapLowerAtlinkThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 14), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapLowerAtlinkThres.setStatus('current')
thresholdPhysPerfCapUpperAtlinkThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 15), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapUpperAtlinkThres.setStatus('current')
thresholdPhysPerfCapLatencyLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 16), FspR7Integer32Caps()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapLatencyLowThres.setStatus('current')
thresholdPhysPerfCapLatencyHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 17), FspR7Integer32Caps()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapLatencyHighThres.setStatus('current')
thresholdPhysPerfCapRoundTripDelayHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 18), FspR7Integer32Caps()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapRoundTripDelayHighThres.setStatus('current')
thresholdPhysPerfCapRoundTripDelayLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 19), FspR7Integer32Caps()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapRoundTripDelayLowThres.setStatus('current')
thresholdPhysPerfCapDifferentialGroupDelayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 20), FspR7Integer32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapDifferentialGroupDelayHigh.setStatus('current')
thresholdPhysPerfCapChromaticDispersionLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 21), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapChromaticDispersionLow.setStatus('current')
thresholdPhysPerfCapChromaticDispersionHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 22), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapChromaticDispersionHigh.setStatus('current')
thresholdPhysPerfCapSignalToNoiseRatioLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 23), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapSignalToNoiseRatioLow.setStatus('current')
thresholdPhysPerfCapCarrierFreqOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 24), FspR7Integer32Caps()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapCarrierFreqOffsetLow.setStatus('current')
thresholdPhysPerfCapCarrierFreqOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 25), FspR7Integer32Caps()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapCarrierFreqOffsetHigh.setStatus('current')
thresholdFarEndPhysPerfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23), )
if mibBuilder.loadTexts: thresholdFarEndPhysPerfTable.setStatus('current')
thresholdFarEndPhysPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdFarEndPhysPerfEntry.setStatus('current')
thresholdFarEndPhysPerfOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-450, 260), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalInputPwrLow.setStatus('current')
thresholdFarEndPhysPerfOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-450, 260), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalInputPwrHigh.setStatus('current')
thresholdFarEndPhysPerfOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalOutputPwrLow.setStatus('current')
thresholdFarEndPhysPerfOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalOutputPwrHigh.setStatus('current')
thresholdFarEndPhysPerfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 24), )
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapTable.setStatus('current')
thresholdFarEndPhysPerfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 24, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapEntry.setStatus('current')
thresholdFarEndPhysPerfCapOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 24, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapOpticalInputPwrLow.setStatus('current')
thresholdFarEndPhysPerfCapOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 24, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapOpticalInputPwrHigh.setStatus('current')
thresholdPhysConvTxHighSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25), )
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedTable.setStatus('current')
thresholdPhysConvTxHighSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedEntry.setStatus('current')
thresholdPhysConvTxHighSpeedESTXHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedESTXHighThres15min.setStatus('current')
thresholdPhysConvTxHighSpeedESTXHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 89400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedESTXHighThres1day.setStatus('current')
thresholdPhysConvTxHighSpeedCVTXHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 3), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedCVTXHighThres15min.setStatus('current')
thresholdPhysConvTxHighSpeedCVTXHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 4), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedCVTXHighThres1day.setStatus('current')
thresholdPhysConvTxHighSpeedSETXHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedSETXHighThres15min.setStatus('current')
thresholdPhysConvTxHighSpeedSETXHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedSETXHighThres1day.setStatus('current')
thresholdDefectSecondsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 14), )
if mibBuilder.loadTexts: thresholdDefectSecondsTable.setStatus('current')
thresholdDefectSecondsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdDefectSecondsEntry.setStatus('current')
thresholdDefectSecondsDefectSecondsHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdDefectSecondsDefectSecondsHighThres15Min.setStatus('current')
thresholdDefectSecondsDefectSecondsHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdDefectSecondsDefectSecondsHighThres1Day.setStatus('current')
currentOtu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1), )
if mibBuilder.loadTexts: currentOtu15minTable.setStatus('current')
currentOtu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtu15minEntry.setStatus('current')
currentOtu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu15minES.setStatus('current')
currentOtu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu15minSES.setStatus('current')
currentOtu15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu15minBbe.setStatus('current')
currentOtu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu15minUAS.setStatus('current')
currentOtu15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu15minElapsedTime.setStatus('current')
currentOtu1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2), )
if mibBuilder.loadTexts: currentOtu1dayTable.setStatus('current')
currentOtu1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtu1dayEntry.setStatus('current')
currentOtu1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu1dayES.setStatus('current')
currentOtu1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu1daySES.setStatus('current')
currentOtu1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu1dayBbe.setStatus('current')
currentOtu1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu1dayUAS.setStatus('current')
currentOtu1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu1dayElapsedTime.setStatus('current')
intervalOtu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3), )
if mibBuilder.loadTexts: intervalOtu15minTable.setStatus('current')
intervalOtu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtu15minNumber"))
if mibBuilder.loadTexts: intervalOtu15minEntry.setStatus('current')
intervalOtu15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOtu15minNumber.setStatus('current')
intervalOtu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minES.setStatus('current')
intervalOtu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minSES.setStatus('current')
intervalOtu15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minBbe.setStatus('current')
intervalOtu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minUAS.setStatus('current')
intervalOtu15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minValidFlag.setStatus('current')
intervalOtu15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minTimeStamp.setStatus('current')
intervalOtu1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4), )
if mibBuilder.loadTexts: intervalOtu1dayTable.setStatus('current')
intervalOtu1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtu1dayNumber"))
if mibBuilder.loadTexts: intervalOtu1dayEntry.setStatus('current')
intervalOtu1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOtu1dayNumber.setStatus('current')
intervalOtu1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1dayES.setStatus('current')
intervalOtu1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1daySES.setStatus('current')
intervalOtu1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1dayBbe.setStatus('current')
intervalOtu1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1dayUAS.setStatus('current')
intervalOtu1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1dayValidFlag.setStatus('current')
intervalOtu1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1dayTimeStamp.setStatus('current')
currentOdu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5), )
if mibBuilder.loadTexts: currentOdu15minTable.setStatus('current')
currentOdu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOdu15minEntry.setStatus('current')
currentOdu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu15minES.setStatus('current')
currentOdu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu15minSES.setStatus('current')
currentOdu15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu15minBbe.setStatus('current')
currentOdu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu15minUAS.setStatus('current')
currentOdu15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu15minElapsedTime.setStatus('current')
currentOdu1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6), )
if mibBuilder.loadTexts: currentOdu1dayTable.setStatus('current')
currentOdu1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOdu1dayEntry.setStatus('current')
currentOdu1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu1dayES.setStatus('current')
currentOdu1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu1daySES.setStatus('current')
currentOdu1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu1dayBbe.setStatus('current')
currentOdu1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu1dayUAS.setStatus('current')
currentOdu1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu1dayElapsedTime.setStatus('current')
intervalOdu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7), )
if mibBuilder.loadTexts: intervalOdu15minTable.setStatus('current')
intervalOdu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOdu15minNumber"))
if mibBuilder.loadTexts: intervalOdu15minEntry.setStatus('current')
intervalOdu15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOdu15minNumber.setStatus('current')
intervalOdu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minES.setStatus('current')
intervalOdu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minSES.setStatus('current')
intervalOdu15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minBbe.setStatus('current')
intervalOdu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minUAS.setStatus('current')
intervalOdu15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minValidFlag.setStatus('current')
intervalOdu15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minTimeStamp.setStatus('current')
intervalOdu1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8), )
if mibBuilder.loadTexts: intervalOdu1dayTable.setStatus('current')
intervalOdu1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOdu1dayNumber"))
if mibBuilder.loadTexts: intervalOdu1dayEntry.setStatus('current')
intervalOdu1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOdu1dayNumber.setStatus('current')
intervalOdu1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1dayES.setStatus('current')
intervalOdu1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1daySES.setStatus('current')
intervalOdu1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1dayBbe.setStatus('current')
intervalOdu1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1dayUAS.setStatus('current')
intervalOdu1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1dayValidFlag.setStatus('current')
intervalOdu1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1dayTimeStamp.setStatus('current')
currentOduTcmA15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9), )
if mibBuilder.loadTexts: currentOduTcmA15minTable.setStatus('current')
currentOduTcmA15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmA15minEntry.setStatus('current')
currentOduTcmA15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA15minES.setStatus('current')
currentOduTcmA15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA15minSES.setStatus('current')
currentOduTcmA15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA15minBbe.setStatus('current')
currentOduTcmA15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA15minUAS.setStatus('current')
currentOduTcmA15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA15minElapsedTime.setStatus('current')
currentOduTcmA1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10), )
if mibBuilder.loadTexts: currentOduTcmA1dayTable.setStatus('current')
currentOduTcmA1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmA1dayEntry.setStatus('current')
currentOduTcmA1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA1dayES.setStatus('current')
currentOduTcmA1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA1daySES.setStatus('current')
currentOduTcmA1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA1dayBbe.setStatus('current')
currentOduTcmA1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA1dayUAS.setStatus('current')
currentOduTcmA1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA1dayElapsedTime.setStatus('current')
intervalOduTcmA15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11), )
if mibBuilder.loadTexts: intervalOduTcmA15minTable.setStatus('current')
intervalOduTcmA15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmA15minNumber"))
if mibBuilder.loadTexts: intervalOduTcmA15minEntry.setStatus('current')
intervalOduTcmA15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOduTcmA15minNumber.setStatus('current')
intervalOduTcmA15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minES.setStatus('current')
intervalOduTcmA15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minSES.setStatus('current')
intervalOduTcmA15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minBbe.setStatus('current')
intervalOduTcmA15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minUAS.setStatus('current')
intervalOduTcmA15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minValidFlag.setStatus('current')
intervalOduTcmA15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minTimeStamp.setStatus('current')
intervalOduTcmA1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12), )
if mibBuilder.loadTexts: intervalOduTcmA1dayTable.setStatus('current')
intervalOduTcmA1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmA1dayNumber"))
if mibBuilder.loadTexts: intervalOduTcmA1dayEntry.setStatus('current')
intervalOduTcmA1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOduTcmA1dayNumber.setStatus('current')
intervalOduTcmA1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1dayES.setStatus('current')
intervalOduTcmA1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1daySES.setStatus('current')
intervalOduTcmA1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1dayBbe.setStatus('current')
intervalOduTcmA1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1dayUAS.setStatus('current')
intervalOduTcmA1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1dayValidFlag.setStatus('current')
intervalOduTcmA1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1dayTimeStamp.setStatus('current')
currentOduTcmB15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13), )
if mibBuilder.loadTexts: currentOduTcmB15minTable.setStatus('current')
currentOduTcmB15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmB15minEntry.setStatus('current')
currentOduTcmB15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB15minES.setStatus('current')
currentOduTcmB15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB15minSES.setStatus('current')
currentOduTcmB15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB15minBbe.setStatus('current')
currentOduTcmB15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB15minUAS.setStatus('current')
currentOduTcmB15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB15minElapsedTime.setStatus('current')
currentOduTcmB1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14), )
if mibBuilder.loadTexts: currentOduTcmB1dayTable.setStatus('current')
currentOduTcmB1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmB1dayEntry.setStatus('current')
currentOduTcmB1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB1dayES.setStatus('current')
currentOduTcmB1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB1daySES.setStatus('current')
currentOduTcmB1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB1dayBbe.setStatus('current')
currentOduTcmB1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB1dayUAS.setStatus('current')
currentOduTcmB1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB1dayElapsedTime.setStatus('current')
intervalOduTcmB15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15), )
if mibBuilder.loadTexts: intervalOduTcmB15minTable.setStatus('current')
intervalOduTcmB15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmB15minNumber"))
if mibBuilder.loadTexts: intervalOduTcmB15minEntry.setStatus('current')
intervalOduTcmB15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOduTcmB15minNumber.setStatus('current')
intervalOduTcmB15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minES.setStatus('current')
intervalOduTcmB15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minSES.setStatus('current')
intervalOduTcmB15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minBbe.setStatus('current')
intervalOduTcmB15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minUAS.setStatus('current')
intervalOduTcmB15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minValidFlag.setStatus('current')
intervalOduTcmB15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minTimeStamp.setStatus('current')
intervalOduTcmB1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16), )
if mibBuilder.loadTexts: intervalOduTcmB1dayTable.setStatus('current')
intervalOduTcmB1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmB1dayNumber"))
if mibBuilder.loadTexts: intervalOduTcmB1dayEntry.setStatus('current')
intervalOduTcmB1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOduTcmB1dayNumber.setStatus('current')
intervalOduTcmB1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1dayES.setStatus('current')
intervalOduTcmB1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1daySES.setStatus('current')
intervalOduTcmB1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1dayBbe.setStatus('current')
intervalOduTcmB1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1dayUAS.setStatus('current')
intervalOduTcmB1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1dayValidFlag.setStatus('current')
intervalOduTcmB1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1dayTimeStamp.setStatus('current')
currentSonetSect15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17), )
if mibBuilder.loadTexts: currentSonetSect15minTable.setStatus('current')
currentSonetSect15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetSect15minEntry.setStatus('current')
currentSonetSect15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect15minES.setStatus('current')
currentSonetSect15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect15minSES.setStatus('current')
currentSonetSect15minSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect15minSEFS.setStatus('current')
currentSonetSect15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect15minCV.setStatus('current')
currentSonetSect15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect15minElapsedTime.setStatus('current')
currentSonetSect1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18), )
if mibBuilder.loadTexts: currentSonetSect1dayTable.setStatus('current')
currentSonetSect1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetSect1dayEntry.setStatus('current')
currentSonetSect1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect1dayES.setStatus('current')
currentSonetSect1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect1daySES.setStatus('current')
currentSonetSect1daySEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect1daySEFS.setStatus('current')
currentSonetSect1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect1dayCV.setStatus('current')
currentSonetSect1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect1dayElapsedTime.setStatus('current')
intervalSonetSect15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19), )
if mibBuilder.loadTexts: intervalSonetSect15minTable.setStatus('current')
intervalSonetSect15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetSect15minNumber"))
if mibBuilder.loadTexts: intervalSonetSect15minEntry.setStatus('current')
intervalSonetSect15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalSonetSect15minNumber.setStatus('current')
intervalSonetSect15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minES.setStatus('current')
intervalSonetSect15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minSES.setStatus('current')
intervalSonetSect15minSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minSEFS.setStatus('current')
intervalSonetSect15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minCV.setStatus('current')
intervalSonetSect15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minValidFlag.setStatus('current')
intervalSonetSect15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minTimeStamp.setStatus('current')
intervalSonetSect1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20), )
if mibBuilder.loadTexts: intervalSonetSect1dayTable.setStatus('current')
intervalSonetSect1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetSect1dayNumber"))
if mibBuilder.loadTexts: intervalSonetSect1dayEntry.setStatus('current')
intervalSonetSect1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalSonetSect1dayNumber.setStatus('current')
intervalSonetSect1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1dayES.setStatus('current')
intervalSonetSect1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1daySES.setStatus('current')
intervalSonetSect1daySEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1daySEFS.setStatus('current')
intervalSonetSect1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1dayCV.setStatus('current')
intervalSonetSect1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1dayValidFlag.setStatus('current')
intervalSonetSect1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1dayTimeStamp.setStatus('current')
currentSonetLine15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21), )
if mibBuilder.loadTexts: currentSonetLine15minTable.setStatus('current')
currentSonetLine15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetLine15minEntry.setStatus('current')
currentSonetLine15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine15minES.setStatus('current')
currentSonetLine15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine15minSES.setStatus('current')
currentSonetLine15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine15minUAS.setStatus('current')
currentSonetLine15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine15minCV.setStatus('current')
currentSonetLine15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine15minElapsedTime.setStatus('current')
currentSonetLine1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22), )
if mibBuilder.loadTexts: currentSonetLine1dayTable.setStatus('current')
currentSonetLine1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetLine1dayEntry.setStatus('current')
currentSonetLine1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine1dayES.setStatus('current')
currentSonetLine1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine1daySES.setStatus('current')
currentSonetLine1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine1dayUAS.setStatus('current')
currentSonetLine1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine1dayCV.setStatus('current')
currentSonetLine1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine1dayElapsedTime.setStatus('current')
intervalSonetLine15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23), )
if mibBuilder.loadTexts: intervalSonetLine15minTable.setStatus('current')
intervalSonetLine15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetLine15minNumber"))
if mibBuilder.loadTexts: intervalSonetLine15minEntry.setStatus('current')
intervalSonetLine15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalSonetLine15minNumber.setStatus('current')
intervalSonetLine15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minES.setStatus('current')
intervalSonetLine15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minSES.setStatus('current')
intervalSonetLine15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minUAS.setStatus('current')
intervalSonetLine15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minCV.setStatus('current')
intervalSonetLine15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minValidFlag.setStatus('current')
intervalSonetLine15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minTimeStamp.setStatus('current')
intervalSonetLine1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24), )
if mibBuilder.loadTexts: intervalSonetLine1dayTable.setStatus('current')
intervalSonetLine1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetLine1dayNumber"))
if mibBuilder.loadTexts: intervalSonetLine1dayEntry.setStatus('current')
intervalSonetLine1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalSonetLine1dayNumber.setStatus('current')
intervalSonetLine1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1dayES.setStatus('current')
intervalSonetLine1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1daySES.setStatus('current')
intervalSonetLine1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1dayUAS.setStatus('current')
intervalSonetLine1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1dayCV.setStatus('current')
intervalSonetLine1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1dayValidFlag.setStatus('current')
intervalSonetLine1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1dayTimeStamp.setStatus('current')
currentSonetHoPath15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25), )
if mibBuilder.loadTexts: currentSonetHoPath15minTable.setStatus('current')
currentSonetHoPath15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetHoPath15minEntry.setStatus('current')
currentSonetHoPath15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath15minES.setStatus('current')
currentSonetHoPath15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath15minSES.setStatus('current')
currentSonetHoPath15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath15minUAS.setStatus('current')
currentSonetHoPath15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath15minCV.setStatus('current')
currentSonetHoPath15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath15minElapsedTime.setStatus('current')
currentSonetHoPath1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26), )
if mibBuilder.loadTexts: currentSonetHoPath1dayTable.setStatus('current')
currentSonetHoPath1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetHoPath1dayEntry.setStatus('current')
currentSonetHoPath1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath1dayES.setStatus('current')
currentSonetHoPath1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath1daySES.setStatus('current')
currentSonetHoPath1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath1dayUAS.setStatus('current')
currentSonetHoPath1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath1dayCV.setStatus('current')
currentSonetHoPath1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath1dayElapsedTime.setStatus('current')
intervalSonetHoPath15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27), )
if mibBuilder.loadTexts: intervalSonetHoPath15minTable.setStatus('current')
intervalSonetHoPath15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetHoPath15minNumber"))
if mibBuilder.loadTexts: intervalSonetHoPath15minEntry.setStatus('current')
intervalSonetHoPath15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalSonetHoPath15minNumber.setStatus('current')
intervalSonetHoPath15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minES.setStatus('current')
intervalSonetHoPath15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minSES.setStatus('current')
intervalSonetHoPath15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minUAS.setStatus('current')
intervalSonetHoPath15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minCV.setStatus('current')
intervalSonetHoPath15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minValidFlag.setStatus('current')
intervalSonetHoPath15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minTimeStamp.setStatus('current')
intervalSonetHoPath1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28), )
if mibBuilder.loadTexts: intervalSonetHoPath1dayTable.setStatus('current')
intervalSonetHoPath1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetHoPath1dayNumber"))
if mibBuilder.loadTexts: intervalSonetHoPath1dayEntry.setStatus('current')
intervalSonetHoPath1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalSonetHoPath1dayNumber.setStatus('current')
intervalSonetHoPath1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1dayES.setStatus('current')
intervalSonetHoPath1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1daySES.setStatus('current')
intervalSonetHoPath1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1dayUAS.setStatus('current')
intervalSonetHoPath1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1dayCV.setStatus('current')
intervalSonetHoPath1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1dayValidFlag.setStatus('current')
intervalSonetHoPath1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1dayTimeStamp.setStatus('current')
currentSonetLoPath15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29), )
if mibBuilder.loadTexts: currentSonetLoPath15minTable.setStatus('current')
currentSonetLoPath15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetLoPath15minEntry.setStatus('current')
currentSonetLoPath15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath15minES.setStatus('current')
currentSonetLoPath15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath15minSES.setStatus('current')
currentSonetLoPath15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath15minUAS.setStatus('current')
currentSonetLoPath15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath15minCV.setStatus('current')
currentSonetLoPath15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath15minElapsedTime.setStatus('current')
currentSonetLoPath1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30), )
if mibBuilder.loadTexts: currentSonetLoPath1dayTable.setStatus('current')
currentSonetLoPath1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetLoPath1dayEntry.setStatus('current')
currentSonetLoPath1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath1dayES.setStatus('current')
currentSonetLoPath1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath1daySES.setStatus('current')
currentSonetLoPath1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath1dayUAS.setStatus('current')
currentSonetLoPath1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath1dayCV.setStatus('current')
currentSonetLoPath1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath1dayElapsedTime.setStatus('current')
intervalSonetLoPath15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31), )
if mibBuilder.loadTexts: intervalSonetLoPath15minTable.setStatus('current')
intervalSonetLoPath15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetLoPath15minNumber"))
if mibBuilder.loadTexts: intervalSonetLoPath15minEntry.setStatus('current')
intervalSonetLoPath15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalSonetLoPath15minNumber.setStatus('current')
intervalSonetLoPath15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minES.setStatus('current')
intervalSonetLoPath15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minSES.setStatus('current')
intervalSonetLoPath15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minUAS.setStatus('current')
intervalSonetLoPath15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minCV.setStatus('current')
intervalSonetLoPath15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minValidFlag.setStatus('current')
intervalSonetLoPath15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minTimeStamp.setStatus('current')
intervalSonetLoPath1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32), )
if mibBuilder.loadTexts: intervalSonetLoPath1dayTable.setStatus('current')
intervalSonetLoPath1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetLoPath1dayNumber"))
if mibBuilder.loadTexts: intervalSonetLoPath1dayEntry.setStatus('current')
intervalSonetLoPath1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalSonetLoPath1dayNumber.setStatus('current')
intervalSonetLoPath1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1dayES.setStatus('current')
intervalSonetLoPath1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1daySES.setStatus('current')
intervalSonetLoPath1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1dayUAS.setStatus('current')
intervalSonetLoPath1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1dayCV.setStatus('current')
intervalSonetLoPath1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1dayValidFlag.setStatus('current')
intervalSonetLoPath1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1dayTimeStamp.setStatus('current')
intervalPhysPerfOpticalInputPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minTable.setStatus('current')
intervalPhysPerfOpticalInputPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minEntry.setStatus('current')
intervalPhysPerfOpticalInputPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minNumber.setStatus('current')
intervalPhysPerfOpticalInputPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minLow.setStatus('current')
intervalPhysPerfOpticalInputPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minMean.setStatus('current')
intervalPhysPerfOpticalInputPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minHigh.setStatus('current')
intervalPhysPerfOpticalInputPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minValidFlag.setStatus('current')
intervalPhysPerfOpticalInputPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minTimeStamp.setStatus('current')
intervalPhysPerfOpticalInputPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayTable.setStatus('current')
intervalPhysPerfOpticalInputPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayEntry.setStatus('current')
intervalPhysPerfOpticalInputPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayNumber.setStatus('current')
intervalPhysPerfOpticalInputPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayLow.setStatus('current')
intervalPhysPerfOpticalInputPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayMean.setStatus('current')
intervalPhysPerfOpticalInputPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayHigh.setStatus('current')
intervalPhysPerfOpticalInputPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayValidFlag.setStatus('current')
intervalPhysPerfOpticalInputPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayTimeStamp.setStatus('current')
intervalPhysPerfOpticalInputPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekTable.setStatus('current')
intervalPhysPerfOpticalInputPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekEntry.setStatus('current')
intervalPhysPerfOpticalInputPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekNumber.setStatus('current')
intervalPhysPerfOpticalInputPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekLow.setStatus('current')
intervalPhysPerfOpticalInputPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekMean.setStatus('current')
intervalPhysPerfOpticalInputPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekHigh.setStatus('current')
intervalPhysPerfOpticalInputPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekValidFlag.setStatus('current')
intervalPhysPerfOpticalInputPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekTimeStamp.setStatus('current')
intervalPhysPerfOpticalOutputPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minTable.setStatus('current')
intervalPhysPerfOpticalOutputPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minEntry.setStatus('current')
intervalPhysPerfOpticalOutputPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minNumber.setStatus('current')
intervalPhysPerfOpticalOutputPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minLow.setStatus('current')
intervalPhysPerfOpticalOutputPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minMean.setStatus('current')
intervalPhysPerfOpticalOutputPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minHigh.setStatus('current')
intervalPhysPerfOpticalOutputPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minValidFlag.setStatus('current')
intervalPhysPerfOpticalOutputPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minTimeStamp.setStatus('current')
intervalPhysPerfOpticalOutputPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayTable.setStatus('current')
intervalPhysPerfOpticalOutputPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayEntry.setStatus('current')
intervalPhysPerfOpticalOutputPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayNumber.setStatus('current')
intervalPhysPerfOpticalOutputPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayLow.setStatus('current')
intervalPhysPerfOpticalOutputPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayMean.setStatus('current')
intervalPhysPerfOpticalOutputPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayHigh.setStatus('current')
intervalPhysPerfOpticalOutputPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayValidFlag.setStatus('current')
intervalPhysPerfOpticalOutputPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayTimeStamp.setStatus('current')
intervalPhysPerfOpticalOutputPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekTable.setStatus('current')
intervalPhysPerfOpticalOutputPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekEntry.setStatus('current')
intervalPhysPerfOpticalOutputPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekNumber.setStatus('current')
intervalPhysPerfOpticalOutputPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekLow.setStatus('current')
intervalPhysPerfOpticalOutputPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekMean.setStatus('current')
intervalPhysPerfOpticalOutputPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekHigh.setStatus('current')
intervalPhysPerfOpticalOutputPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekValidFlag.setStatus('current')
intervalPhysPerfOpticalOutputPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekTimeStamp.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39), )
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minTable.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfLaserBiasCurrentNormalized15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minEntry.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minNumber.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 2), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minLow.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 3), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minMean.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 4), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minHigh.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minValidFlag.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minTimeStamp.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40), )
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayTable.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfLaserBiasCurrentNormalized1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayEntry.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayNumber.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 2), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayLow.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 3), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayMean.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 4), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayHigh.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayValidFlag.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayTimeStamp.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41), )
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekTable.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfLaserBiasCurrentNormalized1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekEntry.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekNumber.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 2), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekLow.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 3), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekMean.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 4), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekHigh.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekValidFlag.setStatus('current')
intervalPhysPerfLaserBiasCurrentNormalized1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekTimeStamp.setStatus('current')
intervalPhysPerfOlmRxLineAtt15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42), )
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minTable.setStatus('current')
intervalPhysPerfOlmRxLineAtt15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmRxLineAtt15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minEntry.setStatus('current')
intervalPhysPerfOlmRxLineAtt15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minNumber.setStatus('current')
intervalPhysPerfOlmRxLineAtt15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minLow.setStatus('current')
intervalPhysPerfOlmRxLineAtt15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minMean.setStatus('current')
intervalPhysPerfOlmRxLineAtt15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minHigh.setStatus('current')
intervalPhysPerfOlmRxLineAtt15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minValidFlag.setStatus('current')
intervalPhysPerfOlmRxLineAtt15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minTimeStamp.setStatus('current')
intervalPhysPerfOlmRxLineAtt1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43), )
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayTable.setStatus('current')
intervalPhysPerfOlmRxLineAtt1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmRxLineAtt1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayEntry.setStatus('current')
intervalPhysPerfOlmRxLineAtt1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayNumber.setStatus('current')
intervalPhysPerfOlmRxLineAtt1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayLow.setStatus('current')
intervalPhysPerfOlmRxLineAtt1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayMean.setStatus('current')
intervalPhysPerfOlmRxLineAtt1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayHigh.setStatus('current')
intervalPhysPerfOlmRxLineAtt1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayValidFlag.setStatus('current')
intervalPhysPerfOlmRxLineAtt1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayTimeStamp.setStatus('current')
intervalPhysPerfOlmRxLineAtt1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44), )
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekTable.setStatus('current')
intervalPhysPerfOlmRxLineAtt1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmRxLineAtt1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekEntry.setStatus('current')
intervalPhysPerfOlmRxLineAtt1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekNumber.setStatus('current')
intervalPhysPerfOlmRxLineAtt1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekLow.setStatus('current')
intervalPhysPerfOlmRxLineAtt1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekMean.setStatus('current')
intervalPhysPerfOlmRxLineAtt1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekHigh.setStatus('current')
intervalPhysPerfOlmRxLineAtt1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekValidFlag.setStatus('current')
intervalPhysPerfOlmRxLineAtt1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekTimeStamp.setStatus('current')
intervalPhysPerfOlmTxLineAtt15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45), )
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minTable.setStatus('current')
intervalPhysPerfOlmTxLineAtt15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmTxLineAtt15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minEntry.setStatus('current')
intervalPhysPerfOlmTxLineAtt15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minNumber.setStatus('current')
intervalPhysPerfOlmTxLineAtt15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minLow.setStatus('current')
intervalPhysPerfOlmTxLineAtt15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minHigh.setStatus('current')
intervalPhysPerfOlmTxLineAtt15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minMean.setStatus('current')
intervalPhysPerfOlmTxLineAtt15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minValidFlag.setStatus('current')
intervalPhysPerfOlmTxLineAtt15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minTimeStamp.setStatus('current')
intervalPhysPerfOlmTxLineAtt1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46), )
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayTable.setStatus('current')
intervalPhysPerfOlmTxLineAtt1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmTxLineAtt1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayEntry.setStatus('current')
intervalPhysPerfOlmTxLineAtt1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayNumber.setStatus('current')
intervalPhysPerfOlmTxLineAtt1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayLow.setStatus('current')
intervalPhysPerfOlmTxLineAtt1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayHigh.setStatus('current')
intervalPhysPerfOlmTxLineAtt1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayMean.setStatus('current')
intervalPhysPerfOlmTxLineAtt1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayValidFlag.setStatus('current')
intervalPhysPerfOlmTxLineAtt1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayTimeStamp.setStatus('current')
intervalPhysPerfOlmTxLineAtt1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47), )
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekTable.setStatus('current')
intervalPhysPerfOlmTxLineAtt1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmTxLineAtt1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekEntry.setStatus('current')
intervalPhysPerfOlmTxLineAtt1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekNumber.setStatus('current')
intervalPhysPerfOlmTxLineAtt1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekLow.setStatus('current')
intervalPhysPerfOlmTxLineAtt1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekHigh.setStatus('current')
intervalPhysPerfOlmTxLineAtt1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekMean.setStatus('current')
intervalPhysPerfOlmTxLineAtt1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekValidFlag.setStatus('current')
intervalPhysPerfOlmTxLineAtt1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekTimeStamp.setStatus('current')
currentPhysConv15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48), )
if mibBuilder.loadTexts: currentPhysConv15minTable.setStatus('current')
currentPhysConv15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConv15minEntry.setStatus('current')
currentPhysConv15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv15minES.setStatus('current')
currentPhysConv15minDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv15minDE.setStatus('current')
currentPhysConv15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv15minCV.setStatus('current')
currentPhysConv15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv15minElapsedTime.setStatus('current')
currentPhysConv1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49), )
if mibBuilder.loadTexts: currentPhysConv1dayTable.setStatus('current')
currentPhysConv1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConv1dayEntry.setStatus('current')
currentPhysConv1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv1dayES.setStatus('current')
currentPhysConv1dayDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv1dayDE.setStatus('current')
currentPhysConv1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv1dayCV.setStatus('current')
currentPhysConv1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv1dayElapsedTime.setStatus('current')
intervalPhysConv15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50), )
if mibBuilder.loadTexts: intervalPhysConv15minTable.setStatus('current')
intervalPhysConv15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConv15minNumber"))
if mibBuilder.loadTexts: intervalPhysConv15minEntry.setStatus('current')
intervalPhysConv15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysConv15minNumber.setStatus('current')
intervalPhysConv15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv15minES.setStatus('current')
intervalPhysConv15minDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv15minDE.setStatus('current')
intervalPhysConv15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv15minCV.setStatus('current')
intervalPhysConv15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv15minValidFlag.setStatus('current')
intervalPhysConv15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv15minTimeStamp.setStatus('current')
intervalPhysConv1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51), )
if mibBuilder.loadTexts: intervalPhysConv1dayTable.setStatus('current')
intervalPhysConv1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConv1dayNumber"))
if mibBuilder.loadTexts: intervalPhysConv1dayEntry.setStatus('current')
intervalPhysConv1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysConv1dayNumber.setStatus('current')
intervalPhysConv1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv1dayES.setStatus('current')
intervalPhysConv1dayDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv1dayDE.setStatus('current')
intervalPhysConv1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv1dayCV.setStatus('current')
intervalPhysConv1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv1dayValidFlag.setStatus('current')
intervalPhysConv1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv1dayTimeStamp.setStatus('current')
currentEthRx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52), )
if mibBuilder.loadTexts: currentEthRx15minTable.setStatus('current')
currentEthRx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRx15minEntry.setStatus('current')
currentEthRx15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minGoodFrames.setStatus('current')
currentEthRx15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minPauseFrames.setStatus('current')
currentEthRx15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minCrcFrames.setStatus('current')
currentEthRx15minDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minDiscardedFrames.setStatus('current')
currentEthRx15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minBytes.setStatus('current')
currentEthRx15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minElapsedTime.setStatus('current')
currentEthRx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53), )
if mibBuilder.loadTexts: currentEthRx1dayTable.setStatus('current')
currentEthRx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRx1dayEntry.setStatus('current')
currentEthRx1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayGoodFrames.setStatus('current')
currentEthRx1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayPauseFrames.setStatus('current')
currentEthRx1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayCrcFrames.setStatus('current')
currentEthRx1dayDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayDiscardedFrames.setStatus('current')
currentEthRx1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayBytes.setStatus('current')
currentEthRx1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayElapsedTime.setStatus('current')
intervalEthRx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54), )
if mibBuilder.loadTexts: intervalEthRx15minTable.setStatus('current')
intervalEthRx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx15minNumber"))
if mibBuilder.loadTexts: intervalEthRx15minEntry.setStatus('current')
intervalEthRx15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalEthRx15minNumber.setStatus('current')
intervalEthRx15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minGoodFrames.setStatus('current')
intervalEthRx15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minPauseFrames.setStatus('current')
intervalEthRx15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minCrcFrames.setStatus('current')
intervalEthRx15minDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minDiscardedFrames.setStatus('current')
intervalEthRx15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minBytes.setStatus('current')
intervalEthRx15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minValidFlag.setStatus('current')
intervalEthRx15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minTimeStamp.setStatus('current')
intervalEthRx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55), )
if mibBuilder.loadTexts: intervalEthRx1dayTable.setStatus('current')
intervalEthRx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx1dayNumber"))
if mibBuilder.loadTexts: intervalEthRx1dayEntry.setStatus('current')
intervalEthRx1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalEthRx1dayNumber.setStatus('current')
intervalEthRx1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayGoodFrames.setStatus('current')
intervalEthRx1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayPauseFrames.setStatus('current')
intervalEthRx1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayCrcFrames.setStatus('current')
intervalEthRx1dayDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayDiscardedFrames.setStatus('current')
intervalEthRx1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayBytes.setStatus('current')
intervalEthRx1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayValidFlag.setStatus('current')
intervalEthRx1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayTimeStamp.setStatus('current')
currentEthTx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56), )
if mibBuilder.loadTexts: currentEthTx15minTable.setStatus('current')
currentEthTx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthTx15minEntry.setStatus('current')
currentEthTx15minGoodFramesx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx15minGoodFramesx.setStatus('current')
currentEthTx15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx15minPauseFrames.setStatus('current')
currentEthTx15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx15minBytes.setStatus('current')
currentEthTx15minCrcFramesEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx15minCrcFramesEgress.setStatus('current')
currentEthTx15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx15minElapsedTime.setStatus('current')
currentEthTx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57), )
if mibBuilder.loadTexts: currentEthTx1dayTable.setStatus('current')
currentEthTx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthTx1dayEntry.setStatus('current')
currentEthTx1dayGoodFramesx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx1dayGoodFramesx.setStatus('current')
currentEthTx1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx1dayPauseFrames.setStatus('current')
currentEthTx1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx1dayBytes.setStatus('current')
currentEthTx1dayCrcFramesEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx1dayCrcFramesEgress.setStatus('current')
currentEthTx1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx1dayElapsedTime.setStatus('current')
intervalEthTx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58), )
if mibBuilder.loadTexts: intervalEthTx15minTable.setStatus('current')
intervalEthTx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthTx15minNumber"))
if mibBuilder.loadTexts: intervalEthTx15minEntry.setStatus('current')
intervalEthTx15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalEthTx15minNumber.setStatus('current')
intervalEthTx15minGoodFramesx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minGoodFramesx.setStatus('current')
intervalEthTx15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minPauseFrames.setStatus('current')
intervalEthTx15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minBytes.setStatus('current')
intervalEthTx15minCrcFramesEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minCrcFramesEgress.setStatus('current')
intervalEthTx15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minValidFlag.setStatus('current')
intervalEthTx15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minTimeStamp.setStatus('current')
intervalEthTx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59), )
if mibBuilder.loadTexts: intervalEthTx1dayTable.setStatus('current')
intervalEthTx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthTx1dayNumber"))
if mibBuilder.loadTexts: intervalEthTx1dayEntry.setStatus('current')
intervalEthTx1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalEthTx1dayNumber.setStatus('current')
intervalEthTx1dayGoodFramesx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayGoodFramesx.setStatus('current')
intervalEthTx1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayPauseFrames.setStatus('current')
intervalEthTx1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayBytes.setStatus('current')
intervalEthTx1dayCrcFramesEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayCrcFramesEgress.setStatus('current')
intervalEthTx1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayValidFlag.setStatus('current')
intervalEthTx1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayTimeStamp.setStatus('current')
currentGfp15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60), )
if mibBuilder.loadTexts: currentGfp15minTable.setStatus('deprecated')
currentGfp15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfp15minEntry.setStatus('deprecated')
currentGfp15minCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp15minCoreHecCorrectedFrames.setStatus('deprecated')
currentGfp15minTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp15minTypeHecCorrectedFrames.setStatus('deprecated')
currentGfp15minTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp15minTypeHecDiscardedFrames.setStatus('deprecated')
currentGfp15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp15minElapsedTime.setStatus('deprecated')
currentGfp1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61), )
if mibBuilder.loadTexts: currentGfp1dayTable.setStatus('deprecated')
currentGfp1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfp1dayEntry.setStatus('deprecated')
currentGfp1dayCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp1dayCoreHecCorrectedFrames.setStatus('deprecated')
currentGfp1dayTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp1dayTypeHecCorrectedFrames.setStatus('deprecated')
currentGfp1dayTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp1dayTypeHecDiscardedFrames.setStatus('deprecated')
currentGfp1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp1dayElapsedTime.setStatus('deprecated')
intervalGfp15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62), )
if mibBuilder.loadTexts: intervalGfp15minTable.setStatus('deprecated')
intervalGfp15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfp15minNumber"))
if mibBuilder.loadTexts: intervalGfp15minEntry.setStatus('deprecated')
intervalGfp15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalGfp15minNumber.setStatus('deprecated')
intervalGfp15minCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp15minCoreHecCorrectedFrames.setStatus('deprecated')
intervalGfp15minTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp15minTypeHecCorrectedFrames.setStatus('deprecated')
intervalGfp15minTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp15minTypeHecDiscardedFrames.setStatus('deprecated')
intervalGfp15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp15minValidFlag.setStatus('deprecated')
intervalGfp15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp15minTimeStamp.setStatus('deprecated')
intervalGfp1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63), )
if mibBuilder.loadTexts: intervalGfp1dayTable.setStatus('deprecated')
intervalGfp1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfp1dayNumber"))
if mibBuilder.loadTexts: intervalGfp1dayEntry.setStatus('deprecated')
intervalGfp1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalGfp1dayNumber.setStatus('deprecated')
intervalGfp1dayCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp1dayCoreHecCorrectedFrames.setStatus('deprecated')
intervalGfp1dayTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp1dayTypeHecCorrectedFrames.setStatus('deprecated')
intervalGfp1dayTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp1dayTypeHecDiscardedFrames.setStatus('deprecated')
intervalGfp1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp1dayValidFlag.setStatus('deprecated')
intervalGfp1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp1dayTimeStamp.setStatus('deprecated')
currentOtuFec15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68), )
if mibBuilder.loadTexts: currentOtuFec15minTable.setStatus('current')
currentOtuFec15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtuFec15minEntry.setStatus('current')
currentOtuFec15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minES.setStatus('current')
currentOtuFec15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minSES.setStatus('current')
currentOtuFec15minCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minCE.setStatus('current')
currentOtuFec15minUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minUBE.setStatus('current')
currentOtuFec15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minElapsedTime.setStatus('current')
currentOtuFec15minBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 6), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minBERCE.setStatus('current')
currentOtuFec1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69), )
if mibBuilder.loadTexts: currentOtuFec1dayTable.setStatus('current')
currentOtuFec1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtuFec1dayEntry.setStatus('current')
currentOtuFec1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayES.setStatus('current')
currentOtuFec1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1daySES.setStatus('current')
currentOtuFec1dayCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayCE.setStatus('current')
currentOtuFec1dayUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayUBE.setStatus('current')
currentOtuFec1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayElapsedTime.setStatus('current')
currentOtuFec1dayBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 6), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayBERCE.setStatus('current')
intervalOtuFec15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70), )
if mibBuilder.loadTexts: intervalOtuFec15minTable.setStatus('current')
intervalOtuFec15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtuFec15minNumber"))
if mibBuilder.loadTexts: intervalOtuFec15minEntry.setStatus('current')
intervalOtuFec15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOtuFec15minNumber.setStatus('current')
intervalOtuFec15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minES.setStatus('current')
intervalOtuFec15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minSES.setStatus('current')
intervalOtuFec15minCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minCE.setStatus('current')
intervalOtuFec15minUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minUBE.setStatus('current')
intervalOtuFec15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minValidFlag.setStatus('current')
intervalOtuFec15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minTimeStamp.setStatus('current')
intervalOtuFec15minBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 8), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minBERCE.setStatus('current')
intervalOtuFec1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71), )
if mibBuilder.loadTexts: intervalOtuFec1dayTable.setStatus('current')
intervalOtuFec1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtuFec1dayNumber"))
if mibBuilder.loadTexts: intervalOtuFec1dayEntry.setStatus('current')
intervalOtuFec1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOtuFec1dayNumber.setStatus('current')
intervalOtuFec1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayES.setStatus('current')
intervalOtuFec1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1daySES.setStatus('current')
intervalOtuFec1dayCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayCE.setStatus('current')
intervalOtuFec1dayUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayUBE.setStatus('current')
intervalOtuFec1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayValidFlag.setStatus('current')
intervalOtuFec1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayTimeStamp.setStatus('current')
intervalOtuFec1dayBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 8), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayBERCE.setStatus('current')
currentGfpt15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 72), )
if mibBuilder.loadTexts: currentGfpt15minTable.setStatus('current')
currentGfpt15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 72, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpt15minEntry.setStatus('current')
currentGfpt15minDiscardedSuperblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 72, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpt15minDiscardedSuperblocks.setStatus('current')
currentGfpt15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 72, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpt15minElapsedTime.setStatus('current')
currentGfpt1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 73), )
if mibBuilder.loadTexts: currentGfpt1dayTable.setStatus('current')
currentGfpt1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 73, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpt1dayEntry.setStatus('current')
currentGfpt1dayDiscardedSuperblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 73, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpt1dayDiscardedSuperblocks.setStatus('current')
currentGfpt1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 73, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpt1dayElapsedTime.setStatus('current')
intervalGfpt15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74), )
if mibBuilder.loadTexts: intervalGfpt15minTable.setStatus('current')
intervalGfpt15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpt15minNumber"))
if mibBuilder.loadTexts: intervalGfpt15minEntry.setStatus('current')
intervalGfpt15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalGfpt15minNumber.setStatus('current')
intervalGfpt15minDiscardedSuperblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt15minDiscardedSuperblocks.setStatus('current')
intervalGfpt15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt15minValidFlag.setStatus('current')
intervalGfpt15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt15minTimeStamp.setStatus('current')
intervalGfpt1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75), )
if mibBuilder.loadTexts: intervalGfpt1dayTable.setStatus('current')
intervalGfpt1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpt1dayNumber"))
if mibBuilder.loadTexts: intervalGfpt1dayEntry.setStatus('current')
intervalGfpt1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalGfpt1dayNumber.setStatus('current')
intervalGfpt1dayDiscardedSuperblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt1dayDiscardedSuperblocks.setStatus('current')
intervalGfpt1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt1dayValidFlag.setStatus('current')
intervalGfpt1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt1dayTimeStamp.setStatus('current')
currentSubAggregate15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76), )
if mibBuilder.loadTexts: currentSubAggregate15minTable.setStatus('current')
currentSubAggregate15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSubAggregate15minEntry.setStatus('current')
currentSubAggregate15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate15minES.setStatus('current')
currentSubAggregate15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate15minSES.setStatus('current')
currentSubAggregate15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate15minElapsedTime.setStatus('current')
currentSubAggregate15minCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate15minCrc.setStatus('current')
currentSubAggregate1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77), )
if mibBuilder.loadTexts: currentSubAggregate1dayTable.setStatus('current')
currentSubAggregate1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSubAggregate1dayEntry.setStatus('current')
currentSubAggregate1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate1dayES.setStatus('current')
currentSubAggregate1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate1daySES.setStatus('current')
currentSubAggregate1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate1dayElapsedTime.setStatus('current')
currentSubAggregate1dayCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate1dayCrc.setStatus('current')
intervalSubAggregate15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78), )
if mibBuilder.loadTexts: intervalSubAggregate15minTable.setStatus('current')
intervalSubAggregate15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSubAggregate15minNumber"))
if mibBuilder.loadTexts: intervalSubAggregate15minEntry.setStatus('current')
intervalSubAggregate15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalSubAggregate15minNumber.setStatus('current')
intervalSubAggregate15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate15minES.setStatus('current')
intervalSubAggregate15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate15minSES.setStatus('current')
intervalSubAggregate15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate15minValidFlag.setStatus('current')
intervalSubAggregate15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate15minTimeStamp.setStatus('current')
intervalSubAggregate15minCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate15minCrc.setStatus('current')
intervalSubAggregate1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79), )
if mibBuilder.loadTexts: intervalSubAggregate1dayTable.setStatus('current')
intervalSubAggregate1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSubAggregate1dayNumber"))
if mibBuilder.loadTexts: intervalSubAggregate1dayEntry.setStatus('current')
intervalSubAggregate1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalSubAggregate1dayNumber.setStatus('current')
intervalSubAggregate1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate1dayES.setStatus('current')
intervalSubAggregate1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate1daySES.setStatus('current')
intervalSubAggregate1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate1dayValidFlag.setStatus('current')
intervalSubAggregate1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate1dayTimeStamp.setStatus('current')
intervalSubAggregate1dayCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate1dayCrc.setStatus('current')
currentOduTcmC15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80), )
if mibBuilder.loadTexts: currentOduTcmC15minTable.setStatus('current')
currentOduTcmC15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmC15minEntry.setStatus('current')
currentOduTcmC15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC15minES.setStatus('current')
currentOduTcmC15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC15minSES.setStatus('current')
currentOduTcmC15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC15minBbe.setStatus('current')
currentOduTcmC15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC15minUAS.setStatus('current')
currentOduTcmC15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC15minElapsedTime.setStatus('current')
currentOduTcmC1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81), )
if mibBuilder.loadTexts: currentOduTcmC1dayTable.setStatus('current')
currentOduTcmC1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmC1dayEntry.setStatus('current')
currentOduTcmC1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC1dayES.setStatus('current')
currentOduTcmC1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC1daySES.setStatus('current')
currentOduTcmC1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC1dayBbe.setStatus('current')
currentOduTcmC1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC1dayUAS.setStatus('current')
currentOduTcmC1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC1dayElapsedTime.setStatus('current')
intervalOduTcmC15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82), )
if mibBuilder.loadTexts: intervalOduTcmC15minTable.setStatus('current')
intervalOduTcmC15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmC15minNumber"))
if mibBuilder.loadTexts: intervalOduTcmC15minEntry.setStatus('current')
intervalOduTcmC15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOduTcmC15minNumber.setStatus('current')
intervalOduTcmC15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minES.setStatus('current')
intervalOduTcmC15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minSES.setStatus('current')
intervalOduTcmC15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minBbe.setStatus('current')
intervalOduTcmC15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minUAS.setStatus('current')
intervalOduTcmC15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minValidFlag.setStatus('current')
intervalOduTcmC15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minTimeStamp.setStatus('current')
intervalOduTcmC1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83), )
if mibBuilder.loadTexts: intervalOduTcmC1dayTable.setStatus('current')
intervalOduTcmC1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmC1dayNumber"))
if mibBuilder.loadTexts: intervalOduTcmC1dayEntry.setStatus('current')
intervalOduTcmC1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOduTcmC1dayNumber.setStatus('current')
intervalOduTcmC1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1dayES.setStatus('current')
intervalOduTcmC1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1daySES.setStatus('current')
intervalOduTcmC1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1dayBbe.setStatus('current')
intervalOduTcmC1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1dayUAS.setStatus('current')
intervalOduTcmC1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1dayValidFlag.setStatus('current')
intervalOduTcmC1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1dayTimeStamp.setStatus('current')
currentPhysConvHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84), )
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minTable.setStatus('current')
currentPhysConvHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minEntry.setStatus('current')
currentPhysConvHighSpeed15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minES.setStatus('current')
currentPhysConvHighSpeed15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minCV.setStatus('current')
currentPhysConvHighSpeed15minSE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minSE.setStatus('current')
currentPhysConvHighSpeed15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minElapsedTime.setStatus('current')
currentPhysConvHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85), )
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayTable.setStatus('current')
currentPhysConvHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayEntry.setStatus('current')
currentPhysConvHighSpeed1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayES.setStatus('current')
currentPhysConvHighSpeed1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayCV.setStatus('current')
currentPhysConvHighSpeed1daySE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed1daySE.setStatus('current')
currentPhysConvHighSpeed1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayElapsedTime.setStatus('current')
intervalPhysConvHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86), )
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minTable.setStatus('current')
intervalPhysConvHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvHighSpeed15minNumber"))
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minEntry.setStatus('current')
intervalPhysConvHighSpeed15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minNumber.setStatus('current')
intervalPhysConvHighSpeed15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minES.setStatus('current')
intervalPhysConvHighSpeed15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minCV.setStatus('current')
intervalPhysConvHighSpeed15minSE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minSE.setStatus('current')
intervalPhysConvHighSpeed15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minValidFlag.setStatus('current')
intervalPhysConvHighSpeed15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minTimeStamp.setStatus('current')
intervalPhysConvHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87), )
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayTable.setStatus('current')
intervalPhysConvHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvHighSpeed1dayNumber"))
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayEntry.setStatus('current')
intervalPhysConvHighSpeed1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayNumber.setStatus('current')
intervalPhysConvHighSpeed1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayES.setStatus('current')
intervalPhysConvHighSpeed1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayCV.setStatus('current')
intervalPhysConvHighSpeed1daySE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1daySE.setStatus('current')
intervalPhysConvHighSpeed1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayValidFlag.setStatus('current')
intervalPhysConvHighSpeed1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayTimeStamp.setStatus('current')
currentEthRxHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88), )
if mibBuilder.loadTexts: currentEthRxHighSpeed15minTable.setStatus('current')
currentEthRxHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRxHighSpeed15minEntry.setStatus('current')
currentEthRxHighSpeed15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed15minGoodFrames.setStatus('current')
currentEthRxHighSpeed15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed15minPauseFrames.setStatus('current')
currentEthRxHighSpeed15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed15minCrcFrames.setStatus('current')
currentEthRxHighSpeed15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed15minBytes.setStatus('current')
currentEthRxHighSpeed15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed15minElapsedTime.setStatus('current')
currentEthRxHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89), )
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayTable.setStatus('current')
currentEthRxHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayEntry.setStatus('current')
currentEthRxHighSpeed1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayGoodFrames.setStatus('current')
currentEthRxHighSpeed1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayPauseFrames.setStatus('current')
currentEthRxHighSpeed1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayCrcFrames.setStatus('current')
currentEthRxHighSpeed1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayBytes.setStatus('current')
currentEthRxHighSpeed1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayElapsedTime.setStatus('current')
intervalEthRxHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90), )
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minTable.setStatus('current')
intervalEthRxHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRxHighSpeed15minNumber"))
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minEntry.setStatus('current')
intervalEthRxHighSpeed15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minNumber.setStatus('current')
intervalEthRxHighSpeed15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minGoodFrames.setStatus('current')
intervalEthRxHighSpeed15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minPauseFrames.setStatus('current')
intervalEthRxHighSpeed15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minCrcFrames.setStatus('current')
intervalEthRxHighSpeed15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minBytes.setStatus('current')
intervalEthRxHighSpeed15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minValidFlag.setStatus('current')
intervalEthRxHighSpeed15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minTimeStamp.setStatus('current')
intervalEthRxHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91), )
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayTable.setStatus('current')
intervalEthRxHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRxHighSpeed1dayNumber"))
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayEntry.setStatus('current')
intervalEthRxHighSpeed1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayNumber.setStatus('current')
intervalEthRxHighSpeed1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayGoodFrames.setStatus('current')
intervalEthRxHighSpeed1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayPauseFrames.setStatus('current')
intervalEthRxHighSpeed1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayCrcFrames.setStatus('current')
intervalEthRxHighSpeed1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayBytes.setStatus('current')
intervalEthRxHighSpeed1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayValidFlag.setStatus('current')
intervalEthRxHighSpeed1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayTimeStamp.setStatus('current')
currentGfpfr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92), )
if mibBuilder.loadTexts: currentGfpfr15minTable.setStatus('deprecated')
currentGfpfr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpfr15minEntry.setStatus('deprecated')
currentGfpfr15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr15minGoodFrames.setStatus('deprecated')
currentGfpfr15minCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr15minCHecDiscardedFrames.setStatus('deprecated')
currentGfpfr15minTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr15minTHecDiscardedFrames.setStatus('deprecated')
currentGfpfr15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr15minElapsedTime.setStatus('deprecated')
currentGfpfr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93), )
if mibBuilder.loadTexts: currentGfpfr1dayTable.setStatus('deprecated')
currentGfpfr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpfr1dayEntry.setStatus('deprecated')
currentGfpfr1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr1dayGoodFrames.setStatus('deprecated')
currentGfpfr1dayCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr1dayCHecDiscardedFrames.setStatus('deprecated')
currentGfpfr1dayTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr1dayTHecDiscardedFrames.setStatus('deprecated')
currentGfpfr1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr1dayElapsedTime.setStatus('deprecated')
intervalGfpfr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94), )
if mibBuilder.loadTexts: intervalGfpfr15minTable.setStatus('deprecated')
intervalGfpfr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpfr15minNumber"))
if mibBuilder.loadTexts: intervalGfpfr15minEntry.setStatus('deprecated')
intervalGfpfr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalGfpfr15minNumber.setStatus('deprecated')
intervalGfpfr15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr15minGoodFrames.setStatus('deprecated')
intervalGfpfr15minCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr15minCHecDiscardedFrames.setStatus('deprecated')
intervalGfpfr15minTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr15minTHecDiscardedFrames.setStatus('deprecated')
intervalGfpfr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr15minValidFlag.setStatus('deprecated')
intervalGfpfr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr15minTimeStamp.setStatus('deprecated')
intervalGfpfr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95), )
if mibBuilder.loadTexts: intervalGfpfr1dayTable.setStatus('deprecated')
intervalGfpfr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpfr1dayNumber"))
if mibBuilder.loadTexts: intervalGfpfr1dayEntry.setStatus('deprecated')
intervalGfpfr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalGfpfr1dayNumber.setStatus('deprecated')
intervalGfpfr1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr1dayGoodFrames.setStatus('deprecated')
intervalGfpfr1dayCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr1dayCHecDiscardedFrames.setStatus('deprecated')
intervalGfpfr1dayTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr1dayTHecDiscardedFrames.setStatus('deprecated')
intervalGfpfr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr1dayValidFlag.setStatus('deprecated')
intervalGfpfr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr1dayTimeStamp.setStatus('deprecated')
currentGfpSublayer15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96), )
if mibBuilder.loadTexts: currentGfpSublayer15minTable.setStatus('current')
currentGfpSublayer15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpSublayer15minEntry.setStatus('current')
currentGfpSublayer15minCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer15minCoreHecCorrectedFrames.setStatus('current')
currentGfpSublayer15minTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer15minTypeHecCorrectedFrames.setStatus('current')
currentGfpSublayer15minTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer15minTypeHecDiscardedFrames.setStatus('current')
currentGfpSublayer15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer15minElapsedTime.setStatus('current')
currentGfpSublayer1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97), )
if mibBuilder.loadTexts: currentGfpSublayer1dayTable.setStatus('current')
currentGfpSublayer1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpSublayer1dayEntry.setStatus('current')
currentGfpSublayer1dayCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer1dayCoreHecCorrectedFrames.setStatus('current')
currentGfpSublayer1dayTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer1dayTypeHecCorrectedFrames.setStatus('current')
currentGfpSublayer1dayTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer1dayTypeHecDiscardedFrames.setStatus('current')
currentGfpSublayer1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer1dayElapsedTime.setStatus('current')
intervalGfpSublayer15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98), )
if mibBuilder.loadTexts: intervalGfpSublayer15minTable.setStatus('current')
intervalGfpSublayer15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpSublayer15minNumber"))
if mibBuilder.loadTexts: intervalGfpSublayer15minEntry.setStatus('current')
intervalGfpSublayer15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalGfpSublayer15minNumber.setStatus('current')
intervalGfpSublayer15minCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer15minCoreHecCorrectedFrames.setStatus('current')
intervalGfpSublayer15minTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer15minTypeHecCorrectedFrames.setStatus('current')
intervalGfpSublayer15minTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer15minTypeHecDiscardedFrames.setStatus('current')
intervalGfpSublayer15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer15minValidFlag.setStatus('current')
intervalGfpSublayer15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer15minTimeStamp.setStatus('current')
intervalGfpSublayer1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99), )
if mibBuilder.loadTexts: intervalGfpSublayer1dayTable.setStatus('current')
intervalGfpSublayer1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpSublayer1dayNumber"))
if mibBuilder.loadTexts: intervalGfpSublayer1dayEntry.setStatus('current')
intervalGfpSublayer1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalGfpSublayer1dayNumber.setStatus('current')
intervalGfpSublayer1dayCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer1dayCoreHecCorrectedFrames.setStatus('current')
intervalGfpSublayer1dayTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer1dayTypeHecCorrectedFrames.setStatus('current')
intervalGfpSublayer1dayTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer1dayTypeHecDiscardedFrames.setStatus('current')
intervalGfpSublayer1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer1dayValidFlag.setStatus('current')
intervalGfpSublayer1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer1dayTimeStamp.setStatus('current')
currentGfpfrSublayer15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100), )
if mibBuilder.loadTexts: currentGfpfrSublayer15minTable.setStatus('current')
currentGfpfrSublayer15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpfrSublayer15minEntry.setStatus('current')
currentGfpfrSublayer15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer15minGoodFrames.setStatus('current')
currentGfpfrSublayer15minCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer15minCHecDiscardedFrames.setStatus('current')
currentGfpfrSublayer15minTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer15minTHecDiscardedFrames.setStatus('current')
currentGfpfrSublayer15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer15minElapsedTime.setStatus('current')
currentGfpfrSublayer1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101), )
if mibBuilder.loadTexts: currentGfpfrSublayer1dayTable.setStatus('current')
currentGfpfrSublayer1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpfrSublayer1dayEntry.setStatus('current')
currentGfpfrSublayer1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer1dayGoodFrames.setStatus('current')
currentGfpfrSublayer1dayCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer1dayCHecDiscardedFrames.setStatus('current')
currentGfpfrSublayer1dayTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer1dayTHecDiscardedFrames.setStatus('current')
currentGfpfrSublayer1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer1dayElapsedTime.setStatus('current')
intervalGfpfrSublayer15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102), )
if mibBuilder.loadTexts: intervalGfpfrSublayer15minTable.setStatus('current')
intervalGfpfrSublayer15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpfrSublayer15minNumber"))
if mibBuilder.loadTexts: intervalGfpfrSublayer15minEntry.setStatus('current')
intervalGfpfrSublayer15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalGfpfrSublayer15minNumber.setStatus('current')
intervalGfpfrSublayer15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer15minGoodFrames.setStatus('current')
intervalGfpfrSublayer15minCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer15minCHecDiscardedFrames.setStatus('current')
intervalGfpfrSublayer15minTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer15minTHecDiscardedFrames.setStatus('current')
intervalGfpfrSublayer15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer15minValidFlag.setStatus('current')
intervalGfpfrSublayer15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer15minTimeStamp.setStatus('current')
intervalGfpfrSublayer1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103), )
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayTable.setStatus('current')
intervalGfpfrSublayer1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpfrSublayer1dayNumber"))
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayEntry.setStatus('current')
intervalGfpfrSublayer1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayNumber.setStatus('current')
intervalGfpfrSublayer1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayGoodFrames.setStatus('current')
intervalGfpfrSublayer1dayCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayCHecDiscardedFrames.setStatus('current')
intervalGfpfrSublayer1dayTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayTHecDiscardedFrames.setStatus('current')
intervalGfpfrSublayer1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayValidFlag.setStatus('current')
intervalGfpfrSublayer1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayTimeStamp.setStatus('current')
thresholdGfpSublayerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104), )
if mibBuilder.loadTexts: thresholdGfpSublayerTable.setStatus('current')
thresholdGfpSublayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdGfpSublayerEntry.setStatus('current')
thresholdGfpSublayerCoreHecCorrectedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerCoreHecCorrectedFramesHighThres15Min.setStatus('current')
thresholdGfpSublayerCoreHecCorrectedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerCoreHecCorrectedFramesHighThres1Day.setStatus('current')
thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Min.setStatus('current')
thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Day.setStatus('current')
thresholdGfpSublayerTypeHecDiscardedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecDiscardedFramesHighThres15Min.setStatus('current')
thresholdGfpSublayerTypeHecDiscardedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecDiscardedFramesHighThres1Day.setStatus('current')
thresholdPhysConvCombinedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105), )
if mibBuilder.loadTexts: thresholdPhysConvCombinedTable.setStatus('current')
thresholdPhysConvCombinedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysConvCombinedEntry.setStatus('current')
thresholdPhysConvCombinedESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCombinedESHighThres15min.setStatus('current')
thresholdPhysConvCombinedESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 89400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCombinedESHighThres1day.setStatus('current')
thresholdPhysConvCombinedCVDEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105, 1, 3), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCombinedCVDEHighThres15min.setStatus('current')
thresholdPhysConvCombinedCVDEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105, 1, 4), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCombinedCVDEHighThres1day.setStatus('current')
currentPhysConvCombined15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 106), )
if mibBuilder.loadTexts: currentPhysConvCombined15minTable.setStatus('current')
currentPhysConvCombined15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 106, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvCombined15minEntry.setStatus('current')
currentPhysConvCombined15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 106, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined15minES.setStatus('current')
currentPhysConvCombined15minCVDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 106, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined15minCVDE.setStatus('current')
currentPhysConvCombined15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 106, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined15minElapsedTime.setStatus('current')
currentPhysConvCombined1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 107), )
if mibBuilder.loadTexts: currentPhysConvCombined1dayTable.setStatus('current')
currentPhysConvCombined1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 107, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvCombined1dayEntry.setStatus('current')
currentPhysConvCombined1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 107, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined1dayES.setStatus('current')
currentPhysConvCombined1dayCVDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 107, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined1dayCVDE.setStatus('current')
currentPhysConvCombined1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 107, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined1dayElapsedTime.setStatus('current')
intervalPhysConvCombined15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108), )
if mibBuilder.loadTexts: intervalPhysConvCombined15minTable.setStatus('current')
intervalPhysConvCombined15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvCombined15minNumber"))
if mibBuilder.loadTexts: intervalPhysConvCombined15minEntry.setStatus('current')
intervalPhysConvCombined15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysConvCombined15minNumber.setStatus('current')
intervalPhysConvCombined15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined15minES.setStatus('current')
intervalPhysConvCombined15minCVDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined15minCVDE.setStatus('current')
intervalPhysConvCombined15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined15minValidFlag.setStatus('current')
intervalPhysConvCombined15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined15minTimeStamp.setStatus('current')
intervalPhysConvCombined1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109), )
if mibBuilder.loadTexts: intervalPhysConvCombined1dayTable.setStatus('current')
intervalPhysConvCombined1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvCombined1dayNumber"))
if mibBuilder.loadTexts: intervalPhysConvCombined1dayEntry.setStatus('current')
intervalPhysConvCombined1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysConvCombined1dayNumber.setStatus('current')
intervalPhysConvCombined1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined1dayES.setStatus('current')
intervalPhysConvCombined1dayCVDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined1dayCVDE.setStatus('current')
intervalPhysConvCombined1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined1dayValidFlag.setStatus('current')
intervalPhysConvCombined1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined1dayTimeStamp.setStatus('current')
thresholdOtuFecSublayerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110), )
if mibBuilder.loadTexts: thresholdOtuFecSublayerTable.setStatus('current')
thresholdOtuFecSublayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOtuFecSublayerEntry.setStatus('current')
thresholdOtuFecSublayerESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerESHighThres15min.setStatus('current')
thresholdOtuFecSublayerESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerESHighThres1day.setStatus('current')
thresholdOtuFecSublayerSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerSESHighThres15min.setStatus('current')
thresholdOtuFecSublayerSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerSESHighThres1day.setStatus('current')
thresholdOtuFecSublayerCEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerCEHighThres15min.setStatus('current')
thresholdOtuFecSublayerCEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerCEHighThres1day.setStatus('current')
thresholdOtuFecSublayerUBEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerUBEHighThres15min.setStatus('current')
thresholdOtuFecSublayerUBEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerUBEHighThres1day.setStatus('current')
thresholdOtuFecSublayerBERCEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 9), Counter64String()).setUnits('1.0E-18').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerBERCEHighThres15min.setStatus('current')
thresholdOtuFecSublayerBERCEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 10), Counter64String()).setUnits('1.0E-18').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerBERCEHighThres1day.setStatus('current')
thresholdSonetLineMsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111), )
if mibBuilder.loadTexts: thresholdSonetLineMsTable.setStatus('current')
thresholdSonetLineMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSonetLineMsEntry.setStatus('current')
thresholdSonetLineMsESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsESHighThres15min.setStatus('current')
thresholdSonetLineMsESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsESHighThres1day.setStatus('current')
thresholdSonetLineMsSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsSESHighThres15min.setStatus('current')
thresholdSonetLineMsSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsSESHighThres1day.setStatus('current')
thresholdSonetLineMsUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsUASHighThres15min.setStatus('current')
thresholdSonetLineMsUASSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsUASSHighThres1day.setStatus('current')
thresholdSonetLineMsCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsCVHighThres15min.setStatus('current')
thresholdSonetLineMsCVSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsCVSHighThres1day.setStatus('current')
intervalPhysPerfEstimatedSignalGain15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112), )
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minTable.setStatus('current')
intervalPhysPerfEstimatedSignalGain15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfEstimatedSignalGain15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minEntry.setStatus('current')
intervalPhysPerfEstimatedSignalGain15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minNumber.setStatus('current')
intervalPhysPerfEstimatedSignalGain15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minLow.setStatus('current')
intervalPhysPerfEstimatedSignalGain15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minMean.setStatus('current')
intervalPhysPerfEstimatedSignalGain15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minHigh.setStatus('current')
intervalPhysPerfEstimatedSignalGain15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minValidFlag.setStatus('current')
intervalPhysPerfEstimatedSignalGain15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minTimeStamp.setStatus('current')
intervalPhysPerfEstimatedSignalGain1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113), )
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayTable.setStatus('current')
intervalPhysPerfEstimatedSignalGain1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfEstimatedSignalGain1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayEntry.setStatus('current')
intervalPhysPerfEstimatedSignalGain1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayNumber.setStatus('current')
intervalPhysPerfEstimatedSignalGain1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayLow.setStatus('current')
intervalPhysPerfEstimatedSignalGain1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayMean.setStatus('current')
intervalPhysPerfEstimatedSignalGain1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayHigh.setStatus('current')
intervalPhysPerfEstimatedSignalGain1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayValidFlag.setStatus('current')
intervalPhysPerfEstimatedSignalGain1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayTimeStamp.setStatus('current')
intervalPhysPerfEstimatedSignalGain1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114), )
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekTable.setStatus('current')
intervalPhysPerfEstimatedSignalGain1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfEstimatedSignalGain1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekEntry.setStatus('current')
intervalPhysPerfEstimatedSignalGain1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekNumber.setStatus('current')
intervalPhysPerfEstimatedSignalGain1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekLow.setStatus('current')
intervalPhysPerfEstimatedSignalGain1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekMean.setStatus('current')
intervalPhysPerfEstimatedSignalGain1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekHigh.setStatus('current')
intervalPhysPerfEstimatedSignalGain1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekValidFlag.setStatus('current')
intervalPhysPerfEstimatedSignalGain1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekTimeStamp.setStatus('current')
intervalPhysPerfCurrent15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115), )
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minTable.setStatus('current')
intervalPhysPerfCurrent15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrent15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minEntry.setStatus('current')
intervalPhysPerfCurrent15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minNumber.setStatus('current')
intervalPhysPerfCurrent15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 2), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minLow.setStatus('current')
intervalPhysPerfCurrent15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 3), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minMean.setStatus('current')
intervalPhysPerfCurrent15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 4), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minHigh.setStatus('current')
intervalPhysPerfCurrent15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minValidFlag.setStatus('current')
intervalPhysPerfCurrent15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minTimeStamp.setStatus('current')
intervalPhysPerfCurrent1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116), )
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayTable.setStatus('current')
intervalPhysPerfCurrent1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrent1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayEntry.setStatus('current')
intervalPhysPerfCurrent1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayNumber.setStatus('current')
intervalPhysPerfCurrent1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 2), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayLow.setStatus('current')
intervalPhysPerfCurrent1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 3), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayMean.setStatus('current')
intervalPhysPerfCurrent1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 4), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayHigh.setStatus('current')
intervalPhysPerfCurrent1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayValidFlag.setStatus('current')
intervalPhysPerfCurrent1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayTimeStamp.setStatus('current')
intervalPhysPerfCurrent1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117), )
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekTable.setStatus('current')
intervalPhysPerfCurrent1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrent1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekEntry.setStatus('current')
intervalPhysPerfCurrent1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekNumber.setStatus('current')
intervalPhysPerfCurrent1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 2), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekLow.setStatus('current')
intervalPhysPerfCurrent1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 3), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekMean.setStatus('current')
intervalPhysPerfCurrent1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 4), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekHigh.setStatus('current')
intervalPhysPerfCurrent1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekValidFlag.setStatus('current')
intervalPhysPerfCurrent1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekTimeStamp.setStatus('current')
intervalPhysPerfCurrentOscGain15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118), )
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minTable.setStatus('current')
intervalPhysPerfCurrentOscGain15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrentOscGain15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minEntry.setStatus('current')
intervalPhysPerfCurrentOscGain15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minNumber.setStatus('current')
intervalPhysPerfCurrentOscGain15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minLow.setStatus('current')
intervalPhysPerfCurrentOscGain15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minMean.setStatus('current')
intervalPhysPerfCurrentOscGain15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minHigh.setStatus('current')
intervalPhysPerfCurrentOscGain15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minValidFlag.setStatus('current')
intervalPhysPerfCurrentOscGain15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minTimeStamp.setStatus('current')
intervalPhysPerfCurrentOscGain1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119), )
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayTable.setStatus('current')
intervalPhysPerfCurrentOscGain1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrentOscGain1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayEntry.setStatus('current')
intervalPhysPerfCurrentOscGain1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayNumber.setStatus('current')
intervalPhysPerfCurrentOscGain1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayLow.setStatus('current')
intervalPhysPerfCurrentOscGain1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayMean.setStatus('current')
intervalPhysPerfCurrentOscGain1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayHigh.setStatus('current')
intervalPhysPerfCurrentOscGain1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayValidFlag.setStatus('current')
intervalPhysPerfCurrentOscGain1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayTimeStamp.setStatus('current')
intervalPhysPerfCurrentOscGain1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120), )
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekTable.setStatus('current')
intervalPhysPerfCurrentOscGain1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrentOscGain1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekEntry.setStatus('current')
intervalPhysPerfCurrentOscGain1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekNumber.setStatus('current')
intervalPhysPerfCurrentOscGain1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekLow.setStatus('current')
intervalPhysPerfCurrentOscGain1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekMean.setStatus('current')
intervalPhysPerfCurrentOscGain1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekHigh.setStatus('current')
intervalPhysPerfCurrentOscGain1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekValidFlag.setStatus('current')
intervalPhysPerfCurrentOscGain1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekTimeStamp.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121), )
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minTable.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfBackreflectionPwrRcv15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minEntry.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minNumber.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minLow.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minMean.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minHigh.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minValidFlag.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minTimeStamp.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122), )
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayTable.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfBackreflectionPwrRcv1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayEntry.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayNumber.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayLow.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayMean.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayHigh.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayValidFlag.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayTimeStamp.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123), )
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekTable.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfBackreflectionPwrRcv1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekEntry.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekNumber.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekLow.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekMean.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekHigh.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekValidFlag.setStatus('current')
intervalPhysPerfBackreflectionPwrRcv1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekTimeStamp.setStatus('current')
intervalPhysPerfOscPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124), )
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minTable.setStatus('current')
intervalPhysPerfOscPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscPwr15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minEntry.setStatus('current')
intervalPhysPerfOscPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minNumber.setStatus('current')
intervalPhysPerfOscPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minLow.setStatus('current')
intervalPhysPerfOscPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minMean.setStatus('current')
intervalPhysPerfOscPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minHigh.setStatus('current')
intervalPhysPerfOscPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minValidFlag.setStatus('current')
intervalPhysPerfOscPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minTimeStamp.setStatus('current')
intervalPhysPerfOscPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125), )
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayTable.setStatus('current')
intervalPhysPerfOscPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscPwr1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayEntry.setStatus('current')
intervalPhysPerfOscPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayNumber.setStatus('current')
intervalPhysPerfOscPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayLow.setStatus('current')
intervalPhysPerfOscPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayMean.setStatus('current')
intervalPhysPerfOscPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayHigh.setStatus('current')
intervalPhysPerfOscPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayValidFlag.setStatus('current')
intervalPhysPerfOscPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayTimeStamp.setStatus('current')
intervalPhysPerfOscPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126), )
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekTable.setStatus('current')
intervalPhysPerfOscPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscPwr1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekEntry.setStatus('current')
intervalPhysPerfOscPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekNumber.setStatus('current')
intervalPhysPerfOscPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekLow.setStatus('current')
intervalPhysPerfOscPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekMean.setStatus('current')
intervalPhysPerfOscPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekHigh.setStatus('current')
intervalPhysPerfOscPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekValidFlag.setStatus('current')
intervalPhysPerfOscPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekTimeStamp.setStatus('current')
intervalPhysPerfPumpPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127), )
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minTable.setStatus('current')
intervalPhysPerfPumpPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfPumpPwr15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minEntry.setStatus('current')
intervalPhysPerfPumpPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minNumber.setStatus('current')
intervalPhysPerfPumpPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minLow.setStatus('current')
intervalPhysPerfPumpPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minMean.setStatus('current')
intervalPhysPerfPumpPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minHigh.setStatus('current')
intervalPhysPerfPumpPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minValidFlag.setStatus('current')
intervalPhysPerfPumpPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minTimeStamp.setStatus('current')
intervalPhysPerfPumpPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128), )
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayTable.setStatus('current')
intervalPhysPerfPumpPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfPumpPwr1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayEntry.setStatus('current')
intervalPhysPerfPumpPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayNumber.setStatus('current')
intervalPhysPerfPumpPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayLow.setStatus('current')
intervalPhysPerfPumpPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayMean.setStatus('current')
intervalPhysPerfPumpPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayHigh.setStatus('current')
intervalPhysPerfPumpPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayValidFlag.setStatus('current')
intervalPhysPerfPumpPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayTimeStamp.setStatus('current')
intervalPhysPerfPumpPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129), )
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekTable.setStatus('current')
intervalPhysPerfPumpPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfPumpPwr1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekEntry.setStatus('current')
intervalPhysPerfPumpPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekNumber.setStatus('current')
intervalPhysPerfPumpPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekLow.setStatus('current')
intervalPhysPerfPumpPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekMean.setStatus('current')
intervalPhysPerfPumpPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekHigh.setStatus('current')
intervalPhysPerfPumpPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekValidFlag.setStatus('current')
intervalPhysPerfPumpPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekTimeStamp.setStatus('current')
intervalDispersionCompensation15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130), )
if mibBuilder.loadTexts: intervalDispersionCompensation15minTable.setStatus('current')
intervalDispersionCompensation15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalDispersionCompensation15minNumber"))
if mibBuilder.loadTexts: intervalDispersionCompensation15minEntry.setStatus('current')
intervalDispersionCompensation15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalDispersionCompensation15minNumber.setStatus('current')
intervalDispersionCompensation15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation15minLow.setStatus('current')
intervalDispersionCompensation15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation15minMean.setStatus('current')
intervalDispersionCompensation15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation15minHigh.setStatus('current')
intervalDispersionCompensation15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation15minValidFlag.setStatus('current')
intervalDispersionCompensation15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation15minTimeStamp.setStatus('current')
intervalDispersionCompensation1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131), )
if mibBuilder.loadTexts: intervalDispersionCompensation1dayTable.setStatus('current')
intervalDispersionCompensation1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalDispersionCompensation1dayNumber"))
if mibBuilder.loadTexts: intervalDispersionCompensation1dayEntry.setStatus('current')
intervalDispersionCompensation1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalDispersionCompensation1dayNumber.setStatus('current')
intervalDispersionCompensation1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1dayLow.setStatus('current')
intervalDispersionCompensation1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1dayMean.setStatus('current')
intervalDispersionCompensation1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1dayHigh.setStatus('current')
intervalDispersionCompensation1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1dayValidFlag.setStatus('current')
intervalDispersionCompensation1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1dayTimeStamp.setStatus('current')
intervalDispersionCompensation1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132), )
if mibBuilder.loadTexts: intervalDispersionCompensation1weekTable.setStatus('current')
intervalDispersionCompensation1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalDispersionCompensation1weekNumber"))
if mibBuilder.loadTexts: intervalDispersionCompensation1weekEntry.setStatus('current')
intervalDispersionCompensation1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalDispersionCompensation1weekNumber.setStatus('current')
intervalDispersionCompensation1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1weekLow.setStatus('current')
intervalDispersionCompensation1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1weekMean.setStatus('current')
intervalDispersionCompensation1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1weekHigh.setStatus('current')
intervalDispersionCompensation1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1weekValidFlag.setStatus('current')
intervalDispersionCompensation1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1weekTimeStamp.setStatus('current')
intervalLinkAttenuation15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133), )
if mibBuilder.loadTexts: intervalLinkAttenuation15minTable.setStatus('current')
intervalLinkAttenuation15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLinkAttenuation15minNumber"))
if mibBuilder.loadTexts: intervalLinkAttenuation15minEntry.setStatus('current')
intervalLinkAttenuation15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalLinkAttenuation15minNumber.setStatus('current')
intervalLinkAttenuation15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation15minLow.setStatus('current')
intervalLinkAttenuation15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation15minMean.setStatus('current')
intervalLinkAttenuation15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation15minHigh.setStatus('current')
intervalLinkAttenuation15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation15minValidFlag.setStatus('current')
intervalLinkAttenuation15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation15minTimeStamp.setStatus('current')
intervalLinkAttenuation1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134), )
if mibBuilder.loadTexts: intervalLinkAttenuation1dayTable.setStatus('current')
intervalLinkAttenuation1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLinkAttenuation1dayNumber"))
if mibBuilder.loadTexts: intervalLinkAttenuation1dayEntry.setStatus('current')
intervalLinkAttenuation1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalLinkAttenuation1dayNumber.setStatus('current')
intervalLinkAttenuation1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1dayLow.setStatus('current')
intervalLinkAttenuation1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1dayMean.setStatus('current')
intervalLinkAttenuation1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1dayHigh.setStatus('current')
intervalLinkAttenuation1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1dayValidFlag.setStatus('current')
intervalLinkAttenuation1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1dayTimeStamp.setStatus('current')
intervalLinkAttenuation1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135), )
if mibBuilder.loadTexts: intervalLinkAttenuation1weekTable.setStatus('current')
intervalLinkAttenuation1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLinkAttenuation1weekNumber"))
if mibBuilder.loadTexts: intervalLinkAttenuation1weekEntry.setStatus('current')
intervalLinkAttenuation1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalLinkAttenuation1weekNumber.setStatus('current')
intervalLinkAttenuation1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1weekLow.setStatus('current')
intervalLinkAttenuation1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1weekMean.setStatus('current')
intervalLinkAttenuation1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1weekHigh.setStatus('current')
intervalLinkAttenuation1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1weekValidFlag.setStatus('current')
intervalLinkAttenuation1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1weekTimeStamp.setStatus('current')
currentL2EthRx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136), )
if mibBuilder.loadTexts: currentL2EthRx15minTable.setStatus('current')
currentL2EthRx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentL2EthRx15minEntry.setStatus('current')
currentL2EthRx15minFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minFramesRcv.setStatus('current')
currentL2EthRx15minBytesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesRcv.setStatus('current')
currentL2EthRx15minBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBroadcastFramesRcv.setStatus('current')
currentL2EthRx15minMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minMulticastFramesRcv.setStatus('current')
currentL2EthRx15minCrcErrorsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minCrcErrorsRcv.setStatus('current')
currentL2EthRx15minUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minUndersizedFramesRcv.setStatus('current')
currentL2EthRx15minOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minOversizedFramesRcv.setStatus('current')
currentL2EthRx15minPauseFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minPauseFramesRcv.setStatus('current')
currentL2EthRx15minBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames64Rcv.setStatus('current')
currentL2EthRx15minBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames65Rcv.setStatus('current')
currentL2EthRx15minBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames128Rcv.setStatus('current')
currentL2EthRx15minBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames256Rcv.setStatus('current')
currentL2EthRx15minBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames512Rcv.setStatus('current')
currentL2EthRx15minBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames1024Rcv.setStatus('current')
currentL2EthRx15minBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames1519Rcv.setStatus('current')
currentL2EthRx15minInterPackJunkBytesFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minInterPackJunkBytesFramesRcv.setStatus('current')
currentL2EthRx15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minElapsedTime.setStatus('current')
currentL2EthRx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137), )
if mibBuilder.loadTexts: currentL2EthRx1dayTable.setStatus('current')
currentL2EthRx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentL2EthRx1dayEntry.setStatus('current')
currentL2EthRx1dayFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayFramesRcv.setStatus('current')
currentL2EthRx1dayBytesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesRcv.setStatus('current')
currentL2EthRx1dayBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBroadcastFramesRcv.setStatus('current')
currentL2EthRx1dayMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayMulticastFramesRcv.setStatus('current')
currentL2EthRx1dayCrcErrorsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayCrcErrorsRcv.setStatus('current')
currentL2EthRx1dayUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayUndersizedFramesRcv.setStatus('current')
currentL2EthRx1dayOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayOversizedFramesRcv.setStatus('current')
currentL2EthRx1dayPauseFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayPauseFramesRcv.setStatus('current')
currentL2EthRx1dayBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames64Rcv.setStatus('current')
currentL2EthRx1dayBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames65Rcv.setStatus('current')
currentL2EthRx1dayBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames128Rcv.setStatus('current')
currentL2EthRx1dayBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames256Rcv.setStatus('current')
currentL2EthRx1dayBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames512Rcv.setStatus('current')
currentL2EthRx1dayBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames1024Rcv.setStatus('current')
currentL2EthRx1dayBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames1519Rcv.setStatus('current')
currentL2EthRx1dayInterPackJunkBytesFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayInterPackJunkBytesFramesRcv.setStatus('current')
currentL2EthRx1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayElapsedTime.setStatus('current')
intervalL2EthRx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138), )
if mibBuilder.loadTexts: intervalL2EthRx15minTable.setStatus('current')
intervalL2EthRx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx15minNumber"))
if mibBuilder.loadTexts: intervalL2EthRx15minEntry.setStatus('current')
intervalL2EthRx15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalL2EthRx15minNumber.setStatus('current')
intervalL2EthRx15minFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minFramesRcv.setStatus('current')
intervalL2EthRx15minBytesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesRcv.setStatus('current')
intervalL2EthRx15minBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBroadcastFramesRcv.setStatus('current')
intervalL2EthRx15minMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minMulticastFramesRcv.setStatus('current')
intervalL2EthRx15minCrcErrorsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minCrcErrorsRcv.setStatus('current')
intervalL2EthRx15minUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minUndersizedFramesRcv.setStatus('current')
intervalL2EthRx15minOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minOversizedFramesRcv.setStatus('current')
intervalL2EthRx15minPauseFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minPauseFramesRcv.setStatus('current')
intervalL2EthRx15minBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames64Rcv.setStatus('current')
intervalL2EthRx15minBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames65Rcv.setStatus('current')
intervalL2EthRx15minBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames128Rcv.setStatus('current')
intervalL2EthRx15minBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames256Rcv.setStatus('current')
intervalL2EthRx15minBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames512Rcv.setStatus('current')
intervalL2EthRx15minBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames1024Rcv.setStatus('current')
intervalL2EthRx15minBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames1519Rcv.setStatus('current')
intervalL2EthRx15minInterPackJunkBytesFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minInterPackJunkBytesFramesRcv.setStatus('current')
intervalL2EthRx15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minValidFlag.setStatus('current')
intervalL2EthRx15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minTimeStamp.setStatus('current')
intervalL2EthRx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139), )
if mibBuilder.loadTexts: intervalL2EthRx1dayTable.setStatus('current')
intervalL2EthRx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx1dayNumber"))
if mibBuilder.loadTexts: intervalL2EthRx1dayEntry.setStatus('current')
intervalL2EthRx1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalL2EthRx1dayNumber.setStatus('current')
intervalL2EthRx1dayFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayFramesRcv.setStatus('current')
intervalL2EthRx1dayBytesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesRcv.setStatus('current')
intervalL2EthRx1dayBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBroadcastFramesRcv.setStatus('current')
intervalL2EthRx1dayMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayMulticastFramesRcv.setStatus('current')
intervalL2EthRx1dayCrcErrorsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayCrcErrorsRcv.setStatus('current')
intervalL2EthRx1dayUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayUndersizedFramesRcv.setStatus('current')
intervalL2EthRx1dayOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayOversizedFramesRcv.setStatus('current')
intervalL2EthRx1dayPauseFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayPauseFramesRcv.setStatus('current')
intervalL2EthRx1dayBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames64Rcv.setStatus('current')
intervalL2EthRx1dayBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames65Rcv.setStatus('current')
intervalL2EthRx1dayBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames128Rcv.setStatus('current')
intervalL2EthRx1dayBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames256Rcv.setStatus('current')
intervalL2EthRx1dayBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames512Rcv.setStatus('current')
intervalL2EthRx1dayBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames1024Rcv.setStatus('current')
intervalL2EthRx1dayBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames1519Rcv.setStatus('current')
intervalL2EthRx1dayInterPackJunkBytesFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayInterPackJunkBytesFramesRcv.setStatus('current')
intervalL2EthRx1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayValidFlag.setStatus('current')
intervalL2EthRx1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayTimeStamp.setStatus('current')
currentL2EthTx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140), )
if mibBuilder.loadTexts: currentL2EthTx15minTable.setStatus('current')
currentL2EthTx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentL2EthTx15minEntry.setStatus('current')
currentL2EthTx15minFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minFramesTrmt.setStatus('current')
currentL2EthTx15minBytesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesTrmt.setStatus('current')
currentL2EthTx15minBroadcastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBroadcastFramesTrmt.setStatus('current')
currentL2EthTx15minMulticastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minMulticastFramesTrmt.setStatus('current')
currentL2EthTx15minPauseFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minPauseFramesTrmt.setStatus('current')
currentL2EthTx15minBytesFrames64Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames64Trmt.setStatus('current')
currentL2EthTx15minBytesFrames65Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames65Trmt.setStatus('current')
currentL2EthTx15minBytesFrames128Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames128Trmt.setStatus('current')
currentL2EthTx15minBytesFrames256Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames256Trmt.setStatus('current')
currentL2EthTx15minBytesFrames512Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames512Trmt.setStatus('current')
currentL2EthTx15minBytesFrames1024Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames1024Trmt.setStatus('current')
currentL2EthTx15minBytesFrames1519Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames1519Trmt.setStatus('current')
currentL2EthTx15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minElapsedTime.setStatus('current')
currentL2EthTx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141), )
if mibBuilder.loadTexts: currentL2EthTx1dayTable.setStatus('current')
currentL2EthTx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentL2EthTx1dayEntry.setStatus('current')
currentL2EthTx1dayFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayFramesTrmt.setStatus('current')
currentL2EthTx1dayBytesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesTrmt.setStatus('current')
currentL2EthTx1dayBroadcastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBroadcastFramesTrmt.setStatus('current')
currentL2EthTx1dayMulticastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayMulticastFramesTrmt.setStatus('current')
currentL2EthTx1dayPauseFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayPauseFramesTrmt.setStatus('current')
currentL2EthTx1dayBytesFrames64Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames64Trmt.setStatus('current')
currentL2EthTx1dayBytesFrames65Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames65Trmt.setStatus('current')
currentL2EthTx1dayBytesFrames128Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames128Trmt.setStatus('current')
currentL2EthTx1dayBytesFrames256Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames256Trmt.setStatus('current')
currentL2EthTx1dayBytesFrames512Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames512Trmt.setStatus('current')
currentL2EthTx1dayBytesFrames1024Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames1024Trmt.setStatus('current')
currentL2EthTx1dayBytesFrames1519Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames1519Trmt.setStatus('current')
currentL2EthTx1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayElapsedTime.setStatus('current')
intervalL2EthTx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142), )
if mibBuilder.loadTexts: intervalL2EthTx15minTable.setStatus('current')
intervalL2EthTx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthTx15minNumber"))
if mibBuilder.loadTexts: intervalL2EthTx15minEntry.setStatus('current')
intervalL2EthTx15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalL2EthTx15minNumber.setStatus('current')
intervalL2EthTx15minFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minFramesTrmt.setStatus('current')
intervalL2EthTx15minBytesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesTrmt.setStatus('current')
intervalL2EthTx15minBroadcastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBroadcastFramesTrmt.setStatus('current')
intervalL2EthTx15minMulticastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minMulticastFramesTrmt.setStatus('current')
intervalL2EthTx15minPauseFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minPauseFramesTrmt.setStatus('current')
intervalL2EthTx15minBytesFrames64Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames64Trmt.setStatus('current')
intervalL2EthTx15minBytesFrames65Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames65Trmt.setStatus('current')
intervalL2EthTx15minBytesFrames128Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames128Trmt.setStatus('current')
intervalL2EthTx15minBytesFrames256Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames256Trmt.setStatus('current')
intervalL2EthTx15minBytesFrames512Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames512Trmt.setStatus('current')
intervalL2EthTx15minBytesFrames1024Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames1024Trmt.setStatus('current')
intervalL2EthTx15minBytesFrames1519Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames1519Trmt.setStatus('current')
intervalL2EthTx15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minValidFlag.setStatus('current')
intervalL2EthTx15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minTimeStamp.setStatus('current')
intervalL2EthTx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143), )
if mibBuilder.loadTexts: intervalL2EthTx1dayTable.setStatus('current')
intervalL2EthTx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthTx1dayNumber"))
if mibBuilder.loadTexts: intervalL2EthTx1dayEntry.setStatus('current')
intervalL2EthTx1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalL2EthTx1dayNumber.setStatus('current')
intervalL2EthTx1dayFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayFramesTrmt.setStatus('current')
intervalL2EthTx1dayBytesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesTrmt.setStatus('current')
intervalL2EthTx1dayBroadcastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBroadcastFramesTrmt.setStatus('current')
intervalL2EthTx1dayMulticastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayMulticastFramesTrmt.setStatus('current')
intervalL2EthTx1dayPauseFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayPauseFramesTrmt.setStatus('current')
intervalL2EthTx1dayBytesFrames64Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames64Trmt.setStatus('current')
intervalL2EthTx1dayBytesFrames65Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames65Trmt.setStatus('current')
intervalL2EthTx1dayBytesFrames128Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames128Trmt.setStatus('current')
intervalL2EthTx1dayBytesFrames256Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames256Trmt.setStatus('current')
intervalL2EthTx1dayBytesFrames512Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames512Trmt.setStatus('current')
intervalL2EthTx1dayBytesFrames1024Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames1024Trmt.setStatus('current')
intervalL2EthTx1dayBytesFrames1519Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames1519Trmt.setStatus('current')
intervalL2EthTx1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayValidFlag.setStatus('current')
intervalL2EthTx1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayTimeStamp.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minTable.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr15minNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minEntry.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minNumber.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minLow.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minMean.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minHigh.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minValidFlag.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minTimeStamp.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayTable.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr1dayNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayEntry.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayNumber.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayLow.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayMean.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayHigh.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayValidFlag.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayTimeStamp.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekTable.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr1weekNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekEntry.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekNumber.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekLow.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekMean.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekHigh.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekValidFlag.setStatus('current')
intervalFarEndPhysPerfOpticalInputPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekTimeStamp.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minTable.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr15minNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minEntry.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minNumber.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minLow.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minMean.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minHigh.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minValidFlag.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minTimeStamp.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayTable.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr1dayNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayEntry.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayNumber.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayLow.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayMean.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayHigh.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayValidFlag.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayTimeStamp.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekTable.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr1weekNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekEntry.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekNumber.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekLow.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekMean.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekHigh.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekValidFlag.setStatus('current')
intervalFarEndPhysPerfOpticalOutputPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekTimeStamp.setStatus('current')
intervalLatency15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150), )
if mibBuilder.loadTexts: intervalLatency15minTable.setStatus('current')
intervalLatency15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLatency15minNumber"))
if mibBuilder.loadTexts: intervalLatency15minEntry.setStatus('current')
intervalLatency15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalLatency15minNumber.setStatus('current')
intervalLatency15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 2), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency15minLow.setStatus('current')
intervalLatency15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 3), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency15minMean.setStatus('current')
intervalLatency15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 4), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency15minHigh.setStatus('current')
intervalLatency15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency15minValidFlag.setStatus('current')
intervalLatency15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency15minTimeStamp.setStatus('current')
intervalLatency1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151), )
if mibBuilder.loadTexts: intervalLatency1dayTable.setStatus('current')
intervalLatency1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLatency1dayNumber"))
if mibBuilder.loadTexts: intervalLatency1dayEntry.setStatus('current')
intervalLatency1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalLatency1dayNumber.setStatus('current')
intervalLatency1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 2), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1dayLow.setStatus('current')
intervalLatency1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 3), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1dayMean.setStatus('current')
intervalLatency1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 4), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1dayHigh.setStatus('current')
intervalLatency1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1dayValidFlag.setStatus('current')
intervalLatency1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1dayTimeStamp.setStatus('current')
intervalLatency1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152), )
if mibBuilder.loadTexts: intervalLatency1weekTable.setStatus('current')
intervalLatency1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLatency1weekNumber"))
if mibBuilder.loadTexts: intervalLatency1weekEntry.setStatus('current')
intervalLatency1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalLatency1weekNumber.setStatus('current')
intervalLatency1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 2), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1weekLow.setStatus('current')
intervalLatency1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 3), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1weekMean.setStatus('current')
intervalLatency1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 4), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1weekHigh.setStatus('current')
intervalLatency1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1weekValidFlag.setStatus('current')
intervalLatency1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1weekTimeStamp.setStatus('current')
intervalRoundTripDelay15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153), )
if mibBuilder.loadTexts: intervalRoundTripDelay15minTable.setStatus('current')
intervalRoundTripDelay15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalRoundTripDelay15minNumber"))
if mibBuilder.loadTexts: intervalRoundTripDelay15minEntry.setStatus('current')
intervalRoundTripDelay15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalRoundTripDelay15minNumber.setStatus('current')
intervalRoundTripDelay15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 2), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay15minLow.setStatus('current')
intervalRoundTripDelay15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 3), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay15minMean.setStatus('current')
intervalRoundTripDelay15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 4), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay15minHigh.setStatus('current')
intervalRoundTripDelay15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay15minValidFlag.setStatus('current')
intervalRoundTripDelay15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay15minTimeStamp.setStatus('current')
intervalRoundTripDelay1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154), )
if mibBuilder.loadTexts: intervalRoundTripDelay1dayTable.setStatus('current')
intervalRoundTripDelay1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalRoundTripDelay1dayNumber"))
if mibBuilder.loadTexts: intervalRoundTripDelay1dayEntry.setStatus('current')
intervalRoundTripDelay1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalRoundTripDelay1dayNumber.setStatus('current')
intervalRoundTripDelay1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 2), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1dayLow.setStatus('current')
intervalRoundTripDelay1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 3), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1dayMean.setStatus('current')
intervalRoundTripDelay1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 4), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1dayHigh.setStatus('current')
intervalRoundTripDelay1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1dayValidFlag.setStatus('current')
intervalRoundTripDelay1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1dayTimeStamp.setStatus('current')
intervalRoundTripDelay1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155), )
if mibBuilder.loadTexts: intervalRoundTripDelay1weekTable.setStatus('current')
intervalRoundTripDelay1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalRoundTripDelay1weekNumber"))
if mibBuilder.loadTexts: intervalRoundTripDelay1weekEntry.setStatus('current')
intervalRoundTripDelay1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalRoundTripDelay1weekNumber.setStatus('current')
intervalRoundTripDelay1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 2), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1weekLow.setStatus('current')
intervalRoundTripDelay1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 3), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1weekMean.setStatus('current')
intervalRoundTripDelay1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 4), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1weekHigh.setStatus('current')
intervalRoundTripDelay1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1weekValidFlag.setStatus('current')
intervalRoundTripDelay1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1weekTimeStamp.setStatus('current')
currentPmSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156), )
if mibBuilder.loadTexts: currentPmSnapshotTable.setStatus('current')
currentPmSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPmSnapshotEntry.setStatus('current')
currentPmSnapshotOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 1), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotOutputPower.setStatus('current')
currentPmSnapshotInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotInputPower.setStatus('current')
currentPmSnapshotAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotAttenuation.setStatus('current')
currentPmSnapshotAttenuationOfVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotAttenuationOfVoa.setStatus('current')
currentPmSnapshotOscGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 5), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotOscGain.setStatus('current')
currentPmSnapshotBackreflectionPowerReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotBackreflectionPowerReceived.setStatus('current')
currentPmSnapshotRamanPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 7), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotRamanPumpPower.setStatus('current')
currentPmSnapshotOscPowerReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 8), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotOscPowerReceived.setStatus('current')
currentPmSnapshotVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 9), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotVariableGain.setStatus('current')
currentPmSnapshotTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 10), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotTxLineAttenuation.setStatus('current')
currentPmSnapshotRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 11), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotRxLineAttenuation.setStatus('current')
intervalPmSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157), )
if mibBuilder.loadTexts: intervalPmSnapshotTable.setStatus('current')
intervalPmSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1), ).setIndexNames((0, "FspR7-MIB", "intervalPmSnapshotParameter"), (0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPmSnapshotNumber"))
if mibBuilder.loadTexts: intervalPmSnapshotEntry.setStatus('current')
intervalPmSnapshotParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1, 1), FspR7PmSnapshotParameterTypes())
if mibBuilder.loadTexts: intervalPmSnapshotParameter.setStatus('current')
intervalPmSnapshotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: intervalPmSnapshotNumber.setStatus('current')
intervalPmSnapshotValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1, 3), Integer32()).setUnits('0.1').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPmSnapshotValue.setStatus('current')
intervalPmSnapshotValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPmSnapshotValidFlag.setStatus('current')
intervalPmSnapshotTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPmSnapshotTimeStamp.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158), )
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minTable.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscOpticalOutputPwr15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minEntry.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minNumber.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minLow.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minMean.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minHigh.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minValidFlag.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minTimeStamp.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159), )
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayTable.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscOpticalOutputPwr1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayEntry.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayNumber.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayLow.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayMean.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayHigh.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayValidFlag.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayTimeStamp.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160), )
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekTable.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscOpticalOutputPwr1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekEntry.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekNumber.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekLow.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekMean.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekHigh.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekValidFlag.setStatus('current')
intervalPhysPerfOscOpticalOutputPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekTimeStamp.setStatus('current')
currentPhysConvTxHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161), )
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minTable.setStatus('current')
currentPhysConvTxHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minEntry.setStatus('current')
currentPhysConvTxHighSpeed15minESTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minESTX.setStatus('current')
currentPhysConvTxHighSpeed15minCVTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minCVTX.setStatus('current')
currentPhysConvTxHighSpeed15minSETX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minSETX.setStatus('current')
currentPhysConvTxHighSpeed15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minElapsedTime.setStatus('current')
currentPhysConvTxHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162), )
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayTable.setStatus('current')
currentPhysConvTxHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayEntry.setStatus('current')
currentPhysConvTxHighSpeed1dayESTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayESTX.setStatus('current')
currentPhysConvTxHighSpeed1dayCVTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayCVTX.setStatus('current')
currentPhysConvTxHighSpeed1daySETX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1daySETX.setStatus('current')
currentPhysConvTxHighSpeed1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayElapsedTime.setStatus('current')
intervalPhysConvTxHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163), )
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minTable.setStatus('current')
intervalPhysConvTxHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvTxHighSpeed15minNumber"))
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minEntry.setStatus('current')
intervalPhysConvTxHighSpeed15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minNumber.setStatus('current')
intervalPhysConvTxHighSpeed15minESTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minESTX.setStatus('current')
intervalPhysConvTxHighSpeed15minCVTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minCVTX.setStatus('current')
intervalPhysConvTxHighSpeed15minSETX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minSETX.setStatus('current')
intervalPhysConvTxHighSpeed15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minValidFlag.setStatus('current')
intervalPhysConvTxHighSpeed15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minTimeStamp.setStatus('current')
intervalPhysConvTxHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164), )
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayTable.setStatus('current')
intervalPhysConvTxHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvTxHighSpeed1dayNumber"))
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayEntry.setStatus('current')
intervalPhysConvTxHighSpeed1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayNumber.setStatus('current')
intervalPhysConvTxHighSpeed1dayESTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayESTX.setStatus('current')
intervalPhysConvTxHighSpeed1dayCVTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayCVTX.setStatus('current')
intervalPhysConvTxHighSpeed1daySETX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1daySETX.setStatus('current')
intervalPhysConvTxHighSpeed1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayValidFlag.setStatus('current')
intervalPhysConvTxHighSpeed1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayTimeStamp.setStatus('current')
intervalPhysPerfDiffGrDelay15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165), )
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minTable.setStatus('current')
intervalPhysPerfDiffGrDelay15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfDiffGrDelay15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minEntry.setStatus('current')
intervalPhysPerfDiffGrDelay15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minNumber.setStatus('current')
intervalPhysPerfDiffGrDelay15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 2), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minLow.setStatus('current')
intervalPhysPerfDiffGrDelay15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 3), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minMean.setStatus('current')
intervalPhysPerfDiffGrDelay15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 4), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minHigh.setStatus('current')
intervalPhysPerfDiffGrDelay15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minValidFlag.setStatus('current')
intervalPhysPerfDiffGrDelay15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minTimeStamp.setStatus('current')
intervalPhysPerfDiffGrDelay1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166), )
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayTable.setStatus('current')
intervalPhysPerfDiffGrDelay1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfDiffGrDelay1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayEntry.setStatus('current')
intervalPhysPerfDiffGrDelay1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayNumber.setStatus('current')
intervalPhysPerfDiffGrDelay1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 2), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayLow.setStatus('current')
intervalPhysPerfDiffGrDelay1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 3), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayMean.setStatus('current')
intervalPhysPerfDiffGrDelay1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 4), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayHigh.setStatus('current')
intervalPhysPerfDiffGrDelay1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayValidFlag.setStatus('current')
intervalPhysPerfDiffGrDelay1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayTimeStamp.setStatus('current')
intervalPhysPerfDiffGrDelay1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167), )
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekTable.setStatus('current')
intervalPhysPerfDiffGrDelay1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfDiffGrDelay1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekEntry.setStatus('current')
intervalPhysPerfDiffGrDelay1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekNumber.setStatus('current')
intervalPhysPerfDiffGrDelay1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 2), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekLow.setStatus('current')
intervalPhysPerfDiffGrDelay1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 3), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekMean.setStatus('current')
intervalPhysPerfDiffGrDelay1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 4), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekHigh.setStatus('current')
intervalPhysPerfDiffGrDelay1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekValidFlag.setStatus('current')
intervalPhysPerfDiffGrDelay1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekTimeStamp.setStatus('current')
intervalPhysPerfChromaticDispersion15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168), )
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minTable.setStatus('current')
intervalPhysPerfChromaticDispersion15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfChromaticDispersion15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minEntry.setStatus('current')
intervalPhysPerfChromaticDispersion15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minNumber.setStatus('current')
intervalPhysPerfChromaticDispersion15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minLow.setStatus('current')
intervalPhysPerfChromaticDispersion15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minMean.setStatus('current')
intervalPhysPerfChromaticDispersion15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minHigh.setStatus('current')
intervalPhysPerfChromaticDispersion15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minValidFlag.setStatus('current')
intervalPhysPerfChromaticDispersion15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minTimeStamp.setStatus('current')
intervalPhysPerfChromaticDispersion1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169), )
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayTable.setStatus('current')
intervalPhysPerfChromaticDispersion1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfChromaticDispersion1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayEntry.setStatus('current')
intervalPhysPerfChromaticDispersion1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayNumber.setStatus('current')
intervalPhysPerfChromaticDispersion1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayLow.setStatus('current')
intervalPhysPerfChromaticDispersion1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayMean.setStatus('current')
intervalPhysPerfChromaticDispersion1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayHigh.setStatus('current')
intervalPhysPerfChromaticDispersion1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayValidFlag.setStatus('current')
intervalPhysPerfChromaticDispersion1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayTimeStamp.setStatus('current')
intervalPhysPerfChromaticDispersion1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170), )
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekTable.setStatus('current')
intervalPhysPerfChromaticDispersion1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfChromaticDispersion1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekEntry.setStatus('current')
intervalPhysPerfChromaticDispersion1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekNumber.setStatus('current')
intervalPhysPerfChromaticDispersion1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekLow.setStatus('current')
intervalPhysPerfChromaticDispersion1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekMean.setStatus('current')
intervalPhysPerfChromaticDispersion1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekHigh.setStatus('current')
intervalPhysPerfChromaticDispersion1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekValidFlag.setStatus('current')
intervalPhysPerfChromaticDispersion1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekTimeStamp.setStatus('current')
intervalPhysPerfSignalToNoiseRatio15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171), )
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minTable.setStatus('current')
intervalPhysPerfSignalToNoiseRatio15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfSignalToNoiseRatio15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minEntry.setStatus('current')
intervalPhysPerfSignalToNoiseRatio15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minNumber.setStatus('current')
intervalPhysPerfSignalToNoiseRatio15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minLow.setStatus('current')
intervalPhysPerfSignalToNoiseRatio15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minMean.setStatus('current')
intervalPhysPerfSignalToNoiseRatio15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minHigh.setStatus('current')
intervalPhysPerfSignalToNoiseRatio15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minValidFlag.setStatus('current')
intervalPhysPerfSignalToNoiseRatio15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minTimeStamp.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172), )
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayTable.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfSignalToNoiseRatio1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayEntry.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayNumber.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayLow.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayMean.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayHigh.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayValidFlag.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayTimeStamp.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173), )
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekTable.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfSignalToNoiseRatio1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekEntry.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekNumber.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekLow.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekMean.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekHigh.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekValidFlag.setStatus('current')
intervalPhysPerfSignalToNoiseRatio1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekTimeStamp.setStatus('current')
intervalPhysPerfCarrierFreqOffset15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174), )
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minTable.setStatus('current')
intervalPhysPerfCarrierFreqOffset15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCarrierFreqOffset15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minEntry.setStatus('current')
intervalPhysPerfCarrierFreqOffset15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minNumber.setStatus('current')
intervalPhysPerfCarrierFreqOffset15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 2), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minLow.setStatus('current')
intervalPhysPerfCarrierFreqOffset15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 3), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minMean.setStatus('current')
intervalPhysPerfCarrierFreqOffset15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 4), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minHigh.setStatus('current')
intervalPhysPerfCarrierFreqOffset15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minValidFlag.setStatus('current')
intervalPhysPerfCarrierFreqOffset15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minTimeStamp.setStatus('current')
intervalPhysPerfCarrierFreqOffset1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175), )
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayTable.setStatus('current')
intervalPhysPerfCarrierFreqOffset1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCarrierFreqOffset1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayEntry.setStatus('current')
intervalPhysPerfCarrierFreqOffset1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayNumber.setStatus('current')
intervalPhysPerfCarrierFreqOffset1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 2), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayLow.setStatus('current')
intervalPhysPerfCarrierFreqOffset1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 3), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayMean.setStatus('current')
intervalPhysPerfCarrierFreqOffset1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 4), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayHigh.setStatus('current')
intervalPhysPerfCarrierFreqOffset1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayValidFlag.setStatus('current')
intervalPhysPerfCarrierFreqOffset1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayTimeStamp.setStatus('current')
intervalPhysPerfCarrierFreqOffset1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176), )
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekTable.setStatus('current')
intervalPhysPerfCarrierFreqOffset1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCarrierFreqOffset1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekEntry.setStatus('current')
intervalPhysPerfCarrierFreqOffset1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekNumber.setStatus('current')
intervalPhysPerfCarrierFreqOffset1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 2), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekLow.setStatus('current')
intervalPhysPerfCarrierFreqOffset1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 3), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekMean.setStatus('current')
intervalPhysPerfCarrierFreqOffset1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 4), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekHigh.setStatus('current')
intervalPhysPerfCarrierFreqOffset1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekValidFlag.setStatus('current')
intervalPhysPerfCarrierFreqOffset1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekTimeStamp.setStatus('current')
thresholdOtuFecSublayerExTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177), )
if mibBuilder.loadTexts: thresholdOtuFecSublayerExTable.setStatus('current')
thresholdOtuFecSublayerExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOtuFecSublayerExEntry.setStatus('current')
thresholdOtuFecSublayerExCEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177, 1, 1), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerExCEHighThres15min.setStatus('current')
thresholdOtuFecSublayerExCEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177, 1, 2), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerExCEHighThres1day.setStatus('current')
thresholdOtuFecSublayerExUBEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177, 1, 3), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerExUBEHighThres15min.setStatus('current')
thresholdOtuFecSublayerExUBEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177, 1, 4), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerExUBEHighThres1day.setStatus('current')
currentOtuFec15minExTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178), )
if mibBuilder.loadTexts: currentOtuFec15minExTable.setStatus('current')
currentOtuFec15minExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtuFec15minExEntry.setStatus('current')
currentOtuFec15minExCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minExCE.setStatus('current')
currentOtuFec15minExUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minExUBE.setStatus('current')
currentOtuFec15minExBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178, 1, 3), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minExBERCE.setStatus('current')
currentOtuFec15minExElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minExElapsedTime.setStatus('current')
currentOtuFec1dayExTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179), )
if mibBuilder.loadTexts: currentOtuFec1dayExTable.setStatus('current')
currentOtuFec1dayExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtuFec1dayExEntry.setStatus('current')
currentOtuFec1dayExCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayExCE.setStatus('current')
currentOtuFec1dayExUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayExUBE.setStatus('current')
currentOtuFec1dayExBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179, 1, 3), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayExBERCE.setStatus('current')
currentOtuFec1dayExElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayExElapsedTime.setStatus('current')
intervalOtuFec15minExTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180), )
if mibBuilder.loadTexts: intervalOtuFec15minExTable.setStatus('current')
intervalOtuFec15minExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtuFec15minExNumber"))
if mibBuilder.loadTexts: intervalOtuFec15minExEntry.setStatus('current')
intervalOtuFec15minExNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOtuFec15minExNumber.setStatus('current')
intervalOtuFec15minExCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minExCE.setStatus('current')
intervalOtuFec15minExUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minExUBE.setStatus('current')
intervalOtuFec15minExBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 4), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minExBERCE.setStatus('current')
intervalOtuFec15minExValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minExValidFlag.setStatus('current')
intervalOtuFec15minExTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minExTimeStamp.setStatus('current')
intervalOtuFec1dayExTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181), )
if mibBuilder.loadTexts: intervalOtuFec1dayExTable.setStatus('current')
intervalOtuFec1dayExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtuFec1dayExNumber"))
if mibBuilder.loadTexts: intervalOtuFec1dayExEntry.setStatus('current')
intervalOtuFec1dayExNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOtuFec1dayExNumber.setStatus('current')
intervalOtuFec1dayExCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayExCE.setStatus('current')
intervalOtuFec1dayExUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayExUBE.setStatus('current')
intervalOtuFec1dayExBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 4), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayExBERCE.setStatus('current')
intervalOtuFec1dayExValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayExValidFlag.setStatus('current')
intervalOtuFec1dayExTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayExTimeStamp.setStatus('current')
currentEthRx3HS15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182), )
if mibBuilder.loadTexts: currentEthRx3HS15minTable.setStatus('current')
currentEthRx3HS15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRx3HS15minEntry.setStatus('current')
currentEthRx3HS15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minGoodFrames.setStatus('current')
currentEthRx3HS15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minPauseFrames.setStatus('current')
currentEthRx3HS15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minCrcFrames.setStatus('current')
currentEthRx3HS15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytes.setStatus('current')
currentEthRx3HS15minBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBroadcastFramesRcv.setStatus('current')
currentEthRx3HS15minMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minMulticastFramesRcv.setStatus('current')
currentEthRx3HS15minUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minUndersizedFramesRcv.setStatus('current')
currentEthRx3HS15minOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minOversizedFramesRcv.setStatus('current')
currentEthRx3HS15minFragmentFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minFragmentFramesRcv.setStatus('current')
currentEthRx3HS15minJabberFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minJabberFrameRcv.setStatus('current')
currentEthRx3HS15minControlFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minControlFrameRcv.setStatus('current')
currentEthRx3HS15minBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames64Rcv.setStatus('current')
currentEthRx3HS15minBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames65Rcv.setStatus('current')
currentEthRx3HS15minBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames128Rcv.setStatus('current')
currentEthRx3HS15minBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames256Rcv.setStatus('current')
currentEthRx3HS15minBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames512Rcv.setStatus('current')
currentEthRx3HS15minBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames1024Rcv.setStatus('current')
currentEthRx3HS15minBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 18), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames1519Rcv.setStatus('current')
currentEthRx3HS15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minElapsedTime.setStatus('current')
currentEthRx3HS1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183), )
if mibBuilder.loadTexts: currentEthRx3HS1dayTable.setStatus('current')
currentEthRx3HS1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRx3HS1dayEntry.setStatus('current')
currentEthRx3HS1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayGoodFrames.setStatus('current')
currentEthRx3HS1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayPauseFrames.setStatus('current')
currentEthRx3HS1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayCrcFrames.setStatus('current')
currentEthRx3HS1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytes.setStatus('current')
currentEthRx3HS1dayBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBroadcastFramesRcv.setStatus('current')
currentEthRx3HS1dayMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayMulticastFramesRcv.setStatus('current')
currentEthRx3HS1dayUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayUndersizedFramesRcv.setStatus('current')
currentEthRx3HS1dayOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayOversizedFramesRcv.setStatus('current')
currentEthRx3HS1dayFragmentFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayFragmentFramesRcv.setStatus('current')
currentEthRx3HS1dayJabberFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayJabberFrameRcv.setStatus('current')
currentEthRx3HS1dayControlFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayControlFrameRcv.setStatus('current')
currentEthRx3HS1dayBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames64Rcv.setStatus('current')
currentEthRx3HS1dayBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames65Rcv.setStatus('current')
currentEthRx3HS1dayBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames128Rcv.setStatus('current')
currentEthRx3HS1dayBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames256Rcv.setStatus('current')
currentEthRx3HS1dayBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames512Rcv.setStatus('current')
currentEthRx3HS1dayBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames1024Rcv.setStatus('current')
currentEthRx3HS1dayBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 18), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames1519Rcv.setStatus('current')
currentEthRx3HS1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayElapsedTime.setStatus('current')
intervalEthRx3HS15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184), )
if mibBuilder.loadTexts: intervalEthRx3HS15minTable.setStatus('current')
intervalEthRx3HS15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx3HS15minNumber"))
if mibBuilder.loadTexts: intervalEthRx3HS15minEntry.setStatus('current')
intervalEthRx3HS15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalEthRx3HS15minNumber.setStatus('current')
intervalEthRx3HS15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minGoodFrames.setStatus('current')
intervalEthRx3HS15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minPauseFrames.setStatus('current')
intervalEthRx3HS15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minCrcFrames.setStatus('current')
intervalEthRx3HS15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytes.setStatus('current')
intervalEthRx3HS15minBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBroadcastFramesRcv.setStatus('current')
intervalEthRx3HS15minMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minMulticastFramesRcv.setStatus('current')
intervalEthRx3HS15minUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minUndersizedFramesRcv.setStatus('current')
intervalEthRx3HS15minOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minOversizedFramesRcv.setStatus('current')
intervalEthRx3HS15minFragmentFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minFragmentFramesRcv.setStatus('current')
intervalEthRx3HS15minJabberFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minJabberFrameRcv.setStatus('current')
intervalEthRx3HS15minControlFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minControlFrameRcv.setStatus('current')
intervalEthRx3HS15minBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames64Rcv.setStatus('current')
intervalEthRx3HS15minBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames65Rcv.setStatus('current')
intervalEthRx3HS15minBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames128Rcv.setStatus('current')
intervalEthRx3HS15minBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames256Rcv.setStatus('current')
intervalEthRx3HS15minBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames512Rcv.setStatus('current')
intervalEthRx3HS15minBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 18), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames1024Rcv.setStatus('current')
intervalEthRx3HS15minBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 19), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames1519Rcv.setStatus('current')
intervalEthRx3HS15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minValidFlag.setStatus('current')
intervalEthRx3HS15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minTimeStamp.setStatus('current')
intervalEthRx3HS1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185), )
if mibBuilder.loadTexts: intervalEthRx3HS1dayTable.setStatus('current')
intervalEthRx3HS1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx3HS1dayNumber"))
if mibBuilder.loadTexts: intervalEthRx3HS1dayEntry.setStatus('current')
intervalEthRx3HS1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalEthRx3HS1dayNumber.setStatus('current')
intervalEthRx3HS1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayGoodFrames.setStatus('current')
intervalEthRx3HS1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayPauseFrames.setStatus('current')
intervalEthRx3HS1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayCrcFrames.setStatus('current')
intervalEthRx3HS1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytes.setStatus('current')
intervalEthRx3HS1dayBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBroadcastFramesRcv.setStatus('current')
intervalEthRx3HS1dayMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayMulticastFramesRcv.setStatus('current')
intervalEthRx3HS1dayUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayUndersizedFramesRcv.setStatus('current')
intervalEthRx3HS1dayOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayOversizedFramesRcv.setStatus('current')
intervalEthRx3HS1dayFragmentFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayFragmentFramesRcv.setStatus('current')
intervalEthRx3HS1dayJabberFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayJabberFrameRcv.setStatus('current')
intervalEthRx3HS1dayControlFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayControlFrameRcv.setStatus('current')
intervalEthRx3HS1dayBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames64Rcv.setStatus('current')
intervalEthRx3HS1dayBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames65Rcv.setStatus('current')
intervalEthRx3HS1dayBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames128Rcv.setStatus('current')
intervalEthRx3HS1dayBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames256Rcv.setStatus('current')
intervalEthRx3HS1dayBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames512Rcv.setStatus('current')
intervalEthRx3HS1dayBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 18), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames1024Rcv.setStatus('current')
intervalEthRx3HS1dayBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 19), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames1519Rcv.setStatus('current')
intervalEthRx3HS1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayValidFlag.setStatus('current')
intervalEthRx3HS1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayTimeStamp.setStatus('current')
currentDefectSeconds15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 64), )
if mibBuilder.loadTexts: currentDefectSeconds15minTable.setStatus('current')
currentDefectSeconds15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 64, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentDefectSeconds15minEntry.setStatus('current')
currentDefectSeconds15minDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 64, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDefectSeconds15minDS.setStatus('current')
currentDefectSeconds15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 64, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDefectSeconds15minElapsedTime.setStatus('current')
currentDefectSeconds1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 65), )
if mibBuilder.loadTexts: currentDefectSeconds1dayTable.setStatus('current')
currentDefectSeconds1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 65, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentDefectSeconds1dayEntry.setStatus('current')
currentDefectSeconds1dayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 65, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDefectSeconds1dayDS.setStatus('current')
currentDefectSeconds1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 65, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDefectSeconds1dayElapsedTime.setStatus('current')
intervalDefectSeconds15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66), )
if mibBuilder.loadTexts: intervalDefectSeconds15minTable.setStatus('current')
intervalDefectSeconds15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalDefectSeconds15minNumber"))
if mibBuilder.loadTexts: intervalDefectSeconds15minEntry.setStatus('current')
intervalDefectSeconds15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalDefectSeconds15minNumber.setStatus('current')
intervalDefectSeconds15minDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds15minDS.setStatus('current')
intervalDefectSeconds15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds15minValidFlag.setStatus('current')
intervalDefectSeconds15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds15minTimeStamp.setStatus('current')
intervalDefectSeconds1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67), )
if mibBuilder.loadTexts: intervalDefectSeconds1dayTable.setStatus('current')
intervalDefectSeconds1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalDefectSeconds1dayNumber"))
if mibBuilder.loadTexts: intervalDefectSeconds1dayEntry.setStatus('current')
intervalDefectSeconds1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalDefectSeconds1dayNumber.setStatus('current')
intervalDefectSeconds1dayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds1dayDS.setStatus('current')
intervalDefectSeconds1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds1dayValidFlag.setStatus('current')
intervalDefectSeconds1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds1dayTimeStamp.setStatus('current')
f7Containers = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 1))
f7ContainerFanSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 1, 1))
f7ContainerModuleSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 1, 2))
f7ContainerSfpSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 1, 3))
f7Shelfs = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 2))
f7FanUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 3))
f7FanUnitsFan = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 3, 1))
f7Modules = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4))
f7eqpSh1hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 1))
f7eqpSh1huDc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 2))
f7eqpSh3hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 3))
f7eqpSh7hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 4))
f7eqpUnknown = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 5))
f7eqpNcu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 6))
f7eqpNcutif = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 7))
f7eqpScu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 8))
f7eqpScue = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 9))
f7eqpR6cu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 10))
f7eqpPsu1huac = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 11))
f7eqpPsu7huac = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 12))
f7eqpPsu7hudc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 13))
f7eqpFcu7hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 14))
f7eqp2clsmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 15))
f7eqp2absmc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 16))
f7eqp2bsmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 17))
f7eqp1Gsmud = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 18))
f7eqp4gsmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 19))
f7eqp8gsmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 20))
f7eqp1csmuc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 21))
f7eqp1csmuewc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 22))
f7eqp4csmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 23))
f7eqp4csmud = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 24))
f7eqp4csmc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 25))
f7eqpOsfm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 26))
f7eqp1pm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 27))
f7eqp2pm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 28))
f7eqp40csmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 29))
f7eqpDcm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 30))
f7eqpEdfas = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 31))
f7eqpEdfasgc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 32))
f7eqpEdfadgc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 33))
f7eqpRaman = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 34))
f7eqp4tcc2g5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 35))
f7eqp4tcc2g5d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 36))
f7eqp4tcc10gd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 37))
f7eqp4tcc10gc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 38))
f7eqpWcc10gd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 39))
f7eqpWcc10gc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 40))
f7eqpWcc2g7 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 41))
f7eqpWcc2g7d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 42))
f7eqp2tcm2g5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 43))
f7eqp2tca2g5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 44))
f7eqp8tca10gd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 45))
f7eqp8tca10gc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 46))
f7eqpWca10gd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 47))
f7eqpWca10gc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 48))
f7eqp4tca4gd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 49))
f7eqp4tca4gc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 50))
f7eqpwca2g5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 51))
f7eqp4tca1g3d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 52))
f7eqp4tca1g3c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 53))
f7eqp8tce2g5d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 54))
f7eqp8tce2g5c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 55))
f7eqpWcelsd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 56))
f7eqpWcelsc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 57))
f7eqpVsm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 58))
f7eqpRsmolm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 59))
f7eqpRsmsf = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 60))
f7eqpOscm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 61))
f7eqp2oscm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 62))
f7eqpDrm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 63))
f7eqpXfpG = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 64))
f7eqpsfpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 65))
f7eqpSfpc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 66))
f7eqpSfpg = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 67))
f7eqpSfpe = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 68))
f7eqpSh1hudcm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 69))
f7eqpCustomc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 70))
f7eqpCustomd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 71))
f7eqpPsu1hudc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 72))
f7eqpWcc2g7c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 73))
f7eqp1csmuEwD = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 74))
f7eqp1csmuG = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 75))
f7eqp3BsmC = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 76))
f7eqpF2kSh5hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 77))
f7eqpF2kSh6hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 78))
f7eqp2Tca2g5s = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 79))
f7eqp8Csmuc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 80))
f7eqpEdfaDgcb = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 81))
f7eqpOscm2n = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 82))
f7eqp4Tcc10gtd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 83))
f7eqp4Tca4g = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 84))
f7eqpDcg = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 85))
f7eqp2Tcm2g5d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 86))
f7eqp2Tcm2g5c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 87))
f7eqpWcm2g5d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 88))
f7eqpWcm2g5c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 89))
f7eqpEdfmSgc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 90))
f7eqpF2kDemiV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 91))
f7eqpPsm955 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 92))
f7eqpNcu2e = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 93))
f7eqp8TceGl2g5d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 94))
f7eqp8TceGl2g5c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 95))
f7Plugs = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5))
f7SFPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 1))
f7SFPHS = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 2))
f7SFP2G1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 3))
f7SFP2G5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 4))
f7SFP4G = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 5))
f7XFP10G = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 6))
f7Ports = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6))
f7OTU1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 1))
f7OTU2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 2))
f710GBE = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 3))
f7OC192 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 4))
f7OC48 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 5))
f7STM16 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 6))
f7STM64 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 7))
f710GFC = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 8))
f710GFP = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 9))
f7Error = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 7))
mibBuilder.exportSymbols("FspR7-MIB", deployProvControlPlaneOtnDefaultsCtmRetryWait=deployProvControlPlaneOtnDefaultsCtmRetryWait, dcnTopologyConfigTable=dcnTopologyConfigTable, changeServiceDeployProvIfVoaMode=changeServiceDeployProvIfVoaMode, intervalPhysPerfOlmTxLineAtt1weekValidFlag=intervalPhysPerfOlmTxLineAtt1weekValidFlag, deployProvLogicalCpIfCapDeadInterval=deployProvLogicalCpIfCapDeadInterval, currentPhysConvCombined15minEntry=currentPhysConvCombined15minEntry, teUnnumLinkOtnDataNodeTid=teUnnumLinkOtnDataNodeTid, deployProvTifOutputForceDestroy=deployProvTifOutputForceDestroy, deployProvLanCapForceDestroy=deployProvLanCapForceDestroy, intervalOdu1dayEntry=intervalOdu1dayEntry, deployProvControlPlaneWdmDefaultsRmConfigFlag=deployProvControlPlaneWdmDefaultsRmConfigFlag, pathElementWdmDataTrafficEngineeringType=pathElementWdmDataTrafficEngineeringType, deployProvControlPlaneOtnCapCmCrankBackTimeout=deployProvControlPlaneOtnCapCmCrankBackTimeout, opticalIfDiagPumpLaser3Temp=opticalIfDiagPumpLaser3Temp, intervalPhysPerfOpticalOutputPwr1weekEntry=intervalPhysPerfOpticalOutputPwr1weekEntry, FspR7SubLayerEncoding=FspR7SubLayerEncoding, changeServiceDeployProvIfDefaultsXfpDecisionThres=changeServiceDeployProvIfDefaultsXfpDecisionThres, intervalPhysPerfDiffGrDelay1dayEntry=intervalPhysPerfDiffGrDelay1dayEntry, eRoadmDataSumReceived=eRoadmDataSumReceived, controlPlaneEthConfigCmTraceDetail=controlPlaneEthConfigCmTraceDetail, currentOduTcmA15minES=currentOduTcmA15minES, f7Plugs=f7Plugs, crsConnDataCrsFunction=crsConnDataCrsFunction, intervalOduTcmB1dayTimeStamp=intervalOduTcmB1dayTimeStamp, connectionOtnDataFecType=connectionOtnDataFecType, tunnelOtnConfigEntry=tunnelOtnConfigEntry, deployProvExChannelType=deployProvExChannelType, alarmInputTIF=alarmInputTIF, currentGfpSublayer15minTypeHecDiscardedFrames=currentGfpSublayer15minTypeHecDiscardedFrames, currentDefectSeconds15minTable=currentDefectSeconds15minTable, alarmAlarmIndicationSignalOduTcmA=alarmAlarmIndicationSignalOduTcmA, intervalPhysConvHighSpeed15minNumber=intervalPhysConvHighSpeed15minNumber, intervalLinkAttenuation1dayLow=intervalLinkAttenuation1dayLow, deployProvApsApsType=deployProvApsApsType, deployProvPathEthTable=deployProvPathEthTable, farEndPlugConfigTable=farEndPlugConfigTable, deployProvLogicalCpIfEncoding=deployProvLogicalCpIfEncoding, thresholdPhysPerfLocalOscTempLowThres=thresholdPhysPerfLocalOscTempLowThres, deployProvTunnelEthToAid=deployProvTunnelEthToAid, deployProvModuleScrambling=deployProvModuleScrambling, deployProvConnCommandCounter=deployProvConnCommandCounter, intervalPhysPerfDiffGrDelay1dayTable=intervalPhysPerfDiffGrDelay1dayTable, changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmB=changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmB, intervalSonetLine15minNumber=intervalSonetLine15minNumber, teNumLinkOtnDataTeLinkIp=teNumLinkOtnDataTeLinkIp, currentEthRxHighSpeed15minBytes=currentEthRxHighSpeed15minBytes, deployProvPppIpAreaId=deployProvPppIpAreaId, intervalPhysPerfOscOpticalOutputPwr1weekEntry=intervalPhysPerfOscOpticalOutputPwr1weekEntry, tifiDataTifAlarmMessage=tifiDataTifAlarmMessage, deployProvIfOpuPayloadType=deployProvIfOpuPayloadType, currentL2EthRx1dayBytesFrames128Rcv=currentL2EthRx1dayBytesFrames128Rcv, controlPlaneOtnConfigNaasMaxSize=controlPlaneOtnConfigNaasMaxSize, thresholdOtuFecSublayerSESHighThres1day=thresholdOtuFecSublayerSESHighThres1day, deployProvControlPlaneWdmRaConfigFlag=deployProvControlPlaneWdmRaConfigFlag, alarmVoltageTooLow=alarmVoltageTooLow, FspR7PacketsLayer=FspR7PacketsLayer, alarmOpenConnectionIndicationOduTcmC=alarmOpenConnectionIndicationOduTcmC, changeServiceDeployProvIfCapSigDegThresReceiver=changeServiceDeployProvIfCapSigDegThresReceiver, currentEthRx3HS15minEntry=currentEthRx3HS15minEntry, deployProvControlPlaneEthCapNaasTraceDetail=deployProvControlPlaneEthCapNaasTraceDetail, deployProvExChannelCapMaximumOpticalPowerRcv=deployProvExChannelCapMaximumOpticalPowerRcv, deployProvPathElementEthCapUpstreamSvid=deployProvPathElementEthCapUpstreamSvid, FspR7TimeChangeReason=FspR7TimeChangeReason, pathElementEthDataDownstreamSvid=pathElementEthDataDownstreamSvid, deployProvModuleDefaultsForceDestroy=deployProvModuleDefaultsForceDestroy, FspR7AccessProtocol=FspR7AccessProtocol, intervalPhysPerfCurrentOscGain15minMean=intervalPhysPerfCurrentOscGain15minMean, intervalDefectSeconds15minValidFlag=intervalDefectSeconds15minValidFlag, neNetworkTimeProtocol=neNetworkTimeProtocol, neighborDiscoveryDataTable=neighborDiscoveryDataTable, connectionEthConfigEntry=connectionEthConfigEntry, controlPlaneWdmConfigRmTraceDetail=controlPlaneWdmConfigRmTraceDetail, deployProvIfDefaultsPortMode=deployProvIfDefaultsPortMode, controlPlaneOtnConfigCtmTraceDetail=controlPlaneOtnConfigCtmTraceDetail, dcnTopologyStatusTable=dcnTopologyStatusTable, deployProvVchChannelSigDegPeriodOdu=deployProvVchChannelSigDegPeriodOdu, intervalSonetLoPath15minUAS=intervalSonetLoPath15minUAS, controlPlaneWdmConfigEntry=controlPlaneWdmConfigEntry, alarmLaserBiasCurrAbnormal=alarmLaserBiasCurrAbnormal, deployProvControlPlaneOtnCtmRetryWait=deployProvControlPlaneOtnCtmRetryWait, deployProvModuleCapMapping=deployProvModuleCapMapping, deployProvLogicalCpIfDefaultsFarEndNodeIp=deployProvLogicalCpIfDefaultsFarEndNodeIp, connectionOtnDataTunnelInstance=connectionOtnDataTunnelInstance, pathElementWdmDataTid=pathElementWdmDataTid, deployProvIfDefaultsAreaId=deployProvIfDefaultsAreaId, deployProvVchChannelDefaultsEntry=deployProvVchChannelDefaultsEntry, intervalOtuFec1dayUBE=intervalOtuFec1dayUBE, thresholdPhysPerfLaserBiasCurrentNormalized=thresholdPhysPerfLaserBiasCurrentNormalized, dcnOspfAreaCreation=dcnOspfAreaCreation, deployProvTunnelEthDefaultsFromAid=deployProvTunnelEthDefaultsFromAid, deployProvPlugDefaultsForceDestroy=deployProvPlugDefaultsForceDestroy, deployProvIfCapForceDestroy=deployProvIfCapForceDestroy, thresholdOtuFecCErrHighThres1day=thresholdOtuFecCErrHighThres1day, deployProvControlPlaneWdmNaasMaxSize=deployProvControlPlaneWdmNaasMaxSize, currentGfpfr1dayTable=currentGfpfr1dayTable, deployProvOpticalLinkCapEntry=deployProvOpticalLinkCapEntry, dcnTopologyDataIndex=dcnTopologyDataIndex, intervalPhysPerfLaserBiasCurrentNormalized1dayValidFlag=intervalPhysPerfLaserBiasCurrentNormalized1dayValidFlag, currentDefectSeconds1dayTable=currentDefectSeconds1dayTable, deployProvModuleCac=deployProvModuleCac, controlPlaneEthConfigPcTraceDetail=controlPlaneEthConfigPcTraceDetail, moduleConfigCac=moduleConfigCac, currentEthRx3HS15minBytesFrames64Rcv=currentEthRx3HS15minBytesFrames64Rcv, deployProvIfCapPumpPower=deployProvIfCapPumpPower, pathElementOtnDataUpTributaryTSMethod=pathElementOtnDataUpTributaryTSMethod, opticalIfConfigTable=opticalIfConfigTable, intervalSubAggregate15minES=intervalSubAggregate15minES, deployProvTunnelWdmDefaultsTable=deployProvTunnelWdmDefaultsTable, changeServiceDeployProvIfTraceTransmitSonetSection=changeServiceDeployProvIfTraceTransmitSonetSection, changeServiceDeployProvIfCapVoaMode=changeServiceDeployProvIfCapVoaMode, connectionWdmDataBitrate=connectionWdmDataBitrate, intervalSonetSect1dayTable=intervalSonetSect1dayTable, neRouteRedistribution=neRouteRedistribution, alarmOscPwrTooLow=alarmOscPwrTooLow, alarmEquipmentMismatchAllow=alarmEquipmentMismatchAllow, deployProvControlPlaneOtnDefaultsCdConfigFlag=deployProvControlPlaneOtnDefaultsCdConfigFlag, deployProvCopyPathOtnEntry=deployProvCopyPathOtnEntry, changeServiceDeployProvIfCapOffset=changeServiceDeployProvIfCapOffset, FspR7CpCompStateCaps=FspR7CpCompStateCaps, deployProvControlPlaneWdmDefaultsRowStatus=deployProvControlPlaneWdmDefaultsRowStatus, controlPlaneEthConfigCdResyncTimeout=controlPlaneEthConfigCdResyncTimeout, intervalPhysPerfOpticalOutputPwr1dayLow=intervalPhysPerfOpticalOutputPwr1dayLow, intervalDefectSeconds15minEntry=intervalDefectSeconds15minEntry, intervalOtuFec15minTimeStamp=intervalOtuFec15minTimeStamp, deployProvIfCapOduTribPortNo=deployProvIfCapOduTribPortNo, intervalPhysPerfBackreflectionPwrRcv1weekTable=intervalPhysPerfBackreflectionPwrRcv1weekTable, controlPlaneOtnEntityStateEntry=controlPlaneOtnEntityStateEntry, tifiConfigInvertTifInputLogic=tifiConfigInvertTifInputLogic, tunnelOtnDataToNodeIp=tunnelOtnDataToNodeIp, lanIpConfigEntry=lanIpConfigEntry, deployProvModuleCapEntry=deployProvModuleCapEntry, teNumLinkEthDataEntry=teNumLinkEthDataEntry, tifoConfigTelemetry=tifoConfigTelemetry, deployProvVchChannelDefaultsType=deployProvVchChannelDefaultsType, deployProvIfCapOpticalSetPoint=deployProvIfCapOpticalSetPoint, shelfConfigEntry=shelfConfigEntry, deployProvControlPlaneEthCapCtmMaximumRetryNumber=deployProvControlPlaneEthCapCtmMaximumRetryNumber, intervalPhysConv15minCV=intervalPhysConv15minCV, deployProvPathElementOtnDefaultsEntry=deployProvPathElementOtnDefaultsEntry, farEndIfConfigCapLoopConfig=farEndIfConfigCapLoopConfig, deployProvControlPlaneOtnNaasTraceDetail=deployProvControlPlaneOtnNaasTraceDetail, intervalSonetLine15minES=intervalSonetLine15minES, intervalPhysPerfChromaticDispersion1dayMean=intervalPhysPerfChromaticDispersion1dayMean, f7eqp8tce2g5d=f7eqp8tce2g5d, controlPlaneOtnDataRmAlias=controlPlaneOtnDataRmAlias, deployProvVchChannelCapTraceExpectedOdu=deployProvVchChannelCapTraceExpectedOdu, deployProvControlPlaneEthDefaultsCtmConfigFlag=deployProvControlPlaneEthDefaultsCtmConfigFlag, fspUserManagementCapSecurityLevel=fspUserManagementCapSecurityLevel, currentSonetHoPath15minSES=currentSonetHoPath15minSES, moduleDataScuRing=moduleDataScuRing, deployProvIfTraceTransmitDapiOtu=deployProvIfTraceTransmitDapiOtu, intervalPhysPerfOpticalOutputPwr1dayEntry=intervalPhysPerfOpticalOutputPwr1dayEntry, intervalOtuFec15minExEntry=intervalOtuFec15minExEntry, intervalPhysPerfDiffGrDelay1dayValidFlag=intervalPhysPerfDiffGrDelay1dayValidFlag, changeServiceDeployProvIfCapAprHighThreshold=changeServiceDeployProvIfCapAprHighThreshold, intervalPhysPerfCurrentOscGain1dayTable=intervalPhysPerfCurrentOscGain1dayTable, teUnnumLinkOtnDataEntry=teUnnumLinkOtnDataEntry, SourceIpAddress=SourceIpAddress, thresholdEthRxHighSpeedPauseFramesHighThres15Min=thresholdEthRxHighSpeedPauseFramesHighThres15Min, deployProvPathOtnEntry=deployProvPathOtnEntry, controlPlaneEthConfigNaasConfigFlag=controlPlaneEthConfigNaasConfigFlag, vc4c8allocatedSequenceNumber=vc4c8allocatedSequenceNumber, intervalPhysPerfChromaticDispersion15minMean=intervalPhysPerfChromaticDispersion15minMean, currentOtuFec15minExTable=currentOtuFec15minExTable, transientThres1DayExceededOduES=transientThres1DayExceededOduES, f7eqpXfpG=f7eqpXfpG, deployProvApsCapProtectionMech=deployProvApsCapProtectionMech, intervalOduTcmB15minES=intervalOduTcmB15minES, FspR7VoaModeCaps=FspR7VoaModeCaps, FspR7DCFiberType=FspR7DCFiberType, intervalSonetLine1dayEntry=intervalSonetLine1dayEntry, deployProvIfCapEqlzAdmin=deployProvIfCapEqlzAdmin, deployProvIfCapTributarySlotMethod=deployProvIfCapTributarySlotMethod, thresholdPhysConvHighSpeedSEHighThres1day=thresholdPhysConvHighSpeedSEHighThres1day, intervalOtuFec1dayExNumber=intervalOtuFec1dayExNumber, f7eqp8tca10gd=f7eqp8tca10gd, intervalFarEndPhysPerfOpticalInputPwr1weekTable=intervalFarEndPhysPerfOpticalInputPwr1weekTable, FspR7PreferredFacilityTypeCaps=FspR7PreferredFacilityTypeCaps, f7eqpF2kDemiV2=f7eqpF2kDemiV2, deployProvOpticalLinkDefaultsTxLineAttenuation=deployProvOpticalLinkDefaultsTxLineAttenuation, transientDatabaseMismatch=transientDatabaseMismatch, deployProvIfTraceTransmitDapiOduTcmB=deployProvIfTraceTransmitDapiOduTcmB, fspUserManagementTl1TimeoutValue=fspUserManagementTl1TimeoutValue, FspR7CpAuthType=FspR7CpAuthType, intervalL2EthRx15minBytesRcv=intervalL2EthRx15minBytesRcv, deployProvLogicalCpIfHelloInterval=deployProvLogicalCpIfHelloInterval, deployProvShelfPsuOutputPower=deployProvShelfPsuOutputPower, deployProvIfDefaultsAutonegotiation=deployProvIfDefaultsAutonegotiation, neFtpServerCap=neFtpServerCap, alarmThres15MinExceededFecSES=alarmThres15MinExceededFecSES, tunnelEthDataComputedPaths=tunnelEthDataComputedPaths, deployProvPathElementWdmCapTrafficEngineeringType=deployProvPathElementWdmCapTrafficEngineeringType, ethernetConfigDuplexMode=ethernetConfigDuplexMode, connectionWdmDataEntry=connectionWdmDataEntry, interfaceConfigExternalVidCapsStringCap=interfaceConfigExternalVidCapsStringCap, deployProvIfCapVethAid=deployProvIfCapVethAid, alarmLinkAttenuationTooLow=alarmLinkAttenuationTooLow, currentPmSnapshotTable=currentPmSnapshotTable, deployProvConnNonStdCapToEndpointB=deployProvConnNonStdCapToEndpointB, intervalGfpSublayer15minNumber=intervalGfpSublayer15minNumber, deployProvExChannelMaximumOpticalPowerRcv=deployProvExChannelMaximumOpticalPowerRcv, deployProvModuleCapDeploy=deployProvModuleCapDeploy, deployProvLogicalIfAuthString=deployProvLogicalIfAuthString, opticalIfDataLagPortType=opticalIfDataLagPortType, FspR7EnableDisableCaps=FspR7EnableDisableCaps, currentEthRx3HS1dayBytesFrames256Rcv=currentEthRx3HS1dayBytesFrames256Rcv, fspUserManagementInternalState=fspUserManagementInternalState, intervalRoundTripDelay15minEntry=intervalRoundTripDelay15minEntry, tunnelWdmDataTunnelScope=tunnelWdmDataTunnelScope, tnaMapDataTable=tnaMapDataTable, deployProvTunnelWdmCapConnectionDirection=deployProvTunnelWdmCapConnectionDirection, alarmNtpServer3Unreachable=alarmNtpServer3Unreachable, deployProvLogicalCpIfDefaultsVTeType=deployProvLogicalCpIfDefaultsVTeType, thresholdPhysConvHighSpeedESHighThres15min=thresholdPhysConvHighSpeedESHighThres15min, controlPlaneOtnConfigCdConfigFlag=controlPlaneOtnConfigCdConfigFlag, FspR7CpOperateReversion=FspR7CpOperateReversion, thresholdPhysPerfLocalOscTempHighThres=thresholdPhysPerfLocalOscTempHighThres, deployProvIfTraceFormSonetSection=deployProvIfTraceFormSonetSection, forceDeployProvApsCapHoldOffTime=forceDeployProvApsCapHoldOffTime, logicalIfConfigAuthType=logicalIfConfigAuthType, deployProvTunnelWdmCapProvisionedPaths=deployProvTunnelWdmCapProvisionedPaths, eocDataConnectionType=eocDataConnectionType, deployProvCopyPathOtnDefaultsPathId=deployProvCopyPathOtnDefaultsPathId, usedBackplaneBandwidth=usedBackplaneBandwidth, intervalPhysPerfOscOpticalOutputPwr1weekTable=intervalPhysPerfOscOpticalOutputPwr1weekTable, controlPlaneOtnConfigCtmShutdownTimeout=controlPlaneOtnConfigCtmShutdownTimeout, deployProvIfDefaultsMaxFrameSize=deployProvIfDefaultsMaxFrameSize, intervalPhysConvCombined15minValidFlag=intervalPhysConvCombined15minValidFlag, deployProvControlPlaneEthRaConfigFlag=deployProvControlPlaneEthRaConfigFlag, deployProvTifInputCapTifAlarmType=deployProvTifInputCapTifAlarmType, f7eqp2Tca2g5s=f7eqp2Tca2g5s, deployProvTunnelEthCapPin=deployProvTunnelEthCapPin, virtualOpticalChannelConfigEntry=virtualOpticalChannelConfigEntry, alarmLossOfMultiframeVCG=alarmLossOfMultiframeVCG, vtpEntityDataEntry=vtpEntityDataEntry, deployProvTunnelWdmCapPin=deployProvTunnelWdmCapPin, currentOduTcmB15minEntry=currentOduTcmB15minEntry, changeServiceDeployProvIfLanAidCapsEntry=changeServiceDeployProvIfLanAidCapsEntry, intervalSonetHoPath1dayValidFlag=intervalSonetHoPath1dayValidFlag, currentSonetHoPath15minEntry=currentSonetHoPath15minEntry, f7eqpDcg=f7eqpDcg, intervalLinkAttenuation1dayValidFlag=intervalLinkAttenuation1dayValidFlag, deployProvControlPlaneEthCapNaasConfigFlag=deployProvControlPlaneEthCapNaasConfigFlag, deployProvModuleDefaultsEqlzAdmin=deployProvModuleDefaultsEqlzAdmin, eRoadmInfoInternalPorts=eRoadmInfoInternalPorts, changeServiceDeployProvIfCapTable=changeServiceDeployProvIfCapTable, crsConnDeployProvDefaultsCrossConnType=crsConnDeployProvDefaultsCrossConnType, intervalLatency15minTimeStamp=intervalLatency15minTimeStamp, deployProvPppIpBitrate=deployProvPppIpBitrate, logicalIfConfigTable=logicalIfConfigTable, deployProvTunnelOtnRowStatus=deployProvTunnelOtnRowStatus, tunnelOtnConfigPin=tunnelOtnConfigPin, intervalPhysPerfLaserBiasCurrentNormalized1weekMean=intervalPhysPerfLaserBiasCurrentNormalized1weekMean, currentEthRxHighSpeed1dayTable=currentEthRxHighSpeed1dayTable)
mibBuilder.exportSymbols("FspR7-MIB", connectionEthConfigCancelConnEntities=connectionEthConfigCancelConnEntities, changeServiceDeployProvIfDefaultsTraceTransmitSonetSection=changeServiceDeployProvIfDefaultsTraceTransmitSonetSection, opticalIfConfigCapPrbsPmReset=opticalIfConfigCapPrbsPmReset, FspR7ForcedStatusCaps=FspR7ForcedStatusCaps, logicalCpIfConfigOspf=logicalCpIfConfigOspf, dcnOspfAreaDeletion=dcnOspfAreaDeletion, deployProvPathElementEthDefaultsLogicalInterfaceId=deployProvPathElementEthDefaultsLogicalInterfaceId, changeServiceDeployProvIfDefaultsIpType=changeServiceDeployProvIfDefaultsIpType, FspR7EocProtAvailability=FspR7EocProtAvailability, exChannelConfigMinimumOSNRRcv=exChannelConfigMinimumOSNRRcv, currentSubAggregate15minElapsedTime=currentSubAggregate15minElapsedTime, controlPlaneOtnConfigCdbDetail=controlPlaneOtnConfigCdbDetail, deployProvControlPlaneEthRaAlarmActivationTime=deployProvControlPlaneEthRaAlarmActivationTime, intervalOtuFec1dayBERCE=intervalOtuFec1dayBERCE, thresholdEthRxHighSpeedCrcFramesHighThres1Day=thresholdEthRxHighSpeedCrcFramesHighThres1Day, thresholdPhysPerfCapCarrierFreqOffsetHigh=thresholdPhysPerfCapCarrierFreqOffsetHigh, alarmConfigurableOpticalOutputPowerTransmittedTooLow=alarmConfigurableOpticalOutputPowerTransmittedTooLow, deployProvTunnelWdmCapTunnelNo=deployProvTunnelWdmCapTunnelNo, deployProvTunnelWdmCapToTid=deployProvTunnelWdmCapToTid, deployProvControlPlaneEthCtmTraceDetail=deployProvControlPlaneEthCtmTraceDetail, deployProvPortBindingDefaultsLocalTna=deployProvPortBindingDefaultsLocalTna, dcnOspfAreaCapTable=dcnOspfAreaCapTable, deployProvTunnelWdmDefaultsTunnelId=deployProvTunnelWdmDefaultsTunnelId, intervalPhysPerfBackreflectionPwrRcv1dayValidFlag=intervalPhysPerfBackreflectionPwrRcv1dayValidFlag, intervalEthRx3HS1dayBytesFrames512Rcv=intervalEthRx3HS1dayBytesFrames512Rcv, deployProvLanCapIpType=deployProvLanCapIpType, deployProvExChannelCapMinimumOSNRRcv=deployProvExChannelCapMinimumOSNRRcv, deployProvIfAutoPTassignment=deployProvIfAutoPTassignment, ntpSysCurrentConditionEntry=ntpSysCurrentConditionEntry, controlPlaneWdmConfigCdResyncTimeout=controlPlaneWdmConfigCdResyncTimeout, controlPlaneWdmConfigWaitToRestore=controlPlaneWdmConfigWaitToRestore, FspR7LaserForcedOperationCaps=FspR7LaserForcedOperationCaps, currentOduTcmA1dayTable=currentOduTcmA1dayTable, FspR7PsuOutputPowerCaps=FspR7PsuOutputPowerCaps, deployProvPathOtnPathId=deployProvPathOtnPathId, changeServiceDeployProvIfCapTraceTransmitSapiOdu=changeServiceDeployProvIfCapTraceTransmitSapiOdu, intervalGfpSublayer15minTypeHecCorrectedFrames=intervalGfpSublayer15minTypeHecCorrectedFrames, deployProvPlugCapEntry=deployProvPlugCapEntry, deployProvControlPlaneOtnDefaultsNaasConfigFlag=deployProvControlPlaneOtnDefaultsNaasConfigFlag, transientCopyFileConnectionFail=transientCopyFileConnectionFail, intervalOdu1dayUAS=intervalOdu1dayUAS, currentPhysConvCombined1dayTable=currentPhysConvCombined1dayTable, deployProvControlPlaneEthCapRmTraceDetail=deployProvControlPlaneEthCapRmTraceDetail, intervalPhysPerfCarrierFreqOffset15minTimeStamp=intervalPhysPerfCarrierFreqOffset15minTimeStamp, neDatabaseType=neDatabaseType, f7eqp1csmuc=f7eqp1csmuc, tunnelOtnConfigProtectionType=tunnelOtnConfigProtectionType, connectionEthDataTunnelId=connectionEthDataTunnelId, deployProvLogicalCpIfDefaultsPushedNendIpHeader=deployProvLogicalCpIfDefaultsPushedNendIpHeader, interfaceDataLaserReleaseTimer=interfaceDataLaserReleaseTimer, intervalEthTx15minGoodFramesx=intervalEthTx15minGoodFramesx, FspR7Scrambling=FspR7Scrambling, changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmB=changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmB, thresholdGfpTypeHecCorrectedFramesHighThres15Day=thresholdGfpTypeHecCorrectedFramesHighThres15Day, deployProvTunnelOtnDefaultsAlias=deployProvTunnelOtnDefaultsAlias, performanceMonitoring=performanceMonitoring, vs0allocatedClassInstanceNumber=vs0allocatedClassInstanceNumber, moduleConfigCapEqlzAdmin=moduleConfigCapEqlzAdmin, deployProvPppIpType=deployProvPppIpType, intervalPhysConvTxHighSpeed15minNumber=intervalPhysConvTxHighSpeed15minNumber, opticalIfConfigAreaId=opticalIfConfigAreaId, crsDcnDataEntry=crsDcnDataEntry, currentEthRx3HS15minBytesFrames65Rcv=currentEthRx3HS15minBytesFrames65Rcv, alarmOpticalOutputPowerTransmittedTooLow=alarmOpticalOutputPowerTransmittedTooLow, opticalIfConfigLossAttenuation=opticalIfConfigLossAttenuation, logicalCpIfDataIpMaskMonitor=logicalCpIfDataIpMaskMonitor, FspR7Category=FspR7Category, inventoryCpWdmCrsUpDataEntry=inventoryCpWdmCrsUpDataEntry, deployProvControlPlaneWdmCdbConfigFlag=deployProvControlPlaneWdmCdbConfigFlag, tunnelEthConfigProvisionedPaths=tunnelEthConfigProvisionedPaths, deployProvIfDefaultsBitrate=deployProvIfDefaultsBitrate, currentEthRx3HS15minJabberFrameRcv=currentEthRx3HS15minJabberFrameRcv, intervalPhysPerfBackreflectionPwrRcv1dayLow=intervalPhysPerfBackreflectionPwrRcv1dayLow, controlPlaneEthConfigCmAlarmActivationTime=controlPlaneEthConfigCmAlarmActivationTime, deployProvPppIpDefaultGateway=deployProvPppIpDefaultGateway, controlPlaneWdmConfigRsvpMaxExpRecoveryTime=controlPlaneWdmConfigRsvpMaxExpRecoveryTime, currentOduTcmB1dayBbe=currentOduTcmB1dayBbe, deployProvPppIpCapProxyArp=deployProvPppIpCapProxyArp, intervalPhysPerfOscOpticalOutputPwr1dayNumber=intervalPhysPerfOscOpticalOutputPwr1dayNumber, intervalLatency1dayEntry=intervalLatency1dayEntry, deployProvControlPlaneOtnCapCmFisFrsTimeout=deployProvControlPlaneOtnCapCmFisFrsTimeout, deployProvCopyPathOtnCapRowStatus=deployProvCopyPathOtnCapRowStatus, FspR7XfpDecisionThres=FspR7XfpDecisionThres, vtpEntityDataDirection=vtpEntityDataDirection, deployProvPathOtnRowStatus=deployProvPathOtnRowStatus, intervalPmSnapshotTimeStamp=intervalPmSnapshotTimeStamp, deployProvIfTraceTransmitOpspOduTcmA=deployProvIfTraceTransmitOpspOduTcmA, deployProvTunnelWdmCapFacilityType=deployProvTunnelWdmCapFacilityType, currentPhysConvCombined1dayES=currentPhysConvCombined1dayES, FspR7CpTunnelTypeCaps=FspR7CpTunnelTypeCaps, pathElementEthDataPathType=pathElementEthDataPathType, sts24callocatedContainer=sts24callocatedContainer, teRouterDataIp=teRouterDataIp, deployProvLogicalCpIfDefaultsTeMetric=deployProvLogicalCpIfDefaultsTeMetric, deployProvPathElementOtnCapUpTributaryODTUType=deployProvPathElementOtnCapUpTributaryODTUType, deployProvTunnelWdmCapRestorationPathsComputed=deployProvTunnelWdmCapRestorationPathsComputed, intervalDispersionCompensation1dayHigh=intervalDispersionCompensation1dayHigh, deployProvModuleTilt=deployProvModuleTilt, deployProvLogicalIfAreaId=deployProvLogicalIfAreaId, intervalFarEndPhysPerfOpticalOutputPwr1weekTable=intervalFarEndPhysPerfOpticalOutputPwr1weekTable, intervalSonetSect15minNumber=intervalSonetSect15minNumber, sts48callocatedEntry=sts48callocatedEntry, deployProvPortBindingLocalTna=deployProvPortBindingLocalTna, ntpSysCurrentConditionSeverity=ntpSysCurrentConditionSeverity, intervalGfp15minTable=intervalGfp15minTable, opticalIfDiagPrbsMaxBER=opticalIfDiagPrbsMaxBER, intervalL2EthTx1dayValidFlag=intervalL2EthTx1dayValidFlag, intervalPhysConvCombined1dayValidFlag=intervalPhysConvCombined1dayValidFlag, apsProtGroupStatusProtectionType=apsProtGroupStatusProtectionType, thresholdOtuFecSublayerSESHighThres15min=thresholdOtuFecSublayerSESHighThres15min, intervalL2EthRx15minBytesFrames1024Rcv=intervalL2EthRx15minBytesFrames1024Rcv, deployProvIfDefaultsTable=deployProvIfDefaultsTable, deployProvPortBindingRemoteScn=deployProvPortBindingRemoteScn, intervalGfp15minTypeHecCorrectedFrames=intervalGfp15minTypeHecCorrectedFrames, deployProvPppIpCapNearEndIp=deployProvPppIpCapNearEndIp, intervalGfpt1dayTimeStamp=intervalGfpt1dayTimeStamp, deployProvControlPlaneWdmCapWaitToRestore=deployProvControlPlaneWdmCapWaitToRestore, currentOduTcmB1dayES=currentOduTcmB1dayES, currentOtu15minSES=currentOtu15minSES, deployProvTunnelOtnCapToAid=deployProvTunnelOtnCapToAid, opticalIfConfigTributarySlotMethod=opticalIfConfigTributarySlotMethod, deployProvControlPlaneOtnRowStatus=deployProvControlPlaneOtnRowStatus, thresholdOduTable=thresholdOduTable, deployProvControlPlaneEthDefaultsRaAlarmActivationTime=deployProvControlPlaneEthDefaultsRaAlarmActivationTime, alarmThres15MinExceededOtuSES=alarmThres15MinExceededOtuSES, deployProvPortBindingLayer=deployProvPortBindingLayer, transientReversionFailed=transientReversionFailed, deployProvPppIpDefaultsRowStatus=deployProvPppIpDefaultsRowStatus, connectionEthDataActivationState=connectionEthDataActivationState, deployProvPlugAdmin=deployProvPlugAdmin, deployProvIfTraceTransmitDapiOdu=deployProvIfTraceTransmitDapiOdu, intervalL2EthTx15minBytesFrames512Trmt=intervalL2EthTx15minBytesFrames512Trmt, FspR7CpProtectionTypeCaps=FspR7CpProtectionTypeCaps, controlPlaneWdmConfigRsvpConfigFlag=controlPlaneWdmConfigRsvpConfigFlag, vtpEntityDataTable=vtpEntityDataTable, deployProvCrsDcnEntry=deployProvCrsDcnEntry, entityStateChange=entityStateChange, FspR7SignalMappingCaps=FspR7SignalMappingCaps, deployProvTunnelWdmTerminationLevel=deployProvTunnelWdmTerminationLevel, deployProvControlPlaneEthDefaultsCdbMaxSize=deployProvControlPlaneEthDefaultsCdbMaxSize, changeServiceDeployProvIfOffset=changeServiceDeployProvIfOffset, controlPlaneEthEntityStateEntry=controlPlaneEthEntityStateEntry, deployProvControlPlaneWdmDefaultsNaasAdvertWait=deployProvControlPlaneWdmDefaultsNaasAdvertWait, connectionWdmDataLayer=connectionWdmDataLayer, intervalPhysPerfOscOpticalOutputPwr1dayMean=intervalPhysPerfOscOpticalOutputPwr1dayMean, changeServiceDeployProvIfDefaultsVoaMode=changeServiceDeployProvIfDefaultsVoaMode, deployProvApsPeerAidCapsIndex=deployProvApsPeerAidCapsIndex, alarmThres15MinExceededOduTcmBSES=alarmThres15MinExceededOduTcmBSES, intervalOtuFec15minUBE=intervalOtuFec15minUBE, exChannelConfigFrameFormat=exChannelConfigFrameFormat, deployProvPathWdmDefaultsEntry=deployProvPathWdmDefaultsEntry, deployProvControlPlaneWdmDefaultsCtmSetupTimeout=deployProvControlPlaneWdmDefaultsCtmSetupTimeout, currentL2EthTx1dayBroadcastFramesTrmt=currentL2EthTx1dayBroadcastFramesTrmt, eRoadmInfoChannelSpacing=eRoadmInfoChannelSpacing, pathElementEthDataSequenceNumber=pathElementEthDataSequenceNumber, vc4c16allocatedTable=vc4c16allocatedTable, crsConnConfigAlias=crsConnConfigAlias, opticalIfConfigLagLoadBallanceSource=opticalIfConfigLagLoadBallanceSource, wdmTunnelResultNotification=wdmTunnelResultNotification, deployProvIfTcmALevel=deployProvIfTcmALevel, f7eqpWcc2g7d=f7eqpWcc2g7d, deployProvControlPlaneOtnTable=deployProvControlPlaneOtnTable, logicalCpIfConfigLinkColor=logicalCpIfConfigLinkColor, FspR7CpRestorationTypeCaps=FspR7CpRestorationTypeCaps, currentPhysConvHighSpeed15minElapsedTime=currentPhysConvHighSpeed15minElapsedTime, deployProvTunnelOtnDefaultsLayer=deployProvTunnelOtnDefaultsLayer, crsConnDeployProvDefaultsEntry=crsConnDeployProvDefaultsEntry, intervalPhysPerfPumpPwr1weekHigh=intervalPhysPerfPumpPwr1weekHigh, vc4c8allocatedContainer=vc4c8allocatedContainer, deployProvControlPlaneWdmCapRaTraceDetail=deployProvControlPlaneWdmCapRaTraceDetail, changeServiceDeployProvIfCapIpMask=changeServiceDeployProvIfCapIpMask, currentSonetSect15minCV=currentSonetSect15minCV, ntpSrvCurrentConditionTimeStamp=ntpSrvCurrentConditionTimeStamp, FspR7AutopLif=FspR7AutopLif, thresholdSonetHoPathCVHighThres1day=thresholdSonetHoPathCVHighThres1day, currentOduTcmB15minElapsedTime=currentOduTcmB15minElapsedTime, f7eqp2Tcm2g5c=f7eqp2Tcm2g5c, deployProvControlPlaneEthDefaultsRsvpMaxExpRecoveryTime=deployProvControlPlaneEthDefaultsRsvpMaxExpRecoveryTime, transientCpConnectionEstablishmentFail=transientCpConnectionEstablishmentFail, controlPlaneWdmConfigCtmMaximumRetryNumber=controlPlaneWdmConfigCtmMaximumRetryNumber, deployProvCrsDcnDefaultsLink=deployProvCrsDcnDefaultsLink, changeServiceDeployProvIfDefaultsTimModeOduTcmB=changeServiceDeployProvIfDefaultsTimModeOduTcmB, farEndPlugDataMaxDataRate=farEndPlugDataMaxDataRate, alarmReceiverFailure=alarmReceiverFailure, deployProvPathElementWdmCapChannelUp=deployProvPathElementWdmCapChannelUp, deployProvTunnelEthDefaultsToAid=deployProvTunnelEthDefaultsToAid, fspUserManagementCapInternalState=fspUserManagementCapInternalState, virtualOpticalChannelDataTable=virtualOpticalChannelDataTable, interfaceConfigCapEntry=interfaceConfigCapEntry, opticalIfDataEntry=opticalIfDataEntry, intervalPhysConvCombined1dayTable=intervalPhysConvCombined1dayTable, intervalOtuFec15minEntry=intervalOtuFec15minEntry, changeServiceDeployProvIfDefaultsDuplex=changeServiceDeployProvIfDefaultsDuplex, deployProvControlPlaneOtnCapRaConfigFlag=deployProvControlPlaneOtnCapRaConfigFlag, currentEthRx15minDiscardedFrames=currentEthRx15minDiscardedFrames, deployProvControlPlaneEthDefaultsNaasAdvertWait=deployProvControlPlaneEthDefaultsNaasAdvertWait, deployProvConnCommand=deployProvConnCommand, transientThres1DayExceededOduTcmCSES=transientThres1DayExceededOduTcmCSES, intervalEthTx1dayValidFlag=intervalEthTx1dayValidFlag, deployProvControlPlaneWdmDefaultsTable=deployProvControlPlaneWdmDefaultsTable, teNumLinkOtnDataSynchronization=teNumLinkOtnDataSynchronization, plugInventoryTable=plugInventoryTable, logicalIfDataLanLinkAid=logicalIfDataLanLinkAid, deployProvShelfDefaultsForceDestroy=deployProvShelfDefaultsForceDestroy, deployProvConnStdCapFromTable=deployProvConnStdCapFromTable, lanIpDataTable=lanIpDataTable, deployProvControlPlaneEthCdbConfigFlag=deployProvControlPlaneEthCdbConfigFlag, ApsRevertModeCaps=ApsRevertModeCaps, transientAlarmProfileActivationFail=transientAlarmProfileActivationFail, deployProvTunnelEthDefaultsRowStatus=deployProvTunnelEthDefaultsRowStatus, FspR7EdfaOutputPowerRating=FspR7EdfaOutputPowerRating, opticalAmplifierEquipmentDiagnosticsTable=opticalAmplifierEquipmentDiagnosticsTable, deployProvControlPlaneEthCapNaasMaxSize=deployProvControlPlaneEthCapNaasMaxSize, currentOduTcmC1dayEntry=currentOduTcmC1dayEntry, tunnelWdmConfigRestorationPaths=tunnelWdmConfigRestorationPaths, FspR7NodeId=FspR7NodeId, pppDataProxyArp=pppDataProxyArp, connectionEthDataConnectionNo=connectionEthDataConnectionNo, deployProvCrsDcnDefaultsType=deployProvCrsDcnDefaultsType, FspR7AseTabOprCaps=FspR7AseTabOprCaps, pathElementOtnDataDownTributaryODTUType=pathElementOtnDataDownTributaryODTUType, deployProvTunnelOtnToNodeIp=deployProvTunnelOtnToNodeIp, intervalLatency15minMean=intervalLatency15minMean, currentGfpfr15minEntry=currentGfpfr15minEntry, deployProvVchChannelCapEntry=deployProvVchChannelCapEntry, currentOduTcmA1daySES=currentOduTcmA1daySES, alarmGfpLossOfClientSig=alarmGfpLossOfClientSig, deployProvTunnelOtnCapFacilityType=deployProvTunnelOtnCapFacilityType, FspR7OdtuTypeCaps=FspR7OdtuTypeCaps, thresholdPhysPerfCapOpticalInputPwrHigh=thresholdPhysPerfCapOpticalInputPwrHigh, opticalIfDataLinkLength=opticalIfDataLinkLength, vchConfigBundle=vchConfigBundle, deployProvIfDefaultsTraceExpectedOduTcmC=deployProvIfDefaultsTraceExpectedOduTcmC, inactiveRoutingIpRowStatus=inactiveRoutingIpRowStatus, thresholdPhysPerfRoundTripDelayHighThres=thresholdPhysPerfRoundTripDelayHighThres, opticalIfConfigCapFiberBrand=opticalIfConfigCapFiberBrand, changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmC=changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmC, intervalPhysPerfBackreflectionPwrRcv1weekEntry=intervalPhysPerfBackreflectionPwrRcv1weekEntry, deployProvControlPlaneEthDefaultsCdResyncTimeout=deployProvControlPlaneEthDefaultsCdResyncTimeout, interfaceConfigIdentifier=interfaceConfigIdentifier, intervalRoundTripDelay1weekValidFlag=intervalRoundTripDelay1weekValidFlag, deployProvTunnelEthCapOifUni=deployProvTunnelEthCapOifUni, intervalLinkAttenuation1dayNumber=intervalLinkAttenuation1dayNumber, intervalPhysPerfOpticalOutputPwr15minHigh=intervalPhysPerfOpticalOutputPwr15minHigh, intervalPhysPerfSignalToNoiseRatio1dayTimeStamp=intervalPhysPerfSignalToNoiseRatio1dayTimeStamp, deployProvIfMaxFrameSize=deployProvIfMaxFrameSize, deployProvIfCapOtnStuffing=deployProvIfCapOtnStuffing, opticalFilterIfDataEntry=opticalFilterIfDataEntry, deployProvPathElementWdmTid=deployProvPathElementWdmTid, vs1allocatedTable=vs1allocatedTable, connectionWdmDataSourceTna=connectionWdmDataSourceTna, deployProvLogicalCpIfCapFendTeLinkIdUnn=deployProvLogicalCpIfCapFendTeLinkIdUnn, neSystemIpMask=neSystemIpMask, opticalAmplifierEquipmentDiagnosticsEntry=opticalAmplifierEquipmentDiagnosticsEntry)
mibBuilder.exportSymbols("FspR7-MIB", deployProvIfXfpDecisionThres=deployProvIfXfpDecisionThres, shelfInfoStandardSlots=shelfInfoStandardSlots, deployProvIfDefaultsTraceTransmitSapiOduTcmC=deployProvIfDefaultsTraceTransmitSapiOduTcmC, FspR7CpProtType=FspR7CpProtType, currentEthRxHighSpeed1dayEntry=currentEthRxHighSpeed1dayEntry, thresholdOtuFecSESHighThres15min=thresholdOtuFecSESHighThres15min, intervalPhysPerfOscPwr1dayLow=intervalPhysPerfOscPwr1dayLow, changeServiceDeployProvIfCapFecType=changeServiceDeployProvIfCapFecType, deployProvControlPlaneOtnRsvpMaxExpRecoveryTime=deployProvControlPlaneOtnRsvpMaxExpRecoveryTime, deployProvLogicalIfCapOspf=deployProvLogicalIfCapOspf, neModel=neModel, changeServiceDeployProvIfDefaultsDispersionSetting=changeServiceDeployProvIfDefaultsDispersionSetting, intervalOdu15minBbe=intervalOdu15minBbe, FspR7SingleFiberLocation=FspR7SingleFiberLocation, farEndIfConfigTable=farEndIfConfigTable, controlPlaneEthConfigRmTraceTarget=controlPlaneEthConfigRmTraceTarget, intervalPhysPerfSignalToNoiseRatio1dayValidFlag=intervalPhysPerfSignalToNoiseRatio1dayValidFlag, forceDeployProvApsPeerAid=forceDeployProvApsPeerAid, controlPlaneEthConfigTedbConfigFlag=controlPlaneEthConfigTedbConfigFlag, deployProvPppIpCapType=deployProvPppIpCapType, alarmOpuClientSignalFail=alarmOpuClientSignalFail, deployProvPathElementOtnDefaultsDownTributarySlot=deployProvPathElementOtnDefaultsDownTributarySlot, currentConditionAffect=currentConditionAffect, deployProvIfTcmBLevel=deployProvIfTcmBLevel, thresholdOtuFecSublayerExCEHighThres15min=thresholdOtuFecSublayerExCEHighThres15min, inventoryCpWdmUpDataTable=inventoryCpWdmUpDataTable, deployProvVchChannelBundle=deployProvVchChannelBundle, deployProvOpticalLinkCapTable=deployProvOpticalLinkCapTable, interfaceConfigBehaviour=interfaceConfigBehaviour, deployProvVchChannelEqlzAdmin=deployProvVchChannelEqlzAdmin, deployProvLogicalIfDefaultsAuthString=deployProvLogicalIfDefaultsAuthString, alarmPeerLink=alarmPeerLink, virtualOpticalChannelDataTransmitChannel=virtualOpticalChannelDataTransmitChannel, alarmRemoteDefectIndicationLine=alarmRemoteDefectIndicationLine, deployProvApsEntry=deployProvApsEntry, thresholdPhysPerfCapCarrierFreqOffsetLow=thresholdPhysPerfCapCarrierFreqOffsetLow, interfaceConfigExternalVid=interfaceConfigExternalVid, crsConnUnusedFromPointsAidValueFromPoint=crsConnUnusedFromPointsAidValueFromPoint, controlPlaneEthConfigCmCrankBackTimeout=controlPlaneEthConfigCmCrankBackTimeout, deployProvPppIpCapRowStatus=deployProvPppIpCapRowStatus, logicalCpIfDataFarEndTidMonitor=logicalCpIfDataFarEndTidMonitor, deployProvIfDefaultsTraceExpectedOduTcmB=deployProvIfDefaultsTraceExpectedOduTcmB, deployProvApsCapTable=deployProvApsCapTable, opticalAmplifierInterfaceDiagnosticsAttenuationVoa=opticalAmplifierInterfaceDiagnosticsAttenuationVoa, intervalEthRxHighSpeed15minTimeStamp=intervalEthRxHighSpeed15minTimeStamp, connectionWdmDataToNodeIp=connectionWdmDataToNodeIp, intervalPhysPerfDiffGrDelay15minNumber=intervalPhysPerfDiffGrDelay15minNumber, changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmC=changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmC, tunnelOtnDataTunnelId=tunnelOtnDataTunnelId, currentSonetLoPath1dayElapsedTime=currentSonetLoPath1dayElapsedTime, transientHardwareResetInputTIF=transientHardwareResetInputTIF, deployProvTifInputInvertTifInputLogic=deployProvTifInputInvertTifInputLogic, deployProvLanDefaultsEntry=deployProvLanDefaultsEntry, logicalIfDataLogicalInterfaceId=logicalIfDataLogicalInterfaceId, intervalSonetLoPath15minTable=intervalSonetLoPath15minTable, changeServiceDeployProvIfErrorForwarding=changeServiceDeployProvIfErrorForwarding, deployProvControlPlaneOtnDefaultsEntry=deployProvControlPlaneOtnDefaultsEntry, deployProvLogicalCpIfRefreshMultiplier=deployProvLogicalCpIfRefreshMultiplier, currentGfpfr15minTable=currentGfpfr15minTable, neSdhSesThreshold=neSdhSesThreshold, deployProvCopyPathWdmDefaultsTable=deployProvCopyPathWdmDefaultsTable, exChannelConfigChromaticDispersionTx=exChannelConfigChromaticDispersionTx, intervalPhysPerfLaserBiasCurrentNormalized1dayEntry=intervalPhysPerfLaserBiasCurrentNormalized1dayEntry, deployProvPlugCapMaxDataRate=deployProvPlugCapMaxDataRate, changeServiceDeployProvIfDefaultsChannelProvisioning=changeServiceDeployProvIfDefaultsChannelProvisioning, deployProvControlPlaneOtnCapCtmRetryWait=deployProvControlPlaneOtnCapCtmRetryWait, intervalGfp1dayNumber=intervalGfp1dayNumber, thresholdFarEndPhysPerfOpticalOutputPwrHigh=thresholdFarEndPhysPerfOpticalOutputPwrHigh, FspR7AlsHoldoff=FspR7AlsHoldoff, intervalPhysPerfCarrierFreqOffset15minTable=intervalPhysPerfCarrierFreqOffset15minTable, intervalSonetSect1dayTimeStamp=intervalSonetSect1dayTimeStamp, forceDeployProvApsProtectingAidCapsEntry=forceDeployProvApsProtectingAidCapsEntry, intervalPhysPerfOlmTxLineAtt1weekTable=intervalPhysPerfOlmTxLineAtt1weekTable, FspR7OscChannel=FspR7OscChannel, thresholdOtuFecSublayerExTable=thresholdOtuFecSublayerExTable, opticalIfDiagPumpLaser1Temp=opticalIfDiagPumpLaser1Temp, crsConnDeployProvAdmin=crsConnDeployProvAdmin, deployProvLogicalCpIfIpAddrMask=deployProvLogicalCpIfIpAddrMask, deployProvLogicalCpIfTeMetric=deployProvLogicalCpIfTeMetric, deployProvTunnelOtnTable=deployProvTunnelOtnTable, pathEthDataPathType=pathEthDataPathType, intervalSonetHoPath1dayEntry=intervalSonetHoPath1dayEntry, deployProvLogicalIfDefaultsDeadInterval=deployProvLogicalIfDefaultsDeadInterval, shelfInfoUpgradePorts=shelfInfoUpgradePorts, deployProvControlPlaneOtnDefaultsCmCrankBackTimeout=deployProvControlPlaneOtnDefaultsCmCrankBackTimeout, deployProvIfCapTcmBLevel=deployProvIfCapTcmBLevel, intervalL2EthRx1dayUndersizedFramesRcv=intervalL2EthRx1dayUndersizedFramesRcv, routingIpRoutingMetric=routingIpRoutingMetric, intervalPhysPerfOscOpticalOutputPwr15minHigh=intervalPhysPerfOscOpticalOutputPwr15minHigh, tunnelEthConfigRestorationType=tunnelEthConfigRestorationType, transientCopyFileNoHostKeyFail=transientCopyFileNoHostKeyFail, currentSonetSect1dayCV=currentSonetSect1dayCV, intervalPhysPerfCurrentOscGain1dayLow=intervalPhysPerfCurrentOscGain1dayLow, thresholdOtuFecEntry=thresholdOtuFecEntry, intervalOtu15minUAS=intervalOtu15minUAS, dcnOspfAreaPropertiesChange=dcnOspfAreaPropertiesChange, farEndPlugDataReach=farEndPlugDataReach, vc4c16allocatedEntry=vc4c16allocatedEntry, thresholdSonetHoPathESHighThres15min=thresholdSonetHoPathESHighThres15min, deployProvIfCapBip=deployProvIfCapBip, deployProvControlPlaneOtnDefaultsCdbDetail=deployProvControlPlaneOtnDefaultsCdbDetail, deployProvIfDefaultsCac=deployProvIfDefaultsCac, thresholdEthRxHighSpeedCrcFramesHighThres15Min=thresholdEthRxHighSpeedCrcFramesHighThres15Min, sts48callocatedFacilityType=sts48callocatedFacilityType, deployProvLogicalCpIfDefaultsDeadInterval=deployProvLogicalCpIfDefaultsDeadInterval, intervalEthRxHighSpeed1dayEntry=intervalEthRxHighSpeed1dayEntry, deployProvControlPlaneOtnDefaultsTedbConfigFlag=deployProvControlPlaneOtnDefaultsTedbConfigFlag, intervalPhysPerfEstimatedSignalGain1weekHigh=intervalPhysPerfEstimatedSignalGain1weekHigh, deployProvApsDefaultsTable=deployProvApsDefaultsTable, intervalSonetHoPath15minValidFlag=intervalSonetHoPath15minValidFlag, thresholdSonetLoPathSESHighThres15min=thresholdSonetLoPathSESHighThres15min, currentPhysConvHighSpeed1daySE=currentPhysConvHighSpeed1daySE, deployProvCrsDcnType=deployProvCrsDcnType, deployProvPathElementWdmDefaultsTable=deployProvPathElementWdmDefaultsTable, deployProvIfCapAttenuationGradient=deployProvIfCapAttenuationGradient, deployProvIfCapBand=deployProvIfCapBand, changeServiceDeployProvIfTcmALevel=changeServiceDeployProvIfTcmALevel, intervalPhysPerfLaserBiasCurrentNormalized1weekValidFlag=intervalPhysPerfLaserBiasCurrentNormalized1weekValidFlag, deployProvTunnelWdmCapLayer=deployProvTunnelWdmCapLayer, deployProvDcnDefaultsRowStatus=deployProvDcnDefaultsRowStatus, deployProvVchChannelCapRowStatus=deployProvVchChannelCapRowStatus, transientWorkingSwitchedtoProtection=transientWorkingSwitchedtoProtection, FspR7SshHostKeyEncryptAlgorithmCaps=FspR7SshHostKeyEncryptAlgorithmCaps, ntpSrvCurrentConditionTable=ntpSrvCurrentConditionTable, tunnelOtnDataErrorMessage=tunnelOtnDataErrorMessage, tunnelOtnDataErrorCodeMajor=tunnelOtnDataErrorCodeMajor, thresholdPhysConvCombinedCVDEHighThres1day=thresholdPhysConvCombinedCVDEHighThres1day, controlPlaneWdmDataCdAlias=controlPlaneWdmDataCdAlias, deployProvLogicalIfPrio=deployProvLogicalIfPrio, currentEthRx3HS1dayBroadcastFramesRcv=currentEthRx3HS1dayBroadcastFramesRcv, intervalPhysPerfSignalToNoiseRatio15minTable=intervalPhysPerfSignalToNoiseRatio15minTable, alarmOpticalInputPwrReceivedTooLow=alarmOpticalInputPwrReceivedTooLow, thresholdSubAggregateESHighThres1day=thresholdSubAggregateESHighThres1day, deployProvModuleCapGainRange=deployProvModuleCapGainRange, deployProvTunnelEthDefaultsProvisionedPaths=deployProvTunnelEthDefaultsProvisionedPaths, deployProvIfDefaultsTraceExpectedSonetSection=deployProvIfDefaultsTraceExpectedSonetSection, deployProvControlPlaneOtnDefaultsTable=deployProvControlPlaneOtnDefaultsTable, deployProvModuleLanAid=deployProvModuleLanAid, f7eqpSh1hudcm=f7eqpSh1hudcm, currentGfpfrSublayer1dayElapsedTime=currentGfpfrSublayer1dayElapsedTime, FspR7CpAbortProcessCaps=FspR7CpAbortProcessCaps, deployProvIfCapDispersionMode=deployProvIfCapDispersionMode, deployProvExChannelDefaultsOpticalPowerTx=deployProvExChannelDefaultsOpticalPowerTx, deployProvExChannelCapRowStatus=deployProvExChannelCapRowStatus, transientLocalCopyMemComplted=transientLocalCopyMemComplted, deployProvControlPlaneOtnRaConfigFlag=deployProvControlPlaneOtnRaConfigFlag, intervalPhysConv1dayEntry=intervalPhysConv1dayEntry, transientRestorationStart=transientRestorationStart, deployProvIfVethAid=deployProvIfVethAid, transientThres1DayExceededMuxES=transientThres1DayExceededMuxES, moduleDataSerialPorts=moduleDataSerialPorts, deployProvLogicalIfDefaultsMetric=deployProvLogicalIfDefaultsMetric, deployProvControlPlaneWdmRowStatus=deployProvControlPlaneWdmRowStatus, thresholdOduTcmCOduTcmCBbeHighThres15min=thresholdOduTcmCOduTcmCBbeHighThres15min, intervalPhysPerfOlmRxLineAtt1weekHigh=intervalPhysPerfOlmRxLineAtt1weekHigh, currentL2EthTx15minBroadcastFramesTrmt=currentL2EthTx15minBroadcastFramesTrmt, currentEthRx3HS1dayJabberFrameRcv=currentEthRx3HS1dayJabberFrameRcv, lanIpDataEntry=lanIpDataEntry, crsConnDeployProvRedLineState=crsConnDeployProvRedLineState, intervalEthRx15minDiscardedFrames=intervalEthRx15minDiscardedFrames, intervalGfpfr1dayGoodFrames=intervalGfpfr1dayGoodFrames, intervalRoundTripDelay15minNumber=intervalRoundTripDelay15minNumber, deployProvIfCapTilt=deployProvIfCapTilt, deployProvOpticalLinkCapRowStatus=deployProvOpticalLinkCapRowStatus, deployProvLanCapAdmin=deployProvLanCapAdmin, deployProvModuleCapLagSysPrio=deployProvModuleCapLagSysPrio, tunnelEthConfigProtectionType=tunnelEthConfigProtectionType, FspR7SnmpHexString=FspR7SnmpHexString, deployProvLanIpType=deployProvLanIpType, alarmNtpSrvOosDsbld=alarmNtpSrvOosDsbld, transientAlarmProfileFactoryDefaultActivation=transientAlarmProfileFactoryDefaultActivation, deployProvIfCapDisparityCorrection=deployProvIfCapDisparityCorrection, deployProvIfFlowControl=deployProvIfFlowControl, deployProvSyslogTable=deployProvSyslogTable, controlPlaneWdmConfigCtmConfigFlag=controlPlaneWdmConfigCtmConfigFlag, currentEthRx3HS1dayTable=currentEthRx3HS1dayTable, deployProvIfDefaultsTraceTransmitOpspOduTcmA=deployProvIfDefaultsTraceTransmitOpspOduTcmA, intervalOdu15minValidFlag=intervalOdu15minValidFlag, fspUserManagementCapEntry=fspUserManagementCapEntry, alarmNtpNotInSync=alarmNtpNotInSync, deployProvApsDefaultsRowStatus=deployProvApsDefaultsRowStatus, intervalLatency1dayHigh=intervalLatency1dayHigh, deployProvLogicalCpIfDefaultsRefreshMultiplier=deployProvLogicalCpIfDefaultsRefreshMultiplier, changeServiceDeployProvIfFunction=changeServiceDeployProvIfFunction, transientWeek1RecordsAvailable=transientWeek1RecordsAvailable, intervalPhysPerfSignalToNoiseRatio1weekTimeStamp=intervalPhysPerfSignalToNoiseRatio1weekTimeStamp, alarmLinkControlProtocolFailure=alarmLinkControlProtocolFailure, pathElementWdmDataUpstreamModuleAid=pathElementWdmDataUpstreamModuleAid, tunnelWdmDataTable=tunnelWdmDataTable, intervalGfpfrSublayer15minTimeStamp=intervalGfpfrSublayer15minTimeStamp, teNumLinkEthDataNodeTid=teNumLinkEthDataNodeTid, currentOduTcmC15minES=currentOduTcmC15minES, currentEthRx3HS15minBytesFrames256Rcv=currentEthRx3HS15minBytesFrames256Rcv, deployProvTifInputType=deployProvTifInputType, controlPlaneWdmConfigTedbConfigFlag=controlPlaneWdmConfigTedbConfigFlag, intervalL2EthTx1dayBytesFrames128Trmt=intervalL2EthTx1dayBytesFrames128Trmt, deployProvIfMetric=deployProvIfMetric, intervalOdu1dayNumber=intervalOdu1dayNumber, deployProvModuleDCFiberType=deployProvModuleDCFiberType, thresholdPhysConvCombinedCVDEHighThres15min=thresholdPhysConvCombinedCVDEHighThres15min, intervalPhysPerfOscPwr1weekMean=intervalPhysPerfOscPwr1weekMean, deployProvTunnelWdmCapSubLayer=deployProvTunnelWdmCapSubLayer, intervalOtuFec1dayES=intervalOtuFec1dayES, deployProvVchChannelCapTraceTransmitDapiOdu=deployProvVchChannelCapTraceTransmitDapiOdu, logicalIfConfigAreaId=logicalIfConfigAreaId, intervalGfpfr15minNumber=intervalGfpfr15minNumber, transientCopyFileChecksumFail=transientCopyFileChecksumFail, deployProvIfBitrate=deployProvIfBitrate, FspR7TiltSet=FspR7TiltSet, intervalPhysPerfBackreflectionPwrRcv1dayEntry=intervalPhysPerfBackreflectionPwrRcv1dayEntry, deployProvExChannelDefaultsMaximumOpticalPowerRcv=deployProvExChannelDefaultsMaximumOpticalPowerRcv, deployProvIfCapTraceTransmitOpspOtu=deployProvIfCapTraceTransmitOpspOtu, thresholdPhysConvHighSpeedSEHighThres15min=thresholdPhysConvHighSpeedSEHighThres15min, deployProvControlPlaneOtnDefaultsNaasMaxSize=deployProvControlPlaneOtnDefaultsNaasMaxSize, deployProvModuleTable=deployProvModuleTable, deployProvExChannelMaxBitErrorRate=deployProvExChannelMaxBitErrorRate, currentOtuFec15minUBE=currentOtuFec15minUBE, changeServiceDeployProvIfCapTimModeSonetSection=changeServiceDeployProvIfCapTimModeSonetSection, intervalOdu1daySES=intervalOdu1daySES, deployProvTifOutputDefaultsTelemetry=deployProvTifOutputDefaultsTelemetry, FspR7CpPreprovUeqStateCaps=FspR7CpPreprovUeqStateCaps, intervalPhysPerfOscOpticalOutputPwr1dayEntry=intervalPhysPerfOscOpticalOutputPwr1dayEntry, currentGfpSublayer15minCoreHecCorrectedFrames=currentGfpSublayer15minCoreHecCorrectedFrames, currentOtuFec1dayExEntry=currentOtuFec1dayExEntry, changeServiceDeployProvIfCapEqlzAdmin=changeServiceDeployProvIfCapEqlzAdmin, deployProvIfDefaultsTraceTransmitSapiOtu=deployProvIfDefaultsTraceTransmitSapiOtu, areaIdCapStringCap=areaIdCapStringCap, thresholdGfpSublayerTypeHecDiscardedFramesHighThres1Day=thresholdGfpSublayerTypeHecDiscardedFramesHighThres1Day, intervalRoundTripDelay1dayLow=intervalRoundTripDelay1dayLow, deployProvLogicalCpIfCapEncapsulation=deployProvLogicalCpIfCapEncapsulation, currentPhysConvHighSpeed15minSE=currentPhysConvHighSpeed15minSE, ntpSysCurrentConditionAffect=ntpSysCurrentConditionAffect, FspR7ConnCaps=FspR7ConnCaps, FspR7NumberOfChannelsCaps=FspR7NumberOfChannelsCaps, deployProvPppIpCapFlowControl=deployProvPppIpCapFlowControl, intervalPhysPerfLaserBiasCurrentNormalized1dayTimeStamp=intervalPhysPerfLaserBiasCurrentNormalized1dayTimeStamp, intervalPhysPerfPumpPwr1dayTable=intervalPhysPerfPumpPwr1dayTable, deployProvIfCapSigDegThresSonetLine=deployProvIfCapSigDegThresSonetLine, deployProvTifInputCapForceDestroy=deployProvTifInputCapForceDestroy, intervalPhysPerfOlmRxLineAtt15minNumber=intervalPhysPerfOlmRxLineAtt15minNumber, intervalRoundTripDelay1weekNumber=intervalRoundTripDelay1weekNumber, deployProvIfTraceTransmitDapiOduTcmA=deployProvIfTraceTransmitDapiOduTcmA, deployProvTunnelWdmFecType=deployProvTunnelWdmFecType, intervalPhysPerfDiffGrDelay15minLow=intervalPhysPerfDiffGrDelay15minLow, neAreaId=neAreaId, intervalPhysPerfCurrentOscGain1weekMean=intervalPhysPerfCurrentOscGain1weekMean, currentOduTcmB1daySES=currentOduTcmB1daySES, alarmConfigurableOpticalOutputPowerTransmittedTooHigh=alarmConfigurableOpticalOutputPowerTransmittedTooHigh, currentL2EthRx15minInterPackJunkBytesFramesRcv=currentL2EthRx15minInterPackJunkBytesFramesRcv, transientRestorationCompleted=transientRestorationCompleted, shelfDiagnosticsMaxPowerConsumption=shelfDiagnosticsMaxPowerConsumption, deployProvShelfCapEntry=deployProvShelfCapEntry, deployProvControlPlaneEthDefaultsRsvpMaxExpRestartTime=deployProvControlPlaneEthDefaultsRsvpMaxExpRestartTime, alarmSignalFailureOnLink=alarmSignalFailureOnLink)
mibBuilder.exportSymbols("FspR7-MIB", ethernetDataMonitoredBitrate=ethernetDataMonitoredBitrate, intervalFarEndPhysPerfOpticalOutputPwr1dayValidFlag=intervalFarEndPhysPerfOpticalOutputPwr1dayValidFlag, alarmSignalToNoiseRatioTooLow=alarmSignalToNoiseRatioTooLow, farEndIfDataTransmitFrequency=farEndIfDataTransmitFrequency, deployProvExChannelCapAlias=deployProvExChannelCapAlias, interfaceDataTable=interfaceDataTable, thresholdOduTcmATable=thresholdOduTcmATable, intervalPhysPerfLaserBiasCurrentNormalized15minHigh=intervalPhysPerfLaserBiasCurrentNormalized15minHigh, logicalIfDataIpType=logicalIfDataIpType, reservationCpDataEntry=reservationCpDataEntry, deployProvControlPlaneEthDefaultsRmTraceTarget=deployProvControlPlaneEthDefaultsRmTraceTarget, f7eqpWca10gd=f7eqpWca10gd, currentL2EthRx1dayBroadcastFramesRcv=currentL2EthRx1dayBroadcastFramesRcv, alarmOpticalPowerTxLOS=alarmOpticalPowerTxLOS, eRoadmConfigOpticalSetPoint=eRoadmConfigOpticalSetPoint, thresholdPhysConvTxHighSpeedESTXHighThres15min=thresholdPhysConvTxHighSpeedESTXHighThres15min, deployProvPathElementWdmDefaultsDownstreamModuleAid=deployProvPathElementWdmDefaultsDownstreamModuleAid, f7eqpEdfas=f7eqpEdfas, intervalPhysPerfLaserBiasCurrentNormalized15minTimeStamp=intervalPhysPerfLaserBiasCurrentNormalized15minTimeStamp, neighborDiscoveryDataFarEndTranLayerTermPointAid=neighborDiscoveryDataFarEndTranLayerTermPointAid, intervalL2EthRx1dayBytesRcv=intervalL2EthRx1dayBytesRcv, intervalPhysPerfEstimatedSignalGain1weekValidFlag=intervalPhysPerfEstimatedSignalGain1weekValidFlag, changeServiceDeployProvIfDefaultsOpticalSetPoint=changeServiceDeployProvIfDefaultsOpticalSetPoint, deployProvTunnelWdmStuff=deployProvTunnelWdmStuff, intervalPhysPerfOscOpticalOutputPwr15minEntry=intervalPhysPerfOscOpticalOutputPwr15minEntry, deployProvExChannelDefaultsChannelBandwith=deployProvExChannelDefaultsChannelBandwith, deployProvControlPlaneEthCapRaAlarmActivationTime=deployProvControlPlaneEthCapRaAlarmActivationTime, deployProvControlPlaneOtnCtmMaximumRetryNumber=deployProvControlPlaneOtnCtmMaximumRetryNumber, currentSonetLoPath15minUAS=currentSonetLoPath15minUAS, deployProvControlPlaneWdmDefaultsCdbMaxSize=deployProvControlPlaneWdmDefaultsCdbMaxSize, intervalPhysPerfCurrentOscGain1dayTimeStamp=intervalPhysPerfCurrentOscGain1dayTimeStamp, teUnnumLinkWdmDataEntry=teUnnumLinkWdmDataEntry, intervalEthRx15minBytes=intervalEthRx15minBytes, deployProvCopyPathWdmDefaultsRowStatus=deployProvCopyPathWdmDefaultsRowStatus, deployProvTunnelOtnTunnelType=deployProvTunnelOtnTunnelType, deployProvTunnelEthFacilityType=deployProvTunnelEthFacilityType, reservationCpDataChannelDown=reservationCpDataChannelDown, deployProvIfSigDegThresSonetLine=deployProvIfSigDegThresSonetLine, deployProvIfCapErrorForwarding=deployProvIfCapErrorForwarding, thresholdPhysPerfCapLatencyLowThres=thresholdPhysPerfCapLatencyLowThres, forceDeployProvApsDefaultsDirection=forceDeployProvApsDefaultsDirection, alarmDispersionCompensationTooHigh=alarmDispersionCompensationTooHigh, changeServiceDeployProvIfSigDegThresOtu=changeServiceDeployProvIfSigDegThresOtu, remoteAlarmCpDataDate=remoteAlarmCpDataDate, alarmLinkDown=alarmLinkDown, ntpSysCurrentConditionType=ntpSysCurrentConditionType, shelfConfigRackOrder=shelfConfigRackOrder, farEndIfDataTransmitWavelength=farEndIfDataTransmitWavelength, intervalGfpfrSublayer15minGoodFrames=intervalGfpfrSublayer15minGoodFrames, intervalEthRx1dayBytes=intervalEthRx1dayBytes, pathElementWdmDataComputedOptPowerForward=pathElementWdmDataComputedOptPowerForward, deployProvTunnelEthRestorationType=deployProvTunnelEthRestorationType, deployProvPortBindingDefaultsTable=deployProvPortBindingDefaultsTable, deployProvIfTimModeOduTcmA=deployProvIfTimModeOduTcmA, intervalPhysPerfSignalToNoiseRatio15minHigh=intervalPhysPerfSignalToNoiseRatio15minHigh, intervalPhysPerfCarrierFreqOffset1dayEntry=intervalPhysPerfCarrierFreqOffset1dayEntry, currentOdu15minBbe=currentOdu15minBbe, changeServiceDeployProvIfDefaultsTraceExpectedOtu=changeServiceDeployProvIfDefaultsTraceExpectedOtu, teUnnumLinkWdmDataNumber=teUnnumLinkWdmDataNumber, currentSonetLoPath1dayEntry=currentSonetLoPath1dayEntry, intervalPhysConvTxHighSpeed1dayESTX=intervalPhysConvTxHighSpeed1dayESTX, opticalIfDiagPumpLaser2Temp=opticalIfDiagPumpLaser2Temp, deployProvControlPlaneOtnDefaultsRaConfigFlag=deployProvControlPlaneOtnDefaultsRaConfigFlag, intervalL2EthRx1dayBytesFrames1024Rcv=intervalL2EthRx1dayBytesFrames1024Rcv, pathElementOtnDataLogicalInterfaceId=pathElementOtnDataLogicalInterfaceId, opticalIfDiagAttenuationOfVoa=opticalIfDiagAttenuationOfVoa, intervalOduTcmB15minSES=intervalOduTcmB15minSES, inventoryCpEthDownFlowDataTable=inventoryCpEthDownFlowDataTable, f7eqp8Csmuc=f7eqp8Csmuc, alarmLossOfPointerLowerOrderPath=alarmLossOfPointerLowerOrderPath, tunnelWdmDataTunnelNo=tunnelWdmDataTunnelNo, thresholdPhysConvTable=thresholdPhysConvTable, deployProvPppIpDefaultsDefaultGateway=deployProvPppIpDefaultsDefaultGateway, FspR7NCTRouteType=FspR7NCTRouteType, routingIpEntry=routingIpEntry, opticalIfConfigTestPrbsTrmtMode=opticalIfConfigTestPrbsTrmtMode, deployProvPathElementWdmChannelUp=deployProvPathElementWdmChannelUp, thresholdOtuBbeHighThres1day=thresholdOtuBbeHighThres1day, intervalPhysPerfLaserBiasCurrentNormalized1weekTimeStamp=intervalPhysPerfLaserBiasCurrentNormalized1weekTimeStamp, currentEthRxHighSpeed15minPauseFrames=currentEthRxHighSpeed15minPauseFrames, deployProvPathElementEthCapDownstreamSvid=deployProvPathElementEthCapDownstreamSvid, currentL2EthRx15minBytesFrames64Rcv=currentL2EthRx15minBytesFrames64Rcv, deployProvControlPlaneOtnCmTraceDetail=deployProvControlPlaneOtnCmTraceDetail, thresholdSonetLineMsTable=thresholdSonetLineMsTable, changeServiceDeployProvIfDefaultsDisparityCorrection=changeServiceDeployProvIfDefaultsDisparityCorrection, connectionOtnDataModificationState=connectionOtnDataModificationState, thresholdPhysPerfConfigurableOpticalOutputPwrHigh=thresholdPhysPerfConfigurableOpticalOutputPwrHigh, transientLocalCopyMemFailFsckFailed=transientLocalCopyMemFailFsckFailed, controlPlaneEthConfigCtmRetryWaitMultiplier=controlPlaneEthConfigCtmRetryWaitMultiplier, deployProvConnStdCapToTable=deployProvConnStdCapToTable, deployProvControlPlaneWdmCapRmConfigFlag=deployProvControlPlaneWdmCapRmConfigFlag, intervalPhysPerfOlmTxLineAtt15minLow=intervalPhysPerfOlmTxLineAtt15minLow, FspR7FecType=FspR7FecType, deployProvControlPlaneWdmDefaultsCmConfigFlag=deployProvControlPlaneWdmDefaultsCmConfigFlag, connectionOtnDataToTid=connectionOtnDataToTid, logicalCpIfConfigTable=logicalCpIfConfigTable, deployProvVchChannelCapTable=deployProvVchChannelCapTable, intervalEthRxHighSpeed1dayBytes=intervalEthRxHighSpeed1dayBytes, deployProvIfDefaultsChannelProvisioning=deployProvIfDefaultsChannelProvisioning, intervalL2EthTx1dayBytesFrames256Trmt=intervalL2EthTx1dayBytesFrames256Trmt, controlPlaneWdmDataNodeNameSyntax=controlPlaneWdmDataNodeNameSyntax, deployProvTunnelWdmDefaultsTunnelType=deployProvTunnelWdmDefaultsTunnelType, opticalIfConfigCapDispersionMode=opticalIfConfigCapDispersionMode, deployProvLogicalCpIfIpAddr=deployProvLogicalCpIfIpAddr, deployProvVchChannelTraceTransmitOpspOdu=deployProvVchChannelTraceTransmitOpspOdu, deployProvLogicalCpIfEncapsulation=deployProvLogicalCpIfEncapsulation, alarmLossofTandemConnectionOduTcmC=alarmLossofTandemConnectionOduTcmC, currentL2EthTx1dayBytesTrmt=currentL2EthTx1dayBytesTrmt, vchDataOpuPayloadType=vchDataOpuPayloadType, deployProvTunnelEthTable=deployProvTunnelEthTable, deployProvControlPlaneWdmDefaultsNaasMaxSize=deployProvControlPlaneWdmDefaultsNaasMaxSize, tunnelOtnDataTunnelNumberExtension=tunnelOtnDataTunnelNumberExtension, deployProvPathElementOtnCapDownTributaryODTUType=deployProvPathElementOtnCapDownTributaryODTUType, deployProvPortBindingDefaultsRemoteTna=deployProvPortBindingDefaultsRemoteTna, deployProvPathElementOtnUpTributaryODTUType=deployProvPathElementOtnUpTributaryODTUType, Counter64StringCaps=Counter64StringCaps, deployProvLogicalIfRetransmitInterval=deployProvLogicalIfRetransmitInterval, deployProvControlPlaneEthDefaultsCmAlarmActivationTime=deployProvControlPlaneEthDefaultsCmAlarmActivationTime, deployProvTunnelWdmDefaultsFecType=deployProvTunnelWdmDefaultsFecType, forceDeployProvApsDefaultsRevertMode=forceDeployProvApsDefaultsRevertMode, deployProvIfDefaultsTraceExpectedOdu=deployProvIfDefaultsTraceExpectedOdu, crsConnDeployProvCapTunnelAid=crsConnDeployProvCapTunnelAid, controlPlaneWdmConfigCdbDetail=controlPlaneWdmConfigCdbDetail, intervalSonetLoPath1dayEntry=intervalSonetLoPath1dayEntry, deployProvLogicalCpIfCapTable=deployProvLogicalCpIfCapTable, apsConfigEntry=apsConfigEntry, deployProvControlPlaneOtnCtmTraceDetail=deployProvControlPlaneOtnCtmTraceDetail, controlPlaneOtnConfigPcTraceDetail=controlPlaneOtnConfigPcTraceDetail, thresholdOtuFecSublayerBERCEHighThres15min=thresholdOtuFecSublayerBERCEHighThres15min, FspR7LaserForcedOperation=FspR7LaserForcedOperation, plugDataFiberType=plugDataFiberType, crsConnDeployProvPathNode=crsConnDeployProvPathNode, intervalRoundTripDelay1weekLow=intervalRoundTripDelay1weekLow, alarmApsConfigMismatch=alarmApsConfigMismatch, thresholdPhysConvEntry=thresholdPhysConvEntry, intervalPhysPerfLaserBiasCurrentNormalized1weekHigh=intervalPhysPerfLaserBiasCurrentNormalized1weekHigh, deployProvIfCapSigDegPeriodIntegration=deployProvIfCapSigDegPeriodIntegration, farEndPlugConfigEntry=farEndPlugConfigEntry, deployProvPathElementOtnDefaultsDownTributaryPort=deployProvPathElementOtnDefaultsDownTributaryPort, deployProvTunnelWdmCapOifUni=deployProvTunnelWdmCapOifUni, changeServiceDeployProvIfDefaultsLaserOffDelayFunction=changeServiceDeployProvIfDefaultsLaserOffDelayFunction, intervalPhysPerfCurrent15minTable=intervalPhysPerfCurrent15minTable, deployProvPppIpCapBaud=deployProvPppIpCapBaud, deployProvIfSignalDegradePeriod=deployProvIfSignalDegradePeriod, currentOduTcmB15minSES=currentOduTcmB15minSES, controlPlaneOtnConfigRaAlarmActivationTime=controlPlaneOtnConfigRaAlarmActivationTime, deployProvControlPlaneWdmDefaultsCmTraceDetail=deployProvControlPlaneWdmDefaultsCmTraceDetail, eRoadmConfigEntry=eRoadmConfigEntry, deployProvIfEqlzAdmin=deployProvIfEqlzAdmin, changeServiceDeployProvIfCapTraceTransmitOpspOduTcmB=changeServiceDeployProvIfCapTraceTransmitOpspOduTcmB, deployProvLogicalCpIfDefaultsLinkColor=deployProvLogicalCpIfDefaultsLinkColor, thresholdOtuEntry=thresholdOtuEntry, deployProvVchChannelType=deployProvVchChannelType, thresholdSonetLineESHighThres15min=thresholdSonetLineESHighThres15min, opticalIfConfigAprHighThreshold=opticalIfConfigAprHighThreshold, intervalPhysPerfEstimatedSignalGain1weekEntry=intervalPhysPerfEstimatedSignalGain1weekEntry, neForceDelete=neForceDelete, thresholdIntrusionGradient=thresholdIntrusionGradient, interfaceDataValidSignalTimer=interfaceDataValidSignalTimer, pathElementEthDataLogicalInterfaceId=pathElementEthDataLogicalInterfaceId, deployProvTunnelWdmRowStatus=deployProvTunnelWdmRowStatus, deployProvLogicalCpIfCapExtAdvertised=deployProvLogicalCpIfCapExtAdvertised, deployProvPathWdmCapEntry=deployProvPathWdmCapEntry, deployProvOpticalLinkCapFarEndLocation=deployProvOpticalLinkCapFarEndLocation, deployProvPortBindingDefaultsRemoteScn=deployProvPortBindingDefaultsRemoteScn, thresholdEthRxHighSpeedEntry=thresholdEthRxHighSpeedEntry, intervalPhysPerfDiffGrDelay1weekTimeStamp=intervalPhysPerfDiffGrDelay1weekTimeStamp, deployProvIfDefaultsStagType=deployProvIfDefaultsStagType, currentSonetLoPath1dayES=currentSonetLoPath1dayES, thresholdFarEndPhysPerfOpticalOutputPwrLow=thresholdFarEndPhysPerfOpticalOutputPwrLow, crsConnWdmConfigEntry=crsConnWdmConfigEntry, intervalEthRx3HS15minEntry=intervalEthRx3HS15minEntry, intervalPhysPerfOlmTxLineAtt1weekLow=intervalPhysPerfOlmTxLineAtt1weekLow, teUnnumLinkEthDataInfo=teUnnumLinkEthDataInfo, FspR7CpNodeId=FspR7CpNodeId, deployProvControlPlaneEthCapEntry=deployProvControlPlaneEthCapEntry, intervalOduTcmB15minUAS=intervalOduTcmB15minUAS, connectionOtnDataTable=connectionOtnDataTable, pathElementOtnDataPathId=pathElementOtnDataPathId, tunnelOtnConfigProvisionedPaths=tunnelOtnConfigProvisionedPaths, intervalLatency1weekValidFlag=intervalLatency1weekValidFlag, deployProvExChannelDefaultsType=deployProvExChannelDefaultsType, intervalEthRx15minCrcFrames=intervalEthRx15minCrcFrames, FspR7CpOspfTeRoutingCaps=FspR7CpOspfTeRoutingCaps, intervalPhysPerfLaserBiasCurrentNormalized1dayHigh=intervalPhysPerfLaserBiasCurrentNormalized1dayHigh, intervalPhysPerfDiffGrDelay15minValidFlag=intervalPhysPerfDiffGrDelay15minValidFlag, deployProvIfDefaultsPayload=deployProvIfDefaultsPayload, deployProvPathEthCapPathId=deployProvPathEthCapPathId, shelfDiagnosticsPowerOutput=shelfDiagnosticsPowerOutput, deployProvIfTraceExpectedOduTcmB=deployProvIfTraceExpectedOduTcmB, currentEthRx1dayPauseFrames=currentEthRx1dayPauseFrames, deployProvLogicalCpIfDefaultsAreaId=deployProvLogicalCpIfDefaultsAreaId, deployProvCrsDcnCapEntry=deployProvCrsDcnCapEntry, FspR7PmResetCaps=FspR7PmResetCaps, controlPlaneEthConfigRaConfigFlag=controlPlaneEthConfigRaConfigFlag, deployProvControlPlaneWdmRaAlarmActivationTime=deployProvControlPlaneWdmRaAlarmActivationTime, deployProvModuleChannelSpacing=deployProvModuleChannelSpacing, moduleDataMode=moduleDataMode, currentL2EthTx15minBytesFrames1024Trmt=currentL2EthTx15minBytesFrames1024Trmt, changeServiceDeployProvIfCapTraceTransmitOpspOduTcmA=changeServiceDeployProvIfCapTraceTransmitOpspOduTcmA, otdrDataRemainingTime=otdrDataRemainingTime, intervalPhysPerfOpticalOutputPwr1weekMean=intervalPhysPerfOpticalOutputPwr1weekMean, apsProtFacilityConfigTable=apsProtFacilityConfigTable, opticalLinkConfigTable=opticalLinkConfigTable, deployProvApsDefaultsSignalFailureSwitching=deployProvApsDefaultsSignalFailureSwitching, controlPlaneWdmConfigTedbTraceDetail=controlPlaneWdmConfigTedbTraceDetail, dependenciesTable=dependenciesTable, changeServiceDeployProvIfDefaultsOtnStuffing=changeServiceDeployProvIfDefaultsOtnStuffing, pathElementOtnDataDownTributarySlot=pathElementOtnDataDownTributarySlot, authTrapStatus=authTrapStatus, logicalCpIfDataFendTeLinkAid=logicalCpIfDataFendTeLinkAid, alarmAutoShutdownSendingIdle=alarmAutoShutdownSendingIdle, f7eqp1Gsmud=f7eqp1Gsmud, neSshDeamon=neSshDeamon, reservationCpDataSeqNumber=reservationCpDataSeqNumber, intervalPhysPerfOlmRxLineAtt1weekLow=intervalPhysPerfOlmRxLineAtt1weekLow, teNumLinkEthDataFendTeLinkIp=teNumLinkEthDataFendTeLinkIp, transientThres1DayExceededOtuBbe=transientThres1DayExceededOtuBbe, tunnelOtnDataEntry=tunnelOtnDataEntry, intervalSonetLine1dayCV=intervalSonetLine1dayCV, farEndPlugConfigCapMaxDataRate=farEndPlugConfigCapMaxDataRate, logicalCpIfDataFarEndNodeIp=logicalCpIfDataFarEndNodeIp, deployProvIfPriority=deployProvIfPriority, controlPlaneWdmConfigCmTraceDetail=controlPlaneWdmConfigCmTraceDetail, intervalEthTx1dayEntry=intervalEthTx1dayEntry, intervalPhysPerfCurrentOscGain15minTimeStamp=intervalPhysPerfCurrentOscGain15minTimeStamp, deployProvCrsDcnDefaultsForceDestroy=deployProvCrsDcnDefaultsForceDestroy, deployProvLanCapMetric=deployProvLanCapMetric, deployProvControlPlaneOtnCapCmAlarmActivationTime=deployProvControlPlaneOtnCapCmAlarmActivationTime, connectionOtnDataFromTid=connectionOtnDataFromTid, intervalGfpSublayer1dayValidFlag=intervalGfpSublayer1dayValidFlag, FspR7InterfaceTypeCaps=FspR7InterfaceTypeCaps, deployProvControlPlaneWdmCapCdbDetail=deployProvControlPlaneWdmCapCdbDetail, shelfInfoInternalPorts=shelfInfoInternalPorts, wdmChannelModuleDataSuppNetworkPlugTypes=wdmChannelModuleDataSuppNetworkPlugTypes, deployProvControlPlaneWdmDefaultsRsvpMaxExpRestartTime=deployProvControlPlaneWdmDefaultsRsvpMaxExpRestartTime, deployProvPlugChannelId=deployProvPlugChannelId, changeServiceDeployProvIfDefaultsOscOpticalSetpoint=changeServiceDeployProvIfDefaultsOscOpticalSetpoint, deployProvIfVethAidCapsIndex=deployProvIfVethAidCapsIndex, neTimeZone=neTimeZone, deployProvControlPlaneOtnCmConfigFlag=deployProvControlPlaneOtnCmConfigFlag, changeServiceDeployProvIfDefaultsSigDegThreshold=changeServiceDeployProvIfDefaultsSigDegThreshold, intervalL2EthTx15minBytesFrames256Trmt=intervalL2EthTx15minBytesFrames256Trmt, FspR7Action=FspR7Action, deployProvIfDefaultsTraceTransmitSonetSection=deployProvIfDefaultsTraceTransmitSonetSection, thresholdPhysPerfPumpLaser1TempHighThres=thresholdPhysPerfPumpLaser1TempHighThres, controlPlaneEthDataCdAlias=controlPlaneEthDataCdAlias, currentEthTx15minPauseFrames=currentEthTx15minPauseFrames, intervalOduTcmB1dayES=intervalOduTcmB1dayES, intervalPhysPerfDiffGrDelay15minMean=intervalPhysPerfDiffGrDelay15minMean, connectionOtnDataNetworkElementPosition=connectionOtnDataNetworkElementPosition, transientThres1DayExceededSonetLineUAS=transientThres1DayExceededSonetLineUAS, intervalEthRxHighSpeed15minBytes=intervalEthRxHighSpeed15minBytes, conditionFilters=conditionFilters)
mibBuilder.exportSymbols("FspR7-MIB", neAlarmActivationTime=neAlarmActivationTime, intervalEthRxHighSpeed15minEntry=intervalEthRxHighSpeed15minEntry, inventoryCpWdmDownDataTable=inventoryCpWdmDownDataTable, teNumLinkOtnDataFendTeLinkIp=teNumLinkOtnDataFendTeLinkIp, currentSonetLine1dayElapsedTime=currentSonetLine1dayElapsedTime, FspR7ScuRingCaps=FspR7ScuRingCaps, areaIdCapTable=areaIdCapTable, currentOtu15minES=currentOtu15minES, changeServiceDeployProvIfDefaultsTraceExpectedOduTcmB=changeServiceDeployProvIfDefaultsTraceExpectedOduTcmB, interfaceConfigEntry=interfaceConfigEntry, inventoryCpEthUpDataFacilities=inventoryCpEthUpDataFacilities, changeServiceDeployProvIfLaserOffDelayFunction=changeServiceDeployProvIfLaserOffDelayFunction, deployProvLogicalCpIfRetransmitInterval=deployProvLogicalCpIfRetransmitInterval, f7eqp2oscm=f7eqp2oscm, controlPlaneOtnDataNaasAlias=controlPlaneOtnDataNaasAlias, fspUserManagementEntry=fspUserManagementEntry, thresholdOduTcmBSESHighThres15min=thresholdOduTcmBSESHighThres15min, intervalPhysPerfLaserBiasCurrentNormalized15minNumber=intervalPhysPerfLaserBiasCurrentNormalized15minNumber, deployProvExChannelCapMaximumPMDRcv=deployProvExChannelCapMaximumPMDRcv, eocDataProtectionRole=eocDataProtectionRole, FspR7UntaggedFrames=FspR7UntaggedFrames, changeServiceDeployProvIfDefaultsPumpPower=changeServiceDeployProvIfDefaultsPumpPower, portBindingLifAidValue=portBindingLifAidValue, deployProvTunnelOtnCapTable=deployProvTunnelOtnCapTable, crsConnWdmDataTable=crsConnWdmDataTable, currentL2EthTx15minElapsedTime=currentL2EthTx15minElapsedTime, ntpSrvConditionSeverityType=ntpSrvConditionSeverityType, inventoryCpEthUpFlowDataFacilities=inventoryCpEthUpFlowDataFacilities, deployProvCrsDcnDefaultsRowStatus=deployProvCrsDcnDefaultsRowStatus, tunnelOtnDataFromTid=tunnelOtnDataFromTid, controlPlaneOtnConfigCdbConfigFlag=controlPlaneOtnConfigCdbConfigFlag, currentOdu15minTable=currentOdu15minTable, fspR7MIB=fspR7MIB, intervalOduTcmA1dayNumber=intervalOduTcmA1dayNumber, FspR7NtpSyncStatus=FspR7NtpSyncStatus, fspUserManagementDefaultsInternalState=fspUserManagementDefaultsInternalState, syslogDataIp=syslogDataIp, alarmOosManagement=alarmOosManagement, intervalGfp15minTimeStamp=intervalGfp15minTimeStamp, fspUserManagementPrivilegeLevel=fspUserManagementPrivilegeLevel, opticalIfConfigCapUtag=opticalIfConfigCapUtag, changeServiceDeployProvIfSigDegThresSdhSection=changeServiceDeployProvIfSigDegThresSdhSection, vtpEntityDataChannelProvision=vtpEntityDataChannelProvision, FspR7FalseTrueCaps=FspR7FalseTrueCaps, interfaceConfigCapLoopConfig=interfaceConfigCapLoopConfig, changeServiceDeployProvIfTilt=changeServiceDeployProvIfTilt, deployProvLogicalCpIfExtAdvertised=deployProvLogicalCpIfExtAdvertised, transientThres1DayExceededSonetLineCV=transientThres1DayExceededSonetLineCV, deployProvPathElementWdmCapLifIp=deployProvPathElementWdmCapLifIp, f7STM64=f7STM64, deployProvModuleDispersionCompensation=deployProvModuleDispersionCompensation, thresholdPhysConvHighSpeedEntry=thresholdPhysConvHighSpeedEntry, logicalIfDataIpAddr=logicalIfDataIpAddr, currentOtuFec1dayExTable=currentOtuFec1dayExTable, deployProvTunnelWdmCapRestorationType=deployProvTunnelWdmCapRestorationType, deployProvIfIpType=deployProvIfIpType, currentL2EthRx1dayBytesFrames512Rcv=currentL2EthRx1dayBytesFrames512Rcv, currentPhysConvCombined15minTable=currentPhysConvCombined15minTable, moduleConfigOutputReset=moduleConfigOutputReset, currentPhysConvTxHighSpeed1dayESTX=currentPhysConvTxHighSpeed1dayESTX, intervalPhysPerfChromaticDispersion1weekHigh=intervalPhysPerfChromaticDispersion1weekHigh, ospfConfigMetric=ospfConfigMetric, ptpEntityDataChannelProvision=ptpEntityDataChannelProvision, FspR7NtpServerStatus=FspR7NtpServerStatus, deployProvLanDefaultsTable=deployProvLanDefaultsTable, opticalIfDiagLinkAttenuation=opticalIfDiagLinkAttenuation, deployProvPathElementOtnEntry=deployProvPathElementOtnEntry, controlPlaneEthConfigCdbConfigFlag=controlPlaneEthConfigCdbConfigFlag, intervalGfpt15minEntry=intervalGfpt15minEntry, authTrapSuccessfulAuthCount=authTrapSuccessfulAuthCount, farEndPlugConfigCapEntry=farEndPlugConfigCapEntry, opticalIfConfigSigDegPeriodOtu=opticalIfConfigSigDegPeriodOtu, connectionEthDataConnectionDirection=connectionEthDataConnectionDirection, intervalPhysPerfCurrent15minTimeStamp=intervalPhysPerfCurrent15minTimeStamp, thresholdGfpSublayerTypeHecDiscardedFramesHighThres15Min=thresholdGfpSublayerTypeHecDiscardedFramesHighThres15Min, intervalGfpfrSublayer15minTable=intervalGfpfrSublayer15minTable, deployProvTunnelWdmDefaultsRowStatus=deployProvTunnelWdmDefaultsRowStatus, controlPlaneEthConfigCtmConfigFlag=controlPlaneEthConfigCtmConfigFlag, FspR7SnmpPrivLevel=FspR7SnmpPrivLevel, deployProvExChannelCapPMDTransmit=deployProvExChannelCapPMDTransmit, deployProvModuleCapType=deployProvModuleCapType, opticalFilterIfDataTable=opticalFilterIfDataTable, deployProvTunnelOtnCapAlias=deployProvTunnelOtnCapAlias, deployProvPathElementOtnLifIp=deployProvPathElementOtnLifIp, deployProvConnNonStdCapToEndpointA=deployProvConnNonStdCapToEndpointA, deployProvLogicalCpIfDefaultsTeAreaId=deployProvLogicalCpIfDefaultsTeAreaId, inactiveRoutingIpMask=inactiveRoutingIpMask, deployProvControlPlaneWdmCapCtmRetryWaitMultiplier=deployProvControlPlaneWdmCapCtmRetryWaitMultiplier, currentSubAggregate1daySES=currentSubAggregate1daySES, deployProvDcnDefaultsEntry=deployProvDcnDefaultsEntry, intervalPhysPerfChromaticDispersion1weekValidFlag=intervalPhysPerfChromaticDispersion1weekValidFlag, deployProvPathElementWdmTie=deployProvPathElementWdmTie, alarmLossOfSignalCPort=alarmLossOfSignalCPort, deployProvLogicalIfDefaultsIpType=deployProvLogicalIfDefaultsIpType, inventoryCpEthCrsDownDataTable=inventoryCpEthCrsDownDataTable, transientCryptoKeyExchgFailCondClr=transientCryptoKeyExchgFailCondClr, deployProvControlPlaneWdmDefaultsTedbConfigFlag=deployProvControlPlaneWdmDefaultsTedbConfigFlag, deployProvIfAreaId=deployProvIfAreaId, intervalPhysPerfCurrent1dayTimeStamp=intervalPhysPerfCurrent1dayTimeStamp, intervalPhysPerfOscOpticalOutputPwr1dayHigh=intervalPhysPerfOscOpticalOutputPwr1dayHigh, farEndPlugConfigCapTable=farEndPlugConfigCapTable, logicalIfConfigAlias=logicalIfConfigAlias, changeServiceDeployProvIfCapBand=changeServiceDeployProvIfCapBand, transientEqlzRequestDenied=transientEqlzRequestDenied, deployProvTifInputCapEntry=deployProvTifInputCapEntry, changeServiceDeployProvIfTraceExpectedOduTcmA=changeServiceDeployProvIfTraceExpectedOduTcmA, inventoryCpOtnUpDataResources=inventoryCpOtnUpDataResources, currentEthTx1dayPauseFrames=currentEthTx1dayPauseFrames, intervalGfpfr1dayTimeStamp=intervalGfpfr1dayTimeStamp, intervalEthRx3HS15minBytesFrames64Rcv=intervalEthRx3HS15minBytesFrames64Rcv, deployProvLogicalCpIfDefaultsAlias=deployProvLogicalCpIfDefaultsAlias, ptpEntityDataFiber=ptpEntityDataFiber, alarmChromaticDispersionTooHigh=alarmChromaticDispersionTooHigh, deployProvPathElementOtnCapDownTributarySlot=deployProvPathElementOtnCapDownTributarySlot, changeServiceDeployProvIfCapTilt=changeServiceDeployProvIfCapTilt, deployProvExChannelAlias=deployProvExChannelAlias, deployProvTunnelWdmDefaultsSubLayer=deployProvTunnelWdmDefaultsSubLayer, connectionWdmDataFromNodeIp=connectionWdmDataFromNodeIp, thresholdOduESHighThres15min=thresholdOduESHighThres15min, intervalPhysPerfOscPwr1weekTimeStamp=intervalPhysPerfOscPwr1weekTimeStamp, logicalIfConfigMetric=logicalIfConfigMetric, deployProvVirtualOpticalChannelDefaultsEntry=deployProvVirtualOpticalChannelDefaultsEntry, deployProvLogicalIfCapMetric=deployProvLogicalIfCapMetric, deployProvPathElementOtnDefaultsDownTributaryODTUType=deployProvPathElementOtnDefaultsDownTributaryODTUType, deployProvTifOutputCapAdmin=deployProvTifOutputCapAdmin, f7eqpDcm=f7eqpDcm, deployProvTunnelWdmRestorationPaths=deployProvTunnelWdmRestorationPaths, eocDataMaxDataRate=eocDataMaxDataRate, deployProvControlPlaneOtnCapCtmConfigFlag=deployProvControlPlaneOtnCapCtmConfigFlag, pathOtnDataEntry=pathOtnDataEntry, intervalPhysPerfOscOpticalOutputPwr15minLow=intervalPhysPerfOscOpticalOutputPwr15minLow, fspUserManagementSecurityName=fspUserManagementSecurityName, deployProvDcnLanAidCapsIndex=deployProvDcnLanAidCapsIndex, deployProvLogicalIfDefaultsPushedFarEndIpHeader=deployProvLogicalIfDefaultsPushedFarEndIpHeader, deployProvLogicalCpIfTimeToLive=deployProvLogicalCpIfTimeToLive, FspR7L2CacEnable=FspR7L2CacEnable, deployProvPathElementOtnLogicalInterfaceId=deployProvPathElementOtnLogicalInterfaceId, intervalPhysConvTxHighSpeed15minEntry=intervalPhysConvTxHighSpeed15minEntry, authenticationNotification=authenticationNotification, alarmOosMaintenance=alarmOosMaintenance, connectionWdmDataTunnelType=connectionWdmDataTunnelType, teUnnumLinkEthDataNumber=teUnnumLinkEthDataNumber, moduleDataChannel=moduleDataChannel, deploymentProvisioningMIB=deploymentProvisioningMIB, deployProvTunnelEthCapCbsRcv=deployProvTunnelEthCapCbsRcv, deployProvDcnLanAidCapsEntry=deployProvDcnLanAidCapsEntry, neighborDiscoveryDataEntry=neighborDiscoveryDataEntry, currentSonetSect1dayEntry=currentSonetSect1dayEntry, forceDeployProvApsCapRowStatus=forceDeployProvApsCapRowStatus, currentEthRx1dayTable=currentEthRx1dayTable, farEndIfDataConnector=farEndIfDataConnector, deployProvVchChannelDefaultsForceDestroy=deployProvVchChannelDefaultsForceDestroy, teUnnumLinkOtnDataSynchronization=teUnnumLinkOtnDataSynchronization, deployProvIfCapTimModeOduTcmA=deployProvIfCapTimModeOduTcmA, deployProvControlPlaneEthCdbDetail=deployProvControlPlaneEthCdbDetail, currentL2EthTx15minBytesFrames256Trmt=currentL2EthTx15minBytesFrames256Trmt, deployProvControlPlaneOtnNaasAdvertWait=deployProvControlPlaneOtnNaasAdvertWait, deployProvPathElementOtnDefaultsUpTributarySlot=deployProvPathElementOtnDefaultsUpTributarySlot, deployProvLanMetric=deployProvLanMetric, changeServiceDeployProvIfDefaultsPayload=changeServiceDeployProvIfDefaultsPayload, deployProvControlPlaneOtnCapRmTraceDetail=deployProvControlPlaneOtnCapRmTraceDetail, currentSonetLine1dayUAS=currentSonetLine1dayUAS, crsConnDeployProvDefaultsRowStatus=crsConnDeployProvDefaultsRowStatus, currentPhysConvCombined1dayElapsedTime=currentPhysConvCombined1dayElapsedTime, deployProvTifOutputCapTable=deployProvTifOutputCapTable, deployProvIfDefaultsSigDegPeriodOduTcmA=deployProvIfDefaultsSigDegPeriodOduTcmA, controlPlaneWdmConfigRmConfigFlag=controlPlaneWdmConfigRmConfigFlag, FspR7SecurityModeCaps=FspR7SecurityModeCaps, intervalPhysConvTxHighSpeed15minSETX=intervalPhysConvTxHighSpeed15minSETX, forceDeployProvApsPeerAidCapsTable=forceDeployProvApsPeerAidCapsTable, intervalOduTcmB15minBbe=intervalOduTcmB15minBbe, tunnelWdmDataTunnelTemplate=tunnelWdmDataTunnelTemplate, changeServiceDeployProvIfDefaultsSigDegPeriodSdhSection=changeServiceDeployProvIfDefaultsSigDegPeriodSdhSection, deployProvIfCapXfpDecisionThres=deployProvIfCapXfpDecisionThres, apsProtFacilityConfigEntry=apsProtFacilityConfigEntry, transientCryptoAuthPasswdInvalid=transientCryptoAuthPasswdInvalid, crsConnDeployProvCapFrom=crsConnDeployProvCapFrom, currentEthRx15minCrcFrames=currentEthRx15minCrcFrames, intervalLatency15minNumber=intervalLatency15minNumber, deployProvTunnelEthPin=deployProvTunnelEthPin, controlPlaneEthConfigNaasMaxSize=controlPlaneEthConfigNaasMaxSize, neNtpStatusServer3=neNtpStatusServer3, intervalSonetHoPath1daySES=intervalSonetHoPath1daySES, thresholdPhysConvTxHighSpeedCVTXHighThres15min=thresholdPhysConvTxHighSpeedCVTXHighThres15min, thresholdPhysPerfCapUpperAtlinkThres=thresholdPhysPerfCapUpperAtlinkThres, intervalEthTx1dayNumber=intervalEthTx1dayNumber, intervalL2EthRx15minBytesFrames64Rcv=intervalL2EthRx15minBytesFrames64Rcv, deployProvCopyPathOtnSourcePathIndex=deployProvCopyPathOtnSourcePathIndex, deployProvControlPlaneWdmCapCdbConfigFlag=deployProvControlPlaneWdmCapCdbConfigFlag, controlPlaneEthConfigRaAlarmActivationTime=controlPlaneEthConfigRaAlarmActivationTime, logicalIfConfigEntry=logicalIfConfigEntry, inventoryCpOtnUpDataEntry=inventoryCpOtnUpDataEntry, controlPlaneEthConfigRmTraceDetail=controlPlaneEthConfigRmTraceDetail, connectionWdmDataRestorable=connectionWdmDataRestorable, moduleDataFanPorts=moduleDataFanPorts, changeServiceDeployProvIfCapTraceExpectedOdu=changeServiceDeployProvIfCapTraceExpectedOdu, controlPlaneWdmDataCdbAlias=controlPlaneWdmDataCdbAlias, deployProvControlPlaneWdmCapCdConfigFlag=deployProvControlPlaneWdmCapCdConfigFlag, controlPlaneEthConfigCmFisFrsTimeout=controlPlaneEthConfigCmFisFrsTimeout, intervalPhysPerfPumpPwr1dayNumber=intervalPhysPerfPumpPwr1dayNumber, opticalIfDataStuff=opticalIfDataStuff, lastErrorStatusCounter=lastErrorStatusCounter, vchConfigEntry=vchConfigEntry, wdmChannelModuleDataSuppClientPlugTypes=wdmChannelModuleDataSuppClientPlugTypes, intervalSonetHoPath15minCV=intervalSonetHoPath15minCV, deployProvPlugDefaultsLoopbackAttenuation=deployProvPlugDefaultsLoopbackAttenuation, deployProvModuleEntry=deployProvModuleEntry, intervalPhysPerfOlmRxLineAtt1dayTimeStamp=intervalPhysPerfOlmRxLineAtt1dayTimeStamp, deployProvPathEthCapEntry=deployProvPathEthCapEntry, intervalRoundTripDelay1weekTable=intervalRoundTripDelay1weekTable, deployProvPathElementEthCapTid=deployProvPathElementEthCapTid, eRoadmConfigCapInitiateEqualization=eRoadmConfigCapInitiateEqualization, deployProvVchChannelDefaultsTraceExpectedOdu=deployProvVchChannelDefaultsTraceExpectedOdu, opticalIfDataTable=opticalIfDataTable, opticalIfDiagOutputPower=opticalIfDiagOutputPower, deployProvIfTiltSet=deployProvIfTiltSet, deployProvControlPlaneOtnCtmConfigFlag=deployProvControlPlaneOtnCtmConfigFlag, deployProvPathElementEthDefaultsTable=deployProvPathElementEthDefaultsTable, f7Error=f7Error, deployProvCrsDcnLink=deployProvCrsDcnLink, connectionOtnDataActivationState=connectionOtnDataActivationState, interfaceDataTransmitChannel=interfaceDataTransmitChannel, changeServiceDeployProvIfTimModeOtu=changeServiceDeployProvIfTimModeOtu, intervalL2EthRx15minTimeStamp=intervalL2EthRx15minTimeStamp, controlPlaneOtnDataRsvpAlias=controlPlaneOtnDataRsvpAlias, FspR7OpticalBandCaps=FspR7OpticalBandCaps, deployProvIfDefaultsSigDegThreshold=deployProvIfDefaultsSigDegThreshold, alarmXfpDecisionThresSetFailed=alarmXfpDecisionThresSetFailed, ntpTimeZoneCapsEntry=ntpTimeZoneCapsEntry, deployProvControlPlaneWdmCapCtmMaximumRetryWait=deployProvControlPlaneWdmCapCtmMaximumRetryWait, entitiesToCloningEntity=entitiesToCloningEntity, FspR7TifOutputResetCaps=FspR7TifOutputResetCaps, currentSonetSect1dayElapsedTime=currentSonetSect1dayElapsedTime, intervalSonetLoPath1dayTable=intervalSonetLoPath1dayTable, pathEthDataPathId=pathEthDataPathId, deployProvLogicalCpIfLinkColor=deployProvLogicalCpIfLinkColor, FspR7PlugDataRate=FspR7PlugDataRate, neSwType=neSwType, transientThres1DayExceededPhysConvSETX=transientThres1DayExceededPhysConvSETX, deployProvIfFiberBrand=deployProvIfFiberBrand, controlPlaneOtnDataCtmAlias=controlPlaneOtnDataCtmAlias, changeServiceDeployProvIfDefaultsRowStatus=changeServiceDeployProvIfDefaultsRowStatus, deployProvControlPlaneWdmRsvpMaxExpRecoveryTime=deployProvControlPlaneWdmRsvpMaxExpRecoveryTime, deployProvVchChannelCapForceDestroy=deployProvVchChannelCapForceDestroy, currentConditionType=currentConditionType, thresholdPhysPerfCapConfigurableOpticalOutputPwrLow=thresholdPhysPerfCapConfigurableOpticalOutputPwrLow, deployProvControlPlaneWdmDefaultsTedbTraceDetail=deployProvControlPlaneWdmDefaultsTedbTraceDetail, alarmRemoteDefectIndicationHigherOrderPath=alarmRemoteDefectIndicationHigherOrderPath, deployProvModuleCapDCFiberType=deployProvModuleCapDCFiberType, logicalIfConfigTimeToLive=logicalIfConfigTimeToLive, currentOtuFec15minTable=currentOtuFec15minTable, f7eqpSfpe=f7eqpSfpe, tunnelWdmConfigOperateReversion=tunnelWdmConfigOperateReversion, intervalPhysPerfEstimatedSignalGain1weekLow=intervalPhysPerfEstimatedSignalGain1weekLow)
mibBuilder.exportSymbols("FspR7-MIB", alarmLossOfFrame=alarmLossOfFrame, deployProvControlPlaneWdmRmTraceTarget=deployProvControlPlaneWdmRmTraceTarget, deployProvIfTxOffDelay=deployProvIfTxOffDelay, intervalL2EthRx1dayBytesFrames65Rcv=intervalL2EthRx1dayBytesFrames65Rcv, FspR7CpEncapsulationCaps=FspR7CpEncapsulationCaps, inventoryCpEthDownFlowDataIndexEth=inventoryCpEthDownFlowDataIndexEth, deployProvShelfDefaultsType=deployProvShelfDefaultsType, intervalOtu15minTable=intervalOtu15minTable, deployProvControlPlaneWdmCdbDetail=deployProvControlPlaneWdmCdbDetail, FspR7AlsModeCaps=FspR7AlsModeCaps, wdmChannelModuleDataSuppNetworkPlugRates=wdmChannelModuleDataSuppNetworkPlugRates, deployProvVirtualOpticalChannelTable=deployProvVirtualOpticalChannelTable, syslogConfigTable=syslogConfigTable, alarmDispersionCompensationTooLow=alarmDispersionCompensationTooLow, moduleDataInternalPorts=moduleDataInternalPorts, deployProvTifOutputCapRowStatus=deployProvTifOutputCapRowStatus, intervalL2EthRx15minFramesRcv=intervalL2EthRx15minFramesRcv, opticalAmplifierInterfaceDiagnosticsAttenuation=opticalAmplifierInterfaceDiagnosticsAttenuation, deployProvIfCapTraceTransmitOpspOduTcmB=deployProvIfCapTraceTransmitOpspOduTcmB, FspR7DatabaseType=FspR7DatabaseType, deployProvVchChannelCapVcgType=deployProvVchChannelCapVcgType, deployProvPppIpDefaultsNearEndIp=deployProvPppIpDefaultsNearEndIp, shelfInfoStandardSlotHeight=shelfInfoStandardSlotHeight, deployProvVchChannelSigDegThresOdu=deployProvVchChannelSigDegThresOdu, thresholdOduTcmCTable=thresholdOduTcmCTable, deployProvIfCapMetric=deployProvIfCapMetric, deployProvShelfBand=deployProvShelfBand, changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmB=changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmB, deployProvControlPlaneWdmCapNaasAdvertWait=deployProvControlPlaneWdmCapNaasAdvertWait, deployProvControlPlaneWdmCapCtmTraceDetail=deployProvControlPlaneWdmCapCtmTraceDetail, deployProvIfSigDegThresOduTcmC=deployProvIfSigDegThresOduTcmC, alarmOpticalOutputPowerTransmittedTooHigh=alarmOpticalOutputPowerTransmittedTooHigh, thresholdSonetHoPathESHighThres1day=thresholdSonetHoPathESHighThres1day, deployProvControlPlaneEthCapTable=deployProvControlPlaneEthCapTable, deployProvPathEthCapTable=deployProvPathEthCapTable, crsConnConfigRedLineState=crsConnConfigRedLineState, changeServiceDeployProvIfDefaultsLanAid=changeServiceDeployProvIfDefaultsLanAid, deployProvPathElementEthCapTrafficEngineeringType=deployProvPathElementEthCapTrafficEngineeringType, intervalPhysPerfChromaticDispersion15minHigh=intervalPhysPerfChromaticDispersion15minHigh, deployProvIfCapTimModeOtu=deployProvIfCapTimModeOtu, authTrapUnsuccessfulAuthCount=authTrapUnsuccessfulAuthCount, deployProvModuleSingleFiberLocation=deployProvModuleSingleFiberLocation, deployProvPathWdmTable=deployProvPathWdmTable, intervalEthTx1dayCrcFramesEgress=intervalEthTx1dayCrcFramesEgress, intervalPhysPerfCurrent15minHigh=intervalPhysPerfCurrent15minHigh, deployProvModuleDefaultsDispersionCompensation=deployProvModuleDefaultsDispersionCompensation, deployProvModuleDefaultsChannel=deployProvModuleDefaultsChannel, nodeChannelTraceRouteType=nodeChannelTraceRouteType, currentOtu15minUAS=currentOtu15minUAS, deployProvLogicalCpIfDefaultsFendTeLinkIdUnn=deployProvLogicalCpIfDefaultsFendTeLinkIdUnn, deployProvVchChannelCapSigDegPeriodOdu=deployProvVchChannelCapSigDegPeriodOdu, deployProvTifOutputTable=deployProvTifOutputTable, gfpServiceDefBandwidth=gfpServiceDefBandwidth, FspR7OpticalMultiplexLevel=FspR7OpticalMultiplexLevel, tunnelOtnDataErrorIp=tunnelOtnDataErrorIp, deployProvIfOduTribTimeSlottNo=deployProvIfOduTribTimeSlottNo, areaAidCapTable=areaAidCapTable, forceDeployProvApsDefaultsWaitToRestore=forceDeployProvApsDefaultsWaitToRestore, currentEthRx3HS1dayBytesFrames1519Rcv=currentEthRx3HS1dayBytesFrames1519Rcv, deployProvLogicalCpIfDefaultsMetric=deployProvLogicalCpIfDefaultsMetric, dcnTopologyStatusEntry=dcnTopologyStatusEntry, changeServiceDeployProvIfPayload=changeServiceDeployProvIfPayload, deployProvControlPlaneWdmCapNaasConfigFlag=deployProvControlPlaneWdmCapNaasConfigFlag, tifiConfigTable=tifiConfigTable, deployProvIfDefaultsTributarySlotMethod=deployProvIfDefaultsTributarySlotMethod, deployProvLogicalIfDefaultsHelloInterval=deployProvLogicalIfDefaultsHelloInterval, deployProvIfDefaultsFiberBrand=deployProvIfDefaultsFiberBrand, changeServiceDeployProvIfPumpPower=changeServiceDeployProvIfPumpPower, deployProvLogicalCpIfMetric=deployProvLogicalCpIfMetric, deployProvControlPlaneOtnDefaultsRowStatus=deployProvControlPlaneOtnDefaultsRowStatus, farEndIfConfigEntry=farEndIfConfigEntry, deployProvModuleDefaultsSupply=deployProvModuleDefaultsSupply, intervalSonetSect15minSES=intervalSonetSect15minSES, intervalSonetHoPath1dayTable=intervalSonetHoPath1dayTable, intervalPmSnapshotValue=intervalPmSnapshotValue, currentPhysConv15minES=currentPhysConv15minES, intervalPhysPerfCurrent15minLow=intervalPhysPerfCurrent15minLow, intervalPhysPerfOlmRxLineAtt1weekNumber=intervalPhysPerfOlmRxLineAtt1weekNumber, controlPlaneOtnConfigCtmRetryWait=controlPlaneOtnConfigCtmRetryWait, shelfInfoClientPorts=shelfInfoClientPorts, thresholdPhysPerfOpticalOutputPwrHigh=thresholdPhysPerfOpticalOutputPwrHigh, deployProvModuleDefaultsLagSysPrio=deployProvModuleDefaultsLagSysPrio, logicalCpIfConfigAreaId=logicalCpIfConfigAreaId, intervalRoundTripDelay1dayEntry=intervalRoundTripDelay1dayEntry, changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmC=changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmC, thresholdSonetHoPathUASHighThres15min=thresholdSonetHoPathUASHighThres15min, f7SFP4G=f7SFP4G, thresholdOtuTable=thresholdOtuTable, deployProvTifInputCapAdmin=deployProvTifInputCapAdmin, deployProvIfCapTraceTransmitSapiOduTcmC=deployProvIfCapTraceTransmitSapiOduTcmC, vs0allocatedContainer=vs0allocatedContainer, crsConnDeployProvDefaultsAdmin=crsConnDeployProvDefaultsAdmin, FspR7CpOspfTeRouting=FspR7CpOspfTeRouting, logicalCpIfConfigCpType=logicalCpIfConfigCpType, intervalRoundTripDelay15minTimeStamp=intervalRoundTripDelay15minTimeStamp, FspR7PathNode=FspR7PathNode, currentOtu15minTable=currentOtu15minTable, FspR7InitEqualizationCaps=FspR7InitEqualizationCaps, pathElementWdmDataComputedOnsrForward=pathElementWdmDataComputedOnsrForward, intervalPhysPerfPumpPwr15minValidFlag=intervalPhysPerfPumpPwr15minValidFlag, inventoryCpEthUpFlowDataTable=inventoryCpEthUpFlowDataTable, intervalGfpfr15minTable=intervalGfpfr15minTable, alarmOpticalInputPowerReceiverFailure=alarmOpticalInputPowerReceiverFailure, intervalPhysPerfCurrent1weekNumber=intervalPhysPerfCurrent1weekNumber, opticalIfDataLagState=opticalIfDataLagState, teRouterDataTable=teRouterDataTable, deployProvTunnelWdmDefaultsRestorationMode=deployProvTunnelWdmDefaultsRestorationMode, transientForcedWorkingSwitchedBacktoProtection=transientForcedWorkingSwitchedBacktoProtection, shelfInfoEntry=shelfInfoEntry, deployProvControlPlaneEthDefaultsCtmTraceDetail=deployProvControlPlaneEthDefaultsCtmTraceDetail, knownHostDeletion=knownHostDeletion, deployProvCopyPathWdmDefaultsSourcePathIndex=deployProvCopyPathWdmDefaultsSourcePathIndex, deployProvIfPortMode=deployProvIfPortMode, intervalGfpt15minTimeStamp=intervalGfpt15minTimeStamp, FspR7SingleFiberLocationCaps=FspR7SingleFiberLocationCaps, teRouterDataNodeTid=teRouterDataNodeTid, inventoryCpOtnCrsUpDataNumber=inventoryCpOtnCrsUpDataNumber, intervalPhysPerfPumpPwr1weekLow=intervalPhysPerfPumpPwr1weekLow, changeServiceDeployProvIfCapTcmCLevel=changeServiceDeployProvIfCapTcmCLevel, logicalIfDataIpMaskMonitor=logicalIfDataIpMaskMonitor, inventoryCpEthUpFlowDataEntry=inventoryCpEthUpFlowDataEntry, deployProvIfCapTimModeOdu=deployProvIfCapTimModeOdu, controlPlaneOtnDataTable=controlPlaneOtnDataTable, deployProvTunnelWdmRestPathsNoProv=deployProvTunnelWdmRestPathsNoProv, changeServiceDeployProvIfIpMask=changeServiceDeployProvIfIpMask, changeServiceDeployProvIfDefaultsSigDegPeriodOtu=changeServiceDeployProvIfDefaultsSigDegPeriodOtu, moduleDataLanPorts=moduleDataLanPorts, deployProvLogicalCpIfDefaultsPrio=deployProvLogicalCpIfDefaultsPrio, deployProvTunnelWdmDefaultsReversionType=deployProvTunnelWdmDefaultsReversionType, deployProvLogicalIfDefaultsTable=deployProvLogicalIfDefaultsTable, tunnelEthDataFromNodeIP=tunnelEthDataFromNodeIP, alarmThres15MinExceededOtuBbe=alarmThres15MinExceededOtuBbe, transientCopyFileTransferStart=transientCopyFileTransferStart, deployProvControlPlaneWdmDefaultsRaAlarmActivationTime=deployProvControlPlaneWdmDefaultsRaAlarmActivationTime, deployProvLogicalCpIfDefaultsNendTeLinkIdNum=deployProvLogicalCpIfDefaultsNendTeLinkIdNum, currentEthRxHighSpeed15minEntry=currentEthRxHighSpeed15minEntry, deployProvPathElementOtnCapTie=deployProvPathElementOtnCapTie, deployProvControlPlaneOtnCdResyncTimeout=deployProvControlPlaneOtnCdResyncTimeout, opticalLinkConfigEntry=opticalLinkConfigEntry, changeServiceDeployProvIfBip=changeServiceDeployProvIfBip, deployProvModuleDefaultsCapabilityLevel=deployProvModuleDefaultsCapabilityLevel, intraNeConnectionsType=intraNeConnectionsType, thresholdOtuUASHighThres15min=thresholdOtuUASHighThres15min, f7Modules=f7Modules, intervalFarEndPhysPerfOpticalOutputPwr1dayNumber=intervalFarEndPhysPerfOpticalOutputPwr1dayNumber, currentPhysConvTxHighSpeed1dayElapsedTime=currentPhysConvTxHighSpeed1dayElapsedTime, inventoryCpEthCrsDownDataIndexEthFrom=inventoryCpEthCrsDownDataIndexEthFrom, changeServiceDeployProvIfDispersionMode=changeServiceDeployProvIfDispersionMode, connectionWdmDataTunnelScope=connectionWdmDataTunnelScope, deployProvVchChannelDefaultsSigDegPeriodOdu=deployProvVchChannelDefaultsSigDegPeriodOdu, changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmA=changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmA, alarmHighBer=alarmHighBer, currentDiagnosticsEntry=currentDiagnosticsEntry, sts48callocatedSequenceNumber=sts48callocatedSequenceNumber, intervalPhysPerfEstimatedSignalGain15minLow=intervalPhysPerfEstimatedSignalGain15minLow, FspR7OpticalSubBandCaps=FspR7OpticalSubBandCaps, intervalPhysPerfSignalToNoiseRatio1weekMean=intervalPhysPerfSignalToNoiseRatio1weekMean, deployProvVirtualOpticalChannelAlias=deployProvVirtualOpticalChannelAlias, deployProvIfOscOpticalSetpoint=deployProvIfOscOpticalSetpoint, deployProvIfLagPrio=deployProvIfLagPrio, changeServiceDeployProvIfCapSigDegPeriodOduTcmC=changeServiceDeployProvIfCapSigDegPeriodOduTcmC, crsConnDeployProvDefaultsTunnelAid=crsConnDeployProvDefaultsTunnelAid, alarmDifferentialGroupDelayTooHigh=alarmDifferentialGroupDelayTooHigh, deployProvShelfDefaultsSupply=deployProvShelfDefaultsSupply, interfaceDataFacilityType=interfaceDataFacilityType, deployProvPlugThirdPartyUsage=deployProvPlugThirdPartyUsage, teNumLinkWdmDataFendNodeIp=teNumLinkWdmDataFendNodeIp, startPmSnapshot=startPmSnapshot, ptpEntityDataTable=ptpEntityDataTable, currentEthRxHighSpeed15minCrcFrames=currentEthRxHighSpeed15minCrcFrames, intervalPhysPerfEstimatedSignalGain15minTimeStamp=intervalPhysPerfEstimatedSignalGain15minTimeStamp, deployProvLanTable=deployProvLanTable, shelfInfoTable=shelfInfoTable, intervalSubAggregate1daySES=intervalSubAggregate1daySES, deployProvVchChannelCapBundle=deployProvVchChannelCapBundle, deployProvControlPlaneOtnCtmShutdownTimeout=deployProvControlPlaneOtnCtmShutdownTimeout, opticalIfConfigFarEndCommunication=opticalIfConfigFarEndCommunication, FspR7Stages=FspR7Stages, intervalSonetHoPath1dayTimeStamp=intervalSonetHoPath1dayTimeStamp, deployProvControlPlaneWdmCtmMaximumRetryWait=deployProvControlPlaneWdmCtmMaximumRetryWait, intervalGfpfrSublayer15minValidFlag=intervalGfpfrSublayer15minValidFlag, opticalLinkConfigTxLineAttenuation=opticalLinkConfigTxLineAttenuation, deployProvPathElementWdmRowStatus=deployProvPathElementWdmRowStatus, crsConnWdmConfigTable=crsConnWdmConfigTable, intervalPhysPerfCurrent15minEntry=intervalPhysPerfCurrent15minEntry, intervalPhysConvHighSpeed15minSE=intervalPhysConvHighSpeed15minSE, f7OTU1=f7OTU1, alarmTransmitterDisabledEpc=alarmTransmitterDisabledEpc, intervalEthRx3HS15minFragmentFramesRcv=intervalEthRx3HS15minFragmentFramesRcv, intervalSonetHoPath1dayUAS=intervalSonetHoPath1dayUAS, neNtpStatusServer1=neNtpStatusServer1, deployProvControlPlaneWdmCapRmTraceTarget=deployProvControlPlaneWdmCapRmTraceTarget, thresholdPhysPerfConfigurableOpticalOutputPwrLow=thresholdPhysPerfConfigurableOpticalOutputPwrLow, transientThres1DayExceededPhysConvCVTX=transientThres1DayExceededPhysConvCVTX, tunnelOtnDataCbsTrmt=tunnelOtnDataCbsTrmt, intervalPhysPerfBackreflectionPwrRcv1weekValidFlag=intervalPhysPerfBackreflectionPwrRcv1weekValidFlag, deployProvPathElementWdmUpstreamModuleAid=deployProvPathElementWdmUpstreamModuleAid, intervalFarEndPhysPerfOpticalOutputPwr1dayTimeStamp=intervalFarEndPhysPerfOpticalOutputPwr1dayTimeStamp, transientLocalCopyMemFailCrcErr=transientLocalCopyMemFailCrcErr, intervalPhysPerfCurrentOscGain1dayEntry=intervalPhysPerfCurrentOscGain1dayEntry, deployProvPathElementOtnDefaultsDownTributaryTSMethod=deployProvPathElementOtnDefaultsDownTributaryTSMethod, alarmAutoShutdownSendingLckOdu=alarmAutoShutdownSendingLckOdu, alarmOosPrePostSigEstablishFailed=alarmOosPrePostSigEstablishFailed, deployProvLogicalCpIfDefaultsFacilityType=deployProvLogicalCpIfDefaultsFacilityType, deployProvSyslogEntry=deployProvSyslogEntry, ntpSrvCurrentConditionAffect=ntpSrvCurrentConditionAffect, currentPhysConv15minTable=currentPhysConv15minTable, deployProvControlPlaneOtnCtmRetryWaitMultiplier=deployProvControlPlaneOtnCtmRetryWaitMultiplier, intervalL2EthTx1dayBytesFrames1024Trmt=intervalL2EthTx1dayBytesFrames1024Trmt, deployProvExChannelChromaticDispersionTx=deployProvExChannelChromaticDispersionTx, deployProvIfDefaultsAprHighThreshold=deployProvIfDefaultsAprHighThreshold, controlPlaneEthDataTable=controlPlaneEthDataTable, intervalPhysPerfBackreflectionPwrRcv1weekMean=intervalPhysPerfBackreflectionPwrRcv1weekMean, opticalIfDiagChromaticDispersion=opticalIfDiagChromaticDispersion, deployProvTunnelEthDefaultsEntry=deployProvTunnelEthDefaultsEntry, deployProvControlPlaneWdmCapCtmMaximumRetryNumber=deployProvControlPlaneWdmCapCtmMaximumRetryNumber, deployProvDcnCapEntry=deployProvDcnCapEntry, intervalRoundTripDelay15minTable=intervalRoundTripDelay15minTable, tunnelWdmDataReversionState=tunnelWdmDataReversionState, intervalFarEndPhysPerfOpticalInputPwr1dayValidFlag=intervalFarEndPhysPerfOpticalInputPwr1dayValidFlag, vc4allocatedClassInstanceNumber=vc4allocatedClassInstanceNumber, controlPlaneEthConfigNaasAdvertWait=controlPlaneEthConfigNaasAdvertWait, pathElementWdmDataNodeIp=pathElementWdmDataNodeIp, opticalIfConfigOpuPayloadType=opticalIfConfigOpuPayloadType, currentOtu1dayUAS=currentOtu1dayUAS, transientPmSnapshotEnded=transientPmSnapshotEnded, deployProvPathOtnCapEntry=deployProvPathOtnCapEntry, currentOtu1dayBbe=currentOtu1dayBbe, systemBusy=systemBusy, moduleConfigCapEntry=moduleConfigCapEntry, deployProvTifInputTable=deployProvTifInputTable, deployProvIfForceDestroy=deployProvIfForceDestroy, deployProvPortBindingDefaultsRowStatus=deployProvPortBindingDefaultsRowStatus, tunnelEthDataLayer=tunnelEthDataLayer, deployProvTunnelEthCapTunnelScope=deployProvTunnelEthCapTunnelScope, changeServiceDeployProvIfTraceExpectedOduTcmB=changeServiceDeployProvIfTraceExpectedOduTcmB, FspR7TurnupConfigCaps=FspR7TurnupConfigCaps, dcnTopologyDataEntry=dcnTopologyDataEntry, tunnelEthDataToNodeIp=tunnelEthDataToNodeIp, remoteAlarmCpDataEntry=remoteAlarmCpDataEntry, deployProvShelfCapRowStatus=deployProvShelfCapRowStatus, intervalLatency1dayNumber=intervalLatency1dayNumber, logicalCpIfDataLogicalInterfaceId=logicalCpIfDataLogicalInterfaceId, FspR7AidType=FspR7AidType, intervalPhysPerfBackreflectionPwrRcv15minValidFlag=intervalPhysPerfBackreflectionPwrRcv15minValidFlag, intervalPhysPerfOscPwr15minHigh=intervalPhysPerfOscPwr15minHigh, fspUserManagementDefaultsPrivilegeLevel=fspUserManagementDefaultsPrivilegeLevel, deployProvTunnelWdmCapReversionType=deployProvTunnelWdmCapReversionType, deployProvIfDefaultsAttenuationGradient=deployProvIfDefaultsAttenuationGradient, syslogConfigReportsStatus=syslogConfigReportsStatus, thresholdOduTcmBOduTcmBBbeHighThres15min=thresholdOduTcmBOduTcmBBbeHighThres15min, deployProvIfCapStagType=deployProvIfCapStagType, changeServiceDeployProvIfDefaultsTcmBLevel=changeServiceDeployProvIfDefaultsTcmBLevel, currentOtuFec15minElapsedTime=currentOtuFec15minElapsedTime)
mibBuilder.exportSymbols("FspR7-MIB", intervalFarEndPhysPerfOpticalOutputPwr1weekEntry=intervalFarEndPhysPerfOpticalOutputPwr1weekEntry, logicalCpIfDataFarEndTid=logicalCpIfDataFarEndTid, teUnnumLinkWdmDataFendNodeIp=teUnnumLinkWdmDataFendNodeIp, deployProvShelfCapAdmin=deployProvShelfCapAdmin, intervalPhysPerfChromaticDispersion1dayHigh=intervalPhysPerfChromaticDispersion1dayHigh, pmSnapshotStatus=pmSnapshotStatus, deployProvLogicalCpIfCapFendDataLinkId=deployProvLogicalCpIfCapFendDataLinkId, intervalSonetLoPath15minEntry=intervalSonetLoPath15minEntry, intervalLinkAttenuation1weekHigh=intervalLinkAttenuation1weekHigh, deployProvExChannelCapMaxBitErrorRate=deployProvExChannelCapMaxBitErrorRate, alarmServerSignalFailureSectionRS=alarmServerSignalFailureSectionRS, FspR7DispersionModesCaps=FspR7DispersionModesCaps, ptpEntityDataFrequency=ptpEntityDataFrequency, intervalFarEndPhysPerfOpticalInputPwr1weekEntry=intervalFarEndPhysPerfOpticalInputPwr1weekEntry, deployProvIfDefaultsAutoPTassignment=deployProvIfDefaultsAutoPTassignment, intervalRoundTripDelay15minValidFlag=intervalRoundTripDelay15minValidFlag, intervalPhysPerfChromaticDispersion15minEntry=intervalPhysPerfChromaticDispersion15minEntry, deployProvExChannelCapEntry=deployProvExChannelCapEntry, intervalPhysPerfOlmTxLineAtt15minNumber=intervalPhysPerfOlmTxLineAtt15minNumber, thresholdOduSESHighThres15min=thresholdOduSESHighThres15min, alarmDisabledChannelPowerTooHigh=alarmDisabledChannelPowerTooHigh, deployProvLogicalCpIfDefaultsLayer=deployProvLogicalCpIfDefaultsLayer, currentOtuFec15minEntry=currentOtuFec15minEntry, deployProvControlPlaneWdmDefaultsCdTraceDetail=deployProvControlPlaneWdmDefaultsCdTraceDetail, intervalPhysPerfOscPwr1dayHigh=intervalPhysPerfOscPwr1dayHigh, deployProvDcnCapTable=deployProvDcnCapTable, changeServiceDeployProvIfDefaultsSigDegThresSonetLine=changeServiceDeployProvIfDefaultsSigDegThresSonetLine, exChannelDataChannelBandwidth=exChannelDataChannelBandwidth, deployProvIfDefaultsTraceTransmitOpspOdu=deployProvIfDefaultsTraceTransmitOpspOdu, intervalSonetLoPath1dayNumber=intervalSonetLoPath1dayNumber, deployProvExChannelCapLineCoding=deployProvExChannelCapLineCoding, transientLocalCopyMemFail=transientLocalCopyMemFail, crsConnDeployProvCapTo=crsConnDeployProvCapTo, FspR7ConnectorType=FspR7ConnectorType, teNumLinkWdmDataSynchronization=teNumLinkWdmDataSynchronization, deployProvLogicalCpIfCapTimeToLive=deployProvLogicalCpIfCapTimeToLive, controlPlaneWdmConfigCmAlarmActivationTime=controlPlaneWdmConfigCmAlarmActivationTime, FspR7SysType=FspR7SysType, alarmThres15MinExceededPhysConvESTX=alarmThres15MinExceededPhysConvESTX, changeServiceDeployProvIfCapLaserOffDelayFunction=changeServiceDeployProvIfCapLaserOffDelayFunction, intervalEthRx1dayTable=intervalEthRx1dayTable, deployProvLogicalIfIpAddrMask=deployProvLogicalIfIpAddrMask, intervalPhysPerfOscPwr15minTimeStamp=intervalPhysPerfOscPwr15minTimeStamp, deployProvVchChannelAdmin=deployProvVchChannelAdmin, deployProvPortBindingDefaultsRemoteTnaMask=deployProvPortBindingDefaultsRemoteTnaMask, alarmThres15MinExceededSonetSectCV=alarmThres15MinExceededSonetSectCV, logicalCpIfDataEncoding=logicalCpIfDataEncoding, deployProvControlPlaneWdmDefaultsRsvpMaxExpRecoveryTime=deployProvControlPlaneWdmDefaultsRsvpMaxExpRecoveryTime, crsConnWdmConfigAlias=crsConnWdmConfigAlias, deployProvControlPlaneEthCapCdbMaxSize=deployProvControlPlaneEthCapCdbMaxSize, apsProtGroupStatusApsType=apsProtGroupStatusApsType, inactiveRoutingIpDestination=inactiveRoutingIpDestination, intervalSonetLoPath15minTimeStamp=intervalSonetLoPath15minTimeStamp, gfpServiceDefEntry=gfpServiceDefEntry, teUnnumLinkOtnDataNodeIp=teUnnumLinkOtnDataNodeIp, alarmLaserEndOfLife=alarmLaserEndOfLife, ntpServerEntry=ntpServerEntry, deployProvPathElementOtnCapNodeIp=deployProvPathElementOtnCapNodeIp, alarmAutoShutdownSendingOciOdu=alarmAutoShutdownSendingOciOdu, changeServiceDeployProvIfDefaultsTimModeOdu=changeServiceDeployProvIfDefaultsTimModeOdu, tunnelOtnDataCirTrmt=tunnelOtnDataCirTrmt, deployProvControlPlaneEthTedbConfigFlag=deployProvControlPlaneEthTedbConfigFlag, f7eqpWcelsc=f7eqpWcelsc, exChannelConfigChromaticDispersionRcv=exChannelConfigChromaticDispersionRcv, deployProvLogicalIfDefaultsPushedNendIpHeader=deployProvLogicalIfDefaultsPushedNendIpHeader, vtpEntityDataFiber=vtpEntityDataFiber, opticalIfConfigSigDegThresOtu=opticalIfConfigSigDegThresOtu, pppfConfigBitrate=pppfConfigBitrate, inventoryCpEthCrsDownDataIndexFlowFrom=inventoryCpEthCrsDownDataIndexFlowFrom, FspR7AseTabOpr=FspR7AseTabOpr, interfaceDataRevertiveMode=interfaceDataRevertiveMode, alarmAutoShutdownSendingAisOpu=alarmAutoShutdownSendingAisOpu, controlPlaneEthConfigCtmShutdownTimeout=controlPlaneEthConfigCtmShutdownTimeout, virtualOpticalChannelDataEntry=virtualOpticalChannelDataEntry, alarmSignalDegradeOlm=alarmSignalDegradeOlm, f7eqpOscm2n=f7eqpOscm2n, alarmPayloadMismatchHigherOrderPath=alarmPayloadMismatchHigherOrderPath, FspR7XfpDecisionThresCaps=FspR7XfpDecisionThresCaps, thresholdPhysPerfCapAttTxLow=thresholdPhysPerfCapAttTxLow, connectionWdmDataDestinationTna=connectionWdmDataDestinationTna, deployProvPortBindingRemoteScPc=deployProvPortBindingRemoteScPc, logicalCpIfDataTable=logicalCpIfDataTable, alarmRamanPumpPwrTooLow=alarmRamanPumpPwrTooLow, eRoadmDataTable=eRoadmDataTable, intervalPhysPerfDiffGrDelay15minHigh=intervalPhysPerfDiffGrDelay15minHigh, intervalPhysConv1dayES=intervalPhysConv1dayES, deployProvPlugReach=deployProvPlugReach, deployProvLogicalIfCapIpType=deployProvLogicalIfCapIpType, opticalIfConfigSigDegThresSdhSection=opticalIfConfigSigDegThresSdhSection, intervalPhysPerfOpticalOutputPwr1weekValidFlag=intervalPhysPerfOpticalOutputPwr1weekValidFlag, intervalPhysPerfCurrent1dayValidFlag=intervalPhysPerfCurrent1dayValidFlag, intervalPhysPerfCurrent1weekTimeStamp=intervalPhysPerfCurrent1weekTimeStamp, deployProvModuleDefaultsPsuOutputPower=deployProvModuleDefaultsPsuOutputPower, thresholdOduUASHighThres15min=thresholdOduUASHighThres15min, alarmMaxPowerConsEquipModulesToHigh=alarmMaxPowerConsEquipModulesToHigh, FspR7ChannelIdentifier=FspR7ChannelIdentifier, alarmThres15MinExceededSonetLineSES=alarmThres15MinExceededSonetLineSES, intervalEthRx3HS15minCrcFrames=intervalEthRx3HS15minCrcFrames, alarmFuseAlarm1=alarmFuseAlarm1, deployProvControlPlaneOtnCapTedbRouterId=deployProvControlPlaneOtnCapTedbRouterId, thresholdPhysPerfAttTxLow=thresholdPhysPerfAttTxLow, transientCryptoPasswdChanged=transientCryptoPasswdChanged, ntpServerSyncStatus=ntpServerSyncStatus, connectionEthDataTunnelType=connectionEthDataTunnelType, thresholdPhysConvTxHighSpeedSETXHighThres15min=thresholdPhysConvTxHighSpeedSETXHighThres15min, crsConnDeployProvDefaultsTo=crsConnDeployProvDefaultsTo, intervalFarEndPhysPerfOpticalInputPwr15minEntry=intervalFarEndPhysPerfOpticalInputPwr15minEntry, currentOtuFec1dayCE=currentOtuFec1dayCE, alarmSwitchtoWorkingInhibited=alarmSwitchtoWorkingInhibited, thresholdOduSESHighThres1day=thresholdOduSESHighThres1day, deployProvTunnelWdmFacilityType=deployProvTunnelWdmFacilityType, deployProvPppIpDefaultsAreaId=deployProvPppIpDefaultsAreaId, ospfConfigEntry=ospfConfigEntry, deployProvControlPlaneEthDefaultsCmFisFrsTimeout=deployProvControlPlaneEthDefaultsCmFisFrsTimeout, intervalL2EthTx15minBroadcastFramesTrmt=intervalL2EthTx15minBroadcastFramesTrmt, deployProvTunnelWdmCapTunnelTemplate=deployProvTunnelWdmCapTunnelTemplate, currentOduTcmC15minBbe=currentOduTcmC15minBbe, alarmPowerMissing=alarmPowerMissing, alarmLossofAlignmentVCG=alarmLossofAlignmentVCG, deployProvTunnelWdmCapStuff=deployProvTunnelWdmCapStuff, deployProvModuleCapSubBand=deployProvModuleCapSubBand, deployProvIfCapTraceTransmitDapiOduTcmC=deployProvIfCapTraceTransmitDapiOduTcmC, controlPlaneEthDataEntry=controlPlaneEthDataEntry, deployProvModuleDefaultsFiber=deployProvModuleDefaultsFiber, intervalDispersionCompensation1weekValidFlag=intervalDispersionCompensation1weekValidFlag, changeServiceDeployProvIfDefaultsSigDegPeriodOdu=changeServiceDeployProvIfDefaultsSigDegPeriodOdu, tunnelEthDataTable=tunnelEthDataTable, controlPlaneOtnConfigRaTraceDetail=controlPlaneOtnConfigRaTraceDetail, wdmChannelModuleDataEntry=wdmChannelModuleDataEntry, deployProvCopyPathOtnCapPathId=deployProvCopyPathOtnCapPathId, logicalCpIfDataFarEndNodeIpMonitor=logicalCpIfDataFarEndNodeIpMonitor, intervalSubAggregate1dayNumber=intervalSubAggregate1dayNumber, intervalL2EthTx1dayBroadcastFramesTrmt=intervalL2EthTx1dayBroadcastFramesTrmt, deployProvLanCapAreaId=deployProvLanCapAreaId, intervalOtu1dayES=intervalOtu1dayES, commonConfigAndStatus=commonConfigAndStatus, intervalFarEndPhysPerfOpticalOutputPwr1dayLow=intervalFarEndPhysPerfOpticalOutputPwr1dayLow, alarmThres15MinExceededPhysConvCVDE=alarmThres15MinExceededPhysConvCVDE, intervalGfpt1dayTable=intervalGfpt1dayTable, conditionSeverityType=conditionSeverityType, transientEqlzProcessPassed=transientEqlzProcessPassed, virtualOpticalChannelConfigAlias=virtualOpticalChannelConfigAlias, deployProvIfCapTraceTransmitDapiOduTcmA=deployProvIfCapTraceTransmitDapiOduTcmA, remoteAlarmCpDataNodeIp=remoteAlarmCpDataNodeIp, alarmAutoShutdownLaserOffDueToHighTemp=alarmAutoShutdownLaserOffDueToHighTemp, deployProvPlugCapType=deployProvPlugCapType, alarmPumpLaser2TempTooHigh=alarmPumpLaser2TempTooHigh, deployProvControlPlaneEthCapCtmConfigFlag=deployProvControlPlaneEthCapCtmConfigFlag, deployProvControlPlaneEthRsvpConfigFlag=deployProvControlPlaneEthRsvpConfigFlag, deployProvControlPlaneEthDefaultsCtmMaximumRetryWait=deployProvControlPlaneEthDefaultsCtmMaximumRetryWait, intervalGfpfrSublayer1dayTable=intervalGfpfrSublayer1dayTable, deployProvLogicalIfCapRetransmitInterval=deployProvLogicalIfCapRetransmitInterval, alarmFacilityForcedOn=alarmFacilityForcedOn, intervalPhysPerfCurrent1weekTable=intervalPhysPerfCurrent1weekTable, connectionWdmDataRole=connectionWdmDataRole, intervalEthRx3HS1dayTable=intervalEthRx3HS1dayTable, deployProvLogicalCpIfDefaultsVNodeIp=deployProvLogicalCpIfDefaultsVNodeIp, deployProvLogicalIfPushedNendIpHeader=deployProvLogicalIfPushedNendIpHeader, farEndPlugDiagnosticsUpperTempThres=farEndPlugDiagnosticsUpperTempThres, deployProvIfFarEndCommunication=deployProvIfFarEndCommunication, FspR7LagLoadBallanceSource=FspR7LagLoadBallanceSource, inventoryCpOtnUpDataNumber=inventoryCpOtnUpDataNumber, alarmDcnCommunicationFail=alarmDcnCommunicationFail, intervalPhysPerfSignalToNoiseRatio1dayEntry=intervalPhysPerfSignalToNoiseRatio1dayEntry, intraNeConnectionsEndpointA=intraNeConnectionsEndpointA, currentL2EthTx15minEntry=currentL2EthTx15minEntry, currentPhysConvTxHighSpeed15minESTX=currentPhysConvTxHighSpeed15minESTX, FspR7MappingCaps=FspR7MappingCaps, thresholdPhysPerfCapChromaticDispersionLow=thresholdPhysPerfCapChromaticDispersionLow, interfaceConfigLanAidCapsEntry=interfaceConfigLanAidCapsEntry, intervalPhysConv15minES=intervalPhysConv15minES, deployProvControlPlaneEthCtmRetryWait=deployProvControlPlaneEthCtmRetryWait, currentOduTcmA15minUAS=currentOduTcmA15minUAS, deployProvControlPlaneWdmDefaultsCmFisFrsTimeout=deployProvControlPlaneWdmDefaultsCmFisFrsTimeout, opticalIfConfigTilt=opticalIfConfigTilt, deployProvOpticalLinkDefaultsEntry=deployProvOpticalLinkDefaultsEntry, FspR7CpErrorCategory=FspR7CpErrorCategory, deployProvModuleForceDestroy=deployProvModuleForceDestroy, deployProvIfCapFarEndCommunication=deployProvIfCapFarEndCommunication, deployProvOpticalLinkCapRxLineAttenuation=deployProvOpticalLinkCapRxLineAttenuation, deployProvIfDefaultsTraceTransmitDapiOduTcmB=deployProvIfDefaultsTraceTransmitDapiOduTcmB, currentGfpSublayer1dayTypeHecCorrectedFrames=currentGfpSublayer1dayTypeHecCorrectedFrames, intervalLatency15minLow=intervalLatency15minLow, deployProvModuleCapEqlzAdmin=deployProvModuleCapEqlzAdmin, deployProvControlPlaneEthCmCrankBackTimeout=deployProvControlPlaneEthCmCrankBackTimeout, thresholdIntrusionTable=thresholdIntrusionTable, FspR7Model=FspR7Model, deployProvApsDefaultsSignalDegradeSwitching=deployProvApsDefaultsSignalDegradeSwitching, deployProvModuleCapTilt=deployProvModuleCapTilt, intervalGfp15minTypeHecDiscardedFrames=intervalGfp15minTypeHecDiscardedFrames, deployProvPppIpDefaultsType=deployProvPppIpDefaultsType, opticalIfDataCirRcv=opticalIfDataCirRcv, deployProvIfDefaultsSigDegPeriodOduTcmB=deployProvIfDefaultsSigDegPeriodOduTcmB, changeServiceDeployProvIfTraceTransmitSapiOtu=changeServiceDeployProvIfTraceTransmitSapiOtu, intervalPhysPerfOlmTxLineAtt1weekTimeStamp=intervalPhysPerfOlmTxLineAtt1weekTimeStamp, connectionWdmDataActivationState=connectionWdmDataActivationState, opticalIfConfigCapAseTabCreation=opticalIfConfigCapAseTabCreation, alarmTraceIdentifierMismatchOdu=alarmTraceIdentifierMismatchOdu, deployProvPathElementOtnTie=deployProvPathElementOtnTie, tunnelEthDataToAid=tunnelEthDataToAid, deployProvControlPlaneWdmRaTraceDetail=deployProvControlPlaneWdmRaTraceDetail, deployProvIfDefaultsDispersionMode=deployProvIfDefaultsDispersionMode, deployProvTunnelWdmTunnelNo=deployProvTunnelWdmTunnelNo, crsConnWdmUnusedFromPointsAidValueFromPoint=crsConnWdmUnusedFromPointsAidValueFromPoint, intervalL2EthRx1dayMulticastFramesRcv=intervalL2EthRx1dayMulticastFramesRcv, transientThres1DayExceededOtuES=transientThres1DayExceededOtuES, entityStateTable=entityStateTable, connectionWdmDataTerminationLevel=connectionWdmDataTerminationLevel, deployProvApsPeerAidCapsEntry=deployProvApsPeerAidCapsEntry, deployProvModuleBand=deployProvModuleBand, intervalSonetLine15minValidFlag=intervalSonetLine15minValidFlag, crsConnDeployProvCapType=crsConnDeployProvCapType, controlPlaneEthConfigCdConfigFlag=controlPlaneEthConfigCdConfigFlag, connectionOtnDataEntry=connectionOtnDataEntry, deployProvLogicalIfDefaultsFacilityType=deployProvLogicalIfDefaultsFacilityType, tunnelWdmConfigSubLayerEncoding=tunnelWdmConfigSubLayerEncoding, deployProvVchChannelVcgType=deployProvVchChannelVcgType, alarmEncryptionPortEncryptionSwitchOffEnabled=alarmEncryptionPortEncryptionSwitchOffEnabled, deployProvTifOutputCapType=deployProvTifOutputCapType, thresholdPhysConvTxHighSpeedCVTXHighThres1day=thresholdPhysConvTxHighSpeedCVTXHighThres1day, f7eqp4tca1g3d=f7eqp4tca1g3d, deployProvPathElementWdmCapUpstreamModuleAid=deployProvPathElementWdmCapUpstreamModuleAid, thresholdSonetLineMsESHighThres15min=thresholdSonetLineMsESHighThres15min, FspR7BERThresholdSection=FspR7BERThresholdSection, neNtpServer3=neNtpServer3, tunnelWdmDataRestPathsNoAvail=tunnelWdmDataRestPathsNoAvail, deployProvIfSigDegPeriodOduTcmB=deployProvIfSigDegPeriodOduTcmB, deployProvApsDefaultsRevertMode=deployProvApsDefaultsRevertMode, deployProvModuleChannelsProvision=deployProvModuleChannelsProvision, deployProvModuleDefaultsGroup=deployProvModuleDefaultsGroup, FspR7AdminStateCaps=FspR7AdminStateCaps, deployProvControlPlaneEthNaasConfigFlag=deployProvControlPlaneEthNaasConfigFlag, deployProvIfDefaultsDispersionSetting=deployProvIfDefaultsDispersionSetting, intervalOduTcmC15minTimeStamp=intervalOduTcmC15minTimeStamp, intervalL2EthTx1dayBytesFrames512Trmt=intervalL2EthTx1dayBytesFrames512Trmt, ntpSrvCreation=ntpSrvCreation, deployProvControlPlaneWdmCapCmTraceDetail=deployProvControlPlaneWdmCapCmTraceDetail, intervalLinkAttenuation15minNumber=intervalLinkAttenuation15minNumber, connectionOtnDataSourceTna=connectionOtnDataSourceTna, deployProvLogicalIfDefaultsDcnAid=deployProvLogicalIfDefaultsDcnAid, teNumLinkEthDataPhysicalLink=teNumLinkEthDataPhysicalLink, thresholdOtuSESHighThres1day=thresholdOtuSESHighThres1day, changeServiceDeployProvIfCapSigDegThresSonetLine=changeServiceDeployProvIfCapSigDegThresSonetLine, intervalPhysPerfOpticalInputPwr1dayTable=intervalPhysPerfOpticalInputPwr1dayTable, deployProvTunnelWdmConnectionDirection=deployProvTunnelWdmConnectionDirection, deployProvLogicalCpIfDefaultsTunnelAid=deployProvLogicalCpIfDefaultsTunnelAid, farEndPlugDataTable=farEndPlugDataTable, controlPlaneOtnConfigCtmSetupTimeout=controlPlaneOtnConfigCtmSetupTimeout, currentPhysConv15minElapsedTime=currentPhysConv15minElapsedTime, deployProvTunnelOtnDefaultsFacilityType=deployProvTunnelOtnDefaultsFacilityType, deployProvControlPlaneEthCapCmTraceDetail=deployProvControlPlaneEthCapCmTraceDetail, transientThres1DayExceededPhysConvCV=transientThres1DayExceededPhysConvCV, opticalIfConfigAlsMode=opticalIfConfigAlsMode, controlPlaneWdmDataNaasAlias=controlPlaneWdmDataNaasAlias)
mibBuilder.exportSymbols("FspR7-MIB", changeServiceDeployProvIfSignalDegradePeriod=changeServiceDeployProvIfSignalDegradePeriod, changeServiceDeployProvIfTraceTransmitSapiOduTcmB=changeServiceDeployProvIfTraceTransmitSapiOduTcmB, alarmThres15MinExceededOduTcmBUAS=alarmThres15MinExceededOduTcmBUAS, deployProvIfOduTribPortNo=deployProvIfOduTribPortNo, vs0allocatedEntry=vs0allocatedEntry, deployProvIfCapVoaMode=deployProvIfCapVoaMode, intervalOdu15minTable=intervalOdu15minTable, interfaceConfigCapInitiateEqualization=interfaceConfigCapInitiateEqualization, f7ContainerSfpSlot=f7ContainerSfpSlot, exChannelConfigBitrate=exChannelConfigBitrate, tunnelWdmConfigResetRetainedFailureIndications=tunnelWdmConfigResetRetainedFailureIndications, deployProvPortBindingDefaultsLogicalIfAid=deployProvPortBindingDefaultsLogicalIfAid, thresholdSubAggregateESHighThres15min=thresholdSubAggregateESHighThres15min, intervalPhysPerfCarrierFreqOffset1weekEntry=intervalPhysPerfCarrierFreqOffset1weekEntry, apsProtGroupStatusWorkingIndex=apsProtGroupStatusWorkingIndex, deployProvExChannelMinimumOSNRRcv=deployProvExChannelMinimumOSNRRcv, intervalPhysPerfChromaticDispersion1dayNumber=intervalPhysPerfChromaticDispersion1dayNumber, virtualOpticalChannelDataTransmitWavelength=virtualOpticalChannelDataTransmitWavelength, intervalRoundTripDelay15minMean=intervalRoundTripDelay15minMean, opticalIfDataTunableHighestChannel=opticalIfDataTunableHighestChannel, intervalSonetSect1dayNumber=intervalSonetSect1dayNumber, plugInventoryMaxDataRate=plugInventoryMaxDataRate, FspR7SupplyTypeCaps=FspR7SupplyTypeCaps, intervalPhysPerfCurrentOscGain15minLow=intervalPhysPerfCurrentOscGain15minLow, forceDeployProvApsDefaultsRowStatus=forceDeployProvApsDefaultsRowStatus, deployProvControlPlaneWdmCtmConfigFlag=deployProvControlPlaneWdmCtmConfigFlag, tunnelEthConfigAlias=tunnelEthConfigAlias, deployProvLogicalIfCapAlias=deployProvLogicalIfCapAlias, currentGfpSublayer1dayCoreHecCorrectedFrames=currentGfpSublayer1dayCoreHecCorrectedFrames, deployProvCopyPathWdmCapRowStatus=deployProvCopyPathWdmCapRowStatus, FspR7RedLinedState=FspR7RedLinedState, logicalCpIfDataFendTeLinkIdNum=logicalCpIfDataFendTeLinkIdNum, inventoryCpWdmCrsUpDataNumber=inventoryCpWdmCrsUpDataNumber, deployProvTunnelOtnCapTunnelType=deployProvTunnelOtnCapTunnelType, currentSonetLine1dayTable=currentSonetLine1dayTable, currentSubAggregate15minEntry=currentSubAggregate15minEntry, deployProvApsHoldOffTime=deployProvApsHoldOffTime, opticalIfConfigCapTiltSet=opticalIfConfigCapTiltSet, sts24callocatedClassInstanceNumber=sts24callocatedClassInstanceNumber, deployProvVchChannelDefaultsRowStatus=deployProvVchChannelDefaultsRowStatus, deployProvTunnelOtnCapProtectionType=deployProvTunnelOtnCapProtectionType, controlPlaneWdmConfigCdTraceDetail=controlPlaneWdmConfigCdTraceDetail, intraNeConnectionsLastChanged=intraNeConnectionsLastChanged, intervalSonetLine1dayES=intervalSonetLine1dayES, alarmLossOsc=alarmLossOsc, FspR7CpTETypeCaps=FspR7CpTETypeCaps, intervalPhysPerfOscOpticalOutputPwr1weekTimeStamp=intervalPhysPerfOscOpticalOutputPwr1weekTimeStamp, deployProvLogicalIfCapPushedFarEndIpHeader=deployProvLogicalIfCapPushedFarEndIpHeader, thresholdSonetLineMsESHighThres1day=thresholdSonetLineMsESHighThres1day, areaIdCapEntry=areaIdCapEntry, neSysTypeChanged=neSysTypeChanged, deployProvExChannelCapMinimumOpticalPowerRcv=deployProvExChannelCapMinimumOpticalPowerRcv, intervalL2EthTx1dayBytesTrmt=intervalL2EthTx1dayBytesTrmt, alarmAseTableBuild=alarmAseTableBuild, deployProvPathOtnCapTable=deployProvPathOtnCapTable, opticalIfDataPortMode=opticalIfDataPortMode, knownHostRowStatus=knownHostRowStatus, intervalGfpt1dayEntry=intervalGfpt1dayEntry, currentSonetLine15minES=currentSonetLine15minES, deployProvControlPlaneEthDefaultsTable=deployProvControlPlaneEthDefaultsTable, deployProvIfLagPortType=deployProvIfLagPortType, deployProvControlPlaneOtnCapRmTraceTarget=deployProvControlPlaneOtnCapRmTraceTarget, connectionWdmDataConnectionDirection=connectionWdmDataConnectionDirection, deployProvApsPeerAidCapsTable=deployProvApsPeerAidCapsTable, thresholdOtuFecCEHighThres1day=thresholdOtuFecCEHighThres1day, changeServiceDeployProvIfOspf=changeServiceDeployProvIfOspf, alarmSubModuleTempTooHigh=alarmSubModuleTempTooHigh, interfaceDataTransmitFrequency=interfaceDataTransmitFrequency, currentOtu1daySES=currentOtu1daySES, deployProvApsTable=deployProvApsTable, deployProvPathElementOtnTid=deployProvPathElementOtnTid, portBindingDataRemoteScPc=portBindingDataRemoteScPc, intervalEthRx15minTimeStamp=intervalEthRx15minTimeStamp, deployProvLanDefaultsType=deployProvLanDefaultsType, logicalCpIfConfigEntry=logicalCpIfConfigEntry, deployProvLogicalCpIfDefaultsVNodeTltp=deployProvLogicalCpIfDefaultsVNodeTltp, deployProvLogicalIfDefaultsIpAddr=deployProvLogicalIfDefaultsIpAddr, deployProvPortBindingCapTable=deployProvPortBindingCapTable, teUnnumLinkOtnDataTable=teUnnumLinkOtnDataTable, connectionOtnDataConnectionDirection=connectionOtnDataConnectionDirection, intervalOduTcmB1dayValidFlag=intervalOduTcmB1dayValidFlag, deployProvPortBindingLogicalIfAid=deployProvPortBindingLogicalIfAid, intervalEthTx15minValidFlag=intervalEthTx15minValidFlag, intervalEthRx3HS1dayNumber=intervalEthRx3HS1dayNumber, moduleDiagnosticsInventoryDescription=moduleDiagnosticsInventoryDescription, deployProvIfDefaultsRevertiveMode=deployProvIfDefaultsRevertiveMode, deployProvVirtualOpticalChannelDefaultsRowStatus=deployProvVirtualOpticalChannelDefaultsRowStatus, tunnelEthDataFromTid=tunnelEthDataFromTid, changeServiceDeployProvIfDefaultsTxOffDelay=changeServiceDeployProvIfDefaultsTxOffDelay, opticalIfDataChannelsNumber=opticalIfDataChannelsNumber, moduleDataNetworkPorts=moduleDataNetworkPorts, alarmPayloadMismatchOPU=alarmPayloadMismatchOPU, f7eqpWcm2g5d=f7eqpWcm2g5d, deployProvControlPlaneWdmDefaultsNodeNameSyntax=deployProvControlPlaneWdmDefaultsNodeNameSyntax, alarmAutoShutdownLaserOffDueToHighTxPwr=alarmAutoShutdownLaserOffDueToHighTxPwr, intervalFarEndPhysPerfOpticalOutputPwr1weekMean=intervalFarEndPhysPerfOpticalOutputPwr1weekMean, deployProvCopyPathEthDefaultsSourcePathIndex=deployProvCopyPathEthDefaultsSourcePathIndex, intervalPhysPerfOlmRxLineAtt1dayEntry=intervalPhysPerfOlmRxLineAtt1dayEntry, intervalOduTcmA15minNumber=intervalOduTcmA15minNumber, crsConnConfigType=crsConnConfigType, deployProvPlugTable=deployProvPlugTable, alarmOosPrePostSigAfterPrecompFailed=alarmOosPrePostSigAfterPrecompFailed, intervalPhysPerfPumpPwr1weekEntry=intervalPhysPerfPumpPwr1weekEntry, teUnnumLinkEthDataNodeIp=teUnnumLinkEthDataNodeIp, virtualOpticalChannelDataTransmitFrequency=virtualOpticalChannelDataTransmitFrequency, deployProvControlPlaneOtnCapRsvpMaxExpRestartTime=deployProvControlPlaneOtnCapRsvpMaxExpRestartTime, intervalEthRx3HS1dayBytesFrames128Rcv=intervalEthRx3HS1dayBytesFrames128Rcv, deployProvTifOutputCapForceDestroy=deployProvTifOutputCapForceDestroy, tunnelWdmConfigReversionType=tunnelWdmConfigReversionType, deployProvModuleReach=deployProvModuleReach, deployProvIfSigDegPeriodSdhSection=deployProvIfSigDegPeriodSdhSection, ntpServerTestStatus=ntpServerTestStatus, otdrConfigEntry=otdrConfigEntry, FspR7AutoThresResetCaps=FspR7AutoThresResetCaps, deployProvTunnelEthFromAid=deployProvTunnelEthFromAid, thresholdGfptDiscardedSuperblocksHighThres1Day=thresholdGfptDiscardedSuperblocksHighThres1Day, logicalCpIfDataIpAddrMonitor=logicalCpIfDataIpAddrMonitor, deployProvExChannelDefaultsTransmitChannel=deployProvExChannelDefaultsTransmitChannel, deployProvDcnDefaultsAdmin=deployProvDcnDefaultsAdmin, alarmApsProtocolFailure=alarmApsProtocolFailure, deployProvControlPlaneOtnDefaultsNaasTraceDetail=deployProvControlPlaneOtnDefaultsNaasTraceDetail, thresholdOduEntry=thresholdOduEntry, neNtpStatusServer2=neNtpStatusServer2, intervalFarEndPhysPerfOpticalInputPwr1weekNumber=intervalFarEndPhysPerfOpticalInputPwr1weekNumber, deployProvLogicalCpIfFacilityType=deployProvLogicalCpIfFacilityType, deployProvModuleDefaultsType=deployProvModuleDefaultsType, changeServiceDeployProvIfCapSigDegPeriodOdu=changeServiceDeployProvIfCapSigDegPeriodOdu, changeServiceDeployProvIfCapSigDegThresOduTcmA=changeServiceDeployProvIfCapSigDegThresOduTcmA, forceDeployProvApsForceDestroy=forceDeployProvApsForceDestroy, alarmAlarmIndicationSignalLowerOrderPath=alarmAlarmIndicationSignalLowerOrderPath, changeServiceDeployProvIfDefaultsTimModeSonetSection=changeServiceDeployProvIfDefaultsTimModeSonetSection, deployProvControlPlaneWdmCmFisFrsTimeout=deployProvControlPlaneWdmCmFisFrsTimeout, transientCpConnectionModificationCompleted=transientCpConnectionModificationCompleted, deployProvPortBindingCapLocalTna=deployProvPortBindingCapLocalTna, teNumLinkEthDataTeLinkIp=teNumLinkEthDataTeLinkIp, thresholdOduESHighThres1day=thresholdOduESHighThres1day, fspUserManagementCapTimeoutAvailable=fspUserManagementCapTimeoutAvailable, intervalPhysPerfCurrentOscGain1dayNumber=intervalPhysPerfCurrentOscGain1dayNumber, currentL2EthRx15minUndersizedFramesRcv=currentL2EthRx15minUndersizedFramesRcv, intervalFarEndPhysPerfOpticalInputPwr1weekMean=intervalFarEndPhysPerfOpticalInputPwr1weekMean, intervalPhysPerfCurrentOscGain1weekNumber=intervalPhysPerfCurrentOscGain1weekNumber, connectionEthDataMonitorEntities=connectionEthDataMonitorEntities, opticalIfDataVethAid=opticalIfDataVethAid, changeServiceDeployProvIfCapXfpDecisionThres=changeServiceDeployProvIfCapXfpDecisionThres, controlPlaneWdmConfigCtmMaximumRetryWait=controlPlaneWdmConfigCtmMaximumRetryWait, alarmThirdPartyPlug=alarmThirdPartyPlug, exChannelDataEntry=exChannelDataEntry, deployProvControlPlaneWdmCapTedbMinAdvertWait=deployProvControlPlaneWdmCapTedbMinAdvertWait, currentL2EthTx15minBytesFrames1519Trmt=currentL2EthTx15minBytesFrames1519Trmt, deployProvIfCapSigDegPeriodSdhSection=deployProvIfCapSigDegPeriodSdhSection, deployProvIfCapFlowControl=deployProvIfCapFlowControl, intervalEthTx1dayGoodFramesx=intervalEthTx1dayGoodFramesx, tunnelWdmConfigMonitorEntities=tunnelWdmConfigMonitorEntities, deployProvLogicalIfLanLinkAid=deployProvLogicalIfLanLinkAid, thresholdSonetLoPathUASHighThres15min=thresholdSonetLoPathUASHighThres15min, inventoryCpWdmUpDataEntry=inventoryCpWdmUpDataEntry, intervalPhysPerfOscOpticalOutputPwr15minTable=intervalPhysPerfOscOpticalOutputPwr15minTable, deployProvControlPlaneWdmCdResyncTimeout=deployProvControlPlaneWdmCdResyncTimeout, intervalDefectSeconds15minDS=intervalDefectSeconds15minDS, deployProvModuleCapReach=deployProvModuleCapReach, deployProvPathElementEthDefaultsTie=deployProvPathElementEthDefaultsTie, eocDataTable=eocDataTable, currentOduTcmC1dayElapsedTime=currentOduTcmC1dayElapsedTime, currentPhysConvHighSpeed1dayCV=currentPhysConvHighSpeed1dayCV, changeServiceDeployProvIfDefaultsAttenuationGradient=changeServiceDeployProvIfDefaultsAttenuationGradient, deployProvIfCapType=deployProvIfCapType, deployProvPathElementOtnDefaultsTid=deployProvPathElementOtnDefaultsTid, deployProvControlPlaneWdmCapRaConfigFlag=deployProvControlPlaneWdmCapRaConfigFlag, opticalIfConfigCapTestPrbsTrmtMode=opticalIfConfigCapTestPrbsTrmtMode, deployProvLogicalCpIfCapAuthString=deployProvLogicalCpIfCapAuthString, fspUserManagementTable=fspUserManagementTable, deployProvCopyPathWdmSourcePathIndex=deployProvCopyPathWdmSourcePathIndex, deployProvLanCapEntry=deployProvLanCapEntry, deployProvControlPlaneOtnDefaultsRmTraceTarget=deployProvControlPlaneOtnDefaultsRmTraceTarget, tunnelOtnConfigTable=tunnelOtnConfigTable, currentEthRx3HS15minTable=currentEthRx3HS15minTable, deployProvLogicalCpIfCapVNodeIp=deployProvLogicalCpIfCapVNodeIp, pathElementEthDataTidMonitor=pathElementEthDataTidMonitor, thresholdFarEndPhysPerfCapOpticalInputPwrLow=thresholdFarEndPhysPerfCapOpticalInputPwrLow, opticalIfConfigCapForceFwdAsePilotOn=opticalIfConfigCapForceFwdAsePilotOn, deployProvApsCapProtectionAid=deployProvApsCapProtectionAid, apsProtFacilityConfigCapInhibitSwitchToProt=apsProtFacilityConfigCapInhibitSwitchToProt, alarmAseTableGenFailLow=alarmAseTableGenFailLow, deployProvIfCapAreaId=deployProvIfCapAreaId, deployProvLogicalCpIfCapTunnelAid=deployProvLogicalCpIfCapTunnelAid, fspUserManagementDefaultsTimeoutValue=fspUserManagementDefaultsTimeoutValue, pppDataEntry=pppDataEntry, changeServiceDeployProvIfCapFarEndCommunication=changeServiceDeployProvIfCapFarEndCommunication, gfpServiceDefTable=gfpServiceDefTable, intervalFarEndPhysPerfOpticalOutputPwr15minTable=intervalFarEndPhysPerfOpticalOutputPwr15minTable, currentPhysConv1dayElapsedTime=currentPhysConv1dayElapsedTime, fspUserManagementCapRowStatus=fspUserManagementCapRowStatus, thresholdEthRxPauseFramesHighThres1Day=thresholdEthRxPauseFramesHighThres1Day, alarmAttOnReceiverFiberHigherThanMonitor=alarmAttOnReceiverFiberHigherThanMonitor, deployProvConnState=deployProvConnState, transientNtpSrvTestSuccessed=transientNtpSrvTestSuccessed, thresholdOtuESHighThres15min=thresholdOtuESHighThres15min, intervalPhysPerfCarrierFreqOffset1dayTable=intervalPhysPerfCarrierFreqOffset1dayTable, deployProvLogicalIfPushedFarEndIpHeader=deployProvLogicalIfPushedFarEndIpHeader, logicalIfDataTable=logicalIfDataTable, deployProvControlPlaneOtnDefaultsCtmRetryWaitMultiplier=deployProvControlPlaneOtnDefaultsCtmRetryWaitMultiplier, intervalPhysPerfOscPwr15minMean=intervalPhysPerfOscPwr15minMean, connectionWdmDataFromAid=connectionWdmDataFromAid, opticalIfConfigPriority=opticalIfConfigPriority, intervalPhysPerfOlmTxLineAtt1weekHigh=intervalPhysPerfOlmTxLineAtt1weekHigh, intervalL2EthRx15minInterPackJunkBytesFramesRcv=intervalL2EthRx15minInterPackJunkBytesFramesRcv, shelfInfoShelfHeight=shelfInfoShelfHeight, currentGfpfrSublayer1dayTable=currentGfpfrSublayer1dayTable, changeServiceDeployProvIfDefaultsBitrate=changeServiceDeployProvIfDefaultsBitrate, deployProvControlPlaneEthRmTraceTarget=deployProvControlPlaneEthRmTraceTarget, deployProvPlugDefaultsRowStatus=deployProvPlugDefaultsRowStatus, deployProvPathOtnDefaultsEntry=deployProvPathOtnDefaultsEntry, vc4c8allocatedFacilityType=vc4c8allocatedFacilityType, exChannelConfigMaxBitErrorRate=exChannelConfigMaxBitErrorRate, deployProvExChannelDefaultsMaxBitErrorRate=deployProvExChannelDefaultsMaxBitErrorRate, thresholdEthRxTable=thresholdEthRxTable, controlPlaneEthConfigRsvpMaxExpRestartTime=controlPlaneEthConfigRsvpMaxExpRestartTime, intervalSonetLoPath1dayCV=intervalSonetLoPath1dayCV, deployProvTunnelEthRowStatus=deployProvTunnelEthRowStatus, currentGfpfrSublayer15minTHecDiscardedFrames=currentGfpfrSublayer15minTHecDiscardedFrames, intervalPmSnapshotEntry=intervalPmSnapshotEntry, alarmTransmitterDisabledAis=alarmTransmitterDisabledAis, forceDeployProvApsCapForceDestroy=forceDeployProvApsCapForceDestroy, interfaceDataRate=interfaceDataRate, deployProvLanType=deployProvLanType, inventoryCpEthCrsUpDataAids=inventoryCpEthCrsUpDataAids, inventoryCpOtnCrsUpDataTable=inventoryCpOtnCrsUpDataTable, deployProvIfSigDegThresOduTcmA=deployProvIfSigDegThresOduTcmA, deployProvIfVariableGain=deployProvIfVariableGain, intervalPhysPerfOscOpticalOutputPwr1weekMean=intervalPhysPerfOscOpticalOutputPwr1weekMean, deployProvPathElementOtnDownTributaryTSMethod=deployProvPathElementOtnDownTributaryTSMethod, thresholdPhysPerfCapAttTxHigh=thresholdPhysPerfCapAttTxHigh, opticalIfConfigMaxFrameSize=opticalIfConfigMaxFrameSize, intervalL2EthRx1dayOversizedFramesRcv=intervalL2EthRx1dayOversizedFramesRcv, deployProvControlPlaneOtnCmCrankBackTimeout=deployProvControlPlaneOtnCmCrankBackTimeout, intervalDispersionCompensation15minMean=intervalDispersionCompensation15minMean, tunnelEthConfigEntry=tunnelEthConfigEntry, intervalEthRx3HS15minBytesFrames1024Rcv=intervalEthRx3HS15minBytesFrames1024Rcv, currentConditionEntry=currentConditionEntry, pathElementWdmDataDownstreamModuleAid=pathElementWdmDataDownstreamModuleAid, deployProvIfCapPortMode=deployProvIfCapPortMode, transientSoftwareActivationFail=transientSoftwareActivationFail, deployProvModuleGain=deployProvModuleGain, deployProvModuleMapping=deployProvModuleMapping, changeServiceDeployProvIfDefaultsIpAddr=changeServiceDeployProvIfDefaultsIpAddr, intervalFarEndPhysPerfOpticalInputPwr1weekValidFlag=intervalFarEndPhysPerfOpticalInputPwr1weekValidFlag, deployProvControlPlaneEthCmFisFrsTimeout=deployProvControlPlaneEthCmFisFrsTimeout, deployProvControlPlaneWdmCapCtmShutdownTimeout=deployProvControlPlaneWdmCapCtmShutdownTimeout, ethernetConfigIpAddrMonitor=ethernetConfigIpAddrMonitor, farEndIfConfigAlias=farEndIfConfigAlias, deployProvIfDefaultsDuplex=deployProvIfDefaultsDuplex, ntpSrvDeletion=ntpSrvDeletion, deployProvPathWdmCapTable=deployProvPathWdmCapTable, deployProvPathEthCapRowStatus=deployProvPathEthCapRowStatus)
mibBuilder.exportSymbols("FspR7-MIB", ospfDataDesignatedRouter=ospfDataDesignatedRouter, intervalFarEndPhysPerfOpticalOutputPwr1dayEntry=intervalFarEndPhysPerfOpticalOutputPwr1dayEntry, intervalSonetLine15minTable=intervalSonetLine15minTable, intraNeConnectionsEndpointB=intraNeConnectionsEndpointB, changeServiceDeployProvIfDefaultsTraceTransmitSapiOdu=changeServiceDeployProvIfDefaultsTraceTransmitSapiOdu, deployProvPathOtnDefaultsTable=deployProvPathOtnDefaultsTable, deployProvTunnelEthToNodeIp=deployProvTunnelEthToNodeIp, deployProvPathEthDefaultsTable=deployProvPathEthDefaultsTable, deployProvPathElementEthRowStatus=deployProvPathElementEthRowStatus, intervalSonetHoPath15minTimeStamp=intervalSonetHoPath15minTimeStamp, farEndIfDataTable=farEndIfDataTable, deployProvShelfDefaultsEntry=deployProvShelfDefaultsEntry, FspR7PathNodeCaps=FspR7PathNodeCaps, vs1allocatedContainer=vs1allocatedContainer, deployProvVirtualOpticalChannelDefaultsTable=deployProvVirtualOpticalChannelDefaultsTable, deployProvControlPlaneOtnCapCdbMaxSize=deployProvControlPlaneOtnCapCdbMaxSize, changeServiceDeployProvIfTraceExpectedOduTcmC=changeServiceDeployProvIfTraceExpectedOduTcmC, deployProvControlPlaneWdmCapCdResyncTimeout=deployProvControlPlaneWdmCapCdResyncTimeout, crsConnDataCrsType=crsConnDataCrsType, intervalDispersionCompensation15minNumber=intervalDispersionCompensation15minNumber, deployProvControlPlaneOtnCapNodeNameSyntax=deployProvControlPlaneOtnCapNodeNameSyntax, transientCryptoRtf=transientCryptoRtf, vtpEntityDataReach=vtpEntityDataReach, tunnelEthDataTunnelNo=tunnelEthDataTunnelNo, intervalEthRxHighSpeed15minGoodFrames=intervalEthRxHighSpeed15minGoodFrames, currentL2EthTx1dayBytesFrames512Trmt=currentL2EthTx1dayBytesFrames512Trmt, currentGfpfr1dayTHecDiscardedFrames=currentGfpfr1dayTHecDiscardedFrames, intervalPhysPerfCurrentOscGain1weekHigh=intervalPhysPerfCurrentOscGain1weekHigh, changeServiceDeployProvIfFarEndCommunication=changeServiceDeployProvIfFarEndCommunication, pathElementOtnDataTable=pathElementOtnDataTable, deployProvLanDefaultsIpType=deployProvLanDefaultsIpType, intervalEthRx1dayValidFlag=intervalEthRx1dayValidFlag, ptpEntityDataConnEqptState=ptpEntityDataConnEqptState, farEndIfDataType=farEndIfDataType, controlPlaneEthConfigCtmMaximumRetryWait=controlPlaneEthConfigCtmMaximumRetryWait, deployProvControlPlaneOtnCapRowStatus=deployProvControlPlaneOtnCapRowStatus, deployProvIfCapTraceExpectedOdu=deployProvIfCapTraceExpectedOdu, deployProvConnNonStdCapFromEndpointA=deployProvConnNonStdCapFromEndpointA, controlPlaneOtnDataPcAlias=controlPlaneOtnDataPcAlias, currentGfpfr15minTHecDiscardedFrames=currentGfpfr15minTHecDiscardedFrames, currentEthRx3HS15minBytes=currentEthRx3HS15minBytes, FspR7SubLayerCaps=FspR7SubLayerCaps, currentSonetLoPath15minSES=currentSonetLoPath15minSES, deployProvApsProtectionMech=deployProvApsProtectionMech, intervalPhysConvHighSpeed1dayValidFlag=intervalPhysConvHighSpeed1dayValidFlag, fspUserManagementAuthPrivKey=fspUserManagementAuthPrivKey, alarmEquipmentNotAccepted=alarmEquipmentNotAccepted, forceDeployProvApsDefaultsHoldOffTime=forceDeployProvApsDefaultsHoldOffTime, currentEthRx1dayGoodFrames=currentEthRx1dayGoodFrames, deployProvTifOutputTelemetry=deployProvTifOutputTelemetry, neBackupScuAvailable=neBackupScuAvailable, currentGfpfrSublayer1dayTHecDiscardedFrames=currentGfpfrSublayer1dayTHecDiscardedFrames, controlPlaneEthConfigRmConfigFlag=controlPlaneEthConfigRmConfigFlag, deployProvVchChannelTimModeOdu=deployProvVchChannelTimModeOdu, tunnelEthDataToTid=tunnelEthDataToTid, deployProvLogicalCpIfDefaultsOspf=deployProvLogicalCpIfDefaultsOspf, deployProvTunnelOtnFacilityType=deployProvTunnelOtnFacilityType, currentSonetLine1dayCV=currentSonetLine1dayCV, transientThres1DayExceededOduTcmABbe=transientThres1DayExceededOduTcmABbe, intervalPhysPerfOscPwr15minLow=intervalPhysPerfOscPwr15minLow, deployProvIfDefaultsTraceTransmitOpspOduTcmC=deployProvIfDefaultsTraceTransmitOpspOduTcmC, FspR7PceModeCaps=FspR7PceModeCaps, pathWdmDataTable=pathWdmDataTable, alarmLockedDefectOdu=alarmLockedDefectOdu, tunnelEthConfigCbsRcv=tunnelEthConfigCbsRcv, deployProvLogicalCpIfFendTeLinkIdNum=deployProvLogicalCpIfFendTeLinkIdNum, currentPmSnapshotVariableGain=currentPmSnapshotVariableGain, controlPlaneOtnConfigTable=controlPlaneOtnConfigTable, wdmChannelModuleInventoryReach=wdmChannelModuleInventoryReach, deployProvModuleCapCac=deployProvModuleCapCac, changeServiceDeployProvIfDefaultsSignalDegradePeriod=changeServiceDeployProvIfDefaultsSignalDegradePeriod, nePreferredFacilityType=nePreferredFacilityType, crsDcnDataEccInstance=crsDcnDataEccInstance, deployProvIfDefaultsLagPortType=deployProvIfDefaultsLagPortType, thresholdOduTcmASESHighThres1day=thresholdOduTcmASESHighThres1day, deployProvTunnelOtnDefaultsTunnelNo=deployProvTunnelOtnDefaultsTunnelNo, apsProtGroupStatusRevertiveMode=apsProtGroupStatusRevertiveMode, intervalPhysConv1dayTable=intervalPhysConv1dayTable, deployProvControlPlaneEthDefaultsTedbMinAdvertWait=deployProvControlPlaneEthDefaultsTedbMinAdvertWait, crsConnDeployProvDefaultsPathNode=crsConnDeployProvDefaultsPathNode, deployProvControlPlaneEthRaTraceDetail=deployProvControlPlaneEthRaTraceDetail, thresholdOduTcmAUASHighThres1day=thresholdOduTcmAUASHighThres1day, transientThres1DayExceededFecCE=transientThres1DayExceededFecCE, deployProvApsCapDirection=deployProvApsCapDirection, deployProvExChannelDefaultsPMDTransmit=deployProvExChannelDefaultsPMDTransmit, changeServiceDeployProvIfCapTraceExpectedOduTcmC=changeServiceDeployProvIfCapTraceExpectedOduTcmC, deployProvIfCapLaserOffDelayFunction=deployProvIfCapLaserOffDelayFunction, deployProvPortBindingRemoteTna=deployProvPortBindingRemoteTna, deployProvPppIpCapIpType=deployProvPppIpCapIpType, intervalPhysPerfOlmRxLineAtt1dayMean=intervalPhysPerfOlmRxLineAtt1dayMean, currentPhysConvHighSpeed15minCV=currentPhysConvHighSpeed15minCV, FspR7AutopLifCaps=FspR7AutopLifCaps, currentL2EthRx1dayInterPackJunkBytesFramesRcv=currentL2EthRx1dayInterPackJunkBytesFramesRcv, opticalIfDiagTable=opticalIfDiagTable, intervalPhysPerfCarrierFreqOffset1weekHigh=intervalPhysPerfCarrierFreqOffset1weekHigh, forceDeployProvApsCapSignalDegradeSwitching=forceDeployProvApsCapSignalDegradeSwitching, exChannelConfigTable=exChannelConfigTable, intervalGfpfrSublayer1dayCHecDiscardedFrames=intervalGfpfrSublayer1dayCHecDiscardedFrames, changeServiceDeployProvIfDefaultsForceDestroy=changeServiceDeployProvIfDefaultsForceDestroy, deployProvPathElementEthNodeIp=deployProvPathElementEthNodeIp, neEqlzAdmin=neEqlzAdmin, currentL2EthTx1dayPauseFramesTrmt=currentL2EthTx1dayPauseFramesTrmt, teNumLinkEthDataInfo=teNumLinkEthDataInfo, deployProvControlPlaneWdmCmAlarmActivationTime=deployProvControlPlaneWdmCmAlarmActivationTime, pathElementWdmDataTie=pathElementWdmDataTie, logicalCpIfDataFendTeLinkIdUnn=logicalCpIfDataFendTeLinkIdUnn, deployProvPathElementOtnTrafficEngineeringType=deployProvPathElementOtnTrafficEngineeringType, deployProvControlPlaneEthCapRmTraceTarget=deployProvControlPlaneEthCapRmTraceTarget, intervalSonetSect15minValidFlag=intervalSonetSect15minValidFlag, intervalL2EthTx15minNumber=intervalL2EthTx15minNumber, opticalIfConfigDispersionSetting=opticalIfConfigDispersionSetting, deployProvPathElementOtnCapTrafficEngineeringType=deployProvPathElementOtnCapTrafficEngineeringType, apsProtGroupStatusEntry=apsProtGroupStatusEntry, ethernetConfigIpMaskMonitor=ethernetConfigIpMaskMonitor, pppfConfigIpType=pppfConfigIpType, alarmLossOfReceiverClockRecovery=alarmLossOfReceiverClockRecovery, changeServiceDeployProvIfCapDuplex=changeServiceDeployProvIfCapDuplex, deployProvIfDefaultsSigDegThresOduTcmA=deployProvIfDefaultsSigDegThresOduTcmA, intervalOtuFec15minTable=intervalOtuFec15minTable, deployProvPppIpTable=deployProvPppIpTable, alarmOptSignalFailure=alarmOptSignalFailure, crsConnWdmDataEntry=crsConnWdmDataEntry, deployProvIfCapMaxFrameSize=deployProvIfCapMaxFrameSize, transientCopyFileAccessDenied=transientCopyFileAccessDenied, vc4allocatedSequenceNumber=vc4allocatedSequenceNumber, controlPlaneOtnConfigCmTraceDetail=controlPlaneOtnConfigCmTraceDetail, changeServiceDeployProvIfSigDegThresOdu=changeServiceDeployProvIfSigDegThresOdu, deployProvPathElementWdmLogicalInterfaceId=deployProvPathElementWdmLogicalInterfaceId, deployProvIfCapAlsMode=deployProvIfCapAlsMode, deployProvLogicalCpIfRowStatus=deployProvLogicalCpIfRowStatus, deployProvCrsDcnCapForceDestroy=deployProvCrsDcnCapForceDestroy, deployProvModuleDefaultsScrambling=deployProvModuleDefaultsScrambling, changeServiceDeployProvIfCapTerminationLevel=changeServiceDeployProvIfCapTerminationLevel, currentL2EthTx1dayBytesFrames65Trmt=currentL2EthTx1dayBytesFrames65Trmt, transientDatabaseActivation=transientDatabaseActivation, deployProvIfLanAidCapsEntry=deployProvIfLanAidCapsEntry, deployProvCopyPathEthDefaultsRowStatus=deployProvCopyPathEthDefaultsRowStatus, opticalIfDiagLaserTemp=opticalIfDiagLaserTemp, deployProvPathEthRowStatus=deployProvPathEthRowStatus, intervalPhysPerfChromaticDispersion1weekNumber=intervalPhysPerfChromaticDispersion1weekNumber, deployProvVchChannelDefaultsSigDegThresOdu=deployProvVchChannelDefaultsSigDegThresOdu, intervalFarEndPhysPerfOpticalInputPwr15minValidFlag=intervalFarEndPhysPerfOpticalInputPwr15minValidFlag, currentPhysConvHighSpeed15minTable=currentPhysConvHighSpeed15minTable, currentOtuFec1dayES=currentOtuFec1dayES, FspR7SnmpLongString=FspR7SnmpLongString, controlPlaneWdmDataCmAlias=controlPlaneWdmDataCmAlias, intervalOtuFec1dayNumber=intervalOtuFec1dayNumber, deployProvTunnelWdmCapRestPathsNoProv=deployProvTunnelWdmCapRestPathsNoProv, currentOduTcmA15minElapsedTime=currentOduTcmA15minElapsedTime, deployProvIfLacpMode=deployProvIfLacpMode, alarmThres15MinExceededOduTcmBBbe=alarmThres15MinExceededOduTcmBBbe, currentL2EthTx1dayFramesTrmt=currentL2EthTx1dayFramesTrmt, connectionOtnDataErrorMessage=connectionOtnDataErrorMessage, controlPlaneOtnConfigRmTraceDetail=controlPlaneOtnConfigRmTraceDetail, currentSonetLoPath15minCV=currentSonetLoPath15minCV, intervalGfpSublayer1dayCoreHecCorrectedFrames=intervalGfpSublayer1dayCoreHecCorrectedFrames, intervalPhysPerfLaserBiasCurrentNormalized15minTable=intervalPhysPerfLaserBiasCurrentNormalized15minTable, intervalL2EthTx1dayFramesTrmt=intervalL2EthTx1dayFramesTrmt, deployProvModulePsuOutputPower=deployProvModulePsuOutputPower, deployProvTifInputTifAlarmMessage=deployProvTifInputTifAlarmMessage, intervalPhysPerfBackreflectionPwrRcv1dayTimeStamp=intervalPhysPerfBackreflectionPwrRcv1dayTimeStamp, deployProvTunnelWdmDefaultsTerminationLevel=deployProvTunnelWdmDefaultsTerminationLevel, crsConnDeployProvCapEntry=crsConnDeployProvCapEntry, currentOtuFec15minExCE=currentOtuFec15minExCE, tunnelWdmConfigAbortProcess=tunnelWdmConfigAbortProcess, controlPlaneOtnEntityStateCapTable=controlPlaneOtnEntityStateCapTable, f710GBE=f710GBE, alarmVoltageOutOfRange=alarmVoltageOutOfRange, deployProvTunnelWdmPin=deployProvTunnelWdmPin, intervalOdu15minTimeStamp=intervalOdu15minTimeStamp, deployProvConnNonStdCapToType=deployProvConnNonStdCapToType, deployProvPppIpRowStatus=deployProvPppIpRowStatus, deployProvApsPeerAid=deployProvApsPeerAid, deployProvControlPlaneEthCtmRetryWaitMultiplier=deployProvControlPlaneEthCtmRetryWaitMultiplier, f7eqp4tca4gd=f7eqp4tca4gd, f7ContainerFanSlot=f7ContainerFanSlot, f7eqpsfpd=f7eqpsfpd, currentGfpfrSublayer15minEntry=currentGfpfrSublayer15minEntry, inventoryCpEthDownDataResources=inventoryCpEthDownDataResources, transientCopyFileSshHostKeyFail=transientCopyFileSshHostKeyFail, deployProvControlPlaneOtnCapNaasConfigFlag=deployProvControlPlaneOtnCapNaasConfigFlag, moduleConfigCapabilityLevelProvision=moduleConfigCapabilityLevelProvision, deployProvControlPlaneOtnCapTedbMinAdvertWait=deployProvControlPlaneOtnCapTedbMinAdvertWait, thresholdOduTcmCBESHighThres15min=thresholdOduTcmCBESHighThres15min, controlPlaneEthConfigTable=controlPlaneEthConfigTable, teUnnumLinkWdmDataSynchronization=teUnnumLinkWdmDataSynchronization, deployProvIfDefaultsSigDegThresSonetLine=deployProvIfDefaultsSigDegThresSonetLine, FspR7FtpClient=FspR7FtpClient, farEndIfDiagnosticsTable=farEndIfDiagnosticsTable, connectionEthDataDestinationTna=connectionEthDataDestinationTna, FspR7LacpTimeoutCaps=FspR7LacpTimeoutCaps, neCpPcsPriority=neCpPcsPriority, currentGfpfrSublayer1dayCHecDiscardedFrames=currentGfpfrSublayer1dayCHecDiscardedFrames, FspR7CpAuthTypeCaps=FspR7CpAuthTypeCaps, f7eqpCustomc=f7eqpCustomc, deployProvConnStdCapToEndpointB=deployProvConnStdCapToEndpointB, intervalRoundTripDelay15minHigh=intervalRoundTripDelay15minHigh, crsConnUnusedFromPointsEntry=crsConnUnusedFromPointsEntry, changeServiceDeployProvIfRowStatus=changeServiceDeployProvIfRowStatus, FspR7CpPinning=FspR7CpPinning, currentOduTcmC15minElapsedTime=currentOduTcmC15minElapsedTime, tunnelOtnDataErrorCategory=tunnelOtnDataErrorCategory, inventoryCpWdmDownDataPhysicalTermPoints=inventoryCpWdmDownDataPhysicalTermPoints, tunnelWdmConfigRestorationType=tunnelWdmConfigRestorationType, deployProvControlPlaneEthCapCdResyncTimeout=deployProvControlPlaneEthCapCdResyncTimeout, intervalEthTx1dayBytes=intervalEthTx1dayBytes, interfaceConfigCapEqlzAdmin=interfaceConfigCapEqlzAdmin, FspR7InitEqualization=FspR7InitEqualization, eRoadmInfoClientPorts=eRoadmInfoClientPorts, intervalPhysPerfOscOpticalOutputPwr15minNumber=intervalPhysPerfOscOpticalOutputPwr15minNumber, deployProvIfDefaultsFarEndCommunication=deployProvIfDefaultsFarEndCommunication, f7eqpSh1huDc=f7eqpSh1huDc, crsConnDeployProvCapPathNode=crsConnDeployProvCapPathNode, deployProvIfCapSigDegThresOduTcmC=deployProvIfCapSigDegThresOduTcmC, inventoryCpEthUpFlowDataIndexEth=inventoryCpEthUpFlowDataIndexEth, intervalPhysConvHighSpeed15minES=intervalPhysConvHighSpeed15minES, transientBootUpRejected=transientBootUpRejected, intervalOtu15minTimeStamp=intervalOtu15minTimeStamp, FspR7LagStandby=FspR7LagStandby, deployProvPortBindingDefaultsRemotePort=deployProvPortBindingDefaultsRemotePort, deployProvControlPlaneEthDefaultsEntry=deployProvControlPlaneEthDefaultsEntry, deployProvPppIpDefaultsTable=deployProvPppIpDefaultsTable, deployProvIfTraceTransmitSapiOdu=deployProvIfTraceTransmitSapiOdu, deployProvTunnelWdmDefaultsLayer=deployProvTunnelWdmDefaultsLayer, deployProvLogicalIfCapRowStatus=deployProvLogicalIfCapRowStatus, opticalIfDataFrequency=opticalIfDataFrequency, teNumLinkWdmDataPhysicalLink=teNumLinkWdmDataPhysicalLink, deployProvControlPlaneEthCapTedbMaxSize=deployProvControlPlaneEthCapTedbMaxSize, tunnelWdmDataConnectionDirection=tunnelWdmDataConnectionDirection, interfaceConfigDispertionConfig=interfaceConfigDispertionConfig, deployProvModuleCapDispersionCompensation=deployProvModuleCapDispersionCompensation, deployProvExChannelCapFrameFormat=deployProvExChannelCapFrameFormat, intervalPhysPerfOpticalOutputPwr15minNumber=intervalPhysPerfOpticalOutputPwr15minNumber, deployProvTunnelEthLayer=deployProvTunnelEthLayer, deployProvControlPlaneOtnEntry=deployProvControlPlaneOtnEntry, deployProvControlPlaneOtnDefaultsCtmSetupTimeout=deployProvControlPlaneOtnDefaultsCtmSetupTimeout, opticalIfDataTributaryAssignedSlotNo=opticalIfDataTributaryAssignedSlotNo, intervalRoundTripDelay1weekMean=intervalRoundTripDelay1weekMean, deployProvShelfDefaultsTable=deployProvShelfDefaultsTable, crossConnectionCreation=crossConnectionCreation, thresholdSonetLineMsUASHighThres15min=thresholdSonetLineMsUASHighThres15min, alarmTopologyDataCalculationInProgress=alarmTopologyDataCalculationInProgress, currentPmSnapshotRxLineAttenuation=currentPmSnapshotRxLineAttenuation, deployProvVchChannelTraceExpectedOdu=deployProvVchChannelTraceExpectedOdu, logicalIfConfigPushedNearEndIpHeader=logicalIfConfigPushedNearEndIpHeader, deployProvModuleRowStatus=deployProvModuleRowStatus, alarmSignalDegradeLine=alarmSignalDegradeLine, tunnelWdmConfigRestorationPathsComputed=tunnelWdmConfigRestorationPathsComputed, forceDeployProvApsWorkingAid=forceDeployProvApsWorkingAid, inventoryCpOtnDownDataNumber=inventoryCpOtnDownDataNumber, deployProvIfDefaultsFecType=deployProvIfDefaultsFecType, deployProvPppIpDefaultsIpType=deployProvPppIpDefaultsIpType, deployProvPathElementWdmDefaultsTrafficEngineeringType=deployProvPathElementWdmDefaultsTrafficEngineeringType, deployProvPppIpDefaultsFarEndIp=deployProvPppIpDefaultsFarEndIp)
mibBuilder.exportSymbols("FspR7-MIB", deployProvIfCapVariableGain=deployProvIfCapVariableGain, thresholdOduTcmAEntry=thresholdOduTcmAEntry, controlPlaneOtnEntityStateOper=controlPlaneOtnEntityStateOper, FspR7Gain=FspR7Gain, tunnelWdmDataLayer=tunnelWdmDataLayer, changeServiceDeployProvIfDefaultsDispersionMode=changeServiceDeployProvIfDefaultsDispersionMode, opticalIfDiagPumpLaserBiasCurrent4=opticalIfDiagPumpLaserBiasCurrent4, alarmEncryptionModuleSelfTestStarted=alarmEncryptionModuleSelfTestStarted, deployProvPppIpDefaultsForceDestroy=deployProvPppIpDefaultsForceDestroy, alarmHwFailure=alarmHwFailure, deployProvLogicalIfDefaultsOspf=deployProvLogicalIfDefaultsOspf, intervalOtuFec1dayExUBE=intervalOtuFec1dayExUBE, deployProvControlPlaneEthTedbMaxSize=deployProvControlPlaneEthTedbMaxSize, currentGfpt15minDiscardedSuperblocks=currentGfpt15minDiscardedSuperblocks, intervalOdu1dayValidFlag=intervalOdu1dayValidFlag, deployProvPathElementWdmLifIp=deployProvPathElementWdmLifIp, deployProvIfTimModeOdu=deployProvIfTimModeOdu, controlPlaneWdmConfigTedbMaxSize=controlPlaneWdmConfigTedbMaxSize, deployProvPlugDefaultsType=deployProvPlugDefaultsType, tunnelEthConfigAdminModifier=tunnelEthConfigAdminModifier, opticalAmplifierEquipmentDiagnosticsUpperSubTempThres=opticalAmplifierEquipmentDiagnosticsUpperSubTempThres, controlPlaneWdmDataTable=controlPlaneWdmDataTable, deployProvPppIpBaud=deployProvPppIpBaud, intervalOduTcmC15minNumber=intervalOduTcmC15minNumber, controlPlaneEthDataTedbAlias=controlPlaneEthDataTedbAlias, f7eqp2tca2g5=f7eqp2tca2g5, intervalLatency1weekLow=intervalLatency1weekLow, FspR7APSCommandCaps=FspR7APSCommandCaps, thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Min=thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Min, forceDeployProvApsCapProtectionAid=forceDeployProvApsCapProtectionAid, deployProvVchChannelCapCir=deployProvVchChannelCapCir, deployProvLogicalCpIfCapNendTeLinkIdUnn=deployProvLogicalCpIfCapNendTeLinkIdUnn, deployProvExChannelTransmitChannel=deployProvExChannelTransmitChannel, exChannelConfigLineCoding=exChannelConfigLineCoding, ApsType=ApsType, deployProvTunnelOtnDefaultsTunnelId=deployProvTunnelOtnDefaultsTunnelId, deployProvControlPlaneOtnDefaultsPcConfigFlag=deployProvControlPlaneOtnDefaultsPcConfigFlag, deployProvLogicalCpIfAlias=deployProvLogicalCpIfAlias, thresholdPhysConvHighSpeedCVHighThres15min=thresholdPhysConvHighSpeedCVHighThres15min, intervalL2EthRx1dayBytesFrames64Rcv=intervalL2EthRx1dayBytesFrames64Rcv, deployProvIfCapTiltSet=deployProvIfCapTiltSet, thresholdOduTcmBUASHighThres1day=thresholdOduTcmBUASHighThres1day, inventoryCpOtnCrsUpDataAids=inventoryCpOtnCrsUpDataAids, intervalPhysPerfCurrent1weekLow=intervalPhysPerfCurrent1weekLow, deployProvPppIpIpType=deployProvPppIpIpType, deployProvTunnelOtnCapProvisionedPaths=deployProvTunnelOtnCapProvisionedPaths, connectionEthDataCirRcv=connectionEthDataCirRcv, deployProvLogicalCpIfCapDcnAid=deployProvLogicalCpIfCapDcnAid, intervalSonetLine15minUAS=intervalSonetLine15minUAS, logicalIfDataIpAddrMonitor=logicalIfDataIpAddrMonitor, deployProvCopyPathOtnDefaultsRowStatus=deployProvCopyPathOtnDefaultsRowStatus, vc4c16allocatedContainer=vc4c16allocatedContainer, connectionOtnDataComputedPaths=connectionOtnDataComputedPaths, alarmOpenConnectionIndicationOdu=alarmOpenConnectionIndicationOdu, eRoadmConfigCapTilt=eRoadmConfigCapTilt, intervalPhysPerfOlmRxLineAtt1dayTable=intervalPhysPerfOlmRxLineAtt1dayTable, neTopologyType=neTopologyType, FspR7CpTunnelScopeCaps=FspR7CpTunnelScopeCaps, opticalIfDataLagIdFend=opticalIfDataLagIdFend, deployProvPlugCapForceDestroy=deployProvPlugCapForceDestroy, intervalGfpfrSublayer15minEntry=intervalGfpfrSublayer15minEntry, currentEthRxHighSpeed1dayBytes=currentEthRxHighSpeed1dayBytes, forceDeployProvApsCapWorkingAid=forceDeployProvApsCapWorkingAid, deployProvApsDefaultsPeerAid=deployProvApsDefaultsPeerAid, intervalOtuFec15minExTimeStamp=intervalOtuFec15minExTimeStamp, intervalLinkAttenuation1dayEntry=intervalLinkAttenuation1dayEntry, deployProvLogicalCpIfCapIpAddrMask=deployProvLogicalCpIfCapIpAddrMask, intervalGfpSublayer1dayEntry=intervalGfpSublayer1dayEntry, deployProvApsSignalFailureSwitching=deployProvApsSignalFailureSwitching, intervalPhysPerfOscOpticalOutputPwr1dayTable=intervalPhysPerfOscOpticalOutputPwr1dayTable, FspR7LagPortTypeCaps=FspR7LagPortTypeCaps, FspR7SignalMapping=FspR7SignalMapping, controlPlaneWdmConfigNaasAdvertWait=controlPlaneWdmConfigNaasAdvertWait, thresholdPhysConvCVHighThres15min=thresholdPhysConvCVHighThres15min, fspUserSpinLock=fspUserSpinLock, deployProvControlPlaneWdmDefaultsCtmMaximumRetryWait=deployProvControlPlaneWdmDefaultsCtmMaximumRetryWait, intervalSonetSect1dayES=intervalSonetSect1dayES, tunnelEthDataComputationState=tunnelEthDataComputationState, remoteAlarmCpDataSource=remoteAlarmCpDataSource, changeServiceDeployProvIfCapTimModeOtu=changeServiceDeployProvIfCapTimModeOtu, changeServiceDeployProvIfTimingSource=changeServiceDeployProvIfTimingSource, deployProvIfDefaultsTimModeOdu=deployProvIfDefaultsTimModeOdu, connectionWdmConfigTable=connectionWdmConfigTable, deployProvIfDefaultsSigDegPeriodOduTcmC=deployProvIfDefaultsSigDegPeriodOduTcmC, alarmAlarmIndicationSignalOpu=alarmAlarmIndicationSignalOpu, ntpServerOperState=ntpServerOperState, deployProvCopyPathOtnDefaultsTable=deployProvCopyPathOtnDefaultsTable, dcnOspfAreaType=dcnOspfAreaType, deployProvVirtualOpticalChannelCapAlias=deployProvVirtualOpticalChannelCapAlias, changeServiceDeployProvIfDefaultsTraceExpectedSonetSection=changeServiceDeployProvIfDefaultsTraceExpectedSonetSection, currentL2EthRx1dayMulticastFramesRcv=currentL2EthRx1dayMulticastFramesRcv, f7eqp4gsmd=f7eqp4gsmd, intervalLinkAttenuation1dayMean=intervalLinkAttenuation1dayMean, alarmEquipmentNotSupportedByPhysicalLayer=alarmEquipmentNotSupportedByPhysicalLayer, alarmAutoShutdownLaserOffDueToErrFwd=alarmAutoShutdownLaserOffDueToErrFwd, fspUserManagementDefaultsTimeoutAvailable=fspUserManagementDefaultsTimeoutAvailable, intervalL2EthRx15minBytesFrames128Rcv=intervalL2EthRx15minBytesFrames128Rcv, deployProvExChannelDefaultsTable=deployProvExChannelDefaultsTable, alarmProvisioningLocked=alarmProvisioningLocked, thresholdOtuESHighThres1day=thresholdOtuESHighThres1day, intervalPhysPerfCarrierFreqOffset1dayHigh=intervalPhysPerfCarrierFreqOffset1dayHigh, intervalPhysConvHighSpeed1dayES=intervalPhysConvHighSpeed1dayES, authTrapUserName=authTrapUserName, vc3allocatedClassInstanceNumber=vc3allocatedClassInstanceNumber, deployProvApsCapSignalDegradeSwitching=deployProvApsCapSignalDegradeSwitching, deployProvLogicalCpIfTransport=deployProvLogicalCpIfTransport, intervalOtuFec15minExValidFlag=intervalOtuFec15minExValidFlag, interfaceDataConnectionType=interfaceDataConnectionType, controlPlaneOtnConfigNaasAdvertWait=controlPlaneOtnConfigNaasAdvertWait, deployProvIfGain=deployProvIfGain, thresholdPhysPerfChromaticDispersionLow=thresholdPhysPerfChromaticDispersionLow, forceDeployProvApsCapEntry=forceDeployProvApsCapEntry, deployProvLanDefaultsIpAddr=deployProvLanDefaultsIpAddr, opticalIfDataLagPorts=opticalIfDataLagPorts, deployProvConnIndex=deployProvConnIndex, intervalPhysPerfCurrent1weekEntry=intervalPhysPerfCurrent1weekEntry, crsConnDataEntityOutage=crsConnDataEntityOutage, intervalPhysConvCombined1dayES=intervalPhysConvCombined1dayES, alarmEncryptionPortKeyExchangedForced=alarmEncryptionPortKeyExchangedForced, intervalEthRxHighSpeed15minTable=intervalEthRxHighSpeed15minTable, vc4c16allocatedFacilityType=vc4c16allocatedFacilityType, sts3callocatedClassInstanceNumber=sts3callocatedClassInstanceNumber, intervalPhysPerfSignalToNoiseRatio1dayMean=intervalPhysPerfSignalToNoiseRatio1dayMean, deployProvPathElementWdmDefaultsRowStatus=deployProvPathElementWdmDefaultsRowStatus, deployProvModuleDefaultsEntry=deployProvModuleDefaultsEntry, ptpEntityDataEntry=ptpEntityDataEntry, intervalOtu15minNumber=intervalOtu15minNumber, currentEthRx15minPauseFrames=currentEthRx15minPauseFrames, FspR7CpTypeCaps=FspR7CpTypeCaps, changeServiceDeployProvIfSigDegThresOduTcmA=changeServiceDeployProvIfSigDegThresOduTcmA, opticalIfDiagOscGain=opticalIfDiagOscGain, currentL2EthRx15minMulticastFramesRcv=currentL2EthRx15minMulticastFramesRcv, currentOtuFec1dayExCE=currentOtuFec1dayExCE, intervalPhysPerfOlmTxLineAtt1dayEntry=intervalPhysPerfOlmTxLineAtt1dayEntry, deployProvControlPlaneEthDefaultsPcTraceDetail=deployProvControlPlaneEthDefaultsPcTraceDetail, currentL2EthTx15minBytesFrames128Trmt=currentL2EthTx15minBytesFrames128Trmt, tunnelEthDataSpecificErrorMessage=tunnelEthDataSpecificErrorMessage, intervalLinkAttenuation1weekEntry=intervalLinkAttenuation1weekEntry, deployProvApsWorkingAidCapsTable=deployProvApsWorkingAidCapsTable, deployProvPortBindingRemoteTnaMask=deployProvPortBindingRemoteTnaMask, forceDeployProvApsDefaultsSignalFailureSwitching=forceDeployProvApsDefaultsSignalFailureSwitching, changeServiceDeployProvIfAttenuationGradient=changeServiceDeployProvIfAttenuationGradient, f7eqpWcc2g7c=f7eqpWcc2g7c, alarmFarEndCommFailure=alarmFarEndCommFailure, currentSonetLoPath1dayUAS=currentSonetLoPath1dayUAS, interfaceDataSignalMapping=interfaceDataSignalMapping, deployProvLogicalCpIfTable=deployProvLogicalCpIfTable, intervalFarEndPhysPerfOpticalOutputPwr15minHigh=intervalFarEndPhysPerfOpticalOutputPwr15minHigh, crsConnWdmUnusedFromPointsTable=crsConnWdmUnusedFromPointsTable, intervalPhysPerfEstimatedSignalGain15minEntry=intervalPhysPerfEstimatedSignalGain15minEntry, teNumLinkWdmDataEntry=teNumLinkWdmDataEntry, wdmChannelModuleInventoryEntry=wdmChannelModuleInventoryEntry, opticalIfConfigSigDegThresOdu=opticalIfConfigSigDegThresOdu, thresholdFarEndPhysPerfEntry=thresholdFarEndPhysPerfEntry, currentSonetSect1daySES=currentSonetSect1daySES, transientThres1DayExceededSonetSectCV=transientThres1DayExceededSonetSectCV, intervalPhysConvTxHighSpeed15minValidFlag=intervalPhysConvTxHighSpeed15minValidFlag, f7eqpPsu1huac=f7eqpPsu1huac, sts24callocatedEntry=sts24callocatedEntry, deployProvPathWdmDefaultsPathId=deployProvPathWdmDefaultsPathId, thresholdPhysPerfCapSignalToNoiseRatioLow=thresholdPhysPerfCapSignalToNoiseRatioLow, deployProvControlPlaneWdmCmTraceDetail=deployProvControlPlaneWdmCmTraceDetail, deployProvControlPlaneEthRsvpMaxExpRestartTime=deployProvControlPlaneEthRsvpMaxExpRestartTime, intervalSonetLoPath15minNumber=intervalSonetLoPath15minNumber, intervalEthRx3HS1dayEntry=intervalEthRx3HS1dayEntry, alarmThres15MinExceededOduTcmCES=alarmThres15MinExceededOduTcmCES, teUnnumLinkWdmDataPhysicalLink=teUnnumLinkWdmDataPhysicalLink, opticalIfDataPortRole=opticalIfDataPortRole, deployProvCopyPathWdmRowStatus=deployProvCopyPathWdmRowStatus, intervalPhysPerfCurrentOscGain1dayValidFlag=intervalPhysPerfCurrentOscGain1dayValidFlag, currentOdu15minUAS=currentOdu15minUAS, intervalPhysPerfOscPwr1weekLow=intervalPhysPerfOscPwr1weekLow, currentSonetLoPath15minElapsedTime=currentSonetLoPath15minElapsedTime, sts48callocatedClassInstanceNumber=sts48callocatedClassInstanceNumber, changeServiceDeployProvIfCapGain=changeServiceDeployProvIfCapGain, alarmPrbsTrmtActivated=alarmPrbsTrmtActivated, farEndIfDataFiberType=farEndIfDataFiberType, changeServiceDeployProvIfCapMetric=changeServiceDeployProvIfCapMetric, transientSoftwareActivation=transientSoftwareActivation, forceDeployProvApsDefaultsFarEndIp=forceDeployProvApsDefaultsFarEndIp, thresholdOduBbeHighThres15min=thresholdOduBbeHighThres15min, eroadmIfDiagnosticsTable=eroadmIfDiagnosticsTable, currentEthRx3HS1dayBytesFrames1024Rcv=currentEthRx3HS1dayBytesFrames1024Rcv, vc4allocatedTable=vc4allocatedTable, opticalIfConfigCapLacpMode=opticalIfConfigCapLacpMode, connectionEthDataRestorationState=connectionEthDataRestorationState, deployProvTunnelEthCapTunnelType=deployProvTunnelEthCapTunnelType, sts3callocatedEntry=sts3callocatedEntry, deployProvModuleChannelsNumber=deployProvModuleChannelsNumber, deployProvControlPlaneEthPcConfigFlag=deployProvControlPlaneEthPcConfigFlag, performanceMIB=performanceMIB, neModusLastRestart=neModusLastRestart, FspR7OpuPayloadType=FspR7OpuPayloadType, alarmRoundTripDelayTooLow=alarmRoundTripDelayTooLow, deployProvModuleCapForceDestroy=deployProvModuleCapForceDestroy, changeServiceDeployProvIfTimModeOdu=changeServiceDeployProvIfTimModeOdu, pathElementOtnDataTid=pathElementOtnDataTid, deployProvIfUtag=deployProvIfUtag, deployProvControlPlaneOtnRsvpMaxExpRestartTime=deployProvControlPlaneOtnRsvpMaxExpRestartTime, tunnelOtnDataToTid=tunnelOtnDataToTid, intervalOtuFec15minCE=intervalOtuFec15minCE, currentEthRx1dayDiscardedFrames=currentEthRx1dayDiscardedFrames, routingIpMask=routingIpMask, opticalIfDataChannelsProvision=opticalIfDataChannelsProvision, inventoryCpEthUpDataNumber=inventoryCpEthUpDataNumber, deployProvTunnelOtnDefaultsRestorationType=deployProvTunnelOtnDefaultsRestorationType, deployProvIfCapTxOffDelay=deployProvIfCapTxOffDelay, intervalPhysPerfOpticalInputPwr1weekTimeStamp=intervalPhysPerfOpticalInputPwr1weekTimeStamp, capabilityDataDescription=capabilityDataDescription, changeServiceDeployProvIfTimModeOduTcmC=changeServiceDeployProvIfTimModeOduTcmC, fspUserManagementEngineID=fspUserManagementEngineID, changeServiceDeployProvIfDefaultsTraceExpectedOduTcmA=changeServiceDeployProvIfDefaultsTraceExpectedOduTcmA, deployProvPathElementWdmCapNodeIp=deployProvPathElementWdmCapNodeIp, interfaceDataParity=interfaceDataParity, deployProvTunnelWdmDefaultsStuff=deployProvTunnelWdmDefaultsStuff, thresholdPhysPerfAttRxLow=thresholdPhysPerfAttRxLow, transientThres1DayExceededOtuUAS=transientThres1DayExceededOtuUAS, deployProvLogicalCpIfDefaultsDcnAid=deployProvLogicalCpIfDefaultsDcnAid, thresholdOtuFecESHighThres1day=thresholdOtuFecESHighThres1day, intervalOtu1dayNumber=intervalOtu1dayNumber, intervalGfpfr1dayEntry=intervalGfpfr1dayEntry, deployProvPppIpCapFarEndIp=deployProvPppIpCapFarEndIp, intervalEthRx3HS15minBytesFrames1519Rcv=intervalEthRx3HS15minBytesFrames1519Rcv, opticalIfConfigCapCac=opticalIfConfigCapCac, deployProvTunnelEthCapMonitorEntities=deployProvTunnelEthCapMonitorEntities, FspR7CpRecoveryType=FspR7CpRecoveryType, intervalPhysPerfBackreflectionPwrRcv15minLow=intervalPhysPerfBackreflectionPwrRcv15minLow, f7eqpEdfasgc=f7eqpEdfasgc, deployProvControlPlaneOtnDefaultsTedbMinAdvertWait=deployProvControlPlaneOtnDefaultsTedbMinAdvertWait, pathElementWdmDataComputedOnsrReverse=pathElementWdmDataComputedOnsrReverse, thresholdOduTcmCUASHighThres15min=thresholdOduTcmCUASHighThres15min, opticalIfConfigCapFarEndCommunication=opticalIfConfigCapFarEndCommunication, alarmLosAttProgress=alarmLosAttProgress, deployProvShelfForceDestroy=deployProvShelfForceDestroy, deployProvTifOutputDefaultsType=deployProvTifOutputDefaultsType, deployProvApsCapForceDestroy=deployProvApsCapForceDestroy, gfpServiceDefBundleAllocation=gfpServiceDefBundleAllocation, changeServiceDeployProvIfDefaultsWdmRxChannel=changeServiceDeployProvIfDefaultsWdmRxChannel, deployProvTunnelEthMonitorEntities=deployProvTunnelEthMonitorEntities, deployProvTifInputDefaultsTifAlarmType=deployProvTifInputDefaultsTifAlarmType, intervalPhysPerfSignalToNoiseRatio15minEntry=intervalPhysPerfSignalToNoiseRatio15minEntry, deployProvPathElementEthDefaultsTrafficEngineeringType=deployProvPathElementEthDefaultsTrafficEngineeringType, intervalPhysConvCombined15minTimeStamp=intervalPhysConvCombined15minTimeStamp, deployProvLogicalCpIfDefaultsCpType=deployProvLogicalCpIfDefaultsCpType, controlPlaneOtnConfigCmAlarmActivationTime=controlPlaneOtnConfigCmAlarmActivationTime, FspR7CpProtectionType=FspR7CpProtectionType, moduleDataTable=moduleDataTable, intervalDispersionCompensation1dayTimeStamp=intervalDispersionCompensation1dayTimeStamp, neMinPasswordLength=neMinPasswordLength, pathElementOtnDataTidMonitor=pathElementOtnDataTidMonitor, f7eqp2bsmd=f7eqp2bsmd, currentL2EthRx1dayBytesFrames256Rcv=currentL2EthRx1dayBytesFrames256Rcv, currentOtuFec15minCE=currentOtuFec15minCE, intervalPhysPerfOpticalInputPwr1weekEntry=intervalPhysPerfOpticalInputPwr1weekEntry)
mibBuilder.exportSymbols("FspR7-MIB", controlPlaneWdmConfigPcTraceDetail=controlPlaneWdmConfigPcTraceDetail, crsConnPossibleToCreateEntry=crsConnPossibleToCreateEntry, intervalPhysPerfChromaticDispersion1dayTable=intervalPhysPerfChromaticDispersion1dayTable, deployProvIfCapIpType=deployProvIfCapIpType, apsConfigHoldOffTime=apsConfigHoldOffTime, intervalPhysPerfLaserBiasCurrentNormalized1dayNumber=intervalPhysPerfLaserBiasCurrentNormalized1dayNumber, deployProvIfDefaultsEqlzAdmin=deployProvIfDefaultsEqlzAdmin, deployProvTunnelEthDefaultsFacilityType=deployProvTunnelEthDefaultsFacilityType, deployProvLogicalIfAuthType=deployProvLogicalIfAuthType, tunnelWdmDataFromAid=tunnelWdmDataFromAid, vc4c8allocatedClassInstanceNumber=vc4c8allocatedClassInstanceNumber, deployProvIfTraceTransmitOpspOtu=deployProvIfTraceTransmitOpspOtu, portBindingDataLocalPort=portBindingDataLocalPort, transientInstallFwpCompleted=transientInstallFwpCompleted, transientNtpSrvTestFailed=transientNtpSrvTestFailed, logicalCpIfDataTransport=logicalCpIfDataTransport, intervalOduTcmC1dayES=intervalOduTcmC1dayES, deployProvPathEthPathId=deployProvPathEthPathId, shelfDiagnosticsTable=shelfDiagnosticsTable, thresholdSonetLoPathCVHighThres15min=thresholdSonetLoPathCVHighThres15min, intervalPhysConvHighSpeed15minTimeStamp=intervalPhysConvHighSpeed15minTimeStamp, logicalIfDataEncapsulation=logicalIfDataEncapsulation, deployProvControlPlaneWdmDefaultsCmCrankBackTimeout=deployProvControlPlaneWdmDefaultsCmCrankBackTimeout, deployProvPathElementWdmCapRowStatus=deployProvPathElementWdmCapRowStatus, deployProvPathElementOtnDefaultsUpTributaryPort=deployProvPathElementOtnDefaultsUpTributaryPort, connectionOtnConfigTable=connectionOtnConfigTable, deployProvIfCapSigDegThresOduTcmB=deployProvIfCapSigDegThresOduTcmB, intervalDispersionCompensation1dayNumber=intervalDispersionCompensation1dayNumber, alarmFwdAseTableOnPilot=alarmFwdAseTableOnPilot, alarmMaxPowerConsProvModulesToHigh=alarmMaxPowerConsProvModulesToHigh, alarmPrbsRcvActivated=alarmPrbsRcvActivated, deployProvTunnelWdmDefaultsPin=deployProvTunnelWdmDefaultsPin, deployProvIfCapOduTribTimeSlottNo=deployProvIfCapOduTribTimeSlottNo, intervalPhysPerfOscPwr1weekValidFlag=intervalPhysPerfOscPwr1weekValidFlag, intervalDispersionCompensation15minLow=intervalDispersionCompensation15minLow, thresholdSonetLineCVSHighThres1day=thresholdSonetLineCVSHighThres1day, controlPlaneEthDataRsvpAlias=controlPlaneEthDataRsvpAlias, currentOduTcmC15minEntry=currentOduTcmC15minEntry, intervalPhysConvHighSpeed1dayEntry=intervalPhysConvHighSpeed1dayEntry, intervalEthRxHighSpeed1dayValidFlag=intervalEthRxHighSpeed1dayValidFlag, alarmEmbeddedOperationsChannelFailure=alarmEmbeddedOperationsChannelFailure, deployProvTunnelEthDefaultsToTid=deployProvTunnelEthDefaultsToTid, changeServiceDeployProvIfCapOscOpticalSetpoint=changeServiceDeployProvIfCapOscOpticalSetpoint, deployProvIfDefaultsOffset=deployProvIfDefaultsOffset, currentGfp15minEntry=currentGfp15minEntry, farEndIfDataEntry=farEndIfDataEntry, opticalIfDiagBackreflectionPowerReceived=opticalIfDiagBackreflectionPowerReceived, intervalLinkAttenuation15minHigh=intervalLinkAttenuation15minHigh, transientThres1DayExceededOduTcmASES=transientThres1DayExceededOduTcmASES, FspR7FtpServer=FspR7FtpServer, neTrapsinkObjectCreation=neTrapsinkObjectCreation, deployProvIfCapIpAddr=deployProvIfCapIpAddr, deployProvCrsDcnLinkAidCapsTable=deployProvCrsDcnLinkAidCapsTable, thresholdPhysPerfDispersionCompensationHighThres=thresholdPhysPerfDispersionCompensationHighThres, forceDeployProvApsDefaultsForceDestroy=forceDeployProvApsDefaultsForceDestroy, FspR7Time=FspR7Time, intervalPhysPerfChromaticDispersion15minValidFlag=intervalPhysPerfChromaticDispersion15minValidFlag, deployProvApsSignalDegradeSwitching=deployProvApsSignalDegradeSwitching, inventoryCpEthUpDataResources=inventoryCpEthUpDataResources, intervalFarEndPhysPerfOpticalInputPwr1dayNumber=intervalFarEndPhysPerfOpticalInputPwr1dayNumber, connectionOtnDataFromNodeIp=connectionOtnDataFromNodeIp, deployProvControlPlaneWdmDefaultsEntry=deployProvControlPlaneWdmDefaultsEntry, deployProvDcnCapType=deployProvDcnCapType, alarmCpTunnelModificationInProgess=alarmCpTunnelModificationInProgess, thresholdFarEndPhysPerfOpticalInputPwrHigh=thresholdFarEndPhysPerfOpticalInputPwrHigh, controlPlaneEthConfigNaasTraceDetail=controlPlaneEthConfigNaasTraceDetail, deployProvTunnelWdmToNodeIp=deployProvTunnelWdmToNodeIp, changeServiceDeployProvIfCapFunction=changeServiceDeployProvIfCapFunction, intervalPhysPerfOpticalOutputPwr1dayNumber=intervalPhysPerfOpticalOutputPwr1dayNumber, alarmFiberConnectionMissing=alarmFiberConnectionMissing, deployProvSyslogReportsStatus=deployProvSyslogReportsStatus, deployProvLanCapOspf=deployProvLanCapOspf, deployProvPathElementEthEntry=deployProvPathElementEthEntry, eRoadmConfigInitiateEqualization=eRoadmConfigInitiateEqualization, changeServiceDeployProvIfTraceTransmitDapiOdu=changeServiceDeployProvIfTraceTransmitDapiOdu, deployProvTunnelOtnToTid=deployProvTunnelOtnToTid, teNumLinkWdmDataNodeTid=teNumLinkWdmDataNodeTid, crossConnectionDeletion=crossConnectionDeletion, logicalCpIfDataTunnelAid=logicalCpIfDataTunnelAid, FspR7InvertTelemetryInputLogic=FspR7InvertTelemetryInputLogic, intervalOduTcmA1daySES=intervalOduTcmA1daySES, crsConnObjectChange=crsConnObjectChange, deployProvControlPlaneWdmCapRsvpMaxExpRecoveryTime=deployProvControlPlaneWdmCapRsvpMaxExpRecoveryTime, neighborDiscoveryDataFarEndPort=neighborDiscoveryDataFarEndPort, f710GFP=f710GFP, logicalCpIfDataDcnAid=logicalCpIfDataDcnAid, FspR7CpReversionTypeCaps=FspR7CpReversionTypeCaps, changeServiceDeployProvIfSigDegThresReceiver=changeServiceDeployProvIfSigDegThresReceiver, deployProvIfLanAidCapsIndex=deployProvIfLanAidCapsIndex, interfaceDataPayload=interfaceDataPayload, deployProvIfDefaultsOspf=deployProvIfDefaultsOspf, intervalPhysPerfLaserBiasCurrentNormalized15minValidFlag=intervalPhysPerfLaserBiasCurrentNormalized15minValidFlag, tifoDataTable=tifoDataTable, deployProvDcnLanAidCapsTable=deployProvDcnLanAidCapsTable, deployProvModuleDefaultsChannelsNumber=deployProvModuleDefaultsChannelsNumber, deployProvTunnelWdmOifUni=deployProvTunnelWdmOifUni, connectionWdmDataTunnelId=connectionWdmDataTunnelId, deployProvLogicalCpIfVNodeIp=deployProvLogicalCpIfVNodeIp, currentPhysConvCombined1dayCVDE=currentPhysConvCombined1dayCVDE, intervalOtuFec15minExTable=intervalOtuFec15minExTable, alarmThres15MinExceededSonetSectSEFS=alarmThres15MinExceededSonetSectSEFS, alarmThres15MinExceededPhysConvDE=alarmThres15MinExceededPhysConvDE, tunnelWdmConfigTerminationLevel=tunnelWdmConfigTerminationLevel, intervalPhysPerfDiffGrDelay15minTable=intervalPhysPerfDiffGrDelay15minTable, currentOduTcmB15minTable=currentOduTcmB15minTable, currentEthRx3HS15minBroadcastFramesRcv=currentEthRx3HS15minBroadcastFramesRcv, deployProvTunnelWdmCapRecoveryType=deployProvTunnelWdmCapRecoveryType, FspR7ScramblingCaps=FspR7ScramblingCaps, alarmThres15MinExceededMuxES=alarmThres15MinExceededMuxES, changeServiceDeployProvIfDefaultsSigDegThresReceiver=changeServiceDeployProvIfDefaultsSigDegThresReceiver, alarmPumpLaser4TempTooLow=alarmPumpLaser4TempTooLow, tifiConfigEntry=tifiConfigEntry, transientThres1DayExceededOduSES=transientThres1DayExceededOduSES, controlPlaneWdmConfigRaConfigFlag=controlPlaneWdmConfigRaConfigFlag, intervalDispersionCompensation15minValidFlag=intervalDispersionCompensation15minValidFlag, deployProvTunnelOtnConnectionDirection=deployProvTunnelOtnConnectionDirection, thresholdSonetLineMsSESHighThres15min=thresholdSonetLineMsSESHighThres15min, intervalGfp15minValidFlag=intervalGfp15minValidFlag, deployProvPathEthDefaultsEntry=deployProvPathEthDefaultsEntry, deployProvApsRowStatus=deployProvApsRowStatus, deployProvPathElementWdmDefaultsChannelUp=deployProvPathElementWdmDefaultsChannelUp, currentOtu1dayEntry=currentOtu1dayEntry, teNumLinkWdmDataFendTeLinkIp=teNumLinkWdmDataFendTeLinkIp, tunnelWdmConfigRestorationMode=tunnelWdmConfigRestorationMode, deployProvPathOtnCapPathId=deployProvPathOtnCapPathId, intervalSonetSect15minES=intervalSonetSect15minES, sts48callocatedContainer=sts48callocatedContainer, intervalGfpfr15minTHecDiscardedFrames=intervalGfpfr15minTHecDiscardedFrames, interfaceDataFiberType=interfaceDataFiberType, intervalPhysPerfOscPwr1dayTable=intervalPhysPerfOscPwr1dayTable, crsConnDataTunnelAid=crsConnDataTunnelAid, deployProvPortBindingEntry=deployProvPortBindingEntry, intervalPhysPerfCurrent1dayHigh=intervalPhysPerfCurrent1dayHigh, deployProvExChannelMinimumOpticalPowerRcv=deployProvExChannelMinimumOpticalPowerRcv, controlPlaneWdmConfigRaAlarmActivationTime=controlPlaneWdmConfigRaAlarmActivationTime, changeServiceDeployProvIfDefaultsAreaId=changeServiceDeployProvIfDefaultsAreaId, deployProvTunnelOtnCapTunnelNo=deployProvTunnelOtnCapTunnelNo, currentL2EthRx1dayEntry=currentL2EthRx1dayEntry, intervalPhysPerfOlmRxLineAtt1dayNumber=intervalPhysPerfOlmRxLineAtt1dayNumber, deployProvControlPlaneOtnCapCdConfigFlag=deployProvControlPlaneOtnCapCdConfigFlag, moduleDiagnosticsCapabilityLevel=moduleDiagnosticsCapabilityLevel, unusedOtnPathIndex=unusedOtnPathIndex, deployProvModuleDefaultsSingleFiberLocation=deployProvModuleDefaultsSingleFiberLocation, opticalAmplifierInterfaceDiagnosticsOperatingHours=opticalAmplifierInterfaceDiagnosticsOperatingHours, currentGfpSublayer15minEntry=currentGfpSublayer15minEntry, deployProvPortBindingDefaultsEntry=deployProvPortBindingDefaultsEntry, changeServiceDeployProvIfDefaultsTerminationLevel=changeServiceDeployProvIfDefaultsTerminationLevel, currentGfp15minTypeHecDiscardedFrames=currentGfp15minTypeHecDiscardedFrames, deployProvPortBindingCapRemoteNodeIp=deployProvPortBindingCapRemoteNodeIp, currentPhysConvTxHighSpeed1dayCVTX=currentPhysConvTxHighSpeed1dayCVTX, thresholdPhysPerfLatencyLowThres=thresholdPhysPerfLatencyLowThres, deployProvIfDefaultsTimModeOduTcmB=deployProvIfDefaultsTimModeOduTcmB, FspR7FtpServerCaps=FspR7FtpServerCaps, pathElementOtnDataEntry=pathElementOtnDataEntry, currentDiagnosticsAmpere=currentDiagnosticsAmpere, opticalIfDataLagSysIdFend=opticalIfDataLagSysIdFend, changeServiceDeployProvIfCapTraceTransmitSapiOtu=changeServiceDeployProvIfCapTraceTransmitSapiOtu, intervalPhysPerfCurrentOscGain15minTable=intervalPhysPerfCurrentOscGain15minTable, currentPhysConv1dayDE=currentPhysConv1dayDE, deployProvVchChannelRowStatus=deployProvVchChannelRowStatus, edfaConfigVariableGain=edfaConfigVariableGain, alarmBackwardDefectIndicationOduTcmA=alarmBackwardDefectIndicationOduTcmA, deployProvLogicalCpIfCapTeAreaId=deployProvLogicalCpIfCapTeAreaId, alarmThres15MinExceededFecUBE=alarmThres15MinExceededFecUBE, deployProvPathElementEthTable=deployProvPathElementEthTable, alarmLossOfSignalTransmitter=alarmLossOfSignalTransmitter, intervalPhysPerfOscPwr15minTable=intervalPhysPerfOscPwr15minTable, eRoadmDataEntry=eRoadmDataEntry, currentL2EthRx15minBytesFrames256Rcv=currentL2EthRx15minBytesFrames256Rcv, intervalFarEndPhysPerfOpticalInputPwr1dayLow=intervalFarEndPhysPerfOpticalInputPwr1dayLow, FspR7FunctionCrs=FspR7FunctionCrs, currentSonetLine1daySES=currentSonetLine1daySES, deployProvPathElementOtnDefaultsLogicalInterfaceId=deployProvPathElementOtnDefaultsLogicalInterfaceId, deployProvCopyPathOtnCapTable=deployProvCopyPathOtnCapTable, ntpSysConditionSeverityEntry=ntpSysConditionSeverityEntry, currentSubAggregate1dayCrc=currentSubAggregate1dayCrc, farEndPlugDataTransmitChannel=farEndPlugDataTransmitChannel, intervalOtuFec1dayValidFlag=intervalOtuFec1dayValidFlag, forceDeployProvApsPeerAidCapsEntry=forceDeployProvApsPeerAidCapsEntry, deployProvTunnelWdmTunnelScope=deployProvTunnelWdmTunnelScope, intervalL2EthTx15minBytesFrames1024Trmt=intervalL2EthTx15minBytesFrames1024Trmt, pathElementWdmDataPathId=pathElementWdmDataPathId, changeServiceDeployProvIfDefaultsTimModeOduTcmA=changeServiceDeployProvIfDefaultsTimModeOduTcmA, entityStateCapTable=entityStateCapTable, forceDeployProvApsEntry=forceDeployProvApsEntry, thresholdPhysPerfOpticalInputPwrLow=thresholdPhysPerfOpticalInputPwrLow, deployProvLogicalCpIfCapFarEndTid=deployProvLogicalCpIfCapFarEndTid, FspR7ProtectionRole=FspR7ProtectionRole, deployProvControlPlaneEthDefaultsCmCrankBackTimeout=deployProvControlPlaneEthDefaultsCmCrankBackTimeout, currentGfpfr15minGoodFrames=currentGfpfr15minGoodFrames, deployProvTunnelOtnFromAid=deployProvTunnelOtnFromAid, intervalDefectSeconds1dayTable=intervalDefectSeconds1dayTable, intervalL2EthRx15minBroadcastFramesRcv=intervalL2EthRx15minBroadcastFramesRcv, deployProvModuleDefaultsChannelsProvision=deployProvModuleDefaultsChannelsProvision, intervalOtu1dayUAS=intervalOtu1dayUAS, deployProvTunnelOtnDefaultsPin=deployProvTunnelOtnDefaultsPin, deployProvExChannelLineCoding=deployProvExChannelLineCoding, FspR7CpCommandCaps=FspR7CpCommandCaps, vtpEntityDataBandProvision=vtpEntityDataBandProvision, intervalSonetLine15minEntry=intervalSonetLine15minEntry, currentPhysConv1dayCV=currentPhysConv1dayCV, currentPhysConvHighSpeed1dayES=currentPhysConvHighSpeed1dayES, f7eqpWcc10gc=f7eqpWcc10gc, deployProvIfDefaultsTxOffDelay=deployProvIfDefaultsTxOffDelay, logicalCpIfConfigTeAreaId=logicalCpIfConfigTeAreaId, deployProvModuleChannel=deployProvModuleChannel, deployProvTifInputCapInvertTifInputLogic=deployProvTifInputCapInvertTifInputLogic, intervalPhysPerfSignalToNoiseRatio15minMean=intervalPhysPerfSignalToNoiseRatio15minMean, deployProvLogicalCpIfIpType=deployProvLogicalCpIfIpType, intervalPhysPerfOpticalInputPwr1dayHigh=intervalPhysPerfOpticalInputPwr1dayHigh, changeServiceDeployProvIfCapChannelProvisioning=changeServiceDeployProvIfCapChannelProvisioning, plugDataLoopbackAttenuation=plugDataLoopbackAttenuation, intervalPhysPerfSignalToNoiseRatio1dayTable=intervalPhysPerfSignalToNoiseRatio1dayTable, pathElementEthDataTrafficEngineeringType=pathElementEthDataTrafficEngineeringType, thresholdPhysPerfCapDispersionCompensationLowThres=thresholdPhysPerfCapDispersionCompensationLowThres, alarmLossOfTestSeqSynchOpu=alarmLossOfTestSeqSynchOpu, intervalPhysPerfOlmRxLineAtt15minTable=intervalPhysPerfOlmRxLineAtt15minTable, changeServiceDeployProvIfGain=changeServiceDeployProvIfGain, deployProvIfTimModeSonetSection=deployProvIfTimModeSonetSection, deployProvControlPlaneEthCapCtmSetupTimeout=deployProvControlPlaneEthCapCtmSetupTimeout, deployProvPppIpCapForceDestroy=deployProvPppIpCapForceDestroy, deployProvControlPlaneOtnCapCtmMaximumRetryNumber=deployProvControlPlaneOtnCapCtmMaximumRetryNumber, intervalOduTcmA1dayUAS=intervalOduTcmA1dayUAS, deployProvIfCapRevertiveMode=deployProvIfCapRevertiveMode, currentGfpfrSublayer1dayEntry=currentGfpfrSublayer1dayEntry, intervalEthRxHighSpeed15minValidFlag=intervalEthRxHighSpeed15minValidFlag, thresholdSonetLineEntry=thresholdSonetLineEntry, neType=neType, deployProvControlPlaneOtnDefaultsCtmConfigFlag=deployProvControlPlaneOtnDefaultsCtmConfigFlag, deployProvIfDispersionSetting=deployProvIfDispersionSetting, deployProvIfCapTraceTransmitOpspOduTcmA=deployProvIfCapTraceTransmitOpspOduTcmA, deployProvControlPlaneEthDefaultsCdConfigFlag=deployProvControlPlaneEthDefaultsCdConfigFlag, deployProvLanCapType=deployProvLanCapType, deployProvPortBindingTable=deployProvPortBindingTable, deployProvLogicalCpIfDefaultsFarEndTid=deployProvLogicalCpIfDefaultsFarEndTid, thresholdSonetLineSESHighThres1day=thresholdSonetLineSESHighThres1day, logicalCpIfDataVNodeIp=logicalCpIfDataVNodeIp, eRoadmInfoUpgradePorts=eRoadmInfoUpgradePorts, neFtpClient=neFtpClient, currentSonetHoPath15minCV=currentSonetHoPath15minCV, deployProvCopyPathWdmTable=deployProvCopyPathWdmTable, changeServiceDeployProvIfCapTraceTransmitOpspOduTcmC=changeServiceDeployProvIfCapTraceTransmitOpspOduTcmC, thresholdSonetLineSESHighThres15min=thresholdSonetLineSESHighThres15min, maxBackplaneBandwidth=maxBackplaneBandwidth, forceDeployProvApsApsType=forceDeployProvApsApsType, intervalFarEndPhysPerfOpticalInputPwr1dayMean=intervalFarEndPhysPerfOpticalInputPwr1dayMean, intervalPhysPerfSignalToNoiseRatio1weekValidFlag=intervalPhysPerfSignalToNoiseRatio1weekValidFlag, alarmThresOptPowerCtrlFailureLow=alarmThresOptPowerCtrlFailureLow, pathElementEthDataEntry=pathElementEthDataEntry, deployProvModuleDefaultsGainRange=deployProvModuleDefaultsGainRange, changeServiceDeployProvIfCapPumpPower=changeServiceDeployProvIfCapPumpPower, connectionOtnDataFromAid=connectionOtnDataFromAid, alarmPilotReceiveLevelHigh=alarmPilotReceiveLevelHigh, alarmThres15MinExceededPhysConvCVTX=alarmThres15MinExceededPhysConvCVTX)
mibBuilder.exportSymbols("FspR7-MIB", currentEthTx1dayTable=currentEthTx1dayTable, FspR7ChannelBandwidthCaps=FspR7ChannelBandwidthCaps, f7eqpWca10gc=f7eqpWca10gc, deployProvIfDefaultsTraceTransmitDapiOduTcmA=deployProvIfDefaultsTraceTransmitDapiOduTcmA, connectionOtnDataFacilityType=connectionOtnDataFacilityType, deployProvIfDefaultsLagLoadBallanceSource=deployProvIfDefaultsLagLoadBallanceSource, changeServiceDeployProvIfCapEntry=changeServiceDeployProvIfCapEntry, intervalOduTcmC1dayNumber=intervalOduTcmC1dayNumber, deployProvLogicalCpIfCapOspf=deployProvLogicalCpIfCapOspf, deployProvTunnelEthCapTunnelNo=deployProvTunnelEthCapTunnelNo, deployProvIfCapTimingSource=deployProvIfCapTimingSource, crsConnDeployProvDefaultsType=crsConnDeployProvDefaultsType, connectionWdmDataConnectionNo=connectionWdmDataConnectionNo, alarmPowerFailure=alarmPowerFailure, deployProvLogicalCpIfDefaultsFarEndLifId=deployProvLogicalCpIfDefaultsFarEndLifId, intervalSonetLoPath15minValidFlag=intervalSonetLoPath15minValidFlag, deployProvControlPlaneWdmDefaultsRmTraceDetail=deployProvControlPlaneWdmDefaultsRmTraceDetail, deployProvIfOffset=deployProvIfOffset, intervalL2EthTx15minFramesTrmt=intervalL2EthTx15minFramesTrmt, intervalSonetSect15minTimeStamp=intervalSonetSect15minTimeStamp, currentL2EthTx1dayMulticastFramesTrmt=currentL2EthTx1dayMulticastFramesTrmt, authTrapSrcIp=authTrapSrcIp, alarmTraceIdentifierMismatchOduTcmA=alarmTraceIdentifierMismatchOduTcmA, intervalPhysPerfEstimatedSignalGain1dayTable=intervalPhysPerfEstimatedSignalGain1dayTable, thresholdEthRxHighSpeedTable=thresholdEthRxHighSpeedTable, intervalPhysPerfOpticalInputPwr1dayLow=intervalPhysPerfOpticalInputPwr1dayLow, changeServiceDeployProvIfCapSigDegThresOdu=changeServiceDeployProvIfCapSigDegThresOdu, snmpAgentStateChanged=snmpAgentStateChanged, currentEthRx3HS1dayBytes=currentEthRx3HS1dayBytes, deployProvPathElementWdmDefaultsUpstreamModuleAid=deployProvPathElementWdmDefaultsUpstreamModuleAid, deployProvApsCapEntry=deployProvApsCapEntry, currentEthTx1dayCrcFramesEgress=currentEthTx1dayCrcFramesEgress, deployProvCrsDcnEccAidCapsIndex=deployProvCrsDcnEccAidCapsIndex, changeServiceDeployProvIfCapTraceTransmitSapiOduTcmC=changeServiceDeployProvIfCapTraceTransmitSapiOduTcmC, inventoryCpOtnUpDataFacilities=inventoryCpOtnUpDataFacilities, intervalEthRx3HS15minBytes=intervalEthRx3HS15minBytes, opticalAmplifierInterfaceDiagnosticsLaserBiasCurrentLevelAverage=opticalAmplifierInterfaceDiagnosticsLaserBiasCurrentLevelAverage, intervalOtu1dayTimeStamp=intervalOtu1dayTimeStamp, deployProvControlPlaneEthCapCtmMaximumRetryWait=deployProvControlPlaneEthCapCtmMaximumRetryWait, intervalGfp1dayTimeStamp=intervalGfp1dayTimeStamp, currentOtuFec1dayExUBE=currentOtuFec1dayExUBE, deployProvIfTerminationLevel=deployProvIfTerminationLevel, deployProvLogicalCpIfAuthString=deployProvLogicalCpIfAuthString, sts1allocatedContainer=sts1allocatedContainer, currentL2EthRx15minEntry=currentL2EthRx15minEntry, tunnelWdmDataErrorCodeMajor=tunnelWdmDataErrorCodeMajor, intervalL2EthTx1dayPauseFramesTrmt=intervalL2EthTx1dayPauseFramesTrmt, intervalEthRx3HS15minValidFlag=intervalEthRx3HS15minValidFlag, deployProvLogicalCpIfTeAreaId=deployProvLogicalCpIfTeAreaId, crsConnDeployProvConn=crsConnDeployProvConn, vtpEntityDataFrequency=vtpEntityDataFrequency, deployProvTunnelEthCapToTid=deployProvTunnelEthCapToTid, connectionWdmDataTunnelNumberExtension=connectionWdmDataTunnelNumberExtension, changeServiceDeployProvIfVariableGain=changeServiceDeployProvIfVariableGain, thresholdPhysPerfDispersionCompensationLowThres=thresholdPhysPerfDispersionCompensationLowThres, deployProvLogicalIfIpType=deployProvLogicalIfIpType, intervalPhysPerfOlmTxLineAtt15minTimeStamp=intervalPhysPerfOlmTxLineAtt15minTimeStamp, currentOtu15minBbe=currentOtu15minBbe, tunnelEthDataTunnelId=tunnelEthDataTunnelId, deployProvTunnelEthDefaultsTunnelScope=deployProvTunnelEthDefaultsTunnelScope, FspR7SnmpSecuLevel=FspR7SnmpSecuLevel, FspR7AutoThresReset=FspR7AutoThresReset, thresholdGfpTypeHecDiscardedFramesHighThres1Day=thresholdGfpTypeHecDiscardedFramesHighThres1Day, FspR7StartPmSnapshot=FspR7StartPmSnapshot, FspR7RemoteAlarmPath=FspR7RemoteAlarmPath, tifiDataEntry=tifiDataEntry, connectionOtnConfigCancelModifier=connectionOtnConfigCancelModifier, intervalPhysPerfOlmRxLineAtt1dayHigh=intervalPhysPerfOlmRxLineAtt1dayHigh, deployProvModuleDefaultsLanAid=deployProvModuleDefaultsLanAid, opticalAmplifierEquipmentDiagnosticsSubTemp=opticalAmplifierEquipmentDiagnosticsSubTemp, apsProtGroupStatusProtectionIndex=apsProtGroupStatusProtectionIndex, areaAidCapStringCap=areaAidCapStringCap, deployProvOpticalLinkDefaultsRxLineAttenuation=deployProvOpticalLinkDefaultsRxLineAttenuation, deployProvApsCapWaitToRestore=deployProvApsCapWaitToRestore, deployProvPathElementWdmCapEntry=deployProvPathElementWdmCapEntry, FspR7LagPorts=FspR7LagPorts, deployProvIfCapLagPortType=deployProvIfCapLagPortType, deployProvPathWdmDefaultsTable=deployProvPathWdmDefaultsTable, currentL2EthRx15minBytesFrames65Rcv=currentL2EthRx15minBytesFrames65Rcv, farEndIfConfigLoopConfig=farEndIfConfigLoopConfig, currentEthRx3HS1dayBytesFrames128Rcv=currentEthRx3HS1dayBytesFrames128Rcv, tunnelOtnDataConnectionDirection=tunnelOtnDataConnectionDirection, pathWdmDataRole=pathWdmDataRole, changeServiceDeployProvIfBand=changeServiceDeployProvIfBand, neScuRing=neScuRing, intervalOtu1dayEntry=intervalOtu1dayEntry, crsConnDataType=crsConnDataType, thresholdPhysConvCombinedESHighThres1day=thresholdPhysConvCombinedESHighThres1day, deployProvPlugMaxDataRate=deployProvPlugMaxDataRate, controlPlaneEthConfigCdTraceDetail=controlPlaneEthConfigCdTraceDetail, transientThres1DayExceededOduTcmBSES=transientThres1DayExceededOduTcmBSES, deployProvControlPlaneWdmNaasTraceDetail=deployProvControlPlaneWdmNaasTraceDetail, inventoryCpOtnCrsUpDataEntry=inventoryCpOtnCrsUpDataEntry, changeServiceDeployProvIfTraceTransmitDapiOtu=changeServiceDeployProvIfTraceTransmitDapiOtu, intervalOduTcmC15minSES=intervalOduTcmC15minSES, virtualOpticalChannelDataConnectState=virtualOpticalChannelDataConnectState, dcnTopologyConfigCapActivateDetect=dcnTopologyConfigCapActivateDetect, entityStateSecondaryStates=entityStateSecondaryStates, neEqlzAdminCap=neEqlzAdminCap, deployProvPathElementEthCapLifIp=deployProvPathElementEthCapLifIp, alarmDatabaseFailure=alarmDatabaseFailure, tunnelWdmDataTunnelId=tunnelWdmDataTunnelId, deployProvControlPlaneEthCapCtmShutdownTimeout=deployProvControlPlaneEthCapCtmShutdownTimeout, teUnnumLinkOtnDataFendNodeIp=teUnnumLinkOtnDataFendNodeIp, changeServiceDeployProvIfDefaultsTraceTransmitOpspOtu=changeServiceDeployProvIfDefaultsTraceTransmitOpspOtu, tunnelOtnDataTable=tunnelOtnDataTable, alarmFanAlarm=alarmFanAlarm, deployProvTunnelOtnCapToNodeIp=deployProvTunnelOtnCapToNodeIp, logicalCpIfConfigAuthString=logicalCpIfConfigAuthString, deployProvPathElementOtnCapLifIp=deployProvPathElementOtnCapLifIp, tunnelOtnConfigCommand=tunnelOtnConfigCommand, deployProvControlPlaneEthTedbMinAdvertWait=deployProvControlPlaneEthTedbMinAdvertWait, changeServiceDeployProvIfBitrate=changeServiceDeployProvIfBitrate, thresholdSonetSectCVHighThres15min=thresholdSonetSectCVHighThres15min, facilityAttributeValueChange=facilityAttributeValueChange, FspR7PmSnapshotStatus=FspR7PmSnapshotStatus, alarmThres15MinExceededOduTcmABbe=alarmThres15MinExceededOduTcmABbe, authTrapLctIp=authTrapLctIp, deployProvIfSigDegThreshold=deployProvIfSigDegThreshold, farEndIfConfigCapEntry=farEndIfConfigCapEntry, syslogConfigEntry=syslogConfigEntry, opticalIfDiagChromaticDispersionCompensation=opticalIfDiagChromaticDispersionCompensation, crsConnDeployProvRowStatus=crsConnDeployProvRowStatus, deployProvPortBindingRowStatus=deployProvPortBindingRowStatus, tifiDataTifAlarmType=tifiDataTifAlarmType, controlPlaneWdmConfigTable=controlPlaneWdmConfigTable, transientDispersionCompFailed=transientDispersionCompFailed, deployProvLogicalCpIfDefaultsPushedFarEndIpHeader=deployProvLogicalCpIfDefaultsPushedFarEndIpHeader, deployProvControlPlaneOtnCapCmTraceDetail=deployProvControlPlaneOtnCapCmTraceDetail, intervalGfpt15minDiscardedSuperblocks=intervalGfpt15minDiscardedSuperblocks, FspR7EqlzAdminStateCaps=FspR7EqlzAdminStateCaps, forceDeployProvApsCapSDswitching=forceDeployProvApsCapSDswitching, logicalIfDataDcnAid=logicalIfDataDcnAid, thresholdOduTcmCOduTcmCBbeHighThres1day=thresholdOduTcmCOduTcmCBbeHighThres1day, eRoadmDataSumTransmited=eRoadmDataSumTransmited, changeServiceDeployProvIfCapAttenuationGradient=changeServiceDeployProvIfCapAttenuationGradient, currentEthRx3HS15minUndersizedFramesRcv=currentEthRx3HS15minUndersizedFramesRcv, shelfInfoOscChannel=shelfInfoOscChannel, opticalIfDataLagSysPrio=opticalIfDataLagSysPrio, intervalPhysConv15minEntry=intervalPhysConv15minEntry, changeServiceDeployProvIfCapPayload=changeServiceDeployProvIfCapPayload, deployProvIfDefaultsTraceTransmitSapiOdu=deployProvIfDefaultsTraceTransmitSapiOdu, deployProvIfDefaultsSigDegPeriodOdu=deployProvIfDefaultsSigDegPeriodOdu, crsConnWdmDataCrsFunction=crsConnWdmDataCrsFunction, transientDatabaseActivationFail=transientDatabaseActivationFail, intervalEthRx15minTable=intervalEthRx15minTable, teUnnumLinkEthDataPhysicalLink=teUnnumLinkEthDataPhysicalLink, deployProvControlPlaneWdmCdbMaxSize=deployProvControlPlaneWdmCdbMaxSize, intervalEthRxHighSpeed1dayTimeStamp=intervalEthRxHighSpeed1dayTimeStamp, deployProvIfCapLanAid=deployProvIfCapLanAid, dcnOspfAreaInterfaceTable=dcnOspfAreaInterfaceTable, FspR7CpVTeTypeCaps=FspR7CpVTeTypeCaps, logicalCpIfDataFarEndLifId=logicalCpIfDataFarEndLifId, crsConnDeployProvAlias=crsConnDeployProvAlias, controlPlaneOtnEntityStateCapAdmin=controlPlaneOtnEntityStateCapAdmin, deployProvPortBindingCapRemotePort=deployProvPortBindingCapRemotePort, thresholdSonetSectESHighThres15min=thresholdSonetSectESHighThres15min, deployProvPlugDefaultsChannelId=deployProvPlugDefaultsChannelId, deployProvIfCapTraceExpectedOduTcmB=deployProvIfCapTraceExpectedOduTcmB, alarmBrPwrRxTooHigh=alarmBrPwrRxTooHigh, intervalPhysPerfCurrentOscGain1weekLow=intervalPhysPerfCurrentOscGain1weekLow, tunnelOtnDataOifUni=tunnelOtnDataOifUni, deployProvLogicalCpIfCapEncoding=deployProvLogicalCpIfCapEncoding, controlPlaneWdmDataCtmAlias=controlPlaneWdmDataCtmAlias, FspR7PrbsPmReset=FspR7PrbsPmReset, opticalIfConfigAutoThresReset=opticalIfConfigAutoThresReset, alarmLocalOscTemperatureTooLow=alarmLocalOscTemperatureTooLow, connectionEthDataTable=connectionEthDataTable, intervalPhysPerfEstimatedSignalGain1weekMean=intervalPhysPerfEstimatedSignalGain1weekMean, intervalEthRx3HS15minTimeStamp=intervalEthRx3HS15minTimeStamp, deployProvControlPlaneEthDefaultsCtmSetupTimeout=deployProvControlPlaneEthDefaultsCtmSetupTimeout, tunnelOtnDataToAid=tunnelOtnDataToAid, intervalOdu1dayBbe=intervalOdu1dayBbe, alarmMultipleFanFailure=alarmMultipleFanFailure, interfaceConfigTable=interfaceConfigTable, currentEthRxHighSpeed1dayGoodFrames=currentEthRxHighSpeed1dayGoodFrames, thresholdPhysPerfCapDispersionCompensationHighThres=thresholdPhysPerfCapDispersionCompensationHighThres, neNtpServer1=neNtpServer1, deployProvIfDefaultsIpAddr=deployProvIfDefaultsIpAddr, intervalEthRx1dayPauseFrames=intervalEthRx1dayPauseFrames, moduleDataMidstagePorts=moduleDataMidstagePorts, deployProvControlPlaneEthRmTraceDetail=deployProvControlPlaneEthRmTraceDetail, controlPlaneEthConfigRsvpMaxExpRecoveryTime=controlPlaneEthConfigRsvpMaxExpRecoveryTime, alarmOosDisabled=alarmOosDisabled, currentEthRx3HS1dayCrcFrames=currentEthRx3HS1dayCrcFrames, deployProvControlPlaneWdmCapCmFisFrsTimeout=deployProvControlPlaneWdmCapCmFisFrsTimeout, FspR7EntityType=FspR7EntityType, controlPlaneEthConfigTedbTraceDetail=controlPlaneEthConfigTedbTraceDetail, currentPmSnapshotBackreflectionPowerReceived=currentPmSnapshotBackreflectionPowerReceived, currentGfpfr1dayElapsedTime=currentGfpfr1dayElapsedTime, pathElementWdmDataChannelUp=pathElementWdmDataChannelUp, currentPhysConv15minEntry=currentPhysConv15minEntry, deployProvOpticalLinkRowStatus=deployProvOpticalLinkRowStatus, tunnelEthDataEntry=tunnelEthDataEntry, deployProvExChannelPMDTransmit=deployProvExChannelPMDTransmit, currentOtuFec15minBERCE=currentOtuFec15minBERCE, deployProvOpticalLinkRxLineAttenuation=deployProvOpticalLinkRxLineAttenuation, teNumLinkEthDataNodeIp=teNumLinkEthDataNodeIp, intervalPhysPerfPumpPwr1weekTable=intervalPhysPerfPumpPwr1weekTable, deployProvOpticalLinkDefaultsTable=deployProvOpticalLinkDefaultsTable, deployProvIfDefaultsTraceTransmitOpspOtu=deployProvIfDefaultsTraceTransmitOpspOtu, connectionOtnDataDestinationTna=connectionOtnDataDestinationTna, deployProvApsFarEndIp=deployProvApsFarEndIp, deployProvControlPlaneEthDefaultsCmConfigFlag=deployProvControlPlaneEthDefaultsCmConfigFlag, deployProvTunnelWdmDefaultsProvisionedPaths=deployProvTunnelWdmDefaultsProvisionedPaths, alarmLockedDefectOduTcmA=alarmLockedDefectOduTcmA, changeServiceDeployProvIfDefaultsTcmALevel=changeServiceDeployProvIfDefaultsTcmALevel, deployProvPathElementWdmNodeIp=deployProvPathElementWdmNodeIp, deployProvExChannelFecType=deployProvExChannelFecType, forceDeployProvApsWorkingAidCapsIndex=forceDeployProvApsWorkingAidCapsIndex, thresholdPhysConvESHighThres15min=thresholdPhysConvESHighThres15min, thresholdSonetSectSESHighThres15min=thresholdSonetSectSESHighThres15min, deployProvShelfEntry=deployProvShelfEntry, crsConnConfigEntry=crsConnConfigEntry, deployProvLogicalCpIfDefaultsIpAddrMask=deployProvLogicalCpIfDefaultsIpAddrMask, thresholdPhysPerfLaserTempLowThres=thresholdPhysPerfLaserTempLowThres, intervalPhysPerfDiffGrDelay15minTimeStamp=intervalPhysPerfDiffGrDelay15minTimeStamp, deployProvModuleDefaultsRowStatus=deployProvModuleDefaultsRowStatus, FspR7ConnectorTypeCaps=FspR7ConnectorTypeCaps, deployProvModuleDefaultsTilt=deployProvModuleDefaultsTilt, deployProvConnNonStdCapFromTable=deployProvConnNonStdCapFromTable, alarmLaserBiasCurrentNormalizedtooHigh=alarmLaserBiasCurrentNormalizedtooHigh, deployProvPathElementOtnDefaultsNodeIp=deployProvPathElementOtnDefaultsNodeIp, teUnnumLinkOtnDataNumber=teUnnumLinkOtnDataNumber, intervalGfpt15minTable=intervalGfpt15minTable, SourceIpAddressCaps=SourceIpAddressCaps, intervalGfp1dayTypeHecCorrectedFrames=intervalGfp1dayTypeHecCorrectedFrames, deployProvLogicalCpIfDefaultsTransport=deployProvLogicalCpIfDefaultsTransport, forceDeployProvApsPeerAidCapsIndex=forceDeployProvApsPeerAidCapsIndex, intervalLatency1weekMean=intervalLatency1weekMean, controlPlaneWdmConfigTedbMinAdvertWait=controlPlaneWdmConfigTedbMinAdvertWait, alarmTemperatureTooLow=alarmTemperatureTooLow, deployProvLogicalCpIfDeadInterval=deployProvLogicalCpIfDeadInterval, deployProvLogicalCpIfCapIpAddr=deployProvLogicalCpIfCapIpAddr, deployProvPppIpCapBitrate=deployProvPppIpCapBitrate, currentSonetLoPath1daySES=currentSonetLoPath1daySES, FspR7EquipmentType=FspR7EquipmentType, deployProvLogicalCpIfDefaultsEncoding=deployProvLogicalCpIfDefaultsEncoding, intervalFarEndPhysPerfOpticalInputPwr1weekLow=intervalFarEndPhysPerfOpticalInputPwr1weekLow, currentOduTcmA1dayUAS=currentOduTcmA1dayUAS, neOtnSesThreshold=neOtnSesThreshold, deployProvModuleDefaultsReach=deployProvModuleDefaultsReach, deployProvControlPlaneOtnRmTraceTarget=deployProvControlPlaneOtnRmTraceTarget, deployProvControlPlaneWdmCdTraceDetail=deployProvControlPlaneWdmCdTraceDetail, currentEthRx3HS15minGoodFrames=currentEthRx3HS15minGoodFrames, controlPlaneOtnDataRaAlias=controlPlaneOtnDataRaAlias, connectionWdmConfigCancelConnEntities=connectionWdmConfigCancelConnEntities, deployProvApsDefaultsWaitToRestore=deployProvApsDefaultsWaitToRestore, intervalPhysPerfBackreflectionPwrRcv15minTimeStamp=intervalPhysPerfBackreflectionPwrRcv15minTimeStamp, deployProvLogicalIfCapAreaId=deployProvLogicalIfCapAreaId, intervalDispersionCompensation1dayMean=intervalDispersionCompensation1dayMean, thresholdPhysPerfCapBrPwrReceivedHighThres=thresholdPhysPerfCapBrPwrReceivedHighThres, deployProvIfDefaultsTraceFormSonetSection=deployProvIfDefaultsTraceFormSonetSection, deployProvTunnelEthCapToAid=deployProvTunnelEthCapToAid)
mibBuilder.exportSymbols("FspR7-MIB", currentOduTcmC15minSES=currentOduTcmC15minSES, capabilityDataEntry=capabilityDataEntry, currentPhysConvTxHighSpeed15minElapsedTime=currentPhysConvTxHighSpeed15minElapsedTime, ethTunnelResultNotification=ethTunnelResultNotification, currentOdu1dayBbe=currentOdu1dayBbe, thresholdEthRxDiscardedFramesHighThres15Min=thresholdEthRxDiscardedFramesHighThres15Min, tunnelWdmDataRfiList=tunnelWdmDataRfiList, fspUserManagementDefaultsTable=fspUserManagementDefaultsTable, controlPlaneOtnConfigNaasConfigFlag=controlPlaneOtnConfigNaasConfigFlag, intervalOtu15minBbe=intervalOtu15minBbe, tunnelEthConfigAbortProcess=tunnelEthConfigAbortProcess, deployProvTunnelOtnTunnelId=deployProvTunnelOtnTunnelId, vchDataEntry=vchDataEntry, f7eqpWcm2g5c=f7eqpWcm2g5c, FspR7TopologyType=FspR7TopologyType, controlPlaneWdmConfigCtmTraceDetail=controlPlaneWdmConfigCtmTraceDetail, FspR7LineCodingCaps=FspR7LineCodingCaps, opticalIfConfigCac=opticalIfConfigCac, connectionOtnDataBitrate=connectionOtnDataBitrate, apsProtFacilityConfigCapEntry=apsProtFacilityConfigCapEntry, intervalSonetLine1dayUAS=intervalSonetLine1dayUAS, plugInventoryEntry=plugInventoryEntry, alarmThres15MinExceededGfpCHEC=alarmThres15MinExceededGfpCHEC, opticalIfConfigOpticalSetPoint=opticalIfConfigOpticalSetPoint, deployProvPathElementWdmDefaultsTie=deployProvPathElementWdmDefaultsTie, FspR7ChannelSpacingCaps=FspR7ChannelSpacingCaps, apsProtFacilityConfigCapSwitchCommand=apsProtFacilityConfigCapSwitchCommand, changeServiceDeployProvIfTraceTransmitDapiOduTcmC=changeServiceDeployProvIfTraceTransmitDapiOduTcmC, neighborDiscoveryDataFarEndTranLayerTermPoint=neighborDiscoveryDataFarEndTranLayerTermPoint, intervalEthTx15minTimeStamp=intervalEthTx15minTimeStamp, thresholdPhysPerfCapAttRxLow=thresholdPhysPerfCapAttRxLow, currentPhysConvTxHighSpeed15minSETX=currentPhysConvTxHighSpeed15minSETX, deployProvTunnelEthCapAlias=deployProvTunnelEthCapAlias, deployProvControlPlaneWdmDefaultsCtmRetryWait=deployProvControlPlaneWdmDefaultsCtmRetryWait, deployProvTunnelWdmDefaultsRestorationType=deployProvTunnelWdmDefaultsRestorationType, alarmFanUnitAlarm=alarmFanUnitAlarm, intervalEthRx3HS1dayControlFrameRcv=intervalEthRx3HS1dayControlFrameRcv, deployProvControlPlaneOtnDefaultsTedbRouterId=deployProvControlPlaneOtnDefaultsTedbRouterId, deployProvTunnelEthCapFromAid=deployProvTunnelEthCapFromAid, neAlarmProfileApply=neAlarmProfileApply, interfaceDataMonLevel=interfaceDataMonLevel, intervalLinkAttenuation1weekTable=intervalLinkAttenuation1weekTable, otdrDataEntry=otdrDataEntry, syslogConfigStatus=syslogConfigStatus, alarmLinkAttenuationTooHigh=alarmLinkAttenuationTooHigh, currentL2EthTx1dayBytesFrames1024Trmt=currentL2EthTx1dayBytesFrames1024Trmt, deployProvCrsDcnEccAidCapsEntry=deployProvCrsDcnEccAidCapsEntry, thresholdSubAggregateSESHighThres1day=thresholdSubAggregateSESHighThres1day, wdmChannelModuleInventoryChannelId=wdmChannelModuleInventoryChannelId, deployProvIfCapTraceTransmitSapiOdu=deployProvIfCapTraceTransmitSapiOdu, thresholdPhysPerfOpticalInputPwrHigh=thresholdPhysPerfOpticalInputPwrHigh, routingIpRowStatus=routingIpRowStatus, alarmSignalDegradationonLinkVector=alarmSignalDegradationonLinkVector, deployProvIfDefaultsSigDegPeriodIntegration=deployProvIfDefaultsSigDegPeriodIntegration, controlPlaneEthEntityStateAdmin=controlPlaneEthEntityStateAdmin, deployProvIfCapTraceExpectedOduTcmA=deployProvIfCapTraceExpectedOduTcmA, intervalOtuFec15minES=intervalOtuFec15minES, neEqlzInterval=neEqlzInterval, inventoryCpEthCrsDownDataEntry=inventoryCpEthCrsDownDataEntry, pathOtnDataPathType=pathOtnDataPathType, deployProvPathElementEthDefaultsLifIp=deployProvPathElementEthDefaultsLifIp, thresholdOduUASHighThres1day=thresholdOduUASHighThres1day, FspR7CpCancConnection=FspR7CpCancConnection, tunnelOtnDataComputedPaths=tunnelOtnDataComputedPaths, deployProvIfDefaultsSigDegPeriodOtu=deployProvIfDefaultsSigDegPeriodOtu, deployProvControlPlaneEthDefaultsRmConfigFlag=deployProvControlPlaneEthDefaultsRmConfigFlag, intervalEthRx1dayCrcFrames=intervalEthRx1dayCrcFrames, intervalFarEndPhysPerfOpticalOutputPwr15minTimeStamp=intervalFarEndPhysPerfOpticalOutputPwr15minTimeStamp, deployProvConnNonStdCapFromEntry=deployProvConnNonStdCapFromEntry, alarmSignalDegradeOduTcmC=alarmSignalDegradeOduTcmC, changeServiceDeployProvIfTraceTransmitOpspOduTcmC=changeServiceDeployProvIfTraceTransmitOpspOduTcmC, intervalPhysPerfOlmRxLineAtt15minMean=intervalPhysPerfOlmRxLineAtt15minMean, deployProvControlPlaneWdmCapRsvpConfigFlag=deployProvControlPlaneWdmCapRsvpConfigFlag, moduleConfigAlias=moduleConfigAlias, deployProvPathElementWdmEntry=deployProvPathElementWdmEntry, deployProvControlPlaneOtnTedbMaxSize=deployProvControlPlaneOtnTedbMaxSize, thresholdOduTcmBEntry=thresholdOduTcmBEntry, thresholdSonetLineUASHighThres15min=thresholdSonetLineUASHighThres15min, deployProvVchChannelDefaultsTable=deployProvVchChannelDefaultsTable, tunnelWdmDataEntry=tunnelWdmDataEntry, deployProvControlPlaneWdmRmTraceDetail=deployProvControlPlaneWdmRmTraceDetail, controlPlaneOtnConfigCdResyncTimeout=controlPlaneOtnConfigCdResyncTimeout, deployProvCrsDcnLinkAidCapsIndex=deployProvCrsDcnLinkAidCapsIndex, intervalEthRx3HS1dayBytesFrames1024Rcv=intervalEthRx3HS1dayBytesFrames1024Rcv, deployProvLogicalIfOspf=deployProvLogicalIfOspf, intervalSonetLoPath15minCV=intervalSonetLoPath15minCV, deployProvIfSigDegThresSonetSection=deployProvIfSigDegThresSonetSection, deployProvControlPlaneOtnRmTraceDetail=deployProvControlPlaneOtnRmTraceDetail, alarmDispertionTunningCondition=alarmDispertionTunningCondition, thresholdOtuFecSublayerExUBEHighThres1day=thresholdOtuFecSublayerExUBEHighThres1day, alarmLockedDefectOduTcmC=alarmLockedDefectOduTcmC, alarmCarrierFreqOffsetTooHigh=alarmCarrierFreqOffsetTooHigh, deployProvTifInputDefaultsRowStatus=deployProvTifInputDefaultsRowStatus, intervalL2EthTx15minBytesFrames128Trmt=intervalL2EthTx15minBytesFrames128Trmt, deployProvControlPlaneOtnCtmMaximumRetryWait=deployProvControlPlaneOtnCtmMaximumRetryWait, sts1allocatedTable=sts1allocatedTable, deployProvLogicalCpIfCapAreaId=deployProvLogicalCpIfCapAreaId, deployProvPathElementOtnNodeIp=deployProvPathElementOtnNodeIp, intervalPhysPerfSignalToNoiseRatio1dayHigh=intervalPhysPerfSignalToNoiseRatio1dayHigh, thresholdPhysPerfCapRoundTripDelayLowThres=thresholdPhysPerfCapRoundTripDelayLowThres, moduleDiagnosticsTable=moduleDiagnosticsTable, alarmThres15MinExceededSonetLineCV=alarmThres15MinExceededSonetLineCV, intervalPhysPerfSignalToNoiseRatio1weekTable=intervalPhysPerfSignalToNoiseRatio1weekTable, deployProvPathWdmRowStatus=deployProvPathWdmRowStatus, currentOduTcmB15minBbe=currentOduTcmB15minBbe, alarmServerSignalFailureODUcrs=alarmServerSignalFailureODUcrs, intervalPhysPerfPumpPwr1dayValidFlag=intervalPhysPerfPumpPwr1dayValidFlag, lanIpConfigIpAddrMask=lanIpConfigIpAddrMask, deployProvLogicalIfDefaultsLanLinkAid=deployProvLogicalIfDefaultsLanLinkAid, thresholdOduTcmAUASHighThres15min=thresholdOduTcmAUASHighThres15min, deployProvControlPlaneOtnTedbMinAdvertWait=deployProvControlPlaneOtnTedbMinAdvertWait, moduleConfigEqlzAdmin=moduleConfigEqlzAdmin, teUnnumLinkEthDataEntry=teUnnumLinkEthDataEntry, currentConditions=currentConditions, deployProvTifInputDefaultsInvertTifInputLogic=deployProvTifInputDefaultsInvertTifInputLogic, deployProvTunnelWdmDefaultsRestorationPathsComputed=deployProvTunnelWdmDefaultsRestorationPathsComputed, deployProvIfOspf=deployProvIfOspf, currentEthTx1dayGoodFramesx=currentEthTx1dayGoodFramesx, currentPhysConv15minDE=currentPhysConv15minDE, deployProvShelfAdmin=deployProvShelfAdmin, currentEthRxHighSpeed1dayElapsedTime=currentEthRxHighSpeed1dayElapsedTime, connectionWdmDataStuff=connectionWdmDataStuff, currentOduTcmA1dayES=currentOduTcmA1dayES, deployProvModuleRoadmNumber=deployProvModuleRoadmNumber, opticalIfConfigXfpDecisionThres=opticalIfConfigXfpDecisionThres, deployProvPathElementEthDefaultsEntry=deployProvPathElementEthDefaultsEntry, currentEthRx3HS15minMulticastFramesRcv=currentEthRx3HS15minMulticastFramesRcv, changeServiceDeployProvIfDefaultsAutonegotiation=changeServiceDeployProvIfDefaultsAutonegotiation, intervalL2EthRx15minUndersizedFramesRcv=intervalL2EthRx15minUndersizedFramesRcv, deployProvTunnelWdmCapTunnelId=deployProvTunnelWdmCapTunnelId, eroadmIfDiagnosticsOutputPower=eroadmIfDiagnosticsOutputPower, FspR7CpPathType=FspR7CpPathType, thresholdOtuFecSESHighThres1day=thresholdOtuFecSESHighThres1day, interfaceConfigCapDataLayerPmReset=interfaceConfigCapDataLayerPmReset, currentOduTcmC1dayTable=currentOduTcmC1dayTable, intervalPhysPerfLaserBiasCurrentNormalized15minMean=intervalPhysPerfLaserBiasCurrentNormalized15minMean, currentOtuFec15minES=currentOtuFec15minES, currentGfpfr1dayCHecDiscardedFrames=currentGfpfr1dayCHecDiscardedFrames, intervalPhysPerfOlmRxLineAtt15minValidFlag=intervalPhysPerfOlmRxLineAtt15minValidFlag, tunnelOtnDataErrorCodeMinor=tunnelOtnDataErrorCodeMinor, deployProvIfDefaultsSigDegThresOduTcmC=deployProvIfDefaultsSigDegThresOduTcmC, deployProvLogicalCpIfDefaultsExtAdvertised=deployProvLogicalCpIfDefaultsExtAdvertised, currentGfp15minTypeHecCorrectedFrames=currentGfp15minTypeHecCorrectedFrames, currentSonetHoPath1dayUAS=currentSonetHoPath1dayUAS, currentDefectSeconds15minEntry=currentDefectSeconds15minEntry, transientManualWorkingSwitchedBacktoWorking=transientManualWorkingSwitchedBacktoWorking, alarmEncryptionPortAuthPasswdMissing=alarmEncryptionPortAuthPasswdMissing, deployProvModuleCapChannelsProvision=deployProvModuleCapChannelsProvision, currentGfpt1dayDiscardedSuperblocks=currentGfpt1dayDiscardedSuperblocks, ntpSrvObjectChange=ntpSrvObjectChange, inventoryCpWdmUpDataResources=inventoryCpWdmUpDataResources, FspR7CpCompState=FspR7CpCompState, crsConnConfigPathNode=crsConnConfigPathNode, thresholdEthRxHighSpeedPauseFramesHighThres1Day=thresholdEthRxHighSpeedPauseFramesHighThres1Day, neStateChange=neStateChange, intervalPhysPerfLaserBiasCurrentNormalized1dayLow=intervalPhysPerfLaserBiasCurrentNormalized1dayLow, tunnelWdmConfigPceMode=tunnelWdmConfigPceMode, apsConfigTable=apsConfigTable, pathElementOtnDataUpTributaryODTUType=pathElementOtnDataUpTributaryODTUType, thresholdEthTxCrcFramesEgressHighThres1Day=thresholdEthTxCrcFramesEgressHighThres1Day, connectionWdmDataSignalledPaths=connectionWdmDataSignalledPaths, deployProvPathElementEthCapLogicalInterfaceId=deployProvPathElementEthCapLogicalInterfaceId, currentPmSnapshotInputPower=currentPmSnapshotInputPower, neNtpSourceIp=neNtpSourceIp, deployProvLogicalIfCapEncapsulation=deployProvLogicalIfCapEncapsulation, connectionOtnDataTerminationLevel=connectionOtnDataTerminationLevel, tunnelEthDataToTidMonitor=tunnelEthDataToTidMonitor, currentEthRx15minBytes=currentEthRx15minBytes, deployProvControlPlaneEthNaasMaxSize=deployProvControlPlaneEthNaasMaxSize, connectionEthDataFromTid=connectionEthDataFromTid, deployProvLanOspf=deployProvLanOspf, alarmAutoShutdownOpuClientSignalFail=alarmAutoShutdownOpuClientSignalFail, vc4c8allocatedTable=vc4c8allocatedTable, intervalL2EthTx15minTable=intervalL2EthTx15minTable, FspR7EntitySecondaryStates=FspR7EntitySecondaryStates, changeServiceDeployProvIfCapTimModeOdu=changeServiceDeployProvIfCapTimModeOdu, intervalL2EthTx15minBytesTrmt=intervalL2EthTx15minBytesTrmt, deployProvPppIpDefaultsBitrate=deployProvPppIpDefaultsBitrate, reservationCpDataTunnelNo=reservationCpDataTunnelNo, FspR7CpReversionType=FspR7CpReversionType, tunnelOtnConfigRestorationType=tunnelOtnConfigRestorationType, controlPlaneOtnConfigCmCrankBackTimeout=controlPlaneOtnConfigCmCrankBackTimeout, controlPlaneEntityStateCapTable=controlPlaneEntityStateCapTable, deployProvApsRevertMode=deployProvApsRevertMode, neEqlzStartDate=neEqlzStartDate, intervalPhysPerfOlmRxLineAtt15minTimeStamp=intervalPhysPerfOlmRxLineAtt15minTimeStamp, currentL2EthTx15minMulticastFramesTrmt=currentL2EthTx15minMulticastFramesTrmt, deployProvModuleCapCapabilityLevel=deployProvModuleCapCapabilityLevel, changeServiceDeployProvIfCapSignalDegradePeriod=changeServiceDeployProvIfCapSignalDegradePeriod, f7eqp8TceGl2g5c=f7eqp8TceGl2g5c, dependenciesAid=dependenciesAid, changeServiceDeployProvIfMetric=changeServiceDeployProvIfMetric, logicalIfConfigHelloInterval=logicalIfConfigHelloInterval, alarmThres15MinExceededGfpTHEC=alarmThres15MinExceededGfpTHEC, deployProvLogicalCpIfCapVTeType=deployProvLogicalCpIfCapVTeType, deployProvTifInputCapTable=deployProvTifInputCapTable, deployProvIfCapSigDegPeriodOduTcmB=deployProvIfCapSigDegPeriodOduTcmB, deployProvTunnelWdmDefaultsMonitorEntities=deployProvTunnelWdmDefaultsMonitorEntities, opticalIfConfigTestPrbsRcvMode=opticalIfConfigTestPrbsRcvMode, deployProvLogicalIfIpAddr=deployProvLogicalIfIpAddr, forceDeployProvApsDefaultsWorkingAid=forceDeployProvApsDefaultsWorkingAid, currentOtuFec1dayEntry=currentOtuFec1dayEntry, changeServiceDeployProvIfCapSigDegPeriodSdhSection=changeServiceDeployProvIfCapSigDegPeriodSdhSection, nodeChannelTraceChannelNumber=nodeChannelTraceChannelNumber, intervalPhysPerfOpticalInputPwr1dayEntry=intervalPhysPerfOpticalInputPwr1dayEntry, intervalPhysPerfOpticalOutputPwr1weekTimeStamp=intervalPhysPerfOpticalOutputPwr1weekTimeStamp, currentPmSnapshotTxLineAttenuation=currentPmSnapshotTxLineAttenuation, transientEqlzProcessWait=transientEqlzProcessWait, interfaceConfigLoopConfig=interfaceConfigLoopConfig, tunnelWdmDataErrorMessage=tunnelWdmDataErrorMessage, tunnelWdmDataRestorationState=tunnelWdmDataRestorationState, pathElementOtnDataPathType=pathElementOtnDataPathType, intervalPhysConv15minDE=intervalPhysConv15minDE, ospfDataBkupDesignatedRouter=ospfDataBkupDesignatedRouter, currentOduTcmC1dayUAS=currentOduTcmC1dayUAS, deployProvOpticalLinkDefaultsRowStatus=deployProvOpticalLinkDefaultsRowStatus, intervalEthRx3HS1dayMulticastFramesRcv=intervalEthRx3HS1dayMulticastFramesRcv, deployProvIfDefaultsPvid=deployProvIfDefaultsPvid, crsConnConfigTable=crsConnConfigTable, deployProvModuleCapEdfaPwrOut=deployProvModuleCapEdfaPwrOut, changeServiceDeployProvIfTraceTransmitOpspOtu=changeServiceDeployProvIfTraceTransmitOpspOtu, deployProvControlPlaneEthCapCmFisFrsTimeout=deployProvControlPlaneEthCapCmFisFrsTimeout, currentEthRxHighSpeed1dayCrcFrames=currentEthRxHighSpeed1dayCrcFrames, interfaceDataPhysIfBaseType=interfaceDataPhysIfBaseType, deployProvPathElementOtnDownTributaryODTUType=deployProvPathElementOtnDownTributaryODTUType, transientMin15RecordsAvailable=transientMin15RecordsAvailable, opticalIfConfigPvid=opticalIfConfigPvid, changeServiceDeployProvIfSigDegThresSonetSection=changeServiceDeployProvIfSigDegThresSonetSection, f7eqpScu=f7eqpScu, currentEthRx3HS1dayPauseFrames=currentEthRx3HS1dayPauseFrames, intervalOdu15minNumber=intervalOdu15minNumber, FspR7PmReset=FspR7PmReset, FspR7PortBehaviourCaps=FspR7PortBehaviourCaps, deployProvIfDefaultsOduTribPortNo=deployProvIfDefaultsOduTribPortNo, deployProvLogicalIfDcnAid=deployProvLogicalIfDcnAid, currentEthRx1dayBytes=currentEthRx1dayBytes, forceDeployProvApsCapTable=forceDeployProvApsCapTable, deployProvPortBindingLifAidCapsTable=deployProvPortBindingLifAidCapsTable, deployProvDcnExternalVid=deployProvDcnExternalVid, intervalL2EthRx1dayValidFlag=intervalL2EthRx1dayValidFlag, alarmOosPrePostSig=alarmOosPrePostSig, tifiDataTable=tifiDataTable, intervalEthRxHighSpeed1dayTable=intervalEthRxHighSpeed1dayTable, deployProvLogicalCpIfDefaultsTable=deployProvLogicalCpIfDefaultsTable, forceDeployProvApsDefaultsSDswitching=forceDeployProvApsDefaultsSDswitching, alarmAutoShutdownBlock=alarmAutoShutdownBlock, intervalDispersionCompensation1weekMean=intervalDispersionCompensation1weekMean, f7eqpFcu7hu=f7eqpFcu7hu, FspR7CpRestorationType=FspR7CpRestorationType, deployProvControlPlaneEthCapRowStatus=deployProvControlPlaneEthCapRowStatus, intervalPhysPerfCurrent15minMean=intervalPhysPerfCurrent15minMean, deployProvExChannelCapFecType=deployProvExChannelCapFecType, intervalOduTcmA15minValidFlag=intervalOduTcmA15minValidFlag, changeServiceDeployProvIfCapAdmin=changeServiceDeployProvIfCapAdmin)
mibBuilder.exportSymbols("FspR7-MIB", tifiConfigTifAlarmType=tifiConfigTifAlarmType, intervalGfpfr1dayCHecDiscardedFrames=intervalGfpfr1dayCHecDiscardedFrames, opticalIfDiagPrbsAvgBER=opticalIfDiagPrbsAvgBER, intervalGfpfr15minValidFlag=intervalGfpfr15minValidFlag, currentL2EthRx1dayElapsedTime=currentL2EthRx1dayElapsedTime, intervalPhysPerfLaserBiasCurrentNormalized1dayTable=intervalPhysPerfLaserBiasCurrentNormalized1dayTable, alarmPumpLaser3TempTooHigh=alarmPumpLaser3TempTooHigh, transientThres1DayExceededOtuSES=transientThres1DayExceededOtuSES, ethernetConfigFlowControl=ethernetConfigFlowControl, intervalOduTcmB1dayNumber=intervalOduTcmB1dayNumber, deployProvControlPlaneOtnCapCdResyncTimeout=deployProvControlPlaneOtnCapCdResyncTimeout, transientLocalCopyMemFailVersionMismatch=transientLocalCopyMemFailVersionMismatch, changeServiceDeployProvIfCapTraceTransmitDapiOduTcmA=changeServiceDeployProvIfCapTraceTransmitDapiOduTcmA, changeServiceDeployProvIfDefaultsSigDegThresSdhSection=changeServiceDeployProvIfDefaultsSigDegThresSdhSection, transientBootUpFailed=transientBootUpFailed, currentGfp1dayTypeHecDiscardedFrames=currentGfp1dayTypeHecDiscardedFrames, intervalEthRx1dayEntry=intervalEthRx1dayEntry, controlPlaneOtnConfigRmTraceTarget=controlPlaneOtnConfigRmTraceTarget, pathElementEthDataUpstreamSvid=pathElementEthDataUpstreamSvid, FspR7PceMode=FspR7PceMode, deployProvTunnelEthDefaultsConnectionDirection=deployProvTunnelEthDefaultsConnectionDirection, thresholdOduTcmBTable=thresholdOduTcmBTable, logicalIfConfigOspf=logicalIfConfigOspf, moduleDiagnosticsCurrentHighThres=moduleDiagnosticsCurrentHighThres, deployProvIfCapSigDegPeriodOduTcmA=deployProvIfCapSigDegPeriodOduTcmA, changeServiceDeployProvIfTraceTransmitSapiOduTcmC=changeServiceDeployProvIfTraceTransmitSapiOduTcmC, remoteAlarmCpDataType=remoteAlarmCpDataType, deployProvIfLanAid=deployProvIfLanAid, controlPlaneEthConfigCdbMaxSize=controlPlaneEthConfigCdbMaxSize, changeServiceDeployProvIfAreaId=changeServiceDeployProvIfAreaId, intervalPhysPerfOlmRxLineAtt15minEntry=intervalPhysPerfOlmRxLineAtt15minEntry, intervalPhysPerfCurrent1dayTable=intervalPhysPerfCurrent1dayTable, connectionEthDataFromNodeIp=connectionEthDataFromNodeIp, deployProvLogicalCpIfDefaultsIpType=deployProvLogicalCpIfDefaultsIpType, deployProvPppIpDefaultsMetric=deployProvPppIpDefaultsMetric, deployProvControlPlaneWdmCtmMaximumRetryNumber=deployProvControlPlaneWdmCtmMaximumRetryNumber, deployProvTifOutputDefaultsForceDestroy=deployProvTifOutputDefaultsForceDestroy, deployProvControlPlaneEthDefaultsNaasConfigFlag=deployProvControlPlaneEthDefaultsNaasConfigFlag, FspR7ScuRing=FspR7ScuRing, alarmLocalOscLevelAbnormal=alarmLocalOscLevelAbnormal, deployProvVirtualOpticalChannelEntry=deployProvVirtualOpticalChannelEntry, deployProvIfCapPortRole=deployProvIfCapPortRole, currentSonetLine15minSES=currentSonetLine15minSES, ospfDataTable=ospfDataTable, intervalPhysConvHighSpeed1daySE=intervalPhysConvHighSpeed1daySE, deployProvControlPlaneEthRowStatus=deployProvControlPlaneEthRowStatus, moduleDataConnectionLocation=moduleDataConnectionLocation, deployProvIfDefaultsTraceTransmitDapiOdu=deployProvIfDefaultsTraceTransmitDapiOdu, opticalIfDataBand=opticalIfDataBand, connectionEthDataComputedPaths=connectionEthDataComputedPaths, intervalSubAggregate1dayES=intervalSubAggregate1dayES, intervalOtuFec1dayExEntry=intervalOtuFec1dayExEntry, deployProvIfDefaultsOduTribTimeSlottNo=deployProvIfDefaultsOduTribTimeSlottNo, intervalOdu15minSES=intervalOdu15minSES, forceDeployProvApsCapRevertMode=forceDeployProvApsCapRevertMode, deployProvControlPlaneEthCapCmAlarmActivationTime=deployProvControlPlaneEthCapCmAlarmActivationTime, deployProvIfCapLacpMode=deployProvIfCapLacpMode, deployProvCopyPathWdmPathId=deployProvCopyPathWdmPathId, intervalL2EthTx15minTimeStamp=intervalL2EthTx15minTimeStamp, transientCryptoSessKeyLifetimeChanged=transientCryptoSessKeyLifetimeChanged, deployProvTifOutputCapTelemetry=deployProvTifOutputCapTelemetry, intervalLatency15minTable=intervalLatency15minTable, deployProvTunnelEthDefaultsAlias=deployProvTunnelEthDefaultsAlias, currentSonetLoPath15minTable=currentSonetLoPath15minTable, intervalSonetLoPath15minES=intervalSonetLoPath15minES, intervalPhysPerfCurrent1weekMean=intervalPhysPerfCurrent1weekMean, intervalOtuFec1dayExBERCE=intervalOtuFec1dayExBERCE, intervalSonetLoPath1daySES=intervalSonetLoPath1daySES, intervalPhysPerfEstimatedSignalGain15minHigh=intervalPhysPerfEstimatedSignalGain15minHigh, deployProvControlPlaneWdmTedbMinAdvertWait=deployProvControlPlaneWdmTedbMinAdvertWait, farEndPlugDataAdmin=farEndPlugDataAdmin, teRouterDataEntry=teRouterDataEntry, deployProvLogicalIfCapTimeToLive=deployProvLogicalIfCapTimeToLive, intervalPhysPerfChromaticDispersion1weekLow=intervalPhysPerfChromaticDispersion1weekLow, alarmLoopbackError=alarmLoopbackError, currentPhysConvTxHighSpeed1daySETX=currentPhysConvTxHighSpeed1daySETX, f7eqpUnknown=f7eqpUnknown, deployProvIfCapTraceTransmitDapiOdu=deployProvIfCapTraceTransmitDapiOdu, deployProvModuleFiber=deployProvModuleFiber, entityCreation=entityCreation, pppfConfigDataLayerPmReset=pppfConfigDataLayerPmReset, opticalIfConfigOffset=opticalIfConfigOffset, tunnelWdmConfigAdminModifier=tunnelWdmConfigAdminModifier, deployProvControlPlaneOtnPcTraceDetail=deployProvControlPlaneOtnPcTraceDetail, currentEthRxHighSpeed15minElapsedTime=currentEthRxHighSpeed15minElapsedTime, logicalCpIfConfigMetric=logicalCpIfConfigMetric, logicalCpIfConfigRefreshTimeout=logicalCpIfConfigRefreshTimeout, FspR7EnableDisable=FspR7EnableDisable, FspR7NtpTest=FspR7NtpTest, deployProvPlugDefaultsThirdPartyUsage=deployProvPlugDefaultsThirdPartyUsage, crsConnDataTable=crsConnDataTable, FspR7ActionCaps=FspR7ActionCaps, alarmNtpServer2Unreachable=alarmNtpServer2Unreachable, currentGfpfrSublayer1dayGoodFrames=currentGfpfrSublayer1dayGoodFrames, controlPlaneWdmDataRsvpAlias=controlPlaneWdmDataRsvpAlias, changeServiceDeployProvIfSigDegPeriodOdu=changeServiceDeployProvIfSigDegPeriodOdu, deployProvControlPlaneWdmDefaultsTedbMinAdvertWait=deployProvControlPlaneWdmDefaultsTedbMinAdvertWait, inactiveRoutingIpEntry=inactiveRoutingIpEntry, deployProvIfCapBehaviour=deployProvIfCapBehaviour, alarmThres15MinExceededOduTcmBES=alarmThres15MinExceededOduTcmBES, alarmEntityOutageIndication=alarmEntityOutageIndication, currentGfp1dayEntry=currentGfp1dayEntry, intervalPhysPerfOlmRxLineAtt1weekEntry=intervalPhysPerfOlmRxLineAtt1weekEntry, deployProvControlPlaneOtnDefaultsRaAlarmActivationTime=deployProvControlPlaneOtnDefaultsRaAlarmActivationTime, changeServiceDeployProvIfType=changeServiceDeployProvIfType, FspR7LagFendState=FspR7LagFendState, deployProvLogicalCpIfCapIpType=deployProvLogicalCpIfCapIpType, FspR7OpticalBand=FspR7OpticalBand, intervalPhysPerfChromaticDispersion15minNumber=intervalPhysPerfChromaticDispersion15minNumber, currentSonetSect1dayES=currentSonetSect1dayES, intervalPhysPerfPumpPwr1weekNumber=intervalPhysPerfPumpPwr1weekNumber, opticalIfDiagPrbsErrorFreeTime=opticalIfDiagPrbsErrorFreeTime, vs0allocatedFacilityType=vs0allocatedFacilityType, alarmThres15MinExceededFecCE=alarmThres15MinExceededFecCE, deployProvIfPumpPower=deployProvIfPumpPower, changeServiceDeployProvIfDefaultsSigDegThresOtu=changeServiceDeployProvIfDefaultsSigDegThresOtu, deployProvLogicalIfFacilityType=deployProvLogicalIfFacilityType, intervalL2EthRx1dayTable=intervalL2EthRx1dayTable, intervalPhysPerfEstimatedSignalGain1weekTable=intervalPhysPerfEstimatedSignalGain1weekTable, currentOduTcmA15minBbe=currentOduTcmA15minBbe, FspR7InvertTelemetryInputLogicCaps=FspR7InvertTelemetryInputLogicCaps, deployProvIfDefaultsSigDegPeriodSdhSection=deployProvIfDefaultsSigDegPeriodSdhSection, intervalPhysPerfChromaticDispersion15minTimeStamp=intervalPhysPerfChromaticDispersion15minTimeStamp, intervalLinkAttenuation15minEntry=intervalLinkAttenuation15minEntry, currentPhysConvCombined1dayEntry=currentPhysConvCombined1dayEntry, intervalEthRx1dayNumber=intervalEthRx1dayNumber, currentL2EthRx1dayBytesFrames65Rcv=currentL2EthRx1dayBytesFrames65Rcv, deployProvApsDefaultsHoldOffTime=deployProvApsDefaultsHoldOffTime, deployProvControlPlaneEthCapTedbRouterId=deployProvControlPlaneEthCapTedbRouterId, FspR7CapInventory=FspR7CapInventory, intervalPhysPerfChromaticDispersion1weekTable=intervalPhysPerfChromaticDispersion1weekTable, FspR7TestMode=FspR7TestMode, alarmLossOfFrameOtu=alarmLossOfFrameOtu, neighborDiscoveryDataFarEndIp=neighborDiscoveryDataFarEndIp, thresholdOduTcmCSESHighThres1day=thresholdOduTcmCSESHighThres1day, FspR7BaundCaps=FspR7BaundCaps, pathWdmDataPathId=pathWdmDataPathId, tunnelOtnDataToNodeIpMonitor=tunnelOtnDataToNodeIpMonitor, alarmServerSignalFail=alarmServerSignalFail, deployProvTunnelOtnDefaultsTunnelScope=deployProvTunnelOtnDefaultsTunnelScope, intervalPhysPerfOscOpticalOutputPwr1weekNumber=intervalPhysPerfOscOpticalOutputPwr1weekNumber, crsConnDeployProvCapRowStatus=crsConnDeployProvCapRowStatus, changeServiceDeployProvIfDefaultsOspf=changeServiceDeployProvIfDefaultsOspf, opticalIfConfigCapWdmRxChannel=opticalIfConfigCapWdmRxChannel, transientCpConnectionEstablishmentCompleted=transientCpConnectionEstablishmentCompleted, alarmDatabaseMismatch=alarmDatabaseMismatch, deployProvIfCapLagPrio=deployProvIfCapLagPrio, deployProvIfLanAidCapsTable=deployProvIfLanAidCapsTable, controlPlaneWdmEntityStateTable=controlPlaneWdmEntityStateTable, logicalCpIfDataIpAddr=logicalCpIfDataIpAddr, alarmSwitchFailed=alarmSwitchFailed, intervalDefectSeconds1dayEntry=intervalDefectSeconds1dayEntry, deployProvControlPlaneOtnCdbMaxSize=deployProvControlPlaneOtnCdbMaxSize, controlPlaneEthDataRmAlias=controlPlaneEthDataRmAlias, deployProvIfOpticalSetPoint=deployProvIfOpticalSetPoint, thresholdGfptDiscardedSuperblocksHighThres15Min=thresholdGfptDiscardedSuperblocksHighThres15Min, fspUserManagementDefaultsSnmpTimeoutValue=fspUserManagementDefaultsSnmpTimeoutValue, deployProvLanIpAddr=deployProvLanIpAddr, intervalEthRx3HS1dayCrcFrames=intervalEthRx3HS1dayCrcFrames, deployProvControlPlaneEthCapRaTraceDetail=deployProvControlPlaneEthCapRaTraceDetail, deployProvShelfType=deployProvShelfType, connectionOtnDataLayer=connectionOtnDataLayer, FspR7OperState=FspR7OperState, intervalPhysPerfCurrentOscGain1weekTable=intervalPhysPerfCurrentOscGain1weekTable, changeServiceDeployProvIfDefaultsVariableGain=changeServiceDeployProvIfDefaultsVariableGain, currentOduTcmB1dayEntry=currentOduTcmB1dayEntry, currentL2EthRx15minTable=currentL2EthRx15minTable, sts3callocatedContainer=sts3callocatedContainer, intervalPhysPerfOscOpticalOutputPwr1weekValidFlag=intervalPhysPerfOscOpticalOutputPwr1weekValidFlag, FspR7NoYes=FspR7NoYes, intervalPhysPerfCurrent1dayLow=intervalPhysPerfCurrent1dayLow, transientThres1DayExceededBytesTx=transientThres1DayExceededBytesTx, intervalPhysConvCombined1dayEntry=intervalPhysConvCombined1dayEntry, intervalDispersionCompensation1weekLow=intervalDispersionCompensation1weekLow, intervalPhysPerfOlmRxLineAtt15minHigh=intervalPhysPerfOlmRxLineAtt15minHigh, changeServiceDeployProvIfCapOspf=changeServiceDeployProvIfCapOspf, deployProvPathElementOtnCapDownTributaryPort=deployProvPathElementOtnCapDownTributaryPort, dcnTopologyDataTable=dcnTopologyDataTable, intervalEthRxHighSpeed1dayCrcFrames=intervalEthRxHighSpeed1dayCrcFrames, alarmLockedDefectOduTcmB=alarmLockedDefectOduTcmB, intervalPhysConvCombined1dayTimeStamp=intervalPhysConvCombined1dayTimeStamp, deployProvConnStdCapToEndpointA=deployProvConnStdCapToEndpointA, deployProvControlPlaneEthCapRaConfigFlag=deployProvControlPlaneEthCapRaConfigFlag, f7OC192=f7OC192, intervalL2EthRx15minBytesFrames1519Rcv=intervalL2EthRx15minBytesFrames1519Rcv, forceDeployProvApsProtectionAid=forceDeployProvApsProtectionAid, deployProvPathElementOtnDefaultsUpTributaryTSMethod=deployProvPathElementOtnDefaultsUpTributaryTSMethod, alarmTemperatureTooHigh=alarmTemperatureTooHigh, intervalOduTcmA15minSES=intervalOduTcmA15minSES, intervalPhysPerfOscPwr1weekTable=intervalPhysPerfOscPwr1weekTable, inventoryCpOtnUpDataTable=inventoryCpOtnUpDataTable, farEndPlugDataFiberType=farEndPlugDataFiberType, currentL2EthRx15minBytesFrames512Rcv=currentL2EthRx15minBytesFrames512Rcv, tunnelWdmDataToNodeIpMonitor=tunnelWdmDataToNodeIpMonitor, deployProvLogicalCpIfCapTeMetric=deployProvLogicalCpIfCapTeMetric, opticalIfDataTransmitWavelength=opticalIfDataTransmitWavelength, forceDeployProvApsWorkingAidCapsEntry=forceDeployProvApsWorkingAidCapsEntry, intervalOduTcmB1dayEntry=intervalOduTcmB1dayEntry, alarmBackwardDefectIndicationOduTcmC=alarmBackwardDefectIndicationOduTcmC, intervalFarEndPhysPerfOpticalOutputPwr15minNumber=intervalFarEndPhysPerfOpticalOutputPwr15minNumber, intervalFarEndPhysPerfOpticalInputPwr1dayTimeStamp=intervalFarEndPhysPerfOpticalInputPwr1dayTimeStamp, intervalPhysPerfPumpPwr1dayLow=intervalPhysPerfPumpPwr1dayLow, intervalSonetLoPath1dayES=intervalSonetLoPath1dayES, deployProvControlPlaneEthPcTraceDetail=deployProvControlPlaneEthPcTraceDetail, deployProvIfDefaultsAlsMode=deployProvIfDefaultsAlsMode, vs1allocatedFacilityType=vs1allocatedFacilityType, controlPlaneEthConfigRsvpConfigFlag=controlPlaneEthConfigRsvpConfigFlag, deployProvIfSigDegPeriodOdu=deployProvIfSigDegPeriodOdu, teRouterDataNodeIp=teRouterDataNodeIp, currentOdu1dayTable=currentOdu1dayTable, currentL2EthRx15minBytesRcv=currentL2EthRx15minBytesRcv, intervalL2EthRx1dayFramesRcv=intervalL2EthRx1dayFramesRcv, deployProvIfTraceTransmitOpspOdu=deployProvIfTraceTransmitOpspOdu, thresholdEthTxPauseFramesHighThres15Min=thresholdEthTxPauseFramesHighThres15Min, FspR7SessionStatusCaps=FspR7SessionStatusCaps, currentDefectSeconds15minDS=currentDefectSeconds15minDS, moduleDataWidth=moduleDataWidth, deployProvExChannelBitrate=deployProvExChannelBitrate, alarmThermoElectricCoolerEndOfLife=alarmThermoElectricCoolerEndOfLife, FspR7RoadmNumberCaps=FspR7RoadmNumberCaps, FspR7TurnupConfig=FspR7TurnupConfig, intervalGfpfrSublayer1dayValidFlag=intervalGfpfrSublayer1dayValidFlag, transientThres1DayExceededFecSES=transientThres1DayExceededFecSES, connectionWdmDataTunnelInstance=connectionWdmDataTunnelInstance, ptpEntityDataGroupProvision=ptpEntityDataGroupProvision, deployProvControlPlaneWdmCapRowStatus=deployProvControlPlaneWdmCapRowStatus, deployProvLogicalIfCapEntry=deployProvLogicalIfCapEntry, thresholdOtuUASHighThres1day=thresholdOtuUASHighThres1day, currentL2EthRx1dayPauseFramesRcv=currentL2EthRx1dayPauseFramesRcv, f7eqp1csmuEwD=f7eqp1csmuEwD, teNumLinkWdmDataTable=teNumLinkWdmDataTable, nodeChannelTraceRouteId=nodeChannelTraceRouteId, currentPmSnapshotAttenuationOfVoa=currentPmSnapshotAttenuationOfVoa, connectionOtnDataSignalledPaths=connectionOtnDataSignalledPaths, deployProvVchChannelCapTraceTransmitOpspOdu=deployProvVchChannelCapTraceTransmitOpspOdu, inventoryCpEthCrsUpDataNumber=inventoryCpEthCrsUpDataNumber, deployProvPathEthDefaultsRowStatus=deployProvPathEthDefaultsRowStatus, deployProvControlPlaneOtnDefaultsRaTraceDetail=deployProvControlPlaneOtnDefaultsRaTraceDetail, FspR7CpAbortProcess=FspR7CpAbortProcess, deployProvPathElementOtnDefaultsRowStatus=deployProvPathElementOtnDefaultsRowStatus, intervalOduTcmA15minTable=intervalOduTcmA15minTable, deployProvTunnelWdmDefaultsToNodeIp=deployProvTunnelWdmDefaultsToNodeIp, changeServiceDeployProvIfDefaultsErrorForwarding=changeServiceDeployProvIfDefaultsErrorForwarding, controlPlaneOtnConfigRmConfigFlag=controlPlaneOtnConfigRmConfigFlag, alarmServerSignalFailureODU=alarmServerSignalFailureODU, intervalPhysPerfSignalToNoiseRatio15minLow=intervalPhysPerfSignalToNoiseRatio15minLow, deployProvIfDefaultsSigDegThresOtu=deployProvIfDefaultsSigDegThresOtu, neNtpServer2=neNtpServer2, deployProvIfCapOffset=deployProvIfCapOffset, opticalLinkDataLogicalInterfaceAid=opticalLinkDataLogicalInterfaceAid, entityObjectChange=entityObjectChange, FspR7DCFiberTypeCaps=FspR7DCFiberTypeCaps, deployProvControlPlaneOtnCapCmConfigFlag=deployProvControlPlaneOtnCapCmConfigFlag, deployProvIfDefaultsTraceTransmitDapiOtu=deployProvIfDefaultsTraceTransmitDapiOtu)
mibBuilder.exportSymbols("FspR7-MIB", deployProvSyslogStatus=deployProvSyslogStatus, changeServiceDeployProvIfCapSigDegThresSdhMs=changeServiceDeployProvIfCapSigDegThresSdhMs, deployProvControlPlaneEthDefaultsNaasMaxSize=deployProvControlPlaneEthDefaultsNaasMaxSize, changeServiceDeployProvIfCapTcmALevel=changeServiceDeployProvIfCapTcmALevel, thresholdOtuFecSublayerExUBEHighThres15min=thresholdOtuFecSublayerExUBEHighThres15min, currentEthRx3HS1dayEntry=currentEthRx3HS1dayEntry, intervalSonetSect15minCV=intervalSonetSect15minCV, thresholdSonetHoPathTable=thresholdSonetHoPathTable, intervalPhysPerfCarrierFreqOffset15minHigh=intervalPhysPerfCarrierFreqOffset15minHigh, portBindingDataTable=portBindingDataTable, connectionEthDataToTid=connectionEthDataToTid, dcnOspfAreaCapStubDefaultMetric=dcnOspfAreaCapStubDefaultMetric, FspR7EqlzAdminState=FspR7EqlzAdminState, deployProvPppIpForceDestroy=deployProvPppIpForceDestroy, deployProvVchChannelCapTraceTransmitSapiOdu=deployProvVchChannelCapTraceTransmitSapiOdu, tunnelEthDataOifUni=tunnelEthDataOifUni, eRoadmInfoInternalPlugRates=eRoadmInfoInternalPlugRates, pathOtnDataPathId=pathOtnDataPathId, alarmMismatch=alarmMismatch, thresholdPhysConvTxHighSpeedTable=thresholdPhysConvTxHighSpeedTable, changeServiceDeployProvIfDefaultsTable=changeServiceDeployProvIfDefaultsTable, deployProvTunnelOtnDefaultsOifUni=deployProvTunnelOtnDefaultsOifUni, crsConnDeployProvEntry=crsConnDeployProvEntry, tunnelWdmConfigRecoveryType=tunnelWdmConfigRecoveryType, moduleDataUpgradePorts=moduleDataUpgradePorts, ntpSrvAttributeValueChange=ntpSrvAttributeValueChange, thresholdSonetLineMsUASSHighThres1day=thresholdSonetLineMsUASSHighThres1day, alarmThres15MinExceededOduSES=alarmThres15MinExceededOduSES, deployProvPlugCapTable=deployProvPlugCapTable, alarmClientFailForwarding=alarmClientFailForwarding, deployProvTunnelOtnDefaultsFromAid=deployProvTunnelOtnDefaultsFromAid, deployProvExChannelCapTransmitChannel=deployProvExChannelCapTransmitChannel, FspR7NumberOfChannels=FspR7NumberOfChannels, deployProvShelfDefaultsPsuOutputPower=deployProvShelfDefaultsPsuOutputPower, deployProvDcnLanAid=deployProvDcnLanAid, deployProvCrsDcnEccAidCapsTable=deployProvCrsDcnEccAidCapsTable, deployProvPppIpDefaultsProxyArp=deployProvPppIpDefaultsProxyArp, opticalIfDataTributaryFreeSlotNo=opticalIfDataTributaryFreeSlotNo, alarmLaserOnDelay=alarmLaserOnDelay, alarmEncryptionModuleCryPasswdMissing=alarmEncryptionModuleCryPasswdMissing, ntpTimeZoneCapsIndex=ntpTimeZoneCapsIndex, deployProvTunnelWdmDefaultsRecoveryType=deployProvTunnelWdmDefaultsRecoveryType, vc3allocatedEntry=vc3allocatedEntry, currentSonetHoPath1dayElapsedTime=currentSonetHoPath1dayElapsedTime, intervalEthRxHighSpeed1dayNumber=intervalEthRxHighSpeed1dayNumber, intervalPhysPerfOscPwr1dayNumber=intervalPhysPerfOscPwr1dayNumber, deployProvControlPlaneWdmDefaultsCtmTraceDetail=deployProvControlPlaneWdmDefaultsCtmTraceDetail, areaAidCapIndexCap=areaAidCapIndexCap, deployProvPathElementOtnCapDownTributaryTSMethod=deployProvPathElementOtnCapDownTributaryTSMethod, deployProvTunnelEthCapCirRcv=deployProvTunnelEthCapCirRcv, unusedWdmTunnelIndex=unusedWdmTunnelIndex, alarmSignalDegradeOduTcmB=alarmSignalDegradeOduTcmB, deployProvConnStdCapToEntry=deployProvConnStdCapToEntry, fspUserManagementName=fspUserManagementName, deployProvLogicalCpIfDefaultsEncapsulation=deployProvLogicalCpIfDefaultsEncapsulation, thresholdGfpTHecDiscardedFramesHighThres1Day=thresholdGfpTHecDiscardedFramesHighThres1Day, teUnnumLinkOtnDataPhysicalLink=teUnnumLinkOtnDataPhysicalLink, intervalOduTcmA15minTimeStamp=intervalOduTcmA15minTimeStamp, controlPlaneEthConfigTedbRouterId=controlPlaneEthConfigTedbRouterId, deployProvTunnelWdmCapEntry=deployProvTunnelWdmCapEntry, intervalOduTcmA1dayTable=intervalOduTcmA1dayTable, alarmEquipmentNotApproved=alarmEquipmentNotApproved, transientNtpSrvSyncChanged=transientNtpSrvSyncChanged, opticalIfConfigCapOpticalSetPoint=opticalIfConfigCapOpticalSetPoint, deployProvCrsDcnForceDestroy=deployProvCrsDcnForceDestroy, deployProvControlPlaneOtnRsvpConfigFlag=deployProvControlPlaneOtnRsvpConfigFlag, unusedWdmPathIndex=unusedWdmPathIndex, crsConnDeployProvCapTable=crsConnDeployProvCapTable, deployProvPathWdmEntry=deployProvPathWdmEntry, alarmThres15MinExceededOduES=alarmThres15MinExceededOduES, controlPlaneWdmConfigCdConfigFlag=controlPlaneWdmConfigCdConfigFlag, opticalIfConfigCapForceLaserOn=opticalIfConfigCapForceLaserOn, deployProvCopyPathOtnCapEntry=deployProvCopyPathOtnCapEntry, deployProvPppIpDefaultsBaud=deployProvPppIpDefaultsBaud, farEndIfDataConnectionType=farEndIfDataConnectionType, intervalEthRx3HS15minJabberFrameRcv=intervalEthRx3HS15minJabberFrameRcv, changeServiceDeployProvIfSigDegThresSonetLine=changeServiceDeployProvIfSigDegThresSonetLine, deployProvLogicalCpIfDefaultsAdmin=deployProvLogicalCpIfDefaultsAdmin, dcnOspfAreaInterfaceEntry=dcnOspfAreaInterfaceEntry, ntpSrvConditionSeverityValue=ntpSrvConditionSeverityValue, alarmEncryptionModuleTamperDetected=alarmEncryptionModuleTamperDetected, deployProvShelfSupply=deployProvShelfSupply, intervalPhysPerfSignalToNoiseRatio1weekNumber=intervalPhysPerfSignalToNoiseRatio1weekNumber, lanIpDataOscmMembers=lanIpDataOscmMembers, intervalPhysPerfCarrierFreqOffset1dayMean=intervalPhysPerfCarrierFreqOffset1dayMean, otdrDataTable=otdrDataTable, thresholdPhysPerfSignalToNoiseRatioLow=thresholdPhysPerfSignalToNoiseRatioLow, FspR7ProtectionType=FspR7ProtectionType, pathElementWdmDataChannelDown=pathElementWdmDataChannelDown, currentEthRx1dayElapsedTime=currentEthRx1dayElapsedTime, intervalPhysPerfCurrentOscGain15minEntry=intervalPhysPerfCurrentOscGain15minEntry, thresholdOduTcmBUASHighThres15min=thresholdOduTcmBUASHighThres15min, intervalSonetHoPath1dayCV=intervalSonetHoPath1dayCV, alarmAttOnReceiverFiberLowerThanMonitor=alarmAttOnReceiverFiberLowerThanMonitor, currentSonetSect15minTable=currentSonetSect15minTable, intervalSubAggregate15minTable=intervalSubAggregate15minTable, transientNtpSrvSyncStarted=transientNtpSrvSyncStarted, thresholdSonetSectSEFSHighThres15min=thresholdSonetSectSEFSHighThres15min, intervalPhysPerfOscOpticalOutputPwr15minValidFlag=intervalPhysPerfOscOpticalOutputPwr15minValidFlag, deployProvTifInputForceDestroy=deployProvTifInputForceDestroy, intervalFarEndPhysPerfOpticalOutputPwr15minMean=intervalFarEndPhysPerfOpticalOutputPwr15minMean, deployProvControlPlaneWdmDefaultsRaConfigFlag=deployProvControlPlaneWdmDefaultsRaConfigFlag, fspUserManagementSecurityLevel=fspUserManagementSecurityLevel, deployProvIfDefaultsTraceTransmitSapiOduTcmA=deployProvIfDefaultsTraceTransmitSapiOduTcmA, forceDeployProvApsCapPeerAid=forceDeployProvApsCapPeerAid, deployProvLogicalIfDefaultsAdmin=deployProvLogicalIfDefaultsAdmin, currentSubAggregate1dayElapsedTime=currentSubAggregate1dayElapsedTime, alarmFacilityDataRateNotSupported=alarmFacilityDataRateNotSupported, intervalLinkAttenuation1weekNumber=intervalLinkAttenuation1weekNumber, deployProvApsCapSDswitching=deployProvApsCapSDswitching, f7eqp4tca1g3c=f7eqp4tca1g3c, deployProvPortBindingCapRemoteTna=deployProvPortBindingCapRemoteTna, teUnnumLinkWdmDataNodeIp=teUnnumLinkWdmDataNodeIp, pathElementEthDataNodeIp=pathElementEthDataNodeIp, intervalGfpfr1dayTable=intervalGfpfr1dayTable, neSysType=neSysType, tunnelWdmDataOifUni=tunnelWdmDataOifUni, moduleDiagnosticsEntry=moduleDiagnosticsEntry, deployProvTunnelEthProtectionType=deployProvTunnelEthProtectionType, deployProvTunnelWdmCapTunnelType=deployProvTunnelWdmCapTunnelType, deployProvCopyPathEthSourcePathIndex=deployProvCopyPathEthSourcePathIndex, intervalGfpfr15minEntry=intervalGfpfr15minEntry, deployProvControlPlaneOtnDefaultsCmTraceDetail=deployProvControlPlaneOtnDefaultsCmTraceDetail, intervalGfpfr15minTimeStamp=intervalGfpfr15minTimeStamp, intervalPhysPerfCarrierFreqOffset15minLow=intervalPhysPerfCarrierFreqOffset15minLow, sts3callocatedSequenceNumber=sts3callocatedSequenceNumber, opticalIfConfigCapXfpDecisionThres=opticalIfConfigCapXfpDecisionThres, deployProvIfTcmCLevel=deployProvIfTcmCLevel, thresholdSonetSectEntry=thresholdSonetSectEntry, alarmThres15MinExceededSonetLineES=alarmThres15MinExceededSonetLineES, deployProvControlPlaneOtnCapPcConfigFlag=deployProvControlPlaneOtnCapPcConfigFlag, deployProvPathElementOtnCapUpTributarySlot=deployProvPathElementOtnCapUpTributarySlot, deployProvDcnDefaultsLanAid=deployProvDcnDefaultsLanAid, deployProvCrsDcnEcc=deployProvCrsDcnEcc, FspR7FlowControlMode=FspR7FlowControlMode, f7eqp2pm=f7eqp2pm, intervalFarEndPhysPerfOpticalInputPwr1dayHigh=intervalFarEndPhysPerfOpticalInputPwr1dayHigh, FspR7PmSnapshotParameterTypes=FspR7PmSnapshotParameterTypes, alarmLossOfFrameMuxFarEnd=alarmLossOfFrameMuxFarEnd, deployProvControlPlaneEthCapCdbConfigFlag=deployProvControlPlaneEthCapCdbConfigFlag, FspR7OspfAreaType=FspR7OspfAreaType, intervalPhysPerfPumpPwr15minLow=intervalPhysPerfPumpPwr15minLow, deployProvControlPlaneWdmNodeNameSyntax=deployProvControlPlaneWdmNodeNameSyntax, FspR7IpTypeCaps=FspR7IpTypeCaps, intervalSonetHoPath15minSES=intervalSonetHoPath15minSES, pathElementWdmDataLine=pathElementWdmDataLine, controlPlaneOtnConfigEntry=controlPlaneOtnConfigEntry, interfaceConfigExternalVidCapsTable=interfaceConfigExternalVidCapsTable, deployProvControlPlaneWdmCapPcTraceDetail=deployProvControlPlaneWdmCapPcTraceDetail, interfaceDataTransmitWavelength=interfaceDataTransmitWavelength, moduleDataChannelSpacing=moduleDataChannelSpacing, deployProvIfVoaSetpoint=deployProvIfVoaSetpoint, controlPlaneEthEntityStateCapEntry=controlPlaneEthEntityStateCapEntry, opticalIfConfigTiltSet=opticalIfConfigTiltSet, deployProvTunnelWdmDefaultsTunnelScope=deployProvTunnelWdmDefaultsTunnelScope, deployProvTunnelEthTunnelType=deployProvTunnelEthTunnelType, crsConnDataConn=crsConnDataConn, changeServiceDeployProvIfCapForceDestroy=changeServiceDeployProvIfCapForceDestroy, sts24callocatedTable=sts24callocatedTable, FspR7InterfaceType=FspR7InterfaceType, deployProvPlugEntry=deployProvPlugEntry, thresholdPhysPerfPumpLaser3TempLowThres=thresholdPhysPerfPumpLaser3TempLowThres, deployProvShelfRowStatus=deployProvShelfRowStatus, deployProvTifInputDefaultsEntry=deployProvTifInputDefaultsEntry, deployProvCrsDcnLinkAidCapsEntry=deployProvCrsDcnLinkAidCapsEntry, FspR7CpVTeType=FspR7CpVTeType, intervalPhysPerfCurrent15minValidFlag=intervalPhysPerfCurrent15minValidFlag, deployProvVchChannelDefaultsTraceTransmitDapiOdu=deployProvVchChannelDefaultsTraceTransmitDapiOdu, deployProvExChannelTable=deployProvExChannelTable, farEndIfDiagnosticsInputPower=farEndIfDiagnosticsInputPower, intervalPhysPerfLaserBiasCurrentNormalized15minLow=intervalPhysPerfLaserBiasCurrentNormalized15minLow, deployProvPortBindingRemoteNodeIp=deployProvPortBindingRemoteNodeIp, deployProvModuleDefaultsBand=deployProvModuleDefaultsBand, currentDiagnosticsUpperThres=currentDiagnosticsUpperThres, transientThres1DayExceededSonetSectSEFS=transientThres1DayExceededSonetSectSEFS, thresholdPhysPerfDifferentialGroupDelayHigh=thresholdPhysPerfDifferentialGroupDelayHigh, inventoryCpOtnDownDataTable=inventoryCpOtnDownDataTable, apsProtGroupStatusTable=apsProtGroupStatusTable, deployProvPathElementOtnUpTributarySlot=deployProvPathElementOtnUpTributarySlot, controlPlaneEthConfigEntry=controlPlaneEthConfigEntry, dcnOspf=dcnOspf, changeServiceDeployProvIfCapType=changeServiceDeployProvIfCapType, deployProvControlPlaneWdmNaasConfigFlag=deployProvControlPlaneWdmNaasConfigFlag, opticalIfConfigCapTestPrbsRcvMode=opticalIfConfigCapTestPrbsRcvMode, f7eqp8tca10gc=f7eqp8tca10gc, FspR7APSCommand=FspR7APSCommand, intervalOduTcmC15minUAS=intervalOduTcmC15minUAS, pppDataNearEndIpMonitor=pppDataNearEndIpMonitor, transientThres1DayExceededPhysConvES=transientThres1DayExceededPhysConvES, ntpSysConditionSeverityValue=ntpSysConditionSeverityValue, deployProvCopyPathEthCapSourcePathIndex=deployProvCopyPathEthCapSourcePathIndex, eRoadmInfoEntry=eRoadmInfoEntry, connectionEthConfigTable=connectionEthConfigTable, intervalPhysPerfLaserBiasCurrentNormalized1weekNumber=intervalPhysPerfLaserBiasCurrentNormalized1weekNumber, thresholdOtuFecSublayerESHighThres1day=thresholdOtuFecSublayerESHighThres1day, deployProvTunnelWdmDefaultsTunnelNo=deployProvTunnelWdmDefaultsTunnelNo, controlPlaneEthEntityStateCapAdmin=controlPlaneEthEntityStateCapAdmin, eRoadmInfoScuRing=eRoadmInfoScuRing, deployProvIfAprHighThreshold=deployProvIfAprHighThreshold, changeServiceDeployProvIfDefaultsBip=changeServiceDeployProvIfDefaultsBip, deployProvControlPlaneEthDefaultsNaasTraceDetail=deployProvControlPlaneEthDefaultsNaasTraceDetail, currentGfpfr1dayGoodFrames=currentGfpfr1dayGoodFrames, FspR7ChannelIdentifierCaps=FspR7ChannelIdentifierCaps, intervalDispersionCompensation1weekHigh=intervalDispersionCompensation1weekHigh, deployProvControlPlaneOtnCtmSetupTimeout=deployProvControlPlaneOtnCtmSetupTimeout, intervalPhysPerfOpticalOutputPwr15minLow=intervalPhysPerfOpticalOutputPwr15minLow, deployProvPppIpCapAreaId=deployProvPppIpCapAreaId, transientEqlzStart=transientEqlzStart, deployProvModuleDefaultsSubBand=deployProvModuleDefaultsSubBand, deployProvIfDefaultsVoaSetpoint=deployProvIfDefaultsVoaSetpoint, currentEthRx3HS1dayMulticastFramesRcv=currentEthRx3HS1dayMulticastFramesRcv, moduleDataMapping=moduleDataMapping, FspR7EqlzIntervalCaps=FspR7EqlzIntervalCaps, intervalPhysPerfOlmRxLineAtt1weekMean=intervalPhysPerfOlmRxLineAtt1weekMean, currentL2EthRx15minPauseFramesRcv=currentL2EthRx15minPauseFramesRcv, deployProvControlPlaneOtnNaasConfigFlag=deployProvControlPlaneOtnNaasConfigFlag, intervalL2EthRx1dayEntry=intervalL2EthRx1dayEntry, f7eqp8gsmd=f7eqp8gsmd, tunnelWdmConfigPin=tunnelWdmConfigPin, teUnnumLinkEthDataFendNodeIp=teUnnumLinkEthDataFendNodeIp, forceDeployProvApsSignalFailureSwitching=forceDeployProvApsSignalFailureSwitching, interfaceDataConnector=interfaceDataConnector, controlPlaneWdmConfigCdbConfigFlag=controlPlaneWdmConfigCdbConfigFlag, deployProvConnNonStdCapFromEndpointB=deployProvConnNonStdCapFromEndpointB, ptpEntityDataLambda=ptpEntityDataLambda, deployProvOpticalLinkTable=deployProvOpticalLinkTable, changeServiceDeployProvIfCapSigDegPeriodOduTcmA=changeServiceDeployProvIfCapSigDegPeriodOduTcmA, portBindingDataRemotePort=portBindingDataRemotePort, deployProvPppIpCapTable=deployProvPppIpCapTable, intervalPhysConvHighSpeed1dayTable=intervalPhysConvHighSpeed1dayTable, deployProvIfDefaultsTraceExpectedOduTcmA=deployProvIfDefaultsTraceExpectedOduTcmA, deployProvModuleLanAidCapsTable=deployProvModuleLanAidCapsTable, deployProvLogicalCpIfCapFarEndNodeIp=deployProvLogicalCpIfCapFarEndNodeIp, f7eqpF2kSh6hu=f7eqpF2kSh6hu, deployProvLogicalCpIfAreaId=deployProvLogicalCpIfAreaId, intervalPhysPerfCarrierFreqOffset1weekNumber=intervalPhysPerfCarrierFreqOffset1weekNumber, intervalEthRx3HS1dayBytesFrames65Rcv=intervalEthRx3HS1dayBytesFrames65Rcv, moduleDiagnosticsCurrentLowThres=moduleDiagnosticsCurrentLowThres, intervalPhysPerfOpticalInputPwr1weekLow=intervalPhysPerfOpticalInputPwr1weekLow, crsConnWdmDataType=crsConnWdmDataType, intervalPhysPerfOpticalInputPwr1weekTable=intervalPhysPerfOpticalInputPwr1weekTable, ethernetConfigIpType=ethernetConfigIpType, changeServiceDeployProvIfDefaultsOpuPayloadType=changeServiceDeployProvIfDefaultsOpuPayloadType, deployProvLanDefaultsIpMask=deployProvLanDefaultsIpMask, alarmElasticStoreOverflowTransmitter=alarmElasticStoreOverflowTransmitter, connectionOtnDataRole=connectionOtnDataRole, intervalPhysPerfOscOpticalOutputPwr1dayValidFlag=intervalPhysPerfOscOpticalOutputPwr1dayValidFlag, intervalGfpSublayer1dayTimeStamp=intervalGfpSublayer1dayTimeStamp, deployProvControlPlaneWdmDefaultsNaasConfigFlag=deployProvControlPlaneWdmDefaultsNaasConfigFlag, deployProvControlPlaneEthCtmShutdownTimeout=deployProvControlPlaneEthCtmShutdownTimeout, thresholdOduTcmABbeHighThres1day=thresholdOduTcmABbeHighThres1day, deployProvLogicalCpIfCapEntry=deployProvLogicalCpIfCapEntry, f7eqpNcutif=f7eqpNcutif, sts1allocatedEntry=sts1allocatedEntry)
mibBuilder.exportSymbols("FspR7-MIB", deployProvControlPlaneWdmDefaultsCtmShutdownTimeout=deployProvControlPlaneWdmDefaultsCtmShutdownTimeout, deployProvTunnelWdmRecoveryType=deployProvTunnelWdmRecoveryType, controlPlaneOtnEntityStateCapEntry=controlPlaneOtnEntityStateCapEntry, intervalPhysPerfCarrierFreqOffset1weekMean=intervalPhysPerfCarrierFreqOffset1weekMean, intervalSubAggregate1dayCrc=intervalSubAggregate1dayCrc, deployProvPortBindingRemotePort=deployProvPortBindingRemotePort, sts24callocatedFacilityType=sts24callocatedFacilityType, deployProvIfTraceExpectedOdu=deployProvIfTraceExpectedOdu, deployProvPppIpFarEndIp=deployProvPppIpFarEndIp, transientThres1DayExceededOduTcmBBbe=transientThres1DayExceededOduTcmBBbe, conditionSeverityValue=conditionSeverityValue, thresholdPhysPerfPumpLaser3TempHighThres=thresholdPhysPerfPumpLaser3TempHighThres, currentEthTx15minGoodFramesx=currentEthTx15minGoodFramesx, deployProvControlPlaneWdmCapRmTraceDetail=deployProvControlPlaneWdmCapRmTraceDetail, intervalL2EthRx1dayInterPackJunkBytesFramesRcv=intervalL2EthRx1dayInterPackJunkBytesFramesRcv, deployProvLogicalCpIfCapRefreshMultiplier=deployProvLogicalCpIfCapRefreshMultiplier, alarmPumpLaser2TempTooLow=alarmPumpLaser2TempTooLow, teNumLinkOtnDataNodeIp=teNumLinkOtnDataNodeIp, intervalOduTcmC15minEntry=intervalOduTcmC15minEntry, tunnelOtnDataTunnelScope=tunnelOtnDataTunnelScope, currentOduTcmB1dayTable=currentOduTcmB1dayTable, controlPlaneOtnConfigRaConfigFlag=controlPlaneOtnConfigRaConfigFlag, intervalPmSnapshotTable=intervalPmSnapshotTable, connectionEthDataRestorable=connectionEthDataRestorable, alarmSingleFanFailure=alarmSingleFanFailure, FspR7CpNePosition=FspR7CpNePosition, opticalIfDataLagKey=opticalIfDataLagKey, intervalPhysPerfOpticalOutputPwr1weekLow=intervalPhysPerfOpticalOutputPwr1weekLow, intervalOtuFec1dayEntry=intervalOtuFec1dayEntry, logicalCpIfConfigAuthType=logicalCpIfConfigAuthType, deployProvIfOtnStuffing=deployProvIfOtnStuffing, deployProvControlPlaneWdmCapNaasTraceDetail=deployProvControlPlaneWdmCapNaasTraceDetail, changeServiceDeployProvIfCapBehaviour=changeServiceDeployProvIfCapBehaviour, FspR7NtpTestStatus=FspR7NtpTestStatus, deployProvVchChannelTraceTransmitSapiOdu=deployProvVchChannelTraceTransmitSapiOdu, alarmLossOfSignal=alarmLossOfSignal, thresholdSonetLoPathESHighThres1day=thresholdSonetLoPathESHighThres1day, f7eqp2Tcm2g5d=f7eqp2Tcm2g5d, FspR7ApplyAlarmProfile=FspR7ApplyAlarmProfile, alarmLossOfFrameMux=alarmLossOfFrameMux, deployProvTunnelEthCapTunnelId=deployProvTunnelEthCapTunnelId, deployProvPathElementOtnRowStatus=deployProvPathElementOtnRowStatus, opticalIfConfigCapTable=opticalIfConfigCapTable, intervalOtu1dayValidFlag=intervalOtu1dayValidFlag, thresholdSonetSectTable=thresholdSonetSectTable, intervalPhysPerfOscPwr15minEntry=intervalPhysPerfOscPwr15minEntry, reservationCpDataTunnelInstance=reservationCpDataTunnelInstance, deployProvPlugCapThirdPartyUsage=deployProvPlugCapThirdPartyUsage, tnaMapDataNodeIp=tnaMapDataNodeIp, snmpAgentStartupDate=snmpAgentStartupDate, intervalPhysPerfEstimatedSignalGain1dayMean=intervalPhysPerfEstimatedSignalGain1dayMean, intervalEthTx15minCrcFramesEgress=intervalEthTx15minCrcFramesEgress, alarmTraceIdentifierMismatchOduTcmC=alarmTraceIdentifierMismatchOduTcmC, intervalPhysPerfOlmTxLineAtt1dayLow=intervalPhysPerfOlmTxLineAtt1dayLow, FspR7ModusLastRestart=FspR7ModusLastRestart, alarmThres15MinExceededOtuES=alarmThres15MinExceededOtuES, deployProvTunnelWdmSubLayer=deployProvTunnelWdmSubLayer, changeServiceDeployProvIfAprHighThreshold=changeServiceDeployProvIfAprHighThreshold, intervalEthRx3HS15minOversizedFramesRcv=intervalEthRx3HS15minOversizedFramesRcv, intervalPhysConv1dayDE=intervalPhysConv1dayDE, thresholdGfpTypeHecCorrectedFramesHighThres15Min=thresholdGfpTypeHecCorrectedFramesHighThres15Min, f7eqpRsmsf=f7eqpRsmsf, changeServiceDeployProvIfOpuPayloadType=changeServiceDeployProvIfOpuPayloadType, f7SFP2G5=f7SFP2G5, currentL2EthRx1dayFramesRcv=currentL2EthRx1dayFramesRcv, intervalL2EthTx1dayBytesFrames1519Trmt=intervalL2EthTx1dayBytesFrames1519Trmt, sts1allocatedClassInstanceNumber=sts1allocatedClassInstanceNumber, alarmAseLow=alarmAseLow, intervalLinkAttenuation15minLow=intervalLinkAttenuation15minLow, currentEthTx15minTable=currentEthTx15minTable, changeServiceDeployProvIfDefaultsBehaviour=changeServiceDeployProvIfDefaultsBehaviour, deployProvLogicalCpIfNendTeLinkIdUnn=deployProvLogicalCpIfNendTeLinkIdUnn, currentSubAggregate1dayTable=currentSubAggregate1dayTable, intervalPhysPerfCurrentOscGain1dayMean=intervalPhysPerfCurrentOscGain1dayMean, FspR7IpType=FspR7IpType, intervalPhysPerfSignalToNoiseRatio15minValidFlag=intervalPhysPerfSignalToNoiseRatio15minValidFlag, currentSonetSect15minEntry=currentSonetSect15minEntry, deployProvIfCapSigDegThresOduTcmA=deployProvIfCapSigDegThresOduTcmA, pathElementOtnDataUpTributarySlot=pathElementOtnDataUpTributarySlot, intervalGfpt1dayNumber=intervalGfpt1dayNumber, deployProvCopyPathEthCapRowStatus=deployProvCopyPathEthCapRowStatus, deployProvExChannelDefaultsChromaticDispersionTx=deployProvExChannelDefaultsChromaticDispersionTx, edfaConfigEntry=edfaConfigEntry, intervalL2EthTx15minPauseFramesTrmt=intervalL2EthTx15minPauseFramesTrmt, ptpEntityDataFunction=ptpEntityDataFunction, alarmTerminalLoopback=alarmTerminalLoopback, pppfConfigBaud=pppfConfigBaud, nodeChannelTraceChannelTx=nodeChannelTraceChannelTx, intervalLatency1dayMean=intervalLatency1dayMean, alarmEncryptionModuleCryPasswdError=alarmEncryptionModuleCryPasswdError, deployProvControlPlaneWdmDefaultsCtmMaximumRetryNumber=deployProvControlPlaneWdmDefaultsCtmMaximumRetryNumber, intervalPhysPerfOscPwr15minValidFlag=intervalPhysPerfOscPwr15minValidFlag, deployProvIfSigDegPeriodOduTcmC=deployProvIfSigDegPeriodOduTcmC, deployProvTunnelWdmCapRowStatus=deployProvTunnelWdmCapRowStatus, deployProvTunnelWdmTunnelType=deployProvTunnelWdmTunnelType, currentGfpt1dayEntry=currentGfpt1dayEntry, intervalFarEndPhysPerfOpticalInputPwr1dayEntry=intervalFarEndPhysPerfOpticalInputPwr1dayEntry, deployProvTunnelEthTunnelScope=deployProvTunnelEthTunnelScope, intervalGfpSublayer1dayNumber=intervalGfpSublayer1dayNumber, currentConditionTable=currentConditionTable, f7SFPHS=f7SFPHS, intervalL2EthRx1dayBytesFrames256Rcv=intervalL2EthRx1dayBytesFrames256Rcv, tunnelEthDataErrorTid=tunnelEthDataErrorTid, tunnelWdmConfigProvisionedPaths=tunnelWdmConfigProvisionedPaths, equipmentInserted=equipmentInserted, deployProvIfCapAprHighThreshold=deployProvIfCapAprHighThreshold, intervalFarEndPhysPerfOpticalInputPwr1weekHigh=intervalFarEndPhysPerfOpticalInputPwr1weekHigh, deployProvControlPlaneWdmCtmRetryWaitMultiplier=deployProvControlPlaneWdmCtmRetryWaitMultiplier, intervalOduTcmC15minBbe=intervalOduTcmC15minBbe, deployProvPathElementEthDefaultsRowStatus=deployProvPathElementEthDefaultsRowStatus, FspR7FlowControlModeCaps=FspR7FlowControlModeCaps, deployProvLogicalCpIfFendDataLinkId=deployProvLogicalCpIfFendDataLinkId, changeServiceDeployProvIfCapVariableGain=changeServiceDeployProvIfCapVariableGain, tnaMapDataRemoteTna=tnaMapDataRemoteTna, thresholdFarEndPhysPerfCapEntry=thresholdFarEndPhysPerfCapEntry, FspR7CpCancConnectionCaps=FspR7CpCancConnectionCaps, deployProvTunnelWdmDefaultsConnectionDirection=deployProvTunnelWdmDefaultsConnectionDirection, opticalIfConfigLagPrio=opticalIfConfigLagPrio, deployProvLogicalIfCapIpAddr=deployProvLogicalIfCapIpAddr, fspUserManagementAccountFlag=fspUserManagementAccountFlag, ptpEntityDataBandProvision=ptpEntityDataBandProvision, tunnelEthConfigCirRcv=tunnelEthConfigCirRcv, tunnelEthDataErrorIp=tunnelEthDataErrorIp, currentEthTx1dayEntry=currentEthTx1dayEntry, intervalOduTcmB15minNumber=intervalOduTcmB15minNumber, deployProvControlPlaneEthCapCdTraceDetail=deployProvControlPlaneEthCapCdTraceDetail, thresholdOtuFecSublayerCEHighThres1day=thresholdOtuFecSublayerCEHighThres1day, changeServiceDeployProvIfCapIpAddr=changeServiceDeployProvIfCapIpAddr, deployProvIfDefaultsXfpDecisionThres=deployProvIfDefaultsXfpDecisionThres, deployProvPathElementWdmCapTid=deployProvPathElementWdmCapTid, alarmApdHighVoltage=alarmApdHighVoltage, f7eqpF2kSh5hu=f7eqpF2kSh5hu, currentGfpfrSublayer15minElapsedTime=currentGfpfrSublayer15minElapsedTime, deployProvIfCapSigDegThresOtu=deployProvIfCapSigDegThresOtu, changeServiceDeployProvIfCapTraceExpectedOduTcmA=changeServiceDeployProvIfCapTraceExpectedOduTcmA, deployProvTunnelOtnDefaultsToTid=deployProvTunnelOtnDefaultsToTid, currentSonetLine15minTable=currentSonetLine15minTable, thresholdSonetLoPathCVHighThres1day=thresholdSonetLoPathCVHighThres1day, intervalSonetSect15minSEFS=intervalSonetSect15minSEFS, intervalOduTcmB15minEntry=intervalOduTcmB15minEntry, currentSonetLine1dayEntry=currentSonetLine1dayEntry, exChannelDataTable=exChannelDataTable, deployProvIfTimModeOtu=deployProvIfTimModeOtu, deployProvModuleLagSysPrio=deployProvModuleLagSysPrio, deployProvTunnelEthCapEntry=deployProvTunnelEthCapEntry, intervalFarEndPhysPerfOpticalOutputPwr15minValidFlag=intervalFarEndPhysPerfOpticalOutputPwr15minValidFlag, deployProvCopyPathWdmCapSourcePathIndex=deployProvCopyPathWdmCapSourcePathIndex, controlPlaneOtnConfigCtmMaximumRetryWait=controlPlaneOtnConfigCtmMaximumRetryWait, changeServiceDeployProvIfCapVoaSetpoint=changeServiceDeployProvIfCapVoaSetpoint, forceDeployProvApsDirection=forceDeployProvApsDirection, transientEqlzFailed=transientEqlzFailed, farEndIfDiagnosticsOutputPower=farEndIfDiagnosticsOutputPower, apsProtGroupStatusDirection=apsProtGroupStatusDirection, deployProvExChannelCapFarEndLocation=deployProvExChannelCapFarEndLocation, intervalEthRxHighSpeed1dayPauseFrames=intervalEthRxHighSpeed1dayPauseFrames, deployProvControlPlaneOtnDefaultsRsvpMaxExpRecoveryTime=deployProvControlPlaneOtnDefaultsRsvpMaxExpRecoveryTime, deployProvIfDefaultsTilt=deployProvIfDefaultsTilt, deployProvControlPlaneEthCapCtmRetryWait=deployProvControlPlaneEthCapCtmRetryWait, ptpEntityDataReach=ptpEntityDataReach, deployProvLogicalIfDefaultsTimeToLive=deployProvLogicalIfDefaultsTimeToLive, deployProvIfDefaultsTraceTransmitDapiOduTcmC=deployProvIfDefaultsTraceTransmitDapiOduTcmC, opticalIfConfigCapEntry=opticalIfConfigCapEntry, deployProvIfCapLacpTimeout=deployProvIfCapLacpTimeout, deployProvControlPlaneEthNaasAdvertWait=deployProvControlPlaneEthNaasAdvertWait, deployProvControlPlaneOtnTedbConfigFlag=deployProvControlPlaneOtnTedbConfigFlag, connectionConfigAndStatus=connectionConfigAndStatus, changeServiceDeployProvIfTraceTransmitOpspOduTcmB=changeServiceDeployProvIfTraceTransmitOpspOduTcmB, moduleDataHeight=moduleDataHeight, deployProvIfCac=deployProvIfCac, deployProvModuleLanAidCapsIndex=deployProvModuleLanAidCapsIndex, entityDeletion=entityDeletion, FspR7DispersionCompensation=FspR7DispersionCompensation, intervalL2EthRx1dayBroadcastFramesRcv=intervalL2EthRx1dayBroadcastFramesRcv, deployProvCopyPathOtnTable=deployProvCopyPathOtnTable, deployProvOpticalLinkFarEndLocation=deployProvOpticalLinkFarEndLocation, intervalSubAggregate15minCrc=intervalSubAggregate15minCrc, intervalPhysPerfOscOpticalOutputPwr1dayLow=intervalPhysPerfOscOpticalOutputPwr1dayLow, deployProvTifOutputAdmin=deployProvTifOutputAdmin, intervalPhysPerfOscOpticalOutputPwr15minTimeStamp=intervalPhysPerfOscOpticalOutputPwr15minTimeStamp, opticalAmplifierInterfaceDiagnosticsTable=opticalAmplifierInterfaceDiagnosticsTable, currentGfpSublayer15minElapsedTime=currentGfpSublayer15minElapsedTime, vchDataVcType=vchDataVcType, logicalCpIfDataEntry=logicalCpIfDataEntry, FspR7OpuPayloadTypeCaps=FspR7OpuPayloadTypeCaps, intervalOduTcmC1dayEntry=intervalOduTcmC1dayEntry, intervalPhysPerfDiffGrDelay1weekMean=intervalPhysPerfDiffGrDelay1weekMean, tnaMapDataEntry=tnaMapDataEntry, exChannelConfigAlias=exChannelConfigAlias, alarmLossOfPointerHigherOrderPath=alarmLossOfPointerHigherOrderPath, teUnnumLinkWdmDataDiscarded=teUnnumLinkWdmDataDiscarded, deployProvModuleCapChannel=deployProvModuleCapChannel, deployProvPathElementOtnDownTributarySlot=deployProvPathElementOtnDownTributarySlot, opticalIfDataOdtuType=opticalIfDataOdtuType, nodeChannelTraceRouteElementId=nodeChannelTraceRouteElementId, deployProvTunnelEthAlias=deployProvTunnelEthAlias, thresholdPhysPerfOscPwrRcvHighThres=thresholdPhysPerfOscPwrRcvHighThres, deployProvTunnelOtnCapTunnelScope=deployProvTunnelOtnCapTunnelScope, intervalOdu15minEntry=intervalOdu15minEntry, alarmReceiverDisabled=alarmReceiverDisabled, deployProvIfDefaultsWdmRxChannel=deployProvIfDefaultsWdmRxChannel, deployProvApsCapWorkingAid=deployProvApsCapWorkingAid, changeServiceDeployProvIfDispersionSetting=changeServiceDeployProvIfDispersionSetting, deployProvPortBindingCapLayer=deployProvPortBindingCapLayer, thresholdEthRxDiscardedFramesHighThres1Day=thresholdEthRxDiscardedFramesHighThres1Day, currentOtuFec1dayUBE=currentOtuFec1dayUBE, f7eqpSfpc=f7eqpSfpc, opticalIfConfigCapLagLoadBallanceSource=opticalIfConfigCapLagLoadBallanceSource, f7eqpwca2g5=f7eqpwca2g5, teUnnumLinkWdmDataTeLinkId=teUnnumLinkWdmDataTeLinkId, currentSonetLoPath15minEntry=currentSonetLoPath15minEntry, crsConnWdmConfigType=crsConnWdmConfigType, deployProvApsCapApsType=deployProvApsCapApsType, opticalIfConfigTransmitChannel=opticalIfConfigTransmitChannel, deployProvLanIpMask=deployProvLanIpMask, sts3callocatedTable=sts3callocatedTable, deployProvApsDefaultsDirection=deployProvApsDefaultsDirection, deployProvTunnelEthCapFacilityType=deployProvTunnelEthCapFacilityType, exChannelConfigPMDTransmit=exChannelConfigPMDTransmit, deployProvPlugCapLoopbackAttenuation=deployProvPlugCapLoopbackAttenuation, eRoadmInfoShelfHeight=eRoadmInfoShelfHeight, f7eqp4Tca4g=f7eqp4Tca4g, tunnelWdmDataToTidMonitor=tunnelWdmDataToTidMonitor, deployProvApsProtectingAidCapsEntry=deployProvApsProtectingAidCapsEntry, deployProvTunnelWdmCapTable=deployProvTunnelWdmCapTable, intervalDispersionCompensation1weekTable=intervalDispersionCompensation1weekTable, fspUserManagementTl1TimeoutAvailable=fspUserManagementTl1TimeoutAvailable, deployProvPppIpCapDefaultGateway=deployProvPppIpCapDefaultGateway, deployProvLogicalCpIfAuthType=deployProvLogicalCpIfAuthType, deployProvControlPlaneEthNaasTraceDetail=deployProvControlPlaneEthNaasTraceDetail, forceDeployProvApsWaitToRestore=forceDeployProvApsWaitToRestore, alarmAseTableGenFailPilot=alarmAseTableGenFailPilot, intervalPhysPerfDiffGrDelay1dayHigh=intervalPhysPerfDiffGrDelay1dayHigh, thresholdPhysPerfTable=thresholdPhysPerfTable, eocDataProtAvailability=eocDataProtAvailability, intervalEthRx3HS1dayJabberFrameRcv=intervalEthRx3HS1dayJabberFrameRcv, deployProvModuleCapPsuOutputPower=deployProvModuleCapPsuOutputPower, deployProvControlPlaneEthDefaultsPcConfigFlag=deployProvControlPlaneEthDefaultsPcConfigFlag, FspR7YesNoCaps=FspR7YesNoCaps, deployProvIfDefaultsUtag=deployProvIfDefaultsUtag, deployProvPathElementEthCapNodeIp=deployProvPathElementEthCapNodeIp, currentL2EthRx15minElapsedTime=currentL2EthRx15minElapsedTime, intervalOduTcmB1dayTable=intervalOduTcmB1dayTable, deployProvIfDefaultsPortRole=deployProvIfDefaultsPortRole, alarmPumpLaser1TempTooLow=alarmPumpLaser1TempTooLow, intervalGfpSublayer15minTypeHecDiscardedFrames=intervalGfpSublayer15minTypeHecDiscardedFrames, deployProvPppIpCapOspf=deployProvPppIpCapOspf, FspR7LagState=FspR7LagState, deployProvLogicalCpIfCapLinkColor=deployProvLogicalCpIfCapLinkColor, alarmLaserTemperatureTooHigh=alarmLaserTemperatureTooHigh, deployProvModuleDefaultsMapping=deployProvModuleDefaultsMapping, crsConnDeployProvCapConn=crsConnDeployProvCapConn, intervalPhysPerfBackreflectionPwrRcv1dayHigh=intervalPhysPerfBackreflectionPwrRcv1dayHigh, chassisDeletion=chassisDeletion, alarmLossofMultiframeLowerOrderPath=alarmLossofMultiframeLowerOrderPath)
mibBuilder.exportSymbols("FspR7-MIB", tunnelWdmDataFromTid=tunnelWdmDataFromTid, connectionEthDataToAid=connectionEthDataToAid, FspR7AlsHoldoffCaps=FspR7AlsHoldoffCaps, FspR7AccountFlag=FspR7AccountFlag, currentEthRx3HS15minFragmentFramesRcv=currentEthRx3HS15minFragmentFramesRcv, connectionWdmDataEncode=connectionWdmDataEncode, intervalOduTcmA1dayEntry=intervalOduTcmA1dayEntry, deployProvIfCapTraceTransmitSapiOduTcmB=deployProvIfCapTraceTransmitSapiOduTcmB, crsConnWdmDataIngressTid=crsConnWdmDataIngressTid, changeServiceDeployProvIfTraceTransmitOpspOdu=changeServiceDeployProvIfTraceTransmitOpspOdu, deployProvControlPlaneOtnDefaultsCtmMaximumRetryNumber=deployProvControlPlaneOtnDefaultsCtmMaximumRetryNumber, eRoadmInfoChannel=eRoadmInfoChannel, currentGfp1dayCoreHecCorrectedFrames=currentGfp1dayCoreHecCorrectedFrames, intervalOtuFec15minSES=intervalOtuFec15minSES, deployProvControlPlaneEthCapCmConfigFlag=deployProvControlPlaneEthCapCmConfigFlag, intervalPhysPerfChromaticDispersion1dayTimeStamp=intervalPhysPerfChromaticDispersion1dayTimeStamp, deployProvLogicalCpIfEntry=deployProvLogicalCpIfEntry, deployProvIfDefaultsTimModeSonetSection=deployProvIfDefaultsTimModeSonetSection, deployProvTunnelOtnProtectionType=deployProvTunnelOtnProtectionType, pathOtnDataConnectionTunnelAid=pathOtnDataConnectionTunnelAid, thresholdEthRxEntry=thresholdEthRxEntry, intervalOduTcmB1dayUAS=intervalOduTcmB1dayUAS, thresholdSonetHoPathSESHighThres15min=thresholdSonetHoPathSESHighThres15min, teUnnumLinkOtnDataInfo=teUnnumLinkOtnDataInfo, FspR7CpRsvpSignalling=FspR7CpRsvpSignalling, changeServiceDeployProvIfChannelProvisioning=changeServiceDeployProvIfChannelProvisioning, intervalSonetHoPath15minUAS=intervalSonetHoPath15minUAS, currentEthRx3HS15minBytesFrames128Rcv=currentEthRx3HS15minBytesFrames128Rcv, deployProvControlPlaneOtnCapTedbMaxSize=deployProvControlPlaneOtnCapTedbMaxSize, FspR7TiltSetCaps=FspR7TiltSetCaps, alarmChromaticDispersionTooLow=alarmChromaticDispersionTooLow, inventoryCpWdmDownDataFacilities=inventoryCpWdmDownDataFacilities, deployProvIfCapChannelProvisioning=deployProvIfCapChannelProvisioning, deployProvVchChannelDefaultsCir=deployProvVchChannelDefaultsCir, intervalPhysPerfBackreflectionPwrRcv1dayTable=intervalPhysPerfBackreflectionPwrRcv1dayTable, shelfConfigTable=shelfConfigTable, teUnnumLinkOtnDataDiscarded=teUnnumLinkOtnDataDiscarded, reservationCpDataTable=reservationCpDataTable, currentEthRx1dayCrcFrames=currentEthRx1dayCrcFrames, ApsDirection=ApsDirection, changeServiceDeployProvIfCapTraceTransmitSapiOduTcmB=changeServiceDeployProvIfCapTraceTransmitSapiOduTcmB, currentOtuFec1dayTable=currentOtuFec1dayTable, connectionEthDataNetworkElementPosition=connectionEthDataNetworkElementPosition, deployProvExChannelCapBitrate=deployProvExChannelCapBitrate, FspR7InterfaceFunctionCaps=FspR7InterfaceFunctionCaps, controlPlaneOtnConfigRsvpMaxExpRecoveryTime=controlPlaneOtnConfigRsvpMaxExpRecoveryTime, deployProvControlPlaneWdmTedbRouterId=deployProvControlPlaneWdmTedbRouterId, intervalOduTcmA1dayES=intervalOduTcmA1dayES, portBindingLifAidIndex=portBindingLifAidIndex, intervalGfpfr1dayValidFlag=intervalGfpfr1dayValidFlag, deployProvLogicalIfEncapsulation=deployProvLogicalIfEncapsulation, deployProvPathElementEthDefaultsTid=deployProvPathElementEthDefaultsTid, deployProvIfCapOpuPayloadType=deployProvIfCapOpuPayloadType, changeServiceDeployProvIfIpType=changeServiceDeployProvIfIpType, eRoadmConfigCapTable=eRoadmConfigCapTable, changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmC=changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmC, alarmAttOnTransmitterFiberHigherThanMonitor=alarmAttOnTransmitterFiberHigherThanMonitor, deployProvIfDefaultsDisparityCorrection=deployProvIfDefaultsDisparityCorrection, currentOduTcmA1dayEntry=currentOduTcmA1dayEntry, opticalIfDiagLaserBiasCurrentNormalized=opticalIfDiagLaserBiasCurrentNormalized, changeServiceDeployProvIfCapDisparityCorrection=changeServiceDeployProvIfCapDisparityCorrection, dcnOspfAreaIfListSize=dcnOspfAreaIfListSize, inventoryCpEthUpDataEntry=inventoryCpEthUpDataEntry, moduleConfigTable=moduleConfigTable, controlPlaneEthDataCtmAlias=controlPlaneEthDataCtmAlias, deployProvConnNonStdCapToEntry=deployProvConnNonStdCapToEntry, controlPlaneWdmConfigRmTraceTarget=controlPlaneWdmConfigRmTraceTarget, FspR7CpTie=FspR7CpTie, deployProvLogicalIfCapLanLinkAid=deployProvLogicalIfCapLanLinkAid, nodeChannelTraceEntry=nodeChannelTraceEntry, FspR7StateConnection=FspR7StateConnection, transientCopyFileFailDisabledProtocol=transientCopyFileFailDisabledProtocol, changeServiceDeployProvIfCapSigDegThresOduTcmB=changeServiceDeployProvIfCapSigDegThresOduTcmB, deployProvIfEntry=deployProvIfEntry, deployProvLogicalCpIfDefaultsTimeToLive=deployProvLogicalCpIfDefaultsTimeToLive, changeServiceDeployProvIfForceDestroy=changeServiceDeployProvIfForceDestroy, ethernetConfigBitrate=ethernetConfigBitrate, currentOduTcmC1dayBbe=currentOduTcmC1dayBbe, ptpEntityDataDirection=ptpEntityDataDirection, FspR7CpTunnelScope=FspR7CpTunnelScope, deployProvLanDefaultsMetric=deployProvLanDefaultsMetric, changeServiceDeployProvIfEqlzAdmin=changeServiceDeployProvIfEqlzAdmin, deployProvIfDefaultsGain=deployProvIfDefaultsGain, FspR7EqlzInterval=FspR7EqlzInterval, opticalIfDataAlsHoldoff=opticalIfDataAlsHoldoff, intervalPhysPerfBackreflectionPwrRcv15minMean=intervalPhysPerfBackreflectionPwrRcv15minMean, FspR7CapInventoryCaps=FspR7CapInventoryCaps, FspR7BERThreshold=FspR7BERThreshold, deployProvCopyPathOtnDefaultsSourcePathIndex=deployProvCopyPathOtnDefaultsSourcePathIndex, intervalEthTx1dayTimeStamp=intervalEthTx1dayTimeStamp, deployProvIfSigDegThresReceiver=deployProvIfSigDegThresReceiver, deployProvIfDefaultsTcmBLevel=deployProvIfDefaultsTcmBLevel, f7eqp4Tcc10gtd=f7eqp4Tcc10gtd, opticalIfDataLagSysMac=opticalIfDataLagSysMac, changeServiceDeployProvIfDefaultsOffset=changeServiceDeployProvIfDefaultsOffset, transientCopyFileProtocolFail=transientCopyFileProtocolFail, intervalSonetSect1dayCV=intervalSonetSect1dayCV, dcnTopologyConfigEntry=dcnTopologyConfigEntry, opticalIfConfigForceLaserOn=opticalIfConfigForceLaserOn, deployProvLogicalIfCapPrio=deployProvLogicalIfCapPrio, intervalPhysPerfOlmTxLineAtt15minMean=intervalPhysPerfOlmTxLineAtt15minMean, alarmSectionTraceMismatch=alarmSectionTraceMismatch, controlPlaneOtnDataCdAlias=controlPlaneOtnDataCdAlias, thresholdPhysConvCombinedEntry=thresholdPhysConvCombinedEntry, deployProvPlugDefaultsEntry=deployProvPlugDefaultsEntry, transientThres1DayExceededPhysConvESTX=transientThres1DayExceededPhysConvESTX, deployProvVchChannelCapAdmin=deployProvVchChannelCapAdmin, opticalIfDiagOscPowerReceived=opticalIfDiagOscPowerReceived, alarmAutomaticPowerReductionForEyeSafety=alarmAutomaticPowerReductionForEyeSafety, deployProvModuleSupply=deployProvModuleSupply, alarmWtrTimerRunning=alarmWtrTimerRunning, crsConnWdmDataConn=crsConnWdmDataConn, intervalPhysPerfPumpPwr15minTable=intervalPhysPerfPumpPwr15minTable, forceDeployProvApsDefaultsProtectionMech=forceDeployProvApsDefaultsProtectionMech, crsDcnDataTable=crsDcnDataTable, deployProvApsCapSignalFailureSwitching=deployProvApsCapSignalFailureSwitching, deployProvVirtualOpticalChannelRowStatus=deployProvVirtualOpticalChannelRowStatus, configAndStatusMIB=configAndStatusMIB, tunnelWdmDataErrorCategory=tunnelWdmDataErrorCategory, FspR7TL1TimoutAvailableCaps=FspR7TL1TimoutAvailableCaps, intervalLinkAttenuation1weekTimeStamp=intervalLinkAttenuation1weekTimeStamp, intervalEthRx3HS15minBytesFrames65Rcv=intervalEthRx3HS15minBytesFrames65Rcv, currentSonetSect1daySEFS=currentSonetSect1daySEFS, alarmPayloadMismatchGfp=alarmPayloadMismatchGfp, neSecurityModeCapability=neSecurityModeCapability, intervalLatency1dayTimeStamp=intervalLatency1dayTimeStamp, intervalPhysPerfCurrent1dayMean=intervalPhysPerfCurrent1dayMean, intervalSonetLine15minCV=intervalSonetLine15minCV, apsConfigWaitToRestore=apsConfigWaitToRestore, intervalL2EthRx15minOversizedFramesRcv=intervalL2EthRx15minOversizedFramesRcv, transientLocalCopyMemFailWrongState=transientLocalCopyMemFailWrongState, currentGfp1dayElapsedTime=currentGfp1dayElapsedTime, deployProvLogicalIfDefaultsAlias=deployProvLogicalIfDefaultsAlias, entityStateOper=entityStateOper, ethernetConfigAreaId=ethernetConfigAreaId, deployProvTifOutputDefaultsAdmin=deployProvTifOutputDefaultsAdmin, tunnelOtnDataTunnelType=tunnelOtnDataTunnelType, deployProvPathWdmCapRowStatus=deployProvPathWdmCapRowStatus, intervalGfpfrSublayer15minNumber=intervalGfpfrSublayer15minNumber, deployProvTunnelWdmDefaultsToAid=deployProvTunnelWdmDefaultsToAid, currentSonetLoPath1dayCV=currentSonetLoPath1dayCV, changeServiceDeployProvIfIpAddr=changeServiceDeployProvIfIpAddr, intervalPhysPerfCarrierFreqOffset1weekTimeStamp=intervalPhysPerfCarrierFreqOffset1weekTimeStamp, intervalPhysPerfEstimatedSignalGain1dayLow=intervalPhysPerfEstimatedSignalGain1dayLow, deployProvLogicalCpIfCapLayer=deployProvLogicalCpIfCapLayer, intervalPhysPerfOpticalOutputPwr1dayMean=intervalPhysPerfOpticalOutputPwr1dayMean, intervalPhysPerfCarrierFreqOffset1dayTimeStamp=intervalPhysPerfCarrierFreqOffset1dayTimeStamp, alarmLossOfLane=alarmLossOfLane, deployProvVchChannelCapTimModeOdu=deployProvVchChannelCapTimModeOdu, deployProvDcnCapExternalVid=deployProvDcnCapExternalVid, intervalPhysConvCombined1dayNumber=intervalPhysConvCombined1dayNumber, dcnTopologyStatusTopologyType=dcnTopologyStatusTopologyType, neDatabaseNcuType=neDatabaseNcuType, thresholdSonetLineMsCVHighThres15min=thresholdSonetLineMsCVHighThres15min, alarmSignalDegradeSection=alarmSignalDegradeSection, intervalL2EthRx15minValidFlag=intervalL2EthRx15minValidFlag, currentEthRx1dayEntry=currentEthRx1dayEntry, alarmCpTunnelPrecompFailed=alarmCpTunnelPrecompFailed, logicalCpIfDataLayer=logicalCpIfDataLayer, intervalPhysConvHighSpeed1dayNumber=intervalPhysConvHighSpeed1dayNumber, deployProvTunnelOtnCapConnectionDirection=deployProvTunnelOtnCapConnectionDirection, deployProvIfTraceExpectedOduTcmC=deployProvIfTraceExpectedOduTcmC, deployProvDcnForceDestroy=deployProvDcnForceDestroy, deployProvControlPlaneWdmDefaultsCmAlarmActivationTime=deployProvControlPlaneWdmDefaultsCmAlarmActivationTime, thresholdSonetLineCVHighThres15min=thresholdSonetLineCVHighThres15min, intervalPhysPerfSignalToNoiseRatio15minTimeStamp=intervalPhysPerfSignalToNoiseRatio15minTimeStamp, vchConfigCir=vchConfigCir, controlPlaneEthConfigCtmRetryWait=controlPlaneEthConfigCtmRetryWait, deployProvModuleCapSupply=deployProvModuleCapSupply, intervalSonetSect1dayValidFlag=intervalSonetSect1dayValidFlag, deployProvModuleCapabilityLevel=deployProvModuleCapabilityLevel, deployProvIfDefaultsOscOpticalSetpoint=deployProvIfDefaultsOscOpticalSetpoint, intervalPmSnapshotValidFlag=intervalPmSnapshotValidFlag, alarmAirDustFilterClogged=alarmAirDustFilterClogged, intervalPhysConvHighSpeed15minCV=intervalPhysConvHighSpeed15minCV, currentSonetHoPath1daySES=currentSonetHoPath1daySES, intervalEthRx3HS15minBytesFrames512Rcv=intervalEthRx3HS15minBytesFrames512Rcv, opticalIfConfigFecType=opticalIfConfigFecType, controlPlaneOtnConfigTedbMaxSize=controlPlaneOtnConfigTedbMaxSize, intervalEthRx3HS15minBytesFrames128Rcv=intervalEthRx3HS15minBytesFrames128Rcv, farEndIfDiagnosticsLaserBiasCurrentLevel=farEndIfDiagnosticsLaserBiasCurrentLevel, intervalPhysPerfCarrierFreqOffset15minValidFlag=intervalPhysPerfCarrierFreqOffset15minValidFlag, thresholdSubAggregateSESHighThres15min=thresholdSubAggregateSESHighThres15min, eRoadmConfigOffset=eRoadmConfigOffset, alarmCurrentTooLow=alarmCurrentTooLow, intervalPhysPerfOscOpticalOutputPwr1weekHigh=intervalPhysPerfOscOpticalOutputPwr1weekHigh, neDatabaseNcuAid=neDatabaseNcuAid, deployProvModuleLanAidCapsEntry=deployProvModuleLanAidCapsEntry, logicalCpIfDataNendTeLinkIdNum=logicalCpIfDataNendTeLinkIdNum, alarmLossOfPilotSignal=alarmLossOfPilotSignal, entityStateEntry=entityStateEntry, deployProvControlPlaneWdmTable=deployProvControlPlaneWdmTable, deployProvPathElementWdmCapTable=deployProvPathElementWdmCapTable, routingIpDestination=routingIpDestination, vs1allocatedEntry=vs1allocatedEntry, FspR7CpRole=FspR7CpRole, alarmThermoElectricCoolerCurrentTooHigh=alarmThermoElectricCoolerCurrentTooHigh, eRoadmConfigCapEntry=eRoadmConfigCapEntry, deployProvControlPlaneOtnDefaultsCmAlarmActivationTime=deployProvControlPlaneOtnDefaultsCmAlarmActivationTime, thresholdDefectSecondsTable=thresholdDefectSecondsTable, currentL2EthRx1dayBytesFrames64Rcv=currentL2EthRx1dayBytesFrames64Rcv, currentL2EthRx1dayBytesRcv=currentL2EthRx1dayBytesRcv, FspR7FecTypeCaps=FspR7FecTypeCaps, FspR7VoaMode=FspR7VoaMode, currentEthRx15minEntry=currentEthRx15minEntry, deployProvControlPlaneOtnDefaultsPcTraceDetail=deployProvControlPlaneOtnDefaultsPcTraceDetail, connectionWdmDataFecType=connectionWdmDataFecType, deployProvLanForceDestroy=deployProvLanForceDestroy, currentL2EthRx15minOversizedFramesRcv=currentL2EthRx15minOversizedFramesRcv, intervalEthRx3HS1dayGoodFrames=intervalEthRx3HS1dayGoodFrames, thresholdPhysPerfCapOscPwrRcvHighThres=thresholdPhysPerfCapOscPwrRcvHighThres, FspR7StuffCaps=FspR7StuffCaps, transientLocalCopyMemFailDenied=transientLocalCopyMemFailDenied, changeServiceDeployProvIfDefaultsTilt=changeServiceDeployProvIfDefaultsTilt, deployProvControlPlaneWdmNaasAdvertWait=deployProvControlPlaneWdmNaasAdvertWait, dcnTopologyDataNodeIpAddress=dcnTopologyDataNodeIpAddress, deployProvIfTraceExpectedSonetSection=deployProvIfTraceExpectedSonetSection, deployProvControlPlaneOtnCapNaasMaxSize=deployProvControlPlaneOtnCapNaasMaxSize, alarmOscOpticalPowerControlFailHigh=alarmOscOpticalPowerControlFailHigh, neTime=neTime, pathWdmDataPathType=pathWdmDataPathType, opticalIfDataLaserOffDelayTime=opticalIfDataLaserOffDelayTime, changeServiceDeployProvIfTimModeOduTcmA=changeServiceDeployProvIfTimModeOduTcmA, f7eqpPsu7hudc=f7eqpPsu7hudc, inventoryCpOtnCrsDownDataNumber=inventoryCpOtnCrsDownDataNumber, deployProvLogicalIfMetric=deployProvLogicalIfMetric, currentOtuFec1daySES=currentOtuFec1daySES, f7eqpDrm=f7eqpDrm, pathElementOtnDataDownTributaryPort=pathElementOtnDataDownTributaryPort, deployProvTifInputAdmin=deployProvTifInputAdmin, currentOduTcmA15minSES=currentOduTcmA15minSES, transientThres1DayExceededOduTcmBES=transientThres1DayExceededOduTcmBES, currentL2EthTx15minBytesFrames65Trmt=currentL2EthTx15minBytesFrames65Trmt, deployProvApsCapFarEndIp=deployProvApsCapFarEndIp, currentPhysConvTxHighSpeed15minEntry=currentPhysConvTxHighSpeed15minEntry, deployProvIfCapUtag=deployProvIfCapUtag, neSwVersion=neSwVersion, tnaMapDataRemoteTnaMask=tnaMapDataRemoteTnaMask, neGradeInventory=neGradeInventory, FspR7StandingConditionTypes=FspR7StandingConditionTypes, deployProvTunnelOtnDefaultsProtectionType=deployProvTunnelOtnDefaultsProtectionType, deployProvLogicalCpIfCapFendTeLinkIdNum=deployProvLogicalCpIfCapFendTeLinkIdNum, intervalPhysPerfCarrierFreqOffset1weekValidFlag=intervalPhysPerfCarrierFreqOffset1weekValidFlag, intervalOtu1dayBbe=intervalOtu1dayBbe, deployProvPathElementOtnCapLogicalInterfaceId=deployProvPathElementOtnCapLogicalInterfaceId, alarmThres15MinExceededOduTcmCSES=alarmThres15MinExceededOduTcmCSES, changeServiceDeployProvIfDefaultsFlowControl=changeServiceDeployProvIfDefaultsFlowControl, intervalLinkAttenuation1weekValidFlag=intervalLinkAttenuation1weekValidFlag, deployProvIfCapTraceFormSonetSection=deployProvIfCapTraceFormSonetSection, moduleConfigCapCac=moduleConfigCapCac, deployProvControlPlaneWdmTedbConfigFlag=deployProvControlPlaneWdmTedbConfigFlag, connectionOtnConfigEntry=connectionOtnConfigEntry, deployProvTunnelOtnPin=deployProvTunnelOtnPin, transientCryptoFwpRevChanged=transientCryptoFwpRevChanged)
mibBuilder.exportSymbols("FspR7-MIB", deployProvPlugDefaultsAdmin=deployProvPlugDefaultsAdmin, alarmLossofSequenceLowerOrderPath=alarmLossofSequenceLowerOrderPath, FspR7LaserOffDelayTimeCaps=FspR7LaserOffDelayTimeCaps, f7eqpRaman=f7eqpRaman, f7eqp2absmc=f7eqp2absmc, opticalIfConfigLacpTimeout=opticalIfConfigLacpTimeout, intervalL2EthTx1dayTable=intervalL2EthTx1dayTable, deployProvModuleAdmin=deployProvModuleAdmin, deployProvControlPlaneWdmCapTable=deployProvControlPlaneWdmCapTable, intervalPhysPerfOscPwr1weekEntry=intervalPhysPerfOscPwr1weekEntry, intervalPhysConvTxHighSpeed15minTable=intervalPhysConvTxHighSpeed15minTable, currentOdu1dayElapsedTime=currentOdu1dayElapsedTime, currentL2EthTx15minBytesFrames512Trmt=currentL2EthTx15minBytesFrames512Trmt, deployProvVchChannelDefaultsEqlzAdmin=deployProvVchChannelDefaultsEqlzAdmin, deployProvIfSigDegThresSdhMs=deployProvIfSigDegThresSdhMs, intervalOtu1daySES=intervalOtu1daySES, deployProvModuleCapChannelSpacingProvision=deployProvModuleCapChannelSpacingProvision, currentL2EthTx1dayEntry=currentL2EthTx1dayEntry, inventoryCpEthDownDataNumber=inventoryCpEthDownDataNumber, intervalSonetLine1dayValidFlag=intervalSonetLine1dayValidFlag, deployProvModuleCapFiber=deployProvModuleCapFiber, forceDeployProvApsCapDirection=forceDeployProvApsCapDirection, intervalPhysPerfDiffGrDelay1weekNumber=intervalPhysPerfDiffGrDelay1weekNumber, thresholdPhysPerfOscPwrRcvLowThres=thresholdPhysPerfOscPwrRcvLowThres, transientDay1RecordsAvailable=transientDay1RecordsAvailable, deployProvPathElementOtnDefaultsLifIp=deployProvPathElementOtnDefaultsLifIp, alarmAutoShutdownSendingAisLine=alarmAutoShutdownSendingAisLine, neDaylightSavingsTimeEnabled=neDaylightSavingsTimeEnabled, apsConfigSDswitching=apsConfigSDswitching, thresholdOduTcmAESHighThres15min=thresholdOduTcmAESHighThres15min, deployProvIfTributarySlotMethod=deployProvIfTributarySlotMethod, intervalDispersionCompensation15minHigh=intervalDispersionCompensation15minHigh, dcnTopologyConfigCapEntry=dcnTopologyConfigCapEntry, connectionWdmDataRestorationState=connectionWdmDataRestorationState, FspR7ScuDbBackup=FspR7ScuDbBackup, deployProvIfDefaultsSigDegThresSdhMs=deployProvIfDefaultsSigDegThresSdhMs, tunnelWdmDataComputedPaths=tunnelWdmDataComputedPaths, opticalIfConfigWdmRxChannel=opticalIfConfigWdmRxChannel, deployProvOpticalLinkEntry=deployProvOpticalLinkEntry, changeServiceDeployProvIfCapTraceTransmitOpspOdu=changeServiceDeployProvIfCapTraceTransmitOpspOdu, deployProvPortBindingDefaultsRemoteNodeIp=deployProvPortBindingDefaultsRemoteNodeIp, deployProvLogicalCpIfDefaultsIpAddr=deployProvLogicalCpIfDefaultsIpAddr, interfaceDataTermLevel=interfaceDataTermLevel, deployProvTunnelOtnTunnelScope=deployProvTunnelOtnTunnelScope, neAutoProvisioning=neAutoProvisioning, opticalIfConfigFiberBrand=opticalIfConfigFiberBrand, deployProvIfDefaultsBehaviour=deployProvIfDefaultsBehaviour, deployProvTunnelWdmCapAlias=deployProvTunnelWdmCapAlias, pathElementOtnDataNodeIp=pathElementOtnDataNodeIp, neVendorId=neVendorId, crsConnWdmConfigRedLineState=crsConnWdmConfigRedLineState, intervalRoundTripDelay1weekHigh=intervalRoundTripDelay1weekHigh, deployProvTunnelEthCapProvisionedPaths=deployProvTunnelEthCapProvisionedPaths, deployProvPortBindingCapRowStatus=deployProvPortBindingCapRowStatus, intervalL2EthRx1dayBytesFrames128Rcv=intervalL2EthRx1dayBytesFrames128Rcv, FspR7RemoteAlarmType=FspR7RemoteAlarmType, opticalIfDiagPumpLaser4Temp=opticalIfDiagPumpLaser4Temp, deployProvLogicalIfDefaultsPrio=deployProvLogicalIfDefaultsPrio, deployProvTunnelWdmRestorationMode=deployProvTunnelWdmRestorationMode, deployProvModuleMode=deployProvModuleMode, deployProvModuleCapBand=deployProvModuleCapBand, deployProvModuleCapRoadmNumber=deployProvModuleCapRoadmNumber, changeServiceDeployProvIfTraceTransmitSapiOduTcmA=changeServiceDeployProvIfTraceTransmitSapiOduTcmA, deployProvTunnelOtnLayer=deployProvTunnelOtnLayer, alarmThres15MinExceededFecES=alarmThres15MinExceededFecES, deployProvTunnelOtnToAid=deployProvTunnelOtnToAid, intervalGfp1dayTable=intervalGfp1dayTable, tunnelWdmDataBitrate=tunnelWdmDataBitrate, f7FanUnits=f7FanUnits, intervalPhysPerfOpticalInputPwr15minMean=intervalPhysPerfOpticalInputPwr15minMean, deployProvTunnelOtnDefaultsTunnelType=deployProvTunnelOtnDefaultsTunnelType, currentGfpSublayer1dayTable=currentGfpSublayer1dayTable, inventoryCpOtnCrsDownDataTable=inventoryCpOtnCrsDownDataTable, tunnelEthConfigTable=tunnelEthConfigTable, intervalPhysPerfOpticalInputPwr1weekMean=intervalPhysPerfOpticalInputPwr1weekMean, currentPhysConvCombined15minCVDE=currentPhysConvCombined15minCVDE, intervalPhysPerfSignalToNoiseRatio1weekEntry=intervalPhysPerfSignalToNoiseRatio1weekEntry, intervalRoundTripDelay15minLow=intervalRoundTripDelay15minLow, deployProvTunnelWdmFromAid=deployProvTunnelWdmFromAid, crsConnPossibleToCreateTable=crsConnPossibleToCreateTable, intervalPhysPerfBackreflectionPwrRcv15minTable=intervalPhysPerfBackreflectionPwrRcv15minTable, deployProvPathElementEthCapTie=deployProvPathElementEthCapTie, deployProvControlPlaneWdmTedbMaxSize=deployProvControlPlaneWdmTedbMaxSize, currentEthRxHighSpeed1dayPauseFrames=currentEthRxHighSpeed1dayPauseFrames, intervalGfpSublayer15minTimeStamp=intervalGfpSublayer15minTimeStamp, intervalL2EthRx1dayCrcErrorsRcv=intervalL2EthRx1dayCrcErrorsRcv, deployProvControlPlaneOtnDefaultsCmConfigFlag=deployProvControlPlaneOtnDefaultsCmConfigFlag, controlPlaneEthConfigCtmSetupTimeout=controlPlaneEthConfigCtmSetupTimeout, deployProvControlPlaneEthDefaultsCtmMaximumRetryNumber=deployProvControlPlaneEthDefaultsCtmMaximumRetryNumber, deployProvIfCapFunction=deployProvIfCapFunction, deployProvTunnelOtnCapFromAid=deployProvTunnelOtnCapFromAid, physicalTerminationPointTable=physicalTerminationPointTable, changeServiceDeployProvIfDefaultsSigDegThresOdu=changeServiceDeployProvIfDefaultsSigDegThresOdu, intervalSonetLine1daySES=intervalSonetLine1daySES, intervalRoundTripDelay1dayHigh=intervalRoundTripDelay1dayHigh, controlPlaneEthDataRaAlias=controlPlaneEthDataRaAlias, FspR7TelemetryOutputCaps=FspR7TelemetryOutputCaps, thresholdSonetLineCViolHighThres15min=thresholdSonetLineCViolHighThres15min, FspR7TypeCrs=FspR7TypeCrs, controlPlaneEthConfigRaTraceDetail=controlPlaneEthConfigRaTraceDetail, deployProvModuleCapRowStatus=deployProvModuleCapRowStatus, entitiesToCloningEntry=entitiesToCloningEntry, intervalPhysPerfSignalToNoiseRatio1dayLow=intervalPhysPerfSignalToNoiseRatio1dayLow, exChannelConfigEntry=exChannelConfigEntry, deployProvSyslogRowStatus=deployProvSyslogRowStatus, controlPlaneWdmDataTedbAlias=controlPlaneWdmDataTedbAlias, deployProvIfTraceTransmitOpspOduTcmB=deployProvIfTraceTransmitOpspOduTcmB, deployProvVchChannelDefaultsAdmin=deployProvVchChannelDefaultsAdmin, deployProvTunnelOtnDefaultsTable=deployProvTunnelOtnDefaultsTable, FspR7Bip=FspR7Bip, deployProvIfDefaultsTcmCLevel=deployProvIfDefaultsTcmCLevel, opticalIfDataWdmChannel=opticalIfDataWdmChannel, intervalPhysPerfOlmTxLineAtt1weekMean=intervalPhysPerfOlmTxLineAtt1weekMean, changeServiceDeployProvIfCapTraceTransmitDapiOtu=changeServiceDeployProvIfCapTraceTransmitDapiOtu, intervalPhysPerfOlmTxLineAtt15minValidFlag=intervalPhysPerfOlmTxLineAtt15minValidFlag, intervalPhysPerfCarrierFreqOffset15minMean=intervalPhysPerfCarrierFreqOffset15minMean, deployProvLogicalCpIfDefaultsNendTeLinkIdUnn=deployProvLogicalCpIfDefaultsNendTeLinkIdUnn, alarmChannelMismatch=alarmChannelMismatch, intervalGfp1dayEntry=intervalGfp1dayEntry, intervalPhysPerfOlmTxLineAtt15minEntry=intervalPhysPerfOlmTxLineAtt15minEntry, thresholdOduTcmBBESHighThres15min=thresholdOduTcmBBESHighThres15min, alarmTraceIdentifierMismatchOtu=alarmTraceIdentifierMismatchOtu, eroadmIfDiagnosticsEntry=eroadmIfDiagnosticsEntry, deployProvDcnExternalVidCapsStringCap=deployProvDcnExternalVidCapsStringCap, deployProvShelfTable=deployProvShelfTable, deployProvIfTraceExpectedOtu=deployProvIfTraceExpectedOtu, controlPlaneOtnConfigCdTraceDetail=controlPlaneOtnConfigCdTraceDetail, alarmMansw=alarmMansw, deployProvControlPlaneWdmCapNodeNameSyntax=deployProvControlPlaneWdmCapNodeNameSyntax, dependenciesEntry=dependenciesEntry, transientThres1DayExceededSonetSectES=transientThres1DayExceededSonetSectES, forceDeployProvApsProtectingAidCapsIndex=forceDeployProvApsProtectingAidCapsIndex, changeServiceDeployProvIfCapRowStatus=changeServiceDeployProvIfCapRowStatus, intervalLinkAttenuation1dayHigh=intervalLinkAttenuation1dayHigh, FspR7PortMode=FspR7PortMode, logicalCpIfDataVNodeTltp=logicalCpIfDataVNodeTltp, intervalPhysPerfChromaticDispersion15minLow=intervalPhysPerfChromaticDispersion15minLow, intervalPhysPerfCarrierFreqOffset1weekTable=intervalPhysPerfCarrierFreqOffset1weekTable, deployProvControlPlaneWdmTedbTraceDetail=deployProvControlPlaneWdmTedbTraceDetail, deployProvControlPlaneOtnDefaultsTedbMaxSize=deployProvControlPlaneOtnDefaultsTedbMaxSize, controlPlaneWdmConfigPcConfigFlag=controlPlaneWdmConfigPcConfigFlag, intervalFarEndPhysPerfOpticalOutputPwr1dayHigh=intervalFarEndPhysPerfOpticalOutputPwr1dayHigh, changeServiceDeployProvIfCapTimModeOduTcmC=changeServiceDeployProvIfCapTimModeOduTcmC, dcnOspfAreaEntry=dcnOspfAreaEntry, f7OTU2=f7OTU2, deployProvIfLagLoadBallanceSource=deployProvIfLagLoadBallanceSource, deployProvModuleCapScrambling=deployProvModuleCapScrambling, forceDeployProvApsCapApsType=forceDeployProvApsCapApsType, intervalPhysPerfChromaticDispersion1weekMean=intervalPhysPerfChromaticDispersion1weekMean, opticalIfOlmFarEndSigDegThres=opticalIfOlmFarEndSigDegThres, f7eqpSfpg=f7eqpSfpg, intervalOduTcmC1dayTimeStamp=intervalOduTcmC1dayTimeStamp, conditionSeverityEntry=conditionSeverityEntry, FspR7TransmissionModeCaps=FspR7TransmissionModeCaps, intervalPhysPerfCurrentOscGain1weekTimeStamp=intervalPhysPerfCurrentOscGain1weekTimeStamp, tunnelOtnDataTunnelNo=tunnelOtnDataTunnelNo, forceDeployProvApsHoldOffTime=forceDeployProvApsHoldOffTime, changeServiceDeployProvIfDefaultsSigDegThresOduTcmA=changeServiceDeployProvIfDefaultsSigDegThresOduTcmA, thresholdPhysPerfBrPwrReceivedHighThres=thresholdPhysPerfBrPwrReceivedHighThres, thresholdSonetLineMsSESHighThres1day=thresholdSonetLineMsSESHighThres1day, alarmIntrusionRx=alarmIntrusionRx, intervalPhysConvTxHighSpeed15minCVTX=intervalPhysConvTxHighSpeed15minCVTX, transientIntrusionTx=transientIntrusionTx, neNtpMode=neNtpMode, deployProvPppIpOspf=deployProvPppIpOspf, intervalL2EthRx1dayNumber=intervalL2EthRx1dayNumber, currentEthRx3HS15minCrcFrames=currentEthRx3HS15minCrcFrames, alarmTurnupCondition=alarmTurnupCondition, opticalIfDataTunableLowestChannel=opticalIfDataTunableLowestChannel, transientThres1DayExceededOduTcmCBbe=transientThres1DayExceededOduTcmCBbe, ApsTypeCaps=ApsTypeCaps, changeServiceDeployProvIfSigDegThreshold=changeServiceDeployProvIfSigDegThreshold, pathElementWdmDataComputedOptPowerReverse=pathElementWdmDataComputedOptPowerReverse, intervalPhysPerfSignalToNoiseRatio1weekHigh=intervalPhysPerfSignalToNoiseRatio1weekHigh, connectionWdmDataModificationState=connectionWdmDataModificationState, remoteAlarmCpDataPath=remoteAlarmCpDataPath, deployProvIfCapTraceTransmitOpspOdu=deployProvIfCapTraceTransmitOpspOdu, neEqlzStartTime=neEqlzStartTime, deployProvCopyPathOtnDefaultsEntry=deployProvCopyPathOtnDefaultsEntry, intervalOduTcmA15minBbe=intervalOduTcmA15minBbe, currentL2EthTx1dayElapsedTime=currentL2EthTx1dayElapsedTime, teNumLinkOtnDataFendNodeIp=teNumLinkOtnDataFendNodeIp, interfaceConfigDispersionOperation=interfaceConfigDispersionOperation, intervalGfpfr1dayNumber=intervalGfpfr1dayNumber, changeServiceDeployProvIfDefaultsSigDegThresSonetSection=changeServiceDeployProvIfDefaultsSigDegThresSonetSection, tunnelEthDataErrorCodeMajor=tunnelEthDataErrorCodeMajor, changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmB=changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmB, intervalPmSnapshotParameter=intervalPmSnapshotParameter, intervalOdu1dayTimeStamp=intervalOdu1dayTimeStamp, FspR7TopologyTypeCaps=FspR7TopologyTypeCaps, connectionWdmDataFacilityType=connectionWdmDataFacilityType, pppDataFarEndIp=pppDataFarEndIp, pppfConfigAlias=pppfConfigAlias, opticalIfConfigSigDegThresSonetSection=opticalIfConfigSigDegThresSonetSection, currentEthTx15minEntry=currentEthTx15minEntry, deployProvControlPlaneEthCapRsvpConfigFlag=deployProvControlPlaneEthCapRsvpConfigFlag, currentSonetSect15minElapsedTime=currentSonetSect15minElapsedTime, currentOtuFec1dayBERCE=currentOtuFec1dayBERCE, intervalSonetLoPath1dayTimeStamp=intervalSonetLoPath1dayTimeStamp, crsConnDataIngressNodeIp=crsConnDataIngressNodeIp, deployProvApsCapRowStatus=deployProvApsCapRowStatus, inventoryCpEthDownDataFacilities=inventoryCpEthDownDataFacilities, interfaceDataOduTribTimeSlottNo=interfaceDataOduTribTimeSlottNo, alarmVirtualChannelAis=alarmVirtualChannelAis, moduleDeployProv=moduleDeployProv, deployProvApsSDswitching=deployProvApsSDswitching, changeServiceDeployProvIfCapDispersionMode=changeServiceDeployProvIfCapDispersionMode, alarmTransmittedDisabledIdle=alarmTransmittedDisabledIdle, changeServiceDeployProvIfCapSigDegThreshold=changeServiceDeployProvIfCapSigDegThreshold, deployProvLogicalIfCapDcnAid=deployProvLogicalIfCapDcnAid, moduleDataInternalPlugRates=moduleDataInternalPlugRates, tunnelEthDataErrorCodeMinor=tunnelEthDataErrorCodeMinor, crsConnWdmDataOper=crsConnWdmDataOper, thresholdSonetLineUASSHighThres1day=thresholdSonetLineUASSHighThres1day, deployProvIfFecType=deployProvIfFecType, controlPlaneOtnConfigTedbConfigFlag=controlPlaneOtnConfigTedbConfigFlag, intervalPhysPerfOpticalInputPwr15minValidFlag=intervalPhysPerfOpticalInputPwr15minValidFlag, tunnelOtnConfigAlias=tunnelOtnConfigAlias, deployProvPathElementEthCapRowStatus=deployProvPathElementEthCapRowStatus, deployProvExChannelDefaultsLineCoding=deployProvExChannelDefaultsLineCoding, thresholdSonetLineMsEntry=thresholdSonetLineMsEntry, thresholdPhysPerfCapDifferentialGroupDelayHigh=thresholdPhysPerfCapDifferentialGroupDelayHigh, transientCpConnectionEstablishmentStart=transientCpConnectionEstablishmentStart, logicalCpIfDataExtAdvertised=logicalCpIfDataExtAdvertised, intervalEthTx15minNumber=intervalEthTx15minNumber, intervalL2EthRx15minPauseFramesRcv=intervalL2EthRx15minPauseFramesRcv, vs0allocatedTable=vs0allocatedTable, alarmDcnServerSignalFailure=alarmDcnServerSignalFailure, FspR7CpActivStateCaps=FspR7CpActivStateCaps, changeServiceDeployProvIfCapSigDegThresSdhSection=changeServiceDeployProvIfCapSigDegThresSdhSection, deployProvControlPlaneEthCmConfigFlag=deployProvControlPlaneEthCmConfigFlag, intervalL2EthTx15minBytesFrames64Trmt=intervalL2EthTx15minBytesFrames64Trmt, intervalOduTcmC1dayValidFlag=intervalOduTcmC1dayValidFlag, currentL2EthRx1dayUndersizedFramesRcv=currentL2EthRx1dayUndersizedFramesRcv, intervalFarEndPhysPerfOpticalOutputPwr1weekNumber=intervalFarEndPhysPerfOpticalOutputPwr1weekNumber, deployProvPathElementWdmCapLogicalInterfaceId=deployProvPathElementWdmCapLogicalInterfaceId, deployProvControlPlaneOtnCapEntry=deployProvControlPlaneOtnCapEntry, FspR7LossAttenuationCaps=FspR7LossAttenuationCaps, intervalOduTcmC15minTable=intervalOduTcmC15minTable, alarmAutoShutdownSendingAisOtu=alarmAutoShutdownSendingAisOtu, transientManualWorkingSwitchedtoProtection=transientManualWorkingSwitchedtoProtection, currentSonetLoPath1dayTable=currentSonetLoPath1dayTable, deployProvIfCapLagActivePorts=deployProvIfCapLagActivePorts, FspR7CpEncode=FspR7CpEncode, tunnelEthDataErrorCategory=tunnelEthDataErrorCategory, neSystemId=neSystemId, logicalIfConfigDeadInterval=logicalIfConfigDeadInterval, thresholdOduTcmABbeHighThres15min=thresholdOduTcmABbeHighThres15min, deployProvControlPlaneEthDefaultsRaTraceDetail=deployProvControlPlaneEthDefaultsRaTraceDetail, opticalIfDataCirTrmt=opticalIfDataCirTrmt, logicalIfConfigPrio=logicalIfConfigPrio, deployProvLogicalCpIfDefaultsFendDataLinkId=deployProvLogicalCpIfDefaultsFendDataLinkId, changeServiceDeployProvIfDefaultsBand=changeServiceDeployProvIfDefaultsBand, deployProvLogicalCpIfDefaultsEntry=deployProvLogicalCpIfDefaultsEntry)
mibBuilder.exportSymbols("FspR7-MIB", intervalPhysPerfOpticalInputPwr1dayTimeStamp=intervalPhysPerfOpticalInputPwr1dayTimeStamp, alarmSwitchtoProtectionInhibited=alarmSwitchtoProtectionInhibited, transientIntrusionRx=transientIntrusionRx, deployProvExChannelCapChannelBandwith=deployProvExChannelCapChannelBandwith, opticalIfDiagLaserBiasCurrentLevel=opticalIfDiagLaserBiasCurrentLevel, intervalPhysPerfOlmTxLineAtt1weekNumber=intervalPhysPerfOlmTxLineAtt1weekNumber, neAINSProvEnabled=neAINSProvEnabled, transientThres1DayExceededOduUAS=transientThres1DayExceededOduUAS, deployProvCopyPathEthCapPathId=deployProvCopyPathEthCapPathId, deployProvPppIpCapMetric=deployProvPppIpCapMetric, deployProvTunnelEthDefaultsTunnelType=deployProvTunnelEthDefaultsTunnelType, farEndPlugDiagnosticsTemp=farEndPlugDiagnosticsTemp, f7eqpWcc2g7=f7eqpWcc2g7, deployProvExChannelRowStatus=deployProvExChannelRowStatus, currentPhysConv15minCV=currentPhysConv15minCV, controlPlaneOtnConfigCmConfigFlag=controlPlaneOtnConfigCmConfigFlag, transientCopyFileSpaceFail=transientCopyFileSpaceFail, connectionWdmDataTable=connectionWdmDataTable, alarmAlarmIndicationSignalOtu=alarmAlarmIndicationSignalOtu, deployProvIfCapPvid=deployProvIfCapPvid, intervalLinkAttenuation15minTimeStamp=intervalLinkAttenuation15minTimeStamp, deployProvIfDefaultsFunction=deployProvIfDefaultsFunction, physicalTerminationPointIndex=physicalTerminationPointIndex, intervalPhysPerfOpticalOutputPwr15minMean=intervalPhysPerfOpticalOutputPwr15minMean, teUnnumLinkEthDataSynchronization=teUnnumLinkEthDataSynchronization, intervalOduTcmB15minTimeStamp=intervalOduTcmB15minTimeStamp, FspR7FrameFormatCaps=FspR7FrameFormatCaps, deployProvTunnelEthCapRestorationType=deployProvTunnelEthCapRestorationType, deployProvIfCapAdmin=deployProvIfCapAdmin, thresholdGfpSublayerEntry=thresholdGfpSublayerEntry, intervalPhysPerfOscOpticalOutputPwr15minMean=intervalPhysPerfOscOpticalOutputPwr15minMean, teNumLinkWdmDataNodeIp=teNumLinkWdmDataNodeIp, changeServiceDeployProvIfDuplex=changeServiceDeployProvIfDuplex, intervalPhysPerfChromaticDispersion1dayEntry=intervalPhysPerfChromaticDispersion1dayEntry, intervalDispersionCompensation1weekEntry=intervalDispersionCompensation1weekEntry, thresholdPhysConvTxHighSpeedEntry=thresholdPhysConvTxHighSpeedEntry, logicalCpIfConfigPushedNearEndIpHeader=logicalCpIfConfigPushedNearEndIpHeader, thresholdPhysPerfCapRoundTripDelayHighThres=thresholdPhysPerfCapRoundTripDelayHighThres, teNumLinkEthDataDiscarded=teNumLinkEthDataDiscarded, deployProvCopyPathOtnPathId=deployProvCopyPathOtnPathId, controlPlaneWdmConfigCmConfigFlag=controlPlaneWdmConfigCmConfigFlag, opticalIfDataOduTribPortNo=opticalIfDataOduTribPortNo, currentL2EthRx1dayBytesFrames1024Rcv=currentL2EthRx1dayBytesFrames1024Rcv, deployProvIfTraceTransmitSapiOduTcmC=deployProvIfTraceTransmitSapiOduTcmC, deployProvApsWaitToRestore=deployProvApsWaitToRestore, exChannelDataType=exChannelDataType, connectionOtnDataTunnelNumberExtension=connectionOtnDataTunnelNumberExtension, transientReversionStarted=transientReversionStarted, forceDeployProvApsDefaultsPeerAid=forceDeployProvApsDefaultsPeerAid, tunnelWdmConfigInitiateEqualization=tunnelWdmConfigInitiateEqualization, alarmEncryptionPortMaxKeyExchgFailuresReachedOos=alarmEncryptionPortMaxKeyExchgFailuresReachedOos, deployProvExChannelCapChromaticDispersionRcv=deployProvExChannelCapChromaticDispersionRcv, intervalPhysPerfOlmRxLineAtt1weekTimeStamp=intervalPhysPerfOlmRxLineAtt1weekTimeStamp, neAttributeValueChange=neAttributeValueChange, deployProvIfSigDegThresOduTcmB=deployProvIfSigDegThresOduTcmB, thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Day=thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Day, controlPlaneEthDataNaasAlias=controlPlaneEthDataNaasAlias, ntpServerRowStatus=ntpServerRowStatus, intervalEthRx3HS1dayPauseFrames=intervalEthRx3HS1dayPauseFrames, intervalPhysPerfCurrent1dayNumber=intervalPhysPerfCurrent1dayNumber, opticalIfDataOduTribTimeSlottNo=opticalIfDataOduTribTimeSlottNo, fspUserManagementCapTable=fspUserManagementCapTable, logicalCpIfDataIpType=logicalCpIfDataIpType, alarmRemoved=alarmRemoved, logicalCpIfDataPushedFarEndIpHeader=logicalCpIfDataPushedFarEndIpHeader, alarmReceiverHighTemp=alarmReceiverHighTemp, deployProvTunnelOtnDefaultsMonitorEntities=deployProvTunnelOtnDefaultsMonitorEntities, opticalIfDataFiberType=opticalIfDataFiberType, alarmPumpLaser1TempTooHigh=alarmPumpLaser1TempTooHigh, currentL2EthTx15minPauseFramesTrmt=currentL2EthTx15minPauseFramesTrmt, f7eqp1csmuG=f7eqp1csmuG, deployProvControlPlaneOtnCapCtmTraceDetail=deployProvControlPlaneOtnCapCtmTraceDetail, deployProvTifOutputDefaultsRowStatus=deployProvTifOutputDefaultsRowStatus, FspR7OspfModeCaps=FspR7OspfModeCaps, deployProvExChannelDefaultsRowStatus=deployProvExChannelDefaultsRowStatus, currentPhysConvHighSpeed15minEntry=currentPhysConvHighSpeed15minEntry, deployProvControlPlaneWdmCtmTraceDetail=deployProvControlPlaneWdmCtmTraceDetail, intervalL2EthRx15minBytesFrames65Rcv=intervalL2EthRx15minBytesFrames65Rcv, currentEthRx3HS1dayBytesFrames64Rcv=currentEthRx3HS1dayBytesFrames64Rcv, knownHostIP=knownHostIP, alarmSignalFailureonLinkVector=alarmSignalFailureonLinkVector, tunnelWdmDataErrorTid=tunnelWdmDataErrorTid, f7eqp4tcc10gd=f7eqp4tcc10gd, FspR7SshDeamon=FspR7SshDeamon, farEndPlugConfigMaxDataRate=farEndPlugConfigMaxDataRate, edfaConfigGain=edfaConfigGain, intervalPhysPerfOlmRxLineAtt1weekTable=intervalPhysPerfOlmRxLineAtt1weekTable, deployProvTunnelEthDefaultsLayer=deployProvTunnelEthDefaultsLayer, crsConnPossibleToCreateAidToFromPoint=crsConnPossibleToCreateAidToFromPoint, intervalPhysPerfChromaticDispersion15minTable=intervalPhysPerfChromaticDispersion15minTable, FspR7PsuOutputPower=FspR7PsuOutputPower, deployProvTunnelEthDefaultsTable=deployProvTunnelEthDefaultsTable, thresholdPhysPerfCapOscPwrRcvLowThres=thresholdPhysPerfCapOscPwrRcvLowThres, inventoryCpOtnDownDataResources=inventoryCpOtnDownDataResources, deployProvControlPlaneWdmDefaultsCdbDetail=deployProvControlPlaneWdmDefaultsCdbDetail, intervalPhysPerfOpticalOutputPwr1weekTable=intervalPhysPerfOpticalOutputPwr1weekTable, changeServiceDeployProvIfAdmin=changeServiceDeployProvIfAdmin, changeServiceDeployProvIfLanAid=changeServiceDeployProvIfLanAid, FspR7DeploymentScenarioCaps=FspR7DeploymentScenarioCaps, alarmDatabaseVersionMismatch=alarmDatabaseVersionMismatch, thresholdGfpSublayerCoreHecCorrectedFramesHighThres1Day=thresholdGfpSublayerCoreHecCorrectedFramesHighThres1Day, deployProvIfDefaultsTimModeOduTcmC=deployProvIfDefaultsTimModeOduTcmC, intervalRoundTripDelay1dayValidFlag=intervalRoundTripDelay1dayValidFlag, deployProvTunnelEthDefaultsCirRcv=deployProvTunnelEthDefaultsCirRcv, alarmUnequippedLowerOrderPath=alarmUnequippedLowerOrderPath, interfaceDataBehaviour=interfaceDataBehaviour, intervalPhysPerfPumpPwr1dayEntry=intervalPhysPerfPumpPwr1dayEntry, intervalPhysPerfEstimatedSignalGain1weekNumber=intervalPhysPerfEstimatedSignalGain1weekNumber, interfaceConfigCapBehaviour=interfaceConfigCapBehaviour, fspUserManagementDefaultsSecurityLevel=fspUserManagementDefaultsSecurityLevel, deployProvModuleCapChannelSpacing=deployProvModuleCapChannelSpacing, changeServiceDeployProvIfCapLanAid=changeServiceDeployProvIfCapLanAid, deployProvPathElementOtnDefaultsTable=deployProvPathElementOtnDefaultsTable, deployProvControlPlaneOtnCdbDetail=deployProvControlPlaneOtnCdbDetail, apsProtFacilityConfigCapInhibitSwitchToWork=apsProtFacilityConfigCapInhibitSwitchToWork, intervalDefectSeconds1dayNumber=intervalDefectSeconds1dayNumber, deployProvModuleDefaultsGain=deployProvModuleDefaultsGain, deployProvControlPlaneWdmCapCmAlarmActivationTime=deployProvControlPlaneWdmCapCmAlarmActivationTime, deployProvLogicalCpIfDefaultsRowStatus=deployProvLogicalCpIfDefaultsRowStatus, deployProvPortBindingLifAidCapsIndex=deployProvPortBindingLifAidCapsIndex, connectionEthDataRole=connectionEthDataRole, currentSubAggregate1dayEntry=currentSubAggregate1dayEntry, tunnelEthConfigPin=tunnelEthConfigPin, deployProvLogicalIfDefaultsRetransmitInterval=deployProvLogicalIfDefaultsRetransmitInterval, thresholdEthTxCrcFramesEgressHighThres15Min=thresholdEthTxCrcFramesEgressHighThres15Min, controlPlaneEthConfigCmConfigFlag=controlPlaneEthConfigCmConfigFlag, intervalPhysPerfCarrierFreqOffset15minEntry=intervalPhysPerfCarrierFreqOffset15minEntry, tunnelEthDataToNodeIpMonitor=tunnelEthDataToNodeIpMonitor, deployProvControlPlaneWdmPcTraceDetail=deployProvControlPlaneWdmPcTraceDetail, FspR7PortRole=FspR7PortRole, changeServiceDeployProvIfWdmRxChannel=changeServiceDeployProvIfWdmRxChannel, deployProvPathElementEthCapTable=deployProvPathElementEthCapTable, inventoryCpOtnDownDataFacilities=inventoryCpOtnDownDataFacilities, deployProvModuleCapChannelsNumber=deployProvModuleCapChannelsNumber, intervalDispersionCompensation1dayLow=intervalDispersionCompensation1dayLow, deployProvExChannelDefaultsMaximumPMDRcv=deployProvExChannelDefaultsMaximumPMDRcv, crsConnWdmDataIngressNodeIp=crsConnWdmDataIngressNodeIp, deployProvControlPlaneOtnTedbRouterId=deployProvControlPlaneOtnTedbRouterId, currentEthRx15minElapsedTime=currentEthRx15minElapsedTime, deployProvLogicalCpIfCapFacilityType=deployProvLogicalCpIfCapFacilityType, currentSonetLoPath15minES=currentSonetLoPath15minES, deployProvVchChannelEntry=deployProvVchChannelEntry, FspR7TelemetryOutput=FspR7TelemetryOutput, shelfDeployProv=shelfDeployProv, deployProvControlPlaneEthCtmMaximumRetryWait=deployProvControlPlaneEthCtmMaximumRetryWait, fspUserManagementUdpSessionStatus=fspUserManagementUdpSessionStatus, logicalIfConfigRetransmitInterval=logicalIfConfigRetransmitInterval, deployProvIfCapTraceExpectedSonetSection=deployProvIfCapTraceExpectedSonetSection, deployProvApsWorkingAidCapsIndex=deployProvApsWorkingAidCapsIndex, alarmAutoShutdownSendingEPC=alarmAutoShutdownSendingEPC, deployProvCrsDcnDefaultsEntry=deployProvCrsDcnDefaultsEntry, deployProvApsDefaultsProtectionAid=deployProvApsDefaultsProtectionAid, changeServiceDeployProvIfCapTraceExpectedSonetSection=changeServiceDeployProvIfCapTraceExpectedSonetSection, intraNeConnectionsTable=intraNeConnectionsTable, deployProvPlugCapChannelId=deployProvPlugCapChannelId, changeServiceDeployProvIfCapTimModeOduTcmB=changeServiceDeployProvIfCapTimModeOduTcmB, controlPlaneOtnEntityStateAdmin=controlPlaneOtnEntityStateAdmin, currentOtu1dayTable=currentOtu1dayTable, deployProvTunnelOtnEntry=deployProvTunnelOtnEntry, deployProvTunnelEthToTid=deployProvTunnelEthToTid, adminMIB=adminMIB, deployProvLogicalCpIfCapRetransmitInterval=deployProvLogicalCpIfCapRetransmitInterval, alarmOpenConnectionIndicationOduTcmB=alarmOpenConnectionIndicationOduTcmB, alarmHwOprReachedHT=alarmHwOprReachedHT, inventoryCpOtnCrsDownDataAids=inventoryCpOtnCrsDownDataAids, intervalSonetSect15minTable=intervalSonetSect15minTable, currentGfpfr1dayEntry=currentGfpfr1dayEntry, deployProvExChannelFarEndLocation=deployProvExChannelFarEndLocation, intervalLinkAttenuation15minMean=intervalLinkAttenuation15minMean, fspR7Products=fspR7Products, nodeChannelTraceTable=nodeChannelTraceTable, opticalIfDiagCarrierFreqOffset=opticalIfDiagCarrierFreqOffset, alarmSectionSignalFailure=alarmSectionSignalFailure, FspR7TL1InternalStateCaps=FspR7TL1InternalStateCaps, intervalPhysConvTxHighSpeed15minESTX=intervalPhysConvTxHighSpeed15minESTX, deployProvCopyPathEthDefaultsPathId=deployProvCopyPathEthDefaultsPathId, intervalLatency15minValidFlag=intervalLatency15minValidFlag, changeServiceDeployProvIfCapTraceTransmitOpspOtu=changeServiceDeployProvIfCapTraceTransmitOpspOtu, deployProvIfTraceTransmitSapiOtu=deployProvIfTraceTransmitSapiOtu, deployProvLanCapIpMask=deployProvLanCapIpMask, intervalPhysPerfEstimatedSignalGain1weekTimeStamp=intervalPhysPerfEstimatedSignalGain1weekTimeStamp, crsConnDeployProvFrom=crsConnDeployProvFrom, deployProvTifInputDefaultsTable=deployProvTifInputDefaultsTable, intervalEthRx3HS1dayBytesFrames64Rcv=intervalEthRx3HS1dayBytesFrames64Rcv, deployProvPathWdmPathId=deployProvPathWdmPathId, opticalIfDataLagPortNo=opticalIfDataLagPortNo, currentSonetHoPath1dayCV=currentSonetHoPath1dayCV, deployProvIfDefaultsFlowControl=deployProvIfDefaultsFlowControl, deployProvIfCapTerminationLevel=deployProvIfCapTerminationLevel, thresholdPhysPerfAttRxHigh=thresholdPhysPerfAttRxHigh, deployProvExChannelMaximumPMDRcv=deployProvExChannelMaximumPMDRcv, f7ContainerModuleSlot=f7ContainerModuleSlot, intervalPhysPerfCurrent1weekValidFlag=intervalPhysPerfCurrent1weekValidFlag, deployProvPppIpCapEntry=deployProvPppIpCapEntry, FspR7SessionStatus=FspR7SessionStatus, changeServiceDeployProvIfSigDegPeriodIntegration=changeServiceDeployProvIfSigDegPeriodIntegration, deployProvIfRevertiveMode=deployProvIfRevertiveMode, intervalEthRx1dayTimeStamp=intervalEthRx1dayTimeStamp, intervalSubAggregate15minEntry=intervalSubAggregate15minEntry, opticalIfConfigCapTxOffDelay=opticalIfConfigCapTxOffDelay, alarmInputVoltageFailure=alarmInputVoltageFailure, vc4allocatedEntry=vc4allocatedEntry, intervalFarEndPhysPerfOpticalInputPwr1dayTable=intervalFarEndPhysPerfOpticalInputPwr1dayTable, controlPlaneWdmConfigNaasMaxSize=controlPlaneWdmConfigNaasMaxSize, deployProvPathElementWdmDefaultsEntry=deployProvPathElementWdmDefaultsEntry, plugDeployProv=plugDeployProv, tunnelEthDataTunnelScope=tunnelEthDataTunnelScope, vc4c16allocatedClassInstanceNumber=vc4c16allocatedClassInstanceNumber, intervalL2EthRx15minMulticastFramesRcv=intervalL2EthRx15minMulticastFramesRcv, thresholdPhysConvTxHighSpeedESTXHighThres1day=thresholdPhysConvTxHighSpeedESTXHighThres1day, ntpServerTest=ntpServerTest, connectionEthDataTunnelScope=connectionEthDataTunnelScope, opticalIfDiagRoundTripDelay=opticalIfDiagRoundTripDelay, thresholdPhysPerfCapConfigurableOpticalOutputPwrHigh=thresholdPhysPerfCapConfigurableOpticalOutputPwrHigh, FspR7RouteRedist=FspR7RouteRedist, sts48callocatedTable=sts48callocatedTable, changeServiceDeployProvIfTraceExpectedOdu=changeServiceDeployProvIfTraceExpectedOdu, controlPlaneDeployProv=controlPlaneDeployProv, deployProvPathElementWdmCapChannelDown=deployProvPathElementWdmCapChannelDown, controlPlaneWdmEntityStateEntry=controlPlaneWdmEntityStateEntry, intervalEthRx15minNumber=intervalEthRx15minNumber, deployProvVchChannelCapSigDegThresOdu=deployProvVchChannelCapSigDegThresOdu, currentOduTcmA15minTable=currentOduTcmA15minTable, intervalLatency1dayTable=intervalLatency1dayTable, connectionOtnDataStuff=connectionOtnDataStuff, farEndPlugDiagnosticsLowerTempThres=farEndPlugDiagnosticsLowerTempThres, opticalLinkConfigRxLineAttenuation=opticalLinkConfigRxLineAttenuation, FspR7LagLoadBallanceSourceCaps=FspR7LagLoadBallanceSourceCaps, intervalGfpfrSublayer1dayTHecDiscardedFrames=intervalGfpfrSublayer1dayTHecDiscardedFrames, deployProvIfSigDegThresSdhSection=deployProvIfSigDegThresSdhSection, tunnelWdmConfigFacilityType=tunnelWdmConfigFacilityType, changeServiceDeployProvIfDefaultsTraceExpectedOduTcmC=changeServiceDeployProvIfDefaultsTraceExpectedOduTcmC, controlPlaneWdmEntityStateAdmin=controlPlaneWdmEntityStateAdmin, deployProvPlugCapReach=deployProvPlugCapReach, inventoryCpOtnDownDataPhysicalTermPoints=inventoryCpOtnDownDataPhysicalTermPoints, intervalPhysConvTxHighSpeed1dayCVTX=intervalPhysConvTxHighSpeed1dayCVTX, alarmLossOfCharSync=alarmLossOfCharSync, intervalPhysPerfPumpPwr1weekTimeStamp=intervalPhysPerfPumpPwr1weekTimeStamp, transientNeColdStart=transientNeColdStart, FspR7AccessStatus=FspR7AccessStatus, deployProvPppIpNearEndIp=deployProvPppIpNearEndIp, currentPhysConvHighSpeed1dayTable=currentPhysConvHighSpeed1dayTable, tifoDataTelemetry=tifoDataTelemetry, intervalPhysPerfCarrierFreqOffset1weekLow=intervalPhysPerfCarrierFreqOffset1weekLow, deployProvPathElementOtnCapUpTributaryPort=deployProvPathElementOtnCapUpTributaryPort, pathOtnDataRole=pathOtnDataRole, trapMibPrefix=trapMibPrefix, inventoryCpWdmUpDataNumber=inventoryCpWdmUpDataNumber, opticalIfConfigDisparityCorrection=opticalIfConfigDisparityCorrection, intervalEthRxHighSpeed1dayGoodFrames=intervalEthRxHighSpeed1dayGoodFrames, deployProvIfCapWdmRxChannel=deployProvIfCapWdmRxChannel, opticalIfDiagPrbsElapsedTime=opticalIfDiagPrbsElapsedTime, virtualOpticalChannelConfigTable=virtualOpticalChannelConfigTable, deployProvTunnelEthCbsRcv=deployProvTunnelEthCbsRcv)
mibBuilder.exportSymbols("FspR7-MIB", moduleDataChannelsProvision=moduleDataChannelsProvision, deployProvApsProtectingAidCapsTable=deployProvApsProtectingAidCapsTable, alarmInputVoltageFailurePort2=alarmInputVoltageFailurePort2, deployProvTunnelWdmCapMonitorEntities=deployProvTunnelWdmCapMonitorEntities, intervalPhysPerfOpticalInputPwr1dayValidFlag=intervalPhysPerfOpticalInputPwr1dayValidFlag, alarmThres15MinExceededSonetSectES=alarmThres15MinExceededSonetSectES, eRoadmDataConnectionState=eRoadmDataConnectionState, intervalEthRx15minPauseFrames=intervalEthRx15minPauseFrames, intervalOduTcmA15minEntry=intervalOduTcmA15minEntry, opticalIfDiagPumpLaserBiasCurrent2=opticalIfDiagPumpLaserBiasCurrent2, alarmRemoteDefectIndicationLowerOrderPath=alarmRemoteDefectIndicationLowerOrderPath, alarmAlarmIndicationSignalOdu=alarmAlarmIndicationSignalOdu, tifiConfigTifAlarmMessage=tifiConfigTifAlarmMessage, deployProvTunnelWdmLayer=deployProvTunnelWdmLayer, vtpEntityDataSubBandProvision=vtpEntityDataSubBandProvision, alarmReceiverOverloadProtection=alarmReceiverOverloadProtection, interfaceConfigInitiateEqualization=interfaceConfigInitiateEqualization, deployProvLogicalCpIfPushedFarEndIpHeader=deployProvLogicalCpIfPushedFarEndIpHeader, thresholdOtuFecSublayerCEHighThres15min=thresholdOtuFecSublayerCEHighThres15min, deployProvControlPlaneWdmDefaultsTedbRouterId=deployProvControlPlaneWdmDefaultsTedbRouterId, deployProvControlPlaneOtnCapTedbConfigFlag=deployProvControlPlaneOtnCapTedbConfigFlag, currentPmSnapshotAttenuation=currentPmSnapshotAttenuation, logicalIfConfigPushedFarEndIpHeader=logicalIfConfigPushedFarEndIpHeader, deployProvCopyPathEthEntry=deployProvCopyPathEthEntry, vtpEntityDataSfProvision=vtpEntityDataSfProvision, alarmBackwardDefectIndicationOdu=alarmBackwardDefectIndicationOdu, moduleDataClientPorts=moduleDataClientPorts, alarmThres15MinExceededOduTcmCBbe=alarmThres15MinExceededOduTcmCBbe, connectionOtnDataConnectionNo=connectionOtnDataConnectionNo, connectionOtnDataToAid=connectionOtnDataToAid, intervalDispersionCompensation1weekTimeStamp=intervalDispersionCompensation1weekTimeStamp, deployProvModuleCapLanAid=deployProvModuleCapLanAid, deployProvControlPlaneWdmDefaultsPcTraceDetail=deployProvControlPlaneWdmDefaultsPcTraceDetail, intervalLatency1weekEntry=intervalLatency1weekEntry, deployProvTunnelWdmCapToAid=deployProvTunnelWdmCapToAid, intervalGfpfrSublayer15minCHecDiscardedFrames=intervalGfpfrSublayer15minCHecDiscardedFrames, intervalL2EthTx15minMulticastFramesTrmt=intervalL2EthTx15minMulticastFramesTrmt, intervalSonetSect1daySES=intervalSonetSect1daySES, deployProvLogicalCpIfCapTransport=deployProvLogicalCpIfCapTransport, syslogDataTable=syslogDataTable, thresholdPhysPerfCapOpticalInputPwrLow=thresholdPhysPerfCapOpticalInputPwrLow, opticalIfDiagLocalOscBiasLevel=opticalIfDiagLocalOscBiasLevel, thresholdGfpCoreHecCorrectedFramesHighThres1Day=thresholdGfpCoreHecCorrectedFramesHighThres1Day, alarmThres15MinExceededFecBERCE=alarmThres15MinExceededFecBERCE, logicalCpIfDataOspf=logicalCpIfDataOspf, currentGfpt15minEntry=currentGfpt15minEntry, alarmMidstageFault=alarmMidstageFault, FspR7Unsigned32Caps=FspR7Unsigned32Caps, deployProvControlPlaneOtnDefaultsRmTraceDetail=deployProvControlPlaneOtnDefaultsRmTraceDetail, deployProvIfTable=deployProvIfTable, crsConnWdmUnusedFromPointsEntry=crsConnWdmUnusedFromPointsEntry, FspR7LagPortType=FspR7LagPortType, portBindingLifAidEntry=portBindingLifAidEntry, deployProvPathElementOtnUpTributaryTSMethod=deployProvPathElementOtnUpTributaryTSMethod, thresholdSonetLoPathUASHighThres1day=thresholdSonetLoPathUASHighThres1day, cloningEntry=cloningEntry, deployProvLogicalCpIfDcnAid=deployProvLogicalCpIfDcnAid, deployProvTifInputEntry=deployProvTifInputEntry, plugInventoryChannelId=plugInventoryChannelId, changeServiceDeployProvIfDefaultsSigDegThresOduTcmB=changeServiceDeployProvIfDefaultsSigDegThresOduTcmB, intervalEthRx1dayGoodFrames=intervalEthRx1dayGoodFrames, deployProvTunnelOtnCapToTid=deployProvTunnelOtnCapToTid, intervalEthRx15minEntry=intervalEthRx15minEntry, tunnelWdmDataTunnelNumberExtension=tunnelWdmDataTunnelNumberExtension, connectionWdmDataMonitorEntities=connectionWdmDataMonitorEntities, changeServiceDeployProvIfCapTimingSource=changeServiceDeployProvIfCapTimingSource, currentEthRx3HS15minBytesFrames1519Rcv=currentEthRx3HS15minBytesFrames1519Rcv, intervalEthRxHighSpeed15minCrcFrames=intervalEthRxHighSpeed15minCrcFrames, deployProvTunnelOtnDefaultsToNodeIp=deployProvTunnelOtnDefaultsToNodeIp, intervalPhysPerfOscPwr15minNumber=intervalPhysPerfOscPwr15minNumber, FspR7SshHostKeyEncryptAlgorithm=FspR7SshHostKeyEncryptAlgorithm, logicalCpIfConfigRefreshMultiplier=logicalCpIfConfigRefreshMultiplier, connectionOtnConfigCancelConnEntities=connectionOtnConfigCancelConnEntities, logicalCpIfDataIpMask=logicalCpIfDataIpMask, inventoryCpEthDownDataTable=inventoryCpEthDownDataTable, deployProvConnStdCapFromEntry=deployProvConnStdCapFromEntry, changeServiceDeployProvIfBehaviour=changeServiceDeployProvIfBehaviour, deployProvLanDefaultsRowStatus=deployProvLanDefaultsRowStatus, ethernetDataTable=ethernetDataTable, deployProvApsDefaultsEntry=deployProvApsDefaultsEntry, FspR7DispersionOperationCaps=FspR7DispersionOperationCaps, currentOduTcmA1dayBbe=currentOduTcmA1dayBbe, exChannelDataConnectionState=exChannelDataConnectionState, controlPlaneWdmConfigCtmSetupTimeout=controlPlaneWdmConfigCtmSetupTimeout, thresholdOduTcmCEntry=thresholdOduTcmCEntry, deployProvIfErrorForwarding=deployProvIfErrorForwarding, deployProvModuleGroup=deployProvModuleGroup, intervalPhysPerfDiffGrDelay15minEntry=intervalPhysPerfDiffGrDelay15minEntry, intervalPhysConv1dayCV=intervalPhysConv1dayCV, intervalL2EthRx1dayPauseFramesRcv=intervalL2EthRx1dayPauseFramesRcv, deployProvPathElementWdmDefaultsLifIp=deployProvPathElementWdmDefaultsLifIp, vtpEntityDataConnector=vtpEntityDataConnector, intervalOtuFec15minValidFlag=intervalOtuFec15minValidFlag, deployProvIfDisparityCorrection=deployProvIfDisparityCorrection, transientThres1DayExceededMuxSES=transientThres1DayExceededMuxSES, ntpSrvConditionSeverityTable=ntpSrvConditionSeverityTable, deployProvControlPlaneOtnDefaultsCtmShutdownTimeout=deployProvControlPlaneOtnDefaultsCtmShutdownTimeout, intervalL2EthTx15minValidFlag=intervalL2EthTx15minValidFlag, pathElementWdmDataTidMonitor=pathElementWdmDataTidMonitor, currentDefectSeconds1dayElapsedTime=currentDefectSeconds1dayElapsedTime, deployProvIfCapTraceTransmitOpspOduTcmC=deployProvIfCapTraceTransmitOpspOduTcmC, FspR7OspfAreaTypeCaps=FspR7OspfAreaTypeCaps, changeServiceDeployProvIfCapAreaId=changeServiceDeployProvIfCapAreaId, authTrapProtocol=authTrapProtocol, deployProvLogicalIfCapIpAddrMask=deployProvLogicalIfCapIpAddrMask, alarmEncryptionPortEncryptionSwitchedOff=alarmEncryptionPortEncryptionSwitchedOff, ntpSysCurrentConditionTable=ntpSysCurrentConditionTable, cloningEntitiesDeployProv=cloningEntitiesDeployProv, ptpEntityDataSfProvision=ptpEntityDataSfProvision, intervalFarEndPhysPerfOpticalOutputPwr1dayMean=intervalFarEndPhysPerfOpticalOutputPwr1dayMean, teNumLinkWdmDataDiscarded=teNumLinkWdmDataDiscarded, thresholdPhysPerfCapEntry=thresholdPhysPerfCapEntry, thresholdSonetHoPathCVHighThres15min=thresholdSonetHoPathCVHighThres15min, deployProvControlPlaneWdmCapCtmConfigFlag=deployProvControlPlaneWdmCapCtmConfigFlag, f7eqpNcu=f7eqpNcu, changeServiceDeployProvIfDefaultsTraceTransmitSapiOtu=changeServiceDeployProvIfDefaultsTraceTransmitSapiOtu, changeServiceDeployProvIfCapTimModeOduTcmA=changeServiceDeployProvIfCapTimModeOduTcmA, alarmSignalDegradeOduTcmA=alarmSignalDegradeOduTcmA, moduleConfigEntry=moduleConfigEntry, connectionEthDataLayer=connectionEthDataLayer, changeServiceDeployProvIfCapAutonegotiation=changeServiceDeployProvIfCapAutonegotiation, opticalIfConfigUtag=opticalIfConfigUtag, neTimeChangeReason=neTimeChangeReason, opticalIfDataCbsRcv=opticalIfDataCbsRcv, thresholdOduBbeHighThres1day=thresholdOduBbeHighThres1day, deployProvControlPlaneOtnCdTraceDetail=deployProvControlPlaneOtnCdTraceDetail, intervalGfpSublayer15minValidFlag=intervalGfpSublayer15minValidFlag, intervalL2EthRx1dayBytesFrames512Rcv=intervalL2EthRx1dayBytesFrames512Rcv, alarmLossofTandemConnectionOduTcmA=alarmLossofTandemConnectionOduTcmA, dcnTopologyConfigCapTable=dcnTopologyConfigCapTable, intervalPhysPerfCurrentOscGain1weekValidFlag=intervalPhysPerfCurrentOscGain1weekValidFlag, deployProvCopyPathWdmCapEntry=deployProvCopyPathWdmCapEntry, intervalDispersionCompensation15minTimeStamp=intervalDispersionCompensation15minTimeStamp, FspR7FalseTrue=FspR7FalseTrue, FspR7TypeConnection=FspR7TypeConnection, deployProvTunnelWdmCapPceMode=deployProvTunnelWdmCapPceMode, deployProvControlPlaneWdmCapCmConfigFlag=deployProvControlPlaneWdmCapCmConfigFlag, alarmOscPwrTooHigh=alarmOscPwrTooHigh, fspR7Conformance=fspR7Conformance, deployProvIfCapAutoPTassignment=deployProvIfCapAutoPTassignment, nendIpCapEntry=nendIpCapEntry, pppDataEccInstance=pppDataEccInstance, intervalDefectSeconds1dayDS=intervalDefectSeconds1dayDS, moduleDataStages=moduleDataStages, tunnelOtnConfigMonitorEntities=tunnelOtnConfigMonitorEntities, changeServiceDeployProvIfSigDegPeriodSdhSection=changeServiceDeployProvIfSigDegPeriodSdhSection, deployProvControlPlaneOtnCapNaasTraceDetail=deployProvControlPlaneOtnCapNaasTraceDetail, alarmThres15MinExceededOduTcmASES=alarmThres15MinExceededOduTcmASES, deployProvApsWorkingAidCapsEntry=deployProvApsWorkingAidCapsEntry, deployProvLogicalIfHelloInterval=deployProvLogicalIfHelloInterval, changeServiceDeployProvIfTcmBLevel=changeServiceDeployProvIfTcmBLevel, pathElementOtnDataNodeIpMonitor=pathElementOtnDataNodeIpMonitor, currentL2EthTx15minFramesTrmt=currentL2EthTx15minFramesTrmt, intervalPhysPerfPumpPwr15minMean=intervalPhysPerfPumpPwr15minMean, alarmAutoShutdownTxRxLasersDueToHighTemp=alarmAutoShutdownTxRxLasersDueToHighTemp, deployProvTunnelWdmReversionType=deployProvTunnelWdmReversionType, intervalPhysPerfPumpPwr15minNumber=intervalPhysPerfPumpPwr15minNumber, intervalEthRx3HS15minMulticastFramesRcv=intervalEthRx3HS15minMulticastFramesRcv, intervalPhysPerfPumpPwr15minHigh=intervalPhysPerfPumpPwr15minHigh, snmpAgentSynchronizationStageChanged=snmpAgentSynchronizationStageChanged, currentOtuFec15minExUBE=currentOtuFec15minExUBE, opticalIfConfigCapOpuPayloadType=opticalIfConfigCapOpuPayloadType, deployProvIfCapIpMask=deployProvIfCapIpMask, FspR7LaserOffDelayTime=FspR7LaserOffDelayTime, deployProvApsProtectionAid=deployProvApsProtectionAid, deployProvControlPlaneEthCapRmConfigFlag=deployProvControlPlaneEthCapRmConfigFlag, deployProvTunnelWdmDefaultsSubLayerEncoding=deployProvTunnelWdmDefaultsSubLayerEncoding, deployProvDcnType=deployProvDcnType, pathElementWdmDataEntry=pathElementWdmDataEntry, deployProvControlPlaneEthCapCtmTraceDetail=deployProvControlPlaneEthCapCtmTraceDetail, neTrapsinkObjectDeletion=neTrapsinkObjectDeletion, currentGfpfrSublayer15minCHecDiscardedFrames=currentGfpfrSublayer15minCHecDiscardedFrames, neAdmin=neAdmin, controlPlaneOtnConfigCtmRetryWaitMultiplier=controlPlaneOtnConfigCtmRetryWaitMultiplier, tifoDataEntry=tifoDataEntry, changeServiceDeployProvIfDefaultsEntry=changeServiceDeployProvIfDefaultsEntry, f7eqpWcc10gd=f7eqpWcc10gd, moduleDiagnosticsLowerTempThres=moduleDiagnosticsLowerTempThres, intervalPhysConv1dayValidFlag=intervalPhysConv1dayValidFlag, deployProvIfCapTable=deployProvIfCapTable, deployProvModuleCapAdmin=deployProvModuleCapAdmin, changeServiceDeployProvIfDefaultsTraceFormSonetSection=changeServiceDeployProvIfDefaultsTraceFormSonetSection, thresholdGfpTypeHecDiscardedFramesHighThres15Min=thresholdGfpTypeHecDiscardedFramesHighThres15Min, deployProvControlPlaneWdmCtmShutdownTimeout=deployProvControlPlaneWdmCtmShutdownTimeout, deployProvModuleDefaultsEdfaPwrOut=deployProvModuleDefaultsEdfaPwrOut, deployProvTunnelEthCapToNodeIp=deployProvTunnelEthCapToNodeIp, deployProvLanDefaultsAdmin=deployProvLanDefaultsAdmin, deployProvIfAttenuationGradient=deployProvIfAttenuationGradient, intervalEthRx3HS1dayValidFlag=intervalEthRx3HS1dayValidFlag, intervalPhysPerfChromaticDispersion1dayValidFlag=intervalPhysPerfChromaticDispersion1dayValidFlag, deployProvTunnelOtnProvisionedPaths=deployProvTunnelOtnProvisionedPaths, opticalIfConfigBip=opticalIfConfigBip, intervalEthRx3HS15minBytesFrames256Rcv=intervalEthRx3HS15minBytesFrames256Rcv, intervalPhysPerfOpticalInputPwr15minHigh=intervalPhysPerfOpticalInputPwr15minHigh, changeServiceDeployProvIfSigDegPeriodOduTcmC=changeServiceDeployProvIfSigDegPeriodOduTcmC, tunnelWdmDataErrorCodeMinor=tunnelWdmDataErrorCodeMinor, logicalCpIfConfigDeadInterval=logicalCpIfConfigDeadInterval, f7eqp2tcm2g5=f7eqp2tcm2g5, FspR7LacpTimeout=FspR7LacpTimeout, deployProvLogicalCpIfFendTeLinkIdUnn=deployProvLogicalCpIfFendTeLinkIdUnn, tunnelOtnDataSpecificErrorMessage=tunnelOtnDataSpecificErrorMessage, intervalEthTx15minEntry=intervalEthTx15minEntry, logicalCpIfConfigTeMetric=logicalCpIfConfigTeMetric, controlPlaneOtnConfigPcConfigFlag=controlPlaneOtnConfigPcConfigFlag, deployProvModuleCapGain=deployProvModuleCapGain, deployProvIfIpAddr=deployProvIfIpAddr, FspR7CpReversionState=FspR7CpReversionState, changeServiceDeployProvIfCapTraceTransmitDapiOduTcmB=changeServiceDeployProvIfCapTraceTransmitDapiOduTcmB, deployProvConnStdCapToType=deployProvConnStdCapToType, deployProvControlPlaneOtnDefaultsCdbMaxSize=deployProvControlPlaneOtnDefaultsCdbMaxSize, controlPlaneOtnConfigCtmMaximumRetryNumber=controlPlaneOtnConfigCtmMaximumRetryNumber, intervalSonetSect15minEntry=intervalSonetSect15minEntry, intervalOduTcmA1dayBbe=intervalOduTcmA1dayBbe, deployProvTunnelWdmDefaultsEntry=deployProvTunnelWdmDefaultsEntry, currentOdu1dayUAS=currentOdu1dayUAS, pathElementWdmDataSequenceNumber=pathElementWdmDataSequenceNumber, alarmAutoPowerShutdown=alarmAutoPowerShutdown, pathElementEthDataLifIp=pathElementEthDataLifIp, alarmEncryptionModuleSelfTestFail=alarmEncryptionModuleSelfTestFail, intervalPhysPerfBackreflectionPwrRcv1dayNumber=intervalPhysPerfBackreflectionPwrRcv1dayNumber, deployProvLogicalCpIfCapMetric=deployProvLogicalCpIfCapMetric, crsConnDeployProvCapAdmin=crsConnDeployProvCapAdmin, moduleDataMaxPowerConsumption=moduleDataMaxPowerConsumption, tunnelWdmConfigStuff=tunnelWdmConfigStuff, intervalEthRx3HS15minUndersizedFramesRcv=intervalEthRx3HS15minUndersizedFramesRcv, tunnelOtnDataFromNodeIP=tunnelOtnDataFromNodeIP, intervalOduTcmC1daySES=intervalOduTcmC1daySES, alarmEquipmentMismatch=alarmEquipmentMismatch, deployProvTunnelWdmDefaultsAlias=deployProvTunnelWdmDefaultsAlias, vs1allocatedClassInstanceNumber=vs1allocatedClassInstanceNumber, deployProvTifOutputEntry=deployProvTifOutputEntry, deployProvIfPvid=deployProvIfPvid, deployProvControlPlaneEthDefaultsRmTraceDetail=deployProvControlPlaneEthDefaultsRmTraceDetail, teNumLinkEthDataTable=teNumLinkEthDataTable, deployProvVchChannelCapEqlzAdmin=deployProvVchChannelCapEqlzAdmin, eRoadmConfigTable=eRoadmConfigTable, deployProvIfDefaultsSigDegThresOduTcmB=deployProvIfDefaultsSigDegThresOduTcmB, changeServiceDeployProvIfCapTraceExpectedOduTcmB=changeServiceDeployProvIfCapTraceExpectedOduTcmB, deployProvShelfCapSupply=deployProvShelfCapSupply, transientThres1DayExceededOduTcmBUAS=transientThres1DayExceededOduTcmBUAS, deployProvControlPlaneEthCmAlarmActivationTime=deployProvControlPlaneEthCmAlarmActivationTime, deployProvControlPlaneEthCapCdbDetail=deployProvControlPlaneEthCapCdbDetail, pppfConfigAreaId=pppfConfigAreaId, intervalPhysPerfOscPwr1dayEntry=intervalPhysPerfOscPwr1dayEntry, authTrapRadUserName=authTrapRadUserName, deployProvIfBand=deployProvIfBand, crsConnDeployProvCapAlias=crsConnDeployProvCapAlias, connectionEthDataTunnelNumberExtension=connectionEthDataTunnelNumberExtension, opticalIfConfigSigDegPeriodSdhSection=opticalIfConfigSigDegPeriodSdhSection, connectionWdmConfigEntry=connectionWdmConfigEntry, alarmProtectionNotAvailable=alarmProtectionNotAvailable, intervalL2EthRx15minNumber=intervalL2EthRx15minNumber, deployProvLanDefaultsAreaId=deployProvLanDefaultsAreaId, intervalOtuFec15minNumber=intervalOtuFec15minNumber)
mibBuilder.exportSymbols("FspR7-MIB", alarmBackwardDefectIndicationOduTcmB=alarmBackwardDefectIndicationOduTcmB, deployProvTunnelWdmDefaultsRestPathsNoProv=deployProvTunnelWdmDefaultsRestPathsNoProv, currentEthRx15minTable=currentEthRx15minTable, deployProvIfCapPayload=deployProvIfCapPayload, changeServiceDeployProvIfDefaultsTcmCLevel=changeServiceDeployProvIfDefaultsTcmCLevel, forceDeployProvApsDefaultsTable=forceDeployProvApsDefaultsTable, deployProvLogicalCpIfLayer=deployProvLogicalCpIfLayer, transientThres1DayExceededSonetSectSES=transientThres1DayExceededSonetSectSES, tunnelWdmDataFromNodeIP=tunnelWdmDataFromNodeIP, changeServiceDeployProvIfFlowControl=changeServiceDeployProvIfFlowControl, alarmOscOpticalPowerControlFailLow=alarmOscOpticalPowerControlFailLow, deployProvControlPlaneEthCapNaasAdvertWait=deployProvControlPlaneEthCapNaasAdvertWait, vtpEntityDataGroupProvision=vtpEntityDataGroupProvision, inventoryCpOtnDownDataEntry=inventoryCpOtnDownDataEntry, opticalIfDataProtectionRole=opticalIfDataProtectionRole, opticalIfDataAutoPTassignment=opticalIfDataAutoPTassignment, deployProvIfCapSigDegPeriodOtu=deployProvIfCapSigDegPeriodOtu, deployProvControlPlaneWdmDefaultsCdbConfigFlag=deployProvControlPlaneWdmDefaultsCdbConfigFlag, deployProvIfDefaultsIpMask=deployProvIfDefaultsIpMask, intervalPhysPerfEstimatedSignalGain1dayHigh=intervalPhysPerfEstimatedSignalGain1dayHigh, f7eqp8tce2g5c=f7eqp8tce2g5c, connectionEthDataCirTrmt=connectionEthDataCirTrmt, intervalEthTx15minPauseFrames=intervalEthTx15minPauseFrames, farEndIfDataAdmin=farEndIfDataAdmin, opticalIfConfigCapLossAttenuation=opticalIfConfigCapLossAttenuation, deployProvModuleDefaultsDeploy=deployProvModuleDefaultsDeploy, deployProvLogicalIfAdmin=deployProvLogicalIfAdmin, moduleDataInternalPlugs=moduleDataInternalPlugs, logicalCpIfDataFacilityType=logicalCpIfDataFacilityType, deployProvLogicalIfEntry=deployProvLogicalIfEntry, neAlarmDeactivationTime=neAlarmDeactivationTime, intervalPhysPerfOlmRxLineAtt15minLow=intervalPhysPerfOlmRxLineAtt15minLow, deployProvPathElementEthTid=deployProvPathElementEthTid, deployProvTunnelEthCapConnectionDirection=deployProvTunnelEthCapConnectionDirection, intervalSonetHoPath15minTable=intervalSonetHoPath15minTable, alarmServerSignalReduced=alarmServerSignalReduced, deployProvIfDefaultsLaserOffDelayFunction=deployProvIfDefaultsLaserOffDelayFunction, deployProvControlPlaneEthDefaultsTedbConfigFlag=deployProvControlPlaneEthDefaultsTedbConfigFlag, deployProvConnEndpointB=deployProvConnEndpointB, transientLocalCopyFileStarted=transientLocalCopyFileStarted, apsProtFacilityConfigInhibitSwitchToWork=apsProtFacilityConfigInhibitSwitchToWork, deployProvExChannelOSNRTransmit=deployProvExChannelOSNRTransmit, deployProvTifOutputDefaultsTable=deployProvTifOutputDefaultsTable, deployProvTunnelWdmDefaultsRestorationPaths=deployProvTunnelWdmDefaultsRestorationPaths, deployProvVchChannelDefaultsTraceTransmitSapiOdu=deployProvVchChannelDefaultsTraceTransmitSapiOdu, alarmFacilityLoopback=alarmFacilityLoopback, teUnnumLinkWdmDataFendTeLinkId=teUnnumLinkWdmDataFendTeLinkId, deployProvTunnelWdmDefaultsTunnelTemplate=deployProvTunnelWdmDefaultsTunnelTemplate, intervalPhysPerfSignalToNoiseRatio15minNumber=intervalPhysPerfSignalToNoiseRatio15minNumber, deployProvModuleDefaultsRoadmNumber=deployProvModuleDefaultsRoadmNumber, alarmApdLowVoltage=alarmApdLowVoltage, inventoryCpWdmDownDataResources=inventoryCpWdmDownDataResources, wdmChannelModuleInventoryTable=wdmChannelModuleInventoryTable, alarmSignalDegradeOdu=alarmSignalDegradeOdu, deployProvVchChannelDefaultsVcgType=deployProvVchChannelDefaultsVcgType, FspR7ChannelNumber=FspR7ChannelNumber, deployProvTunnelWdmMonitorEntities=deployProvTunnelWdmMonitorEntities, deployProvVchChannelCapType=deployProvVchChannelCapType, alarmThres15MinExceededOduBbe=alarmThres15MinExceededOduBbe, f7eqpPsu7huac=f7eqpPsu7huac, intervalL2EthTx1dayMulticastFramesTrmt=intervalL2EthTx1dayMulticastFramesTrmt, intervalPhysPerfOpticalOutputPwr1dayTable=intervalPhysPerfOpticalOutputPwr1dayTable, thresholdPhysPerfPumpLaser2TempLowThres=thresholdPhysPerfPumpLaser2TempLowThres, alarmAlarmIndicationSignalOduTcmB=alarmAlarmIndicationSignalOduTcmB, deployProvLanCapTable=deployProvLanCapTable, alarmAlarmIndicationSignalOduTcmC=alarmAlarmIndicationSignalOduTcmC, deployProvIfCapSigDegThresReceiver=deployProvIfCapSigDegThresReceiver, deployProvIfDefaultsAdmin=deployProvIfDefaultsAdmin, deployProvExChannelDefaultsMinimumOpticalPowerRcv=deployProvExChannelDefaultsMinimumOpticalPowerRcv, currentOtuFec15minExElapsedTime=currentOtuFec15minExElapsedTime, deployProvIfCapTimModeOduTcmC=deployProvIfCapTimModeOduTcmC, intervalPhysPerfOpticalInputPwr1weekHigh=intervalPhysPerfOpticalInputPwr1weekHigh, intervalPhysConvTxHighSpeed1dayEntry=intervalPhysConvTxHighSpeed1dayEntry, deployProvDcnCapRowStatus=deployProvDcnCapRowStatus, deployProvPlugForceDestroy=deployProvPlugForceDestroy, farEndPlugDiagnosticsEntry=farEndPlugDiagnosticsEntry, currentEthTx15minCrcFramesEgress=currentEthTx15minCrcFramesEgress, intervalPhysPerfCurrent1weekHigh=intervalPhysPerfCurrent1weekHigh, crsConnDeployProvCrossConnType=crsConnDeployProvCrossConnType, opticalIfOlmRxLineAttenuation=opticalIfOlmRxLineAttenuation, teUnnumLinkEthDataTable=teUnnumLinkEthDataTable, deployProvLogicalCpIfCapPushedFarEndIpHeader=deployProvLogicalCpIfCapPushedFarEndIpHeader, inventoryCpWdmCrsDownDataNumber=inventoryCpWdmCrsDownDataNumber, changeServiceDeployProvIfDefaultsFiberBrand=changeServiceDeployProvIfDefaultsFiberBrand, deployProvIfDefaultsLagActivePorts=deployProvIfDefaultsLagActivePorts, moduleConfigScrambling=moduleConfigScrambling, changeServiceDeployProvIfCapOpuPayloadType=changeServiceDeployProvIfCapOpuPayloadType, deployProvIfCapTraceTransmitDapiOtu=deployProvIfCapTraceTransmitDapiOtu, FspR7OpticalGroupCaps=FspR7OpticalGroupCaps, intervalOtu15minValidFlag=intervalOtu15minValidFlag, deployProvControlPlaneWdmCapCdTraceDetail=deployProvControlPlaneWdmCapCdTraceDetail, currentL2EthTx15minBytesFrames64Trmt=currentL2EthTx15minBytesFrames64Trmt, tunnelEthConfigCommand=tunnelEthConfigCommand, thresholdPhysPerfPumpLaser2TempHighThres=thresholdPhysPerfPumpLaser2TempHighThres, crsConnDataIngressTid=crsConnDataIngressTid, knownHostCreation=knownHostCreation, intervalOtuFec1daySES=intervalOtuFec1daySES, currentGfpfrSublayer15minTable=currentGfpfrSublayer15minTable, deployProvControlPlaneEthCapTedbMinAdvertWait=deployProvControlPlaneEthCapTedbMinAdvertWait, crsConnDataChannelSpacing=crsConnDataChannelSpacing, thresholdPhysPerfCapLatencyHighThres=thresholdPhysPerfCapLatencyHighThres, deployProvTunnelEthDefaultsTunnelId=deployProvTunnelEthDefaultsTunnelId, deployProvTunnelWdmSubLayerEncoding=deployProvTunnelWdmSubLayerEncoding, opticalIfDiagOscOutputPower=opticalIfDiagOscOutputPower, deployProvTunnelWdmToAid=deployProvTunnelWdmToAid, ntpSrvCurrentConditionSeverity=ntpSrvCurrentConditionSeverity, connectionOtnDataEncode=connectionOtnDataEncode, systemConfigAndStatus=systemConfigAndStatus, deployProvTunnelWdmCapFecType=deployProvTunnelWdmCapFecType, intervalPhysPerfSignalToNoiseRatio1dayNumber=intervalPhysPerfSignalToNoiseRatio1dayNumber, eRoadmInfoInternalPlugs=eRoadmInfoInternalPlugs, deployProvCopyPathWdmDefaultsEntry=deployProvCopyPathWdmDefaultsEntry, neAlarmProfileApplyCap=neAlarmProfileApplyCap, intervalPhysPerfOpticalInputPwr1dayMean=intervalPhysPerfOpticalInputPwr1dayMean, intervalOtu1dayTable=intervalOtu1dayTable, intervalFarEndPhysPerfOpticalOutputPwr1weekLow=intervalFarEndPhysPerfOpticalOutputPwr1weekLow, changeServiceDeployProvIfSigDegPeriodOtu=changeServiceDeployProvIfSigDegPeriodOtu, connectionEthDataToNodeIp=connectionEthDataToNodeIp, changeServiceDeployProvIfTimModeSonetSection=changeServiceDeployProvIfTimModeSonetSection, currentEthTx15minElapsedTime=currentEthTx15minElapsedTime, deployProvControlPlaneWdmCapNaasMaxSize=deployProvControlPlaneWdmCapNaasMaxSize, intervalPhysPerfSignalToNoiseRatio1weekLow=intervalPhysPerfSignalToNoiseRatio1weekLow, deployProvCopyPathWdmCapPathId=deployProvCopyPathWdmCapPathId, alarmProfileAidType=alarmProfileAidType, transientEncryptionPortSingleKeyExchgFailed=transientEncryptionPortSingleKeyExchgFailed, thresholdSonetHoPathEntry=thresholdSonetHoPathEntry, deployProvControlPlaneOtnCmFisFrsTimeout=deployProvControlPlaneOtnCmFisFrsTimeout, opticalIfConfigOscOpticalSetpoint=opticalIfConfigOscOpticalSetpoint, transientThres1DayExceededOduBbe=transientThres1DayExceededOduBbe, knownHostEntry=knownHostEntry, deployProvPathElementWdmDownstreamModuleAid=deployProvPathElementWdmDownstreamModuleAid, alarmRoundTripDelayTooHigh=alarmRoundTripDelayTooHigh, deployProvCopyPathWdmCapTable=deployProvCopyPathWdmCapTable, controlPlaneWdmEntityStateOper=controlPlaneWdmEntityStateOper, alarmThres15MinExceededPhysConvSETX=alarmThres15MinExceededPhysConvSETX, neSystemIp=neSystemIp, deployProvIfPayload=deployProvIfPayload, opticalIfOlmTable=opticalIfOlmTable, alarmNtpServer1Unreachable=alarmNtpServer1Unreachable, equipmentRemoved=equipmentRemoved, deployProvModuleDefaultsDCFiberType=deployProvModuleDefaultsDCFiberType, deployProvPathElementOtnCapUpTributaryTSMethod=deployProvPathElementOtnCapUpTributaryTSMethod, opticalIfConfigSigDegPeriodOdu=opticalIfConfigSigDegPeriodOdu, intervalOduTcmA15minES=intervalOduTcmA15minES, deployProvLogicalCpIfCapCpType=deployProvLogicalCpIfCapCpType, deployProvControlPlaneOtnCapTedbTraceDetail=deployProvControlPlaneOtnCapTedbTraceDetail, intervalPhysPerfDiffGrDelay1dayMean=intervalPhysPerfDiffGrDelay1dayMean, FspR7PrbsPmResetCaps=FspR7PrbsPmResetCaps, intervalGfp15minNumber=intervalGfp15minNumber, currentPmSnapshotOutputPower=currentPmSnapshotOutputPower, alarmAutoShutdownStbyProtection=alarmAutoShutdownStbyProtection, intervalPhysPerfBackreflectionPwrRcv1weekTimeStamp=intervalPhysPerfBackreflectionPwrRcv1weekTimeStamp, deployProvExChannelFrameFormat=deployProvExChannelFrameFormat, crossConnectionDeployProv=crossConnectionDeployProv, crsConnDeployProvDefaultsFrom=crsConnDeployProvDefaultsFrom, forceDeployProvApsCapWaitToRestore=forceDeployProvApsCapWaitToRestore, moduleDataEntry=moduleDataEntry, neEqlzIntervalCap=neEqlzIntervalCap, changeServiceDeployProvIfDisparityCorrection=changeServiceDeployProvIfDisparityCorrection, connectionWdmDataEqualizationState=connectionWdmDataEqualizationState, deployProvPathElementOtnCapTable=deployProvPathElementOtnCapTable, deployProvIfDefaultsOpuPayloadType=deployProvIfDefaultsOpuPayloadType, connectionEthDataSignalledPaths=connectionEthDataSignalledPaths, connectionOtnDataTunnelScope=connectionOtnDataTunnelScope, deployProvTifOutputDefaultsEntry=deployProvTifOutputDefaultsEntry, moduleDataCategory=moduleDataCategory, deployProvLogicalCpIfCapRowStatus=deployProvLogicalCpIfCapRowStatus, deployProvTunnelWdmRestorationType=deployProvTunnelWdmRestorationType, pathElementWdmDataTable=pathElementWdmDataTable, logicalCpIfConfigLayer=logicalCpIfConfigLayer, deployProvIfIpMask=deployProvIfIpMask, intervalDispersionCompensation15minTable=intervalDispersionCompensation15minTable, crsConnUnusedFromPointsTable=crsConnUnusedFromPointsTable, opticalIfDiagEntry=opticalIfDiagEntry, deployProvIfLagActivePorts=deployProvIfLagActivePorts, intervalPhysConvHighSpeed15minTable=intervalPhysConvHighSpeed15minTable, deployProvExChannelCapChromaticDispersionTx=deployProvExChannelCapChromaticDispersionTx, crsConnDeployProvTable=crsConnDeployProvTable, crsConnDeployProvTo=crsConnDeployProvTo, intervalEthRx3HS15minNumber=intervalEthRx3HS15minNumber, deployProvControlPlaneEthDefaultsRsvpConfigFlag=deployProvControlPlaneEthDefaultsRsvpConfigFlag, deployProvVirtualOpticalChannelDefaultsAlias=deployProvVirtualOpticalChannelDefaultsAlias, interfaceConfigDataLayerPmReset=interfaceConfigDataLayerPmReset, intervalPhysPerfPumpPwr1dayHigh=intervalPhysPerfPumpPwr1dayHigh, capabilityDataCapabilityLevel=capabilityDataCapabilityLevel, nodeChannelTraceChannelRx=nodeChannelTraceChannelRx, otdrConfigTimePeriod=otdrConfigTimePeriod, currentSonetLine1dayES=currentSonetLine1dayES, changeServiceDeployProvIfLanAidCapsTable=changeServiceDeployProvIfLanAidCapsTable, deployProvIfTraceTransmitOpspOduTcmC=deployProvIfTraceTransmitOpspOduTcmC, moduleDataDeploymentScenario=moduleDataDeploymentScenario, tunnelOtnDataErrorTid=tunnelOtnDataErrorTid, thresholdPhysPerfCapAttRxHigh=thresholdPhysPerfCapAttRxHigh, interfaceDataType=interfaceDataType, deployProvExChannelDefaultsOSNRTransmit=deployProvExChannelDefaultsOSNRTransmit, ApsDirectionCaps=ApsDirectionCaps, currentL2EthRx15minBytesFrames128Rcv=currentL2EthRx15minBytesFrames128Rcv, deployProvTunnelWdmDefaultsToTid=deployProvTunnelWdmDefaultsToTid, opticalIfDiagPumpLaserBiasCurrent3=opticalIfDiagPumpLaserBiasCurrent3, deployProvDcnRowStatus=deployProvDcnRowStatus, unusedOtnTunnelIndex=unusedOtnTunnelIndex, deployProvIfDefaultsTraceTransmitSapiOduTcmB=deployProvIfDefaultsTraceTransmitSapiOduTcmB, intervalPhysPerfOscPwr1dayMean=intervalPhysPerfOscPwr1dayMean, deployProvIfFunction=deployProvIfFunction, deployProvIfDefaultsRowStatus=deployProvIfDefaultsRowStatus, alarmLossOfFrameLossOfMultiFrameOdu=alarmLossOfFrameLossOfMultiFrameOdu, reservationCpDataIngressTid=reservationCpDataIngressTid, deployProvIfLaserOffDelayFunction=deployProvIfLaserOffDelayFunction, changeServiceDeployProvIfCapSigDegPeriodOtu=changeServiceDeployProvIfCapSigDegPeriodOtu, intervalPhysPerfBackreflectionPwrRcv15minHigh=intervalPhysPerfBackreflectionPwrRcv15minHigh, edfaConfigTable=edfaConfigTable, alarmThres15MinExceededOduTcmCUAS=alarmThres15MinExceededOduTcmCUAS, alarmOosPrePostSigInTearDownProcess=alarmOosPrePostSigInTearDownProcess, deployProvLogicalCpIfPrio=deployProvLogicalCpIfPrio, changeServiceDeployProvIfSigDegThresSdhMs=changeServiceDeployProvIfSigDegThresSdhMs, intervalSonetLine15minSES=intervalSonetLine15minSES, connectionEthDataSourceTna=connectionEthDataSourceTna, deployProvControlPlaneEthCtmConfigFlag=deployProvControlPlaneEthCtmConfigFlag, deployProvVchChannelDefaultsTimModeOdu=deployProvVchChannelDefaultsTimModeOdu, ntpSysConditionSeverityType=ntpSysConditionSeverityType, deployProvModuleCapSingleFiberLocation=deployProvModuleCapSingleFiberLocation, deployProvTunnelOtnCapEntry=deployProvTunnelOtnCapEntry, pathElementWdmDataPathType=pathElementWdmDataPathType, opticalIfDiagRamanPumpPower=opticalIfDiagRamanPumpPower, moduleConfigInitiateEqualization=moduleConfigInitiateEqualization, ethernetDataValidSignalTimer=ethernetDataValidSignalTimer, alarmOduTribMsiMismatch=alarmOduTribMsiMismatch, deployProvDcnDefaultsForceDestroy=deployProvDcnDefaultsForceDestroy, alarmSignalDegradeScn=alarmSignalDegradeScn, cloningTable=cloningTable, tunnelWdmConfigTable=tunnelWdmConfigTable, exChannelConfigFarEndLocation=exChannelConfigFarEndLocation, thresholdEthRxCrcFramesHighThres1Day=thresholdEthRxCrcFramesHighThres1Day, thresholdPhysConvTxHighSpeedSETXHighThres1day=thresholdPhysConvTxHighSpeedSETXHighThres1day, alarmProfileDefaultValue=alarmProfileDefaultValue, currentEthRx3HS15minOversizedFramesRcv=currentEthRx3HS15minOversizedFramesRcv, FspR7SystemBusy=FspR7SystemBusy, ospfDataEntry=ospfDataEntry, deployProvDcnDefaultsExternalVid=deployProvDcnDefaultsExternalVid, thresholdPhysConvCVHighThres1day=thresholdPhysConvCVHighThres1day, vtpEntityDataLevel=vtpEntityDataLevel, deployProvLogicalIfCapHelloInterval=deployProvLogicalIfCapHelloInterval, deployProvControlPlaneEthCapTedbTraceDetail=deployProvControlPlaneEthCapTedbTraceDetail, intervalPhysConvCombined15minNumber=intervalPhysConvCombined15minNumber, FspR7ApplyAlarmProfileCaps=FspR7ApplyAlarmProfileCaps, crsConnWdmConfigTunnelAid=crsConnWdmConfigTunnelAid, deployProvApsCapPeerAid=deployProvApsCapPeerAid, opticalIfDataChannelSpacing=opticalIfDataChannelSpacing, neTimeZoneOffset=neTimeZoneOffset, routingIpRouteType=routingIpRouteType, intervalPhysConvCombined15minCVDE=intervalPhysConvCombined15minCVDE, intervalPhysConvTxHighSpeed15minTimeStamp=intervalPhysConvTxHighSpeed15minTimeStamp, FspR7CpTunnelType=FspR7CpTunnelType, ntpTimeZoneCapsValue=ntpTimeZoneCapsValue)
mibBuilder.exportSymbols("FspR7-MIB", deployProvControlPlaneWdmDefaultsCdConfigFlag=deployProvControlPlaneWdmDefaultsCdConfigFlag, dcnOspfAreaCapRowStatus=dcnOspfAreaCapRowStatus, deployProvPortBindingDefaultsLayer=deployProvPortBindingDefaultsLayer, logicalCpIfConfigPushedFarEndIpHeader=logicalCpIfConfigPushedFarEndIpHeader, f7eqp1pm=f7eqp1pm, FspR7SubLayerEncodingCaps=FspR7SubLayerEncodingCaps, forceDeployProvApsDefaultsProtectionAid=forceDeployProvApsDefaultsProtectionAid, deployProvControlPlaneWdmCapTedbTraceDetail=deployProvControlPlaneWdmCapTedbTraceDetail, tunnelWdmConfigCommand=tunnelWdmConfigCommand, intervalGfpt1dayValidFlag=intervalGfpt1dayValidFlag, thresholdGfpEntry=thresholdGfpEntry, deployProvLanDefaultsForceDestroy=deployProvLanDefaultsForceDestroy, thresholdOtuFecESHighThres15min=thresholdOtuFecESHighThres15min, thresholdOtuFecSublayerExEntry=thresholdOtuFecSublayerExEntry, thresholdPhysPerfAttTxHigh=thresholdPhysPerfAttTxHigh, intervalOduTcmC15minES=intervalOduTcmC15minES, neSecurityMode=neSecurityMode, controlPlaneEthConfigTedbMaxSize=controlPlaneEthConfigTedbMaxSize, farEndIfDataTransmitChannel=farEndIfDataTransmitChannel, tunnelWdmConfigEntry=tunnelWdmConfigEntry, intervalPhysPerfPumpPwr1weekValidFlag=intervalPhysPerfPumpPwr1weekValidFlag, currentOduTcmC15minTable=currentOduTcmC15minTable, intervalOtuFec15minExUBE=intervalOtuFec15minExUBE, forceDeployProvApsTable=forceDeployProvApsTable, intervalPhysConv15minTimeStamp=intervalPhysConv15minTimeStamp, connectionEthDataErrorMessage=connectionEthDataErrorMessage, currentOdu15minES=currentOdu15minES, transientAlpSettingStarted=transientAlpSettingStarted, intervalPhysConvHighSpeed1dayTimeStamp=intervalPhysConvHighSpeed1dayTimeStamp, deployProvLogicalCpIfDefaultsHelloInterval=deployProvLogicalCpIfDefaultsHelloInterval, moduleDataNetworkPlugs=moduleDataNetworkPlugs, deployProvIfDispersionMode=deployProvIfDispersionMode, deployProvControlPlaneOtnPcConfigFlag=deployProvControlPlaneOtnPcConfigFlag, intervalGfpfrSublayer1dayGoodFrames=intervalGfpfrSublayer1dayGoodFrames, FspR7FrameFormat=FspR7FrameFormat, changeServiceDeployProvIfDefaultsTimModeOtu=changeServiceDeployProvIfDefaultsTimModeOtu, currentOdu1daySES=currentOdu1daySES, eRoadmInfoTable=eRoadmInfoTable, deployProvControlPlaneOtnTedbTraceDetail=deployProvControlPlaneOtnTedbTraceDetail, alarmElasticStoreOverflowReceiver=alarmElasticStoreOverflowReceiver, connectionOtnDataTunnelType=connectionOtnDataTunnelType, changeServiceDeployProvIfCapIpType=changeServiceDeployProvIfCapIpType, deployProvIfSigDegPeriodOtu=deployProvIfSigDegPeriodOtu, intervalL2EthTx15minEntry=intervalL2EthTx15minEntry, deployProvIfCapSigDegThreshold=deployProvIfCapSigDegThreshold, changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmA=changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmA, portBindingDataLogicalIfAid=portBindingDataLogicalIfAid, FspR7GainCaps=FspR7GainCaps, FspR7MaxBitErrorRate=FspR7MaxBitErrorRate, deployProvControlPlaneWdmCapRaAlarmActivationTime=deployProvControlPlaneWdmCapRaAlarmActivationTime, nodeChannelTraceFromAid=nodeChannelTraceFromAid, deployProvControlPlaneWdmCtmRetryWait=deployProvControlPlaneWdmCtmRetryWait, alarmPayloadMismatch=alarmPayloadMismatch, thresholdOtuFecSublayerUBEHighThres1day=thresholdOtuFecSublayerUBEHighThres1day, deployProvTunnelWdmCapTunnelScope=deployProvTunnelWdmCapTunnelScope, tunnelEthDataTunnelNumberExtension=tunnelEthDataTunnelNumberExtension, alarmTxPowerLimited=alarmTxPowerLimited, deployProvShelfCapForceDestroy=deployProvShelfCapForceDestroy, changeServiceDeployProvIfDefaultsMetric=changeServiceDeployProvIfDefaultsMetric, intervalEthRx3HS15minPauseFrames=intervalEthRx3HS15minPauseFrames, deployProvCopyPathEthDefaultsTable=deployProvCopyPathEthDefaultsTable, currentPmSnapshotEntry=currentPmSnapshotEntry, changeServiceDeployProvIfDefaultsTimModeOduTcmC=changeServiceDeployProvIfDefaultsTimModeOduTcmC, thresholdFarEndPhysPerfOpticalInputPwrLow=thresholdFarEndPhysPerfOpticalInputPwrLow, currentSubAggregate15minTable=currentSubAggregate15minTable, alarmServerSignalFailTx=alarmServerSignalFailTx, thresholdSonetLoPathTable=thresholdSonetLoPathTable, thresholdGfpTable=thresholdGfpTable, intervalSubAggregate1dayEntry=intervalSubAggregate1dayEntry, intervalOduTcmC15minValidFlag=intervalOduTcmC15minValidFlag, intervalPhysPerfBackreflectionPwrRcv15minNumber=intervalPhysPerfBackreflectionPwrRcv15minNumber, tunnelWdmDataComputationState=tunnelWdmDataComputationState, alarmOTDRMeasuringinProgress=alarmOTDRMeasuringinProgress, deployProvIfCapFiberBrand=deployProvIfCapFiberBrand, opticalIfDataLagStandby=opticalIfDataLagStandby, neNodeNameSyntax=neNodeNameSyntax, FspR7FiberBrandCaps=FspR7FiberBrandCaps, plugDataMaxPowerConsumption=plugDataMaxPowerConsumption, pppfConfigTable=pppfConfigTable, logicalIfConfigAuthString=logicalIfConfigAuthString, changeServiceDeployProvIfCapOtnStuffing=changeServiceDeployProvIfCapOtnStuffing, deployProvIfTraceTransmitSapiOduTcmB=deployProvIfTraceTransmitSapiOduTcmB, deployProvControlPlaneOtnCapRsvpMaxExpRecoveryTime=deployProvControlPlaneOtnCapRsvpMaxExpRecoveryTime, transientSwResetReload=transientSwResetReload, thresholdFarEndPhysPerfCapTable=thresholdFarEndPhysPerfCapTable, deployProvLogicalCpIfCpType=deployProvLogicalCpIfCpType, deployProvIfDefaultsVoaMode=deployProvIfDefaultsVoaMode, deployProvLogicalCpIfDefaultsFendTeLinkIdNum=deployProvLogicalCpIfDefaultsFendTeLinkIdNum, deployProvTunnelOtnCapOifUni=deployProvTunnelOtnCapOifUni, currentGfpt1dayElapsedTime=currentGfpt1dayElapsedTime, alarmThres15MinExceededGfpTsuperblockDisc=alarmThres15MinExceededGfpTsuperblockDisc, deployProvControlPlaneWdmDefaultsRaTraceDetail=deployProvControlPlaneWdmDefaultsRaTraceDetail, changeServiceDeployProvIfCapTraceTransmitSapiOduTcmA=changeServiceDeployProvIfCapTraceTransmitSapiOduTcmA, FspR7OpticalFiberTypeCaps=FspR7OpticalFiberTypeCaps, intervalPhysPerfOlmTxLineAtt1dayNumber=intervalPhysPerfOlmTxLineAtt1dayNumber, tunnelWdmDataTunnelType=tunnelWdmDataTunnelType, intervalOduTcmC1dayBbe=intervalOduTcmC1dayBbe, currentL2EthRx15minBroadcastFramesRcv=currentL2EthRx15minBroadcastFramesRcv, equipmentConfigAndStatus=equipmentConfigAndStatus, ptpEntityDataSubBandProvision=ptpEntityDataSubBandProvision, intervalL2EthTx1dayTimeStamp=intervalL2EthTx1dayTimeStamp, ntpSrvCurrentConditionEntry=ntpSrvCurrentConditionEntry, teNumLinkOtnDataDiscarded=teNumLinkOtnDataDiscarded, FspR7ChannelNumberCaps=FspR7ChannelNumberCaps, deployProvConnStdCapFromEndpointA=deployProvConnStdCapFromEndpointA, FspR7NeType=FspR7NeType, intervalPhysPerfOpticalOutputPwr1dayValidFlag=intervalPhysPerfOpticalOutputPwr1dayValidFlag, intervalPhysPerfOpticalOutputPwr15minEntry=intervalPhysPerfOpticalOutputPwr15minEntry, currentOduTcmB1dayElapsedTime=currentOduTcmB1dayElapsedTime, deployProvIfDefaultsIpType=deployProvIfDefaultsIpType, knownHostFingerprint=knownHostFingerprint, intervalDispersionCompensation1dayEntry=intervalDispersionCompensation1dayEntry, neTimerForceOprToRls=neTimerForceOprToRls, inventoryCpEthUpDataTable=inventoryCpEthUpDataTable, intervalPhysPerfOpticalInputPwr1weekValidFlag=intervalPhysPerfOpticalInputPwr1weekValidFlag, FspR7DeploymentScenario=FspR7DeploymentScenario, deployProvPathElementEthDefaultsNodeIp=deployProvPathElementEthDefaultsNodeIp, alarmThres15MinExceededMuxSES=alarmThres15MinExceededMuxSES, pathEthDataTable=pathEthDataTable, intervalGfpfrSublayer1dayTimeStamp=intervalGfpfrSublayer1dayTimeStamp, intervalPhysPerfPumpPwr15minTimeStamp=intervalPhysPerfPumpPwr15minTimeStamp, thresholdPhysPerfLowerAtlinkThres=thresholdPhysPerfLowerAtlinkThres, alarmThresOptPowerCtrlFailureHigh=alarmThresOptPowerCtrlFailureHigh, deployProvPathElementEthUpstreamSvid=deployProvPathElementEthUpstreamSvid, thresholdDefectSecondsDefectSecondsHighThres1Day=thresholdDefectSecondsDefectSecondsHighThres1Day, currentPhysConvTxHighSpeed1dayTable=currentPhysConvTxHighSpeed1dayTable, alarmOpmAbnormalCondition=alarmOpmAbnormalCondition, intervalLinkAttenuation15minValidFlag=intervalLinkAttenuation15minValidFlag, FspR7BipCaps=FspR7BipCaps, deployProvPortBindingLifAidCapsEntry=deployProvPortBindingLifAidCapsEntry, moduleDataChannelsNumber=moduleDataChannelsNumber, transientThres1DayExceededPhysConvSE=transientThres1DayExceededPhysConvSE, alarmDatabaseNcuMismatch=alarmDatabaseNcuMismatch, connectionWdmDataToAid=connectionWdmDataToAid, alarmIntrusionTx=alarmIntrusionTx, alarmLossOfMultiFrameOtu=alarmLossOfMultiFrameOtu, thresholdGfptTable=thresholdGfptTable, deployProvIfDefaultsSigDegThresReceiver=deployProvIfDefaultsSigDegThresReceiver, deployProvControlPlaneOtnCapCdTraceDetail=deployProvControlPlaneOtnCapCdTraceDetail, deployProvExChannelCapType=deployProvExChannelCapType, controlPlaneWdmDataRmAlias=controlPlaneWdmDataRmAlias, deployProvIfAutonegotiation=deployProvIfAutonegotiation, interfaceConfigTurnupConfig=interfaceConfigTurnupConfig, thresholdOtuFecSublayerESHighThres15min=thresholdOtuFecSublayerESHighThres15min, intervalPhysPerfPumpPwr1weekMean=intervalPhysPerfPumpPwr1weekMean, currentSubAggregate1dayES=currentSubAggregate1dayES, intervalGfpSublayer1dayTable=intervalGfpSublayer1dayTable, intervalPhysConv15minValidFlag=intervalPhysConv15minValidFlag, physicalTerminationPointEntry=physicalTerminationPointEntry, currentOtuFec15minExEntry=currentOtuFec15minExEntry, f7eqpScue=f7eqpScue, deployProvLogicalIfDefaultsEntry=deployProvLogicalIfDefaultsEntry, changeServiceDeployProvIfTxOffDelay=changeServiceDeployProvIfTxOffDelay, tunnelOtnDataLayer=tunnelOtnDataLayer, deployProvIfPortRole=deployProvIfPortRole, f7eqpSh1hu=f7eqpSh1hu, intervalPhysPerfCurrentOscGain1dayHigh=intervalPhysPerfCurrentOscGain1dayHigh, transientLocalCopyMemFailGeneration=transientLocalCopyMemFailGeneration, alarmAutoShutdownAls=alarmAutoShutdownAls, alarmEncryptionPortKeyInitExchgMissed=alarmEncryptionPortKeyInitExchgMissed, intervalFarEndPhysPerfOpticalOutputPwr1weekHigh=intervalFarEndPhysPerfOpticalOutputPwr1weekHigh, deployProvControlPlaneWdmDefaultsCdResyncTimeout=deployProvControlPlaneWdmDefaultsCdResyncTimeout, remoteAlarmCpDataNumber=remoteAlarmCpDataNumber, FspR7ChannelSpacing=FspR7ChannelSpacing, logicalIfDataOspf=logicalIfDataOspf, deployProvTifInputCapRowStatus=deployProvTifInputCapRowStatus, currentL2EthRx15minBytesFrames1024Rcv=currentL2EthRx15minBytesFrames1024Rcv, currentPhysConvHighSpeed1dayEntry=currentPhysConvHighSpeed1dayEntry, deployProvPathElementEthDownstreamSvid=deployProvPathElementEthDownstreamSvid, FspR7ModeDbInit=FspR7ModeDbInit, deployProvControlPlaneOtnCdConfigFlag=deployProvControlPlaneOtnCdConfigFlag, deployProvControlPlaneOtnDefaultsCdTraceDetail=deployProvControlPlaneOtnDefaultsCdTraceDetail, deployProvControlPlaneWdmDefaultsCtmConfigFlag=deployProvControlPlaneWdmDefaultsCtmConfigFlag, thresholdOduTcmBOduTcmBBbeHighThres1day=thresholdOduTcmBOduTcmBBbeHighThres1day, alarmThres15MinExceededPhysConvCV=alarmThres15MinExceededPhysConvCV, FspR7CpRsvpSignallingCaps=FspR7CpRsvpSignallingCaps, intervalPhysPerfDiffGrDelay1weekLow=intervalPhysPerfDiffGrDelay1weekLow, deployProvTifInputRowStatus=deployProvTifInputRowStatus, alarmFuseAlarm2=alarmFuseAlarm2, thresholdPhysPerfOpticalOutputPwrLow=thresholdPhysPerfOpticalOutputPwrLow, deployProvPathElementWdmChannelDown=deployProvPathElementWdmChannelDown, deployProvLogicalCpIfDefaultsRetransmitInterval=deployProvLogicalCpIfDefaultsRetransmitInterval, intervalOduTcmA15minUAS=intervalOduTcmA15minUAS, deployProvControlPlaneOtnCapPcTraceDetail=deployProvControlPlaneOtnCapPcTraceDetail, parameterCapabilities=parameterCapabilities, crsConnDeployProvTunnelAid=crsConnDeployProvTunnelAid, intervalPhysPerfOlmTxLineAtt1dayMean=intervalPhysPerfOlmTxLineAtt1dayMean, inventoryCpOtnUpDataPhysicalTermPoints=inventoryCpOtnUpDataPhysicalTermPoints, deployProvIfTraceTransmitDapiOduTcmC=deployProvIfTraceTransmitDapiOduTcmC, conditionMIB=conditionMIB, deployProvApsDefaultsProtectionMech=deployProvApsDefaultsProtectionMech, alarmThres15MinExceededSonetLineUAS=alarmThres15MinExceededSonetLineUAS, f7eqpOscm=f7eqpOscm, deployProvIfTraceTransmitSapiOduTcmA=deployProvIfTraceTransmitSapiOduTcmA, opticalIfConfigStagType=opticalIfConfigStagType, deployProvTunnelWdmCapFromAid=deployProvTunnelWdmCapFromAid, deployProvExChannelDefaultsChromaticDispersionRcv=deployProvExChannelDefaultsChromaticDispersionRcv, FspR7CpPreprovUeqState=FspR7CpPreprovUeqState, deployProvIfCapAutonegotiation=deployProvIfCapAutonegotiation, interfaceConfigLanAidCapsTable=interfaceConfigLanAidCapsTable, shelfInfoOmBand=shelfInfoOmBand, controlPlaneOtnConfigRsvpConfigFlag=controlPlaneOtnConfigRsvpConfigFlag, intervalEthTx1dayPauseFrames=intervalEthTx1dayPauseFrames, deployProvIfBehaviour=deployProvIfBehaviour, FspR7BitrateCaps=FspR7BitrateCaps, alarmAseTableGenFailSignalinput=alarmAseTableGenFailSignalinput, deployProvShelfDefaultsAdmin=deployProvShelfDefaultsAdmin, deployProvControlPlaneWdmRsvpMaxExpRestartTime=deployProvControlPlaneWdmRsvpMaxExpRestartTime, deployProvControlPlaneOtnCapRsvpConfigFlag=deployProvControlPlaneOtnCapRsvpConfigFlag, changeServiceDeployProvIfFecType=changeServiceDeployProvIfFecType, FspR7OdtuType=FspR7OdtuType, deployProvIfCapSigDegThresSdhSection=deployProvIfCapSigDegThresSdhSection, FspR7SnmpSecuLevelCaps=FspR7SnmpSecuLevelCaps, deployProvTunnelWdmCapTerminationLevel=deployProvTunnelWdmCapTerminationLevel, transientRestorationFailed=transientRestorationFailed, ntpServerIp=ntpServerIp, tunnelOtnDataToTidMonitor=tunnelOtnDataToTidMonitor, sts1allocatedSequenceNumber=sts1allocatedSequenceNumber, intervalOtuFec1dayTable=intervalOtuFec1dayTable, pathElementWdmDataLifIp=pathElementWdmDataLifIp, deployProvTunnelOtnCapMonitorEntities=deployProvTunnelOtnCapMonitorEntities, currentDiagnosticsTable=currentDiagnosticsTable, changeServiceDeployProvIfSigDegThresOduTcmB=changeServiceDeployProvIfSigDegThresOduTcmB, currentGfpt15minElapsedTime=currentGfpt15minElapsedTime, connectionOtnDataTunnelNo=connectionOtnDataTunnelNo, changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmA=changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmA, intervalFarEndPhysPerfOpticalOutputPwr15minLow=intervalFarEndPhysPerfOpticalOutputPwr15minLow, alarmEncryptionModuleSelfTestFailCritical=alarmEncryptionModuleSelfTestFailCritical, currentSonetHoPath15minES=currentSonetHoPath15minES, ptpEntityDataLevel=ptpEntityDataLevel, teUnnumLinkEthDataDiscarded=teUnnumLinkEthDataDiscarded, currentEthRx3HS15minControlFrameRcv=currentEthRx3HS15minControlFrameRcv, intervalPhysPerfOlmTxLineAtt1dayTimeStamp=intervalPhysPerfOlmTxLineAtt1dayTimeStamp, deployProvIfCapSignalDegradePeriod=deployProvIfCapSignalDegradePeriod, portBindingLifAidTable=portBindingLifAidTable, changeServiceDeployProvIfDefaultsSigDegThresSdhMs=changeServiceDeployProvIfDefaultsSigDegThresSdhMs, logicalCpIfDataFendDataLinkId=logicalCpIfDataFendDataLinkId, changeServiceDeployProvIfDefaultsTraceTransmitOpspOdu=changeServiceDeployProvIfDefaultsTraceTransmitOpspOdu, deployProvOpticalLinkTxLineAttenuation=deployProvOpticalLinkTxLineAttenuation, intervalOtuFec1dayCE=intervalOtuFec1dayCE, FspR7OpticalInterfaceReachCaps=FspR7OpticalInterfaceReachCaps, apsProtFacilityConfigCapTable=apsProtFacilityConfigCapTable, deployProvLogicalIfCapAdmin=deployProvLogicalIfCapAdmin, intervalEthRx3HS15minControlFrameRcv=intervalEthRx3HS15minControlFrameRcv, f7eqp1csmuewc=f7eqp1csmuewc, alarmLossofSequenceHigherOrderPath=alarmLossofSequenceHigherOrderPath, connectionOtnDataEqualizationState=connectionOtnDataEqualizationState, wdmChannelModuleDataTable=wdmChannelModuleDataTable, deployProvConnEndpointA=deployProvConnEndpointA, alarmThres15MinExceededOtuUAS=alarmThres15MinExceededOtuUAS, deployProvTunnelOtnCapRestorationType=deployProvTunnelOtnCapRestorationType, FspR7TypeConnectionCaps=FspR7TypeConnectionCaps, currentEthRx3HS1dayGoodFrames=currentEthRx3HS1dayGoodFrames, intervalPhysPerfCarrierFreqOffset1dayNumber=intervalPhysPerfCarrierFreqOffset1dayNumber)
mibBuilder.exportSymbols("FspR7-MIB", FspR7CommandModifier=FspR7CommandModifier, deployProvIfCapSigDegThresSdhMs=deployProvIfCapSigDegThresSdhMs, crsDcnDataPppInstance=crsDcnDataPppInstance, deployProvLanCapRowStatus=deployProvLanCapRowStatus, deployProvTunnelEthDefaultsProtectionType=deployProvTunnelEthDefaultsProtectionType, intervalPhysPerfCarrierFreqOffset15minNumber=intervalPhysPerfCarrierFreqOffset15minNumber, FspR7EdfaOutputPowerRatingCaps=FspR7EdfaOutputPowerRatingCaps, deployProvControlPlaneOtnRaTraceDetail=deployProvControlPlaneOtnRaTraceDetail, fspR7V1=fspR7V1, intervalSubAggregate15minTimeStamp=intervalSubAggregate15minTimeStamp, deployProvLogicalIfCapPushedNendIpHeader=deployProvLogicalIfCapPushedNendIpHeader, alarmFaultOnOpm=alarmFaultOnOpm, intervalOduTcmA1dayValidFlag=intervalOduTcmA1dayValidFlag, connectionWdmDataTunnelNo=connectionWdmDataTunnelNo, thresholdSonetSectCVHighThres1day=thresholdSonetSectCVHighThres1day, f7eqp8TceGl2g5d=f7eqp8TceGl2g5d, shelfDiagnosticsPowerConsumption=shelfDiagnosticsPowerConsumption, intervalFarEndPhysPerfOpticalInputPwr15minMean=intervalFarEndPhysPerfOpticalInputPwr15minMean, intervalEthRx3HS1dayBytesFrames1519Rcv=intervalEthRx3HS1dayBytesFrames1519Rcv, srvSyslog=srvSyslog, deployProvLogicalCpIfNendTeLinkIdNum=deployProvLogicalCpIfNendTeLinkIdNum, changeServiceDeployProvIfDefaultsAlsMode=changeServiceDeployProvIfDefaultsAlsMode, transientCpConnectionEstablishmentAborted=transientCpConnectionEstablishmentAborted, portBindingDataLocalTna=portBindingDataLocalTna, deployProvConnNonStdCapFromType=deployProvConnNonStdCapFromType, deployProvControlPlaneWdmDefaultsTedbMaxSize=deployProvControlPlaneWdmDefaultsTedbMaxSize, deployProvLanAreaId=deployProvLanAreaId, thresholdPhysConvHighSpeedTable=thresholdPhysConvHighSpeedTable, routingIpTable=routingIpTable, intervalPhysPerfCurrentOscGain15minHigh=intervalPhysPerfCurrentOscGain15minHigh, deployProvControlPlaneEthDefaultsRaConfigFlag=deployProvControlPlaneEthDefaultsRaConfigFlag, FspR7Integer32Caps=FspR7Integer32Caps, currentGfpt15minTable=currentGfpt15minTable, currentGfp15minTable=currentGfp15minTable, transientBootUpCompleted=transientBootUpCompleted, deployProvTunnelWdmTable=deployProvTunnelWdmTable, intervalLatency1weekTable=intervalLatency1weekTable, intervalPhysPerfBackreflectionPwrRcv1weekLow=intervalPhysPerfBackreflectionPwrRcv1weekLow, intervalPhysPerfOlmTxLineAtt1dayTable=intervalPhysPerfOlmTxLineAtt1dayTable, deployProvPppIpAdmin=deployProvPppIpAdmin, deployProvCrsDcnCapLink=deployProvCrsDcnCapLink, currentSubAggregate15minSES=currentSubAggregate15minSES, FspR7Protocol=FspR7Protocol, changeServiceDeployProvIfCapTraceTransmitDapiOdu=changeServiceDeployProvIfCapTraceTransmitDapiOdu, deployProvPathElementOtnUpTributaryPort=deployProvPathElementOtnUpTributaryPort, moduleConfigCapInitiateEqualization=moduleConfigCapInitiateEqualization, deployProvIfAlsMode=deployProvIfAlsMode, deployProvTunnelEthDefaultsTunnelNo=deployProvTunnelEthDefaultsTunnelNo, intervalOtu15minEntry=intervalOtu15minEntry, logicalCpIfConfigAlias=logicalCpIfConfigAlias, entityStateCapAdmin=entityStateCapAdmin, neScuAutoRestoreEnabled=neScuAutoRestoreEnabled, connectionEthDataCbsTrmt=connectionEthDataCbsTrmt, wdmChannelModuleDataSuppClientPlugRates=wdmChannelModuleDataSuppClientPlugRates, ntpServerTable=ntpServerTable, deployProvTunnelWdmCapSubLayerEncoding=deployProvTunnelWdmCapSubLayerEncoding, controlPlaneEthConfigPcConfigFlag=controlPlaneEthConfigPcConfigFlag, currentOtuFec1dayElapsedTime=currentOtuFec1dayElapsedTime, controlPlaneWdmConfigCmFisFrsTimeout=controlPlaneWdmConfigCmFisFrsTimeout, logicalCpIfDataVTeType=logicalCpIfDataVTeType, FspR7DispersionConfigCaps=FspR7DispersionConfigCaps, transientThres1DayExceededSonetLineES=transientThres1DayExceededSonetLineES, intervalEthRx15minValidFlag=intervalEthRx15minValidFlag, changeServiceDeployProvIfAlsMode=changeServiceDeployProvIfAlsMode, transientCryptoAuthPasswdChanged=transientCryptoAuthPasswdChanged, deployProvControlPlaneWdmCmCrankBackTimeout=deployProvControlPlaneWdmCmCrankBackTimeout, alarmProfileConfig=alarmProfileConfig, intervalSubAggregate15minValidFlag=intervalSubAggregate15minValidFlag, deployProvModuleEdfaPwrOut=deployProvModuleEdfaPwrOut, FspR7ManualAuto=FspR7ManualAuto, deployProvConnStdCapFromType=deployProvConnStdCapFromType, intervalL2EthRx1dayTimeStamp=intervalL2EthRx1dayTimeStamp, FspR7TestModeCaps=FspR7TestModeCaps, thresholdSonetLoPathESHighThres15min=thresholdSonetLoPathESHighThres15min, deployProvExChannelCapTable=deployProvExChannelCapTable, intervalPhysPerfEstimatedSignalGain1dayNumber=intervalPhysPerfEstimatedSignalGain1dayNumber, FspR7NtpMode=FspR7NtpMode, FspR7ConnectState=FspR7ConnectState, intervalSonetLine1dayNumber=intervalSonetLine1dayNumber, intervalPhysPerfOscOpticalOutputPwr1weekLow=intervalPhysPerfOscOpticalOutputPwr1weekLow, currentL2EthTx1dayBytesFrames128Trmt=currentL2EthTx1dayBytesFrames128Trmt, deployProvModuleSubBand=deployProvModuleSubBand, deployProvVirtualOpticalChannelCapRowStatus=deployProvVirtualOpticalChannelCapRowStatus, deployProvTunnelWdmDefaultsFacilityType=deployProvTunnelWdmDefaultsFacilityType, intervalPhysConv1dayTimeStamp=intervalPhysConv1dayTimeStamp, alarmLossOfSequenceVCG=alarmLossOfSequenceVCG, transientNtpSrvSyncFailed=transientNtpSrvSyncFailed, deployProvLogicalIfDefaultsIpAddrMask=deployProvLogicalIfDefaultsIpAddrMask, deployProvControlPlaneEthCdTraceDetail=deployProvControlPlaneEthCdTraceDetail, alarmLatencyTooLow=alarmLatencyTooLow, vtpEntityDataLambda=vtpEntityDataLambda, intervalLinkAttenuation15minTable=intervalLinkAttenuation15minTable, intervalPhysPerfOscPwr1weekHigh=intervalPhysPerfOscPwr1weekHigh, deployProvControlPlaneWdmCapCtmSetupTimeout=deployProvControlPlaneWdmCapCtmSetupTimeout, deployProvLogicalCpIfCapVNodeTltp=deployProvLogicalCpIfCapVNodeTltp, FspR7NodeIdCaps=FspR7NodeIdCaps, FspR7LagIdFend=FspR7LagIdFend, moduleConfigCapTable=moduleConfigCapTable, currentEthRx3HS15minElapsedTime=currentEthRx3HS15minElapsedTime, crsConnDeployProvType=crsConnDeployProvType, FspR7Bitrate=FspR7Bitrate, opticalIfDiagSignalToNoiseRatio=opticalIfDiagSignalToNoiseRatio, deployProvIfCapVoaSetpoint=deployProvIfCapVoaSetpoint, intervalGfpfrSublayer15minTHecDiscardedFrames=intervalGfpfrSublayer15minTHecDiscardedFrames, controlPlaneOtnConfigCdbMaxSize=controlPlaneOtnConfigCdbMaxSize, changeServiceDeployProvIfCapSigDegThresOduTcmC=changeServiceDeployProvIfCapSigDegThresOduTcmC, thresholdFarEndPhysPerfTable=thresholdFarEndPhysPerfTable, alarmEqualizationProgress=alarmEqualizationProgress, dcnOspfAreaInterfaceIndexAid=dcnOspfAreaInterfaceIndexAid, deployProvVchChannelTable=deployProvVchChannelTable, logicalCpIfDataPushedNearEndIpHeader=logicalCpIfDataPushedNearEndIpHeader, pathElementOtnDataTrafficEngineeringType=pathElementOtnDataTrafficEngineeringType, currentSonetLine15minElapsedTime=currentSonetLine15minElapsedTime, intervalPhysPerfBackreflectionPwrRcv1weekNumber=intervalPhysPerfBackreflectionPwrRcv1weekNumber, intervalSonetHoPath15minEntry=intervalSonetHoPath15minEntry, transientBootUpStarted=transientBootUpStarted, teNumLinkOtnDataNodeTid=teNumLinkOtnDataNodeTid, alarmCurrentTooHigh=alarmCurrentTooHigh, FspR7CommandModifierCaps=FspR7CommandModifierCaps, currentConditionSeverity=currentConditionSeverity, forceDeployProvApsWorkingAidCapsTable=forceDeployProvApsWorkingAidCapsTable, currentEthRx3HS15minBytesFrames1024Rcv=currentEthRx3HS15minBytesFrames1024Rcv, transientThres1DayExceededOduTcmCUAS=transientThres1DayExceededOduTcmCUAS, deployProvTunnelEthDefaultsOifUni=deployProvTunnelEthDefaultsOifUni, currentL2EthRx1dayTable=currentL2EthRx1dayTable, changeServiceDeployProvIfCapOpticalSetPoint=changeServiceDeployProvIfCapOpticalSetPoint, moduleDataRoadmNumber=moduleDataRoadmNumber, f7SFPCL=f7SFPCL, changeServiceDeployProvIfCapTraceTransmitDapiOduTcmC=changeServiceDeployProvIfCapTraceTransmitDapiOduTcmC, deployProvLogicalCpIfRefreshTimeout=deployProvLogicalCpIfRefreshTimeout, deployProvTunnelOtnMonitorEntities=deployProvTunnelOtnMonitorEntities, alarmOosAins=alarmOosAins, intervalFarEndPhysPerfOpticalOutputPwr1weekValidFlag=intervalFarEndPhysPerfOpticalOutputPwr1weekValidFlag, tnaMapDataLocalPort=tnaMapDataLocalPort, intervalGfpfrSublayer1dayNumber=intervalGfpfrSublayer1dayNumber, deployProvPathElementEthDefaultsUpstreamSvid=deployProvPathElementEthDefaultsUpstreamSvid, deployProvCrsDcnCapTable=deployProvCrsDcnCapTable, opticalIfConfigLacpMode=opticalIfConfigLacpMode, inventoryCpWdmUpDataFacilities=inventoryCpWdmUpDataFacilities, deployProvTunnelEthCapLayer=deployProvTunnelEthCapLayer, controlPlaneOtnConfigCmFisFrsTimeout=controlPlaneOtnConfigCmFisFrsTimeout, forceDeployProvApsProtectionMech=forceDeployProvApsProtectionMech, f7eqpPsu1hudc=f7eqpPsu1hudc, deployProvPppIpDefaultsOspf=deployProvPppIpDefaultsOspf, deployProvLogicalCpIfAdmin=deployProvLogicalCpIfAdmin, alarmPrbsLossOfSeqSynch=alarmPrbsLossOfSeqSynch, alarmPowerSupplyUnitFailure=alarmPowerSupplyUnitFailure, areaIdCapIndexCap=areaIdCapIndexCap, intervalLinkAttenuation1weekMean=intervalLinkAttenuation1weekMean, deployProvDcnCapAdmin=deployProvDcnCapAdmin, logicalIfDataEntry=logicalIfDataEntry, deployProvTifInputDefaultsTifAlarmMessage=deployProvTifInputDefaultsTifAlarmMessage, inventoryCpEthCrsDownDataNumber=inventoryCpEthCrsDownDataNumber, interfaceConfigCapTable=interfaceConfigCapTable, deployProvIfCapTraceTransmitSonetSection=deployProvIfCapTraceTransmitSonetSection, opticalIfConfigLagActivePorts=opticalIfConfigLagActivePorts, intervalPhysPerfOpticalOutputPwr15minTimeStamp=intervalPhysPerfOpticalOutputPwr15minTimeStamp, changeServiceDeployProvIfOscOpticalSetpoint=changeServiceDeployProvIfOscOpticalSetpoint, intervalGfpSublayer1dayTypeHecDiscardedFrames=intervalGfpSublayer1dayTypeHecDiscardedFrames, changeServiceDeployProvIfDefaultsType=changeServiceDeployProvIfDefaultsType, currentEthTx1dayBytes=currentEthTx1dayBytes, currentEthTx1dayElapsedTime=currentEthTx1dayElapsedTime, thresholdSubAggregateTable=thresholdSubAggregateTable, deployProvControlPlaneWdmWaitToRestore=deployProvControlPlaneWdmWaitToRestore, currentPhysConvCombined15minElapsedTime=currentPhysConvCombined15minElapsedTime, deployProvIfCapSigDegPeriodOduTcmC=deployProvIfCapSigDegPeriodOduTcmC, deployProvLogicalIfDefaultsRowStatus=deployProvLogicalIfDefaultsRowStatus, transientAlpSettingFinished=transientAlpSettingFinished, changeServiceDeployProvIfDefaultsIpMask=changeServiceDeployProvIfDefaultsIpMask, currentGfpSublayer1dayTypeHecDiscardedFrames=currentGfpSublayer1dayTypeHecDiscardedFrames, intervalSubAggregate15minNumber=intervalSubAggregate15minNumber, opticalIfConfigEntry=opticalIfConfigEntry, intervalFarEndPhysPerfOpticalOutputPwr15minEntry=intervalFarEndPhysPerfOpticalOutputPwr15minEntry, changeServiceDeployProvIfCapDispersionSetting=changeServiceDeployProvIfCapDispersionSetting, FspR7OpticalFiberType=FspR7OpticalFiberType, intervalEthRx3HS1dayBytes=intervalEthRx3HS1dayBytes, lanIpConfigTable=lanIpConfigTable, deployProvIfDefaultsSignalDegradePeriod=deployProvIfDefaultsSignalDegradePeriod, intervalSonetLine1dayTimeStamp=intervalSonetLine1dayTimeStamp, deployProvPathEthDefaultsPathId=deployProvPathEthDefaultsPathId, thresholdEthRxPauseFramesHighThres15Min=thresholdEthRxPauseFramesHighThres15Min, deployProvPathOtnTable=deployProvPathOtnTable, tifoConfigTable=tifoConfigTable, interfaceDataProtectionRole=interfaceDataProtectionRole, currentEthRx3HS1dayFragmentFramesRcv=currentEthRx3HS1dayFragmentFramesRcv, tunnelOtnDataFromAid=tunnelOtnDataFromAid, currentL2EthTx1dayBytesFrames64Trmt=currentL2EthTx1dayBytesFrames64Trmt, intervalEthRx3HS1dayTimeStamp=intervalEthRx3HS1dayTimeStamp, inventoryCpWdmDownDataNumber=inventoryCpWdmDownDataNumber, deployProvConnStdCapFromEndpointB=deployProvConnStdCapFromEndpointB, deployProvTunnelEthTunnelId=deployProvTunnelEthTunnelId, intervalL2EthRx15minCrcErrorsRcv=intervalL2EthRx15minCrcErrorsRcv, intervalRoundTripDelay1dayTimeStamp=intervalRoundTripDelay1dayTimeStamp, intervalSonetHoPath15minES=intervalSonetHoPath15minES, FspR7PortBehaviour=FspR7PortBehaviour, f7eqpSh3hu=f7eqpSh3hu, f7XFP10G=f7XFP10G, dcnOspfAreaRowStatus=dcnOspfAreaRowStatus, intervalFarEndPhysPerfOpticalOutputPwr1dayTable=intervalFarEndPhysPerfOpticalOutputPwr1dayTable, intervalPhysConvTxHighSpeed1dayValidFlag=intervalPhysConvTxHighSpeed1dayValidFlag, currentEthRx3HS1dayControlFrameRcv=currentEthRx3HS1dayControlFrameRcv, currentPhysConvTxHighSpeed15minCVTX=currentPhysConvTxHighSpeed15minCVTX, intervalGfpSublayer15minCoreHecCorrectedFrames=intervalGfpSublayer15minCoreHecCorrectedFrames, FspR7NCTraceId=FspR7NCTraceId, pathElementWdmDataLogicalInterfaceId=pathElementWdmDataLogicalInterfaceId, alarmRamanPumpPwrTooHigh=alarmRamanPumpPwrTooHigh, intervalSonetSect1dayEntry=intervalSonetSect1dayEntry, deployProvLogicalCpIfDefaultsAuthString=deployProvLogicalCpIfDefaultsAuthString, deployProvApsDefaultsSDswitching=deployProvApsDefaultsSDswitching, connectionWdmDataNetworkElementPosition=connectionWdmDataNetworkElementPosition, interfaceDataEntry=interfaceDataEntry, alarmAmplifierAbnormal=alarmAmplifierAbnormal, intervalEthRx1dayDiscardedFrames=intervalEthRx1dayDiscardedFrames, alarmAlarmIndicationSignalHigherOrderPath=alarmAlarmIndicationSignalHigherOrderPath, logicalIfDataLanLinkAidDerived=logicalIfDataLanLinkAidDerived, intervalPhysPerfOlmRxLineAtt1weekValidFlag=intervalPhysPerfOlmRxLineAtt1weekValidFlag, transientNeTimeChanged=transientNeTimeChanged, ethernetDataType=ethernetDataType, inventoryCpWdmCrsDownDataTable=inventoryCpWdmCrsDownDataTable, connectionWdmDataErrorMessage=connectionWdmDataErrorMessage, alarmBackwardDefectIndicationOtu=alarmBackwardDefectIndicationOtu, transientFarEndDyingGasp=transientFarEndDyingGasp, alarmIdleSignalReceived=alarmIdleSignalReceived, deployProvPortBindingCapRemoteScPc=deployProvPortBindingCapRemoteScPc, ospfConfigOspf=ospfConfigOspf, portBindingDataRemoteNodeIp=portBindingDataRemoteNodeIp, entityStateAdmin=entityStateAdmin, alarmLatencyTooHigh=alarmLatencyTooHigh, controlPlaneEthEntityStateOper=controlPlaneEthEntityStateOper, intervalPhysPerfCarrierFreqOffset1dayValidFlag=intervalPhysPerfCarrierFreqOffset1dayValidFlag, tunnelEthDataCirTrmt=tunnelEthDataCirTrmt, deployProvModuleDefaultsMode=deployProvModuleDefaultsMode, deployProvLogicalCpIfCapAdmin=deployProvLogicalCpIfCapAdmin, intervalOduTcmB1daySES=intervalOduTcmB1daySES, portBindingDataRemoteTna=portBindingDataRemoteTna, deployProvApsForceDestroy=deployProvApsForceDestroy, deployProvModuleDefaultsChannelSpacingProvision=deployProvModuleDefaultsChannelSpacingProvision, intervalSonetLine1dayTable=intervalSonetLine1dayTable, deployProvControlPlaneEthCapRsvpMaxExpRestartTime=deployProvControlPlaneEthCapRsvpMaxExpRestartTime, deployProvTunnelWdmDefaultsPceMode=deployProvTunnelWdmDefaultsPceMode, knownHostKeyEncryptAlgorithm=knownHostKeyEncryptAlgorithm, intervalDispersionCompensation15minEntry=intervalDispersionCompensation15minEntry, intervalEthRx3HS15minBroadcastFramesRcv=intervalEthRx3HS15minBroadcastFramesRcv, neAINSDefaultTimer=neAINSDefaultTimer, deployProvLogicalIfDefaultsAuthType=deployProvLogicalIfDefaultsAuthType, thresholdIntrusionEntry=thresholdIntrusionEntry, deployProvIfAdmin=deployProvIfAdmin, changeServiceDeployProvIfCapBip=changeServiceDeployProvIfCapBip, intervalOdu1dayES=intervalOdu1dayES, deployProvLogicalCpIfTunnelAid=deployProvLogicalCpIfTunnelAid, changeServiceDeployProvIfDefaultsAdmin=changeServiceDeployProvIfDefaultsAdmin, currentSonetLine15minUAS=currentSonetLine15minUAS, intervalGfpt15minValidFlag=intervalGfpt15minValidFlag, deployProvIfBip=deployProvIfBip)
mibBuilder.exportSymbols("FspR7-MIB", deployProvIfCapLagLoadBallanceSource=deployProvIfCapLagLoadBallanceSource, deployProvTunnelEthDefaultsMonitorEntities=deployProvTunnelEthDefaultsMonitorEntities, FspR7ResetRfi=FspR7ResetRfi, changeServiceDeployProvIfCapFlowControl=changeServiceDeployProvIfCapFlowControl, thresholdOtuBbeHighThres15min=thresholdOtuBbeHighThres15min, intervalPhysPerfEstimatedSignalGain1dayValidFlag=intervalPhysPerfEstimatedSignalGain1dayValidFlag, thresholdOduTcmASESHighThres15min=thresholdOduTcmASESHighThres15min, deployProvTunnelWdmTunnelTemplate=deployProvTunnelWdmTunnelTemplate, deployProvTunnelOtnDefaultsRowStatus=deployProvTunnelOtnDefaultsRowStatus, changeServiceDeployProvIfXfpDecisionThres=changeServiceDeployProvIfXfpDecisionThres, transientThres1DayExceededFecES=transientThres1DayExceededFecES, currentL2EthRx15minFramesRcv=currentL2EthRx15minFramesRcv, thresholdOduTcmBESHighThres1day=thresholdOduTcmBESHighThres1day, intervalL2EthTx1dayEntry=intervalL2EthTx1dayEntry, vc3allocatedSequenceNumber=vc3allocatedSequenceNumber, changeServiceDeployProvIfDefaultsAprHighThreshold=changeServiceDeployProvIfDefaultsAprHighThreshold, opticalLinkConfigFarEndLocation=opticalLinkConfigFarEndLocation, f7eqpRsmolm=f7eqpRsmolm, dependenciesIndex=dependenciesIndex, logicalCpIfConfigPrio=logicalCpIfConfigPrio, controlPlaneOtnEntityStateSecondaryStates=controlPlaneOtnEntityStateSecondaryStates, pathElementOtnDataTie=pathElementOtnDataTie, changeServiceDeployProvIfOpticalSetPoint=changeServiceDeployProvIfOpticalSetPoint, currentSubAggregate15minCrc=currentSubAggregate15minCrc, inventoryCpWdmCrsDownDataEntry=inventoryCpWdmCrsDownDataEntry, loopbackChange=loopbackChange, intervalPhysConvCombined15minTable=intervalPhysConvCombined15minTable, cloningSource=cloningSource, thresholdEthRxCrcFramesHighThres15Min=thresholdEthRxCrcFramesHighThres15Min, deployProvPathElementWdmDefaultsTid=deployProvPathElementWdmDefaultsTid, thresholdOduTcmCESHighThres1day=thresholdOduTcmCESHighThres1day, intervalGfp15minCoreHecCorrectedFrames=intervalGfp15minCoreHecCorrectedFrames, intervalPhysConvTxHighSpeed1dayTimeStamp=intervalPhysConvTxHighSpeed1dayTimeStamp, thresholdPhysPerfCapLowerAtlinkThres=thresholdPhysPerfCapLowerAtlinkThres, deployProvTifInputDefaultsAdmin=deployProvTifInputDefaultsAdmin, thresholdOduTcmBSESHighThres1day=thresholdOduTcmBSESHighThres1day, intervalPhysPerfPumpPwr15minEntry=intervalPhysPerfPumpPwr15minEntry, intervalGfpfr15minCHecDiscardedFrames=intervalGfpfr15minCHecDiscardedFrames, farEndIfConfigCapTable=farEndIfConfigCapTable, deployProvTunnelOtnRestorationType=deployProvTunnelOtnRestorationType, deployProvExChannelDefaultsMinimumOSNRRcv=deployProvExChannelDefaultsMinimumOSNRRcv, deployProvExChannelOpticalPowerTx=deployProvExChannelOpticalPowerTx, controlPlaneWdmConfigCdbMaxSize=controlPlaneWdmConfigCdbMaxSize, thresholdPhysPerfLaserTempHighThres=thresholdPhysPerfLaserTempHighThres, alarmGainTiltNotSettable=alarmGainTiltNotSettable, thresholdOduTcmCSESHighThres15min=thresholdOduTcmCSESHighThres15min, alarmThres15MinExceededGfpTHecDisc=alarmThres15MinExceededGfpTHecDisc, deployProvPppIpFlowControl=deployProvPppIpFlowControl, currentGfpSublayer15minTypeHecCorrectedFrames=currentGfpSublayer15minTypeHecCorrectedFrames, changeServiceDeployProvIfSigDegPeriodOduTcmB=changeServiceDeployProvIfSigDegPeriodOduTcmB, deployProvTunnelEthDefaultsPin=deployProvTunnelEthDefaultsPin, crsConnWdmDataEntityOutage=crsConnWdmDataEntityOutage, performanceAdmin=performanceAdmin, currentGfpSublayer15minTable=currentGfpSublayer15minTable, intervalRoundTripDelay1dayMean=intervalRoundTripDelay1dayMean, transientWorkingSwitchedBacktoWorking=transientWorkingSwitchedBacktoWorking, vs1allocatedSequenceNumber=vs1allocatedSequenceNumber, gfpServiceDefVcType=gfpServiceDefVcType, forceDeployProvApsCapSignalFailureSwitching=forceDeployProvApsCapSignalFailureSwitching, deployProvPathElementEthCapEntry=deployProvPathElementEthCapEntry, deployProvTunnelEthCapRowStatus=deployProvTunnelEthCapRowStatus, thresholdEthTxPauseFramesHighThres1Day=thresholdEthTxPauseFramesHighThres1Day, transientThres1DayExceededFecBERCE=transientThres1DayExceededFecBERCE, deployProvPathWdmCapPathId=deployProvPathWdmCapPathId, intervalPhysPerfCurrent1dayEntry=intervalPhysPerfCurrent1dayEntry, vchConfigTable=vchConfigTable, gfpServiceConfigAndStatus=gfpServiceConfigAndStatus, moduleDataTransmitChannel=moduleDataTransmitChannel, deployProvCopyPathWdmDefaultsPathId=deployProvCopyPathWdmDefaultsPathId, intervalPhysPerfOpticalInputPwr1weekNumber=intervalPhysPerfOpticalInputPwr1weekNumber, thresholdPhysPerfCapTable=thresholdPhysPerfCapTable, forceDeployProvApsDefaultsApsType=forceDeployProvApsDefaultsApsType, deployProvIfVoaMode=deployProvIfVoaMode, deployProvControlPlaneEthCapTedbConfigFlag=deployProvControlPlaneEthCapTedbConfigFlag, thresholdSonetSectSEFSHighThres1day=thresholdSonetSectSEFSHighThres1day, thresholdPhysConvESHighThres1day=thresholdPhysConvESHighThres1day, currentOduTcmB15minES=currentOduTcmB15minES, deployProvCrsDcnRowStatus=deployProvCrsDcnRowStatus, controlPlaneOtnDataEntry=controlPlaneOtnDataEntry, thresholdPhysConvHighSpeedCVHighThres1day=thresholdPhysConvHighSpeedCVHighThres1day, deployProvShelfCapTable=deployProvShelfCapTable, f7eqpEdfaDgcb=f7eqpEdfaDgcb, deployProvExChannelDefaultsEntry=deployProvExChannelDefaultsEntry, currentL2EthRx15minCrcErrorsRcv=currentL2EthRx15minCrcErrorsRcv, deployProvControlPlaneOtnNaasMaxSize=deployProvControlPlaneOtnNaasMaxSize, FspR7PortModeCaps=FspR7PortModeCaps, alarmServerSignalFailureVf=alarmServerSignalFailureVf, changeServiceDeployProvIfCapSigDegPeriodOduTcmB=changeServiceDeployProvIfCapSigDegPeriodOduTcmB, currentL2EthTx1dayBytesFrames1519Trmt=currentL2EthTx1dayBytesFrames1519Trmt, deployProvControlPlaneOtnCapCtmRetryWaitMultiplier=deployProvControlPlaneOtnCapCtmRetryWaitMultiplier, ApsRevertMode=ApsRevertMode, intervalPhysConvCombined15minEntry=intervalPhysConvCombined15minEntry, connectionOtnDataToNodeIp=connectionOtnDataToNodeIp, FspR7GainRangeCaps=FspR7GainRangeCaps, deployProvControlPlaneEthDefaultsCdTraceDetail=deployProvControlPlaneEthDefaultsCdTraceDetail, intervalPhysPerfChromaticDispersion1dayLow=intervalPhysPerfChromaticDispersion1dayLow, pathElementOtnDataLifIp=pathElementOtnDataLifIp, deployProvTunnelEthEntry=deployProvTunnelEthEntry, controlPlaneWdmEntityStateSecondaryStates=controlPlaneWdmEntityStateSecondaryStates, alarmOpticalInputPwrReceivedTooHigh=alarmOpticalInputPwrReceivedTooHigh, eRoadmConfigCapOpticalSetPoint=eRoadmConfigCapOpticalSetPoint, intervalL2EthTx1dayBytesFrames65Trmt=intervalL2EthTx1dayBytesFrames65Trmt, intervalOtuFec1dayExCE=intervalOtuFec1dayExCE, thresholdOduTcmCUASHighThres1day=thresholdOduTcmCUASHighThres1day, intervalDefectSeconds15minTable=intervalDefectSeconds15minTable, pathElementEthDataTable=pathElementEthDataTable, deployProvIfTimModeOduTcmC=deployProvIfTimModeOduTcmC, intervalOtuFec15minBERCE=intervalOtuFec15minBERCE, intervalRoundTripDelay1dayNumber=intervalRoundTripDelay1dayNumber, inventoryCpEthDownDataEntry=inventoryCpEthDownDataEntry, teUnnumLinkWdmDataNodeTid=teUnnumLinkWdmDataNodeTid, f710GFC=f710GFC, deployProvIfDefaultsTiltSet=deployProvIfDefaultsTiltSet, intervalGfp1dayValidFlag=intervalGfp1dayValidFlag, thresholdSonetLineESHighThres1day=thresholdSonetLineESHighThres1day, crsConnDeployProvDefaultsTable=crsConnDeployProvDefaultsTable, tunnelOtnConfigAbortProcess=tunnelOtnConfigAbortProcess, f7eqp4tca4gc=f7eqp4tca4gc, FspR7DispersionModes=FspR7DispersionModes, deployProvLogicalCpIfCapPrio=deployProvLogicalCpIfCapPrio, deployProvIfDefaultsErrorForwarding=deployProvIfDefaultsErrorForwarding, deployProvLogicalIfDeadInterval=deployProvLogicalIfDeadInterval, intervalPhysPerfCurrentOscGain15minNumber=intervalPhysPerfCurrentOscGain15minNumber, intervalPhysPerfLaserBiasCurrentNormalized1weekEntry=intervalPhysPerfLaserBiasCurrentNormalized1weekEntry, logicalCpIfDataEncapsulation=logicalCpIfDataEncapsulation, neAutoProvLifCp=neAutoProvLifCp, deployProvControlPlaneEthDefaultsCtmRetryWaitMultiplier=deployProvControlPlaneEthDefaultsCtmRetryWaitMultiplier, transientNtpSrvSyncEnded=transientNtpSrvSyncEnded, changeServiceDeployProvIfTraceExpectedOtu=changeServiceDeployProvIfTraceExpectedOtu, deployProvPathElementEthDefaultsDownstreamSvid=deployProvPathElementEthDefaultsDownstreamSvid, intervalOtu15minES=intervalOtu15minES, changeServiceDeployProvIfTerminationLevel=changeServiceDeployProvIfTerminationLevel, intervalRoundTripDelay1dayTable=intervalRoundTripDelay1dayTable, deployProvControlPlaneOtnCapTable=deployProvControlPlaneOtnCapTable, dcnOspfAreaStubDefaultMetric=dcnOspfAreaStubDefaultMetric, deployProvPathElementOtnDefaultsTrafficEngineeringType=deployProvPathElementOtnDefaultsTrafficEngineeringType, intervalEthTx15minBytes=intervalEthTx15minBytes, FspR7DispersionConfig=FspR7DispersionConfig, deployProvPlugDefaultsTable=deployProvPlugDefaultsTable, intervalOtu15minSES=intervalOtu15minSES, nendIpCapStringCap=nendIpCapStringCap, logicalCpIfDataActivationState=logicalCpIfDataActivationState, FspR7AdminState=FspR7AdminState, deployProvShelfCapType=deployProvShelfCapType, thresholdPhysPerfRamanPumpPwrHighThres=thresholdPhysPerfRamanPumpPwrHighThres, deployProvIfCapTraceTransmitSapiOtu=deployProvIfCapTraceTransmitSapiOtu, PYSNMP_MODULE_ID=fspR7MIB, currentPmSnapshotRamanPumpPower=currentPmSnapshotRamanPumpPower, moduleDataEccPorts=moduleDataEccPorts, intervalLatency15minHigh=intervalLatency15minHigh, crsConnDataOper=crsConnDataOper, currentEthTx15minBytes=currentEthTx15minBytes, controlPlaneEthConfigCdbDetail=controlPlaneEthConfigCdbDetail, intervalOtuFec15minExBERCE=intervalOtuFec15minExBERCE, changeServiceDeployProvIfDefaultsFunction=changeServiceDeployProvIfDefaultsFunction, f7eqp3BsmC=f7eqp3BsmC, deployProvModuleEqlzAdmin=deployProvModuleEqlzAdmin, deployProvTifOutputRowStatus=deployProvTifOutputRowStatus, tunnelEthConfigMonitorEntities=tunnelEthConfigMonitorEntities, currentOdu15minSES=currentOdu15minSES, trapMIB=trapMIB, reservationCpDataChannelUp=reservationCpDataChannelUp, deployProvControlPlaneWdmCapCmCrankBackTimeout=deployProvControlPlaneWdmCapCmCrankBackTimeout, farEndPlugDiagnosticsTable=farEndPlugDiagnosticsTable, transientWaitToRevert=transientWaitToRevert, intervalPhysPerfEstimatedSignalGain1dayEntry=intervalPhysPerfEstimatedSignalGain1dayEntry, alarmTurnupFailed=alarmTurnupFailed, fspUserManagementDefaultsEntry=fspUserManagementDefaultsEntry, deployProvPathElementOtnDownTributaryPort=deployProvPathElementOtnDownTributaryPort, deployProvPlugDefaultsReach=deployProvPlugDefaultsReach, tunnelEthDataCbsTrmt=tunnelEthDataCbsTrmt, deployProvControlPlaneWdmCapPcConfigFlag=deployProvControlPlaneWdmCapPcConfigFlag, thresholdPhysPerfUpperAtlinkThres=thresholdPhysPerfUpperAtlinkThres, deployProvCrsDcnCapType=deployProvCrsDcnCapType, FspR7OspfMode=FspR7OspfMode, currentOduTcmB1dayUAS=currentOduTcmB1dayUAS, changeServiceDeployProvIfDefaultsTraceTransmitDapiOtu=changeServiceDeployProvIfDefaultsTraceTransmitDapiOtu, deployProvTunnelWdmCapRestorationMode=deployProvTunnelWdmCapRestorationMode, intervalEthRx3HS1dayBytesFrames256Rcv=intervalEthRx3HS1dayBytesFrames256Rcv, changeServiceDeployProvIfTraceTransmitDapiOduTcmA=changeServiceDeployProvIfTraceTransmitDapiOduTcmA, FspR7EquipmentTypeCaps=FspR7EquipmentTypeCaps, deployProvControlPlaneOtnRmConfigFlag=deployProvControlPlaneOtnRmConfigFlag, deployProvControlPlaneEthRmConfigFlag=deployProvControlPlaneEthRmConfigFlag, deployProvIfTraceExpectedOduTcmA=deployProvIfTraceExpectedOduTcmA, shelfInfoShelfId=shelfInfoShelfId, FspR7CpRecoveryTypeCaps=FspR7CpRecoveryTypeCaps, deployProvIfSigDegPeriodIntegration=deployProvIfSigDegPeriodIntegration, changeServiceDeployProvIfTraceExpectedSonetSection=changeServiceDeployProvIfTraceExpectedSonetSection, intervalPhysConvHighSpeed15minValidFlag=intervalPhysConvHighSpeed15minValidFlag, currentL2EthRx1dayOversizedFramesRcv=currentL2EthRx1dayOversizedFramesRcv, changeServiceDeployProvIfCapTxOffDelay=changeServiceDeployProvIfCapTxOffDelay, deployProvApsDefaultsWorkingAid=deployProvApsDefaultsWorkingAid, ethernetConfigTable=ethernetConfigTable, FspR7RoadmNumber=FspR7RoadmNumber, intervalSonetLoPath15minSES=intervalSonetLoPath15minSES, deployProvControlPlaneOtnDefaultsCmFisFrsTimeout=deployProvControlPlaneOtnDefaultsCmFisFrsTimeout, transientCopyFileTransferInProgress=transientCopyFileTransferInProgress, crsConnDeployProvCapRedLineState=crsConnDeployProvCapRedLineState, thresholdOtuFecSublayerUBEHighThres15min=thresholdOtuFecSublayerUBEHighThres15min, deployProvTunnelOtnDefaultsEntry=deployProvTunnelOtnDefaultsEntry, deployProvIfCapDispersionSetting=deployProvIfCapDispersionSetting, FspR7SecurityMode=FspR7SecurityMode, intervalPhysPerfLaserBiasCurrentNormalized15minEntry=intervalPhysPerfLaserBiasCurrentNormalized15minEntry, thresholdSonetLineMsCVSHighThres1day=thresholdSonetLineMsCVSHighThres1day, deployProvExChannelDefaultsBitrate=deployProvExChannelDefaultsBitrate, deployProvCopyPathOtnCapSourcePathIndex=deployProvCopyPathOtnCapSourcePathIndex, neDefaultGateway=neDefaultGateway, deployProvPathElementWdmDefaultsChannelDown=deployProvPathElementWdmDefaultsChannelDown, teUnnumLinkWdmDataTable=teUnnumLinkWdmDataTable, controlPlaneOtnDataCdbAlias=controlPlaneOtnDataCdbAlias, deployProvControlPlaneOtnCapRmConfigFlag=deployProvControlPlaneOtnCapRmConfigFlag, conditionSeverityTable=conditionSeverityTable, areaAidCapEntry=areaAidCapEntry, deployProvControlPlaneEthCdConfigFlag=deployProvControlPlaneEthCdConfigFlag, intervalDispersionCompensation1dayTable=intervalDispersionCompensation1dayTable, authTrapPort=authTrapPort, alarmOpenConnectionIndicationOduTcmA=alarmOpenConnectionIndicationOduTcmA, intervalPhysConvHighSpeed15minEntry=intervalPhysConvHighSpeed15minEntry, deployProvIfDefaultsOtnStuffing=deployProvIfDefaultsOtnStuffing, deployProvDcnCapLanAid=deployProvDcnCapLanAid, deployProvDcnAdmin=deployProvDcnAdmin, deployProvModuleDefaultsChannelSpacing=deployProvModuleDefaultsChannelSpacing, transientCryptoFwpUpdate=transientCryptoFwpUpdate, deployProvTifInputCapType=deployProvTifInputCapType, deployProvVchChannelForceDestroy=deployProvVchChannelForceDestroy, deployProvIfCapRowStatus=deployProvIfCapRowStatus, deployProvVirtualOpticalChannelCapEntry=deployProvVirtualOpticalChannelCapEntry, changeServiceDeployProvIfEntry=changeServiceDeployProvIfEntry, fspUserManagementCapPrivilegeLevel=fspUserManagementCapPrivilegeLevel, interfaceDataOdtuType=interfaceDataOdtuType, FspR7ResetRfiCaps=FspR7ResetRfiCaps, f7eqp4tcc2g5d=f7eqp4tcc2g5d, deployProvPortBindingCapRemoteScn=deployProvPortBindingCapRemoteScn, pppDataTable=pppDataTable, deployProvLogicalIfCapTable=deployProvLogicalIfCapTable, controlPlaneOtnConfigCtmConfigFlag=controlPlaneOtnConfigCtmConfigFlag, tunnelWdmDataErrorIp=tunnelWdmDataErrorIp, interfaceConfigCapTurnupConfig=interfaceConfigCapTurnupConfig, intervalPhysPerfDiffGrDelay1dayLow=intervalPhysPerfDiffGrDelay1dayLow, changeServiceDeployProvIfCapTraceExpectedOtu=changeServiceDeployProvIfCapTraceExpectedOtu, tunnelOtnDataComputationState=tunnelOtnDataComputationState, deployProvIfCapGain=deployProvIfCapGain, opticalIfConfigCapAutoThresReset=opticalIfConfigCapAutoThresReset, deployProvControlPlaneEthCapRsvpMaxExpRecoveryTime=deployProvControlPlaneEthCapRsvpMaxExpRecoveryTime, connectionWdmDataToTid=connectionWdmDataToTid, intervalPhysConvTxHighSpeed1dayTable=intervalPhysConvTxHighSpeed1dayTable, alarmInputVoltageFailurePort1=alarmInputVoltageFailurePort1, intervalPhysConv15minTable=intervalPhysConv15minTable, deployProvCopyPathEthCapEntry=deployProvCopyPathEthCapEntry, intervalDispersionCompensation1dayValidFlag=intervalDispersionCompensation1dayValidFlag, deployProvIfDefaultsForceDestroy=deployProvIfDefaultsForceDestroy, intervalLinkAttenuation1weekLow=intervalLinkAttenuation1weekLow, intervalPhysPerfOscOpticalOutputPwr1dayTimeStamp=intervalPhysPerfOscOpticalOutputPwr1dayTimeStamp, neTimeConfig=neTimeConfig)
mibBuilder.exportSymbols("FspR7-MIB", deployProvControlPlaneWdmCapTedbMaxSize=deployProvControlPlaneWdmCapTedbMaxSize, deployProvTunnelWdmToTid=deployProvTunnelWdmToTid, controlPlaneOtnConfigTedbMinAdvertWait=controlPlaneOtnConfigTedbMinAdvertWait, deployProvShelfCapPsuOutputPower=deployProvShelfCapPsuOutputPower, changeServiceDeployProvIfSigDegThresOduTcmC=changeServiceDeployProvIfSigDegThresOduTcmC, f7eqpEdfmSgc=f7eqpEdfmSgc, deployProvControlPlaneEthCapCdConfigFlag=deployProvControlPlaneEthCapCdConfigFlag, alarmProfileValue=alarmProfileValue, currentOdu15minEntry=currentOdu15minEntry, trapVariables=trapVariables, FspR7DispersionCompensationCaps=FspR7DispersionCompensationCaps, alarmCapabilityLevelMismatch=alarmCapabilityLevelMismatch, intervalSubAggregate1dayTable=intervalSubAggregate1dayTable, deployProvLogicalCpIfCapNendTeLinkIdNum=deployProvLogicalCpIfCapNendTeLinkIdNum, changeServiceDeployProvIfCapTcmBLevel=changeServiceDeployProvIfCapTcmBLevel, intervalPhysPerfChromaticDispersion1weekTimeStamp=intervalPhysPerfChromaticDispersion1weekTimeStamp, FspR7CpRestorationModeCaps=FspR7CpRestorationModeCaps, thresholdPhysConvCombinedESHighThres15min=thresholdPhysConvCombinedESHighThres15min, connectionOtnDataTunnelId=connectionOtnDataTunnelId, opticalIfConfigCapSigDegThresSonetSection=opticalIfConfigCapSigDegThresSonetSection, intervalEthRx3HS1dayOversizedFramesRcv=intervalEthRx3HS1dayOversizedFramesRcv, alarmProfileTable=alarmProfileTable, currentPhysConv1dayEntry=currentPhysConv1dayEntry, deployProvControlPlaneEthCtmSetupTimeout=deployProvControlPlaneEthCtmSetupTimeout, deployProvTifInputDefaultsType=deployProvTifInputDefaultsType, currentL2EthRx1dayBytesFrames1519Rcv=currentL2EthRx1dayBytesFrames1519Rcv, currentOdu1dayES=currentOdu1dayES, controlPlaneEthConfigTedbMinAdvertWait=controlPlaneEthConfigTedbMinAdvertWait, changeServiceDeployProvIfDefaultsTraceTransmitDapiOdu=changeServiceDeployProvIfDefaultsTraceTransmitDapiOdu, thresholdPhysConvHighSpeedESHighThres1day=thresholdPhysConvHighSpeedESHighThres1day, deployProvDcnExternalVidCapsEntry=deployProvDcnExternalVidCapsEntry, deployProvIfCapPriority=deployProvIfCapPriority, changeServiceDeployProvIfCapAlsMode=changeServiceDeployProvIfCapAlsMode, alarmSignalDegradeHigherOrderPath=alarmSignalDegradeHigherOrderPath, intervalGfpt15minNumber=intervalGfpt15minNumber, intervalEthTx15minTable=intervalEthTx15minTable, plugDataConnectorType=plugDataConnectorType, eRoadmInfoMaxPowerConsumption=eRoadmInfoMaxPowerConsumption, changeServiceDeployProvIfCapSigDegThresOtu=changeServiceDeployProvIfCapSigDegThresOtu, changeServiceDeployProvIfCapFiberBrand=changeServiceDeployProvIfCapFiberBrand, deployProvIfDefaultsPumpPower=deployProvIfDefaultsPumpPower, pathEthDataRole=pathEthDataRole, intervalPhysPerfOpticalInputPwr15minLow=intervalPhysPerfOpticalInputPwr15minLow, transientCpConnectionModificationFail=transientCpConnectionModificationFail, teNumLinkOtnDataEntry=teNumLinkOtnDataEntry, deployProvControlPlaneOtnCapCtmShutdownTimeout=deployProvControlPlaneOtnCapCtmShutdownTimeout, deployProvPathElementWdmDefaultsNodeIp=deployProvPathElementWdmDefaultsNodeIp, currentEthRx3HS15minBytesFrames512Rcv=currentEthRx3HS15minBytesFrames512Rcv, deployProvControlPlaneWdmCapCdbMaxSize=deployProvControlPlaneWdmCapCdbMaxSize, opticalLinkDataTable=opticalLinkDataTable, intervalLatency1dayLow=intervalLatency1dayLow, alarmLossOfTransmitterClockRecovery=alarmLossOfTransmitterClockRecovery, alarmPumpLaser3TempTooLow=alarmPumpLaser3TempTooLow, FspR7Conn=FspR7Conn, deployProvLogicalCpIfOspf=deployProvLogicalCpIfOspf, interfaceConfigLanAidCapsIndex=interfaceConfigLanAidCapsIndex, FspR7ManualAutoCaps=FspR7ManualAutoCaps, currentEthRxHighSpeed15minTable=currentEthRxHighSpeed15minTable, alarmLaserTemperatureTooLow=alarmLaserTemperatureTooLow, currentGfpfr15minCHecDiscardedFrames=currentGfpfr15minCHecDiscardedFrames, transientPreComputationReady=transientPreComputationReady, connectionOtnDataRestorable=connectionOtnDataRestorable, deployProvTunnelOtnCapTunnelId=deployProvTunnelOtnCapTunnelId, thresholdGfpCoreHecCorrectedFramesHighThres15Min=thresholdGfpCoreHecCorrectedFramesHighThres15Min, tunnelEthDataErrorMessage=tunnelEthDataErrorMessage, thresholdPhysPerfPumpLaser4TempLowThres=thresholdPhysPerfPumpLaser4TempLowThres, intervalLatency1weekTimeStamp=intervalLatency1weekTimeStamp, deployProvControlPlaneWdmCapCtmRetryWait=deployProvControlPlaneWdmCapCtmRetryWait, changeServiceDeployProvIfAutonegotiation=changeServiceDeployProvIfAutonegotiation, deployProvPathElementOtnTable=deployProvPathElementOtnTable, pathOtnDataTable=pathOtnDataTable, interfaceConfigExternalVidCapsEntry=interfaceConfigExternalVidCapsEntry, exChannelDataTransmitChannel=exChannelDataTransmitChannel, changeServiceDeployProvIfDefaultsSigDegThresOduTcmC=changeServiceDeployProvIfDefaultsSigDegThresOduTcmC, alarmServerSignalFailureGfp=alarmServerSignalFailureGfp, teNumLinkWdmDataTeLinkIp=teNumLinkWdmDataTeLinkIp, changeServiceDeployProvIfLanAidCapsIndex=changeServiceDeployProvIfLanAidCapsIndex, deployProvControlPlaneWdmPcConfigFlag=deployProvControlPlaneWdmPcConfigFlag, deployProvVchChannelDefaultsTraceTransmitOpspOdu=deployProvVchChannelDefaultsTraceTransmitOpspOdu, deployProvIfType=deployProvIfType, deployProvIfCapOscOpticalSetpoint=deployProvIfCapOscOpticalSetpoint, intervalPhysPerfOscPwr1dayValidFlag=intervalPhysPerfOscPwr1dayValidFlag, f7eqp2clsmd=f7eqp2clsmd, intervalFarEndPhysPerfOpticalInputPwr15minLow=intervalFarEndPhysPerfOpticalInputPwr15minLow, controlPlaneWdmDataEntry=controlPlaneWdmDataEntry, thresholdSonetHoPathSESHighThres1day=thresholdSonetHoPathSESHighThres1day, controlPlaneOtnConfigTedbRouterId=controlPlaneOtnConfigTedbRouterId, opticalLinkDataEntry=opticalLinkDataEntry, deployProvIfRowStatus=deployProvIfRowStatus, controlPlaneWdmConfigCmCrankBackTimeout=controlPlaneWdmConfigCmCrankBackTimeout, neDatabaseSerialNumber=neDatabaseSerialNumber, FspR7DispersionOperation=FspR7DispersionOperation, moduleDiagnosticsUpperTempThres=moduleDiagnosticsUpperTempThres, deployProvPathOtnDefaultsPathId=deployProvPathOtnDefaultsPathId, transientLocalCopyMemFailNotExist=transientLocalCopyMemFailNotExist, deployProvModuleDeploy=deployProvModuleDeploy, deployProvPathElementEthLogicalInterfaceId=deployProvPathElementEthLogicalInterfaceId, deployProvLogicalCpIfCapFarEndLifId=deployProvLogicalCpIfCapFarEndLifId, deployProvLogicalIfDefaultsEncapsulation=deployProvLogicalIfDefaultsEncapsulation, alarmSignalFailureOPU=alarmSignalFailureOPU, f7Containers=f7Containers, currentOtu1dayElapsedTime=currentOtu1dayElapsedTime, intervalEthRxHighSpeed15minNumber=intervalEthRxHighSpeed15minNumber, deployProvPlugLoopbackAttenuation=deployProvPlugLoopbackAttenuation, plugDataEntry=plugDataEntry, deployProvModuleType=deployProvModuleType, forceDeployProvApsProtectingAidCapsTable=forceDeployProvApsProtectingAidCapsTable, shelfConfigRack=shelfConfigRack, deployProvIfDefaultsLacpTimeout=deployProvIfDefaultsLacpTimeout, farEndIfDataReach=farEndIfDataReach, alarmAutomaticPowerReduction=alarmAutomaticPowerReduction, currentL2EthRx1dayCrcErrorsRcv=currentL2EthRx1dayCrcErrorsRcv, deployProvIfDefaultsTraceExpectedOtu=deployProvIfDefaultsTraceExpectedOtu, FspR7OpticalGroup=FspR7OpticalGroup, fspUserManagementAuthPrivKeyOld=fspUserManagementAuthPrivKeyOld, opticalFilterIfDataMultiplexLevel=opticalFilterIfDataMultiplexLevel, tunnelEthDataTunnelType=tunnelEthDataTunnelType, intervalPhysPerfPumpPwr1dayTimeStamp=intervalPhysPerfPumpPwr1dayTimeStamp, deployProvCopyPathOtnRowStatus=deployProvCopyPathOtnRowStatus, intervalEthRx3HS1dayFragmentFramesRcv=intervalEthRx3HS1dayFragmentFramesRcv, intervalPhysPerfLaserBiasCurrentNormalized1dayMean=intervalPhysPerfLaserBiasCurrentNormalized1dayMean, deployProvModuleDefaultsTable=deployProvModuleDefaultsTable, intervalOdu15minUAS=intervalOdu15minUAS, intervalOtuFec1dayExValidFlag=intervalOtuFec1dayExValidFlag, inventoryCpWdmDownDataEntry=inventoryCpWdmDownDataEntry, interfaceConfigEqlzAdmin=interfaceConfigEqlzAdmin, changeServiceDeployProvIfDefaultsTimingSource=changeServiceDeployProvIfDefaultsTimingSource, currentOtuFec1dayExBERCE=currentOtuFec1dayExBERCE, transientCopyFileLoginFail=transientCopyFileLoginFail, capabilityDataTable=capabilityDataTable, deployProvIfDefaultsLanAid=deployProvIfDefaultsLanAid, alarmOspfIpServerNotAvailable=alarmOspfIpServerNotAvailable, portBindingDataLayer=portBindingDataLayer, deployProvTunnelWdmDefaultsOifUni=deployProvTunnelWdmDefaultsOifUni, deployProvTunnelOtnDefaultsProvisionedPaths=deployProvTunnelOtnDefaultsProvisionedPaths, intervalPhysConvHighSpeed1dayCV=intervalPhysConvHighSpeed1dayCV, currentSonetHoPath15minElapsedTime=currentSonetHoPath15minElapsedTime, deployProvApsCapRevertMode=deployProvApsCapRevertMode, deployProvDcnDefaultsType=deployProvDcnDefaultsType, opticalIfDiagPumpLaserBiasCurrent1=opticalIfDiagPumpLaserBiasCurrent1, controlPlaneWdmConfigCtmRetryWait=controlPlaneWdmConfigCtmRetryWait, intervalPhysConvCombined15minES=intervalPhysConvCombined15minES, transientThres1DayExceededPhysConvCVDE=transientThres1DayExceededPhysConvCVDE, deployProvDcnDefaultsTable=deployProvDcnDefaultsTable, deployProvOpticalLinkCapTxLineAttenuation=deployProvOpticalLinkCapTxLineAttenuation, deployProvIfDefaultsVethAid=deployProvIfDefaultsVethAid, intervalGfp1dayCoreHecCorrectedFrames=intervalGfp1dayCoreHecCorrectedFrames, deployProvControlPlaneOtnDefaultsRmConfigFlag=deployProvControlPlaneOtnDefaultsRmConfigFlag, entitiesToCloningTable=entitiesToCloningTable, deployProvIfDefaultsBip=deployProvIfDefaultsBip, nendIpCapTable=nendIpCapTable, controlPlaneEthConfigCtmTraceDetail=controlPlaneEthConfigCtmTraceDetail, apsProtGroupStatusProtectionMech=apsProtGroupStatusProtectionMech, controlPlaneOtnDataCmAlias=controlPlaneOtnDataCmAlias, deployProvControlPlaneWdmDefaultsRsvpConfigFlag=deployProvControlPlaneWdmDefaultsRsvpConfigFlag, deployProvIfCapTraceTransmitDapiOduTcmB=deployProvIfCapTraceTransmitDapiOduTcmB, intervalPhysPerfEstimatedSignalGain15minNumber=intervalPhysPerfEstimatedSignalGain15minNumber, alarmProfileEntry=alarmProfileEntry, deployProvLogicalIfTable=deployProvLogicalIfTable, thresholdGfptEntry=thresholdGfptEntry, intervalDefectSeconds1dayTimeStamp=intervalDefectSeconds1dayTimeStamp, alarmCarrierFreqOffsetTooLow=alarmCarrierFreqOffsetTooLow, deployProvShelfCapBand=deployProvShelfCapBand, currentGfp15minCoreHecCorrectedFrames=currentGfp15minCoreHecCorrectedFrames, deployProvLogicalCpIfFarEndLifId=deployProvLogicalCpIfFarEndLifId, controlPlaneEthEntityStateCapTable=controlPlaneEthEntityStateCapTable, deployProvTunnelWdmProvisionedPaths=deployProvTunnelWdmProvisionedPaths, FspR7CpRestorationState=FspR7CpRestorationState, deployProvModuleGainRange=deployProvModuleGainRange, neFtpServer=neFtpServer, deployProvControlPlaneEthDefaultsTedbMaxSize=deployProvControlPlaneEthDefaultsTedbMaxSize, deployProvExChannelChannelBandwith=deployProvExChannelChannelBandwith, deployProvTunnelWdmCapRestorationPaths=deployProvTunnelWdmCapRestorationPaths, eocDataIpEntity=eocDataIpEntity, teUnnumLinkEthDataFendTeLinkId=teUnnumLinkEthDataFendTeLinkId, intervalPhysPerfCurrent15minNumber=intervalPhysPerfCurrent15minNumber, deployProvControlPlaneOtnDefaultsRsvpConfigFlag=deployProvControlPlaneOtnDefaultsRsvpConfigFlag, currentSonetSect1dayTable=currentSonetSect1dayTable, currentEthRx3HS15minPauseFrames=currentEthRx3HS15minPauseFrames, teUnnumLinkEthDataTeLinkId=teUnnumLinkEthDataTeLinkId, deployProvIfDefaultsSigDegThresSonetSection=deployProvIfDefaultsSigDegThresSonetSection, FspR7CpTieCaps=FspR7CpTieCaps, deployProvControlPlaneOtnCapCtmMaximumRetryWait=deployProvControlPlaneOtnCapCtmMaximumRetryWait, plugDataTable=plugDataTable, pppfConfigEntry=pppfConfigEntry, intervalPhysPerfOlmTxLineAtt15minHigh=intervalPhysPerfOlmTxLineAtt15minHigh, deployProvIfCapTcmALevel=deployProvIfCapTcmALevel, intervalPhysPerfOpticalInputPwr15minTable=intervalPhysPerfOpticalInputPwr15minTable, deployProvApsProtectingAidCapsIndex=deployProvApsProtectingAidCapsIndex, routingIpDevice=routingIpDevice, deployProvLogicalCpIfVNodeTltp=deployProvLogicalCpIfVNodeTltp, ethernetConfigAutoNegotiation=ethernetConfigAutoNegotiation, intervalSubAggregate1dayTimeStamp=intervalSubAggregate1dayTimeStamp, currentGfpSublayer1dayEntry=currentGfpSublayer1dayEntry, currentOtuFec15minExBERCE=currentOtuFec15minExBERCE, deployProvPppIpMetric=deployProvPppIpMetric, changeServiceDeployProvIfTraceTransmitSapiOdu=changeServiceDeployProvIfTraceTransmitSapiOdu, teUnnumLinkEthDataNodeTid=teUnnumLinkEthDataNodeTid, alarmVoltageTooHigh=alarmVoltageTooHigh, moduleDataType=moduleDataType, deployProvPppIpProxyArp=deployProvPppIpProxyArp, crsConnDeployProvDefaultsAlias=crsConnDeployProvDefaultsAlias, pathEthDataEntry=pathEthDataEntry, controlPlaneWdmConfigNaasConfigFlag=controlPlaneWdmConfigNaasConfigFlag, deployProvCopyPathEthDefaultsEntry=deployProvCopyPathEthDefaultsEntry, logicalCpIfConfigRetransmitInterval=logicalCpIfConfigRetransmitInterval, FspR7InterfaceFunction=FspR7InterfaceFunction, crsConnDataEntry=crsConnDataEntry, tunnelWdmConfigSubLayer=tunnelWdmConfigSubLayer, entityStateCapEntry=entityStateCapEntry, deployProvControlPlaneEthDefaultsRowStatus=deployProvControlPlaneEthDefaultsRowStatus, f7eqpWcelsd=f7eqpWcelsd, intervalPhysPerfOlmRxLineAtt1dayLow=intervalPhysPerfOlmRxLineAtt1dayLow, FspR7CpAffinityInclusion=FspR7CpAffinityInclusion, alarmAseTableNotAvailable=alarmAseTableNotAvailable, deployProvPppIpDefaultsFlowControl=deployProvPppIpDefaultsFlowControl, FspR7PortRoleCaps=FspR7PortRoleCaps, intervalPhysConvCombined1dayCVDE=intervalPhysConvCombined1dayCVDE, ethernetDataMonitoredDuplexMode=ethernetDataMonitoredDuplexMode, alarmLossOfGfpFrame=alarmLossOfGfpFrame, FspR7BERThresholdSectionCaps=FspR7BERThresholdSectionCaps, intervalPhysPerfEstimatedSignalGain15minTable=intervalPhysPerfEstimatedSignalGain15minTable, intervalSubAggregate15minSES=intervalSubAggregate15minSES, opticalIfConfigCapLacpTimeout=opticalIfConfigCapLacpTimeout, vc3allocatedTable=vc3allocatedTable, deployProvModuleChannelSpacingProvision=deployProvModuleChannelSpacingProvision, controlPlaneEthConfigCtmMaximumRetryNumber=controlPlaneEthConfigCtmMaximumRetryNumber, deployProvControlPlaneEthCdbMaxSize=deployProvControlPlaneEthCdbMaxSize, deployProvIfCapTimModeSonetSection=deployProvIfCapTimModeSonetSection, deployProvControlPlaneWdmRsvpConfigFlag=deployProvControlPlaneWdmRsvpConfigFlag, alarmUnequippedHigherOrderPath=alarmUnequippedHigherOrderPath, transientCopyFileTransferComplete=transientCopyFileTransferComplete, opticalIfConfigCapTributarySlotMethod=opticalIfConfigCapTributarySlotMethod, controlPlaneWdmConfigRaTraceDetail=controlPlaneWdmConfigRaTraceDetail, currentEthRx15minGoodFrames=currentEthRx15minGoodFrames, deployProvControlPlaneOtnCapCdbConfigFlag=deployProvControlPlaneOtnCapCdbConfigFlag, tunnelWdmDataMonitorEntitiesDerive=tunnelWdmDataMonitorEntitiesDerive, logicalCpIfConfigTimeToLive=logicalCpIfConfigTimeToLive, connectionDeployProv=connectionDeployProv, deployProvControlPlaneEthCapPcConfigFlag=deployProvControlPlaneEthCapPcConfigFlag, inactiveRoutingIpGateway=inactiveRoutingIpGateway, shelfInfoNetworkPorts=shelfInfoNetworkPorts, intervalSonetHoPath1dayNumber=intervalSonetHoPath1dayNumber, tunnelWdmDataToAid=tunnelWdmDataToAid, deployProvPlugCapRowStatus=deployProvPlugCapRowStatus, deployProvTunnelEthDefaultsToNodeIp=deployProvTunnelEthDefaultsToNodeIp, deployProvLanEntry=deployProvLanEntry, f7SFP2G1=f7SFP2G1, transientThres1DayExceededPhysConvDE=transientThres1DayExceededPhysConvDE, intervalL2EthTx15minBytesFrames1519Trmt=intervalL2EthTx15minBytesFrames1519Trmt, vtpEntityDataFunction=vtpEntityDataFunction, exChannelConfigFecType=exChannelConfigFecType, deployProvControlPlaneEthDefaultsTedbRouterId=deployProvControlPlaneEthDefaultsTedbRouterId, alarmThres15MinExceededPhysConvSE=alarmThres15MinExceededPhysConvSE)
mibBuilder.exportSymbols("FspR7-MIB", pathElementOtnDataSequenceNumber=pathElementOtnDataSequenceNumber, intervalPhysConvTxHighSpeed1dayNumber=intervalPhysConvTxHighSpeed1dayNumber, otdrConfigTable=otdrConfigTable, intervalPhysPerfOpticalInputPwr15minNumber=intervalPhysPerfOpticalInputPwr15minNumber, alarmAlarmIndicationSignalLine=alarmAlarmIndicationSignalLine, intervalPhysPerfOpticalOutputPwr1weekNumber=intervalPhysPerfOpticalOutputPwr1weekNumber, changeServiceDeployProvIfTraceFormSonetSection=changeServiceDeployProvIfTraceFormSonetSection, deployProvIfDefaultsSigDegThresSdhSection=deployProvIfDefaultsSigDegThresSdhSection, deployProvControlPlaneEthCmTraceDetail=deployProvControlPlaneEthCmTraceDetail, FspR7CpPinningCaps=FspR7CpPinningCaps, deployProvTunnelOtnTunnelNo=deployProvTunnelOtnTunnelNo, changeServiceDeployProvIfDefaultsEqlzAdmin=changeServiceDeployProvIfDefaultsEqlzAdmin, connectionEthDataModificationState=connectionEthDataModificationState, deployProvApsDefaultsFarEndIp=deployProvApsDefaultsFarEndIp, deployProvIfDefaultsTimModeOduTcmA=deployProvIfDefaultsTimModeOduTcmA, dcnOspfAreaCapEntry=dcnOspfAreaCapEntry, currentEthRxHighSpeed15minGoodFrames=currentEthRxHighSpeed15minGoodFrames, deployProvIfVethAidCapsTable=deployProvIfVethAidCapsTable, logicalCpIfDataLanLinkAidDerived=logicalCpIfDataLanLinkAidDerived, deployProvPathOtnCapRowStatus=deployProvPathOtnCapRowStatus, portBindingDataRemoteScn=portBindingDataRemoteScn, deployProvControlPlaneWdmEntry=deployProvControlPlaneWdmEntry, pathElementEthDataTie=pathElementEthDataTie, intervalEthRxHighSpeed15minPauseFrames=intervalEthRxHighSpeed15minPauseFrames, inventoryCpEthCrsUpDataTable=inventoryCpEthCrsUpDataTable, currentOdu15minElapsedTime=currentOdu15minElapsedTime, transientThres1DayExceededSonetLineSES=transientThres1DayExceededSonetLineSES, thresholdGfpSublayerTable=thresholdGfpSublayerTable, transientReversionCompleted=transientReversionCompleted, currentSonetSect15minES=currentSonetSect15minES, opticalIfDataWavelength=opticalIfDataWavelength, deployProvControlPlaneWdmRmConfigFlag=deployProvControlPlaneWdmRmConfigFlag, controlPlaneEthDataCmAlias=controlPlaneEthDataCmAlias, changeServiceDeployProvIfDefaultsFarEndCommunication=changeServiceDeployProvIfDefaultsFarEndCommunication, deployProvPortBindingCapRemoteTnaMask=deployProvPortBindingCapRemoteTnaMask, alarmSignalDegradeOtu=alarmSignalDegradeOtu, tunnelEthDataConnectionDirection=tunnelEthDataConnectionDirection, deployProvPlugDefaultsMaxDataRate=deployProvPlugDefaultsMaxDataRate, currentGfp1dayTable=currentGfp1dayTable, deployProvIfSigDegPeriodOduTcmA=deployProvIfSigDegPeriodOduTcmA, intervalPhysPerfCarrierFreqOffset1dayLow=intervalPhysPerfCarrierFreqOffset1dayLow, intervalPhysPerfChromaticDispersion1weekEntry=intervalPhysPerfChromaticDispersion1weekEntry, alarmUPortFailure=alarmUPortFailure, deployProvLogicalIfTimeToLive=deployProvLogicalIfTimeToLive, deployProvControlPlaneEthCdResyncTimeout=deployProvControlPlaneEthCdResyncTimeout, intervalPhysPerfOlmTxLineAtt15minTable=intervalPhysPerfOlmTxLineAtt15minTable, deployProvDcnExternalVidCapsTable=deployProvDcnExternalVidCapsTable, deployProvControlPlaneEthTable=deployProvControlPlaneEthTable, FspR7ErrorFwdMode=FspR7ErrorFwdMode, FspR7ChannelBandwidth=FspR7ChannelBandwidth, deployProvIfDefaultsTimModeOtu=deployProvIfDefaultsTimModeOtu, nodeChannelTraceStartAid=nodeChannelTraceStartAid, deployProvCopyPathEthPathId=deployProvCopyPathEthPathId, intervalPhysPerfOscPwr1dayTimeStamp=intervalPhysPerfOscPwr1dayTimeStamp, deployProvCopyPathWdmEntry=deployProvCopyPathWdmEntry, deployProvTunnelWdmAlias=deployProvTunnelWdmAlias, intervalPhysPerfOlmTxLineAtt1dayValidFlag=intervalPhysPerfOlmTxLineAtt1dayValidFlag, intervalDefectSeconds15minNumber=intervalDefectSeconds15minNumber, f7eqp4csmd=f7eqp4csmd, intervalPhysPerfBackreflectionPwrRcv15minEntry=intervalPhysPerfBackreflectionPwrRcv15minEntry, FspR7ForcedStatus=FspR7ForcedStatus, intervalPhysPerfLaserBiasCurrentNormalized1weekLow=intervalPhysPerfLaserBiasCurrentNormalized1weekLow, teNumLinkEthDataSynchronization=teNumLinkEthDataSynchronization, opticalIfOlmEntry=opticalIfOlmEntry, pathElementWdmDataNodeIpMonitor=pathElementWdmDataNodeIpMonitor, changeServiceDeployProvIfDefaultsTraceExpectedOdu=changeServiceDeployProvIfDefaultsTraceExpectedOdu, deployProvTifInputTifAlarmType=deployProvTifInputTifAlarmType, currentPhysConvTxHighSpeed15minTable=currentPhysConvTxHighSpeed15minTable, currentEthRx3HS1dayElapsedTime=currentEthRx3HS1dayElapsedTime, nodeChannelTraceToAid=nodeChannelTraceToAid, deployProvLanAdmin=deployProvLanAdmin, transientThres1DayExceededOduTcmCES=transientThres1DayExceededOduTcmCES, deployProvPathElementOtnCapRowStatus=deployProvPathElementOtnCapRowStatus, alarmLocalOscTemperatureTooHigh=alarmLocalOscTemperatureTooHigh, intervalGfpfrSublayer1dayEntry=intervalGfpfrSublayer1dayEntry, deployProvTunnelWdmEntry=deployProvTunnelWdmEntry, deployProvControlPlaneEthCapPcTraceDetail=deployProvControlPlaneEthCapPcTraceDetail, currentGfpt1dayTable=currentGfpt1dayTable, deployProvControlPlaneOtnCapCdbDetail=deployProvControlPlaneOtnCapCdbDetail, intervalPhysPerfDiffGrDelay1weekHigh=intervalPhysPerfDiffGrDelay1weekHigh, alarmOosPrePostSigInSetUpProcess=alarmOosPrePostSigInSetUpProcess, inventoryCpOtnCrsDownDataEntry=inventoryCpOtnCrsDownDataEntry, currentSonetHoPath1dayTable=currentSonetHoPath1dayTable, changeServiceDeployProvIfDefaultsGain=changeServiceDeployProvIfDefaultsGain, eRoadmInfoNetworkPorts=eRoadmInfoNetworkPorts, crsConnDeployProvCapCrossConnType=crsConnDeployProvCapCrossConnType, deployProvPortBindingCapEntry=deployProvPortBindingCapEntry, deployProvIfTilt=deployProvIfTilt, moduleDiagnosticsTemp=moduleDiagnosticsTemp, intervalFarEndPhysPerfOpticalInputPwr15minHigh=intervalFarEndPhysPerfOpticalInputPwr15minHigh, inventoryCpWdmUpDataPhysicalTermPoints=inventoryCpWdmUpDataPhysicalTermPoints, currentDefectSeconds1dayDS=currentDefectSeconds1dayDS, deployProvPortBindingDefaultsRemoteScPc=deployProvPortBindingDefaultsRemoteScPc, deployProvControlPlaneOtnCdbConfigFlag=deployProvControlPlaneOtnCdbConfigFlag, currentPhysConv1dayTable=currentPhysConv1dayTable, forceDeployProvApsRowStatus=forceDeployProvApsRowStatus, changeServiceDeployProvIfSigDegPeriodOduTcmA=changeServiceDeployProvIfSigDegPeriodOduTcmA, opticalIfConfigDispersionMode=opticalIfConfigDispersionMode, deployProvExChannelChromaticDispersionRcv=deployProvExChannelChromaticDispersionRcv, intervalLinkAttenuation1dayTimeStamp=intervalLinkAttenuation1dayTimeStamp, intervalEthRx3HS1dayBroadcastFramesRcv=intervalEthRx3HS1dayBroadcastFramesRcv, deployProvControlPlaneEthCtmMaximumRetryNumber=deployProvControlPlaneEthCtmMaximumRetryNumber, f7FanUnitsFan=f7FanUnitsFan, intervalSonetLoPath1dayValidFlag=intervalSonetLoPath1dayValidFlag, deployProvVchChannelTraceTransmitDapiOdu=deployProvVchChannelTraceTransmitDapiOdu, tunnelWdmDataSpecificErrorMessage=tunnelWdmDataSpecificErrorMessage, f7eqp4csmud=f7eqp4csmud, timeNtpAttributeValueChange=timeNtpAttributeValueChange, ospfConfigTable=ospfConfigTable, deployProvControlPlaneEthDefaultsCdbDetail=deployProvControlPlaneEthDefaultsCdbDetail, syslogDataIpAddr=syslogDataIpAddr, alarmTransmitterDisabledOff=alarmTransmitterDisabledOff, alarmFarEndInformationMismatch=alarmFarEndInformationMismatch, teRouterDataInfo=teRouterDataInfo, FspR7NoYesCaps=FspR7NoYesCaps, transientForcedWorkingSwitchedBacktoWorking=transientForcedWorkingSwitchedBacktoWorking, currentOtu15minElapsedTime=currentOtu15minElapsedTime, intervalPhysPerfDiffGrDelay1dayNumber=intervalPhysPerfDiffGrDelay1dayNumber, connectionEthDataTunnelNo=connectionEthDataTunnelNo, thresholdOtuFecCErrHighThres15min=thresholdOtuFecCErrHighThres15min, deployProvControlPlaneOtnDefaultsTedbTraceDetail=deployProvControlPlaneOtnDefaultsTedbTraceDetail, currentConditionTimeStamp=currentConditionTimeStamp, interfaceConfigLanAid=interfaceConfigLanAid, tunnelOtnDataFacilityType=tunnelOtnDataFacilityType, deployProvExChannelDefaultsAlias=deployProvExChannelDefaultsAlias, currentL2EthTx15minTable=currentL2EthTx15minTable, neScuRingCap=neScuRingCap, deployProvIfCapSigDegPeriodOdu=deployProvIfCapSigDegPeriodOdu, alarmThres15MinExceededOduTcmAUAS=alarmThres15MinExceededOduTcmAUAS, changeServiceDeployProvIfOtnStuffing=changeServiceDeployProvIfOtnStuffing, deployProvSyslogSourceIp=deployProvSyslogSourceIp, f7eqpSh7hu=f7eqpSh7hu, changeServiceDeployProvIfDefaultsVoaSetpoint=changeServiceDeployProvIfDefaultsVoaSetpoint, lastErrorStatus=lastErrorStatus, deployProvPlugRowStatus=deployProvPlugRowStatus, forceDeployProvApsDefaultsEntry=forceDeployProvApsDefaultsEntry, intervalSonetHoPath15minNumber=intervalSonetHoPath15minNumber, FspR7LacpMode=FspR7LacpMode, alarmThermoElectricCoolerCurrentTooLow=alarmThermoElectricCoolerCurrentTooLow, FspR7TypeCrsCaps=FspR7TypeCrsCaps, deployProvTunnelEthTunnelNo=deployProvTunnelEthTunnelNo, FspR7LacpModeCaps=FspR7LacpModeCaps, exChannelConfigMinimumOpticalPowerRcv=exChannelConfigMinimumOpticalPowerRcv, deployProvControlPlaneWdmCapEntry=deployProvControlPlaneWdmCapEntry, deployProvControlPlaneOtnCapRaTraceDetail=deployProvControlPlaneOtnCapRaTraceDetail, intervalL2EthTx15minBytesFrames65Trmt=intervalL2EthTx15minBytesFrames65Trmt, dcnOspfAreaTable=dcnOspfAreaTable, ntpSrvConditionSeverityEntry=ntpSrvConditionSeverityEntry, thresholdEthTxEntry=thresholdEthTxEntry, transientAutomaticBackupReport=transientAutomaticBackupReport, teUnnumLinkWdmDataInfo=teUnnumLinkWdmDataInfo, moduleConfigLagSysPrio=moduleConfigLagSysPrio, currentGfp1dayTypeHecCorrectedFrames=currentGfp1dayTypeHecCorrectedFrames, thresholdOtuFecSublayerTable=thresholdOtuFecSublayerTable, pathElementOtnDataUpTributaryPort=pathElementOtnDataUpTributaryPort, ethernetDataEntry=ethernetDataEntry, FspR7OtdrPeriod=FspR7OtdrPeriod, tunnelWdmDataEncode=tunnelWdmDataEncode, pathWdmDataConnectionTunnelAid=pathWdmDataConnectionTunnelAid, deployProvIfCapBitrate=deployProvIfCapBitrate, deployProvCrsDcnDefaultsEcc=deployProvCrsDcnDefaultsEcc, intervalPhysPerfEstimatedSignalGain1dayTimeStamp=intervalPhysPerfEstimatedSignalGain1dayTimeStamp, currentSonetSect15minSEFS=currentSonetSect15minSEFS, currentPhysConvCombined15minES=currentPhysConvCombined15minES, intervalLatency1weekNumber=intervalLatency1weekNumber, dcnTopologyConfigActivateDetect=dcnTopologyConfigActivateDetect, thresholdSonetLoPathEntry=thresholdSonetLoPathEntry, deployProvCopyPathEthCapTable=deployProvCopyPathEthCapTable, controlPlaneEntityStateCapAdmin=controlPlaneEntityStateCapAdmin, f7eqpOsfm=f7eqpOsfm, deployProvLogicalIfCapDeadInterval=deployProvLogicalIfCapDeadInterval, forceDeployProvApsSignalDegradeSwitching=forceDeployProvApsSignalDegradeSwitching, intervalOtuFec1dayExTable=intervalOtuFec1dayExTable, FspR7CpType=FspR7CpType, intervalOtuFec15minExCE=intervalOtuFec15minExCE, intervalPhysPerfBackreflectionPwrRcv1dayMean=intervalPhysPerfBackreflectionPwrRcv1dayMean, intervalOduTcmA1dayTimeStamp=intervalOduTcmA1dayTimeStamp, alarmLaserFailure=alarmLaserFailure, alarmMultiplexStructureIdentifierMismatchOPU=alarmMultiplexStructureIdentifierMismatchOPU, alarmFwdAseTableFailPilot=alarmFwdAseTableFailPilot, intervalPhysConv1dayNumber=intervalPhysConv1dayNumber, facilityDeployProv=facilityDeployProv, intervalOtuFec15minExNumber=intervalOtuFec15minExNumber, alarmFarEndIpAddressUnknown=alarmFarEndIpAddressUnknown, alarmPayloadMismatchLowerOrderPath=alarmPayloadMismatchLowerOrderPath, deployProvControlPlaneOtnCmAlarmActivationTime=deployProvControlPlaneOtnCmAlarmActivationTime, FspR7CpCommand=FspR7CpCommand, alarmFwpMismatchDownloadNotServiceAffecting=alarmFwpMismatchDownloadNotServiceAffecting, deployProvControlPlaneOtnCapCtmSetupTimeout=deployProvControlPlaneOtnCapCtmSetupTimeout, currentSonetLine15minEntry=currentSonetLine15minEntry, deployProvCopyPathEthTable=deployProvCopyPathEthTable, FspR7PlugDataRateCaps=FspR7PlugDataRateCaps, alarmThres15MinExceededPhysConvES=alarmThres15MinExceededPhysConvES, interfaceConfigCapDispertionConfig=interfaceConfigCapDispertionConfig, opticalAmplifierInterfaceDiagnosticsEntry=opticalAmplifierInterfaceDiagnosticsEntry, connectionEthDataTunnelInstance=connectionEthDataTunnelInstance, remoteAlarmCpDataTime=remoteAlarmCpDataTime, ptpEntityDataConnector=ptpEntityDataConnector, deployProvPppIpDefaultsEntry=deployProvPppIpDefaultsEntry, currentSonetLine15minCV=currentSonetLine15minCV, alarmLossofMultiframeHigherOrderPath=alarmLossofMultiframeHigherOrderPath, interfaceDataOduTribPortNo=interfaceDataOduTribPortNo, deployProvConnNonStdCapToTable=deployProvConnNonStdCapToTable, exChannelConfigMaximumPMDRcv=exChannelConfigMaximumPMDRcv, deployProvControlPlaneEthDefaultsCdbConfigFlag=deployProvControlPlaneEthDefaultsCdbConfigFlag, currentL2EthRx15minBytesFrames1519Rcv=currentL2EthRx15minBytesFrames1519Rcv, eRoadmConfigTilt=eRoadmConfigTilt, deployProvApsDefaultsForceDestroy=deployProvApsDefaultsForceDestroy, deployProvExChannelDefaultsFrameFormat=deployProvExChannelDefaultsFrameFormat, intervalEthRx3HS15minGoodFrames=intervalEthRx3HS15minGoodFrames, f7eqp4tcc10gc=f7eqp4tcc10gc, deployProvConnType=deployProvConnType, exChannelConfigMaximumOpticalPowerRcv=exChannelConfigMaximumOpticalPowerRcv, thresholdPhysPerfRamanPumpPwrLowThres=thresholdPhysPerfRamanPumpPwrLowThres, currentOduTcmC15minUAS=currentOduTcmC15minUAS, thresholdSonetSectESHighThres1day=thresholdSonetSectESHighThres1day, exChannelConfigOpticalPowerTx=exChannelConfigOpticalPowerTx, deployProvIfCapTraceTransmitSapiOduTcmA=deployProvIfCapTraceTransmitSapiOduTcmA, deployProvLanCapIpAddr=deployProvLanCapIpAddr, deployProvLogicalIfCapAuthString=deployProvLogicalIfCapAuthString, deployProvControlPlaneWdmDefaultsRmTraceTarget=deployProvControlPlaneWdmDefaultsRmTraceTarget, thresholdOtuFecCEHighThres15min=thresholdOtuFecCEHighThres15min, deployProvModuleCapGroup=deployProvModuleCapGroup, currentEthRx3HS1dayBytesFrames65Rcv=currentEthRx3HS1dayBytesFrames65Rcv, transientEqlzNotRequired=transientEqlzNotRequired, opticalIfDiagDifferentialGroupDelay=opticalIfDiagDifferentialGroupDelay, intervalPhysPerfCurrentOscGain1weekEntry=intervalPhysPerfCurrentOscGain1weekEntry, deployProvExChannelCapOpticalPowerTx=deployProvExChannelCapOpticalPowerTx, FspR7TL1TimoutAvailable=FspR7TL1TimoutAvailable, thresholdPhysPerfEntry=thresholdPhysPerfEntry, currentSonetHoPath15minUAS=currentSonetHoPath15minUAS, deployProvTunnelOtnDefaultsConnectionDirection=deployProvTunnelOtnDefaultsConnectionDirection, thresholdPhysPerfCarrierFreqOffsetLow=thresholdPhysPerfCarrierFreqOffsetLow, deployProvTunnelWdmRestorationPathsComputed=deployProvTunnelWdmRestorationPathsComputed, sts24callocatedSequenceNumber=sts24callocatedSequenceNumber, deployProvIfCapSigDegThresSonetSection=deployProvIfCapSigDegThresSonetSection, FspR7OscChannelCaps=FspR7OscChannelCaps, deployProvExChannelDefaultsFecType=deployProvExChannelDefaultsFecType, FspR7RedLinedStateCaps=FspR7RedLinedStateCaps, authenticationNotificationSummary=authenticationNotificationSummary, chassisCreation=chassisCreation, forceDeployProvApsRevertMode=forceDeployProvApsRevertMode, deployProvLogicalIfCapFacilityType=deployProvLogicalIfCapFacilityType, inactiveRoutingIpDevice=inactiveRoutingIpDevice, intervalSubAggregate1dayValidFlag=intervalSubAggregate1dayValidFlag, opticalIfConfigForceFwdAsePilotOn=opticalIfConfigForceFwdAsePilotOn, deployProvExChannelDefaultsFarEndLocation=deployProvExChannelDefaultsFarEndLocation, transientCopyFileFailNotExist=transientCopyFileFailNotExist, intervalL2EthRx15minEntry=intervalL2EthRx15minEntry, FspR7GainRange=FspR7GainRange, opticalIfOlmTxLineAttenuation=opticalIfOlmTxLineAttenuation, tunnelWdmDataLogicalIfAid=tunnelWdmDataLogicalIfAid, deployProvTunnelOtnAlias=deployProvTunnelOtnAlias, intervalL2EthRx15minBytesFrames512Rcv=intervalL2EthRx15minBytesFrames512Rcv)
mibBuilder.exportSymbols("FspR7-MIB", teNumLinkEthDataFendNodeIp=teNumLinkEthDataFendNodeIp, deployProvControlPlaneWdmCtmSetupTimeout=deployProvControlPlaneWdmCtmSetupTimeout, FspR7CpTEType=FspR7CpTEType, opticalIfDataFunction=opticalIfDataFunction, logicalCpIfConfigHelloInterval=logicalCpIfConfigHelloInterval, connectionEthDataFromAid=connectionEthDataFromAid, intervalOduTcmB15minTable=intervalOduTcmB15minTable, deployProvIfCapCac=deployProvIfCapCac, dcnOspfAreaId=dcnOspfAreaId, intervalL2EthRx15minBytesFrames256Rcv=intervalL2EthRx15minBytesFrames256Rcv, neDate=neDate, intervalGfpSublayer15minEntry=intervalGfpSublayer15minEntry, tunnelWdmDataToNodeIp=tunnelWdmDataToNodeIp, deployProvControlPlaneEthTedbTraceDetail=deployProvControlPlaneEthTedbTraceDetail, intervalOdu15minES=intervalOdu15minES, intervalGfpSublayer1dayTypeHecCorrectedFrames=intervalGfpSublayer1dayTypeHecCorrectedFrames, controlPlaneEthDataCdbAlias=controlPlaneEthDataCdbAlias, logicalCpIfDataNendTeLinkIdUnn=logicalCpIfDataNendTeLinkIdUnn, deployProvPathOtnDefaultsRowStatus=deployProvPathOtnDefaultsRowStatus, FspR7OpticalInterfaceReach=FspR7OpticalInterfaceReach, FspR7MaxBitErrorRateCaps=FspR7MaxBitErrorRateCaps, intervalPhysPerfEstimatedSignalGain15minValidFlag=intervalPhysPerfEstimatedSignalGain15minValidFlag, deployProvPathElementEthTie=deployProvPathElementEthTie, currentDefectSeconds15minElapsedTime=currentDefectSeconds15minElapsedTime, deployProvIfVethAidCapsEntry=deployProvIfVethAidCapsEntry, deployProvControlPlaneEthRsvpMaxExpRecoveryTime=deployProvControlPlaneEthRsvpMaxExpRecoveryTime, deployProvIfWdmRxChannel=deployProvIfWdmRxChannel, intervalPhysPerfBackreflectionPwrRcv1weekHigh=intervalPhysPerfBackreflectionPwrRcv1weekHigh, currentOtuFec15minSES=currentOtuFec15minSES, logicalIfDataIpMask=logicalIfDataIpMask, portBindingDataRemoteTnaMask=portBindingDataRemoteTnaMask, intervalPhysPerfDiffGrDelay1weekTable=intervalPhysPerfDiffGrDelay1weekTable, thresholdPhysConvDEHighThres15min=thresholdPhysConvDEHighThres15min, controlPlaneOtnEntityStateTable=controlPlaneOtnEntityStateTable, deployProvVirtualOpticalChannelCapTable=deployProvVirtualOpticalChannelCapTable, opticalIfDiagLatency=opticalIfDiagLatency, currentSonetHoPath15minTable=currentSonetHoPath15minTable, changeServiceDeployProvIfCapBitrate=changeServiceDeployProvIfCapBitrate, FspR7ParityBit=FspR7ParityBit, portBindingDataEntry=portBindingDataEntry, controlPlaneConfigAndStatus=controlPlaneConfigAndStatus, currentGfpfr15minElapsedTime=currentGfpfr15minElapsedTime, deployProvExChannelEntry=deployProvExChannelEntry, interfaceConfigCapDispersionOperation=interfaceConfigCapDispersionOperation, FspR7LagSysIdFend=FspR7LagSysIdFend, controlPlaneWdmDataRaAlias=controlPlaneWdmDataRaAlias, deployProvModuleDefaultsAdmin=deployProvModuleDefaultsAdmin, pathWdmDataEntry=pathWdmDataEntry, deployProvLogicalCpIfCapRefreshTimeout=deployProvLogicalCpIfCapRefreshTimeout, intervalPhysPerfDiffGrDelay1weekValidFlag=intervalPhysPerfDiffGrDelay1weekValidFlag, intervalPhysPerfOlmRxLineAtt1dayValidFlag=intervalPhysPerfOlmRxLineAtt1dayValidFlag, deployProvTunnelOtnCapRowStatus=deployProvTunnelOtnCapRowStatus, inactiveRoutingIpRoutingMetric=inactiveRoutingIpRoutingMetric, currentSonetSect15minSES=currentSonetSect15minSES, deployProvIfCapTcmCLevel=deployProvIfCapTcmCLevel, currentEthRx3HS1dayBytesFrames512Rcv=currentEthRx3HS1dayBytesFrames512Rcv, neighborDiscoveryDataFarEndPortAid=neighborDiscoveryDataFarEndPortAid, deployProvCrsDcnCapEcc=deployProvCrsDcnCapEcc, connectionEthDataCbsRcv=connectionEthDataCbsRcv, deployProvDcnCapForceDestroy=deployProvDcnCapForceDestroy, intervalPhysPerfLaserBiasCurrentNormalized1weekTable=intervalPhysPerfLaserBiasCurrentNormalized1weekTable, deployProvTunnelOtnCapPin=deployProvTunnelOtnCapPin, f7eqpPsm955=f7eqpPsm955, FspR7SnmpPrivLevelCaps=FspR7SnmpPrivLevelCaps, deployProvIfTimModeOduTcmB=deployProvIfTimModeOduTcmB, alarmAttOnTransmitterFiberLowerThanMonitor=alarmAttOnTransmitterFiberLowerThanMonitor, alarmAseTableGenProgress=alarmAseTableGenProgress, deployProvLanDefaultsOspf=deployProvLanDefaultsOspf, controlPlaneWdmConfigTedbRouterId=controlPlaneWdmConfigTedbRouterId, deployProvLogicalCpIfCapAlias=deployProvLogicalCpIfCapAlias, teNumLinkWdmDataInfo=teNumLinkWdmDataInfo, deployProvModuleDefaultsCac=deployProvModuleDefaultsCac, deployProvControlPlaneWdmCmConfigFlag=deployProvControlPlaneWdmCmConfigFlag, deployProvTunnelEthOifUni=deployProvTunnelEthOifUni, deployProvIfDefaultsTraceTransmitOpspOduTcmB=deployProvIfDefaultsTraceTransmitOpspOduTcmB, alarmThres15MinExceededOduUAS=alarmThres15MinExceededOduUAS, deployProvPathElementWdmCapDownstreamModuleAid=deployProvPathElementWdmCapDownstreamModuleAid, deployProvApsDirection=deployProvApsDirection, deployProvControlPlaneWdmCapTedbRouterId=deployProvControlPlaneWdmCapTedbRouterId, alarmLocalFault=alarmLocalFault, knownHostTable=knownHostTable, deployProvControlPlaneOtnRaAlarmActivationTime=deployProvControlPlaneOtnRaAlarmActivationTime, changeServiceDeployProvIfFiberBrand=changeServiceDeployProvIfFiberBrand, currentL2EthTx15minBytesTrmt=currentL2EthTx15minBytesTrmt, deployProvTunnelOtnDefaultsToAid=deployProvTunnelOtnDefaultsToAid, FspR7CpAffinityInclusionCaps=FspR7CpAffinityInclusionCaps, FspR7Stuff=FspR7Stuff, opticalIfConfigErrorForwarding=opticalIfConfigErrorForwarding, deployProvLogicalIfCapAuthType=deployProvLogicalIfCapAuthType, intervalOduTcmC1dayTable=intervalOduTcmC1dayTable, deployProvIfChannelProvisioning=deployProvIfChannelProvisioning, deployProvControlPlaneEthCapCtmRetryWaitMultiplier=deployProvControlPlaneEthCapCtmRetryWaitMultiplier, transientFarEndChanged=transientFarEndChanged, intervalSonetSect1daySEFS=intervalSonetSect1daySEFS, intervalOtuFec1dayExTimeStamp=intervalOtuFec1dayExTimeStamp, deployProvTifOutputType=deployProvTifOutputType, interfaceDataReach=interfaceDataReach, intervalOtuFec1dayTimeStamp=intervalOtuFec1dayTimeStamp, f7eqpCustomd=f7eqpCustomd, intervalGfpfr1dayTHecDiscardedFrames=intervalGfpfr1dayTHecDiscardedFrames, vc4c8allocatedEntry=vc4c8allocatedEntry, controlPlaneOtnConfigTedbTraceDetail=controlPlaneOtnConfigTedbTraceDetail, controlPlaneWdmConfigNaasTraceDetail=controlPlaneWdmConfigNaasTraceDetail, forceDeployProvApsFarEndIp=forceDeployProvApsFarEndIp, deployProvControlPlaneWdmDefaultsPcConfigFlag=deployProvControlPlaneWdmDefaultsPcConfigFlag, thresholdOtuFecTable=thresholdOtuFecTable, alarmThres15MinExceededSonetSectSES=alarmThres15MinExceededSonetSectSES, capabilityDataType=capabilityDataType, deployProvPathElementWdmCapTie=deployProvPathElementWdmCapTie, connectionWdmDataComputedPaths=connectionWdmDataComputedPaths, changeServiceDeployProvIfTimModeOduTcmB=changeServiceDeployProvIfTimModeOduTcmB, f7Shelfs=f7Shelfs, connectionEthDataEntry=connectionEthDataEntry, intervalFarEndPhysPerfOpticalInputPwr1weekTimeStamp=intervalFarEndPhysPerfOpticalInputPwr1weekTimeStamp, FspR7FiberBrand=FspR7FiberBrand, FspR7TL1InternalState=FspR7TL1InternalState, opticalIfConfigCapBip=opticalIfConfigCapBip, currentSubAggregate15minES=currentSubAggregate15minES, currentPmSnapshotOscPowerReceived=currentPmSnapshotOscPowerReceived, deployProvLogicalIfDefaultsAreaId=deployProvLogicalIfDefaultsAreaId, forceDeployProvApsCapProtectionMech=forceDeployProvApsCapProtectionMech, ntpSysCurrentConditionTimeStamp=ntpSysCurrentConditionTimeStamp, farEndPlugDataEntry=farEndPlugDataEntry, currentOduTcmC1dayES=currentOduTcmC1dayES, currentOduTcmC1daySES=currentOduTcmC1daySES, opticalIfDiagInputPower=opticalIfDiagInputPower, tunnelEthDataFromAid=tunnelEthDataFromAid, intervalRoundTripDelay1weekTimeStamp=intervalRoundTripDelay1weekTimeStamp, FspR7SupplyType=FspR7SupplyType, deployProvIfCapFecType=deployProvIfCapFecType, inventoryCpWdmCrsUpDataAids=inventoryCpWdmCrsUpDataAids, connectionWdmDataFromTid=connectionWdmDataFromTid, intervalEthTx1dayTable=intervalEthTx1dayTable, deployProvControlPlaneWdmCdConfigFlag=deployProvControlPlaneWdmCdConfigFlag, thresholdPhysPerfRoundTripDelayLowThres=thresholdPhysPerfRoundTripDelayLowThres, vchDataTable=vchDataTable, logicalCpIfDataNendTeLinkAid=logicalCpIfDataNendTeLinkAid, exChannelConfigOSNRTransmit=exChannelConfigOSNRTransmit, deployProvTunnelWdmCapToNodeIp=deployProvTunnelWdmCapToNodeIp, changeServiceDeployProvIfTraceTransmitOpspOduTcmA=changeServiceDeployProvIfTraceTransmitOpspOduTcmA, deployProvDcnExternalVidCapsIndexCap=deployProvDcnExternalVidCapsIndexCap, FspR7AlsMode=FspR7AlsMode, thresholdPhysPerfPumpLaser1TempLowThres=thresholdPhysPerfPumpLaser1TempLowThres, opticalIfDiagLocalOscTemp=opticalIfDiagLocalOscTemp, deployProvPathElementEthTrafficEngineeringType=deployProvPathElementEthTrafficEngineeringType, apsProtFacilityConfigInhibitSwitchToProt=apsProtFacilityConfigInhibitSwitchToProt, neRackSize=neRackSize, alarmVoaControlFail=alarmVoaControlFail, alarmLossofTandemConnectionOduTcmB=alarmLossofTandemConnectionOduTcmB, interfaceDataConnectionState=interfaceDataConnectionState, deployProvIfDefaultsTerminationLevel=deployProvIfDefaultsTerminationLevel, deployProvTunnelOtnOifUni=deployProvTunnelOtnOifUni, deployProvPathElementWdmTable=deployProvPathElementWdmTable, FspR7CpEncapsulation=FspR7CpEncapsulation, intervalPhysPerfOpticalOutputPwr15minTable=intervalPhysPerfOpticalOutputPwr15minTable, alarmAutoShutdownSendingAisOdu=alarmAutoShutdownSendingAisOdu, currentPhysConv1dayES=currentPhysConv1dayES, alarmEncryptionModuleFwpUpdateEnabled=alarmEncryptionModuleFwpUpdateEnabled, opticalIfDataLagFendState=opticalIfDataLagFendState, tifoConfigEntry=tifoConfigEntry, inventoryCpEthCrsUpDataEntry=inventoryCpEthCrsUpDataEntry, inventoryCpEthDownFlowDataFacilities=inventoryCpEthDownFlowDataFacilities, deployProvPortBindingCapLogicalIfAid=deployProvPortBindingCapLogicalIfAid, transientCpConnectionModificationStart=transientCpConnectionModificationStart, deployProvLogicalIfAlias=deployProvLogicalIfAlias, crsConnConfigTunnelAid=crsConnConfigTunnelAid, deployProvIfDefaultsSigDegThresOdu=deployProvIfDefaultsSigDegThresOdu, forceDeployProvApsDefaultsSignalDegradeSwitching=forceDeployProvApsDefaultsSignalDegradeSwitching, intervalPhysPerfDiffGrDelay1weekEntry=intervalPhysPerfDiffGrDelay1weekEntry, deployProvLogicalCpIfPushedNendIpHeader=deployProvLogicalCpIfPushedNendIpHeader, intervalL2EthTx1dayNumber=intervalL2EthTx1dayNumber, inventoryCpEthCrsDownDataAids=inventoryCpEthCrsDownDataAids, deployProvDcnTable=deployProvDcnTable, eroadmIfDiagnosticsAttenuationVoa=eroadmIfDiagnosticsAttenuationVoa, changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmA=changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmA, alarmFwpMismatchDownloadServiceAffecting=alarmFwpMismatchDownloadServiceAffecting, deployProvIfDefaultsEntry=deployProvIfDefaultsEntry, intervalL2EthRx15minTable=intervalL2EthRx15minTable, opticalIfDataLacpMode=opticalIfDataLacpMode, FspR7CpRestorationMode=FspR7CpRestorationMode, currentOduTcmA1dayElapsedTime=currentOduTcmA1dayElapsedTime, currentOtuFec1dayExElapsedTime=currentOtuFec1dayExElapsedTime, alarmLossOfLinkPulse=alarmLossOfLinkPulse, intervalGfpSublayer15minTable=intervalGfpSublayer15minTable, intervalLinkAttenuation1dayTable=intervalLinkAttenuation1dayTable, inventoryCpEthCrsDownDataIndexEthTo=inventoryCpEthCrsDownDataIndexEthTo, controlPlaneWdmConfigCtmRetryWaitMultiplier=controlPlaneWdmConfigCtmRetryWaitMultiplier, deployProvControlPlaneEthDefaultsCmTraceDetail=deployProvControlPlaneEthDefaultsCmTraceDetail, deployProvLogicalIfRowStatus=deployProvLogicalIfRowStatus, pathElementEthDataNodeIpMonitor=pathElementEthDataNodeIpMonitor, intervalDefectSeconds15minTimeStamp=intervalDefectSeconds15minTimeStamp, intervalFarEndPhysPerfOpticalInputPwr15minTimeStamp=intervalFarEndPhysPerfOpticalInputPwr15minTimeStamp, deployProvControlPlaneOtnNodeNameSyntax=deployProvControlPlaneOtnNodeNameSyntax, intervalGfp1dayTypeHecDiscardedFrames=intervalGfp1dayTypeHecDiscardedFrames, intervalLatency1dayValidFlag=intervalLatency1dayValidFlag, inventoryCpWdmCrsDownDataAids=inventoryCpWdmCrsDownDataAids, f7eqp4tcc2g5=f7eqp4tcc2g5, alarmReceiverLowTemp=alarmReceiverLowTemp, opticalIfConfigPrbsPmReset=opticalIfConfigPrbsPmReset, deployProvPlugType=deployProvPlugType, currentGfpfrSublayer15minGoodFrames=currentGfpfrSublayer15minGoodFrames, plugInventoryReach=plugInventoryReach, deployProvTunnelEthCirRcv=deployProvTunnelEthCirRcv, currentL2EthTx1dayTable=currentL2EthTx1dayTable, changeServiceDeployProvIfCapSigDegPeriodIntegration=changeServiceDeployProvIfCapSigDegPeriodIntegration, currentPhysConvTxHighSpeed1dayEntry=currentPhysConvTxHighSpeed1dayEntry, alarmPcsSignalDegrade=alarmPcsSignalDegrade, controlPlaneEthDataPcAlias=controlPlaneEthDataPcAlias, intervalPhysPerfOpticalOutputPwr1dayHigh=intervalPhysPerfOpticalOutputPwr1dayHigh, deployProvIfDefaultsMetric=deployProvIfDefaultsMetric, thresholdOtuFecUBEHighThres1day=thresholdOtuFecUBEHighThres1day, FspR7Baund=FspR7Baund, FspR7TransmissionMode=FspR7TransmissionMode, thresholdPhysPerfLatencyHighThres=thresholdPhysPerfLatencyHighThres, shelfConfigRackNumber=shelfConfigRackNumber, transientEqlzCompleted=transientEqlzCompleted, forceDeployProvApsSDswitching=forceDeployProvApsSDswitching, transientThres1DayExceededOduTcmAES=transientThres1DayExceededOduTcmAES, deployProvIfCapTimModeOduTcmB=deployProvIfCapTimModeOduTcmB, intervalPhysConvTxHighSpeed1daySETX=intervalPhysConvTxHighSpeed1daySETX, currentPhysConvHighSpeed15minES=currentPhysConvHighSpeed15minES, intervalPhysConv15minNumber=intervalPhysConv15minNumber, deployProvPathElementWdmDefaultsLogicalInterfaceId=deployProvPathElementWdmDefaultsLogicalInterfaceId, vc4allocatedContainer=vc4allocatedContainer, deployProvIfDefaultsBand=deployProvIfDefaultsBand, thresholdSubAggregateEntry=thresholdSubAggregateEntry, controlPlaneWdmConfigRsvpMaxExpRestartTime=controlPlaneWdmConfigRsvpMaxExpRestartTime, shelfDiagnosticsEntry=shelfDiagnosticsEntry, thresholdPhysPerfCapChromaticDispersionHigh=thresholdPhysPerfCapChromaticDispersionHigh, vc3allocatedContainer=vc3allocatedContainer, changeServiceDeployProvIfVoaSetpoint=changeServiceDeployProvIfVoaSetpoint, deployProvPathElementOtnDefaultsUpTributaryODTUType=deployProvPathElementOtnDefaultsUpTributaryODTUType, intervalPhysPerfOlmTxLineAtt1dayHigh=intervalPhysPerfOlmTxLineAtt1dayHigh, currentPhysConvHighSpeed1dayElapsedTime=currentPhysConvHighSpeed1dayElapsedTime, serviceConfigAndStatus=serviceConfigAndStatus, deployProvModuleCapTable=deployProvModuleCapTable, intervalPhysPerfOpticalOutputPwr1dayTimeStamp=intervalPhysPerfOpticalOutputPwr1dayTimeStamp, deployProvPathEthEntry=deployProvPathEthEntry, FspR7BERThresholdCaps=FspR7BERThresholdCaps, deployProvIfDuplex=deployProvIfDuplex, deployProvControlPlaneOtnDefaultsRsvpMaxExpRestartTime=deployProvControlPlaneOtnDefaultsRsvpMaxExpRestartTime, crsConnDeployProvDefaultsConn=crsConnDeployProvDefaultsConn, deployProvIfCapSigDegThresOdu=deployProvIfCapSigDegThresOdu, deployProvControlPlaneEthDefaultsCtmShutdownTimeout=deployProvControlPlaneEthDefaultsCtmShutdownTimeout, deployProvControlPlaneOtnDefaultsCtmMaximumRetryWait=deployProvControlPlaneOtnDefaultsCtmMaximumRetryWait, deployProvControlPlaneEthEntry=deployProvControlPlaneEthEntry, pathElementOtnDataDownTributaryTSMethod=pathElementOtnDataDownTributaryTSMethod, remoteAlarmCpDataTable=remoteAlarmCpDataTable, pppDataNearEndIp=pppDataNearEndIp, alarmServerSignalFailurePath=alarmServerSignalFailurePath, f7eqpVsm=f7eqpVsm, deployProvIfDefaultsTcmALevel=deployProvIfDefaultsTcmALevel, deployProvPppIpEntry=deployProvPppIpEntry, intervalLatency15minEntry=intervalLatency15minEntry)
mibBuilder.exportSymbols("FspR7-MIB", deployProvPathWdmDefaultsRowStatus=deployProvPathWdmDefaultsRowStatus, ntpSysConditionSeverityTable=ntpSysConditionSeverityTable, FspR7CpEncodeCaps=FspR7CpEncodeCaps, nendIpCapIndexCap=nendIpCapIndexCap, fspR7VendorTypes=fspR7VendorTypes, intervalPhysPerfOpticalInputPwr15minTimeStamp=intervalPhysPerfOpticalInputPwr15minTimeStamp, currentGfpSublayer1dayElapsedTime=currentGfpSublayer1dayElapsedTime, thresholdGfpSublayerCoreHecCorrectedFramesHighThres15Min=thresholdGfpSublayerCoreHecCorrectedFramesHighThres15Min, currentL2EthTx1dayBytesFrames256Trmt=currentL2EthTx1dayBytesFrames256Trmt, deployProvLogicalCpIfDefaultsRefreshTimeout=deployProvLogicalCpIfDefaultsRefreshTimeout, currentOdu1dayEntry=currentOdu1dayEntry, currentOduTcmB15minUAS=currentOduTcmB15minUAS, deployProvControlPlaneEthTedbRouterId=deployProvControlPlaneEthTedbRouterId, FspR7UntaggedFramesCaps=FspR7UntaggedFramesCaps, tunnelOtnConfigAdminModifier=tunnelOtnConfigAdminModifier, deployProvControlPlaneWdmDefaultsCtmRetryWaitMultiplier=deployProvControlPlaneWdmDefaultsCtmRetryWaitMultiplier, fspUserManagementTcpSessionStatus=fspUserManagementTcpSessionStatus, lanIpConfigIpAddr=lanIpConfigIpAddr, changeServiceDeployProvIfCapErrorForwarding=changeServiceDeployProvIfCapErrorForwarding, deployProvPathElementWdmTrafficEngineeringType=deployProvPathElementWdmTrafficEngineeringType, intervalPhysPerfEstimatedSignalGain15minMean=intervalPhysPerfEstimatedSignalGain15minMean, f7eqp4csmc=f7eqp4csmc, deployProvLogicalCpIfFarEndTid=deployProvLogicalCpIfFarEndTid, intervalEthRx3HS15minTable=intervalEthRx3HS15minTable, intervalL2EthTx1dayBytesFrames64Trmt=intervalL2EthTx1dayBytesFrames64Trmt, FspR7L2CacEnableCaps=FspR7L2CacEnableCaps, alarmNtpForSchedEqlzRequired=alarmNtpForSchedEqlzRequired, intervalPhysPerfPumpPwr1dayMean=intervalPhysPerfPumpPwr1dayMean, deployProvIfDefaultsOpticalSetPoint=deployProvIfDefaultsOpticalSetPoint, deployProvDcnEntry=deployProvDcnEntry, vtpEntityDataConnEqptState=vtpEntityDataConnEqptState, deployProvIfSigDegThresOtu=deployProvIfSigDegThresOtu, deployProvLogicalCpIfFarEndNodeIp=deployProvLogicalCpIfFarEndNodeIp, deployProvControlPlaneOtnCapNaasAdvertWait=deployProvControlPlaneOtnCapNaasAdvertWait, authTrapSessionId=authTrapSessionId, deployProvControlPlaneOtnCapRaAlarmActivationTime=deployProvControlPlaneOtnCapRaAlarmActivationTime, thresholdSonetHoPathUASHighThres1day=thresholdSonetHoPathUASHighThres1day, eocDataEntry=eocDataEntry, controlPlaneOtnConfigRsvpMaxExpRestartTime=controlPlaneOtnConfigRsvpMaxExpRestartTime, changeServiceDeployProvIfDefaultsSigDegPeriodIntegration=changeServiceDeployProvIfDefaultsSigDegPeriodIntegration, changeServiceDeployProvIfCapWdmRxChannel=changeServiceDeployProvIfCapWdmRxChannel, deployProvPppIpDefaultsAdmin=deployProvPppIpDefaultsAdmin, controlPlaneOtnConfigNaasTraceDetail=controlPlaneOtnConfigNaasTraceDetail, opticalIfDiagRamanEstSignalGain=opticalIfDiagRamanEstSignalGain, ntpServerAdminState=ntpServerAdminState, farEndPlugConfigAlias=farEndPlugConfigAlias, crsConnWdmDataTunnelAid=crsConnWdmDataTunnelAid, reservationCpDataIngressNodeIp=reservationCpDataIngressNodeIp, opticalIfConfigAseTabCreation=opticalIfConfigAseTabCreation, thresholdPhysPerfChromaticDispersionHigh=thresholdPhysPerfChromaticDispersionHigh, controlPlaneOtnDataTedbAlias=controlPlaneOtnDataTedbAlias, moduleDataBand=moduleDataBand, thresholdPhysConvDEHighThres1day=thresholdPhysConvDEHighThres1day, FspR7ProtectionTypeCaps=FspR7ProtectionTypeCaps, currentOtu15minEntry=currentOtu15minEntry, fspUserManagementSnmpTimeoutValue=fspUserManagementSnmpTimeoutValue, fspUser=fspUser, alarmAseTableGenFailOscMissing=alarmAseTableGenFailOscMissing, FspR7SubLayer=FspR7SubLayer, crsConnDataTunnelId=crsConnDataTunnelId, controlPlaneWdmDataPcAlias=controlPlaneWdmDataPcAlias, deployProvTunnelEthCapProtectionType=deployProvTunnelEthCapProtectionType, interfaceConfigAndStatus=interfaceConfigAndStatus, inactiveRoutingIpTable=inactiveRoutingIpTable, deployProvIfCapOspf=deployProvIfCapOspf, FspR7LineCoding=FspR7LineCoding, deployProvControlPlaneOtnDefaultsCdResyncTimeout=deployProvControlPlaneOtnDefaultsCdResyncTimeout, intervalFarEndPhysPerfOpticalInputPwr15minTable=intervalFarEndPhysPerfOpticalInputPwr15minTable, crsConnDeployProvDefaultsRedLineState=crsConnDeployProvDefaultsRedLineState, deployProvIfCapTraceExpectedOtu=deployProvIfCapTraceExpectedOtu, thresholdSonetLineTable=thresholdSonetLineTable, FspR7PacketsLayerCaps=FspR7PacketsLayerCaps, deployProvShelfDefaultsRowStatus=deployProvShelfDefaultsRowStatus, deployProvApsCapHoldOffTime=deployProvApsCapHoldOffTime, deployProvIfTimingSource=deployProvIfTimingSource, deployProvControlPlaneEthCapCmCrankBackTimeout=deployProvControlPlaneEthCapCmCrankBackTimeout, deployProvIfSigDegThresOdu=deployProvIfSigDegThresOdu, shelfInfoOscPorts=shelfInfoOscPorts, deployProvLanRowStatus=deployProvLanRowStatus, inventoryCpEthDownFlowDataEntry=inventoryCpEthDownFlowDataEntry, deployProvApsDefaultsApsType=deployProvApsDefaultsApsType, neighborDiscoveryDataFarEndTid=neighborDiscoveryDataFarEndTid, FspR7OpticalSubBand=FspR7OpticalSubBand, thresholdDefectSecondsDefectSecondsHighThres15Min=thresholdDefectSecondsDefectSecondsHighThres15Min, alarmAseTableGenFailHighBackreflection=alarmAseTableGenFailHighBackreflection, changeServiceDeployProvIfDefaultsFecType=changeServiceDeployProvIfDefaultsFecType, thresholdEthTxTable=thresholdEthTxTable, f7Ports=f7Ports, f7eqp40csmd=f7eqp40csmd, inactiveRoutingIpRouteType=inactiveRoutingIpRouteType, deployProvIfDefaultsLacpMode=deployProvIfDefaultsLacpMode, alarmThres15MinExceededOduTcmAES=alarmThres15MinExceededOduTcmAES, ntpTimeZoneCapsTable=ntpTimeZoneCapsTable, intervalPhysPerfOpticalOutputPwr1weekHigh=intervalPhysPerfOpticalOutputPwr1weekHigh, intraNeConnectionsState=intraNeConnectionsState, apsProtFacilityConfigSwitchCommand=apsProtFacilityConfigSwitchCommand, tunnelOtnDataMonitorEntitiesDerive=tunnelOtnDataMonitorEntitiesDerive, currentEthRx3HS1dayUndersizedFramesRcv=currentEthRx3HS1dayUndersizedFramesRcv, controlPlaneWdmConfigCtmShutdownTimeout=controlPlaneWdmConfigCtmShutdownTimeout, changeServiceDeployProvIfCapTraceFormSonetSection=changeServiceDeployProvIfCapTraceFormSonetSection, moduleDiagnosticsDescription=moduleDiagnosticsDescription, deployProvPathElementOtnCapTid=deployProvPathElementOtnCapTid, thresholdPhysPerfPumpLaser4TempHighThres=thresholdPhysPerfPumpLaser4TempHighThres, deployProvTifOutputCapEntry=deployProvTifOutputCapEntry, deployProvTunnelWdmTunnelId=deployProvTunnelWdmTunnelId, deployProvTunnelWdmDefaultsFromAid=deployProvTunnelWdmDefaultsFromAid, controlPlaneEthEntityStateSecondaryStates=controlPlaneEthEntityStateSecondaryStates, FspR7ErrorFwdModeCaps=FspR7ErrorFwdModeCaps, intervalRoundTripDelay1weekEntry=intervalRoundTripDelay1weekEntry, alarmEncryptionPortMaxKeyExchgFailuresReachedIs=alarmEncryptionPortMaxKeyExchgFailuresReachedIs, changeServiceDeployProvIfTable=changeServiceDeployProvIfTable, intervalOduTcmB15minValidFlag=intervalOduTcmB15minValidFlag, deployProvIfCapEntry=deployProvIfCapEntry, tunnelEthDataFacilityType=tunnelEthDataFacilityType, intervalDispersionCompensation1weekNumber=intervalDispersionCompensation1weekNumber, syslogDataEntry=syslogDataEntry, FspR7Date=FspR7Date, intervalPhysPerfOpticalInputPwr15minEntry=intervalPhysPerfOpticalInputPwr15minEntry, alarmTraceIdentifierMismatchOduTcmB=alarmTraceIdentifierMismatchOduTcmB, remoteAlarmCpDataNodeTid=remoteAlarmCpDataNodeTid, currentDefectSeconds1dayEntry=currentDefectSeconds1dayEntry, currentSonetHoPath1dayES=currentSonetHoPath1dayES, FspR7TifOutputReset=FspR7TifOutputReset, thresholdOtuFecUBEHighThres15min=thresholdOtuFecUBEHighThres15min, deployProvIfDefaultsPriority=deployProvIfDefaultsPriority, deployProvControlPlaneOtnDefaultsCdbConfigFlag=deployProvControlPlaneOtnDefaultsCdbConfigFlag, deployProvCrsDcnDefaultsTable=deployProvCrsDcnDefaultsTable, routingIpGateway=routingIpGateway, intervalPhysPerfCurrentOscGain15minValidFlag=intervalPhysPerfCurrentOscGain15minValidFlag, deployProvCrsDcnTable=deployProvCrsDcnTable, fspUserManagementRowStatus=fspUserManagementRowStatus, deployProvCrsDcnCapRowStatus=deployProvCrsDcnCapRowStatus, intervalEthRx3HS1dayUndersizedFramesRcv=intervalEthRx3HS1dayUndersizedFramesRcv, forceDeployProvApsCapFarEndIp=forceDeployProvApsCapFarEndIp, FspR7NtpAdminState=FspR7NtpAdminState, transientPmSnapshotStarted=transientPmSnapshotStarted, intervalPmSnapshotNumber=intervalPmSnapshotNumber, transientTopologyDataInvalid=transientTopologyDataInvalid, tunnelWdmDataToTid=tunnelWdmDataToTid, changeServiceDeployProvIfTraceTransmitDapiOduTcmB=changeServiceDeployProvIfTraceTransmitDapiOduTcmB, currentGfp15minElapsedTime=currentGfp15minElapsedTime, deployProvControlPlaneWdmDefaultsWaitToRestore=deployProvControlPlaneWdmDefaultsWaitToRestore, currentOduTcmA15minEntry=currentOduTcmA15minEntry, deployProvIfStagType=deployProvIfStagType, controlPlaneEntityStateCapEntry=controlPlaneEntityStateCapEntry, teUnnumLinkOtnDataFendTeLinkId=teUnnumLinkOtnDataFendTeLinkId, FspR7CpActivState=FspR7CpActivState, edfaConfigTilt=edfaConfigTilt, deployProvPppIpCapAdmin=deployProvPppIpCapAdmin, thresholdDefectSecondsEntry=thresholdDefectSecondsEntry, deployProvIfCapTraceExpectedOduTcmC=deployProvIfCapTraceExpectedOduTcmC, deployProvControlPlaneOtnDefaultsCtmTraceDetail=deployProvControlPlaneOtnDefaultsCtmTraceDetail, FspR7LossAttenuation=FspR7LossAttenuation, tunnelWdmConfigFecType=tunnelWdmConfigFecType, pathElementEthDataPathId=pathElementEthDataPathId, deployProvTunnelEthProvisionedPaths=deployProvTunnelEthProvisionedPaths, currentPmSnapshotOscGain=currentPmSnapshotOscGain, intervalPhysPerfOpticalInputPwr1dayNumber=intervalPhysPerfOpticalInputPwr1dayNumber, crsConnWdmDataCrsType=crsConnWdmDataCrsType, deployProvControlPlaneOtnDefaultsNaasAdvertWait=deployProvControlPlaneOtnDefaultsNaasAdvertWait, intervalOdu1dayTable=intervalOdu1dayTable, deployProvVchChannelDefaultsBundle=deployProvVchChannelDefaultsBundle, deployProvControlPlaneEthDefaultsCtmRetryWait=deployProvControlPlaneEthDefaultsCtmRetryWait, deployProvExChannelCapOSNRTransmit=deployProvExChannelCapOSNRTransmit, deployProvTunnelEthCapTable=deployProvTunnelEthCapTable, syslogConfigSourceIp=syslogConfigSourceIp, intervalEthRx15minGoodFrames=intervalEthRx15minGoodFrames, intervalOduTcmC1dayUAS=intervalOduTcmC1dayUAS, FspR7RowStatusCaps=FspR7RowStatusCaps, crsConnWdmConfigPathNode=crsConnWdmConfigPathNode, deployProvLogicalCpIfDefaultsAuthType=deployProvLogicalCpIfDefaultsAuthType, thresholdPhysPerfCarrierFreqOffsetHigh=thresholdPhysPerfCarrierFreqOffsetHigh, thresholdOtuFecSublayerBERCEHighThres1day=thresholdOtuFecSublayerBERCEHighThres1day, deployProvIfDefaultsType=deployProvIfDefaultsType, deployProvTunnelOtnCapLayer=deployProvTunnelOtnCapLayer, FspR7ConnCommand=FspR7ConnCommand, logicalIfDataFacilityType=logicalIfDataFacilityType, intervalFarEndPhysPerfOpticalInputPwr15minNumber=intervalFarEndPhysPerfOpticalInputPwr15minNumber, intervalPhysPerfDiffGrDelay1dayTimeStamp=intervalPhysPerfDiffGrDelay1dayTimeStamp, alarmPumpLaser4TempTooHigh=alarmPumpLaser4TempTooHigh, channelTrace=channelTrace, intervalL2EthRx1dayBytesFrames1519Rcv=intervalL2EthRx1dayBytesFrames1519Rcv, teNumLinkOtnDataInfo=teNumLinkOtnDataInfo, transientLocalCopyMemFailDamagedConfFile=transientLocalCopyMemFailDamagedConfFile, intervalOduTcmB1dayBbe=intervalOduTcmB1dayBbe, pathEthDataConnectionTunnelAid=pathEthDataConnectionTunnelAid, deployProvControlPlaneWdmDefaultsNaasTraceDetail=deployProvControlPlaneWdmDefaultsNaasTraceDetail, routingMIB=routingMIB, moduleDataInternalPlugsReach=moduleDataInternalPlugsReach, thresholdOtuFecSublayerEntry=thresholdOtuFecSublayerEntry, deployProvControlPlaneEthDefaultsTedbTraceDetail=deployProvControlPlaneEthDefaultsTedbTraceDetail, FspR7Mapping=FspR7Mapping, deployProvCopyPathEthRowStatus=deployProvCopyPathEthRowStatus, intervalGfpt1dayDiscardedSuperblocks=intervalGfpt1dayDiscardedSuperblocks, deployProvIfDefaultsVariableGain=deployProvIfDefaultsVariableGain, changeServiceDeployProvIfCapSigDegThresSonetSection=changeServiceDeployProvIfCapSigDegThresSonetSection, deployProvTunnelWdmPceMode=deployProvTunnelWdmPceMode, deployProvIfDefaultsTimingSource=deployProvIfDefaultsTimingSource, deployProvIfLacpTimeout=deployProvIfLacpTimeout, thresholdOtuSESHighThres15min=thresholdOtuSESHighThres15min, f7eqpEdfadgc=f7eqpEdfadgc, currentOtu1dayES=currentOtu1dayES, deployProvModuleCapMode=deployProvModuleCapMode, interfaceDataCir=interfaceDataCir, teNumLinkOtnDataPhysicalLink=teNumLinkOtnDataPhysicalLink, thresholdOtuFecSublayerExCEHighThres1day=thresholdOtuFecSublayerExCEHighThres1day, connectionWdmConfigCancelModifier=connectionWdmConfigCancelModifier, deployProvLogicalCpIfCapAuthType=deployProvLogicalCpIfCapAuthType, f7STM16=f7STM16, deployProvControlPlaneWdmCapTedbConfigFlag=deployProvControlPlaneWdmCapTedbConfigFlag, deployProvLogicalCpIfVTeType=deployProvLogicalCpIfVTeType, transientAlarmProfileActivation=transientAlarmProfileActivation, opticalIfDataCbsTrmt=opticalIfDataCbsTrmt, pathElementEthDataTid=pathElementEthDataTid, deployProvPlugCapAdmin=deployProvPlugCapAdmin, intervalPhysPerfOlmTxLineAtt1weekEntry=intervalPhysPerfOlmTxLineAtt1weekEntry, intervalPhysPerfOpticalOutputPwr15minValidFlag=intervalPhysPerfOpticalOutputPwr15minValidFlag, intervalGfp15minEntry=intervalGfp15minEntry, transientThres1DayExceededOduTcmAUAS=transientThres1DayExceededOduTcmAUAS, opticalIfConfigTxOffDelay=opticalIfConfigTxOffDelay, deployProvOpticalLinkDefaultsFarEndLocation=deployProvOpticalLinkDefaultsFarEndLocation, intervalSonetLoPath1dayUAS=intervalSonetLoPath1dayUAS, deployProvLogicalCpIfCapPushedNendIpHeader=deployProvLogicalCpIfCapPushedNendIpHeader, farEndPlugDataConnectorType=farEndPlugDataConnectorType, inventoryCpWdmCrsUpDataTable=inventoryCpWdmCrsUpDataTable, f7eqpNcu2e=f7eqpNcu2e, deployProvIfDefaultsLagPrio=deployProvIfDefaultsLagPrio, intervalSonetHoPath1dayES=intervalSonetHoPath1dayES, alarmCpTunnelEstablishFailed=alarmCpTunnelEstablishFailed, deployProvControlPlaneWdmCapRsvpMaxExpRestartTime=deployProvControlPlaneWdmCapRsvpMaxExpRestartTime, alarmLossOfCharSyncFromFarEnd=alarmLossOfCharSyncFromFarEnd, controlPlaneEthEntityStateTable=controlPlaneEthEntityStateTable, farEndPlugDataType=farEndPlugDataType, deployProvPathElementOtnDefaultsTie=deployProvPathElementOtnDefaultsTie, deployProvTunnelEthDefaultsRestorationType=deployProvTunnelEthDefaultsRestorationType, teNumLinkOtnDataTable=teNumLinkOtnDataTable, intervalLatency1weekHigh=intervalLatency1weekHigh, deployProvTifInputCapTifAlarmMessage=deployProvTifInputCapTifAlarmMessage, coldStartAgentReconfigured=coldStartAgentReconfigured, intervalSonetLine15minTimeStamp=intervalSonetLine15minTimeStamp, ntpSrvCurrentConditionType=ntpSrvCurrentConditionType, teUnnumLinkOtnDataTeLinkId=teUnnumLinkOtnDataTeLinkId, deployProvShelfDefaultsBand=deployProvShelfDefaultsBand, FspR7YesNo=FspR7YesNo, opticalIfConfigCapTransmitChannel=opticalIfConfigCapTransmitChannel, deployProvPathElementOtnCapEntry=deployProvPathElementOtnCapEntry, ethernetConfigEntry=ethernetConfigEntry, thresholdFarEndPhysPerfCapOpticalInputPwrHigh=thresholdFarEndPhysPerfCapOpticalInputPwrHigh, crsConnWdmDataChannelSpacing=crsConnWdmDataChannelSpacing, deployProvIfTraceTransmitSonetSection=deployProvIfTraceTransmitSonetSection, tunnelWdmConfigRestPathsNoProv=tunnelWdmConfigRestPathsNoProv, thresholdSonetSectSESHighThres1day=thresholdSonetSectSESHighThres1day, deployProvControlPlaneOtnDefaultsNodeNameSyntax=deployProvControlPlaneOtnDefaultsNodeNameSyntax, f7eqpR6cu=f7eqpR6cu)
mibBuilder.exportSymbols("FspR7-MIB", farEndIfDiagnosticsEntry=farEndIfDiagnosticsEntry, intervalPhysPerfOscPwr1weekNumber=intervalPhysPerfOscPwr1weekNumber, deployProvApsWorkingAid=deployProvApsWorkingAid, FspR7PreferredFacilityType=FspR7PreferredFacilityType, intervalDefectSeconds1dayValidFlag=intervalDefectSeconds1dayValidFlag, alarmAutoShutdown=alarmAutoShutdown, eRoadmConfigCapOffset=eRoadmConfigCapOffset, opticalIfConfigLaserOffDelayFunction=opticalIfConfigLaserOffDelayFunction, deployProvPathElementEthLifIp=deployProvPathElementEthLifIp, deployProvTunnelEthDefaultsCbsRcv=deployProvTunnelEthDefaultsCbsRcv, changeServiceDeployProvIfCapTraceTransmitSonetSection=changeServiceDeployProvIfCapTraceTransmitSonetSection, thresholdOduTcmAESHighThres1day=thresholdOduTcmAESHighThres1day, thresholdSonetLoPathSESHighThres1day=thresholdSonetLoPathSESHighThres1day, intervalFarEndPhysPerfOpticalOutputPwr1weekTimeStamp=intervalFarEndPhysPerfOpticalOutputPwr1weekTimeStamp, thresholdPhysConvCombinedTable=thresholdPhysConvCombinedTable, deployProvIfCapDuplex=deployProvIfCapDuplex, deployProvTifInputDefaultsForceDestroy=deployProvTifInputDefaultsForceDestroy, deployProvLogicalCpIfCapHelloInterval=deployProvLogicalCpIfCapHelloInterval, transientThres1DayExceededFecUBE=transientThres1DayExceededFecUBE, intervalGfpfr15minGoodFrames=intervalGfpfr15minGoodFrames, changeServiceDeployProvIfTcmCLevel=changeServiceDeployProvIfTcmCLevel, currentDiagnosticsPsuOutputPower=currentDiagnosticsPsuOutputPower, f7OC48=f7OC48, ntpServerSourceIp=ntpServerSourceIp, deployProvTunnelEthConnectionDirection=deployProvTunnelEthConnectionDirection, currentEthRx3HS1dayOversizedFramesRcv=currentEthRx3HS1dayOversizedFramesRcv, deployProvVchChannelCir=deployProvVchChannelCir, currentSonetHoPath1dayEntry=currentSonetHoPath1dayEntry, intraNeConnectionsEntry=intraNeConnectionsEntry, tunnelWdmConfigAlias=tunnelWdmConfigAlias)
