#
# PySNMP MIB module RADLAN-vlan-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/radlan/RADLAN-vlan-MIB
# Produced by pysmi-1.1.12 at Tue Jun 25 14:16:20 2024
# On host fv-az837-278 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
dot1qVlanIndex, PortList, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "PortList", "VlanIndex")
rndErrorDesc, rndErrorSeverity, rnd = mibBuilder.importSymbols("RADLAN-MIB", "rndErrorDesc", "rndErrorSeverity", "rnd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, TimeTicks, ModuleIdentity, ObjectIdentity, MibIdentifier, Counter32, Integer32, iso, Counter64, IpAddress, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Counter32", "Integer32", "iso", "Counter64", "IpAddress", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
DisplayString, = mibBuilder.importSymbols("SNMPv2-TC-v1", "DisplayString")
vlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 48))
vlan.setRevisions(('2004-04-19 00:00',))
if mibBuilder.loadTexts: vlan.setLastUpdated('200404190000Z')
if mibBuilder.loadTexts: vlan.setOrganization('Radlan Computer Communications Ltd.')
vlanMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMibVersion.setStatus('current')
vlanMaxTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxTableNumber.setStatus('current')
vlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 21), )
if mibBuilder.loadTexts: vlanNameTable.setStatus('current')
vlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 21, 1), ).setIndexNames((0, "RADLAN-vlan-MIB", "vlanNameName"))
if mibBuilder.loadTexts: vlanNameEntry.setStatus('current')
vlanNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 21, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNameName.setStatus('current')
vlanNameTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNameTag.setStatus('current')
vlanNameIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNameIfIndex.setStatus('current')
vlanPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 22), )
if mibBuilder.loadTexts: vlanPortModeTable.setStatus('current')
vlanPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPortModeEntry.setStatus('current')
vlanPortModeState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 22, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortModeState.setStatus('current')
vlanSendUnknownToAllPorts = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 27), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSendUnknownToAllPorts.setStatus('current')
vlanDefaultSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanDefaultSupported.setStatus('current')
vlanDot1vSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanDot1vSupported.setStatus('current')
vlanDefaultEnabled = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultEnabled.setStatus('current')
vlanSpecialTagTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 33), )
if mibBuilder.loadTexts: vlanSpecialTagTable.setStatus('current')
vlanSpecialTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 33, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanSpecialTagEntry.setStatus('current')
vlanSpecialTagVID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 33, 1, 1), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpecialTagVID.setStatus('current')
vlanSpecialTagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 33, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpecialTagStatus.setStatus('current')
vlanSpecialTagCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 34), )
if mibBuilder.loadTexts: vlanSpecialTagCurrentTable.setStatus('current')
vlanSpecialTagCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 34, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanSpecialTagCurrentEntry.setStatus('current')
vlanSpecialTagCurrentVID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 34, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpecialTagCurrentVID.setStatus('current')
vlanSpecialTagCurrentReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 34, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpecialTagCurrentReserved.setStatus('current')
vlanSpecialTagCurrentActive = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 34, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpecialTagCurrentActive.setStatus('current')
vlanPrivateEdgeSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeSupported.setStatus('current')
vlanPrivateEdgeVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeVersion.setStatus('current')
vlanPrivateEdgeTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 37), )
if mibBuilder.loadTexts: vlanPrivateEdgeTable.setStatus('current')
vlanPrivateEdgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 37, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPrivateEdgeEntry.setStatus('current')
vlanPrivateEdgeUplink = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeUplink.setStatus('current')
vlanPrivateEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 37, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeStatus.setStatus('current')
vlanDynamicVlanSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanDynamicVlanSupported.setStatus('current')
vlanDynamicVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 39), )
if mibBuilder.loadTexts: vlanDynamicVlanTable.setStatus('current')
vlanDynamicVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 39, 1), ).setIndexNames((0, "RADLAN-vlan-MIB", "vlanDynamicVlanMacAddress"))
if mibBuilder.loadTexts: vlanDynamicVlanEntry.setStatus('current')
vlanDynamicVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 39, 1, 1), MacAddress())
if mibBuilder.loadTexts: vlanDynamicVlanMacAddress.setStatus('current')
vlanDynamicVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 39, 1, 2), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDynamicVlanTag.setStatus('current')
vlanDynamicVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 39, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDynamicVlanStatus.setStatus('current')
vlanPortModeExtTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 40), )
if mibBuilder.loadTexts: vlanPortModeExtTable.setStatus('current')
vlanPortModeExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 40, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPortModeExtEntry.setStatus('current')
vlanPortModeExtState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 40, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortModeExtState.setStatus('current')
vlanPortModeExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 40, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortModeExtStatus.setStatus('current')
vlanPrivateSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateSupported.setStatus('current')
vlanPrivateTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 42), )
if mibBuilder.loadTexts: vlanPrivateTable.setStatus('current')
vlanPrivateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 42, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanPrivateEntry.setStatus('current')
vlanPrivateIsolatedVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 42, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateIsolatedVlanTag.setStatus('current')
vlanPrivateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 42, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateStatus.setStatus('current')
vlanPrivateCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 43), )
if mibBuilder.loadTexts: vlanPrivateCommunityTable.setStatus('current')
vlanPrivateCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 43, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "RADLAN-vlan-MIB", "vlanPrivateCommunityVlanTag"))
if mibBuilder.loadTexts: vlanPrivateCommunityEntry.setStatus('current')
vlanPrivateCommunityVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 43, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanPrivateCommunityVlanTag.setStatus('current')
vlanPrivateCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 43, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateCommunityStatus.setStatus('current')
vlanMulticastTvTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 44), )
if mibBuilder.loadTexts: vlanMulticastTvTable.setStatus('current')
vlanMulticastTvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 44, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanMulticastTvEntry.setStatus('current')
vlanMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 44, 1, 1), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMulticastTvVID.setStatus('current')
vlanMulticastTvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 44, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMulticastTvStatus.setStatus('current')
vlanMacBaseVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 45), )
if mibBuilder.loadTexts: vlanMacBaseVlanGroupTable.setStatus('current')
vlanMacBaseVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 45, 1), ).setIndexNames((0, "RADLAN-vlan-MIB", "vlanMacBaseVlanMacAddress"), (0, "RADLAN-vlan-MIB", "vlanMacBaseVlanMacMask"))
if mibBuilder.loadTexts: vlanMacBaseVlanGroupEntry.setStatus('current')
vlanMacBaseVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 45, 1, 1), MacAddress())
if mibBuilder.loadTexts: vlanMacBaseVlanMacAddress.setStatus('current')
vlanMacBaseVlanMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 45, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 48)))
if mibBuilder.loadTexts: vlanMacBaseVlanMacMask.setStatus('current')
vlanMacBaseVlanGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 45, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanGroupId.setStatus('current')
vlanMacBaseVlanGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 45, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanGroupRowStatus.setStatus('current')
vlanMacBaseVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 46), )
if mibBuilder.loadTexts: vlanMacBaseVlanPortTable.setStatus('current')
vlanMacBaseVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 46, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "RADLAN-vlan-MIB", "vlanMacBaseVlanPortGroupId"))
if mibBuilder.loadTexts: vlanMacBaseVlanPortEntry.setStatus('current')
vlanMacBaseVlanPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vlanMacBaseVlanPortGroupId.setStatus('current')
vlanMacBaseVlanPortGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 46, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanPortGroupVid.setStatus('current')
vlanMacBaseVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 46, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanPortRowStatus.setStatus('current')
vlanPrivateEdgeGroupTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 47), )
if mibBuilder.loadTexts: vlanPrivateEdgeGroupTable.setStatus('current')
vlanPrivateEdgeGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 47, 1), ).setIndexNames((0, "RADLAN-vlan-MIB", "vlanPrivateEdgeGroupSource"))
if mibBuilder.loadTexts: vlanPrivateEdgeGroupEntry.setStatus('current')
vlanPrivateEdgeGroupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 47, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupSource.setStatus('current')
vlanPrivateEdgeGroupUplink = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 47, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupUplink.setStatus('current')
vlanPrivateEdgeGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 47, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupStatus.setStatus('current')
vlanPrivateEdgeGroupIfIndexTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 48), )
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexTable.setStatus('current')
vlanPrivateEdgeGroupIfIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 48, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexEntry.setStatus('current')
vlanPrivateEdgeGroupIfIndexID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 48, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexID.setStatus('current')
vlanPrivateEdgeGroupIfIndexDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 48, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexDomainID.setStatus('current')
vlanSubnetRangeTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 49), )
if mibBuilder.loadTexts: vlanSubnetRangeTable.setStatus('current')
vlanSubnetRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 49, 1), ).setIndexNames((0, "RADLAN-vlan-MIB", "vlanSubnetRangeAddr"), (0, "RADLAN-vlan-MIB", "vlanSubnetRangeMask"))
if mibBuilder.loadTexts: vlanSubnetRangeEntry.setStatus('current')
vlanSubnetRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 49, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSubnetRangeAddr.setStatus('current')
vlanSubnetRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 49, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSubnetRangeMask.setStatus('current')
vlanSubnetRangeGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 49, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetRangeGroupId.setStatus('current')
vlanSubnetRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 49, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetRangeRowStatus.setStatus('current')
vlanSubnetPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 50), )
if mibBuilder.loadTexts: vlanSubnetPortTable.setStatus('current')
vlanSubnetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 50, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "RADLAN-vlan-MIB", "vlanSubnetPortGroupId"))
if mibBuilder.loadTexts: vlanSubnetPortEntry.setStatus('current')
vlanSubnetPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vlanSubnetPortGroupId.setStatus('current')
vlanSubnetPortGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 50, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetPortGroupVid.setStatus('current')
vlanSubnetPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 50, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetPortRowStatus.setStatus('current')
vlanTriplePlayTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 51), )
if mibBuilder.loadTexts: vlanTriplePlayTable.setStatus('current')
vlanTriplePlayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 51, 1), ).setIndexNames((0, "RADLAN-vlan-MIB", "vlanTriplePlayInnerVID"))
if mibBuilder.loadTexts: vlanTriplePlayEntry.setStatus('current')
vlanTriplePlayInnerVID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 51, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanTriplePlayInnerVID.setStatus('current')
vlanTriplePlayMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 51, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvVID.setStatus('current')
vlanTriplePlayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 51, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTriplePlayRowStatus.setStatus('current')
vlanTriplePlayMulticastTvTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 52), )
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvTable.setStatus('current')
vlanTriplePlayMulticatTvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 52, 1), ).setIndexNames((0, "RADLAN-vlan-MIB", "vlanTriplePlayMulticastTvMulticastTvVID"))
if mibBuilder.loadTexts: vlanTriplePlayMulticatTvEntry.setStatus('current')
vlanTriplePlayMulticastTvMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 52, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvMulticastTvVID.setStatus('current')
vlanTriplePlayMulticastTvMulticastTvPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 52, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvMulticastTvPortList.setStatus('current')
mibBuilder.exportSymbols("RADLAN-vlan-MIB", vlanDynamicVlanMacAddress=vlanDynamicVlanMacAddress, vlanMulticastTvEntry=vlanMulticastTvEntry, vlan=vlan, vlanPortModeExtStatus=vlanPortModeExtStatus, vlanMacBaseVlanPortTable=vlanMacBaseVlanPortTable, vlanSubnetRangeAddr=vlanSubnetRangeAddr, vlanPrivateEdgeGroupStatus=vlanPrivateEdgeGroupStatus, vlanSubnetRangeEntry=vlanSubnetRangeEntry, vlanPrivateSupported=vlanPrivateSupported, vlanPrivateEdgeSupported=vlanPrivateEdgeSupported, vlanMaxTableNumber=vlanMaxTableNumber, vlanSubnetPortTable=vlanSubnetPortTable, vlanSubnetPortGroupVid=vlanSubnetPortGroupVid, vlanPrivateTable=vlanPrivateTable, vlanDynamicVlanSupported=vlanDynamicVlanSupported, vlanDefaultSupported=vlanDefaultSupported, vlanMacBaseVlanPortRowStatus=vlanMacBaseVlanPortRowStatus, vlanSubnetPortGroupId=vlanSubnetPortGroupId, vlanPortModeExtEntry=vlanPortModeExtEntry, vlanPrivateCommunityStatus=vlanPrivateCommunityStatus, vlanSubnetRangeTable=vlanSubnetRangeTable, vlanTriplePlayTable=vlanTriplePlayTable, vlanMulticastTvStatus=vlanMulticastTvStatus, vlanPrivateEdgeGroupSource=vlanPrivateEdgeGroupSource, vlanDefaultEnabled=vlanDefaultEnabled, PYSNMP_MODULE_ID=vlan, vlanNameIfIndex=vlanNameIfIndex, vlanSpecialTagCurrentEntry=vlanSpecialTagCurrentEntry, vlanTriplePlayInnerVID=vlanTriplePlayInnerVID, vlanPrivateCommunityVlanTag=vlanPrivateCommunityVlanTag, vlanDynamicVlanTable=vlanDynamicVlanTable, vlanPrivateEdgeTable=vlanPrivateEdgeTable, vlanSpecialTagCurrentTable=vlanSpecialTagCurrentTable, vlanSubnetRangeMask=vlanSubnetRangeMask, vlanSubnetRangeRowStatus=vlanSubnetRangeRowStatus, vlanNameName=vlanNameName, vlanMacBaseVlanGroupTable=vlanMacBaseVlanGroupTable, vlanSubnetRangeGroupId=vlanSubnetRangeGroupId, vlanPrivateStatus=vlanPrivateStatus, vlanDynamicVlanTag=vlanDynamicVlanTag, vlanTriplePlayMulticastTvTable=vlanTriplePlayMulticastTvTable, vlanSpecialTagVID=vlanSpecialTagVID, vlanPrivateEdgeGroupIfIndexEntry=vlanPrivateEdgeGroupIfIndexEntry, vlanMacBaseVlanPortEntry=vlanMacBaseVlanPortEntry, vlanPrivateIsolatedVlanTag=vlanPrivateIsolatedVlanTag, vlanPrivateEdgeVersion=vlanPrivateEdgeVersion, vlanSpecialTagTable=vlanSpecialTagTable, vlanPortModeExtState=vlanPortModeExtState, vlanPortModeState=vlanPortModeState, vlanSpecialTagEntry=vlanSpecialTagEntry, vlanTriplePlayMulticastTvMulticastTvPortList=vlanTriplePlayMulticastTvMulticastTvPortList, vlanSpecialTagCurrentReserved=vlanSpecialTagCurrentReserved, vlanNameTag=vlanNameTag, vlanMacBaseVlanPortGroupVid=vlanMacBaseVlanPortGroupVid, vlanDynamicVlanEntry=vlanDynamicVlanEntry, vlanSendUnknownToAllPorts=vlanSendUnknownToAllPorts, vlanPortModeEntry=vlanPortModeEntry, vlanNameTable=vlanNameTable, vlanPrivateEdgeUplink=vlanPrivateEdgeUplink, vlanNameEntry=vlanNameEntry, vlanSubnetPortEntry=vlanSubnetPortEntry, vlanMulticastTvVID=vlanMulticastTvVID, vlanPrivateEdgeGroupUplink=vlanPrivateEdgeGroupUplink, vlanPrivateEdgeGroupIfIndexTable=vlanPrivateEdgeGroupIfIndexTable, vlanPrivateEdgeGroupEntry=vlanPrivateEdgeGroupEntry, vlanDynamicVlanStatus=vlanDynamicVlanStatus, vlanPortModeExtTable=vlanPortModeExtTable, vlanPrivateCommunityEntry=vlanPrivateCommunityEntry, vlanMacBaseVlanPortGroupId=vlanMacBaseVlanPortGroupId, vlanPrivateEdgeGroupIfIndexDomainID=vlanPrivateEdgeGroupIfIndexDomainID, vlanMulticastTvTable=vlanMulticastTvTable, vlanTriplePlayMulticastTvMulticastTvVID=vlanTriplePlayMulticastTvMulticastTvVID, vlanTriplePlayMulticatTvEntry=vlanTriplePlayMulticatTvEntry, vlanSpecialTagStatus=vlanSpecialTagStatus, vlanMacBaseVlanGroupId=vlanMacBaseVlanGroupId, vlanTriplePlayRowStatus=vlanTriplePlayRowStatus, vlanSpecialTagCurrentVID=vlanSpecialTagCurrentVID, vlanPortModeTable=vlanPortModeTable, vlanMacBaseVlanGroupEntry=vlanMacBaseVlanGroupEntry, vlanMacBaseVlanMacAddress=vlanMacBaseVlanMacAddress, vlanDot1vSupported=vlanDot1vSupported, vlanPrivateEntry=vlanPrivateEntry, vlanSpecialTagCurrentActive=vlanSpecialTagCurrentActive, vlanTriplePlayEntry=vlanTriplePlayEntry, vlanTriplePlayMulticastTvVID=vlanTriplePlayMulticastTvVID, vlanMibVersion=vlanMibVersion, vlanMacBaseVlanGroupRowStatus=vlanMacBaseVlanGroupRowStatus, vlanSubnetPortRowStatus=vlanSubnetPortRowStatus, vlanPrivateEdgeGroupIfIndexID=vlanPrivateEdgeGroupIfIndexID, vlanMacBaseVlanMacMask=vlanMacBaseVlanMacMask, vlanPrivateEdgeStatus=vlanPrivateEdgeStatus, vlanPrivateEdgeGroupTable=vlanPrivateEdgeGroupTable, vlanPrivateCommunityTable=vlanPrivateCommunityTable, vlanPrivateEdgeEntry=vlanPrivateEdgeEntry)
