#
# PySNMP MIB module MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/citrix/SDX-MIB-SMIV2-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:40:55 2024
# On host fv-az1530-906 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, Bits, Counter32, MibIdentifier, iso, Unsigned32, NotificationType, enterprises, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Bits", "Counter32", "MibIdentifier", "iso", "Unsigned32", "NotificationType", "enterprises", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Gauge32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netScaler = ModuleIdentity((1, 3, 6, 1, 4, 1, 5951))
if mibBuilder.loadTexts: netScaler.setLastUpdated('201312050000Z')
if mibBuilder.loadTexts: netScaler.setOrganization('Citrix Systems, Inc.')
sdxRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 6))
sdxEventGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 6, 1))
systemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 6, 2))
systemPlatform = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPlatform.setStatus('current')
systemProduct = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProduct.setStatus('current')
systemBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBuildNumber.setStatus('current')
systemSvmIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSvmIPAddressType.setStatus('current')
systemSvmIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSvmIPAddress.setStatus('current')
systemXenIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemXenIPAddressType.setStatus('current')
systemXenIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemXenIPAddress.setStatus('current')
systemNetmaskType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNetmaskType.setStatus('current')
systemNetmask = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNetmask.setStatus('current')
systemGatewayType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemGatewayType.setStatus('current')
systemGateway = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemGateway.setStatus('current')
systemNetworkInterface = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNetworkInterface.setStatus('current')
systemDns = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDns.setStatus('current')
systemSysId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSysId.setStatus('current')
systemSerial = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSerial.setStatus('current')
systemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCurrentTime.setStatus('current')
systemUptime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUptime.setStatus('current')
systemBiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBiosVersion.setStatus('current')
systemMaxThroughput = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMaxThroughput.setStatus('current')
systemAvailableThroughput = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAvailableThroughput.setStatus('current')
systemHostId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHostId.setStatus('current')
systemCustomID = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCustomID.setStatus('current')
sysHealthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000))
hardwareResourceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1), )
if mibBuilder.loadTexts: hardwareResourceTable.setStatus('current')
hardwareResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1), ).setIndexNames((0, "MIB", "hardwareResourceName"), (0, "MIB", "hardwareResourceHostIPAddressType"), (0, "MIB", "hardwareResourceHostIPAddress"))
if mibBuilder.loadTexts: hardwareResourceEntry.setStatus('current')
hardwareResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceName.setStatus('current')
hardwareResourceHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceHostIPAddressType.setStatus('current')
hardwareResourceHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceHostIPAddress.setStatus('current')
hardwareResourceCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceCurrentValue.setStatus('current')
hardwareResourceExpectedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceExpectedValue.setStatus('current')
hardwareResourceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceUnit.setStatus('current')
hardwareResourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceStatus.setStatus('current')
softwareResourceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2), )
if mibBuilder.loadTexts: softwareResourceTable.setStatus('current')
softwareResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1), ).setIndexNames((0, "MIB", "softwareResourceName"), (0, "MIB", "softwareResourceHostIPAddressType"), (0, "MIB", "softwareResourceHostIPAddress"))
if mibBuilder.loadTexts: softwareResourceEntry.setStatus('current')
softwareResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceName.setStatus('current')
softwareResourceHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceHostIPAddressType.setStatus('current')
softwareResourceHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceHostIPAddress.setStatus('current')
softwareResourceCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceCurrentValue.setStatus('current')
softwareResourceExpectedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceExpectedValue.setStatus('current')
softwareResourceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceUnit.setStatus('current')
softwareResourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceStatus.setStatus('current')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1), ).setIndexNames((0, "MIB", "diskName"), (0, "MIB", "diskHostIPAddressType"), (0, "MIB", "diskHostIPAddress"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
diskName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskName.setStatus('current')
diskHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskHostIPAddressType.setStatus('current')
diskHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskHostIPAddress.setStatus('current')
diskTransactionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTransactionRate.setStatus('current')
diskBlockReadRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskBlockReadRate.setStatus('current')
diskBlockWriteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskBlockWriteRate.setStatus('current')
diskTotalBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalBlocksRead.setStatus('current')
diskTotalBlocksWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalBlocksWritten.setStatus('current')
diskUtilized = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskUtilized.setStatus('current')
diskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSize.setStatus('current')
diskBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskBayNumber.setStatus('current')
srTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4), )
if mibBuilder.loadTexts: srTable.setStatus('current')
srEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1), ).setIndexNames((0, "MIB", "srName"), (0, "MIB", "srBayNumber"), (0, "MIB", "srHostIPAddressType"), (0, "MIB", "srHostIPAddress"))
if mibBuilder.loadTexts: srEntry.setStatus('current')
srName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srName.setStatus('current')
srBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srBayNumber.setStatus('current')
srHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srHostIPAddressType.setStatus('current')
srHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srHostIPAddress.setStatus('current')
srUtilized = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srUtilized.setStatus('current')
srSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srSize.setStatus('current')
srStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srStatus.setStatus('current')
interfaceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5), )
if mibBuilder.loadTexts: interfaceTable.setStatus('current')
interfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1), ).setIndexNames((0, "MIB", "interfaceMappedPort"), (0, "MIB", "interfaceHostIPAddressType"), (0, "MIB", "interfaceHostIPAddress"))
if mibBuilder.loadTexts: interfaceEntry.setStatus('current')
interfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacePort.setStatus('current')
interfaceHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceHostIPAddressType.setStatus('current')
interfaceHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceHostIPAddress.setStatus('current')
interfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceState.setStatus('current')
interfaceRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxPackets.setStatus('current')
interfaceTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxPackets.setStatus('current')
interfaceRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxBytes.setStatus('current')
interfaceTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxBytes.setStatus('current')
interfaceRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxErrors.setStatus('current')
interfaceTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxErrors.setStatus('current')
interfaceVfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceVfTotal.setStatus('current')
interfaceVfAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceVfAssigned.setStatus('current')
interfaceMappedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceMappedPort.setStatus('current')
deviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 6, 3))
xenTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1), )
if mibBuilder.loadTexts: xenTable.setStatus('current')
xenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1), ).setIndexNames((0, "MIB", "xenIpAddressType"), (0, "MIB", "xenIpAddress"))
if mibBuilder.loadTexts: xenEntry.setStatus('current')
xenIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenIpAddressType.setStatus('current')
xenIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenIpAddress.setStatus('current')
xenHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenHostname.setStatus('current')
xenDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenDescription.setStatus('current')
xenVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenVersion.setStatus('current')
xenUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenUuid.setStatus('current')
xenNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenNumberOfCPU.setStatus('current')
xenCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenCpuUsage.setStatus('current')
xenMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenMemoryTotal.setStatus('current')
xenMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenMemoryFree.setStatus('current')
xenMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenMemoryUsage.setStatus('current')
xenTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenTx.setStatus('current')
xenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenRx.setStatus('current')
xenUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenUptime.setStatus('current')
xenSslCoresTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenSslCoresTotal.setStatus('current')
xenIscsiIQN = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenIscsiIQN.setStatus('current')
xenEdition = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenEdition.setStatus('current')
xenExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenExpiry.setStatus('current')
xenProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenProductCode.setStatus('current')
xenSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenSerialNumber.setStatus('current')
xenVersionLong = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenVersionLong.setStatus('current')
xenVersionShort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenVersionShort.setStatus('current')
xenBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenBuildNumber.setStatus('current')
xenBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenBuildDate.setStatus('current')
netscalerTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2), )
if mibBuilder.loadTexts: netscalerTable.setStatus('current')
netscalerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1), ).setIndexNames((0, "MIB", "nsIpAddressType"), (0, "MIB", "nsIpAddress"), (0, "MIB", "nsHostIPAddressType"), (0, "MIB", "nsHostIPAddress"))
if mibBuilder.loadTexts: netscalerEntry.setStatus('current')
nsIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpAddressType.setStatus('current')
nsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpAddress.setStatus('current')
nsHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostIPAddressType.setStatus('current')
nsHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostIPAddress.setStatus('current')
nsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsProfileName.setStatus('current')
nsName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsName.setStatus('current')
nsNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNetmaskType.setStatus('current')
nsNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNetmask.setStatus('current')
nsGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsGatewayType.setStatus('current')
nsGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsGateway.setStatus('current')
nsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostname.setStatus('current')
nsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsDescription.setStatus('current')
nsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVersion.setStatus('current')
nsUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUuid.setStatus('current')
nsInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInstanceState.setStatus('current')
nsVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVirtualFunctions.setStatus('current')
nsSslVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSslVirtualFunctions.setStatus('current')
nsVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmState.setStatus('current')
nsNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfCPU.setStatus('current')
nsVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmMemoryTotal.setStatus('current')
nsUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUptime.setStatus('current')
nsNumberOfSSLCores = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfSSLCores.setStatus('current')
nsCpuCoreMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCpuCoreMgmt.setStatus('current')
nsCpuCorePE = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCpuCorePE.setStatus('current')
nsVmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmDescription.setStatus('current')
nsThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsThroughput.setStatus('current')
nsNumberOfCores = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfCores.setStatus('current')
nsNsCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsCPUUsage.setStatus('current')
nsNsMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsMemoryUsage.setStatus('current')
nsNsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsTx.setStatus('current')
nsNsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsRx.setStatus('current')
nsHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHttpReq.setStatus('current')
nsUpsince = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUpsince.setStatus('current')
nsLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsLicense.setStatus('current')
nsHaMasterState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaMasterState.setStatus('current')
nsHaIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 42), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaIPAddressType.setStatus('current')
nsHaIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 43), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaIPAddress.setStatus('current')
nsNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNodeState.setStatus('current')
nsHaSync = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaSync.setStatus('current')
nsPps = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPps.setStatus('current')
nsNumberOfSslCoresUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfSslCoresUp.setStatus('current')
nsIfOby1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfOby1.setStatus('current')
nsIf0by2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIf0by2.setStatus('current')
nsNsVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsVLANId.setStatus('current')
nsNsVLANTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsVLANTagged.setStatus('current')
nsVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVlanType.setStatus('current')
cloudBridgeInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3), )
if mibBuilder.loadTexts: cloudBridgeInstanceTable.setStatus('current')
cloudBridgeInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1), ).setIndexNames((0, "MIB", "cbIpAddressType"), (0, "MIB", "cbIpAddress"), (0, "MIB", "cbHostIPAddressType"), (0, "MIB", "cbHostIPAddress"))
if mibBuilder.loadTexts: cloudBridgeInstanceEntry.setStatus('current')
cbIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbIpAddressType.setStatus('current')
cbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbIpAddress.setStatus('current')
cbHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostIPAddressType.setStatus('current')
cbHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostIPAddress.setStatus('current')
cbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbProfileName.setStatus('current')
cbName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbName.setStatus('current')
cbNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetmaskType.setStatus('current')
cbNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetmask.setStatus('current')
cbGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbGatewayType.setStatus('current')
cbGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbGateway.setStatus('current')
cbHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostname.setStatus('current')
cbDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbDescription.setStatus('current')
cbVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVersion.setStatus('current')
cbInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbInstanceState.setStatus('current')
cbUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbUuid.setStatus('current')
cbVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVirtualFunctions.setStatus('current')
cbVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmState.setStatus('current')
cbNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNumberOfCPU.setStatus('current')
cbVmCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmCPUUsage.setStatus('current')
cbVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryTotal.setStatus('current')
cbVmMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryFree.setStatus('current')
cbVmMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryUsage.setStatus('current')
cbUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbUptime.setStatus('current')
cbDiskAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbDiskAllocation.setStatus('current')
cbAPAIPADDRESSType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 47), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAIPADDRESSType.setStatus('current')
cbAPAIPADDRESS = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 48), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAIPADDRESS.setStatus('current')
cbAPANetMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 49), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPANetMaskType.setStatus('current')
cbAPANetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 50), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPANetMask.setStatus('current')
cbAPAGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 51), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAGatewayType.setStatus('current')
cbAPAGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 52), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAGateway.setStatus('current')
cbPluginIPADDRESSType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 53), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbPluginIPADDRESSType.setStatus('current')
cbPluginIPADDRESS = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 54), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbPluginIPADDRESS.setStatus('current')
cbMgmtIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 57), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbMgmtIPAddressType.setStatus('current')
cbMgmtIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 58), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbMgmtIPAddress.setStatus('current')
cloudBridgeAcceleratorTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4), )
if mibBuilder.loadTexts: cloudBridgeAcceleratorTable.setStatus('current')
cloudBridgeAcceleratorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1), ).setIndexNames((0, "MIB", "cbAcceleratorIpAddressType"), (0, "MIB", "cbAcceleratorIpAddress"), (0, "MIB", "cbAcceleratorHostIPAddressType"), (0, "MIB", "cbAcceleratorHostIPAddress"))
if mibBuilder.loadTexts: cloudBridgeAcceleratorEntry.setStatus('current')
cbAcceleratorIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpAddressType.setStatus('current')
cbAcceleratorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpAddress.setStatus('current')
cbAcceleratorHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostIPAddressType.setStatus('current')
cbAcceleratorHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostIPAddress.setStatus('current')
cbAcceleratorProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorProfileName.setStatus('current')
cbAcceleratorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorName.setStatus('current')
cbAcceleratorNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNetmaskType.setStatus('current')
cbAcceleratorNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNetmask.setStatus('current')
cbAcceleratorGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorGatewayType.setStatus('current')
cbAcceleratorGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorGateway.setStatus('current')
cbAcceleratorHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostname.setStatus('current')
cbAcceleratorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorDescription.setStatus('current')
cbAcceleratorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVersion.setStatus('current')
cbAcceleratorInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorInstanceState.setStatus('current')
cbAcceleratorUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorUuid.setStatus('current')
cbAcceleratorVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmState.setStatus('current')
cbAcceleratorNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNumberOfCPU.setStatus('current')
cbAcceleratorVmCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmCPUUsage.setStatus('current')
cbAcceleratorVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryTotal.setStatus('current')
cbAcceleratorVmMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryFree.setStatus('current')
cbAcceleratorVmMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryUsage.setStatus('current')
cbAcceleratorUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorUptime.setStatus('current')
cbAcceleratorIpList = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpList.setStatus('current')
cbAcceleratorMgmtIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 38), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddressType.setStatus('current')
cbAcceleratorMgmtIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 39), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddress.setStatus('current')
mibBuilder.exportSymbols("MIB", cbIpAddressType=cbIpAddressType, nsIfOby1=nsIfOby1, diskBayNumber=diskBayNumber, nsHaIPAddressType=nsHaIPAddressType, interfaceMappedPort=interfaceMappedPort, cbNumberOfCPU=cbNumberOfCPU, nsNsCPUUsage=nsNsCPUUsage, nsSslVirtualFunctions=nsSslVirtualFunctions, cbMgmtIPAddress=cbMgmtIPAddress, hardwareResourceExpectedValue=hardwareResourceExpectedValue, systemBuildNumber=systemBuildNumber, systemGroup=systemGroup, nsHostIPAddress=nsHostIPAddress, PYSNMP_MODULE_ID=netScaler, systemAvailableThroughput=systemAvailableThroughput, diskTotalBlocksWritten=diskTotalBlocksWritten, nsNetmask=nsNetmask, xenTable=xenTable, cbHostIPAddressType=cbHostIPAddressType, cbAcceleratorNetmask=cbAcceleratorNetmask, cbAcceleratorNumberOfCPU=cbAcceleratorNumberOfCPU, systemXenIPAddress=systemXenIPAddress, softwareResourceHostIPAddress=softwareResourceHostIPAddress, systemPlatform=systemPlatform, nsUpsince=nsUpsince, cbUuid=cbUuid, hardwareResourceTable=hardwareResourceTable, systemProduct=systemProduct, cloudBridgeInstanceEntry=cloudBridgeInstanceEntry, diskName=diskName, softwareResourceTable=softwareResourceTable, nsGateway=nsGateway, interfaceRxBytes=interfaceRxBytes, cbPluginIPADDRESS=cbPluginIPADDRESS, cbAcceleratorVmMemoryUsage=cbAcceleratorVmMemoryUsage, cbAcceleratorMgmtIPAddressType=cbAcceleratorMgmtIPAddressType, systemNetworkInterface=systemNetworkInterface, systemCustomID=systemCustomID, srBayNumber=srBayNumber, cbAcceleratorNetmaskType=cbAcceleratorNetmaskType, hardwareResourceHostIPAddress=hardwareResourceHostIPAddress, xenVersion=xenVersion, systemNetmaskType=systemNetmaskType, srHostIPAddressType=srHostIPAddressType, nsNodeState=nsNodeState, xenRx=xenRx, cbNetmaskType=cbNetmaskType, systemGatewayType=systemGatewayType, cbVirtualFunctions=cbVirtualFunctions, cloudBridgeInstanceTable=cloudBridgeInstanceTable, xenVersionLong=xenVersionLong, softwareResourceStatus=softwareResourceStatus, nsHaSync=nsHaSync, softwareResourceName=softwareResourceName, srName=srName, cbAcceleratorIpAddress=cbAcceleratorIpAddress, cbPluginIPADDRESSType=cbPluginIPADDRESSType, cbAcceleratorHostname=cbAcceleratorHostname, netscalerTable=netscalerTable, systemDns=systemDns, cbDescription=cbDescription, nsUptime=nsUptime, systemSysId=systemSysId, nsThroughput=nsThroughput, cbAcceleratorIpList=cbAcceleratorIpList, xenBuildDate=xenBuildDate, interfaceRxPackets=interfaceRxPackets, xenVersionShort=xenVersionShort, nsHaIPAddress=nsHaIPAddress, xenNumberOfCPU=xenNumberOfCPU, cloudBridgeAcceleratorEntry=cloudBridgeAcceleratorEntry, xenTx=xenTx, cbVmMemoryTotal=cbVmMemoryTotal, xenIpAddressType=xenIpAddressType, cloudBridgeAcceleratorTable=cloudBridgeAcceleratorTable, xenEntry=xenEntry, cbHostname=cbHostname, interfaceTxPackets=interfaceTxPackets, systemNetmask=systemNetmask, xenEdition=xenEdition, nsVmDescription=nsVmDescription, xenCpuUsage=xenCpuUsage, interfaceHostIPAddressType=interfaceHostIPAddressType, cbGatewayType=cbGatewayType, nsVlanType=nsVlanType, interfaceTxBytes=interfaceTxBytes, cbAcceleratorIpAddressType=cbAcceleratorIpAddressType, nsNsVLANTagged=nsNsVLANTagged, cbInstanceState=cbInstanceState, systemBiosVersion=systemBiosVersion, nsCpuCoreMgmt=nsCpuCoreMgmt, cbHostIPAddress=cbHostIPAddress, cbProfileName=cbProfileName, nsIf0by2=nsIf0by2, hardwareResourceName=hardwareResourceName, nsDescription=nsDescription, xenSerialNumber=xenSerialNumber, systemSerial=systemSerial, srStatus=srStatus, cbAcceleratorProfileName=cbAcceleratorProfileName, systemCurrentTime=systemCurrentTime, interfaceTable=interfaceTable, xenUuid=xenUuid, xenDescription=xenDescription, xenMemoryFree=xenMemoryFree, cbDiskAllocation=cbDiskAllocation, cbUptime=cbUptime, xenExpiry=xenExpiry, diskTotalBlocksRead=diskTotalBlocksRead, cbAcceleratorInstanceState=cbAcceleratorInstanceState, xenUptime=xenUptime, hardwareResourceStatus=hardwareResourceStatus, nsNetmaskType=nsNetmaskType, cbAcceleratorVmCPUUsage=cbAcceleratorVmCPUUsage, interfaceTxErrors=interfaceTxErrors, cbAPANetMask=cbAPANetMask, srSize=srSize, diskUtilized=diskUtilized, nsVirtualFunctions=nsVirtualFunctions, diskHostIPAddressType=diskHostIPAddressType, nsNsMemoryUsage=nsNsMemoryUsage, interfaceState=interfaceState, softwareResourceHostIPAddressType=softwareResourceHostIPAddressType, nsNumberOfSslCoresUp=nsNumberOfSslCoresUp, hardwareResourceUnit=hardwareResourceUnit, xenBuildNumber=xenBuildNumber, cbAPAIPADDRESS=cbAPAIPADDRESS, cbAcceleratorDescription=cbAcceleratorDescription, cbAcceleratorUptime=cbAcceleratorUptime, systemSvmIPAddress=systemSvmIPAddress, softwareResourceCurrentValue=softwareResourceCurrentValue, interfaceHostIPAddress=interfaceHostIPAddress, nsHostname=nsHostname, nsNsRx=nsNsRx, netScaler=netScaler, systemMaxThroughput=systemMaxThroughput, deviceGroup=deviceGroup, cbIpAddress=cbIpAddress, cbVersion=cbVersion, srHostIPAddress=srHostIPAddress, xenIpAddress=xenIpAddress, hardwareResourceCurrentValue=hardwareResourceCurrentValue, nsNumberOfCores=nsNumberOfCores, cbMgmtIPAddressType=cbMgmtIPAddressType, nsVersion=nsVersion, softwareResourceEntry=softwareResourceEntry, hardwareResourceEntry=hardwareResourceEntry, nsHttpReq=nsHttpReq, nsNumberOfCPU=nsNumberOfCPU, cbAcceleratorVmMemoryTotal=cbAcceleratorVmMemoryTotal, nsName=nsName, srEntry=srEntry, systemXenIPAddressType=systemXenIPAddressType, netscalerEntry=netscalerEntry, cbAcceleratorVmState=cbAcceleratorVmState, cbAcceleratorGatewayType=cbAcceleratorGatewayType, interfacePort=interfacePort, nsCpuCorePE=nsCpuCorePE, hardwareResourceHostIPAddressType=hardwareResourceHostIPAddressType, diskBlockReadRate=diskBlockReadRate, interfaceVfTotal=interfaceVfTotal, systemUptime=systemUptime, cbNetmask=cbNetmask, nsIpAddressType=nsIpAddressType, cbAPAIPADDRESSType=cbAPAIPADDRESSType, xenMemoryTotal=xenMemoryTotal, cbAcceleratorVmMemoryFree=cbAcceleratorVmMemoryFree, diskBlockWriteRate=diskBlockWriteRate, nsHostIPAddressType=nsHostIPAddressType, diskTable=diskTable, sdxRoot=sdxRoot, systemHostId=systemHostId, cbVmCPUUsage=cbVmCPUUsage, cbAcceleratorVersion=cbAcceleratorVersion, nsVmMemoryTotal=nsVmMemoryTotal, xenIscsiIQN=xenIscsiIQN, nsLicense=nsLicense, cbName=cbName, srUtilized=srUtilized, nsNsTx=nsNsTx, sysHealthGroup=sysHealthGroup, cbAcceleratorGateway=cbAcceleratorGateway, systemSvmIPAddressType=systemSvmIPAddressType, systemGateway=systemGateway, nsHaMasterState=nsHaMasterState, nsIpAddress=nsIpAddress, interfaceRxErrors=interfaceRxErrors, interfaceVfAssigned=interfaceVfAssigned, cbAcceleratorName=cbAcceleratorName, xenHostname=xenHostname, xenProductCode=xenProductCode, nsUuid=nsUuid, diskHostIPAddress=diskHostIPAddress, diskEntry=diskEntry, interfaceEntry=interfaceEntry, nsInstanceState=nsInstanceState, diskSize=diskSize, srTable=srTable, cbAPAGateway=cbAPAGateway, xenSslCoresTotal=xenSslCoresTotal, cbAcceleratorMgmtIPAddress=cbAcceleratorMgmtIPAddress, cbVmState=cbVmState, nsVmState=nsVmState, nsProfileName=nsProfileName, nsPps=nsPps, softwareResourceUnit=softwareResourceUnit, diskTransactionRate=diskTransactionRate, cbGateway=cbGateway, cbAcceleratorHostIPAddressType=cbAcceleratorHostIPAddressType, nsGatewayType=nsGatewayType, cbVmMemoryUsage=cbVmMemoryUsage, xenMemoryUsage=xenMemoryUsage, cbAcceleratorHostIPAddress=cbAcceleratorHostIPAddress, sdxEventGroup=sdxEventGroup, softwareResourceExpectedValue=softwareResourceExpectedValue, cbVmMemoryFree=cbVmMemoryFree, cbAPANetMaskType=cbAPANetMaskType, nsNsVLANId=nsNsVLANId, cbAcceleratorUuid=cbAcceleratorUuid, nsNumberOfSSLCores=nsNumberOfSSLCores, cbAPAGatewayType=cbAPAGatewayType)
