#
# PySNMP MIB module LIEBERT-GP-ENVIRONMENTAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/liebert/LIEBERT-GP-ENV-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 12:05:09 2024
# On host fv-az888-540 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
lgpEnvironmental, liebertEnvironmentalModuleReg = mibBuilder.importSymbols("LIEBERT-GP-REGISTRATION-MIB", "lgpEnvironmental", "liebertEnvironmentalModuleReg")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, TimeTicks, Gauge32, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, Counter32, IpAddress, MibIdentifier, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "TimeTicks", "Gauge32", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "Counter32", "IpAddress", "MibIdentifier", "Integer32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
liebertGlobalProductsEnvironmentalModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 1, 5, 1))
liebertGlobalProductsEnvironmentalModule.setRevisions(('2008-11-17 00:00', '2008-07-02 00:00', '2008-01-10 00:00', '2007-05-29 00:00', '2006-08-15 00:00', '2006-02-22 00:00',))
if mibBuilder.loadTexts: liebertGlobalProductsEnvironmentalModule.setLastUpdated('201507210000Z')
if mibBuilder.loadTexts: liebertGlobalProductsEnvironmentalModule.setOrganization('Liebert Corporation')
lgpEnvTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1))
if mibBuilder.loadTexts: lgpEnvTemperature.setStatus('current')
lgpEnvHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2))
if mibBuilder.loadTexts: lgpEnvHumidity.setStatus('current')
lgpEnvState = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3))
if mibBuilder.loadTexts: lgpEnvState.setStatus('current')
lgpEnvConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4))
if mibBuilder.loadTexts: lgpEnvConfig.setStatus('current')
lgpEnvControl = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5))
if mibBuilder.loadTexts: lgpEnvControl.setStatus('current')
lgpEnvStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6))
if mibBuilder.loadTexts: lgpEnvStatistics.setStatus('current')
lgpEnvPoints = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7))
if mibBuilder.loadTexts: lgpEnvPoints.setStatus('current')
lgpEnvUnits = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 8))
if mibBuilder.loadTexts: lgpEnvUnits.setStatus('current')
lgpEnvRemoteSensors = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 9))
if mibBuilder.loadTexts: lgpEnvRemoteSensors.setStatus('current')
lgpEnvTemperatureWellKnown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1))
if mibBuilder.loadTexts: lgpEnvTemperatureWellKnown.setStatus('current')
lgpEnvTemperatureFahrenheit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2))
if mibBuilder.loadTexts: lgpEnvTemperatureFahrenheit.setStatus('current')
lgpEnvTemperatureCelsius = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3))
if mibBuilder.loadTexts: lgpEnvTemperatureCelsius.setStatus('current')
lgpEnvTemperatureControlMode = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureControlMode.setStatus('current')
lgpEnvHumidityWellKnown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 1))
if mibBuilder.loadTexts: lgpEnvHumidityWellKnown.setStatus('current')
lgpEnvHumidityRelative = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2))
if mibBuilder.loadTexts: lgpEnvHumidityRelative.setStatus('current')
lgpEnvStateSystem = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateSystem.setStatus('current')
lgpEnvStateCooling = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateCooling.setStatus('current')
lgpEnvStateHeating = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateHeating.setStatus('current')
lgpEnvStateHumidifying = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateHumidifying.setStatus('current')
lgpEnvStateDehumidifying = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateDehumidifying.setStatus('current')
lgpEnvStateEconoCycle = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateEconoCycle.setStatus('current')
lgpEnvStateFan = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateFan.setStatus('current')
lgpEnvStateGeneralAlarmOutput = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateGeneralAlarmOutput.setStatus('current')
lgpEnvStateCoolingCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 9), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateCoolingCapacity.setStatus('current')
lgpEnvStateHeatingCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 10), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateHeatingCapacity.setStatus('current')
lgpEnvStateAudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateAudibleAlarm.setStatus('current')
lgpEnvStateCoolingUnits = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 12))
if mibBuilder.loadTexts: lgpEnvStateCoolingUnits.setStatus('current')
lgpEnvStateCoolingUnit1 = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateCoolingUnit1.setStatus('current')
lgpEnvStateCoolingUnit2 = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateCoolingUnit2.setStatus('current')
lgpEnvStateCoolingUnit3 = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateCoolingUnit3.setStatus('current')
lgpEnvStateCoolingUnit4 = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateCoolingUnit4.setStatus('current')
lgpEnvStateHeatingUnits = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 13))
if mibBuilder.loadTexts: lgpEnvStateHeatingUnits.setStatus('current')
lgpEnvStateHeatingUnit1 = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateHeatingUnit1.setStatus('current')
lgpEnvStateHeatingUnit2 = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateHeatingUnit2.setStatus('current')
lgpEnvStateHeatingUnit3 = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateHeatingUnit3.setStatus('current')
lgpEnvStateHeatingUnit4 = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateHeatingUnit4.setStatus('current')
lgpEnvStateOperatingReason = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("localUser", 2), ("alarm", 3), ("schedule", 4), ("remoteUser", 5), ("externalDevice", 6), ("localDisplay", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateOperatingReason.setStatus('current')
lgpEnvStateOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateOperatingMode.setStatus('current')
lgpEnvStateFanCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 16), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateFanCapacity.setStatus('current')
lgpEnvStateFreeCoolingCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 17), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateFreeCoolingCapacity.setStatus('current')
lgpEnvStateDehumidifyingCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 18), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateDehumidifyingCapacity.setStatus('current')
lgpEnvStateHumidifyingCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 19), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateHumidifyingCapacity.setStatus('current')
lgpEnvStateFreeCooling = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("start", 3), ("unavailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateFreeCooling.setStatus('current')
lgpEnvStateElectricHeater = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateElectricHeater.setStatus('current')
lgpEnvStateHotWater = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateHotWater.setStatus('current')
lgpEnvStateOperatingEfficiency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 23), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStateOperatingEfficiency.setStatus('current')
lgpEnvComponentStateTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 50), )
if mibBuilder.loadTexts: lgpEnvComponentStateTable.setStatus('current')
lgpEnvComponentStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 50, 1), ).setIndexNames((0, "LIEBERT-GP-ENVIRONMENTAL-MIB", "lgpEnvComponentStateIndex"))
if mibBuilder.loadTexts: lgpEnvComponentStateEntry.setStatus('current')
lgpEnvComponentStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 50, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpEnvComponentStateIndex.setStatus('current')
lgpEnvComponentStateDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 50, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvComponentStateDescr.setStatus('current')
lgpEnvComponentState = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 50, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-specified", 0), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvComponentState.setStatus('current')
lgpEnvValveTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 70), )
if mibBuilder.loadTexts: lgpEnvValveTable.setStatus('current')
lgpEnvValveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 70, 1), ).setIndexNames((0, "LIEBERT-GP-ENVIRONMENTAL-MIB", "lgpEnvValveIndex"))
if mibBuilder.loadTexts: lgpEnvValveEntry.setStatus('current')
lgpEnvValveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 70, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpEnvValveIndex.setStatus('current')
lgpEnvValveDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 70, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvValveDescr.setStatus('current')
lgpEnvValveState = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 70, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-specified", 0), ("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvValveState.setStatus('current')
lgpEnvValvePositionTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 3, 70, 1, 20), Unsigned32()).setUnits('.1 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvValvePositionTenths.setStatus('current')
lgpEnvConfigReheatLockout = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lockedOut", 1), ("notLockedOut", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigReheatLockout.setStatus('current')
lgpEnvConfigHumLockout = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lockedOut", 1), ("notLockedOut", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigHumLockout.setStatus('current')
lgpEnvConfigRestartDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigRestartDelay.setStatus('current')
lgpEnvConfigRemoteShutdown = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigRemoteShutdown.setStatus('current')
lgpEnvConfigCoolingServiceInterval = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 8), Unsigned32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigCoolingServiceInterval.setStatus('current')
lgpEnvConfigHumidifierServiceInterval = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 9), Unsigned32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigHumidifierServiceInterval.setStatus('current')
lgpEnvConfigFilterServiceInterval = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 10), Unsigned32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigFilterServiceInterval.setStatus('current')
lgpEnvConfigSleepModeDeadbandRangeDegC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 11), Integer32()).setUnits('.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigSleepModeDeadbandRangeDegC.setStatus('current')
lgpEnvConfigSleepModeDeadbandRangeDegF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 12), Integer32()).setUnits('.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigSleepModeDeadbandRangeDegF.setStatus('current')
lgpEnvConfigSupplyTempLowLimitDegF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 13), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigSupplyTempLowLimitDegF.setStatus('current')
lgpEnvConfigSupplyTempLowLimitDegC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 14), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigSupplyTempLowLimitDegC.setStatus('current')
lgpEnvConfigTemperatureIntegTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 15), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigTemperatureIntegTime.setStatus('current')
lgpEnvConfigLocalTemperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("degC", 1), ("degF", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigLocalTemperatureUnit.setStatus('current')
lgpEnvConfigSleepMode = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigSleepMode.setStatus('current')
lgpEnvConfigHumidityIntegTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 18), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigHumidityIntegTime.setStatus('current')
lgpEnvConfigFreecoolingDeltaDegF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 19), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigFreecoolingDeltaDegF.setStatus('current')
lgpEnvConfigFreecoolingDeltaDegC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 20), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigFreecoolingDeltaDegC.setStatus('current')
lgpEnvConfigSupplyTempLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigSupplyTempLowLimit.setStatus('current')
lgpEnvConfigSensorEventsStandard = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigSensorEventsStandard.setStatus('current')
lgpEnvConfigSensorEvents1 = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigSensorEvents1.setStatus('current')
lgpEnvConfigSleepModeDeadbandRange = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigSleepModeDeadbandRange.setStatus('current')
lgpEnvConfigAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigAutoConfiguration.setStatus('current')
lgpEnvConfigDeltaGlycolType = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("contact", 2), ("value", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigDeltaGlycolType.setStatus('current')
lgpEnvConfigChillWaterControl = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigChillWaterControl.setStatus('current')
lgpEnvConfigInfaredFlushRate = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 28), Unsigned32()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigInfaredFlushRate.setStatus('current')
lgpEnvConfigHumidityControl = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("relative", 1), ("compensated", 2), ("predictive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigHumidityControl.setStatus('current')
lgpEnvConfigCompressorLockout = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lockedOut", 1), ("notLockedOut", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigCompressorLockout.setStatus('current')
lgpEnvConfigReheatAndHumidifierLockout = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lockedOut", 1), ("notLockedOut", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigReheatAndHumidifierLockout.setStatus('current')
lgpEnvOperationalTimeTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 32), )
if mibBuilder.loadTexts: lgpEnvOperationalTimeTable.setStatus('current')
lgpEnvOperationalTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 32, 1), ).setIndexNames((0, "LIEBERT-GP-ENVIRONMENTAL-MIB", "lgpEnvOperationTimeIndex"))
if mibBuilder.loadTexts: lgpEnvOperationalTimeEntry.setStatus('current')
lgpEnvOperationTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 32, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpEnvOperationTimeIndex.setStatus('current')
lgpEnvOperationTimePoint = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 32, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvOperationTimePoint.setStatus('current')
lgpEnvOperationTimeSubID = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 32, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvOperationTimeSubID.setStatus('current')
lgpEnvOperationTimeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 32, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvOperationTimeUnit.setStatus('current')
lgpEnvOperationTimeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 32, 1, 5), Integer32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvOperationTimeValue.setStatus('current')
lgpEnvOperationTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 32, 1, 6), Integer32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvOperationTimeHighWarning.setStatus('current')
lgpEnvConfigTempControlAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pi", 1), ("pid", 2), ("intelligent", 3), ("proportional", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigTempControlAlgorithm.setStatus('current')
lgpEnvConfigFanSpeedMode = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigFanSpeedMode.setStatus('current')
lgpEnvConfigFanSpeedCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 35), Unsigned32()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigFanSpeedCapacity.setStatus('current')
lgpEnvConfigBmsResetTimer = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 36), Unsigned32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigBmsResetTimer.setStatus('current')
lgpEnvConfigDisableSensorOffsetDegC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 37), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigDisableSensorOffsetDegC.setStatus('current')
lgpEnvConfigDisableSensorOffsetDegF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 38), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigDisableSensorOffsetDegF.setStatus('current')
lgpEnvConfigCabinetSensorAlarms = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigCabinetSensorAlarms.setStatus('current')
lgpEnvConfigAirTemperatureControlSensor = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("supply", 1), ("remote", 2), ("return", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigAirTemperatureControlSensor.setStatus('current')
lgpEnvConfigFanSpeedControlSensor = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("supply", 1), ("remote", 2), ("return", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigFanSpeedControlSensor.setStatus('current')
lgpEnvConfigMinFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 44), Unsigned32()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigMinFanSpeed.setStatus('current')
lgpEnvConfigMaxFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 45), Unsigned32()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigMaxFanSpeed.setStatus('current')
lgpEnvConfigFanSpeedPropBandDegC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 46), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigFanSpeedPropBandDegC.setStatus('current')
lgpEnvConfigFanSpeedPropBandDegF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 4, 47), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvConfigFanSpeedPropBandDegF.setStatus('current')
lgpEnvControlShutdownAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvControlShutdownAfterDelay.setStatus('current')
lgpEnvControlStartupAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvControlStartupAfterDelay.setStatus('current')
lgpEnvSleepIntervalTimeTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 3), )
if mibBuilder.loadTexts: lgpEnvSleepIntervalTimeTable.setStatus('current')
lgpEnvSleepIntervalTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 3, 1), ).setIndexNames((0, "LIEBERT-GP-ENVIRONMENTAL-MIB", "lgpEnvSleepTimeIndex"))
if mibBuilder.loadTexts: lgpEnvSleepIntervalTimeEntry.setStatus('current')
lgpEnvSleepTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpEnvSleepTimeIndex.setStatus('current')
lgpEnvSleepTimeSubID = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvSleepTimeSubID.setStatus('current')
lgpEnvSleepTimeStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvSleepTimeStartHour.setStatus('current')
lgpEnvSleepTimeStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvSleepTimeStartMinute.setStatus('current')
lgpEnvSleepTimeStopHour = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvSleepTimeStopHour.setStatus('current')
lgpEnvSleepTimeStopMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvSleepTimeStopMinute.setStatus('current')
lgpEnvSleepDayTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 4), )
if mibBuilder.loadTexts: lgpEnvSleepDayTable.setStatus('current')
lgpEnvSleepDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 4, 1), ).setIndexNames((0, "LIEBERT-GP-ENVIRONMENTAL-MIB", "lgpEnvSleepDayIndex"))
if mibBuilder.loadTexts: lgpEnvSleepDayEntry.setStatus('current')
lgpEnvSleepDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpEnvSleepDayIndex.setStatus('current')
lgpEnvSleepDay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvSleepDay.setStatus('current')
lgpEnvSleepAllDayEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvSleepAllDayEnabled.setStatus('current')
lgpEnvStatisticsComp1RunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 1), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsComp1RunHr.setStatus('current')
lgpEnvStatisticsComp2RunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 2), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsComp2RunHr.setStatus('current')
lgpEnvStatisticsFanRunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsFanRunHr.setStatus('current')
lgpEnvStatisticsHumRunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsHumRunHr.setStatus('current')
lgpEnvStatisticsReheat1RunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 7), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsReheat1RunHr.setStatus('current')
lgpEnvStatisticsReheat2RunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 8), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsReheat2RunHr.setStatus('current')
lgpEnvStatisticsReheat3RunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 9), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsReheat3RunHr.setStatus('current')
lgpEnvStatisticsCoolingModeHrs = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 10), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsCoolingModeHrs.setStatus('current')
lgpEnvStatisticsHeatingModeHrs = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 11), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsHeatingModeHrs.setStatus('current')
lgpEnvStatisticsHumidifyModeHrs = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 12), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsHumidifyModeHrs.setStatus('current')
lgpEnvStatisticsDehumidifyModeHrs = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 13), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsDehumidifyModeHrs.setStatus('current')
lgpEnvStatisticsHotGasRunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 14), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsHotGasRunHr.setStatus('current')
lgpEnvStatisticsHotWaterRunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 15), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsHotWaterRunHr.setStatus('current')
lgpEnvStatisticsFreeCoolRunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 16), Unsigned32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsFreeCoolRunHr.setStatus('current')
lgpEnvStatisticsComp3RunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsComp3RunHr.setStatus('current')
lgpEnvStatisticsComp4RunHr = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 6, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvStatisticsComp4RunHr.setStatus('current')
lgpEnvWellKnownPoints = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1))
if mibBuilder.loadTexts: lgpEnvWellKnownPoints.setStatus('current')
lgpEnvFanPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 1))
if mibBuilder.loadTexts: lgpEnvFanPoint.setStatus('current')
lgpEnvCompressorPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 2))
if mibBuilder.loadTexts: lgpEnvCompressorPoint.setStatus('current')
lgpEnvElectricHeaterPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 3))
if mibBuilder.loadTexts: lgpEnvElectricHeaterPoint.setStatus('current')
lgpEnvChilledWaterPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 4))
if mibBuilder.loadTexts: lgpEnvChilledWaterPoint.setStatus('current')
lgpEnvHumidifierPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 5))
if mibBuilder.loadTexts: lgpEnvHumidifierPoint.setStatus('current')
lgpEnvDehumidifierPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 6))
if mibBuilder.loadTexts: lgpEnvDehumidifierPoint.setStatus('current')
lgpEnvFreeCoolingPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 7))
if mibBuilder.loadTexts: lgpEnvFreeCoolingPoint.setStatus('current')
lgpEnvHotWaterPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 8))
if mibBuilder.loadTexts: lgpEnvHotWaterPoint.setStatus('current')
lgpEnvHotGasPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 9))
if mibBuilder.loadTexts: lgpEnvHotGasPoint.setStatus('current')
lgpEnvBatteryCabinetPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 10))
if mibBuilder.loadTexts: lgpEnvBatteryCabinetPoint.setStatus('current')
lgpEnvPumpPoints = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 11))
if mibBuilder.loadTexts: lgpEnvPumpPoints.setStatus('current')
lgpEnvPump1Point = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 11, 1))
if mibBuilder.loadTexts: lgpEnvPump1Point.setStatus('current')
lgpEnvPump2Point = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 11, 2))
if mibBuilder.loadTexts: lgpEnvPump2Point.setStatus('current')
lgpEnvCompressorPoints = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 12))
if mibBuilder.loadTexts: lgpEnvCompressorPoints.setStatus('current')
lgpEnvCompressor1Point = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 12, 1))
if mibBuilder.loadTexts: lgpEnvCompressor1Point.setStatus('current')
lgpEnvCompressor1APoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 12, 1, 1))
if mibBuilder.loadTexts: lgpEnvCompressor1APoint.setStatus('current')
lgpEnvCompressor1BPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 12, 1, 2))
if mibBuilder.loadTexts: lgpEnvCompressor1BPoint.setStatus('current')
lgpEnvCompressor2Point = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 12, 2))
if mibBuilder.loadTexts: lgpEnvCompressor2Point.setStatus('current')
lgpEnvCompressor2APoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 12, 2, 1))
if mibBuilder.loadTexts: lgpEnvCompressor2APoint.setStatus('current')
lgpEnvCompressor2BPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 12, 2, 2))
if mibBuilder.loadTexts: lgpEnvCompressor2BPoint.setStatus('current')
lgpEnvValvePoints = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 13))
if mibBuilder.loadTexts: lgpEnvValvePoints.setStatus('current')
lgpEnvHotGasValve1Point = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 13, 1))
if mibBuilder.loadTexts: lgpEnvHotGasValve1Point.setStatus('current')
lgpEnvHotGasValve2Point = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 13, 2))
if mibBuilder.loadTexts: lgpEnvHotGasValve2Point.setStatus('current')
lgpEnvRemoteSensorStatisticPoints = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 14))
if mibBuilder.loadTexts: lgpEnvRemoteSensorStatisticPoints.setStatus('current')
lgpEnvRemoteSensorMinimumPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 14, 1))
if mibBuilder.loadTexts: lgpEnvRemoteSensorMinimumPoint.setStatus('current')
lgpEnvRemoteSensorMaximumPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 14, 2))
if mibBuilder.loadTexts: lgpEnvRemoteSensorMaximumPoint.setStatus('current')
lgpEnvRemoteSensorAveragePoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 7, 1, 14, 3))
if mibBuilder.loadTexts: lgpEnvRemoteSensorAveragePoint.setStatus('current')
lgpEnvWellKnownUnits = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 8, 1))
if mibBuilder.loadTexts: lgpEnvWellKnownUnits.setStatus('current')
lgpEnvHours = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 8, 1, 1))
if mibBuilder.loadTexts: lgpEnvHours.setStatus('current')
lgpEnvControlTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 1))
if mibBuilder.loadTexts: lgpEnvControlTemperature.setStatus('current')
lgpEnvReturnAirTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 2))
if mibBuilder.loadTexts: lgpEnvReturnAirTemperature.setStatus('current')
lgpEnvSupplyAirTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 3))
if mibBuilder.loadTexts: lgpEnvSupplyAirTemperature.setStatus('current')
lgpAmbientTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 4))
if mibBuilder.loadTexts: lgpAmbientTemperature.setStatus('current')
lgpInverterTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 5))
if mibBuilder.loadTexts: lgpInverterTemperature.setStatus('current')
lgpBatteryTempterature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 6))
if mibBuilder.loadTexts: lgpBatteryTempterature.setStatus('current')
lgpAcDcConverterTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 7))
if mibBuilder.loadTexts: lgpAcDcConverterTemperature.setStatus('current')
lgpPfcTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 8))
if mibBuilder.loadTexts: lgpPfcTemperature.setStatus('current')
lgpTransformerTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 9))
if mibBuilder.loadTexts: lgpTransformerTemperature.setStatus('current')
lgpLocalTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 10))
if mibBuilder.loadTexts: lgpLocalTemperature.setStatus('current')
lgpLocal1Temperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 10, 1))
if mibBuilder.loadTexts: lgpLocal1Temperature.setStatus('current')
lgpLocal2Temperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 10, 2))
if mibBuilder.loadTexts: lgpLocal2Temperature.setStatus('current')
lgpLocal3Temperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 10, 3))
if mibBuilder.loadTexts: lgpLocal3Temperature.setStatus('current')
lgpDigitalScrollCompressorTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 11))
if mibBuilder.loadTexts: lgpDigitalScrollCompressorTemperature.setStatus('current')
lgpDigitalScrollCompressor1Temperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 11, 1))
if mibBuilder.loadTexts: lgpDigitalScrollCompressor1Temperature.setStatus('current')
lgpDigitalScrollCompressor2Temperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 11, 2))
if mibBuilder.loadTexts: lgpDigitalScrollCompressor2Temperature.setStatus('current')
lgpChillWaterTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 12))
if mibBuilder.loadTexts: lgpChillWaterTemperature.setStatus('current')
lgpCoolantTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 13))
if mibBuilder.loadTexts: lgpCoolantTemperature.setStatus('current')
lgpEnvEnclosureTemperatureSensors = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 14))
if mibBuilder.loadTexts: lgpEnvEnclosureTemperatureSensors.setStatus('current')
lgpEnvEnclosureTemperatureSensor1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 14, 1))
if mibBuilder.loadTexts: lgpEnvEnclosureTemperatureSensor1.setStatus('current')
lgpEnvEnclosureTemperatureSensor2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 14, 2))
if mibBuilder.loadTexts: lgpEnvEnclosureTemperatureSensor2.setStatus('current')
lgpEnvEnclosureTemperatureSensor3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 14, 3))
if mibBuilder.loadTexts: lgpEnvEnclosureTemperatureSensor3.setStatus('current')
lgpEnvEnclosureTemperatureSensor4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 14, 4))
if mibBuilder.loadTexts: lgpEnvEnclosureTemperatureSensor4.setStatus('current')
lgpEnvValueAmbientRoomTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 15))
if mibBuilder.loadTexts: lgpEnvValueAmbientRoomTemperature.setStatus('current')
lgpEnvDewPointTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 16))
if mibBuilder.loadTexts: lgpEnvDewPointTemperature.setStatus('current')
lgpEnvEnclosureTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 17))
if mibBuilder.loadTexts: lgpEnvEnclosureTemperature.setStatus('current')
lgpEnvAdjustedTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 18))
if mibBuilder.loadTexts: lgpEnvAdjustedTemperature.setStatus('current')
lgpEnvExternalSensors = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 19))
if mibBuilder.loadTexts: lgpEnvExternalSensors.setStatus('current')
lgpEnvExternalAirSensorA = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 19, 1))
if mibBuilder.loadTexts: lgpEnvExternalAirSensorA.setStatus('current')
lgpEnvExternalAirSensorADewPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 19, 2))
if mibBuilder.loadTexts: lgpEnvExternalAirSensorADewPoint.setStatus('current')
lgpEnvExternalAirSensorB = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 19, 3))
if mibBuilder.loadTexts: lgpEnvExternalAirSensorB.setStatus('current')
lgpEnvExternalAirSensorBDewPoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 19, 4))
if mibBuilder.loadTexts: lgpEnvExternalAirSensorBDewPoint.setStatus('current')
lgpEnvSupplyFluidTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 20))
if mibBuilder.loadTexts: lgpEnvSupplyFluidTemperature.setStatus('current')
lgpEnvSupplyRefrigerantTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 21))
if mibBuilder.loadTexts: lgpEnvSupplyRefrigerantTemperature.setStatus('current')
lgpEnvMinDesiredRoomAirTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 22))
if mibBuilder.loadTexts: lgpEnvMinDesiredRoomAirTemperature.setStatus('current')
lgpEnvDewPointTemperatures = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 23))
if mibBuilder.loadTexts: lgpEnvDewPointTemperatures.setStatus('current')
lgpEnvInletDewPointTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 1, 23, 1))
if mibBuilder.loadTexts: lgpEnvInletDewPointTemperature.setStatus('current')
lgpEnvTemperatureSettingDegF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 1), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureSettingDegF.setStatus('current')
lgpEnvTemperatureToleranceDegF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 2), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureToleranceDegF.setStatus('current')
lgpEnvTemperatureTableDegF = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3), )
if mibBuilder.loadTexts: lgpEnvTemperatureTableDegF.setStatus('current')
lgpEnvTemperatureDeadbandRangeDegF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 4), Integer32()).setUnits('.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureDeadbandRangeDegF.setStatus('current')
lgpEnvTemperatureEntryDegF = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1), ).setIndexNames((0, "LIEBERT-GP-ENVIRONMENTAL-MIB", "lgpEnvTemperatureIdDegF"))
if mibBuilder.loadTexts: lgpEnvTemperatureEntryDegF.setStatus('current')
lgpEnvTemperatureIdDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureIdDegF.setStatus('current')
lgpEnvTemperatureDescrDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureDescrDegF.setStatus('current')
lgpEnvTemperatureMeasurementDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 3), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureMeasurementDegF.setStatus('current')
lgpEnvTemperatureHighThresholdDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 4), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureHighThresholdDegF.setStatus('current')
lgpEnvTemperatureLowThresholdDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 5), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureLowThresholdDegF.setStatus('current')
lgpEnvTemperatureSetPointDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 6), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureSetPointDegF.setStatus('current')
lgpEnvTemperatureDailyHighDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 7), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureDailyHighDegF.setStatus('current')
lgpEnvTemperatureDailyLowDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 8), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureDailyLowDegF.setStatus('current')
lgpEnvTempDailyHighTimeHourDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyHighTimeHourDegF.setStatus('current')
lgpEnvTempDailyHighTimeMinuteDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyHighTimeMinuteDegF.setStatus('current')
lgpEnvTempDailyHighTimeSecondDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyHighTimeSecondDegF.setStatus('current')
lgpEnvTempDailyLowTimeHourDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyLowTimeHourDegF.setStatus('current')
lgpEnvTempDailyLowTimeMinuteDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyLowTimeMinuteDegF.setStatus('current')
lgpEnvTempDailyLowTimeSecondDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyLowTimeSecondDegF.setStatus('current')
lgpEnvTemperatureMeasurementTenthsDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 50), Integer32()).setUnits('.1 degrees Fahrenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureMeasurementTenthsDegF.setStatus('current')
lgpEnvTemperatureHighThresholdTenthsDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 51), Integer32()).setUnits('.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureHighThresholdTenthsDegF.setStatus('current')
lgpEnvTemperatureLowThresholdTenthsDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 52), Integer32()).setUnits('.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureLowThresholdTenthsDegF.setStatus('current')
lgpEnvTemperatureSetPointTenthsDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 53), Integer32()).setUnits('.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureSetPointTenthsDegF.setStatus('current')
lgpEnvTemperatureDeadBandTenthsDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 60), Integer32()).setUnits('.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureDeadBandTenthsDegF.setStatus('current')
lgpEnvTempHeatingPropBandTenthsDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 61), Integer32()).setUnits('.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTempHeatingPropBandTenthsDegF.setStatus('current')
lgpEnvTempCoolingPropBandTenthsDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 2, 3, 1, 62), Integer32()).setUnits('.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTempCoolingPropBandTenthsDegF.setStatus('current')
lgpEnvTemperatureSettingDegC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 1), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureSettingDegC.setStatus('current')
lgpEnvTemperatureToleranceDegC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 2), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureToleranceDegC.setStatus('current')
lgpEnvTemperatureTableDegC = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3), )
if mibBuilder.loadTexts: lgpEnvTemperatureTableDegC.setStatus('current')
lgpEnvTemperatureDeadbandRangeDegC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 4), Integer32()).setUnits('.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureDeadbandRangeDegC.setStatus('current')
lgpEnvTemperatureEntryDegC = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1), ).setIndexNames((0, "LIEBERT-GP-ENVIRONMENTAL-MIB", "lgpEnvTemperatureIdDegC"))
if mibBuilder.loadTexts: lgpEnvTemperatureEntryDegC.setStatus('current')
lgpEnvTemperatureIdDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureIdDegC.setStatus('current')
lgpEnvTemperatureDescrDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureDescrDegC.setStatus('current')
lgpEnvTemperatureMeasurementDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 3), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureMeasurementDegC.setStatus('current')
lgpEnvTemperatureHighThresholdDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 4), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureHighThresholdDegC.setStatus('current')
lgpEnvTemperatureLowThresholdDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 5), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureLowThresholdDegC.setStatus('current')
lgpEnvTemperatureSetPointDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 6), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureSetPointDegC.setStatus('current')
lgpEnvTemperatureDailyHighDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 7), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureDailyHighDegC.setStatus('current')
lgpEnvTemperatureDailyLowDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 8), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureDailyLowDegC.setStatus('current')
lgpEnvTempDailyHighTimeHourDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyHighTimeHourDegC.setStatus('current')
lgpEnvTempDailyHighTimeMinuteDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyHighTimeMinuteDegC.setStatus('current')
lgpEnvTempDailyHighTimeSecondDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyHighTimeSecondDegC.setStatus('current')
lgpEnvTempDailyLowTimeHourDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyLowTimeHourDegC.setStatus('current')
lgpEnvTempDailyLowTimeMinuteDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyLowTimeMinuteDegC.setStatus('current')
lgpEnvTempDailyLowTimeSecondDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTempDailyLowTimeSecondDegC.setStatus('current')
lgpEnvTemperatureMeasurementTenthsDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 50), Integer32()).setUnits('.1 degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvTemperatureMeasurementTenthsDegC.setStatus('current')
lgpEnvTemperatureHighThresholdTenthsDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 51), Integer32()).setUnits('.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureHighThresholdTenthsDegC.setStatus('current')
lgpEnvTemperatureLowThresholdTenthsDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 52), Integer32()).setUnits('.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureLowThresholdTenthsDegC.setStatus('current')
lgpEnvTemperatureSetPointTenthsDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 53), Integer32()).setUnits('.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureSetPointTenthsDegC.setStatus('current')
lgpEnvTemperatureDeadBandTenthsDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 60), Integer32()).setUnits('.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTemperatureDeadBandTenthsDegC.setStatus('current')
lgpEnvTempHeatingPropBandTenthsDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 61), Integer32()).setUnits('.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTempHeatingPropBandTenthsDegC.setStatus('current')
lgpEnvTempCoolingPropBandTenthsDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 1, 3, 3, 1, 62), Integer32()).setUnits('.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvTempCoolingPropBandTenthsDegC.setStatus('current')
lgpEnvControlHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 1, 1))
if mibBuilder.loadTexts: lgpEnvControlHumidity.setStatus('current')
lgpEnvReturnAirHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 1, 2))
if mibBuilder.loadTexts: lgpEnvReturnAirHumidity.setStatus('current')
lgpEnvSupplyAirHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 1, 3))
if mibBuilder.loadTexts: lgpEnvSupplyAirHumidity.setStatus('current')
lgpEnvValueAmbientHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 1, 4))
if mibBuilder.loadTexts: lgpEnvValueAmbientHumidity.setStatus('current')
lgpEnvHumiditySettingRel = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 1), Integer32()).setUnits('percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvHumiditySettingRel.setStatus('current')
lgpEnvHumidityToleranceRel = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 2), Integer32()).setUnits('percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvHumidityToleranceRel.setStatus('current')
lgpEnvHumidityTableRel = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3), )
if mibBuilder.loadTexts: lgpEnvHumidityTableRel.setStatus('current')
lgpEnvHumidityDeadbandRange = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 4), Integer32()).setUnits('.1 percent RH').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvHumidityDeadbandRange.setStatus('current')
lgpEnvHumidityEntryRel = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1), ).setIndexNames((0, "LIEBERT-GP-ENVIRONMENTAL-MIB", "lgpEnvHumidityIdRel"))
if mibBuilder.loadTexts: lgpEnvHumidityEntryRel.setStatus('current')
lgpEnvHumidityIdRel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityIdRel.setStatus('current')
lgpEnvHumidityDescrRel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityDescrRel.setStatus('current')
lgpEnvHumidityMeasurementRel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 3), Integer32()).setUnits('percent Relative Humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityMeasurementRel.setStatus('current')
lgpEnvHumidityHighThresholdRel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 4), Integer32()).setUnits('percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvHumidityHighThresholdRel.setStatus('current')
lgpEnvHumidityLowThresholdRel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 5), Integer32()).setUnits('percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvHumidityLowThresholdRel.setStatus('current')
lgpEnvHumiditySetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 6), Integer32()).setUnits('percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvHumiditySetPoint.setStatus('current')
lgpEnvHumidityDailyHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 7), Integer32()).setUnits('percent Relative Humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityDailyHigh.setStatus('current')
lgpEnvHumidityDailyLow = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 8), Integer32()).setUnits('percent Relative Humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityDailyLow.setStatus('current')
lgpEnvHumidityDailyHighTimeHour = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityDailyHighTimeHour.setStatus('current')
lgpEnvHumidityDailyHighTimeMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityDailyHighTimeMinute.setStatus('current')
lgpEnvHumidityDailyHighTimeSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityDailyHighTimeSecond.setStatus('current')
lgpEnvHumidityDailyLowTimeHour = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityDailyLowTimeHour.setStatus('current')
lgpEnvHumidityDailyLowTimeMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityDailyLowTimeMinute.setStatus('current')
lgpEnvHumidityDailyLowTimeSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityDailyLowTimeSecond.setStatus('current')
lgpEnvHumidityDeadBand = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 15), Integer32()).setUnits('percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvHumidityDeadBand.setStatus('current')
lgpEnvHumidifyPropBand = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 16), Integer32()).setUnits('percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvHumidifyPropBand.setStatus('current')
lgpEnvDehumidifyPropBand = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 17), Integer32()).setUnits('percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvDehumidifyPropBand.setStatus('current')
lgpEnvHumidityMeasurementRelTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 50), Integer32()).setUnits('.1 percent Relative Humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvHumidityMeasurementRelTenths.setStatus('current')
lgpEnvHumidityHighThresholdRelTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 51), Integer32()).setUnits('.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvHumidityHighThresholdRelTenths.setStatus('current')
lgpEnvHumidityLowThresholdRelTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 2, 2, 3, 1, 52), Integer32()).setUnits('.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvHumidityLowThresholdRelTenths.setStatus('current')
lgpEnvRemoteSensorCalc = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("average", 1), ("maximum", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvRemoteSensorCalc.setStatus('current')
lgpEnvRemoteSensorTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 9, 10), )
if mibBuilder.loadTexts: lgpEnvRemoteSensorTable.setStatus('current')
lgpEnvRemoteSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 9, 10, 1), ).setIndexNames((0, "LIEBERT-GP-ENVIRONMENTAL-MIB", "lgpEnvRemoteSensorIndex"))
if mibBuilder.loadTexts: lgpEnvRemoteSensorEntry.setStatus('current')
lgpEnvRemoteSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 9, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpEnvRemoteSensorIndex.setStatus('current')
lgpEnvRemoteSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 9, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvRemoteSensorId.setStatus('current')
lgpEnvRemoteSensorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 9, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("reference", 1), ("control", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvRemoteSensorMode.setStatus('current')
lgpEnvRemoteSensorUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 9, 10, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpEnvRemoteSensorUsrLabel.setStatus('current')
lgpEnvRemoteSensorTempMeasurementDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 9, 10, 1, 5), Integer32()).setUnits('degrees Fahrenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvRemoteSensorTempMeasurementDegF.setStatus('current')
lgpEnvRemoteSensorTempMeasurementDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 4, 9, 10, 1, 6), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpEnvRemoteSensorTempMeasurementDegC.setStatus('current')
mibBuilder.exportSymbols("LIEBERT-GP-ENVIRONMENTAL-MIB", lgpEnvTempDailyLowTimeSecondDegF=lgpEnvTempDailyLowTimeSecondDegF, lgpDigitalScrollCompressor2Temperature=lgpDigitalScrollCompressor2Temperature, lgpEnvStateSystem=lgpEnvStateSystem, lgpEnvStatisticsHumRunHr=lgpEnvStatisticsHumRunHr, lgpEnvStateFanCapacity=lgpEnvStateFanCapacity, lgpEnvStateHotWater=lgpEnvStateHotWater, lgpEnvConfigTemperatureIntegTime=lgpEnvConfigTemperatureIntegTime, lgpEnvOperationTimeValue=lgpEnvOperationTimeValue, lgpEnvConfigTempControlAlgorithm=lgpEnvConfigTempControlAlgorithm, lgpEnvConfigCompressorLockout=lgpEnvConfigCompressorLockout, lgpEnvStatistics=lgpEnvStatistics, lgpEnvExternalAirSensorB=lgpEnvExternalAirSensorB, lgpEnvStateOperatingReason=lgpEnvStateOperatingReason, lgpEnvAdjustedTemperature=lgpEnvAdjustedTemperature, lgpEnvConfigInfaredFlushRate=lgpEnvConfigInfaredFlushRate, lgpEnvHumidityDailyHigh=lgpEnvHumidityDailyHigh, lgpEnvFreeCoolingPoint=lgpEnvFreeCoolingPoint, liebertGlobalProductsEnvironmentalModule=liebertGlobalProductsEnvironmentalModule, lgpEnvRemoteSensorMinimumPoint=lgpEnvRemoteSensorMinimumPoint, lgpEnvStateCoolingCapacity=lgpEnvStateCoolingCapacity, lgpEnvStatisticsComp1RunHr=lgpEnvStatisticsComp1RunHr, lgpEnvOperationTimeIndex=lgpEnvOperationTimeIndex, lgpEnvTemperatureLowThresholdTenthsDegF=lgpEnvTemperatureLowThresholdTenthsDegF, lgpEnvConfigSleepMode=lgpEnvConfigSleepMode, lgpEnvOperationTimeHighWarning=lgpEnvOperationTimeHighWarning, lgpEnvPumpPoints=lgpEnvPumpPoints, lgpLocal1Temperature=lgpLocal1Temperature, lgpEnvStateHeatingUnits=lgpEnvStateHeatingUnits, lgpEnvSleepTimeStartHour=lgpEnvSleepTimeStartHour, lgpEnvCompressorPoint=lgpEnvCompressorPoint, lgpEnvBatteryCabinetPoint=lgpEnvBatteryCabinetPoint, lgpEnvComponentStateEntry=lgpEnvComponentStateEntry, lgpEnvStateFreeCooling=lgpEnvStateFreeCooling, lgpEnvConfigFreecoolingDeltaDegF=lgpEnvConfigFreecoolingDeltaDegF, lgpEnvCompressor1BPoint=lgpEnvCompressor1BPoint, lgpEnvOperationalTimeTable=lgpEnvOperationalTimeTable, lgpAcDcConverterTemperature=lgpAcDcConverterTemperature, lgpEnvStatisticsComp4RunHr=lgpEnvStatisticsComp4RunHr, lgpEnvConfigSleepModeDeadbandRangeDegF=lgpEnvConfigSleepModeDeadbandRangeDegF, lgpEnvRemoteSensorEntry=lgpEnvRemoteSensorEntry, lgpEnvSleepDay=lgpEnvSleepDay, lgpEnvTempDailyLowTimeHourDegF=lgpEnvTempDailyLowTimeHourDegF, lgpEnvConfigFanSpeedMode=lgpEnvConfigFanSpeedMode, lgpEnvHotWaterPoint=lgpEnvHotWaterPoint, lgpEnvTemperatureDescrDegC=lgpEnvTemperatureDescrDegC, lgpEnvConfigCoolingServiceInterval=lgpEnvConfigCoolingServiceInterval, lgpEnvConfigSupplyTempLowLimitDegF=lgpEnvConfigSupplyTempLowLimitDegF, lgpEnvTempCoolingPropBandTenthsDegC=lgpEnvTempCoolingPropBandTenthsDegC, lgpEnvTemperatureIdDegC=lgpEnvTemperatureIdDegC, lgpEnvValueAmbientRoomTemperature=lgpEnvValueAmbientRoomTemperature, lgpEnvConfigCabinetSensorAlarms=lgpEnvConfigCabinetSensorAlarms, lgpEnvSleepTimeIndex=lgpEnvSleepTimeIndex, lgpEnvHumidityEntryRel=lgpEnvHumidityEntryRel, lgpEnvDehumidifyPropBand=lgpEnvDehumidifyPropBand, lgpEnvRemoteSensorTempMeasurementDegF=lgpEnvRemoteSensorTempMeasurementDegF, lgpEnvTemperatureDescrDegF=lgpEnvTemperatureDescrDegF, lgpEnvCompressor2BPoint=lgpEnvCompressor2BPoint, lgpEnvTemperatureMeasurementDegC=lgpEnvTemperatureMeasurementDegC, lgpEnvHumidityDescrRel=lgpEnvHumidityDescrRel, lgpEnvHumidityDeadBand=lgpEnvHumidityDeadBand, lgpEnvTemperatureMeasurementDegF=lgpEnvTemperatureMeasurementDegF, lgpEnvTemperatureHighThresholdTenthsDegF=lgpEnvTemperatureHighThresholdTenthsDegF, lgpEnvTempDailyLowTimeMinuteDegC=lgpEnvTempDailyLowTimeMinuteDegC, lgpEnvRemoteSensorUsrLabel=lgpEnvRemoteSensorUsrLabel, lgpEnvState=lgpEnvState, lgpEnvStatisticsHumidifyModeHrs=lgpEnvStatisticsHumidifyModeHrs, lgpEnvConfigFanSpeedPropBandDegF=lgpEnvConfigFanSpeedPropBandDegF, lgpEnvTemperatureLowThresholdDegF=lgpEnvTemperatureLowThresholdDegF, lgpEnvRemoteSensorIndex=lgpEnvRemoteSensorIndex, lgpEnvTemperatureSettingDegC=lgpEnvTemperatureSettingDegC, lgpEnvConfigSupplyTempLowLimit=lgpEnvConfigSupplyTempLowLimit, lgpEnvConfigDeltaGlycolType=lgpEnvConfigDeltaGlycolType, lgpEnvConfigLocalTemperatureUnit=lgpEnvConfigLocalTemperatureUnit, lgpEnvConfigHumidityControl=lgpEnvConfigHumidityControl, lgpEnvTempCoolingPropBandTenthsDegF=lgpEnvTempCoolingPropBandTenthsDegF, lgpEnvStatisticsReheat3RunHr=lgpEnvStatisticsReheat3RunHr, lgpEnvStateCoolingUnit1=lgpEnvStateCoolingUnit1, lgpEnvSleepTimeStopMinute=lgpEnvSleepTimeStopMinute, lgpEnvFanPoint=lgpEnvFanPoint, lgpEnvValveDescr=lgpEnvValveDescr, lgpEnvSupplyAirTemperature=lgpEnvSupplyAirTemperature, lgpEnvEnclosureTemperatureSensor3=lgpEnvEnclosureTemperatureSensor3, lgpEnvTemperatureDailyHighDegF=lgpEnvTemperatureDailyHighDegF, lgpEnvTemperatureMeasurementTenthsDegF=lgpEnvTemperatureMeasurementTenthsDegF, lgpLocal3Temperature=lgpLocal3Temperature, lgpEnvElectricHeaterPoint=lgpEnvElectricHeaterPoint, lgpEnvHumidityRelative=lgpEnvHumidityRelative, lgpEnvCompressorPoints=lgpEnvCompressorPoints, lgpEnvValvePositionTenths=lgpEnvValvePositionTenths, lgpEnvConfigFanSpeedControlSensor=lgpEnvConfigFanSpeedControlSensor, lgpEnvTempDailyHighTimeSecondDegC=lgpEnvTempDailyHighTimeSecondDegC, lgpEnvControlShutdownAfterDelay=lgpEnvControlShutdownAfterDelay, lgpEnvHumidityMeasurementRelTenths=lgpEnvHumidityMeasurementRelTenths, lgpEnvStateHumidifying=lgpEnvStateHumidifying, lgpEnvStateElectricHeater=lgpEnvStateElectricHeater, lgpEnvOperationalTimeEntry=lgpEnvOperationalTimeEntry, lgpEnvConfigDisableSensorOffsetDegC=lgpEnvConfigDisableSensorOffsetDegC, lgpEnvTemperatureToleranceDegC=lgpEnvTemperatureToleranceDegC, lgpEnvHumidityDailyHighTimeSecond=lgpEnvHumidityDailyHighTimeSecond, lgpEnvTempDailyHighTimeHourDegF=lgpEnvTempDailyHighTimeHourDegF, lgpLocal2Temperature=lgpLocal2Temperature, lgpEnvStateHeating=lgpEnvStateHeating, lgpEnvEnclosureTemperatureSensor2=lgpEnvEnclosureTemperatureSensor2, lgpEnvValveIndex=lgpEnvValveIndex, lgpEnvControlStartupAfterDelay=lgpEnvControlStartupAfterDelay, lgpEnvHumidityTableRel=lgpEnvHumidityTableRel, lgpEnvPump1Point=lgpEnvPump1Point, lgpEnvConfigReheatLockout=lgpEnvConfigReheatLockout, lgpEnvConfigFreecoolingDeltaDegC=lgpEnvConfigFreecoolingDeltaDegC, lgpEnvStatisticsFreeCoolRunHr=lgpEnvStatisticsFreeCoolRunHr, lgpEnvTemperatureEntryDegF=lgpEnvTemperatureEntryDegF, lgpEnvConfigHumidifierServiceInterval=lgpEnvConfigHumidifierServiceInterval, lgpEnvPump2Point=lgpEnvPump2Point, lgpEnvWellKnownPoints=lgpEnvWellKnownPoints, lgpEnvStatisticsHotWaterRunHr=lgpEnvStatisticsHotWaterRunHr, lgpEnvEnclosureTemperatureSensor4=lgpEnvEnclosureTemperatureSensor4, lgpEnvSupplyFluidTemperature=lgpEnvSupplyFluidTemperature, lgpEnvConfigReheatAndHumidifierLockout=lgpEnvConfigReheatAndHumidifierLockout, lgpEnvWellKnownUnits=lgpEnvWellKnownUnits, lgpEnvValveState=lgpEnvValveState, lgpEnvValveTable=lgpEnvValveTable, lgpEnvTempHeatingPropBandTenthsDegF=lgpEnvTempHeatingPropBandTenthsDegF, lgpEnvTemperatureDailyLowDegC=lgpEnvTemperatureDailyLowDegC, lgpEnvHumiditySettingRel=lgpEnvHumiditySettingRel, lgpEnvHumidifierPoint=lgpEnvHumidifierPoint, lgpEnvStatisticsHeatingModeHrs=lgpEnvStatisticsHeatingModeHrs, lgpEnvTempDailyLowTimeHourDegC=lgpEnvTempDailyLowTimeHourDegC, lgpEnvHumidityDailyHighTimeHour=lgpEnvHumidityDailyHighTimeHour, lgpEnvConfigMaxFanSpeed=lgpEnvConfigMaxFanSpeed, lgpAmbientTemperature=lgpAmbientTemperature, lgpEnvStatisticsReheat2RunHr=lgpEnvStatisticsReheat2RunHr, lgpEnvConfigSleepModeDeadbandRange=lgpEnvConfigSleepModeDeadbandRange, lgpEnvTemperatureMeasurementTenthsDegC=lgpEnvTemperatureMeasurementTenthsDegC, lgpChillWaterTemperature=lgpChillWaterTemperature, lgpEnvStateEconoCycle=lgpEnvStateEconoCycle, lgpEnvTemperatureTableDegC=lgpEnvTemperatureTableDegC, lgpEnvStateHeatingUnit2=lgpEnvStateHeatingUnit2, lgpEnvTemperatureCelsius=lgpEnvTemperatureCelsius, lgpEnvConfigFanSpeedCapacity=lgpEnvConfigFanSpeedCapacity, lgpEnvStateGeneralAlarmOutput=lgpEnvStateGeneralAlarmOutput, lgpEnvSleepDayEntry=lgpEnvSleepDayEntry, lgpEnvEnclosureTemperatureSensor1=lgpEnvEnclosureTemperatureSensor1, lgpEnvCompressor1Point=lgpEnvCompressor1Point, lgpEnvTemperatureLowThresholdTenthsDegC=lgpEnvTemperatureLowThresholdTenthsDegC, lgpEnvSupplyAirHumidity=lgpEnvSupplyAirHumidity, lgpEnvHumiditySetPoint=lgpEnvHumiditySetPoint, lgpPfcTemperature=lgpPfcTemperature, lgpEnvRemoteSensorId=lgpEnvRemoteSensorId, lgpEnvConfigFilterServiceInterval=lgpEnvConfigFilterServiceInterval, lgpEnvRemoteSensors=lgpEnvRemoteSensors, lgpEnvSleepTimeStopHour=lgpEnvSleepTimeStopHour, lgpEnvHotGasValve1Point=lgpEnvHotGasValve1Point, lgpEnvConfigRemoteShutdown=lgpEnvConfigRemoteShutdown, lgpEnvExternalAirSensorADewPoint=lgpEnvExternalAirSensorADewPoint, lgpEnvHumidityDailyLowTimeMinute=lgpEnvHumidityDailyLowTimeMinute, lgpEnvOperationTimeUnit=lgpEnvOperationTimeUnit, lgpEnvExternalAirSensorA=lgpEnvExternalAirSensorA, lgpEnvComponentStateTable=lgpEnvComponentStateTable, lgpEnvConfigSupplyTempLowLimitDegC=lgpEnvConfigSupplyTempLowLimitDegC, lgpEnvOperationTimePoint=lgpEnvOperationTimePoint, lgpEnvRemoteSensorAveragePoint=lgpEnvRemoteSensorAveragePoint, lgpEnvDewPointTemperature=lgpEnvDewPointTemperature, lgpCoolantTemperature=lgpCoolantTemperature, lgpEnvHumidityDailyHighTimeMinute=lgpEnvHumidityDailyHighTimeMinute, lgpEnvRemoteSensorTable=lgpEnvRemoteSensorTable, lgpEnvConfigChillWaterControl=lgpEnvConfigChillWaterControl, lgpEnvConfigHumLockout=lgpEnvConfigHumLockout, lgpEnvOperationTimeSubID=lgpEnvOperationTimeSubID, lgpEnvTemperatureIdDegF=lgpEnvTemperatureIdDegF, lgpEnvConfigHumidityIntegTime=lgpEnvConfigHumidityIntegTime, lgpEnvStatisticsComp2RunHr=lgpEnvStatisticsComp2RunHr, lgpEnvSleepTimeSubID=lgpEnvSleepTimeSubID, lgpEnvExternalSensors=lgpEnvExternalSensors, lgpEnvHumidityHighThresholdRel=lgpEnvHumidityHighThresholdRel, lgpTransformerTemperature=lgpTransformerTemperature, lgpEnvTemperatureDailyLowDegF=lgpEnvTemperatureDailyLowDegF, lgpEnvMinDesiredRoomAirTemperature=lgpEnvMinDesiredRoomAirTemperature, lgpEnvTemperatureTableDegF=lgpEnvTemperatureTableDegF, lgpEnvTemperatureDeadBandTenthsDegC=lgpEnvTemperatureDeadBandTenthsDegC, lgpEnvTempDailyHighTimeHourDegC=lgpEnvTempDailyHighTimeHourDegC, lgpEnvHumidity=lgpEnvHumidity, lgpEnvStateOperatingEfficiency=lgpEnvStateOperatingEfficiency, lgpEnvDewPointTemperatures=lgpEnvDewPointTemperatures, lgpEnvValueAmbientHumidity=lgpEnvValueAmbientHumidity, lgpEnvStateCoolingUnit2=lgpEnvStateCoolingUnit2, lgpEnvStateOperatingMode=lgpEnvStateOperatingMode, lgpEnvStatisticsFanRunHr=lgpEnvStatisticsFanRunHr, lgpEnvTemperatureSettingDegF=lgpEnvTemperatureSettingDegF, lgpEnvChilledWaterPoint=lgpEnvChilledWaterPoint, lgpEnvStateHumidifyingCapacity=lgpEnvStateHumidifyingCapacity, lgpEnvSupplyRefrigerantTemperature=lgpEnvSupplyRefrigerantTemperature, lgpEnvStateDehumidifyingCapacity=lgpEnvStateDehumidifyingCapacity, lgpEnvSleepTimeStartMinute=lgpEnvSleepTimeStartMinute, lgpEnvTemperatureDeadbandRangeDegF=lgpEnvTemperatureDeadbandRangeDegF, lgpEnvConfigBmsResetTimer=lgpEnvConfigBmsResetTimer, lgpEnvConfigAutoConfiguration=lgpEnvConfigAutoConfiguration, lgpEnvConfigSensorEvents1=lgpEnvConfigSensorEvents1, lgpEnvStateFreeCoolingCapacity=lgpEnvStateFreeCoolingCapacity, lgpEnvSleepIntervalTimeEntry=lgpEnvSleepIntervalTimeEntry, lgpEnvComponentStateDescr=lgpEnvComponentStateDescr, lgpEnvStatisticsHotGasRunHr=lgpEnvStatisticsHotGasRunHr, lgpEnvCompressor2Point=lgpEnvCompressor2Point, lgpEnvComponentStateIndex=lgpEnvComponentStateIndex, lgpEnvSleepIntervalTimeTable=lgpEnvSleepIntervalTimeTable, lgpEnvCompressor2APoint=lgpEnvCompressor2APoint, lgpEnvRemoteSensorStatisticPoints=lgpEnvRemoteSensorStatisticPoints, lgpEnvControlTemperature=lgpEnvControlTemperature, lgpEnvHumidityIdRel=lgpEnvHumidityIdRel, lgpEnvRemoteSensorTempMeasurementDegC=lgpEnvRemoteSensorTempMeasurementDegC, lgpEnvConfigRestartDelay=lgpEnvConfigRestartDelay, lgpEnvPoints=lgpEnvPoints, lgpEnvTempDailyLowTimeSecondDegC=lgpEnvTempDailyLowTimeSecondDegC, lgpDigitalScrollCompressorTemperature=lgpDigitalScrollCompressorTemperature, lgpEnvHumidityHighThresholdRelTenths=lgpEnvHumidityHighThresholdRelTenths, lgpInverterTemperature=lgpInverterTemperature, lgpEnvStatisticsDehumidifyModeHrs=lgpEnvStatisticsDehumidifyModeHrs, lgpEnvTemperatureLowThresholdDegC=lgpEnvTemperatureLowThresholdDegC, lgpEnvHumidityDailyLow=lgpEnvHumidityDailyLow, lgpEnvControlHumidity=lgpEnvControlHumidity, lgpEnvStateCoolingUnits=lgpEnvStateCoolingUnits, lgpEnvHumidityLowThresholdRel=lgpEnvHumidityLowThresholdRel, lgpEnvConfigSensorEventsStandard=lgpEnvConfigSensorEventsStandard, lgpEnvStateHeatingUnit3=lgpEnvStateHeatingUnit3, lgpEnvStateHeatingUnit1=lgpEnvStateHeatingUnit1, lgpEnvTemperatureSetPointDegF=lgpEnvTemperatureSetPointDegF, lgpEnvStatisticsCoolingModeHrs=lgpEnvStatisticsCoolingModeHrs, lgpEnvReturnAirHumidity=lgpEnvReturnAirHumidity, PYSNMP_MODULE_ID=liebertGlobalProductsEnvironmentalModule, lgpEnvSleepDayTable=lgpEnvSleepDayTable, lgpEnvSleepAllDayEnabled=lgpEnvSleepAllDayEnabled, lgpEnvStatisticsComp3RunHr=lgpEnvStatisticsComp3RunHr, lgpEnvConfigFanSpeedPropBandDegC=lgpEnvConfigFanSpeedPropBandDegC, lgpEnvRemoteSensorMaximumPoint=lgpEnvRemoteSensorMaximumPoint, lgpEnvExternalAirSensorBDewPoint=lgpEnvExternalAirSensorBDewPoint, lgpEnvInletDewPointTemperature=lgpEnvInletDewPointTemperature, lgpEnvConfigDisableSensorOffsetDegF=lgpEnvConfigDisableSensorOffsetDegF, lgpEnvTemperatureHighThresholdTenthsDegC=lgpEnvTemperatureHighThresholdTenthsDegC, lgpEnvTempDailyLowTimeMinuteDegF=lgpEnvTempDailyLowTimeMinuteDegF, lgpEnvHours=lgpEnvHours, lgpEnvHumidityLowThresholdRelTenths=lgpEnvHumidityLowThresholdRelTenths, lgpEnvStateDehumidifying=lgpEnvStateDehumidifying, lgpEnvTemperatureEntryDegC=lgpEnvTemperatureEntryDegC, lgpEnvStateHeatingUnit4=lgpEnvStateHeatingUnit4, lgpEnvSleepDayIndex=lgpEnvSleepDayIndex, lgpEnvStateCoolingUnit3=lgpEnvStateCoolingUnit3, lgpEnvTemperature=lgpEnvTemperature, lgpDigitalScrollCompressor1Temperature=lgpDigitalScrollCompressor1Temperature, lgpEnvHotGasPoint=lgpEnvHotGasPoint, lgpEnvHumidityWellKnown=lgpEnvHumidityWellKnown, lgpEnvHumidityDailyLowTimeHour=lgpEnvHumidityDailyLowTimeHour, lgpEnvStateCoolingUnit4=lgpEnvStateCoolingUnit4, lgpEnvConfigSleepModeDeadbandRangeDegC=lgpEnvConfigSleepModeDeadbandRangeDegC, lgpEnvStateHeatingCapacity=lgpEnvStateHeatingCapacity, lgpEnvRemoteSensorCalc=lgpEnvRemoteSensorCalc)
mibBuilder.exportSymbols("LIEBERT-GP-ENVIRONMENTAL-MIB", lgpEnvTemperatureDeadBandTenthsDegF=lgpEnvTemperatureDeadBandTenthsDegF, lgpEnvConfig=lgpEnvConfig, lgpEnvHotGasValve2Point=lgpEnvHotGasValve2Point, lgpEnvTempDailyHighTimeMinuteDegF=lgpEnvTempDailyHighTimeMinuteDegF, lgpEnvTemperatureToleranceDegF=lgpEnvTemperatureToleranceDegF, lgpEnvConfigAirTemperatureControlSensor=lgpEnvConfigAirTemperatureControlSensor, lgpEnvTempHeatingPropBandTenthsDegC=lgpEnvTempHeatingPropBandTenthsDegC, lgpEnvHumidityDeadbandRange=lgpEnvHumidityDeadbandRange, lgpEnvTemperatureWellKnown=lgpEnvTemperatureWellKnown, lgpEnvTemperatureDeadbandRangeDegC=lgpEnvTemperatureDeadbandRangeDegC, lgpEnvStateCooling=lgpEnvStateCooling, lgpEnvEnclosureTemperature=lgpEnvEnclosureTemperature, lgpEnvComponentState=lgpEnvComponentState, lgpEnvValveEntry=lgpEnvValveEntry, lgpEnvTemperatureSetPointTenthsDegF=lgpEnvTemperatureSetPointTenthsDegF, lgpEnvTemperatureSetPointTenthsDegC=lgpEnvTemperatureSetPointTenthsDegC, lgpEnvValvePoints=lgpEnvValvePoints, lgpEnvStateAudibleAlarm=lgpEnvStateAudibleAlarm, lgpEnvTemperatureFahrenheit=lgpEnvTemperatureFahrenheit, lgpBatteryTempterature=lgpBatteryTempterature, lgpEnvTemperatureHighThresholdDegC=lgpEnvTemperatureHighThresholdDegC, lgpEnvHumidityDailyLowTimeSecond=lgpEnvHumidityDailyLowTimeSecond, lgpEnvHumidityMeasurementRel=lgpEnvHumidityMeasurementRel, lgpEnvTemperatureControlMode=lgpEnvTemperatureControlMode, lgpEnvControl=lgpEnvControl, lgpLocalTemperature=lgpLocalTemperature, lgpEnvEnclosureTemperatureSensors=lgpEnvEnclosureTemperatureSensors, lgpEnvHumidifyPropBand=lgpEnvHumidifyPropBand, lgpEnvStateFan=lgpEnvStateFan, lgpEnvCompressor1APoint=lgpEnvCompressor1APoint, lgpEnvHumidityToleranceRel=lgpEnvHumidityToleranceRel, lgpEnvTemperatureHighThresholdDegF=lgpEnvTemperatureHighThresholdDegF, lgpEnvTempDailyHighTimeMinuteDegC=lgpEnvTempDailyHighTimeMinuteDegC, lgpEnvTempDailyHighTimeSecondDegF=lgpEnvTempDailyHighTimeSecondDegF, lgpEnvTemperatureSetPointDegC=lgpEnvTemperatureSetPointDegC, lgpEnvUnits=lgpEnvUnits, lgpEnvConfigMinFanSpeed=lgpEnvConfigMinFanSpeed, lgpEnvReturnAirTemperature=lgpEnvReturnAirTemperature, lgpEnvRemoteSensorMode=lgpEnvRemoteSensorMode, lgpEnvStatisticsReheat1RunHr=lgpEnvStatisticsReheat1RunHr, lgpEnvDehumidifierPoint=lgpEnvDehumidifierPoint, lgpEnvTemperatureDailyHighDegC=lgpEnvTemperatureDailyHighDegC)
