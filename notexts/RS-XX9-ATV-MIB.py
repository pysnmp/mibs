#
# PySNMP MIB module RS-XX9-ATV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-ATV-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:40:29 2024
# On host fv-az658-333 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
rsXx9MibModule, rsXx9Atv = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9MibModule", "rsXx9Atv")
NotificationState, SwitchOnOff, IndexTransmitter, IndexAB = mibBuilder.importSymbols("RS-XX9-TC-MIB", "NotificationState", "SwitchOnOff", "IndexTransmitter", "IndexAB")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, Counter32, iso, Bits, Unsigned32, IpAddress, Integer32, Counter64, NotificationType, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "iso", "Bits", "Unsigned32", "IpAddress", "Integer32", "Counter64", "NotificationType", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
rsXx9AtvMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 9))
rsXx9AtvMibModule.setRevisions(('2014-12-22 16:00', '2014-09-30 16:00', '2013-10-01 18:00', '2013-02-04 16:00',))
if mibBuilder.loadTexts: rsXx9AtvMibModule.setLastUpdated('201412221600Z')
if mibBuilder.loadTexts: rsXx9AtvMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
class SoundMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("carrierOff", 1), ("modulationOff", 2), ("on", 3))

rsXx9AtvNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 0))
rsXx9AtvObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1))
atvInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1))
atvInputCommonTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1), )
if mibBuilder.loadTexts: atvInputCommonTable.setStatus('current')
atvInputCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvInpCmnTxIdx"), (0, "RS-XX9-ATV-MIB", "atvInpCmnExcIdx"))
if mibBuilder.loadTexts: atvInputCommonEntry.setStatus('current')
atvInpCmnTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atvInpCmnTxIdx.setStatus('current')
atvInpCmnExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: atvInpCmnExcIdx.setStatus('current')
atvInpCmnInputIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input1", 1), ("input2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpCmnInputIdx.setStatus('obsolete')
atvInpCmnDatalineInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("mono", 2), ("stereo", 3), ("dual", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpCmnDatalineInfo.setStatus('current')
atvInpCmnInputImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sixHundredOhm", 1), ("highImpedance", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvInpCmnInputImpedance.setStatus('current')
atvInpCmnAudioLowpass = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvInpCmnAudioLowpass.setStatus('current')
atvInpCmnNicam728Datastream = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpCmnNicam728Datastream.setStatus('current')
atvInputIrdetoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("irdeto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInputIrdetoMode.setStatus('current')
atvInputVideoTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2), )
if mibBuilder.loadTexts: atvInputVideoTable.setStatus('current')
atvInputVideoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1), )
atvInputCommonEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvInputVideoEntry"))
atvInputVideoEntry.setIndexNames(*atvInputCommonEntry.getIndexNames())
if mibBuilder.loadTexts: atvInputVideoEntry.setStatus('current')
atvInpVideoWhiteAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1300))).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpVideoWhiteAmplitude.setStatus('current')
atvInpVideoWhitePulseMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("ok", 2), ("lem40", 3), ("lem30", 4), ("gep30", 5), ("gep40", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpVideoWhitePulseMonitoring.setStatus('current')
atvInpVideoSyncAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpVideoSyncAmplitude.setStatus('current')
atvInpVideoSyncMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("noV", 2), ("noHV", 3), ("lowLevel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpVideoSyncMonitoring.setStatus('current')
atvInpVideoClipping = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 5), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpVideoClipping.setStatus('current')
atvInpVideoNominalAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dotSeven", 1), ("one", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvInpVideoNominalAmplitude.setStatus('current')
atvInputAudioTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3), )
if mibBuilder.loadTexts: atvInputAudioTable.setStatus('current')
atvInputAudioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvInpCmnTxIdx"), (0, "RS-XX9-ATV-MIB", "atvInpCmnExcIdx"), (0, "RS-XX9-ATV-MIB", "atvInpAudioNfSignalIdx"))
if mibBuilder.loadTexts: atvInputAudioEntry.setStatus('current')
atvInpAudioNfSignalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("af1", 1), ("af2", 2))))
if mibBuilder.loadTexts: atvInpAudioNfSignalIdx.setStatus('current')
atvInpAudioCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3, 1, 2), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpAudioCurrentLevel.setStatus('current')
atvInpAudioClipping = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpAudioClipping.setStatus('current')
atvInpAudioNominalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1200, 1200))).setUnits('1/100 dBu').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvInpAudioNominalLevel.setStatus('current')
atvInputNicamTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 4), )
if mibBuilder.loadTexts: atvInputNicamTable.setStatus('current')
atvInputNicamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 4, 1), )
atvInputAudioEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvInputNicamEntry"))
atvInputNicamEntry.setIndexNames(*atvInputAudioEntry.getIndexNames())
if mibBuilder.loadTexts: atvInputNicamEntry.setStatus('current')
atvInpNicamCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 4, 1, 1), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpNicamCurrentLevel.setStatus('current')
atvInpNicamClipping = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpNicamClipping.setStatus('current')
atvInpNicamGainAdjustment = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, 600))).setUnits('milli Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvInpNicamGainAdjustment.setStatus('current')
atvCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2))
atvCommonStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 2), )
if mibBuilder.loadTexts: atvCommonStateTable.setStatus('current')
atvCommonStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 2, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvCmnStTxIdx"), (0, "RS-XX9-ATV-MIB", "atvCmnStExcIdx"))
if mibBuilder.loadTexts: atvCommonStateEntry.setStatus('current')
atvCmnStTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 2, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atvCmnStTxIdx.setStatus('current')
atvCmnStExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 2, 1, 2), IndexAB())
if mibBuilder.loadTexts: atvCmnStExcIdx.setStatus('current')
atvCmnStCurrentAudioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mono", 1), ("stereo", 2), ("dual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvCmnStCurrentAudioMode.setStatus('current')
atvCommonConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3), )
if mibBuilder.loadTexts: atvCommonConfigTable.setStatus('current')
atvCommonConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1), )
atvCommonStateEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvCommonConfigEntry"))
atvCommonConfigEntry.setIndexNames(*atvCommonStateEntry.getIndexNames())
if mibBuilder.loadTexts: atvCommonConfigEntry.setStatus('current')
atvCmnCfgTvStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("dk", 2), ("i", 3), ("i1", 4), ("k1", 5), ("b", 6), ("g", 7), ("m", 8), ("m1", 9), ("n", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgTvStandard.setStatus('current')
atvCmnCfgSoundCarrierSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleCarrier", 1), ("dualCarrier", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgSoundCarrierSelect.setStatus('current')
atvCmnCfgCoderMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("mono", 2), ("stereo", 3), ("dual", 4), ("auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgCoderMode.setStatus('current')
atvCmnCfgVisionSound1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, -50))).setUnits('centi Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgVisionSound1.setStatus('current')
atvCmnCfgVisionSound2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-270, -170))).setUnits('centi Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgVisionSound2.setStatus('current')
atvCmnCfgResidual = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(80, 250))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgResidual.setStatus('current')
atvCommonTestTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 4), )
if mibBuilder.loadTexts: atvCommonTestTable.setStatus('current')
atvCommonTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 4, 1), )
atvCommonStateEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvCommonTestEntry"))
atvCommonTestEntry.setIndexNames(*atvCommonStateEntry.getIndexNames())
if mibBuilder.loadTexts: atvCommonTestEntry.setStatus('current')
atvCommonTestSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("off", 1), ("singleCarrier", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCommonTestSignal.setStatus('current')
atvVideo = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3))
atvVideoStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2), )
if mibBuilder.loadTexts: atvVideoStateTable.setStatus('current')
atvVideoStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvVideoStTxIdx"), (0, "RS-XX9-ATV-MIB", "atvVideoStExcIdx"))
if mibBuilder.loadTexts: atvVideoStateEntry.setStatus('current')
atvVideoStTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atvVideoStTxIdx.setStatus('current')
atvVideoStExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 2), IndexAB())
if mibBuilder.loadTexts: atvVideoStExcIdx.setStatus('current')
atvVideoStWhiteAmplitudeOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 3), Unsigned32()).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvVideoStWhiteAmplitudeOutput.setStatus('current')
atvVideoStMemoryGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 4), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvVideoStMemoryGain.setStatus('current')
atvVideoStCurrentGainSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("memory", 2), ("automatic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvVideoStCurrentGainSource.setStatus('current')
atvVideoStLimiterActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvVideoStLimiterActive.setStatus('current')
atvVideoStSyncAmplitudeOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 7), Unsigned32()).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvVideoStSyncAmplitudeOutput.setStatus('current')
atvVideoConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3), )
if mibBuilder.loadTexts: atvVideoConfigTable.setStatus('current')
atvVideoConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1), )
atvVideoStateEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvVideoConfigEntry"))
atvVideoConfigEntry.setIndexNames(*atvVideoStateEntry.getIndexNames())
if mibBuilder.loadTexts: atvVideoConfigEntry.setStatus('current')
atvVideoCfgAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgAutomatic.setStatus('current')
atvVideoCfgGainSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("memory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgGainSource.setStatus('current')
atvVideoCfgManualGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgManualGain.setStatus('current')
atvVideoCfgTestLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 22), ValueRangeConstraint(329, 335), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgTestLine.setStatus('current')
atvVideoCfgDataLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgDataLine.setStatus('current')
atvVideoCfgLimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgLimiter.setStatus('current')
atvVideoCfgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(900, 1200))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgThreshold.setStatus('current')
atvVideoCfgSyncImpulsRegeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 8), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgSyncImpulsRegeneration.setStatus('current')
atvVideoCfgSyncAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 500))).setUnits('mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgSyncAmplitude.setStatus('current')
atvVideoCfgReceiverPreEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 10), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgReceiverPreEqualization.setStatus('current')
atvVideoCfgDiplexer = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 11), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgDiplexer.setStatus('current')
atvVideoCfgDiplexerPeaking = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setUnits('centi Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgDiplexerPeaking.setStatus('current')
atvAudio = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4))
atvAudioStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2), )
if mibBuilder.loadTexts: atvAudioStateTable.setStatus('current')
atvAudioStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvAudioStTxIdx"), (0, "RS-XX9-ATV-MIB", "atvAudioStExcIdx"))
if mibBuilder.loadTexts: atvAudioStateEntry.setStatus('current')
atvAudioStTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atvAudioStTxIdx.setStatus('current')
atvAudioStExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 2), IndexAB())
if mibBuilder.loadTexts: atvAudioStExcIdx.setStatus('current')
atvAudioStCurrentDeviationCarrier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 3), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvAudioStCurrentDeviationCarrier1.setStatus('current')
atvAudioStCurrentDeviationCarrier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 4), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvAudioStCurrentDeviationCarrier2.setStatus('current')
atvAudioStCurrentPilotDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 5), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvAudioStCurrentPilotDeviation.setStatus('current')
atvAudioStLimiterCarrier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvAudioStLimiterCarrier1.setStatus('current')
atvAudioStLimiterCarrier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvAudioStLimiterCarrier2.setStatus('current')
atvAudioConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3), )
if mibBuilder.loadTexts: atvAudioConfigTable.setStatus('current')
atvAudioConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1), )
atvAudioStateEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvAudioConfigEntry"))
atvAudioConfigEntry.setIndexNames(*atvAudioStateEntry.getIndexNames())
if mibBuilder.loadTexts: atvAudioConfigEntry.setStatus('current')
atvAudioCfgIrtNicam = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("irt", 1), ("nicam", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgIrtNicam.setStatus('current')
atvAudioCfgPreemphase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 2), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgPreemphase.setStatus('current')
atvAudioCfgNominalDeviationAF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20000, 75000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgNominalDeviationAF1.setStatus('current')
atvAudioCfgNominalDeviationAF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20000, 75000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgNominalDeviationAF2.setStatus('current')
atvAudioCfgPilotGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1900, -1200))).setUnits('1/100 dBu').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgPilotGain.setStatus('current')
atvAudioCfgPilot = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgPilot.setStatus('current')
atvAudioCfgSoundModeCarrier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 7), SoundMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSoundModeCarrier1.setStatus('current')
atvAudioCfgSoundModeCarrier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 8), SoundMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSoundModeCarrier2.setStatus('current')
atvAudioCfgLimiterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50000, 120000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgLimiterThreshold.setStatus('current')
atvAudioCfgDeviationLimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 10), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgDeviationLimiter.setStatus('current')
atvAudioCfgWarningAbove = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50000, 250000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgWarningAbove.setStatus('current')
atvAudioCfgPrecorrectionChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 12), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgPrecorrectionChannel1.setStatus('current')
atvAudioCfgPrecorrectionChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 13), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgPrecorrectionChannel2.setStatus('current')
atvAudioCfgInsetPoint1Channel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgInsetPoint1Channel1.setStatus('current')
atvAudioCfgInsetPoint1Channel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgInsetPoint1Channel2.setStatus('current')
atvAudioCfgSlope1Channel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSlope1Channel1.setStatus('current')
atvAudioCfgSlope1Channel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSlope1Channel2.setStatus('current')
atvAudioCfgInsetPoint2Channel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgInsetPoint2Channel1.setStatus('current')
atvAudioCfgInsetPoint2Channel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgInsetPoint2Channel2.setStatus('current')
atvAudioCfgSlope2Channel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSlope2Channel1.setStatus('current')
atvAudioCfgSlope2Channel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSlope2Channel2.setStatus('current')
atvNicam = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5))
atvNicamConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3), )
if mibBuilder.loadTexts: atvNicamConfigTable.setStatus('current')
atvNicamConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvNicamCfgTxIdx"), (0, "RS-XX9-ATV-MIB", "atvNicamCfgExcIdx"))
if mibBuilder.loadTexts: atvNicamConfigEntry.setStatus('current')
atvNicamCfgTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atvNicamCfgTxIdx.setStatus('current')
atvNicamCfgExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 2), IndexAB())
if mibBuilder.loadTexts: atvNicamCfgExcIdx.setStatus('current')
atvNicamCfgAudioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("equalFM", 1), ("monoData", 2), ("stereo", 3), ("dual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgAudioMode.setStatus('current')
atvNicamCfgPreemphasis = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 4), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgPreemphasis.setStatus('current')
atvNicamCfgReserveSound = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 5), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgReserveSound.setStatus('current')
atvNicamCfgNicamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("coder", 1), ("modulator", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgNicamMode.setStatus('current')
atvNicamCfgNicamRolloff = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("pct40", 2), ("pct100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgNicamRolloff.setStatus('current')
atvNicamCfgSoundMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 8), SoundMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgSoundMode.setStatus('current')
rsXx9AtvConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2))
rsXx9AtvCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 1))
atvBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 1, 1)).setObjects(("RS-XX9-ATV-MIB", "atvObjsCommon"), ("RS-XX9-ATV-MIB", "atvObjsVideo"), ("RS-XX9-ATV-MIB", "atvObjsAudio"), ("RS-XX9-ATV-MIB", "atvObjsNicam"), ("RS-XX9-ATV-MIB", "atvObjsInput"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvBasicCompliance = atvBasicCompliance.setStatus('current')
rsXx9AtvGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2))
atvObjsInput = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 1)).setObjects(("RS-XX9-ATV-MIB", "atvInpCmnDatalineInfo"), ("RS-XX9-ATV-MIB", "atvInpCmnInputImpedance"), ("RS-XX9-ATV-MIB", "atvInpVideoWhiteAmplitude"), ("RS-XX9-ATV-MIB", "atvInpVideoWhitePulseMonitoring"), ("RS-XX9-ATV-MIB", "atvInpVideoSyncAmplitude"), ("RS-XX9-ATV-MIB", "atvInpVideoSyncMonitoring"), ("RS-XX9-ATV-MIB", "atvInpVideoNominalAmplitude"), ("RS-XX9-ATV-MIB", "atvInpAudioCurrentLevel"), ("RS-XX9-ATV-MIB", "atvInpAudioClipping"), ("RS-XX9-ATV-MIB", "atvInpAudioNominalLevel"), ("RS-XX9-ATV-MIB", "atvInpNicamCurrentLevel"), ("RS-XX9-ATV-MIB", "atvInpNicamClipping"), ("RS-XX9-ATV-MIB", "atvInpVideoClipping"), ("RS-XX9-ATV-MIB", "atvInputIrdetoMode"), ("RS-XX9-ATV-MIB", "atvInpNicamGainAdjustment"), ("RS-XX9-ATV-MIB", "atvInpCmnAudioLowpass"), ("RS-XX9-ATV-MIB", "atvInpCmnNicam728Datastream"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsInput = atvObjsInput.setStatus('current')
atvObjsCommon = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 2)).setObjects(("RS-XX9-ATV-MIB", "atvCmnStCurrentAudioMode"), ("RS-XX9-ATV-MIB", "atvCmnCfgTvStandard"), ("RS-XX9-ATV-MIB", "atvCmnCfgSoundCarrierSelect"), ("RS-XX9-ATV-MIB", "atvCmnCfgCoderMode"), ("RS-XX9-ATV-MIB", "atvCmnCfgVisionSound1"), ("RS-XX9-ATV-MIB", "atvCmnCfgVisionSound2"), ("RS-XX9-ATV-MIB", "atvCmnCfgResidual"), ("RS-XX9-ATV-MIB", "atvCommonTestSignal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsCommon = atvObjsCommon.setStatus('current')
atvObjsVideo = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 3)).setObjects(("RS-XX9-ATV-MIB", "atvVideoStWhiteAmplitudeOutput"), ("RS-XX9-ATV-MIB", "atvVideoStMemoryGain"), ("RS-XX9-ATV-MIB", "atvVideoStCurrentGainSource"), ("RS-XX9-ATV-MIB", "atvVideoStLimiterActive"), ("RS-XX9-ATV-MIB", "atvVideoStSyncAmplitudeOutput"), ("RS-XX9-ATV-MIB", "atvVideoCfgAutomatic"), ("RS-XX9-ATV-MIB", "atvVideoCfgGainSource"), ("RS-XX9-ATV-MIB", "atvVideoCfgManualGain"), ("RS-XX9-ATV-MIB", "atvVideoCfgTestLine"), ("RS-XX9-ATV-MIB", "atvVideoCfgDataLine"), ("RS-XX9-ATV-MIB", "atvVideoCfgLimiter"), ("RS-XX9-ATV-MIB", "atvVideoCfgThreshold"), ("RS-XX9-ATV-MIB", "atvVideoCfgSyncImpulsRegeneration"), ("RS-XX9-ATV-MIB", "atvVideoCfgSyncAmplitude"), ("RS-XX9-ATV-MIB", "atvVideoCfgReceiverPreEqualization"), ("RS-XX9-ATV-MIB", "atvVideoCfgDiplexer"), ("RS-XX9-ATV-MIB", "atvVideoCfgDiplexerPeaking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsVideo = atvObjsVideo.setStatus('current')
atvObjsAudio = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 4)).setObjects(("RS-XX9-ATV-MIB", "atvAudioStCurrentDeviationCarrier1"), ("RS-XX9-ATV-MIB", "atvAudioStCurrentDeviationCarrier2"), ("RS-XX9-ATV-MIB", "atvAudioStCurrentPilotDeviation"), ("RS-XX9-ATV-MIB", "atvAudioStLimiterCarrier1"), ("RS-XX9-ATV-MIB", "atvAudioStLimiterCarrier2"), ("RS-XX9-ATV-MIB", "atvAudioCfgIrtNicam"), ("RS-XX9-ATV-MIB", "atvAudioCfgPreemphase"), ("RS-XX9-ATV-MIB", "atvAudioCfgNominalDeviationAF1"), ("RS-XX9-ATV-MIB", "atvAudioCfgNominalDeviationAF2"), ("RS-XX9-ATV-MIB", "atvAudioCfgPilotGain"), ("RS-XX9-ATV-MIB", "atvAudioCfgPilot"), ("RS-XX9-ATV-MIB", "atvAudioCfgSoundModeCarrier1"), ("RS-XX9-ATV-MIB", "atvAudioCfgSoundModeCarrier2"), ("RS-XX9-ATV-MIB", "atvAudioCfgLimiterThreshold"), ("RS-XX9-ATV-MIB", "atvAudioCfgDeviationLimiter"), ("RS-XX9-ATV-MIB", "atvAudioCfgWarningAbove"), ("RS-XX9-ATV-MIB", "atvAudioCfgPrecorrectionChannel1"), ("RS-XX9-ATV-MIB", "atvAudioCfgPrecorrectionChannel2"), ("RS-XX9-ATV-MIB", "atvAudioCfgInsetPoint1Channel1"), ("RS-XX9-ATV-MIB", "atvAudioCfgInsetPoint1Channel2"), ("RS-XX9-ATV-MIB", "atvAudioCfgSlope1Channel1"), ("RS-XX9-ATV-MIB", "atvAudioCfgSlope1Channel2"), ("RS-XX9-ATV-MIB", "atvAudioCfgInsetPoint2Channel1"), ("RS-XX9-ATV-MIB", "atvAudioCfgInsetPoint2Channel2"), ("RS-XX9-ATV-MIB", "atvAudioCfgSlope2Channel1"), ("RS-XX9-ATV-MIB", "atvAudioCfgSlope2Channel2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsAudio = atvObjsAudio.setStatus('current')
atvObjsNicam = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 5)).setObjects(("RS-XX9-ATV-MIB", "atvNicamCfgAudioMode"), ("RS-XX9-ATV-MIB", "atvNicamCfgPreemphasis"), ("RS-XX9-ATV-MIB", "atvNicamCfgReserveSound"), ("RS-XX9-ATV-MIB", "atvNicamCfgNicamMode"), ("RS-XX9-ATV-MIB", "atvNicamCfgNicamRolloff"), ("RS-XX9-ATV-MIB", "atvNicamCfgSoundMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsNicam = atvObjsNicam.setStatus('current')
atvObjsInputObsolete = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 6)).setObjects(("RS-XX9-ATV-MIB", "atvInpCmnInputIdx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsInputObsolete = atvObjsInputObsolete.setStatus('obsolete')
mibBuilder.exportSymbols("RS-XX9-ATV-MIB", atvAudioCfgSoundModeCarrier1=atvAudioCfgSoundModeCarrier1, atvObjsVideo=atvObjsVideo, atvInpCmnInputImpedance=atvInpCmnInputImpedance, atvObjsInputObsolete=atvObjsInputObsolete, atvAudioCfgLimiterThreshold=atvAudioCfgLimiterThreshold, atvVideoStMemoryGain=atvVideoStMemoryGain, atvAudioCfgDeviationLimiter=atvAudioCfgDeviationLimiter, atvCmnCfgCoderMode=atvCmnCfgCoderMode, atvInpVideoWhitePulseMonitoring=atvInpVideoWhitePulseMonitoring, atvInpNicamClipping=atvInpNicamClipping, atvInputVideoTable=atvInputVideoTable, atvInputAudioTable=atvInputAudioTable, atvVideoCfgManualGain=atvVideoCfgManualGain, atvInputCommonTable=atvInputCommonTable, atvAudioStCurrentDeviationCarrier2=atvAudioStCurrentDeviationCarrier2, atvAudioCfgInsetPoint1Channel2=atvAudioCfgInsetPoint1Channel2, atvAudioStLimiterCarrier1=atvAudioStLimiterCarrier1, atvInputNicamEntry=atvInputNicamEntry, atvAudioCfgSlope2Channel1=atvAudioCfgSlope2Channel1, atvCommonConfigTable=atvCommonConfigTable, atvNicamCfgSoundMode=atvNicamCfgSoundMode, atvCmnCfgSoundCarrierSelect=atvCmnCfgSoundCarrierSelect, atvVideoCfgDiplexer=atvVideoCfgDiplexer, atvVideoCfgThreshold=atvVideoCfgThreshold, atvNicamCfgNicamMode=atvNicamCfgNicamMode, atvAudioCfgWarningAbove=atvAudioCfgWarningAbove, atvNicamCfgNicamRolloff=atvNicamCfgNicamRolloff, atvNicamCfgPreemphasis=atvNicamCfgPreemphasis, atvAudioCfgNominalDeviationAF2=atvAudioCfgNominalDeviationAF2, atvInpAudioNominalLevel=atvInpAudioNominalLevel, atvInputAudioEntry=atvInputAudioEntry, atvCommonTestTable=atvCommonTestTable, atvAudioCfgInsetPoint2Channel2=atvAudioCfgInsetPoint2Channel2, atvCommonStateEntry=atvCommonStateEntry, atvAudioStateTable=atvAudioStateTable, atvAudioStateEntry=atvAudioStateEntry, atvInputVideoEntry=atvInputVideoEntry, rsXx9AtvGroups=rsXx9AtvGroups, atvInpCmnExcIdx=atvInpCmnExcIdx, rsXx9AtvNotifications=rsXx9AtvNotifications, atvInpCmnNicam728Datastream=atvInpCmnNicam728Datastream, atvAudioCfgPrecorrectionChannel1=atvAudioCfgPrecorrectionChannel1, atvInpVideoWhiteAmplitude=atvInpVideoWhiteAmplitude, atvInputNicamTable=atvInputNicamTable, atvAudio=atvAudio, atvObjsInput=atvObjsInput, atvVideoStTxIdx=atvVideoStTxIdx, PYSNMP_MODULE_ID=rsXx9AtvMibModule, atvAudioStExcIdx=atvAudioStExcIdx, atvVideoCfgSyncImpulsRegeneration=atvVideoCfgSyncImpulsRegeneration, atvAudioConfigEntry=atvAudioConfigEntry, atvAudioCfgSlope1Channel1=atvAudioCfgSlope1Channel1, atvInpVideoSyncMonitoring=atvInpVideoSyncMonitoring, atvInpCmnAudioLowpass=atvInpCmnAudioLowpass, rsXx9AtvMibModule=rsXx9AtvMibModule, atvAudioCfgSoundModeCarrier2=atvAudioCfgSoundModeCarrier2, atvBasicCompliance=atvBasicCompliance, atvInpCmnTxIdx=atvInpCmnTxIdx, atvCommonTestEntry=atvCommonTestEntry, atvVideoCfgDataLine=atvVideoCfgDataLine, atvAudioCfgPilotGain=atvAudioCfgPilotGain, atvVideoCfgDiplexerPeaking=atvVideoCfgDiplexerPeaking, atvNicamConfigTable=atvNicamConfigTable, atvInputIrdetoMode=atvInputIrdetoMode, atvVideoStCurrentGainSource=atvVideoStCurrentGainSource, atvNicamCfgAudioMode=atvNicamCfgAudioMode, atvAudioConfigTable=atvAudioConfigTable, atvNicamCfgTxIdx=atvNicamCfgTxIdx, atvVideoCfgTestLine=atvVideoCfgTestLine, atvCmnCfgResidual=atvCmnCfgResidual, atvAudioCfgPrecorrectionChannel2=atvAudioCfgPrecorrectionChannel2, atvCmnStExcIdx=atvCmnStExcIdx, atvAudioCfgSlope2Channel2=atvAudioCfgSlope2Channel2, atvCmnCfgVisionSound1=atvCmnCfgVisionSound1, atvAudioStCurrentPilotDeviation=atvAudioStCurrentPilotDeviation, atvInpAudioNfSignalIdx=atvInpAudioNfSignalIdx, atvCommonStateTable=atvCommonStateTable, atvCmnCfgVisionSound2=atvCmnCfgVisionSound2, atvVideo=atvVideo, atvObjsNicam=atvObjsNicam, atvVideoCfgSyncAmplitude=atvVideoCfgSyncAmplitude, atvAudioCfgInsetPoint1Channel1=atvAudioCfgInsetPoint1Channel1, atvCmnStCurrentAudioMode=atvCmnStCurrentAudioMode, atvObjsCommon=atvObjsCommon, atvNicam=atvNicam, atvAudioCfgIrtNicam=atvAudioCfgIrtNicam, atvInpCmnInputIdx=atvInpCmnInputIdx, atvVideoStSyncAmplitudeOutput=atvVideoStSyncAmplitudeOutput, atvAudioCfgSlope1Channel2=atvAudioCfgSlope1Channel2, atvCommon=atvCommon, atvVideoStLimiterActive=atvVideoStLimiterActive, atvInpNicamGainAdjustment=atvInpNicamGainAdjustment, atvVideoCfgGainSource=atvVideoCfgGainSource, SoundMode=SoundMode, atvCommonConfigEntry=atvCommonConfigEntry, atvVideoCfgReceiverPreEqualization=atvVideoCfgReceiverPreEqualization, atvAudioCfgPreemphase=atvAudioCfgPreemphase, atvNicamCfgExcIdx=atvNicamCfgExcIdx, atvAudioCfgPilot=atvAudioCfgPilot, atvVideoStExcIdx=atvVideoStExcIdx, atvAudioCfgNominalDeviationAF1=atvAudioCfgNominalDeviationAF1, atvInput=atvInput, rsXx9AtvObjects=rsXx9AtvObjects, rsXx9AtvConformance=rsXx9AtvConformance, atvVideoStWhiteAmplitudeOutput=atvVideoStWhiteAmplitudeOutput, atvInpNicamCurrentLevel=atvInpNicamCurrentLevel, atvVideoStateTable=atvVideoStateTable, atvVideoConfigEntry=atvVideoConfigEntry, atvInpVideoNominalAmplitude=atvInpVideoNominalAmplitude, atvAudioCfgInsetPoint2Channel1=atvAudioCfgInsetPoint2Channel1, atvVideoCfgAutomatic=atvVideoCfgAutomatic, atvVideoConfigTable=atvVideoConfigTable, atvObjsAudio=atvObjsAudio, atvInputCommonEntry=atvInputCommonEntry, atvCommonTestSignal=atvCommonTestSignal, atvVideoStateEntry=atvVideoStateEntry, atvNicamConfigEntry=atvNicamConfigEntry, atvAudioStLimiterCarrier2=atvAudioStLimiterCarrier2, atvAudioStTxIdx=atvAudioStTxIdx, atvCmnStTxIdx=atvCmnStTxIdx, atvNicamCfgReserveSound=atvNicamCfgReserveSound, rsXx9AtvCompliances=rsXx9AtvCompliances, atvInpVideoClipping=atvInpVideoClipping, atvCmnCfgTvStandard=atvCmnCfgTvStandard, atvInpAudioCurrentLevel=atvInpAudioCurrentLevel, atvAudioStCurrentDeviationCarrier1=atvAudioStCurrentDeviationCarrier1, atvVideoCfgLimiter=atvVideoCfgLimiter, atvInpAudioClipping=atvInpAudioClipping, atvInpCmnDatalineInfo=atvInpCmnDatalineInfo, atvInpVideoSyncAmplitude=atvInpVideoSyncAmplitude)
