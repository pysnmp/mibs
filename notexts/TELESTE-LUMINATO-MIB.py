#
# PySNMP MIB module TELESTE-LUMINATO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/teleste/TELESTE-LUMINATO-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:02:40 2024
# On host fv-az1215-438 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter32, Gauge32, Unsigned32, TimeTicks, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, NotificationType, iso, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "Gauge32", "Unsigned32", "TimeTicks", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "NotificationType", "iso", "ModuleIdentity", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
luminato, = mibBuilder.importSymbols("TELESTE-ROOT-MIB", "luminato")
Float, = mibBuilder.importSymbols("UCD-SNMP-MIB", "Float")
general = MibIdentifier((1, 3, 6, 1, 4, 1, 3715, 17, 1))
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('current')
generalStatus = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("statusAlert", 1), ("statusCritical", 2), ("statusError", 3), ("statusWarning", 4), ("statusNotice", 5), ("statusInformational", 6), ("statusDebug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalStatus.setStatus('current')
redundancyStatus = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 24, 32, 40, 64))).clone(namedValues=NamedValues(("redundancyStandalone", 1), ("redundancyMaster", 16), ("redundancyMasterHandover", 24), ("redundancyBackup", 32), ("redundancyBackupHandover", 40), ("redundancyError", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyStatus.setStatus('optional')
hwSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSerialNumber.setStatus('current')
hwType = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwType.setStatus('current')
hwVersion = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVersion.setStatus('current')
swVersion = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVersion.setStatus('current')
upTime = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upTime.setStatus('current')
cumulativeUptime = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumulativeUptime.setStatus('current')
statusCode = MibIdentifier((1, 3, 6, 1, 4, 1, 3715, 17, 2))
interfaceTypeTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 1), )
if mibBuilder.loadTexts: interfaceTypeTable.setStatus('current')
interfaceTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 1, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "interfaceTypeId"))
if mibBuilder.loadTexts: interfaceTypeEntry.setStatus('current')
interfaceTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2))))
if mibBuilder.loadTexts: interfaceTypeId.setStatus('current')
statusCodeDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2), )
if mibBuilder.loadTexts: statusCodeDeviceTable.setStatus('current')
statusCodeDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "scdObjectId"))
if mibBuilder.loadTexts: statusCodeDeviceEntry.setStatus('current')
scdObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scdObjectId.setStatus('current')
scdObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scdObjectValue.setStatus('current')
scdObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scdObjectDescriptor.setStatus('current')
scdObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scdObjectAlarmValue.setStatus('current')
statusCodeModuleTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3), )
if mibBuilder.loadTexts: statusCodeModuleTable.setStatus('current')
statusCodeModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "scmModuleId"), (0, "TELESTE-LUMINATO-MIB", "scmObjectId"))
if mibBuilder.loadTexts: statusCodeModuleEntry.setStatus('current')
scmModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmModuleId.setStatus('current')
scmObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmObjectId.setStatus('current')
scmObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmObjectValue.setStatus('current')
scmObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmObjectDescriptor.setStatus('current')
scmObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmObjectAlarmValue.setStatus('current')
statusCodeInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4), )
if mibBuilder.loadTexts: statusCodeInterfaceTable.setStatus('current')
statusCodeInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "interfaceTypeId"), (0, "TELESTE-LUMINATO-MIB", "scmModuleId"), (0, "TELESTE-LUMINATO-MIB", "sciInterfaceId"), (0, "TELESTE-LUMINATO-MIB", "sciObjectId"))
if mibBuilder.loadTexts: statusCodeInterfaceEntry.setStatus('current')
sciInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciInterfaceId.setStatus('current')
sciObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciObjectId.setStatus('current')
sciObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciObjectValue.setStatus('current')
sciObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciObjectDescriptor.setStatus('current')
sciObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciObjectAlarmValue.setStatus('current')
statusCodeTransportStreamTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5), )
if mibBuilder.loadTexts: statusCodeTransportStreamTable.setStatus('current')
statusCodeTransportStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "interfaceTypeId"), (0, "TELESTE-LUMINATO-MIB", "scmModuleId"), (0, "TELESTE-LUMINATO-MIB", "sciInterfaceId"), (0, "TELESTE-LUMINATO-MIB", "sctsTransportStreamId"), (0, "TELESTE-LUMINATO-MIB", "sctsObjectId"))
if mibBuilder.loadTexts: statusCodeTransportStreamEntry.setStatus('current')
sctsTransportStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctsTransportStreamId.setStatus('current')
sctsObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctsObjectId.setStatus('current')
sctsObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctsObjectValue.setStatus('current')
sctsObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctsObjectDescriptor.setStatus('current')
sctsObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctsObjectAlarmValue.setStatus('current')
statusCodeServiceTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6), )
if mibBuilder.loadTexts: statusCodeServiceTable.setStatus('current')
statusCodeServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "interfaceTypeId"), (0, "TELESTE-LUMINATO-MIB", "scmModuleId"), (0, "TELESTE-LUMINATO-MIB", "sciInterfaceId"), (0, "TELESTE-LUMINATO-MIB", "sctsTransportStreamId"), (0, "TELESTE-LUMINATO-MIB", "scsSID"), (0, "TELESTE-LUMINATO-MIB", "scsObjectId"))
if mibBuilder.loadTexts: statusCodeServiceEntry.setStatus('current')
scsSID = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsSID.setStatus('current')
scsObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsObjectId.setStatus('current')
scsObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsObjectValue.setStatus('current')
scsObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsObjectDescriptor.setStatus('current')
scsServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsServiceName.setStatus('current')
scsObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsObjectAlarmValue.setStatus('current')
statusCodePidTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7), )
if mibBuilder.loadTexts: statusCodePidTable.setStatus('current')
statusCodePidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "interfaceTypeId"), (0, "TELESTE-LUMINATO-MIB", "scmModuleId"), (0, "TELESTE-LUMINATO-MIB", "sciInterfaceId"), (0, "TELESTE-LUMINATO-MIB", "sctsTransportStreamId"), (0, "TELESTE-LUMINATO-MIB", "scpPID"), (0, "TELESTE-LUMINATO-MIB", "scpObjectId"))
if mibBuilder.loadTexts: statusCodePidEntry.setStatus('current')
scpPID = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scpPID.setStatus('current')
scpObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scpObjectId.setStatus('current')
scpObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scpObjectValue.setStatus('current')
scpObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scpObjectDescriptor.setStatus('current')
scpObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scpObjectAlarmValue.setStatus('current')
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 3715, 17, 3))
ifExtTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1), )
if mibBuilder.loadTexts: ifExtTable.setStatus('current')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1) + (1000, ), Integer32())
ifExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: ifExtEntry.setStatus('current')
ifExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ifExtIndex.setStatus('current')
ifExtName = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifExtName.setStatus('current')
ifExtModule = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifExtModule.setStatus('current')
ifExtPhysInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifExtPhysInterface.setStatus('current')
ifExtLogiInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifExtLogiInterface.setStatus('current')
ifExtDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("input", 1), ("output", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifExtDirection.setStatus('current')
signalPhysTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2), )
if mibBuilder.loadTexts: signalPhysTable.setStatus('current')
signalPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "ifExtIndex"))
if mibBuilder.loadTexts: signalPhysEntry.setStatus('current')
signalSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalSnr.setStatus('current')
signalSnrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signalSnrMin.setStatus('current')
signalSnrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signalSnrMax.setStatus('current')
signalCcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signalCcErrors.setStatus('current')
signalBer = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalBer.setStatus('current')
signalVber = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalVber.setStatus('current')
transferTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 3, 3), )
if mibBuilder.loadTexts: transferTable.setStatus('current')
transferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 3, 3, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "ifExtIndex"))
if mibBuilder.loadTexts: transferEntry.setStatus('current')
transBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transBitrate.setStatus('current')
transBitrateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transBitrateMin.setStatus('current')
transBitrateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transBitrateMax.setStatus('current')
proMpegFecTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20), )
if mibBuilder.loadTexts: proMpegFecTable.setStatus('current')
proMpegFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "ifExtIndex"))
if mibBuilder.loadTexts: proMpegFecEntry.setStatus('current')
fecValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecValidPkts.setStatus('current')
fecUncorrectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecUncorrectedPkts.setStatus('current')
fecCorrectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecCorrectedPkts.setStatus('current')
fecDuplicatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecDuplicatePkts.setStatus('current')
fecReorderedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecReorderedPkts.setStatus('current')
fecIncorrectSeqNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecIncorrectSeqNumbers.setStatus('current')
fecDiscontinuities = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecDiscontinuities.setStatus('current')
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3715, 17, 4))
statusFlags = MibIdentifier((1, 3, 6, 1, 4, 1, 3715, 17, 5))
moduleStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2), )
if mibBuilder.loadTexts: moduleStatusTable.setStatus('current')
moduleStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "moduleId"))
if mibBuilder.loadTexts: moduleStatusEntry.setStatus('current')
moduleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: moduleId.setStatus('current')
modulePidConflictStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pidOk", 1), ("pidConflict", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePidConflictStatus.setStatus('current')
moduleTemperatureHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperatureNominal", 1), ("temperatureHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTemperatureHigh.setStatus('current')
moduleTemperatureLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperatureNominal", 1), ("temperatureLow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTemperatureLow.setStatus('current')
modulePidCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePidCapaStatus.setStatus('current')
modulePsisiCaptureCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePsisiCaptureCapaStatus.setStatus('current')
moduleSidAllocStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sidAllocOk", 1), ("sidAllocCapaExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSidAllocStatus.setStatus('current')
moduleCaDetectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleOk", 1), ("moduleMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCaDetectStatus.setStatus('current')
moduleDetectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleOk", 1), ("moduleUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDetectStatus.setStatus('current')
moduleVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voltageNominal", 1), ("voltageHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVoltageHigh.setStatus('current')
moduleVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voltageNominal", 1), ("voltageLow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVoltageLow.setStatus('current')
moduleCurrentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currentNominal", 1), ("currentHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCurrentHigh.setStatus('current')
moduleCurrentLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currentNominal", 1), ("currentLow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCurrentLow.setStatus('current')
moduleDaemonInitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("daemonNominal", 1), ("daemonInitFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDaemonInitStatus.setStatus('current')
moduleDriverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4129), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("driverNominal", 1), ("driverFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDriverStatus.setStatus('current')
moduleHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hwNominal", 1), ("hwFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHwStatus.setStatus('current')
moduleFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4131), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fanNominal", 1), ("fanFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFanStatus.setStatus('current')
modulePowerSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4132), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("runningOnMainPower", 1), ("runningOnBackupPower", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePowerSourceStatus.setStatus('current')
modulePsuOverloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("psuNominal", 1), ("psuOverloaded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePsuOverloadStatus.setStatus('current')
moduleBootupProgressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4134), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleBootingUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBootupProgressStatus.setStatus('current')
moduleBootupRetryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4135), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleBootingRetrying", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBootupRetryStatus.setStatus('current')
moduleBootupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4136), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleBootFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBootupStatus.setStatus('current')
moduleShutdownProgressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4137), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleShuttingDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleShutdownProgressStatus.setStatus('current')
moduleConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4138), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connectionNominal", 1), ("connectionLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConnStatus.setStatus('current')
moduleCompatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4139), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleIncompatible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCompatStatus.setStatus('current')
moduleUpcPowerLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4147), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ucpPowerNominal", 1), ("ucpPowerLow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleUpcPowerLow.setStatus('current')
moduleUpcPowerHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4148), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ucpPowerNominal", 1), ("ucpPowerHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleUpcPowerHigh.setStatus('current')
moduleCalibrDataStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4149), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("calibrationDataNominal", 1), ("calibrationDataMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCalibrDataStatus.setStatus('current')
moduleCalibrDataCheckStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4150), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checkOk", 1), ("checkSkipped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCalibrDataCheckStatus.setStatus('current')
moduleDescrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4151), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descramblingOk", 1), ("descramblingFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDescrStatus.setStatus('current')
moduleBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4153), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleSwitchedToBackup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupStatus.setStatus('current')
moduleNitOutputsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4154), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitOutputsNominal", 1), ("noSupportedNitOutputs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitOutputsStatus.setStatus('current')
moduleNitSelectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitSelectionNominal", 1), ("noSelectedNitOutputs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitSelectionStatus.setStatus('current')
moduleNitConfChangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4156), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitConfNominal", 1), ("nitConfChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitConfChangeStatus.setStatus('current')
moduleNitDataQueryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4157), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitDataQueryNominal", 1), ("nitDataQueryFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitDataQueryStatus.setStatus('current')
moduleNitWizardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4158), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitWizardNominal", 1), ("nitWizardFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitWizardStatus.setStatus('current')
moduleQamFreqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qamFreqUnique", 1), ("qamFreqDuplicate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleQamFreqStatus.setStatus('current')
moduleOutputSidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4173), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sidOk", 1), ("sidConflict", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleOutputSidStatus.setStatus('current')
moduleConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4175), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configurationOk", 1), ("configurationUnsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConfStatus.setStatus('current')
moduleFreqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4176), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freqOk", 1), ("freqOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFreqStatus.setStatus('current')
moduleOutputPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4177), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerOk", 1), ("powerOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleOutputPowerStatus.setStatus('current')
moduleSymrateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4178), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("symbolRateOk", 1), ("symbolRateOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSymrateStatus.setStatus('current')
moduleChanDistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4179), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chanDistOk", 1), ("chanDistTooNarrow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleChanDistStatus.setStatus('current')
moduleLnbVoltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4180), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lnbVoltageOk", 1), ("lnbVoltageInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLnbVoltStatus.setStatus('current')
moduleFecRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4181), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fecRateOk", 1), ("fecRateInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFecRateStatus.setStatus('current')
moduleLnbCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4182), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lnbCurrentOk", 1), ("lnbCurrentInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLnbCurrStatus.setStatus('current')
moduleFreqOffsetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4183), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freqOffsetOk", 1), ("freqOffsetInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFreqOffsetStatus.setStatus('current')
moduleDescrRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4185), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descramblingNominal", 1), ("descramblingRestarting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDescrRestartStatus.setStatus('current')
moduleCamRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4186), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("camNominal", 1), ("camRestarting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCamRestartStatus.setStatus('current')
moduleEcmgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4187), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecmgNominal", 1), ("ecmgFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEcmgStatus.setStatus('current')
moduleEcmStreamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4188), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecmStreamNominal", 1), ("ecmStreamFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEcmStreamStatus.setStatus('current')
moduleEmmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4189), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("emmNominal", 1), ("emmFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEmmStatus.setStatus('current')
moduleEmmStreamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4190), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("emmStreamNominal", 1), ("emmStreamFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEmmStreamStatus.setStatus('current')
moduleEcmgConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4191), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecmgConnNominal", 1), ("ecmgNotConnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEcmgConnStatus.setStatus('current')
moduleEmmConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4192), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("emmConnNominal", 1), ("emmNotConnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEmmConnStatus.setStatus('current')
moduleEcmgSpareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4194), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecmgNominal", 1), ("ecmgSwitchedToSpare", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEcmgSpareStatus.setStatus('current')
moduleBootloaderAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4195), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootloaderOk", 1), ("bootloaderObsolete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBootloaderAvailStatus.setStatus('current')
moduleBl1UpdateProgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4196), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootloaderNominal", 1), ("bootloaderUpdating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBl1UpdateProgStatus.setStatus('current')
moduleBl2UpdateProgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4197), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootloaderNominal", 1), ("bootloaderUpdating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBl2UpdateProgStatus.setStatus('current')
moduleBl1UpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4198), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootloaderNominal", 1), ("bootloaderUpdateFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBl1UpdateStatus.setStatus('current')
moduleBl2UpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4199), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootloaderNominal", 1), ("bootloaderUpdateFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBl2UpdateStatus.setStatus('current')
moduleActiveBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4203), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backupPassive", 1), ("backupActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleActiveBackupStatus.setStatus('current')
moduleConfProgressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleConfiguring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConfProgressStatus.setStatus('current')
modulePresenceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("noModule", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePresenceStatus.setStatus('current')
moduleProcessRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("processesNominal", 1), ("processRestarted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleProcessRestartStatus.setStatus('current')
moduleBackupLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4209), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupLicenseStatus.setStatus('current')
modulePsisiEditorLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePsisiEditorLicenseStatus.setStatus('current')
moduleMuxLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4211), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMuxLicenseStatus.setStatus('current')
moduleDemuxLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4212), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDemuxLicenseStatus.setStatus('current')
moduleDvbLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDvbLicenseStatus.setStatus('current')
moduleMsdLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4214), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMsdLicenseStatus.setStatus('current')
moduleDvbs2LicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDvbs2LicenseStatus.setStatus('current')
moduleDvbt2LicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4216), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDvbt2LicenseStatus.setStatus('current')
moduleScsLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4217), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseValid", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleScsLicenseStatus.setStatus('current')
moduleCliLoginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4218), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cliNotLoggedIn", 1), ("cliLoggedIn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCliLoginStatus.setStatus('current')
moduleRedunActivationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4222), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redundancyPassive", 1), ("redundancyActivated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleRedunActivationStatus.setStatus('current')
moduleExtioPinSignalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4223), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extioPinNominal", 1), ("extioPinSignaled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleExtioPinSignalingStatus.setStatus('current')
moduleBackupPsuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4224), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backupPsuNominal", 1), ("backupPsuFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupPsuStatus.setStatus('current')
moduleIntrusionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4225), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intrusionNominal", 1), ("intrusionDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIntrusionStatus.setStatus('current')
moduleRedunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4227), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redundancyOk", 1), ("redundancyFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleRedunStatus.setStatus('current')
moduleBackupHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4230), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backupHwOk", 1), ("backupHwNotSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupHwStatus.setStatus('current')
moduleSwUpdateProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4231), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("swUpdateInactive", 1), ("swUpdateInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwUpdateProgress.setStatus('current')
moduleSwUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4233), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("swNominal", 1), ("swUpdateFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwUpdateStatus.setStatus('current')
moduleEitLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4235), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseValid", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEitLicenseStatus.setStatus('current')
moduleDescramblingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4237), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descramblingNominal", 1), ("descramblingFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDescramblingStatus.setStatus('current')
moduleDvbTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4243), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dvbTimeNominal", 1), ("dvbTimeMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDvbTimeStatus.setStatus('current')
moduleTunerDcFeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4245), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currentNominal", 1), ("currentOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTunerDcFeedStatus.setStatus('current')
moduleTunerPlpSelectionReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4247), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plpSelectionOk", 1), ("plpSelectionRequired", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTunerPlpSelectionReqStatus.setStatus('current')
moduleTunerPlpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4248), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plpSelectionValid", 1), ("plpSelectionNotValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTunerPlpStatus.setStatus('current')
moduleTunerHierarchyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4249), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hierarchyOk", 1), ("hierarchyInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTunerHierarchyStatus.setStatus('current')
moduleEcmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4250), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecmNominal", 1), ("ecmMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEcmStatus.setStatus('current')
moduleScramConflictStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4251), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scramblingNominal", 1), ("scramblingConflict", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleScramConflictStatus.setStatus('current')
moduleScramSharedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4252), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scramblingNominal", 1), ("scramblingSharedComponent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleScramSharedStatus.setStatus('current')
moduleBackupVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4253), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voltageNominal", 1), ("voltageHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupVoltageHigh.setStatus('current')
moduleBackupVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4254), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voltageNominal", 1), ("voltageLow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupVoltageLow.setStatus('current')
moduleSdtTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4255), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sdtTableOk", 1), ("invalidSdtTableTemplate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSdtTableStatus.setStatus('current')
moduleDescramblingRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4256), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descramblingNominal", 1), ("descramblingRestarting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDescramblingRestart.setStatus('current')
moduleCaModuleRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4257), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("caModuleNominal", 1), ("caModuleRestarting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCaModuleRestart.setStatus('current')
moduleCaMenuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4258), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("caMenuNominal", 1), ("caMenuOpen", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCaMenuStatus.setStatus('current')
moduleInvalidCamRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4259), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("camRoutingNominal", 1), ("camRoutingInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInvalidCamRouting.setStatus('current')
moduleNitSidConflict = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4260), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitSidNominal", 1), ("nitSidConflict", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitSidConflict.setStatus('current')
moduleLicenseMissingFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4262), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("licenseMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLicenseMissingFEC.setStatus('current')
moduleFecCorrectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4263), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("correctionNominal", 1), ("correctionOverload", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFecCorrectionStatus.setStatus('current')
moduleFecPacketDropStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4264), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packetsNominal", 1), ("packetsDropped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFecPacketDropStatus.setStatus('current')
moduleFecMediaPktsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4265), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packetsNominal", 1), ("packetsDiscarded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFecMediaPktsStatus.setStatus('current')
moduleSfpLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4269), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sfpLinkNominal", 1), ("sfpLinkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSfpLinkStatus.setStatus('current')
moduleBackupSyncModeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4272), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeNominal", 1), ("modeOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncModeOff.setStatus('current')
moduleBackupSyncModeManual = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4273), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeNominal", 1), ("modeManual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncModeManual.setStatus('current')
moduleBackupSyncModeAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4274), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeNominal", 1), ("modeAuto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncModeAuto.setStatus('current')
moduleBackupSyncConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4275), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configurationNominal", 1), ("configurationChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncConfStatus.setStatus('current')
moduleBackupSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4276), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("syncNominal", 1), ("synchronizing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncStatus.setStatus('current')
moduleBackupSyncSwCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4278), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("swCompatible", 1), ("swIncompatible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncSwCompatibility.setStatus('current')
moduleBackupSyncHwCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4279), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hwCompatible", 1), ("hwIncompatible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncHwCompatibility.setStatus('current')
moduleBackupSyncConfFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4280), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configurationNominal", 1), ("configurationFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncConfFaultStatus.setStatus('current')
moduleBackupSyncConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4281), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connectionNominal", 1), ("connectionLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncConnectionStatus.setStatus('current')
moduleBackupSyncFromBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4283), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("syncNominal", 1), ("syncNotPossible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncFromBackupStatus.setStatus('current')
moduleBackupSyncRebootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4284), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pairDevNominal", 1), ("pairDevRebooting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncRebootStatus.setStatus('current')
moduleBackupSyncLicenseCompatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4285), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licensesCompatible", 1), ("licensesIncompatible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncLicenseCompatStatus.setStatus('current')
moduleBackupSyncLicenseCompareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4286), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseNominal", 1), ("licenseComparing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncLicenseCompareStatus.setStatus('current')
moduleDeviceFirstBootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4288), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("firstBootNominal", 1), ("firstBootInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDeviceFirstBootStatus.setStatus('current')
modulePartitionConfigurationBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4289), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configurationNominal", 1), ("configurationBackupInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePartitionConfigurationBackup.setStatus('current')
modulePartitionConfigurationRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4290), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configurationNominal", 1), ("configurationRestoreInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePartitionConfigurationRestore.setStatus('current')
moduleSwRevertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4291), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("swNominal", 1), ("swRevertInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwRevertStatus.setStatus('current')
moduleMaxOutputPidsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4292), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pidsNominal", 1), ("maxPidsUsed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMaxOutputPidsStatus.setStatus('current')
moduleUserRebootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4293), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleRebootedByUser", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleUserRebootStatus.setStatus('current')
moduleRemovalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4294), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleRemoved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleRemovalStatus.setStatus('current')
moduleInsertionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4295), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleInserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInsertionStatus.setStatus('current')
moduleSptsInputConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4296), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sptsInputNominal", 1), ("inputNotSpts", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSptsInputConfStatus.setStatus('current')
ifStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3), )
if mibBuilder.loadTexts: ifStatusTable.setStatus('current')
ifStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "moduleId"), (0, "TELESTE-LUMINATO-MIB", "ifDirection"), (0, "TELESTE-LUMINATO-MIB", "ifId"))
if mibBuilder.loadTexts: ifStatusEntry.setStatus('current')
ifId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: ifId.setStatus('current')
ifDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("input", 1), ("output", 2), ("both", 3))))
if mibBuilder.loadTexts: ifDirection.setStatus('current')
ifSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1, 4097), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signalOk", 1), ("signalMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSignalStatus.setStatus('current')
ifAsiLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1, 4102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkOk", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifAsiLinkStatus.setStatus('current')
ifLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1, 4226), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkOk", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLinkStatus.setStatus('current')
tsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4), )
if mibBuilder.loadTexts: tsStatusTable.setStatus('current')
tsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "moduleId"), (0, "TELESTE-LUMINATO-MIB", "ifDirection"), (0, "TELESTE-LUMINATO-MIB", "ifId"))
if mibBuilder.loadTexts: tsStatusEntry.setStatus('current')
tsPidRemappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pidNominal", 1), ("pidRemapped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPidRemappingStatus.setStatus('current')
tsManualTableInsertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insertOk", 1), ("insertFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsManualTableInsertStatus.setStatus('current')
tsPassthruDupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("servicesNominal", 1), ("servicesBlocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPassthruDupStatus.setStatus('current')
tsSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4098), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("syncOk", 1), ("noSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsSyncStatus.setStatus('current')
tsRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4099), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rxNominal", 1), ("rxErrors", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsRxStatus.setStatus('current')
tsInputBufferStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bufferNominal", 1), ("bufferOverflow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsInputBufferStatus.setStatus('current')
tsNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("netOk", 1), ("netForbidden", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsNetworkStatus.setStatus('current')
tsPsisiCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPsisiCapaStatus.setStatus('current')
tsMultiplexDiscardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("muxNominal", 1), ("muxPacketsDiscarded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsMultiplexDiscardStatus.setStatus('current')
tsMultiplexDelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4228), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("muxNominal", 1), ("muxPacketsDelayed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsMultiplexDelayStatus.setStatus('current')
tsCbrOversubscriptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4229), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbrNominal", 1), ("cbrOversubscription", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsCbrOversubscriptionStatus.setStatus('current')
tsCbrDiscardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4236), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbrNominal", 1), ("cbrPacketsDiscarded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsCbrDiscardStatus.setStatus('current')
tsIpInputCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4238), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpInputCapaStatus.setStatus('current')
tsEitReinsertCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4239), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsEitReinsertCapaStatus.setStatus('current')
tsSectionCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4240), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsSectionCapaStatus.setStatus('current')
tsRtpInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4241), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inputOk", 1), ("inputPacketsDropped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsRtpInputStatus.setStatus('current')
tsRtpSeqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4242), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seqOk", 1), ("seqAnomalies", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsRtpSeqStatus.setStatus('current')
tsTdtTotGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4246), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tdtTotOk", 1), ("tdtTotNotGenerated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTdtTotGenStatus.setStatus('current')
tsSttGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4261), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sttOk", 1), ("sttNotGenerated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsSttGenStatus.setStatus('current')
tsFecPacketCorrectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4266), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packetsNominal", 1), ("fecCorrectedPackets", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsFecPacketCorrectionStatus.setStatus('current')
tsFecInputAnomalyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4267), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fecInputNominal", 1), ("fecInputAnomalies", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsFecInputAnomalyStatus.setStatus('current')
tsFecCorrectionCapacityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4268), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("correctionCapacityNominal", 1), ("correctionCapacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsFecCorrectionCapacityStatus.setStatus('current')
tsIpMirrorOutputPacketLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4297), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipOutputNominal", 1), ("ipOutputPacketsDiscarded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpMirrorOutputPacketLossStatus.setStatus('current')
serviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 5, 5), )
if mibBuilder.loadTexts: serviceStatusTable.setStatus('current')
serviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 5, 5, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "moduleId"), (0, "TELESTE-LUMINATO-MIB", "ifDirection"), (0, "TELESTE-LUMINATO-MIB", "ifId"), (0, "TELESTE-LUMINATO-MIB", "serviceId"))
if mibBuilder.loadTexts: serviceStatusEntry.setStatus('current')
serviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: serviceId.setStatus('current')
serviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("servicePresent", 1), ("serviceMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceStatus.setStatus('current')
pidStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 5, 6), )
if mibBuilder.loadTexts: pidStatusTable.setStatus('current')
pidStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 5, 6, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "moduleId"), (0, "TELESTE-LUMINATO-MIB", "ifDirection"), (0, "TELESTE-LUMINATO-MIB", "ifId"), (0, "TELESTE-LUMINATO-MIB", "pId"))
if mibBuilder.loadTexts: pidStatusEntry.setStatus('current')
pId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: pId.setStatus('current')
pidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pidPresent", 1), ("pidMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidStatus.setStatus('current')
mibBuilder.exportSymbols("TELESTE-LUMINATO-MIB", moduleInvalidCamRouting=moduleInvalidCamRouting, signalPhysTable=signalPhysTable, scsObjectDescriptor=scsObjectDescriptor, moduleTemperatureLow=moduleTemperatureLow, tsStatusTable=tsStatusTable, statusCodeTransportStreamTable=statusCodeTransportStreamTable, tsFecInputAnomalyStatus=tsFecInputAnomalyStatus, moduleBackupSyncConnectionStatus=moduleBackupSyncConnectionStatus, moduleBackupSyncRebootStatus=moduleBackupSyncRebootStatus, moduleBackupSyncLicenseCompatStatus=moduleBackupSyncLicenseCompatStatus, sctsObjectValue=sctsObjectValue, moduleId=moduleId, moduleTemperatureHigh=moduleTemperatureHigh, moduleChanDistStatus=moduleChanDistStatus, moduleEcmgConnStatus=moduleEcmgConnStatus, moduleScsLicenseStatus=moduleScsLicenseStatus, moduleCurrentHigh=moduleCurrentHigh, moduleBackupLicenseStatus=moduleBackupLicenseStatus, tsSectionCapaStatus=tsSectionCapaStatus, moduleEitLicenseStatus=moduleEitLicenseStatus, moduleBackupVoltageLow=moduleBackupVoltageLow, deviceName=deviceName, moduleCalibrDataStatus=moduleCalibrDataStatus, moduleLnbCurrStatus=moduleLnbCurrStatus, moduleMuxLicenseStatus=moduleMuxLicenseStatus, ifExtModule=ifExtModule, moduleBl1UpdateProgStatus=moduleBl1UpdateProgStatus, scmObjectValue=scmObjectValue, moduleBackupSyncSwCompatibility=moduleBackupSyncSwCompatibility, hwType=hwType, ifStatusTable=ifStatusTable, moduleSfpLinkStatus=moduleSfpLinkStatus, moduleFreqStatus=moduleFreqStatus, moduleCompatStatus=moduleCompatStatus, moduleEcmStatus=moduleEcmStatus, generalStatus=generalStatus, moduleOutputSidStatus=moduleOutputSidStatus, moduleBl2UpdateStatus=moduleBl2UpdateStatus, moduleScramConflictStatus=moduleScramConflictStatus, statusCodeServiceTable=statusCodeServiceTable, ifSignalStatus=ifSignalStatus, moduleNitWizardStatus=moduleNitWizardStatus, moduleDetectStatus=moduleDetectStatus, moduleEcmgStatus=moduleEcmgStatus, moduleVoltageLow=moduleVoltageLow, moduleBackupSyncModeOff=moduleBackupSyncModeOff, scsSID=scsSID, modulePowerSourceStatus=modulePowerSourceStatus, ifStatusEntry=ifStatusEntry, sctsObjectAlarmValue=sctsObjectAlarmValue, sciObjectDescriptor=sciObjectDescriptor, sctsObjectId=sctsObjectId, moduleNitConfChangeStatus=moduleNitConfChangeStatus, moduleOutputPowerStatus=moduleOutputPowerStatus, hwSerialNumber=hwSerialNumber, modulePidConflictStatus=modulePidConflictStatus, moduleConfStatus=moduleConfStatus, moduleBackupVoltageHigh=moduleBackupVoltageHigh, moduleSptsInputConfStatus=moduleSptsInputConfStatus, moduleNitSidConflict=moduleNitSidConflict, moduleStatusTable=moduleStatusTable, tsMultiplexDelayStatus=tsMultiplexDelayStatus, moduleDescrRestartStatus=moduleDescrRestartStatus, moduleBl2UpdateProgStatus=moduleBl2UpdateProgStatus, moduleBackupHwStatus=moduleBackupHwStatus, tsNetworkStatus=tsNetworkStatus, tsSyncStatus=tsSyncStatus, proMpegFecEntry=proMpegFecEntry, moduleRedunStatus=moduleRedunStatus, moduleLicenseMissingFEC=moduleLicenseMissingFEC, pysmiFakeCol1000=pysmiFakeCol1000, transferTable=transferTable, ifExtEntry=ifExtEntry, moduleBootupStatus=moduleBootupStatus, scsObjectAlarmValue=scsObjectAlarmValue, modulePsisiCaptureCapaStatus=modulePsisiCaptureCapaStatus, moduleFecRateStatus=moduleFecRateStatus, tsSttGenStatus=tsSttGenStatus, moduleConnStatus=moduleConnStatus, moduleNitSelectionStatus=moduleNitSelectionStatus, notifications=notifications, moduleCaMenuStatus=moduleCaMenuStatus, moduleEmmConnStatus=moduleEmmConnStatus, moduleLnbVoltStatus=moduleLnbVoltStatus, ifId=ifId, signalPhysEntry=signalPhysEntry, scmObjectDescriptor=scmObjectDescriptor, fecDuplicatePkts=fecDuplicatePkts, fecDiscontinuities=fecDiscontinuities, moduleBootupRetryStatus=moduleBootupRetryStatus, moduleBackupSyncLicenseCompareStatus=moduleBackupSyncLicenseCompareStatus, statusCodePidTable=statusCodePidTable, ifDirection=ifDirection, ifAsiLinkStatus=ifAsiLinkStatus, tsStatusEntry=tsStatusEntry, scmModuleId=scmModuleId, moduleRemovalStatus=moduleRemovalStatus, moduleUserRebootStatus=moduleUserRebootStatus, moduleDvbt2LicenseStatus=moduleDvbt2LicenseStatus, statusCodeTransportStreamEntry=statusCodeTransportStreamEntry, moduleBackupSyncHwCompatibility=moduleBackupSyncHwCompatibility, sctsTransportStreamId=sctsTransportStreamId, moduleBootloaderAvailStatus=moduleBootloaderAvailStatus, signalVber=signalVber, moduleShutdownProgressStatus=moduleShutdownProgressStatus, swVersion=swVersion, moduleCalibrDataCheckStatus=moduleCalibrDataCheckStatus, moduleMsdLicenseStatus=moduleMsdLicenseStatus, fecUncorrectedPkts=fecUncorrectedPkts, moduleHwStatus=moduleHwStatus, moduleCamRestartStatus=moduleCamRestartStatus, moduleDvbLicenseStatus=moduleDvbLicenseStatus, moduleBackupSyncConfStatus=moduleBackupSyncConfStatus, tsCbrOversubscriptionStatus=tsCbrOversubscriptionStatus, serviceId=serviceId, tsRxStatus=tsRxStatus, general=general, moduleNitDataQueryStatus=moduleNitDataQueryStatus, statusCodeModuleTable=statusCodeModuleTable, moduleBackupSyncModeAuto=moduleBackupSyncModeAuto, tsEitReinsertCapaStatus=tsEitReinsertCapaStatus, tsRtpInputStatus=tsRtpInputStatus, moduleActiveBackupStatus=moduleActiveBackupStatus, scmObjectAlarmValue=scmObjectAlarmValue, signalSnrMax=signalSnrMax, tsTdtTotGenStatus=tsTdtTotGenStatus, pId=pId, transferEntry=transferEntry, moduleBackupSyncStatus=moduleBackupSyncStatus, moduleEmmStreamStatus=moduleEmmStreamStatus, fecValidPkts=fecValidPkts, signalSnr=signalSnr, moduleDvbs2LicenseStatus=moduleDvbs2LicenseStatus, moduleSwUpdateProgress=moduleSwUpdateProgress, interface=interface, fecIncorrectSeqNumbers=fecIncorrectSeqNumbers, moduleCurrentLow=moduleCurrentLow, moduleDescramblingStatus=moduleDescramblingStatus, moduleBackupSyncFromBackupStatus=moduleBackupSyncFromBackupStatus, moduleFreqOffsetStatus=moduleFreqOffsetStatus, tsCbrDiscardStatus=tsCbrDiscardStatus, serviceStatusTable=serviceStatusTable, tsPidRemappingStatus=tsPidRemappingStatus, moduleFecPacketDropStatus=moduleFecPacketDropStatus, moduleEcmStreamStatus=moduleEcmStreamStatus, tsFecPacketCorrectionStatus=tsFecPacketCorrectionStatus, scpObjectId=scpObjectId, tsInputBufferStatus=tsInputBufferStatus, moduleBackupSyncConfFaultStatus=moduleBackupSyncConfFaultStatus, statusCodePidEntry=statusCodePidEntry, scmObjectId=scmObjectId, statusCodeInterfaceEntry=statusCodeInterfaceEntry, upTime=upTime, ifExtTable=ifExtTable, ifExtPhysInterface=ifExtPhysInterface, serviceStatus=serviceStatus, scpObjectValue=scpObjectValue, moduleTunerPlpSelectionReqStatus=moduleTunerPlpSelectionReqStatus, statusCodeModuleEntry=statusCodeModuleEntry, moduleDvbTimeStatus=moduleDvbTimeStatus, moduleTunerPlpStatus=moduleTunerPlpStatus, sctsObjectDescriptor=sctsObjectDescriptor, sciObjectValue=sciObjectValue, scdObjectAlarmValue=scdObjectAlarmValue, tsIpInputCapaStatus=tsIpInputCapaStatus, moduleQamFreqStatus=moduleQamFreqStatus, sciObjectId=sciObjectId, moduleConfProgressStatus=moduleConfProgressStatus, redundancyStatus=redundancyStatus, cumulativeUptime=cumulativeUptime, transBitrate=transBitrate, pidStatusEntry=pidStatusEntry, interfaceTypeEntry=interfaceTypeEntry, moduleNitOutputsStatus=moduleNitOutputsStatus, scpPID=scpPID, ifExtDirection=ifExtDirection, modulePsuOverloadStatus=modulePsuOverloadStatus, scpObjectDescriptor=scpObjectDescriptor, moduleUpcPowerHigh=moduleUpcPowerHigh, moduleBackupStatus=moduleBackupStatus, fecReorderedPkts=fecReorderedPkts, moduleCaDetectStatus=moduleCaDetectStatus, ifExtName=ifExtName, statusFlags=statusFlags, scsObjectValue=scsObjectValue, moduleDriverStatus=moduleDriverStatus, moduleBl1UpdateStatus=moduleBl1UpdateStatus, modulePresenceStatus=modulePresenceStatus, moduleFanStatus=moduleFanStatus, moduleStatusEntry=moduleStatusEntry, moduleMaxOutputPidsStatus=moduleMaxOutputPidsStatus, tsPassthruDupStatus=tsPassthruDupStatus, tsIpMirrorOutputPacketLossStatus=tsIpMirrorOutputPacketLossStatus, modulePsisiEditorLicenseStatus=modulePsisiEditorLicenseStatus, serviceStatusEntry=serviceStatusEntry, transBitrateMax=transBitrateMax, moduleDescrStatus=moduleDescrStatus, moduleCliLoginStatus=moduleCliLoginStatus, pidStatusTable=pidStatusTable, moduleDeviceFirstBootStatus=moduleDeviceFirstBootStatus, moduleSdtTableStatus=moduleSdtTableStatus, scsServiceName=scsServiceName, moduleDescramblingRestart=moduleDescramblingRestart, moduleSymrateStatus=moduleSymrateStatus, moduleEcmgSpareStatus=moduleEcmgSpareStatus, moduleTunerHierarchyStatus=moduleTunerHierarchyStatus, tsPsisiCapaStatus=tsPsisiCapaStatus, fecCorrectedPkts=fecCorrectedPkts, moduleFecCorrectionStatus=moduleFecCorrectionStatus, modulePartitionConfigurationRestore=modulePartitionConfigurationRestore, statusCodeInterfaceTable=statusCodeInterfaceTable, statusCode=statusCode, interfaceTypeTable=interfaceTypeTable, moduleProcessRestartStatus=moduleProcessRestartStatus, statusCodeServiceEntry=statusCodeServiceEntry, tsRtpSeqStatus=tsRtpSeqStatus, moduleIntrusionStatus=moduleIntrusionStatus, scdObjectDescriptor=scdObjectDescriptor, ifExtIndex=ifExtIndex, signalBer=signalBer, tsManualTableInsertStatus=tsManualTableInsertStatus, modulePartitionConfigurationBackup=modulePartitionConfigurationBackup, moduleDemuxLicenseStatus=moduleDemuxLicenseStatus, proMpegFecTable=proMpegFecTable, moduleScramSharedStatus=moduleScramSharedStatus, scsObjectId=scsObjectId, moduleCaModuleRestart=moduleCaModuleRestart, moduleUpcPowerLow=moduleUpcPowerLow, moduleFecMediaPktsStatus=moduleFecMediaPktsStatus, moduleBackupPsuStatus=moduleBackupPsuStatus, sciObjectAlarmValue=sciObjectAlarmValue, sciInterfaceId=sciInterfaceId, ifExtLogiInterface=ifExtLogiInterface, moduleExtioPinSignalingStatus=moduleExtioPinSignalingStatus, tsMultiplexDiscardStatus=tsMultiplexDiscardStatus, hwVersion=hwVersion, moduleBackupSyncModeManual=moduleBackupSyncModeManual, transBitrateMin=transBitrateMin, moduleSwUpdateStatus=moduleSwUpdateStatus, moduleInsertionStatus=moduleInsertionStatus, scdObjectValue=scdObjectValue, scdObjectId=scdObjectId, moduleSwRevertStatus=moduleSwRevertStatus, interfaceTypeId=interfaceTypeId, moduleVoltageHigh=moduleVoltageHigh, pidStatus=pidStatus, moduleRedunActivationStatus=moduleRedunActivationStatus, moduleTunerDcFeedStatus=moduleTunerDcFeedStatus, signalSnrMin=signalSnrMin, scpObjectAlarmValue=scpObjectAlarmValue, statusCodeDeviceTable=statusCodeDeviceTable, tsFecCorrectionCapacityStatus=tsFecCorrectionCapacityStatus, signalCcErrors=signalCcErrors, moduleBootupProgressStatus=moduleBootupProgressStatus)
mibBuilder.exportSymbols("TELESTE-LUMINATO-MIB", moduleDaemonInitStatus=moduleDaemonInitStatus, modulePidCapaStatus=modulePidCapaStatus, statusCodeDeviceEntry=statusCodeDeviceEntry, ifLinkStatus=ifLinkStatus, moduleSidAllocStatus=moduleSidAllocStatus, moduleEmmStatus=moduleEmmStatus)
