#
# PySNMP MIB module SPAGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/akcp/SPAGENT-MIB
# Produced by pysmi-1.1.12 at Sat Jul  6 01:05:05 2024
# On host fv-az1532-138 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Opaque, enterprises, Gauge32, Integer32, NotificationType, Counter32, Unsigned32, Bits, TimeTicks, ModuleIdentity, IpAddress, ObjectIdentity, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Opaque", "enterprises", "Gauge32", "Integer32", "NotificationType", "Counter32", "Unsigned32", "Bits", "TimeTicks", "ModuleIdentity", "IpAddress", "ObjectIdentity", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
akcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3854))
sensorProbe = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1))
spSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 1))
spStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatus.setStatus('mandatory')
spManufName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spManufName.setStatus('mandatory')
spHelpUrl = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spHelpUrl.setStatus('mandatory')
spProductName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spProductName.setStatus('mandatory')
spHostName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spHostName.setStatus('mandatory')
spStatusEachModule = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10))
spStatusRJ45 = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatusRJ45.setStatus('mandatory')
spStatusNoVideoSignal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatusNoVideoSignal.setStatus('mandatory')
spStatusSoundDetector = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatusSoundDetector.setStatus('mandatory')
spStatusVirtual = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatusVirtual.setStatus('mandatory')
spStatusSoftMotion = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatusSoftMotion.setStatus('mandatory')
spSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2))
sensorProbeDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2))
sensorProbeEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1))
sensorProbeHost = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHost.setStatus('mandatory')
sensorProbeUseDHCP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeUseDHCP.setStatus('mandatory')
sensorProbeMAC = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeMAC.setStatus('mandatory')
sensorProbeSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSetCommunity.setStatus('mandatory')
sensorProbeGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeGetCommunity.setStatus('mandatory')
sensorProbeTempTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16), )
if mibBuilder.loadTexts: sensorProbeTempTable.setStatus('mandatory')
sensorProbeTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTempIndex"))
if mibBuilder.loadTexts: sensorProbeTempEntry.setStatus('mandatory')
sensorProbeTempDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDescription.setStatus('mandatory')
sensorProbeTempLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempLocation.setStatus('mandatory')
sensorProbeTempDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempDegree.setStatus('mandatory')
sensorProbeTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempStatus.setStatus('mandatory')
sensorProbeTempOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempOnline.setStatus('mandatory')
sensorProbeTempGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempGoOnline.setStatus('mandatory')
sensorProbeTempHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempHighWarning.setStatus('mandatory')
sensorProbeTempHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempHighCritical.setStatus('mandatory')
sensorProbeTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempLowWarning.setStatus('mandatory')
sensorProbeTempLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempLowCritical.setStatus('mandatory')
sensorProbeTempRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRearm.setStatus('mandatory')
sensorProbeTempDegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDegreeType.setStatus('mandatory')
sensorProbeTempSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("type1", 0), ("type2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSensorType.setStatus('mandatory')
sensorProbeTempDegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempDegreeRaw.setStatus('mandatory')
sensorProbeTempEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailTrapLimit.setStatus('mandatory')
sensorProbeTempEmailTrapSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailTrapSchedule.setStatus('mandatory')
sensorProbeTempEmailTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailTrapInterval.setStatus('mandatory')
sensorProbeTempSendNormalTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendNormalTrap.setStatus('mandatory')
sensorProbeTempDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDelayError.setStatus('mandatory')
sensorProbeTempDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDelayNormal.setStatus('mandatory')
sensorProbeTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempIndex.setStatus('mandatory')
sensorProbeTempRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayCycleTime.setStatus('mandatory')
sensorProbeTempRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayOnPort.setStatus('mandatory')
sensorProbeTempRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayActiveStatus.setStatus('mandatory')
sensorProbeTempRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayAction.setStatus('mandatory')
sensorProbeTempEmailInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailInterval.setStatus('mandatory')
sensorProbeTempIndexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempIndexCount.setStatus('mandatory')
sensorProbeTempOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempOffset.setStatus('mandatory')
sensorProbeTempSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenCycleTime.setStatus('mandatory')
sensorProbeTempSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenOnPort.setStatus('mandatory')
sensorProbeTempSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenActiveStatus.setStatus('mandatory')
sensorProbeTempSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenAction.setStatus('mandatory')
sensorProbeTempAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempAcknowledgement.setStatus('mandatory')
sensorProbeTempSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenDelayAlarm.setStatus('mandatory')
sensorProbeTempURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempURL.setStatus('mandatory')
sensorProbeTempOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempOpenURL.setStatus('mandatory')
sensorProbeTempDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDatacollectType.setStatus('mandatory')
sensorProbeTempContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeHighCritical.setStatus('mandatory')
sensorProbeTempContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeHighWarning.setStatus('mandatory')
sensorProbeTempContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeNormal.setStatus('mandatory')
sensorProbeTempContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeLowWarning.setStatus('mandatory')
sensorProbeTempContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeLowCritical.setStatus('mandatory')
sensorProbeTempContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeSensorError.setStatus('mandatory')
sensorProbeTempCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempCalendar.setStatus('mandatory')
sensorProbeThermostatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatIndex.setStatus('mandatory')
sensorProbeThermostatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatDescription.setStatus('mandatory')
sensorProbeThermostatValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatValue.setStatus('mandatory')
sensorProbeThermostatOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatOnline.setStatus('mandatory')
sensorProbeThermostatGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatGoOnline.setStatus('mandatory')
sensorProbeThermostatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatMode.setStatus('mandatory')
sensorProbeThermostatRelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatRelayControlPort.setStatus('mandatory')
sensorProbeThermostatNormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatNormalAction1.setStatus('mandatory')
sensorProbeThermostatHighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimit1.setStatus('mandatory')
sensorProbeThermostatHighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimitAction1.setStatus('mandatory')
sensorProbeThermostatLowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimit1.setStatus('mandatory')
sensorProbeThermostatLowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimitAction1.setStatus('mandatory')
sensorProbeThermostatNormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatNormalAction2.setStatus('mandatory')
sensorProbeThermostatHighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimit2.setStatus('mandatory')
sensorProbeThermostatHighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimitAction2.setStatus('mandatory')
sensorProbeThermostatLowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimit2.setStatus('mandatory')
sensorProbeThermostatLowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimitAction2.setStatus('mandatory')
sensorProbeThermostatEnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 63), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatEnableTime.setStatus('mandatory')
sensorProbeTempSendNormalMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendNormalMail.setStatus('mandatory')
sensorProbeTempSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendTrap.setStatus('mandatory')
sensorProbeTempSendMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendMail.setStatus('mandatory')
sensorProbeHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17), )
if mibBuilder.loadTexts: sensorProbeHumidityTable.setStatus('mandatory')
sensorProbeHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeHumidityIndex"))
if mibBuilder.loadTexts: sensorProbeHumidityEntry.setStatus('mandatory')
sensorProbeHumidityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDescription.setStatus('mandatory')
sensorProbeHumidityLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLocation.setStatus('mandatory')
sensorProbeHumidityPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityPercent.setStatus('mandatory')
sensorProbeHumidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityStatus.setStatus('mandatory')
sensorProbeHumidityOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityOnline.setStatus('mandatory')
sensorProbeHumidityGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityGoOnline.setStatus('mandatory')
sensorProbeHumidityHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityHighWarning.setStatus('mandatory')
sensorProbeHumidityHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityHighCritical.setStatus('mandatory')
sensorProbeHumidityLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLowWarning.setStatus('mandatory')
sensorProbeHumidityLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLowCritical.setStatus('mandatory')
sensorProbeHumidityRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRearm.setStatus('mandatory')
sensorProbeHumidityRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityRaw.setStatus('mandatory')
sensorProbeHumidityLowVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLowVoltage.setStatus('mandatory')
sensorProbeHumidityHighVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityHighVoltage.setStatus('mandatory')
sensorProbeHumidityEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapLimit.setStatus('mandatory')
sensorProbeHumidityEmailTrapSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapSchedule.setStatus('mandatory')
sensorProbeHumidityEmailTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapInterval.setStatus('mandatory')
sensorProbeHumiditySendNormalTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendNormalTrap.setStatus('mandatory')
sensorProbeHumidityDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDelayError.setStatus('mandatory')
sensorProbeHumidityDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDelayNormal.setStatus('mandatory')
sensorProbeHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityIndex.setStatus('mandatory')
sensorProbeHumidityAtoDAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDAmountMaxVoltage.setStatus('mandatory')
sensorProbeHumidityAtoDAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDAmountBaseVoltage.setStatus('mandatory')
sensorProbeHumidityAtoDTypeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("percent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDTypeUnit.setStatus('mandatory')
sensorProbeHumidityDcUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDcUnit.setStatus('mandatory')
sensorProbeHumidityAtoDJumper = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-600, -400, -300, -200, -100, 100, 200, 300, 400, 600))).clone(namedValues=NamedValues(("jumperAt-60", -600), ("jumperAt-40", -400), ("jumperAt-30", -300), ("jumperAt-20", -200), ("jumperAt-10", -100), ("jumperAt10", 100), ("jumperAt20", 200), ("jumperAt30", 300), ("jumperAt40", 400), ("jumperAt60", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDJumper.setStatus('mandatory')
sensorProbeHumidityRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayCycleTime.setStatus('mandatory')
sensorProbeHumidityRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayOnPort.setStatus('mandatory')
sensorProbeHumidityRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayActiveStatus.setStatus('mandatory')
sensorProbeHumidityRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayAction.setStatus('mandatory')
sensorProbeHumidityEmailInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailInterval.setStatus('mandatory')
sensorProbeHumidity4to20mAUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidity4to20mAUnit.setStatus('mandatory')
sensorProbeHumidityIndexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityIndexCount.setStatus('mandatory')
sensorProbeHumidityOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityOffset.setStatus('mandatory')
sensorProbeHumiditySirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenCycleTime.setStatus('mandatory')
sensorProbeHumiditySirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenOnPort.setStatus('mandatory')
sensorProbeHumiditySirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenActiveStatus.setStatus('mandatory')
sensorProbeHumiditySirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenAction.setStatus('mandatory')
sensorProbeHumidityAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAcknowledgement.setStatus('mandatory')
sensorProbeHumiditySirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenDelayAlarm.setStatus('mandatory')
sensorProbeHumidityURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityURL.setStatus('mandatory')
sensorProbeHumidityOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityOpenURL.setStatus('mandatory')
sensorProbeHumidityDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDatacollectType.setStatus('mandatory')
sensorProbeHumidityContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeHighCritical.setStatus('mandatory')
sensorProbeHumidityContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeHighWarning.setStatus('mandatory')
sensorProbeHumidityContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeNormal.setStatus('mandatory')
sensorProbeHumidityContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeLowWarning.setStatus('mandatory')
sensorProbeHumidityContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeLowCritical.setStatus('mandatory')
sensorProbeHumidityContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeSensorError.setStatus('mandatory')
sensorProbeHumidityCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityCalendar.setStatus('mandatory')
sensorProbeHumiditySendNormalMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendNormalMail.setStatus('mandatory')
sensorProbeHumiditySendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendTrap.setStatus('mandatory')
sensorProbeHumiditySendMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendMail.setStatus('mandatory')
sensorProbeIDCVVoltateRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIDCVVoltateRatio.setStatus('mandatory')
sensorProbeIDCVErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIDCVErrorFlag.setStatus('mandatory')
sensorProbeIDCVCalibrate = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIDCVCalibrate.setStatus('mandatory')
sensorProbeAirFlowProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("analogType", 0), ("i2cType", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeAirFlowProtocolType.setStatus('mandatory')
sensorProbeAirFlowSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAirFlowSensitivity.setStatus('mandatory')
sensorProbeAirFlowNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("presense", 0), ("absense", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAirFlowNormalState.setStatus('mandatory')
sensorProbeAirFlowCalibrate = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAirFlowCalibrate.setStatus('mandatory')
sensorProbeSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18), )
if mibBuilder.loadTexts: sensorProbeSwitchTable.setStatus('mandatory')
sensorProbeSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeSwitchIndex"))
if mibBuilder.loadTexts: sensorProbeSwitchEntry.setStatus('mandatory')
sensorProbeSwitchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDescription.setStatus('mandatory')
sensorProbeSwitchLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchLocation.setStatus('mandatory')
sensorProbeSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchStatus.setStatus('mandatory')
sensorProbeSwitchOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchOnline.setStatus('mandatory')
sensorProbeSwitchGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchGoOnline.setStatus('mandatory')
sensorProbeSwitchDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDirection.setStatus('mandatory')
sensorProbeSwitchNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchNormalState.setStatus('mandatory')
sensorProbeSwitchOutputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchOutputLevel.setStatus('mandatory')
sensorProbeSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14))).clone(namedValues=NamedValues(("temperature", 1), ("fourTo20mA", 2), ("humidity", 3), ("water", 4), ("atod", 5), ("security", 6), ("airflow", 8), ("siren", 9), ("dryContact", 10), ("voltage", 12), ("relay", 13), ("motion", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSensorType.setStatus('mandatory')
sensorProbeSwitchEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapLimit.setStatus('mandatory')
sensorProbeSwitchEmailTrapSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapSchedule.setStatus('mandatory')
sensorProbeSwitchEmailTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapInterval.setStatus('mandatory')
sensorProbeSwitchSendNormalTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendNormalTrap.setStatus('mandatory')
sensorProbeSwitchDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDelayError.setStatus('mandatory')
sensorProbeSwitchDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDelayNormal.setStatus('mandatory')
sensorProbeSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 67))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchIndex.setStatus('mandatory')
sensorProbeSwitchRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayCycleTime.setStatus('mandatory')
sensorProbeSwitchRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayOnPort.setStatus('mandatory')
sensorProbeSwitchRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayActiveStatus.setStatus('mandatory')
sensorProbeSwitchRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayAction.setStatus('mandatory')
sensorProbeSwitchEmailInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailInterval.setStatus('mandatory')
sensorProbeSwitchRelayOutputVoltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 10, 11))).clone(namedValues=NamedValues(("sensorError", 7), ("noVoltagePresent", 10), ("voltagePresent", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchRelayOutputVoltStatus.setStatus('mandatory')
sensorProbeSwitchManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchManualRelayCycleTime.setStatus('mandatory')
sensorProbeSwitchManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchManualRelayAction.setStatus('mandatory')
sensorProbeSwitchRelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayDescOn.setStatus('mandatory')
sensorProbeSwitchRelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayDescOff.setStatus('mandatory')
sensorProbeSwitchIndexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchIndexCount.setStatus('mandatory')
sensorProbeSwitchSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenCycleTime.setStatus('mandatory')
sensorProbeSwitchSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenOnPort.setStatus('mandatory')
sensorProbeSwitchSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenActiveStatus.setStatus('mandatory')
sensorProbeSwitchSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenAction.setStatus('mandatory')
sensorProbeSwitchAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchAcknowledgement.setStatus('mandatory')
sensorProbeSwitchSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenDelayAlarm.setStatus('mandatory')
sensorProbeSwitchURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchURL.setStatus('mandatory')
sensorProbeSwitchOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchOpenURL.setStatus('mandatory')
sensorProbeSwitchContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchContTimeHighCritical.setStatus('mandatory')
sensorProbeSwitchContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchContTimeNormal.setStatus('mandatory')
sensorProbeSwitchCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchCalendar.setStatus('mandatory')
sensorProbeSwitchRelayControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayControlMode.setStatus('mandatory')
sensorProbeSwitchSirenControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenControlMode.setStatus('mandatory')
sensorProbeSwitchSendNormalMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendNormalMail.setStatus('mandatory')
sensorProbeSwitchSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendTrap.setStatus('mandatory')
sensorProbeSwitchSendMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendMail.setStatus('mandatory')
sensorProbeSwitchWaterRopeLeakLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeLeakLocation.setStatus('mandatory')
sensorProbeSwitchWaterRopeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeLength.setStatus('mandatory')
sensorProbeSwitchWaterRopeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("meters", 0), ("feet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeUnit.setStatus('mandatory')
sensorProbeSwitchWaterRopeImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeImpedance.setStatus('mandatory')
sensorProbeSwitchWaterRopeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeRaw.setStatus('mandatory')
sensorProbeSwitchWaterRopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("custom", 0), ("water", 1), ("fuel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeType.setStatus('mandatory')
sensorProbeOtherSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19))
sensorProbeIRMSSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26))
sensorProbeIRMSSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSSensorNumber.setStatus('mandatory')
sensorProbeIRMSSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2), )
if mibBuilder.loadTexts: sensorProbeIRMSSensorTable.setStatus('mandatory')
sensorProbeIRMSSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeIRMSSensorIndex"))
if mibBuilder.loadTexts: sensorProbeIRMSSensorEntry.setStatus('mandatory')
sensorProbeIRMSSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSSensorIndex.setStatus('mandatory')
sensorProbeIRMSDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDescription.setStatus('mandatory')
sensorProbeIRMSPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSPercent.setStatus('mandatory')
sensorProbeIRMSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSStatus.setStatus('mandatory')
sensorProbeIRMSOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSOnline.setStatus('mandatory')
sensorProbeIRMSGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSGoOnline.setStatus('mandatory')
sensorProbeIRMSHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSHighWarning.setStatus('mandatory')
sensorProbeIRMSHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSHighCritical.setStatus('mandatory')
sensorProbeIRMSLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSLowWarning.setStatus('mandatory')
sensorProbeIRMSLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSLowCritical.setStatus('mandatory')
sensorProbeIRMSRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRearm.setStatus('mandatory')
sensorProbeIRMSRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSRaw.setStatus('mandatory')
sensorProbeIRMSEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSEmailTrapLimit.setStatus('mandatory')
sensorProbeIRMSDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDelayError.setStatus('mandatory')
sensorProbeIRMSDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDelayNormal.setStatus('mandatory')
sensorProbeIRMSRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayCycleTime.setStatus('mandatory')
sensorProbeIRMSRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayOnPort.setStatus('mandatory')
sensorProbeIRMSRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayActiveStatus.setStatus('mandatory')
sensorProbeIRMSRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayAction.setStatus('mandatory')
sensorProbeIRMSSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenCycleTime.setStatus('mandatory')
sensorProbeIRMSSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenOnPort.setStatus('mandatory')
sensorProbeIRMSSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenActiveStatus.setStatus('mandatory')
sensorProbeIRMSSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenAction.setStatus('mandatory')
sensorProbeIRMSAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSAcknowledgement.setStatus('mandatory')
sensorProbeIRMSSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenDelayAlarm.setStatus('mandatory')
sensorProbeIRMSURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSURL.setStatus('mandatory')
sensorProbeIRMSOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSOpenURL.setStatus('mandatory')
sensorProbeIRMSDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDatacollectType.setStatus('mandatory')
sensorProbeIRMSContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeHighCritical.setStatus('mandatory')
sensorProbeIRMSContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeHighWarning.setStatus('mandatory')
sensorProbeIRMSContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeNormal.setStatus('mandatory')
sensorProbeIRMSContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeLowWarning.setStatus('mandatory')
sensorProbeIRMSContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeLowCritical.setStatus('mandatory')
sensorProbeIRMSContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeSensorError.setStatus('mandatory')
sensorProbeIRMSCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSCalendar.setStatus('mandatory')
sensorProbeVRMSSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27))
sensorProbeVRMSSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSSensorNumber.setStatus('mandatory')
sensorProbeVRMSSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2), )
if mibBuilder.loadTexts: sensorProbeVRMSSensorTable.setStatus('mandatory')
sensorProbeVRMSSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeVRMSSensorIndex"))
if mibBuilder.loadTexts: sensorProbeVRMSSensorEntry.setStatus('mandatory')
sensorProbeVRMSSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSSensorIndex.setStatus('mandatory')
sensorProbeVRMSDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDescription.setStatus('mandatory')
sensorProbeVRMSPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSPercent.setStatus('mandatory')
sensorProbeVRMSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSStatus.setStatus('mandatory')
sensorProbeVRMSOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSOnline.setStatus('mandatory')
sensorProbeVRMSGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSGoOnline.setStatus('mandatory')
sensorProbeVRMSHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSHighWarning.setStatus('mandatory')
sensorProbeVRMSHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSHighCritical.setStatus('mandatory')
sensorProbeVRMSLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSLowWarning.setStatus('mandatory')
sensorProbeVRMSLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSLowCritical.setStatus('mandatory')
sensorProbeVRMSRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRearm.setStatus('mandatory')
sensorProbeVRMSRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSRaw.setStatus('mandatory')
sensorProbeVRMSEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSEmailTrapLimit.setStatus('mandatory')
sensorProbeVRMSDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDelayError.setStatus('mandatory')
sensorProbeVRMSDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDelayNormal.setStatus('mandatory')
sensorProbeVRMSRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayCycleTime.setStatus('mandatory')
sensorProbeVRMSRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayOnPort.setStatus('mandatory')
sensorProbeVRMSRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayActiveStatus.setStatus('mandatory')
sensorProbeVRMSRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayAction.setStatus('mandatory')
sensorProbeVRMSSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenCycleTime.setStatus('mandatory')
sensorProbeVRMSSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenOnPort.setStatus('mandatory')
sensorProbeVRMSSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenActiveStatus.setStatus('mandatory')
sensorProbeVRMSSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenAction.setStatus('mandatory')
sensorProbeVRMSAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSAcknowledgement.setStatus('mandatory')
sensorProbeVRMSSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenDelayAlarm.setStatus('mandatory')
sensorProbeVRMSvoltageMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(110, 220))).clone(namedValues=NamedValues(("ac-110", 110), ("ac-220", 220)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSvoltageMode.setStatus('mandatory')
sensorProbeVRMSURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSURL.setStatus('mandatory')
sensorProbeVRMSOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSOpenURL.setStatus('mandatory')
sensorProbeVRMSDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDatacollectType.setStatus('mandatory')
sensorProbeVRMSContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeHighCritical.setStatus('mandatory')
sensorProbeVRMSContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeHighWarning.setStatus('mandatory')
sensorProbeVRMSContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeNormal.setStatus('mandatory')
sensorProbeVRMSContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeLowWarning.setStatus('mandatory')
sensorProbeVRMSContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeLowCritical.setStatus('mandatory')
sensorProbeVRMSContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeSensorError.setStatus('mandatory')
sensorProbeVRMSCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSCalendar.setStatus('mandatory')
sensorProbeEnergySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28))
sensorProbeEnergySensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergySensorNumber.setStatus('mandatory')
sensorProbeEnergySensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2), )
if mibBuilder.loadTexts: sensorProbeEnergySensorTable.setStatus('mandatory')
sensorProbeEnergySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeEnergySensorIndex"))
if mibBuilder.loadTexts: sensorProbeEnergySensorEntry.setStatus('mandatory')
sensorProbeEnergySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergySensorIndex.setStatus('mandatory')
sensorProbeEnergyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDescription.setStatus('mandatory')
sensorProbeEnergyPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyPercent.setStatus('mandatory')
sensorProbeEnergyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyStatus.setStatus('mandatory')
sensorProbeEnergyOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyOnline.setStatus('mandatory')
sensorProbeEnergyGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyGoOnline.setStatus('mandatory')
sensorProbeEnergyHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyHighWarning.setStatus('mandatory')
sensorProbeEnergyHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyHighCritical.setStatus('mandatory')
sensorProbeEnergyLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyLowWarning.setStatus('mandatory')
sensorProbeEnergyLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyLowCritical.setStatus('mandatory')
sensorProbeEnergyRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRearm.setStatus('mandatory')
sensorProbeEnergyRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyRaw.setStatus('mandatory')
sensorProbeEnergyEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyEmailTrapLimit.setStatus('mandatory')
sensorProbeEnergyDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDelayError.setStatus('mandatory')
sensorProbeEnergyDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDelayNormal.setStatus('mandatory')
sensorProbeEnergyRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayCycleTime.setStatus('mandatory')
sensorProbeEnergyRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayOnPort.setStatus('mandatory')
sensorProbeEnergyRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayActiveStatus.setStatus('mandatory')
sensorProbeEnergyRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayAction.setStatus('mandatory')
sensorProbeEnergySirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenCycleTime.setStatus('mandatory')
sensorProbeEnergySirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenOnPort.setStatus('mandatory')
sensorProbeEnergySirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenActiveStatus.setStatus('mandatory')
sensorProbeEnergySirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenAction.setStatus('mandatory')
sensorProbeEnergyAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyAcknowledgement.setStatus('mandatory')
sensorProbeEnergySirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenDelayAlarm.setStatus('mandatory')
sensorProbeEnergyReadingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("apparent", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyReadingMode.setStatus('mandatory')
sensorProbeEnergyURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyURL.setStatus('mandatory')
sensorProbeEnergyOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyOpenURL.setStatus('mandatory')
sensorProbeEnergyDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDatacollectType.setStatus('mandatory')
sensorProbeEnergyContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeHighCritical.setStatus('mandatory')
sensorProbeEnergyContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeHighWarning.setStatus('mandatory')
sensorProbeEnergyContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeNormal.setStatus('mandatory')
sensorProbeEnergyContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeLowWarning.setStatus('mandatory')
sensorProbeEnergyContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeLowCritical.setStatus('mandatory')
sensorProbeEnergyContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeSensorError.setStatus('mandatory')
sensorProbeEnergyCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyCalendar.setStatus('mandatory')
sensorProbeRelayArraySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29))
sensorProbeRelayArrayPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1))
sensorProbeRelayArrayPort1Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Number.setStatus('mandatory')
sensorProbeRelayArrayPort1Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Table.setStatus('mandatory')
sensorProbeRelayArrayPort1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort1Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Entry.setStatus('mandatory')
sensorProbeRelayArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Index.setStatus('mandatory')
sensorProbeRelayArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Description.setStatus('mandatory')
sensorProbeRelayArrayPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Status.setStatus('mandatory')
sensorProbeRelayArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Online.setStatus('mandatory')
sensorProbeRelayArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1GoOnline.setStatus('mandatory')
sensorProbeRelayArrayPort1NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1NormalState.setStatus('mandatory')
sensorProbeRelayArrayPort1RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort1RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort1ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ManualRelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort1ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ManualRelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort1RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayDescOn.setStatus('mandatory')
sensorProbeRelayArrayPort1RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayDescOff.setStatus('mandatory')
sensorProbeRelayArrayPort1URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1URL.setStatus('mandatory')
sensorProbeRelayArrayPort1OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1OpenURL.setStatus('mandatory')
sensorProbeRelayArrayPort1ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ControlMode.setStatus('mandatory')
sensorProbeRelayArrayPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2))
sensorProbeRelayArrayPort2Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Number.setStatus('mandatory')
sensorProbeRelayArrayPort2Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Table.setStatus('mandatory')
sensorProbeRelayArrayPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort2Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Entry.setStatus('mandatory')
sensorProbeRelayArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Index.setStatus('mandatory')
sensorProbeRelayArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Description.setStatus('mandatory')
sensorProbeRelayArrayPort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Status.setStatus('mandatory')
sensorProbeRelayArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Online.setStatus('mandatory')
sensorProbeRelayArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2GoOnline.setStatus('mandatory')
sensorProbeRelayArrayPort2NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2NormalState.setStatus('mandatory')
sensorProbeRelayArrayPort2RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort2RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort2ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ManualRelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort2ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ManualRelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort2RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayDescOn.setStatus('mandatory')
sensorProbeRelayArrayPort2RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayDescOff.setStatus('mandatory')
sensorProbeRelayArrayPort2URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2URL.setStatus('mandatory')
sensorProbeRelayArrayPort2OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2OpenURL.setStatus('mandatory')
sensorProbeRelayArrayPort2ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ControlMode.setStatus('mandatory')
sensorProbeRelayArrayPort3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3))
sensorProbeRelayArrayPort3Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Number.setStatus('mandatory')
sensorProbeRelayArrayPort3Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Table.setStatus('mandatory')
sensorProbeRelayArrayPort3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort3Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Entry.setStatus('mandatory')
sensorProbeRelayArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Index.setStatus('mandatory')
sensorProbeRelayArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Description.setStatus('mandatory')
sensorProbeRelayArrayPort3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Status.setStatus('mandatory')
sensorProbeRelayArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Online.setStatus('mandatory')
sensorProbeRelayArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3GoOnline.setStatus('mandatory')
sensorProbeRelayArrayPort3NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3NormalState.setStatus('mandatory')
sensorProbeRelayArrayPort3RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort3RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort3ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ManualRelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort3ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ManualRelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort3RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayDescOn.setStatus('mandatory')
sensorProbeRelayArrayPort3RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayDescOff.setStatus('mandatory')
sensorProbeRelayArrayPort3URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3URL.setStatus('mandatory')
sensorProbeRelayArrayPort3OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3OpenURL.setStatus('mandatory')
sensorProbeRelayArrayPort3ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ControlMode.setStatus('mandatory')
sensorProbeRelayArrayPort4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4))
sensorProbeRelayArrayPort4Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Number.setStatus('mandatory')
sensorProbeRelayArrayPort4Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Table.setStatus('mandatory')
sensorProbeRelayArrayPort4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort4Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Entry.setStatus('mandatory')
sensorProbeRelayArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Index.setStatus('mandatory')
sensorProbeRelayArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Description.setStatus('mandatory')
sensorProbeRelayArrayPort4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Status.setStatus('mandatory')
sensorProbeRelayArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Online.setStatus('mandatory')
sensorProbeRelayArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4GoOnline.setStatus('mandatory')
sensorProbeRelayArrayPort4NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4NormalState.setStatus('mandatory')
sensorProbeRelayArrayPort4RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort4RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort4ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ManualRelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort4ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ManualRelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort4RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayDescOn.setStatus('mandatory')
sensorProbeRelayArrayPort4RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayDescOff.setStatus('mandatory')
sensorProbeRelayArrayPort4URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4URL.setStatus('mandatory')
sensorProbeRelayArrayPort4OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4OpenURL.setStatus('mandatory')
sensorProbeRelayArrayPort4ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ControlMode.setStatus('mandatory')
sensorProbeRelayArrayPort5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5))
sensorProbeRelayArrayPort5Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Number.setStatus('mandatory')
sensorProbeRelayArrayPort5Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Table.setStatus('mandatory')
sensorProbeRelayArrayPort5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort5Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Entry.setStatus('mandatory')
sensorProbeRelayArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Index.setStatus('mandatory')
sensorProbeRelayArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Description.setStatus('mandatory')
sensorProbeRelayArrayPort5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Status.setStatus('mandatory')
sensorProbeRelayArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Online.setStatus('mandatory')
sensorProbeRelayArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5GoOnline.setStatus('mandatory')
sensorProbeRelayArrayPort5NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5NormalState.setStatus('mandatory')
sensorProbeRelayArrayPort5RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort5RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort5ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ManualRelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort5ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ManualRelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort5RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayDescOn.setStatus('mandatory')
sensorProbeRelayArrayPort5RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayDescOff.setStatus('mandatory')
sensorProbeRelayArrayPort5URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5URL.setStatus('mandatory')
sensorProbeRelayArrayPort5OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5OpenURL.setStatus('mandatory')
sensorProbeRelayArrayPort5ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ControlMode.setStatus('mandatory')
sensorProbeRelayArrayPort6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6))
sensorProbeRelayArrayPort6Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Number.setStatus('mandatory')
sensorProbeRelayArrayPort6Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Table.setStatus('mandatory')
sensorProbeRelayArrayPort6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort6Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Entry.setStatus('mandatory')
sensorProbeRelayArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Index.setStatus('mandatory')
sensorProbeRelayArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Description.setStatus('mandatory')
sensorProbeRelayArrayPort6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Status.setStatus('mandatory')
sensorProbeRelayArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Online.setStatus('mandatory')
sensorProbeRelayArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6GoOnline.setStatus('mandatory')
sensorProbeRelayArrayPort6NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6NormalState.setStatus('mandatory')
sensorProbeRelayArrayPort6RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort6RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort6ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ManualRelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort6ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ManualRelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort6RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayDescOn.setStatus('mandatory')
sensorProbeRelayArrayPort6RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayDescOff.setStatus('mandatory')
sensorProbeRelayArrayPort6URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6URL.setStatus('mandatory')
sensorProbeRelayArrayPort6OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6OpenURL.setStatus('mandatory')
sensorProbeRelayArrayPort6ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ControlMode.setStatus('mandatory')
sensorProbeRelayArrayPort7 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7))
sensorProbeRelayArrayPort7Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Number.setStatus('mandatory')
sensorProbeRelayArrayPort7Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Table.setStatus('mandatory')
sensorProbeRelayArrayPort7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort7Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Entry.setStatus('mandatory')
sensorProbeRelayArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Index.setStatus('mandatory')
sensorProbeRelayArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Description.setStatus('mandatory')
sensorProbeRelayArrayPort7Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Status.setStatus('mandatory')
sensorProbeRelayArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Online.setStatus('mandatory')
sensorProbeRelayArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7GoOnline.setStatus('mandatory')
sensorProbeRelayArrayPort7NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7NormalState.setStatus('mandatory')
sensorProbeRelayArrayPort7RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort7RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort7ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ManualRelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort7ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ManualRelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort7RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayDescOn.setStatus('mandatory')
sensorProbeRelayArrayPort7RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayDescOff.setStatus('mandatory')
sensorProbeRelayArrayPort7URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7URL.setStatus('mandatory')
sensorProbeRelayArrayPort7OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7OpenURL.setStatus('mandatory')
sensorProbeRelayArrayPort7ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ControlMode.setStatus('mandatory')
sensorProbeRelayArrayPort8 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8))
sensorProbeRelayArrayPort8Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Number.setStatus('mandatory')
sensorProbeRelayArrayPort8Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Table.setStatus('mandatory')
sensorProbeRelayArrayPort8Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort8Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Entry.setStatus('mandatory')
sensorProbeRelayArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Index.setStatus('mandatory')
sensorProbeRelayArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Description.setStatus('mandatory')
sensorProbeRelayArrayPort8Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Status.setStatus('mandatory')
sensorProbeRelayArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Online.setStatus('mandatory')
sensorProbeRelayArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8GoOnline.setStatus('mandatory')
sensorProbeRelayArrayPort8NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8NormalState.setStatus('mandatory')
sensorProbeRelayArrayPort8RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort8RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort8ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ManualRelayCycleTime.setStatus('mandatory')
sensorProbeRelayArrayPort8ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ManualRelayAction.setStatus('mandatory')
sensorProbeRelayArrayPort8RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayDescOn.setStatus('mandatory')
sensorProbeRelayArrayPort8RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayDescOff.setStatus('mandatory')
sensorProbeRelayArrayPort8URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8URL.setStatus('mandatory')
sensorProbeRelayArrayPort8OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8OpenURL.setStatus('mandatory')
sensorProbeRelayArrayPort8ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ControlMode.setStatus('mandatory')
sensorProbeVirtualAnalogSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30))
sensorProbeVirtualAnalogSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorNumber.setStatus('mandatory')
sensorProbeVirtualAnalogSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2), )
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorTable.setStatus('mandatory')
sensorProbeVirtualAnalogSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeVirtualAnalogSensorIndex"))
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorEntry.setStatus('mandatory')
sensorProbeVirtualAnalogSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 67))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorIndex.setStatus('mandatory')
sensorProbeVirtualAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDescription.setStatus('mandatory')
sensorProbeVirtualAnalogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogStatus.setStatus('mandatory')
sensorProbeVirtualAnalogOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogOnline.setStatus('mandatory')
sensorProbeVirtualAnalogGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogGoOnline.setStatus('mandatory')
sensorProbeVirtualAnalogHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogHighWarning.setStatus('mandatory')
sensorProbeVirtualAnalogHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogHighCritical.setStatus('mandatory')
sensorProbeVirtualAnalogLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogLowWarning.setStatus('mandatory')
sensorProbeVirtualAnalogLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogLowCritical.setStatus('mandatory')
sensorProbeVirtualAnalogRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogRearm.setStatus('mandatory')
sensorProbeVirtualAnalogRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogRaw.setStatus('mandatory')
sensorProbeVirtualAnalogEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogEmailTrapLimit.setStatus('mandatory')
sensorProbeVirtualAnalogDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDelayError.setStatus('mandatory')
sensorProbeVirtualAnalogDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDelayNormal.setStatus('mandatory')
sensorProbeVirtualAnalogUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogUnit.setStatus('mandatory')
sensorProbeVirtualAnalogAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogAcknowledgement.setStatus('mandatory')
sensorProbeVirtualAnalogURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogURL.setStatus('mandatory')
sensorProbeVirtualAnalogOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogOpenURL.setStatus('mandatory')
sensorProbeVirtualAnalogContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeHighCritical.setStatus('mandatory')
sensorProbeVirtualAnalogContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeHighWarning.setStatus('mandatory')
sensorProbeVirtualAnalogContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeNormal.setStatus('mandatory')
sensorProbeVirtualAnalogContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeLowWarning.setStatus('mandatory')
sensorProbeVirtualAnalogContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeLowCritical.setStatus('mandatory')
sensorProbeVirtualAnalogContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeSensorError.setStatus('mandatory')
sensorProbeVirtualAnalogCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogCalendar.setStatus('mandatory')
sensorProbeVirtualAnalogValueFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000))).clone(namedValues=NamedValues(("x1", 1), ("x0-1", 10), ("x0-01", 100), ("x0-001", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogValueFactor.setStatus('mandatory')
sensorProbeVirtualSwitchSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31))
sensorProbeVirtualSwitchSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorNumber.setStatus('mandatory')
sensorProbeVirtualSwitchSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2), )
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorTable.setStatus('mandatory')
sensorProbeVirtualSwitchSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeVirtualSwitchSensorIndex"))
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorEntry.setStatus('mandatory')
sensorProbeVirtualSwitchSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 67))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorIndex.setStatus('mandatory')
sensorProbeVirtualSwitchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescription.setStatus('mandatory')
sensorProbeVirtualSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchStatus.setStatus('mandatory')
sensorProbeVirtualSwitchOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchOnline.setStatus('mandatory')
sensorProbeVirtualSwitchGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchGoOnline.setStatus('mandatory')
sensorProbeVirtualSwitchEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchEmailTrapLimit.setStatus('mandatory')
sensorProbeVirtualSwitchContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchContTimeHighCritical.setStatus('mandatory')
sensorProbeVirtualSwitchContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchContTimeNormal.setStatus('mandatory')
sensorProbeVirtualSwitchDescriptionCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescriptionCritical.setStatus('mandatory')
sensorProbeVirtualSwitchDescriptionNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescriptionNormal.setStatus('mandatory')
sensorProbeVirtualSwitchAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchAcknowledgement.setStatus('mandatory')
sensorProbeVirtualSwitchURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchURL.setStatus('mandatory')
sensorProbeVirtualSwitchOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchOpenURL.setStatus('mandatory')
sensorProbeVirtualSwitchCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchCalendar.setStatus('mandatory')
sensorProbeVirtualSwitchNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchNormalState.setStatus('mandatory')
sensorProbeWattHoursSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32))
sensorProbeWattHoursSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeWattHoursSensorNumber.setStatus('mandatory')
sensorProbeWattHoursSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2), )
if mibBuilder.loadTexts: sensorProbeWattHoursSensorTable.setStatus('mandatory')
sensorProbeWattHoursSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeWattHoursSensorIndex"))
if mibBuilder.loadTexts: sensorProbeWattHoursSensorEntry.setStatus('mandatory')
sensorProbeWattHoursSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeWattHoursSensorIndex.setStatus('mandatory')
sensorProbeWattHoursDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeWattHoursDescription.setStatus('mandatory')
sensorProbeWattHoursPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeWattHoursPercent.setStatus('mandatory')
sensorProbeWattHoursReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeWattHoursReset.setStatus('mandatory')
sensorProbeTemperatureArraySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33))
sensorProbeTemperatureArrayPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1))
sensorProbeTemperatureArrayPort1Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Number.setStatus('mandatory')
sensorProbeTemperatureArrayPort1Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Table.setStatus('mandatory')
sensorProbeTemperatureArrayPort1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort1Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Entry.setStatus('mandatory')
sensorProbeTemperatureArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Index.setStatus('mandatory')
sensorProbeTemperatureArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Description.setStatus('mandatory')
sensorProbeTemperatureArrayPort1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Value.setStatus('mandatory')
sensorProbeTemperatureArrayPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Status.setStatus('mandatory')
sensorProbeTemperatureArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Online.setStatus('mandatory')
sensorProbeTemperatureArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1GoOnline.setStatus('mandatory')
sensorProbeTemperatureArrayPort1HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1HighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort1HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1HighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort1LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1LowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort1LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1LowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort1Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Rearm.setStatus('mandatory')
sensorProbeTemperatureArrayPort1DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DegreeType.setStatus('mandatory')
sensorProbeTemperatureArrayPort1DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DegreeRaw.setStatus('mandatory')
sensorProbeTemperatureArrayPort1Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Offset.setStatus('mandatory')
sensorProbeTemperatureArrayPort1URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1URL.setStatus('mandatory')
sensorProbeTemperatureArrayPort1OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1OpenURL.setStatus('mandatory')
sensorProbeTemperatureArrayPort1DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DatacollectType.setStatus('mandatory')
sensorProbeTemperatureArrayPort1ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeHighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort1ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeHighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort1ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeNormal.setStatus('mandatory')
sensorProbeTemperatureArrayPort1ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeLowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort1ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeLowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort1ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeSensorError.setStatus('mandatory')
sensorProbeTemperatureArrayPort1Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Calendar.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Index.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Description.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Value.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Online.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1GoOnline.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Mode.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1RelayControlPort.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1NormalAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1NormalAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort1EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1EnableTime.setStatus('mandatory')
sensorProbeTemperatureArrayPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2))
sensorProbeTemperatureArrayPort2Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Number.setStatus('mandatory')
sensorProbeTemperatureArrayPort2Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Table.setStatus('mandatory')
sensorProbeTemperatureArrayPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort2Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Entry.setStatus('mandatory')
sensorProbeTemperatureArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Index.setStatus('mandatory')
sensorProbeTemperatureArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Description.setStatus('mandatory')
sensorProbeTemperatureArrayPort2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Value.setStatus('mandatory')
sensorProbeTemperatureArrayPort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Status.setStatus('mandatory')
sensorProbeTemperatureArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Online.setStatus('mandatory')
sensorProbeTemperatureArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2GoOnline.setStatus('mandatory')
sensorProbeTemperatureArrayPort2HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2HighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort2HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2HighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort2LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2LowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort2LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2LowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort2Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Rearm.setStatus('mandatory')
sensorProbeTemperatureArrayPort2DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DegreeType.setStatus('mandatory')
sensorProbeTemperatureArrayPort2DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DegreeRaw.setStatus('mandatory')
sensorProbeTemperatureArrayPort2Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Offset.setStatus('mandatory')
sensorProbeTemperatureArrayPort2URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2URL.setStatus('mandatory')
sensorProbeTemperatureArrayPort2OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2OpenURL.setStatus('mandatory')
sensorProbeTemperatureArrayPort2DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DatacollectType.setStatus('mandatory')
sensorProbeTemperatureArrayPort2ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeHighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort2ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeHighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort2ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeNormal.setStatus('mandatory')
sensorProbeTemperatureArrayPort2ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeLowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort2ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeLowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort2ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeSensorError.setStatus('mandatory')
sensorProbeTemperatureArrayPort2Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Calendar.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Index.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Description.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Value.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Online.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2GoOnline.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Mode.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2RelayControlPort.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2NormalAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2NormalAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort2EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2EnableTime.setStatus('mandatory')
sensorProbeTemperatureArrayPort3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3))
sensorProbeTemperatureArrayPort3Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Number.setStatus('mandatory')
sensorProbeTemperatureArrayPort3Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Table.setStatus('mandatory')
sensorProbeTemperatureArrayPort3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort3Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Entry.setStatus('mandatory')
sensorProbeTemperatureArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Index.setStatus('mandatory')
sensorProbeTemperatureArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Description.setStatus('mandatory')
sensorProbeTemperatureArrayPort3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Value.setStatus('mandatory')
sensorProbeTemperatureArrayPort3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Status.setStatus('mandatory')
sensorProbeTemperatureArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Online.setStatus('mandatory')
sensorProbeTemperatureArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3GoOnline.setStatus('mandatory')
sensorProbeTemperatureArrayPort3HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3HighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort3HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3HighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort3LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3LowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort3LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3LowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort3Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Rearm.setStatus('mandatory')
sensorProbeTemperatureArrayPort3DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DegreeType.setStatus('mandatory')
sensorProbeTemperatureArrayPort3DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DegreeRaw.setStatus('mandatory')
sensorProbeTemperatureArrayPort3Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Offset.setStatus('mandatory')
sensorProbeTemperatureArrayPort3URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3URL.setStatus('mandatory')
sensorProbeTemperatureArrayPort3OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3OpenURL.setStatus('mandatory')
sensorProbeTemperatureArrayPort3DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DatacollectType.setStatus('mandatory')
sensorProbeTemperatureArrayPort3ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeHighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort3ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeHighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort3ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeNormal.setStatus('mandatory')
sensorProbeTemperatureArrayPort3ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeLowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort3ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeLowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort3ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeSensorError.setStatus('mandatory')
sensorProbeTemperatureArrayPort3Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Calendar.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Index.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Description.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Value.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Online.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3GoOnline.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Mode.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3RelayControlPort.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3NormalAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3NormalAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort3EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3EnableTime.setStatus('mandatory')
sensorProbeTemperatureArrayPort4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4))
sensorProbeTemperatureArrayPort4Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Number.setStatus('mandatory')
sensorProbeTemperatureArrayPort4Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Table.setStatus('mandatory')
sensorProbeTemperatureArrayPort4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort4Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Entry.setStatus('mandatory')
sensorProbeTemperatureArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Index.setStatus('mandatory')
sensorProbeTemperatureArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Description.setStatus('mandatory')
sensorProbeTemperatureArrayPort4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Value.setStatus('mandatory')
sensorProbeTemperatureArrayPort4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Status.setStatus('mandatory')
sensorProbeTemperatureArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Online.setStatus('mandatory')
sensorProbeTemperatureArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4GoOnline.setStatus('mandatory')
sensorProbeTemperatureArrayPort4HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4HighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort4HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4HighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort4LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4LowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort4LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4LowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort4Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Rearm.setStatus('mandatory')
sensorProbeTemperatureArrayPort4DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DegreeType.setStatus('mandatory')
sensorProbeTemperatureArrayPort4DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DegreeRaw.setStatus('mandatory')
sensorProbeTemperatureArrayPort4Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Offset.setStatus('mandatory')
sensorProbeTemperatureArrayPort4URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4URL.setStatus('mandatory')
sensorProbeTemperatureArrayPort4OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4OpenURL.setStatus('mandatory')
sensorProbeTemperatureArrayPort4DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DatacollectType.setStatus('mandatory')
sensorProbeTemperatureArrayPort4ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeHighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort4ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeHighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort4ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeNormal.setStatus('mandatory')
sensorProbeTemperatureArrayPort4ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeLowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort4ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeLowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort4ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeSensorError.setStatus('mandatory')
sensorProbeTemperatureArrayPort4Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Calendar.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Index.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Description.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Value.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Online.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4GoOnline.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Mode.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4RelayControlPort.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4NormalAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4NormalAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort4EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4EnableTime.setStatus('mandatory')
sensorProbeTemperatureArrayPort5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5))
sensorProbeTemperatureArrayPort5Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Number.setStatus('mandatory')
sensorProbeTemperatureArrayPort5Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Table.setStatus('mandatory')
sensorProbeTemperatureArrayPort5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort5Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Entry.setStatus('mandatory')
sensorProbeTemperatureArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Index.setStatus('mandatory')
sensorProbeTemperatureArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Description.setStatus('mandatory')
sensorProbeTemperatureArrayPort5Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Value.setStatus('mandatory')
sensorProbeTemperatureArrayPort5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Status.setStatus('mandatory')
sensorProbeTemperatureArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Online.setStatus('mandatory')
sensorProbeTemperatureArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5GoOnline.setStatus('mandatory')
sensorProbeTemperatureArrayPort5HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5HighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort5HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5HighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort5LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5LowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort5LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5LowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort5Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Rearm.setStatus('mandatory')
sensorProbeTemperatureArrayPort5DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DegreeType.setStatus('mandatory')
sensorProbeTemperatureArrayPort5DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DegreeRaw.setStatus('mandatory')
sensorProbeTemperatureArrayPort5Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Offset.setStatus('mandatory')
sensorProbeTemperatureArrayPort5URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5URL.setStatus('mandatory')
sensorProbeTemperatureArrayPort5OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5OpenURL.setStatus('mandatory')
sensorProbeTemperatureArrayPort5DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DatacollectType.setStatus('mandatory')
sensorProbeTemperatureArrayPort5ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeHighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort5ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeHighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort5ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeNormal.setStatus('mandatory')
sensorProbeTemperatureArrayPort5ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeLowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort5ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeLowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort5ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeSensorError.setStatus('mandatory')
sensorProbeTemperatureArrayPort5Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Calendar.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Index.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Description.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Value.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Online.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5GoOnline.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Mode.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5RelayControlPort.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5NormalAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5NormalAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort5EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5EnableTime.setStatus('mandatory')
sensorProbeTemperatureArrayPort6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6))
sensorProbeTemperatureArrayPort6Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Number.setStatus('mandatory')
sensorProbeTemperatureArrayPort6Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Table.setStatus('mandatory')
sensorProbeTemperatureArrayPort6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort6Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Entry.setStatus('mandatory')
sensorProbeTemperatureArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Index.setStatus('mandatory')
sensorProbeTemperatureArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Description.setStatus('mandatory')
sensorProbeTemperatureArrayPort6Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Value.setStatus('mandatory')
sensorProbeTemperatureArrayPort6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Status.setStatus('mandatory')
sensorProbeTemperatureArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Online.setStatus('mandatory')
sensorProbeTemperatureArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6GoOnline.setStatus('mandatory')
sensorProbeTemperatureArrayPort6HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6HighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort6HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6HighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort6LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6LowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort6LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6LowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort6Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Rearm.setStatus('mandatory')
sensorProbeTemperatureArrayPort6DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DegreeType.setStatus('mandatory')
sensorProbeTemperatureArrayPort6DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DegreeRaw.setStatus('mandatory')
sensorProbeTemperatureArrayPort6Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Offset.setStatus('mandatory')
sensorProbeTemperatureArrayPort6URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6URL.setStatus('mandatory')
sensorProbeTemperatureArrayPort6OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6OpenURL.setStatus('mandatory')
sensorProbeTemperatureArrayPort6DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DatacollectType.setStatus('mandatory')
sensorProbeTemperatureArrayPort6ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeHighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort6ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeHighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort6ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeNormal.setStatus('mandatory')
sensorProbeTemperatureArrayPort6ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeLowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort6ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeLowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort6ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeSensorError.setStatus('mandatory')
sensorProbeTemperatureArrayPort6Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Calendar.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Index.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Description.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Value.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Online.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6GoOnline.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Mode.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6RelayControlPort.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6NormalAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6NormalAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort6EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6EnableTime.setStatus('mandatory')
sensorProbeTemperatureArrayPort7 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7))
sensorProbeTemperatureArrayPort7Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Number.setStatus('mandatory')
sensorProbeTemperatureArrayPort7Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Table.setStatus('mandatory')
sensorProbeTemperatureArrayPort7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort7Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Entry.setStatus('mandatory')
sensorProbeTemperatureArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Index.setStatus('mandatory')
sensorProbeTemperatureArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Description.setStatus('mandatory')
sensorProbeTemperatureArrayPort7Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Value.setStatus('mandatory')
sensorProbeTemperatureArrayPort7Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Status.setStatus('mandatory')
sensorProbeTemperatureArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Online.setStatus('mandatory')
sensorProbeTemperatureArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7GoOnline.setStatus('mandatory')
sensorProbeTemperatureArrayPort7HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7HighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort7HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7HighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort7LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7LowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort7LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7LowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort7Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Rearm.setStatus('mandatory')
sensorProbeTemperatureArrayPort7DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DegreeType.setStatus('mandatory')
sensorProbeTemperatureArrayPort7DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DegreeRaw.setStatus('mandatory')
sensorProbeTemperatureArrayPort7Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Offset.setStatus('mandatory')
sensorProbeTemperatureArrayPort7URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7URL.setStatus('mandatory')
sensorProbeTemperatureArrayPort7OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7OpenURL.setStatus('mandatory')
sensorProbeTemperatureArrayPort7DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DatacollectType.setStatus('mandatory')
sensorProbeTemperatureArrayPort7ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeHighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort7ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeHighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort7ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeNormal.setStatus('mandatory')
sensorProbeTemperatureArrayPort7ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeLowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort7ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeLowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort7ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeSensorError.setStatus('mandatory')
sensorProbeTemperatureArrayPort7Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Calendar.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Index.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Description.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Value.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Online.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7GoOnline.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Mode.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7RelayControlPort.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7NormalAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7NormalAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort7EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7EnableTime.setStatus('mandatory')
sensorProbeTemperatureArrayPort8 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8))
sensorProbeTemperatureArrayPort8Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Number.setStatus('mandatory')
sensorProbeTemperatureArrayPort8Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Table.setStatus('mandatory')
sensorProbeTemperatureArrayPort8Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort8Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Entry.setStatus('mandatory')
sensorProbeTemperatureArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Index.setStatus('mandatory')
sensorProbeTemperatureArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Description.setStatus('mandatory')
sensorProbeTemperatureArrayPort8Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Value.setStatus('mandatory')
sensorProbeTemperatureArrayPort8Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Status.setStatus('mandatory')
sensorProbeTemperatureArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Online.setStatus('mandatory')
sensorProbeTemperatureArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8GoOnline.setStatus('mandatory')
sensorProbeTemperatureArrayPort8HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8HighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort8HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8HighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort8LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8LowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort8LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8LowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort8Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Rearm.setStatus('mandatory')
sensorProbeTemperatureArrayPort8DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DegreeType.setStatus('mandatory')
sensorProbeTemperatureArrayPort8DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DegreeRaw.setStatus('mandatory')
sensorProbeTemperatureArrayPort8Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Offset.setStatus('mandatory')
sensorProbeTemperatureArrayPort8URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8URL.setStatus('mandatory')
sensorProbeTemperatureArrayPort8OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8OpenURL.setStatus('mandatory')
sensorProbeTemperatureArrayPort8DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DatacollectType.setStatus('mandatory')
sensorProbeTemperatureArrayPort8ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeHighCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort8ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeHighWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort8ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeNormal.setStatus('mandatory')
sensorProbeTemperatureArrayPort8ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeLowWarning.setStatus('mandatory')
sensorProbeTemperatureArrayPort8ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeLowCritical.setStatus('mandatory')
sensorProbeTemperatureArrayPort8ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeSensorError.setStatus('mandatory')
sensorProbeTemperatureArrayPort8Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Calendar.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Index.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Description.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Value.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Online.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8GoOnline.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Mode.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8RelayControlPort.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8NormalAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimit1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimitAction1.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8NormalAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimit2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimitAction2.setStatus('mandatory')
sensorProbeThermostatTemperatureArrayPort8EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8EnableTime.setStatus('mandatory')
sensorProbeNoCameraSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34))
sensorProbeNoCameraSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraSensorNumber.setStatus('mandatory')
sensorProbeNoCameraSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2), )
if mibBuilder.loadTexts: sensorProbeNoCameraSensorTable.setStatus('mandatory')
sensorProbeNoCameraSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeNoCameraSensorIndex"))
if mibBuilder.loadTexts: sensorProbeNoCameraSensorEntry.setStatus('mandatory')
sensorProbeNoCameraSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraSensorIndex.setStatus('mandatory')
sensorProbeNoCameraDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraDescription.setStatus('mandatory')
sensorProbeNoCameraStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraStatus.setStatus('mandatory')
sensorProbeNoCameraOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraOnline.setStatus('mandatory')
sensorProbeNoCameraGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraGoOnline.setStatus('mandatory')
sensorProbeNoCameraContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraContTimeHighCritical.setStatus('mandatory')
sensorProbeNoCameraContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraContTimeNormal.setStatus('mandatory')
sensorProbeNoCameraCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraCalendar.setStatus('mandatory')
sensorProbeSoftMotionSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35))
sensorProbeSoftMotionSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorNumber.setStatus('mandatory')
sensorProbeSoftMotionSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2), )
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorTable.setStatus('mandatory')
sensorProbeSoftMotionSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeSoftMotionSensorIndex"))
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorEntry.setStatus('mandatory')
sensorProbeSoftMotionSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorIndex.setStatus('mandatory')
sensorProbeSoftMotionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionDescription.setStatus('mandatory')
sensorProbeSoftMotionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionStatus.setStatus('mandatory')
sensorProbeSoftMotionOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionOnline.setStatus('mandatory')
sensorProbeSoftMotionGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionGoOnline.setStatus('mandatory')
sensorProbeSoftMotionPercentSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionPercentSensitivity.setStatus('mandatory')
sensorProbeSoftMotionURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionURL.setStatus('mandatory')
sensorProbeSoftMotionOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionOpenURL.setStatus('mandatory')
sensorProbeSoftMotionContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionContTimeHighCritical.setStatus('mandatory')
sensorProbeSoftMotionContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionContTimeNormal.setStatus('mandatory')
sensorProbeSoftMotionCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionCalendar.setStatus('mandatory')
sensorProbeSoftMotionMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554431))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionMask.setStatus('mandatory')
sensorProbeSoundDetectorSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36))
sensorProbeSoundDetectorSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorNumber.setStatus('mandatory')
sensorProbeSoundDetectorSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2), )
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorTable.setStatus('mandatory')
sensorProbeSoundDetectorSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeSoundDetectorIndex"))
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorEntry.setStatus('mandatory')
sensorProbeSoundDetectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorIndex.setStatus('mandatory')
sensorProbeSoundDetectorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorDescription.setStatus('mandatory')
sensorProbeSoundDetectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorValue.setStatus('mandatory')
sensorProbeSoundDetectorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorStatus.setStatus('mandatory')
sensorProbeSoundDetectorOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorOnline.setStatus('mandatory')
sensorProbeSoundDetectorGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorGoOnline.setStatus('mandatory')
sensorProbeSoundDetectorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorHighWarning.setStatus('mandatory')
sensorProbeSoundDetectorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorHighCritical.setStatus('mandatory')
sensorProbeSoundDetectorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorLowWarning.setStatus('mandatory')
sensorProbeSoundDetectorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorLowCritical.setStatus('mandatory')
sensorProbeSoundDetectorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorRearm.setStatus('mandatory')
sensorProbeSoundDetectorRecordingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal-mic", 0), ("line-in", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorRecordingSource.setStatus('mandatory')
sensorProbeSoundDetectorMicBoost = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorMicBoost.setStatus('mandatory')
sensorProbeSoundDetectorMicSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 20, 40, 60, 80, 100))).clone(namedValues=NamedValues(("i0", 0), ("i20", 20), ("i40", 40), ("i60", 60), ("i80", 80), ("i100", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorMicSensitivity.setStatus('mandatory')
sensorProbeSoundDetectorPulseLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorPulseLength.setStatus('mandatory')
sensorProbeSoundDetectorURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorURL.setStatus('mandatory')
sensorProbeSoundDetectorOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorOpenURL.setStatus('mandatory')
sensorProbeSoundDetectorDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorDatacollectType.setStatus('mandatory')
sensorProbeSoundDetectorContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeHighCritical.setStatus('mandatory')
sensorProbeSoundDetectorContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeHighWarning.setStatus('mandatory')
sensorProbeSoundDetectorContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeNormal.setStatus('mandatory')
sensorProbeSoundDetectorContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeLowWarning.setStatus('mandatory')
sensorProbeSoundDetectorContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeLowCritical.setStatus('mandatory')
sensorProbeSoundDetectorContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeSensorError.setStatus('mandatory')
sensorProbeSoundDetectorCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorCalendar.setStatus('mandatory')
sensorProbeDrycontactArraySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37))
sensorProbeDrycontactArrayPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1))
sensorProbeDrycontactArrayPort1Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Number.setStatus('mandatory')
sensorProbeDrycontactArrayPort1Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Table.setStatus('mandatory')
sensorProbeDrycontactArrayPort1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort1Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Entry.setStatus('mandatory')
sensorProbeDrycontactArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Index.setStatus('mandatory')
sensorProbeDrycontactArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Description.setStatus('mandatory')
sensorProbeDrycontactArrayPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Status.setStatus('mandatory')
sensorProbeDrycontactArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Online.setStatus('mandatory')
sensorProbeDrycontactArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1GoOnline.setStatus('mandatory')
sensorProbeDrycontactArrayPort1NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1NormalState.setStatus('mandatory')
sensorProbeDrycontactArrayPort1Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Direction.setStatus('mandatory')
sensorProbeDrycontactArrayPort1ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ContTimeCritical.setStatus('mandatory')
sensorProbeDrycontactArrayPort1ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ContTimeNormal.setStatus('mandatory')
sensorProbeDrycontactArrayPort1ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ManualOutputCycleTime.setStatus('mandatory')
sensorProbeDrycontactArrayPort1ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ManualOutputAction.setStatus('mandatory')
sensorProbeDrycontactArrayPort1OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OutputDescOn.setStatus('mandatory')
sensorProbeDrycontactArrayPort1OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OutputDescOff.setStatus('mandatory')
sensorProbeDrycontactArrayPort1URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1URL.setStatus('mandatory')
sensorProbeDrycontactArrayPort1OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OpenURL.setStatus('mandatory')
sensorProbeDrycontactArrayPort1ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ControlMode.setStatus('mandatory')
sensorProbeDrycontactArrayPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2))
sensorProbeDrycontactArrayPort2Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Number.setStatus('mandatory')
sensorProbeDrycontactArrayPort2Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Table.setStatus('mandatory')
sensorProbeDrycontactArrayPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort2Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Entry.setStatus('mandatory')
sensorProbeDrycontactArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Index.setStatus('mandatory')
sensorProbeDrycontactArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Description.setStatus('mandatory')
sensorProbeDrycontactArrayPort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Status.setStatus('mandatory')
sensorProbeDrycontactArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Online.setStatus('mandatory')
sensorProbeDrycontactArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2GoOnline.setStatus('mandatory')
sensorProbeDrycontactArrayPort2NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2NormalState.setStatus('mandatory')
sensorProbeDrycontactArrayPort2Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Direction.setStatus('mandatory')
sensorProbeDrycontactArrayPort2ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ContTimeCritical.setStatus('mandatory')
sensorProbeDrycontactArrayPort2ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ContTimeNormal.setStatus('mandatory')
sensorProbeDrycontactArrayPort2ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ManualOutputCycleTime.setStatus('mandatory')
sensorProbeDrycontactArrayPort2ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ManualOutputAction.setStatus('mandatory')
sensorProbeDrycontactArrayPort2OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OutputDescOn.setStatus('mandatory')
sensorProbeDrycontactArrayPort2OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OutputDescOff.setStatus('mandatory')
sensorProbeDrycontactArrayPort2URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2URL.setStatus('mandatory')
sensorProbeDrycontactArrayPort2OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OpenURL.setStatus('mandatory')
sensorProbeDrycontactArrayPort2ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ControlMode.setStatus('mandatory')
sensorProbeDrycontactArrayPort3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3))
sensorProbeDrycontactArrayPort3Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Number.setStatus('mandatory')
sensorProbeDrycontactArrayPort3Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Table.setStatus('mandatory')
sensorProbeDrycontactArrayPort3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort3Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Entry.setStatus('mandatory')
sensorProbeDrycontactArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Index.setStatus('mandatory')
sensorProbeDrycontactArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Description.setStatus('mandatory')
sensorProbeDrycontactArrayPort3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Status.setStatus('mandatory')
sensorProbeDrycontactArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Online.setStatus('mandatory')
sensorProbeDrycontactArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3GoOnline.setStatus('mandatory')
sensorProbeDrycontactArrayPort3NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3NormalState.setStatus('mandatory')
sensorProbeDrycontactArrayPort3Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Direction.setStatus('mandatory')
sensorProbeDrycontactArrayPort3ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ContTimeCritical.setStatus('mandatory')
sensorProbeDrycontactArrayPort3ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ContTimeNormal.setStatus('mandatory')
sensorProbeDrycontactArrayPort3ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ManualOutputCycleTime.setStatus('mandatory')
sensorProbeDrycontactArrayPort3ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ManualOutputAction.setStatus('mandatory')
sensorProbeDrycontactArrayPort3OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OutputDescOn.setStatus('mandatory')
sensorProbeDrycontactArrayPort3OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OutputDescOff.setStatus('mandatory')
sensorProbeDrycontactArrayPort3URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3URL.setStatus('mandatory')
sensorProbeDrycontactArrayPort3OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OpenURL.setStatus('mandatory')
sensorProbeDrycontactArrayPort3ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ControlMode.setStatus('mandatory')
sensorProbeDrycontactArrayPort4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4))
sensorProbeDrycontactArrayPort4Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Number.setStatus('mandatory')
sensorProbeDrycontactArrayPort4Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Table.setStatus('mandatory')
sensorProbeDrycontactArrayPort4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort4Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Entry.setStatus('mandatory')
sensorProbeDrycontactArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Index.setStatus('mandatory')
sensorProbeDrycontactArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Description.setStatus('mandatory')
sensorProbeDrycontactArrayPort4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Status.setStatus('mandatory')
sensorProbeDrycontactArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Online.setStatus('mandatory')
sensorProbeDrycontactArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4GoOnline.setStatus('mandatory')
sensorProbeDrycontactArrayPort4NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4NormalState.setStatus('mandatory')
sensorProbeDrycontactArrayPort4Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Direction.setStatus('mandatory')
sensorProbeDrycontactArrayPort4ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ContTimeCritical.setStatus('mandatory')
sensorProbeDrycontactArrayPort4ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ContTimeNormal.setStatus('mandatory')
sensorProbeDrycontactArrayPort4ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ManualOutputCycleTime.setStatus('mandatory')
sensorProbeDrycontactArrayPort4ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ManualOutputAction.setStatus('mandatory')
sensorProbeDrycontactArrayPort4OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OutputDescOn.setStatus('mandatory')
sensorProbeDrycontactArrayPort4OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OutputDescOff.setStatus('mandatory')
sensorProbeDrycontactArrayPort4URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4URL.setStatus('mandatory')
sensorProbeDrycontactArrayPort4OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OpenURL.setStatus('mandatory')
sensorProbeDrycontactArrayPort4ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ControlMode.setStatus('mandatory')
sensorProbeDrycontactArrayPort5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5))
sensorProbeDrycontactArrayPort5Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Number.setStatus('mandatory')
sensorProbeDrycontactArrayPort5Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Table.setStatus('mandatory')
sensorProbeDrycontactArrayPort5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort5Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Entry.setStatus('mandatory')
sensorProbeDrycontactArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Index.setStatus('mandatory')
sensorProbeDrycontactArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Description.setStatus('mandatory')
sensorProbeDrycontactArrayPort5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Status.setStatus('mandatory')
sensorProbeDrycontactArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Online.setStatus('mandatory')
sensorProbeDrycontactArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5GoOnline.setStatus('mandatory')
sensorProbeDrycontactArrayPort5NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5NormalState.setStatus('mandatory')
sensorProbeDrycontactArrayPort5Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Direction.setStatus('mandatory')
sensorProbeDrycontactArrayPort5ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ContTimeCritical.setStatus('mandatory')
sensorProbeDrycontactArrayPort5ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ContTimeNormal.setStatus('mandatory')
sensorProbeDrycontactArrayPort5ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ManualOutputCycleTime.setStatus('mandatory')
sensorProbeDrycontactArrayPort5ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ManualOutputAction.setStatus('mandatory')
sensorProbeDrycontactArrayPort5OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OutputDescOn.setStatus('mandatory')
sensorProbeDrycontactArrayPort5OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OutputDescOff.setStatus('mandatory')
sensorProbeDrycontactArrayPort5URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5URL.setStatus('mandatory')
sensorProbeDrycontactArrayPort5OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OpenURL.setStatus('mandatory')
sensorProbeDrycontactArrayPort5ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ControlMode.setStatus('mandatory')
sensorProbeDrycontactArrayPort6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6))
sensorProbeDrycontactArrayPort6Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Number.setStatus('mandatory')
sensorProbeDrycontactArrayPort6Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Table.setStatus('mandatory')
sensorProbeDrycontactArrayPort6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort6Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Entry.setStatus('mandatory')
sensorProbeDrycontactArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Index.setStatus('mandatory')
sensorProbeDrycontactArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Description.setStatus('mandatory')
sensorProbeDrycontactArrayPort6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Status.setStatus('mandatory')
sensorProbeDrycontactArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Online.setStatus('mandatory')
sensorProbeDrycontactArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6GoOnline.setStatus('mandatory')
sensorProbeDrycontactArrayPort6NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6NormalState.setStatus('mandatory')
sensorProbeDrycontactArrayPort6Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Direction.setStatus('mandatory')
sensorProbeDrycontactArrayPort6ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ContTimeCritical.setStatus('mandatory')
sensorProbeDrycontactArrayPort6ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ContTimeNormal.setStatus('mandatory')
sensorProbeDrycontactArrayPort6ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ManualOutputCycleTime.setStatus('mandatory')
sensorProbeDrycontactArrayPort6ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ManualOutputAction.setStatus('mandatory')
sensorProbeDrycontactArrayPort6OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OutputDescOn.setStatus('mandatory')
sensorProbeDrycontactArrayPort6OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OutputDescOff.setStatus('mandatory')
sensorProbeDrycontactArrayPort6URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6URL.setStatus('mandatory')
sensorProbeDrycontactArrayPort6OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OpenURL.setStatus('mandatory')
sensorProbeDrycontactArrayPort6ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ControlMode.setStatus('mandatory')
sensorProbeDrycontactArrayPort7 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7))
sensorProbeDrycontactArrayPort7Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Number.setStatus('mandatory')
sensorProbeDrycontactArrayPort7Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Table.setStatus('mandatory')
sensorProbeDrycontactArrayPort7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort7Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Entry.setStatus('mandatory')
sensorProbeDrycontactArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Index.setStatus('mandatory')
sensorProbeDrycontactArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Description.setStatus('mandatory')
sensorProbeDrycontactArrayPort7Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Status.setStatus('mandatory')
sensorProbeDrycontactArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Online.setStatus('mandatory')
sensorProbeDrycontactArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7GoOnline.setStatus('mandatory')
sensorProbeDrycontactArrayPort7NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7NormalState.setStatus('mandatory')
sensorProbeDrycontactArrayPort7Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Direction.setStatus('mandatory')
sensorProbeDrycontactArrayPort7ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ContTimeCritical.setStatus('mandatory')
sensorProbeDrycontactArrayPort7ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ContTimeNormal.setStatus('mandatory')
sensorProbeDrycontactArrayPort7ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ManualOutputCycleTime.setStatus('mandatory')
sensorProbeDrycontactArrayPort7ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ManualOutputAction.setStatus('mandatory')
sensorProbeDrycontactArrayPort7OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OutputDescOn.setStatus('mandatory')
sensorProbeDrycontactArrayPort7OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OutputDescOff.setStatus('mandatory')
sensorProbeDrycontactArrayPort7URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7URL.setStatus('mandatory')
sensorProbeDrycontactArrayPort7OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OpenURL.setStatus('mandatory')
sensorProbeDrycontactArrayPort7ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ControlMode.setStatus('mandatory')
sensorProbeDrycontactArrayPort8 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8))
sensorProbeDrycontactArrayPort8Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Number.setStatus('mandatory')
sensorProbeDrycontactArrayPort8Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Table.setStatus('mandatory')
sensorProbeDrycontactArrayPort8Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort8Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Entry.setStatus('mandatory')
sensorProbeDrycontactArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Index.setStatus('mandatory')
sensorProbeDrycontactArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Description.setStatus('mandatory')
sensorProbeDrycontactArrayPort8Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Status.setStatus('mandatory')
sensorProbeDrycontactArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Online.setStatus('mandatory')
sensorProbeDrycontactArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8GoOnline.setStatus('mandatory')
sensorProbeDrycontactArrayPort8NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8NormalState.setStatus('mandatory')
sensorProbeDrycontactArrayPort8Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Direction.setStatus('mandatory')
sensorProbeDrycontactArrayPort8ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ContTimeCritical.setStatus('mandatory')
sensorProbeDrycontactArrayPort8ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ContTimeNormal.setStatus('mandatory')
sensorProbeDrycontactArrayPort8ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ManualOutputCycleTime.setStatus('mandatory')
sensorProbeDrycontactArrayPort8ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ManualOutputAction.setStatus('mandatory')
sensorProbeDrycontactArrayPort8OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OutputDescOn.setStatus('mandatory')
sensorProbeDrycontactArrayPort8OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OutputDescOff.setStatus('mandatory')
sensorProbeDrycontactArrayPort8URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8URL.setStatus('mandatory')
sensorProbeDrycontactArrayPort8OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OpenURL.setStatus('mandatory')
sensorProbeDrycontactArrayPort8ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ControlMode.setStatus('mandatory')
sensorProbeDebug = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDebug.setStatus('mandatory')
sensorProbeTrapResend = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapResend.setStatus('mandatory')
sensorProbeTrapResendInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapResendInterval.setStatus('mandatory')
sensorProbeSendTraps = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendTraps.setStatus('mandatory')
sensorProbeTrapDestination = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapDestination.setStatus('mandatory')
sensorProbeTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapCommunity.setStatus('mandatory')
sensorProbeDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDefaultGateway.setStatus('mandatory')
sensorProbeSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSubnetMask.setStatus('mandatory')
sensorProbeRouteAdd = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRouteAdd.setStatus('mandatory')
sensorProbeSendMail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendMail.setStatus('mandatory')
sensorProbeMailRecpt = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailRecpt.setStatus('mandatory')
sensorProbeMailFrom = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailFrom.setStatus('mandatory')
sensorProbeMailSMTP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailSMTP.setStatus('mandatory')
sensorProbeMailJpgInline = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inline", 1), ("link", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailJpgInline.setStatus('mandatory')
sensorProbeMailResendInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailResendInterval.setStatus('mandatory')
sensorProbeMailMaxResend = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailMaxResend.setStatus('mandatory')
sensorProbeMailLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeMailLastStatus.setStatus('mandatory')
sensorProbeSupportMailRcpt = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSupportMailRcpt.setStatus('mandatory')
sensorProbeCameraServerTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42), )
if mibBuilder.loadTexts: sensorProbeCameraServerTable.setStatus('mandatory')
sensorProbeCameraServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeCameraServerIndex"))
if mibBuilder.loadTexts: sensorProbeCameraServerEntry.setStatus('mandatory')
sensorProbeCameraServerClientOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeCameraServerClientOnline.setStatus('mandatory')
sensorProbeCameraServerClientGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraServerClientGoOnline.setStatus('mandatory')
sensorProbeCameraServerClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraServerClientIP.setStatus('mandatory')
sensorProbeCameraServerClientSetPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraServerClientSetPassword.setStatus('mandatory')
sensorProbeCameraServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeCameraServerIndex.setStatus('mandatory')
sensorProbeJavaTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeJavaTimeOut.setStatus('mandatory')
sensorProbeJpegQualityFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 95))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeJpegQualityFactor.setStatus('mandatory')
sensorProbeCameraDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraDescription.setStatus('mandatory')
sensorProbeCameraRotate = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonRotate", 0), ("rotate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraRotate.setStatus('mandatory')
sensorProbeCameraResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resolution320x240", 0), ("resolution640x480", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraResolution.setStatus('mandatory')
sensorProbePTZRotateRelative = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZRotateRelative.setStatus('mandatory')
sensorProbePTZRotateAbsolute = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZRotateAbsolute.setStatus('mandatory')
sensorProbeAudioAttachChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAttachAudio", 0), ("attachAudio", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAudioAttachChannel.setStatus('mandatory')
sensorProbePTZEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableInternal", 1), ("enableExternal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZEnable.setStatus('mandatory')
sensorProbePTZBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("generalBrand", 0), ("akcpBrand", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZBrand.setStatus('mandatory')
sensorProbePTZPanTiltUntilEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stop", 0), ("right", 1), ("left", 2), ("up", 3), ("down", 4), ("right-up", 5), ("right-down", 6), ("left-up", 7), ("left-down", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZPanTiltUntilEnd.setStatus('mandatory')
sensorProbeTrapMailPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapMailPollInterval.setStatus('mandatory')
sensorProbeSendTestMail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendTestMail.setStatus('mandatory')
sensorProbeLastSystemError = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeLastSystemError.setStatus('mandatory')
sensorProbeDataCollectionPeriod = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDataCollectionPeriod.setStatus('mandatory')
sensorProbeMailTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailTimeout.setStatus('mandatory')
sensorProbeAutoSense = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAutoSense.setStatus('mandatory')
sensorProbeChecksum = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeChecksum.setStatus('mandatory')
sensorProbeUsePassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usePassword", 0), ("doNotUsePassword", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeUsePassword.setStatus('mandatory')
sensorProbeDisplayLogo = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDisplayLogo.setStatus('mandatory')
sensorProbeTrapType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("specificTypeTrap", 1), ("generalTypeTrap", 2), ("bothTypeTraps", 3), ("statusTypeTraps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapType.setStatus('mandatory')
sensorProbeMailCC = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 61), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailCC.setStatus('mandatory')
sensorProbeAllowIPChange = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAllowIPChange.setStatus('mandatory')
sensorProbeTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 65), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTimeOfDay.setStatus('mandatory')
sensorProbeEnableSysLog = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLogToFlash", 1), ("enableLogToNetAndFlash", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnableSysLog.setStatus('mandatory')
sensorProbeReadSysLog = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lastMessage", 1), ("allMessages", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeReadSysLog.setStatus('mandatory')
sensorProbeClearSysLog = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("allMessages", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeClearSysLog.setStatus('mandatory')
sensorProbeSyslogDestIP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 69), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSyslogDestIP.setStatus('mandatory')
sensorProbeSyslogPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 70), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSyslogPort.setStatus('mandatory')
sensorProbeSetSyslogMsgPrefix = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSetSyslogMsgPrefix.setStatus('mandatory')
sensorProbeTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 81), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTimeZone.setStatus('mandatory')
sensorProbeMegaVersion = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeMegaVersion.setStatus('mandatory')
sensorProbeNtpMode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notUse", 0), ("oneTime", 1), ("onSystemStartUp", 2), ("onceAMounth", 3), ("onceAWeek", 4), ("onceADay", 5), ("onceAnHour", 6), ("continuous", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNtpMode.setStatus('mandatory')
sensorProbeNtpServer = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 85), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNtpServer.setStatus('mandatory')
sensorProbeSMTPAuth = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSMTPAuth.setStatus('mandatory')
sensorProbeSMTPLogin = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 88), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSMTPLogin.setStatus('mandatory')
sensorProbeSMTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 89), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSMTPPassword.setStatus('mandatory')
sensorProbeDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 90), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDNSServer.setStatus('mandatory')
sensorProbeAltWebPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 91), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAltWebPort.setStatus('mandatory')
sensorProbeNumberOfSensorPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNumberOfSensorPort.setStatus('mandatory')
sensorProbeSendTrapsAlive = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendTrapsAlive.setStatus('mandatory')
sensorProbeTrapReIntervalAlive = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 94), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapReIntervalAlive.setStatus('mandatory')
sensorProbeUseCamera = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeUseCamera.setStatus('mandatory')
sensorProbeAdcCalibratePort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 96), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAdcCalibratePort.setStatus('mandatory')
sensorProbeMailSubject = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 98), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailSubject.setStatus('mandatory')
sensorProbeSnmpPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 99), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSnmpPort.setStatus('mandatory')
sensorProbeSnmpTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 100), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSnmpTrapPort.setStatus('mandatory')
sensorProbeSnmpIndexingMode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("index0", 0), ("index1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSnmpIndexingMode.setStatus('mandatory')
sensorProbeNotifyBoot = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 103), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNotifyBoot.setStatus('mandatory')
sensorProbeDelayNotifyBoot = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 104), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDelayNotifyBoot.setStatus('mandatory')
sensorProbeSmtpPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 105), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSmtpPort.setStatus('mandatory')
sensorProbeReboot = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 106), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeReboot.setStatus('mandatory')
sensorProbeServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeServerEnable.setStatus('mandatory')
sensorProbeFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 108), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeFirmwareVersion.setStatus('mandatory')
sensorProbeProductType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 11, 12, 13, 16))).clone(namedValues=NamedValues(("sensorProbe2", 1), ("sensorProbe8", 2), ("cameraProbe", 4), ("securityProbe", 5), ("securityProbe5E", 6), ("securityProbe5ES", 11), ("securityProbe5ESV", 12), ("securityProbeDCU", 13), ("sensorProbePlus", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeProductType.setStatus('mandatory')
sensorProbeRequestResendTrap = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 110), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRequestResendTrap.setStatus('mandatory')
sensorProbeSeparateEmail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSeparate", 0), ("separate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSeparateEmail.setStatus('mandatory')
sensorProbeMailCustom = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("custom", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailCustom.setStatus('mandatory')
sensorProbeUntidePassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tidePassword", 0), ("untidePassword", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeUntidePassword.setStatus('mandatory')
sensorProbeReloadNetwork = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reload", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeReloadNetwork.setStatus('mandatory')
sensorProbeStatusNumber = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117))
sensorProbeStatusNumberNotNormal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeStatusNumberNotNormal.setStatus('mandatory')
sensorProbeStatusNumberCriticalAndError = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeStatusNumberCriticalAndError.setStatus('mandatory')
sensorProbeStatusNumberError = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeStatusNumberError.setStatus('mandatory')
sensorProbeTypeName = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118))
sensorProbeTypeTemperatureName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeTemperatureName.setStatus('mandatory')
sensorProbeTypeSHT11HumidityName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSHT11HumidityName.setStatus('mandatory')
sensorProbeTypeSHT11TempName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSHT11TempName.setStatus('mandatory')
sensorProbeType4to20MAName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeType4to20MAName.setStatus('mandatory')
sensorProbeTypeDCvoltageName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeDCvoltageName.setStatus('mandatory')
sensorProbeTypeAirflowName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeAirflowName.setStatus('mandatory')
sensorProbeTypeDrycontactInoutName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeDrycontactInoutName.setStatus('mandatory')
sensorProbeTypeDrycontactInputName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeDrycontactInputName.setStatus('mandatory')
sensorProbeTypeMotionName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeMotionName.setStatus('mandatory')
sensorProbeTypeWaterName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeWaterName.setStatus('mandatory')
sensorProbeTypeSecurityName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSecurityName.setStatus('mandatory')
sensorProbeTypeSirenName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSirenName.setStatus('mandatory')
sensorProbeTypeRelayName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeRelayName.setStatus('mandatory')
sensorProbeTypeACvoltageName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeACvoltageName.setStatus('mandatory')
sensorProbeTypeADE7763VRMSName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763VRMSName.setStatus('mandatory')
sensorProbeTypeADE7763IRMSName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763IRMSName.setStatus('mandatory')
sensorProbeTypeADE7763WattName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763WattName.setStatus('mandatory')
sensorProbeTypeADE7763WatthourName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763WatthourName.setStatus('mandatory')
sensorProbeTypePCF8574XRelayName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypePCF8574XRelayName.setStatus('mandatory')
sensorProbeTypeThermocoupleName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeThermocoupleName.setStatus('mandatory')
sensorProbeTypeSmokeName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSmokeName.setStatus('mandatory')
sensorProbeTypeXDryName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeXDryName.setStatus('mandatory')
sensorProbeTypeTemperatureArrayName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeTemperatureArrayName.setStatus('mandatory')
sensorProbeTypeWaterRopeName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeWaterRopeName.setStatus('mandatory')
sensorProbeTypeFuelLevelName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeFuelLevelName.setStatus('mandatory')
sensorProbeTypeTankSenderName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeTankSenderName.setStatus('mandatory')
sensorProbeTypeThermostatName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 128), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeThermostatName.setStatus('mandatory')
sensorProbeTypeVirtualName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 129), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeVirtualName.setStatus('mandatory')
sensorProbeTypeSoundName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 130), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSoundName.setStatus('mandatory')
sensorProbeTypeSoftMotionName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 131), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSoftMotionName.setStatus('mandatory')
sensorProbeTypeNoSignalName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 132), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeNoSignalName.setStatus('mandatory')
sensorProbeTypePowerMeterName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 134), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypePowerMeterName.setStatus('mandatory')
sensorProbeTypeSHT11Name = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 135), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSHT11Name.setStatus('mandatory')
sensorProbeTypeADE7763Name = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 136), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763Name.setStatus('mandatory')
sensorProbeProductRevision = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 119), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeProductRevision.setStatus('mandatory')
sensorProbePowerMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125))
sensorProbePowerMeter1phDelayBetweenCommand = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePowerMeter1phDelayBetweenCommand.setStatus('mandatory')
sensorProbePowerMeter3phDelayBetweenCommand = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePowerMeter3phDelayBetweenCommand.setStatus('mandatory')
sensorProbePowerMeter1phDelayBetweenMeter = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePowerMeter1phDelayBetweenMeter.setStatus('mandatory')
sensorProbePowerMeter3phDelayBetweenMeter = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePowerMeter3phDelayBetweenMeter.setStatus('mandatory')
sensorProbePowerMeterWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePowerMeterWaitTimeout.setStatus('mandatory')
sensorProbePowerMeterCountSentPacket = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbePowerMeterCountSentPacket.setStatus('mandatory')
sensorProbePowerMeterCountRecievedPacket = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbePowerMeterCountRecievedPacket.setStatus('mandatory')
sensorProbePowerMeterCountTimeoutPacket = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbePowerMeterCountTimeoutPacket.setStatus('mandatory')
sensorProbePowerMeterCountCRCErrorPacket = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbePowerMeterCountCRCErrorPacket.setStatus('mandatory')
securityProbe = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2))
secSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 1))
secDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 2))
deviceTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1), )
if mibBuilder.loadTexts: deviceTable.setStatus('mandatory')
deviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceIndex"))
if mibBuilder.loadTexts: deviceEntry.setStatus('mandatory')
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 184549375))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIndex.setStatus('mandatory')
deviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceDescription.setStatus('mandatory')
deviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceType.setStatus('mandatory')
deviceInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInfo.setStatus('mandatory')
deviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceStatus.setStatus('mandatory')
deviceWorstSensotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceWorstSensotStatus.setStatus('mandatory')
deviceIntelligentTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2), )
if mibBuilder.loadTexts: deviceIntelligentTable.setStatus('mandatory')
deviceIntelligentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceIntelligentIndex"))
if mibBuilder.loadTexts: deviceIntelligentEntry.setStatus('mandatory')
deviceIntelligentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntelligentIndex.setStatus('mandatory')
deviceIntelligentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceIntelligentDescription.setStatus('mandatory')
deviceIntelligentInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntelligentInfo.setStatus('mandatory')
deviceIntelligentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntelligentStatus.setStatus('mandatory')
sensorIntelligentTypeSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentTypeSelected.setStatus('mandatory')
deviceIntelligentWorstSensotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntelligentWorstSensotStatus.setStatus('mandatory')
sensorIntelligentPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort1GoOnline.setStatus('mandatory')
sensorIntelligentPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort2GoOnline.setStatus('mandatory')
sensorIntelligentPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort3GoOnline.setStatus('mandatory')
sensorIntelligentPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort4GoOnline.setStatus('mandatory')
sensorIntelligentPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort5GoOnline.setStatus('mandatory')
sensorIntelligentPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort6GoOnline.setStatus('mandatory')
sensorIntelligentPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort7GoOnline.setStatus('mandatory')
sensorIntelligentPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort8GoOnline.setStatus('mandatory')
deviceDryContactTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3), )
if mibBuilder.loadTexts: deviceDryContactTable.setStatus('mandatory')
deviceDryContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceDryContactIndex"))
if mibBuilder.loadTexts: deviceDryContactEntry.setStatus('mandatory')
deviceDryContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDryContactIndex.setStatus('mandatory')
deviceDryContactDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceDryContactDescription.setStatus('mandatory')
deviceDryContactInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDryContactInfo.setStatus('mandatory')
deviceDryContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDryContactStatus.setStatus('mandatory')
deviceDryContactWorstSensotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDryContactWorstSensotStatus.setStatus('mandatory')
sensorDryContactPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort1GoOnline.setStatus('mandatory')
sensorDryContactPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort2GoOnline.setStatus('mandatory')
sensorDryContactPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort3GoOnline.setStatus('mandatory')
sensorDryContactPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort4GoOnline.setStatus('mandatory')
sensorDryContactPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort5GoOnline.setStatus('mandatory')
sensorDryContactPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort6GoOnline.setStatus('mandatory')
sensorDryContactPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort7GoOnline.setStatus('mandatory')
sensorDryContactPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort8GoOnline.setStatus('mandatory')
sensorDryContactPort9GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort9GoOnline.setStatus('mandatory')
sensorDryContactPort10GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort10GoOnline.setStatus('mandatory')
sensorDryContactPort11GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort11GoOnline.setStatus('mandatory')
sensorDryContactPort12GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort12GoOnline.setStatus('mandatory')
sensorDryContactPort13GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort13GoOnline.setStatus('mandatory')
sensorDryContactPort14GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort14GoOnline.setStatus('mandatory')
sensorDryContactPort15GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort15GoOnline.setStatus('mandatory')
sensorDryContactPort16GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort16GoOnline.setStatus('mandatory')
deviceAccessTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4), )
if mibBuilder.loadTexts: deviceAccessTable.setStatus('mandatory')
deviceAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceAccessIndex"))
if mibBuilder.loadTexts: deviceAccessEntry.setStatus('mandatory')
deviceAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAccessIndex.setStatus('mandatory')
deviceAccessDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceAccessDescription.setStatus('mandatory')
deviceAccessInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAccessInfo.setStatus('mandatory')
deviceAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAccessStatus.setStatus('mandatory')
deviceAccessWorstSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAccessWorstSensorStatus.setStatus('mandatory')
devicePowerMeterTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5), )
if mibBuilder.loadTexts: devicePowerMeterTable.setStatus('mandatory')
devicePowerMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1), ).setIndexNames((0, "SPAGENT-MIB", "devicePowerMeterIndex"))
if mibBuilder.loadTexts: devicePowerMeterEntry.setStatus('mandatory')
devicePowerMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 184549375))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterIndex.setStatus('mandatory')
devicePowerMeterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devicePowerMeterDescription.setStatus('mandatory')
devicePowerMeterInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterInfo.setStatus('mandatory')
devicePowerMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterStatus.setStatus('mandatory')
devicePowerMeterWorstSensotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterWorstSensotStatus.setStatus('mandatory')
devicePowerMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterType.setStatus('mandatory')
devicePowerMeterDelayBetweenCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devicePowerMeterDelayBetweenCommand.setStatus('mandatory')
devicePowerMeterCountSentPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterCountSentPacket.setStatus('mandatory')
devicePowerMeterCountRecievedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterCountRecievedPacket.setStatus('mandatory')
devicePowerMeterCountTimeoutPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterCountTimeoutPacket.setStatus('mandatory')
devicePowerMeterCountCRCerrorPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterCountCRCerrorPacket.setStatus('mandatory')
deviceLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6))
deviceLicenseExpTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseExpTotal.setStatus('mandatory')
deviceLicenseExpUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseExpUsed.setStatus('mandatory')
deviceLicenseExpAvailable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseExpAvailable.setStatus('mandatory')
deviceLicensePmsTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicensePmsTotal.setStatus('mandatory')
deviceLicensePmsUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicensePmsUsed.setStatus('mandatory')
deviceLicensePmsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicensePmsAvailable.setStatus('mandatory')
deviceLicenseVrtTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseVrtTotal.setStatus('mandatory')
deviceLicenseVrtUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseVrtUsed.setStatus('mandatory')
deviceLicenseVrtAvailable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseVrtAvailable.setStatus('mandatory')
deviceLicenseIPv6Enable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseIPv6Enable.setStatus('mandatory')
deviceLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11), )
if mibBuilder.loadTexts: deviceLicenseTable.setStatus('mandatory')
deviceLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceLicenseIndex"))
if mibBuilder.loadTexts: deviceLicenseEntry.setStatus('mandatory')
deviceLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseIndex.setStatus('mandatory')
deviceLicenseExpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseExpCount.setStatus('mandatory')
deviceLicensePmsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicensePmsCount.setStatus('mandatory')
deviceLicenseVrtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseVrtCount.setStatus('mandatory')
deviceLicenseIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseIpv6.setStatus('mandatory')
deviceLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseStatus.setStatus('mandatory')
secSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 3))
sensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1), )
if mibBuilder.loadTexts: sensorTable.setStatus('mandatory')
sensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorEntry.setStatus('mandatory')
sensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIndex.setStatus('mandatory')
sensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDescription.setStatus('mandatory')
sensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 128, 129, 130, 131, 132, 133, 224, 255))).clone(namedValues=NamedValues(("temperature", 1), ("humidity", 2), ("temperature-dual", 3), ("four-20mA", 4), ("dcvoltage", 5), ("airflow", 6), ("io", 7), ("drycontact", 8), ("motion", 9), ("water", 10), ("security", 11), ("siren", 12), ("relay", 13), ("acvoltage", 14), ("vrms", 15), ("irms", 16), ("watt", 17), ("watthour", 18), ("xrelay", 19), ("thermocouple", 20), ("smoke", 21), ("drycontact-array", 22), ("temperature-array", 23), ("thermostat", 128), ("virtual", 129), ("sound", 130), ("softmotion", 131), ("camera-dummy", 132), ("board-state", 133), ("nosignal", 224), ("test", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorType.setStatus('mandatory')
sensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorValue.setStatus('mandatory')
sensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorUnit.setStatus('mandatory')
sensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorStatus.setStatus('mandatory')
sensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorGoOffline.setStatus('mandatory')
sensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPort.setStatus('mandatory')
sensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSubPort.setStatus('mandatory')
sensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDeviceIndex.setStatus('mandatory')
sensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDisplayStyle.setStatus('mandatory')
sensorHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighCriticalDescription.setStatus('mandatory')
sensorLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowCriticalDescription.setStatus('mandatory')
sensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorNormalDescription.setStatus('mandatory')
sensorLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowWarningDescription.setStatus('mandatory')
sensorHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighWarningDescription.setStatus('mandatory')
sensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorErrorDescription.setStatus('mandatory')
sensorOnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOnDescription.setStatus('mandatory')
sensorOffDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOffDescription.setStatus('mandatory')
sensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighCriticalColor.setStatus('mandatory')
sensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowCriticalColor.setStatus('mandatory')
sensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorNormalColor.setStatus('mandatory')
sensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowWarningColor.setStatus('mandatory')
sensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighWarningColor.setStatus('mandatory')
sensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorErrorColor.setStatus('mandatory')
sensorOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOnColor.setStatus('mandatory')
sensorOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOffColor.setStatus('mandatory')
sensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAcknowledge.setStatus('mandatory')
sensorValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 99), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorValueFormatFloat.setStatus('mandatory')
sensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorId.setStatus('mandatory')
sensorTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2), )
if mibBuilder.loadTexts: sensorTemperatureTable.setStatus('mandatory')
sensorTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorTemperatureIndex"))
if mibBuilder.loadTexts: sensorTemperatureEntry.setStatus('mandatory')
sensorTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureIndex.setStatus('mandatory')
sensorTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDescription.setStatus('mandatory')
sensorTemperatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 20, 23))).clone(namedValues=NamedValues(("temperature", 1), ("dualsensor", 3), ("thermocouple", 20), ("arraytemp", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureType.setStatus('mandatory')
sensorTemperatureDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureDegree.setStatus('mandatory')
sensorTemperatureUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureUnit.setStatus('mandatory')
sensorTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureStatus.setStatus('mandatory')
sensorTemperatureGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureGoOffline.setStatus('mandatory')
sensorTemperatureLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowCritical.setStatus('mandatory')
sensorTemperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowWarning.setStatus('mandatory')
sensorTemperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighWarning.setStatus('mandatory')
sensorTemperatureHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighCritical.setStatus('mandatory')
sensorTemperatureRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureRearm.setStatus('mandatory')
sensorTemperatureDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayError.setStatus('mandatory')
sensorTemperatureDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayNormal.setStatus('mandatory')
sensorTemperatureDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayLowCritical.setStatus('mandatory')
sensorTemperatureDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayLowWarning.setStatus('mandatory')
sensorTemperatureDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayHighWarning.setStatus('mandatory')
sensorTemperatureDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayHighCritical.setStatus('mandatory')
sensorTemperatureRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureRaw.setStatus('mandatory')
sensorTemperatureOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureOffset.setStatus('mandatory')
sensorTemperaturePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperaturePort.setStatus('mandatory')
sensorTemperatureSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureSubPort.setStatus('mandatory')
sensorTemperatureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureDeviceIndex.setStatus('mandatory')
sensorTemperatureDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDisplayStyle.setStatus('mandatory')
sensorTemperatureHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighCriticalDesc.setStatus('mandatory')
sensorTemperatureLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowCriticalDesc.setStatus('mandatory')
sensorTemperatureNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureNormalDesc.setStatus('mandatory')
sensorTemperatureLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowWarningDesc.setStatus('mandatory')
sensorTemperatureHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighWarningDesc.setStatus('mandatory')
sensorTemperatureSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureSensorErrorDesc.setStatus('mandatory')
sensorTemperatureHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighCriticalColor.setStatus('mandatory')
sensorTemperatureLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowCriticalColor.setStatus('mandatory')
sensorTemperatureNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureNormalColor.setStatus('mandatory')
sensorTemperatureLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowWarningColor.setStatus('mandatory')
sensorTemperatureHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighWarningColor.setStatus('mandatory')
sensorTemperatureSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureSensorErrorColor.setStatus('mandatory')
sensorTemperatureAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureAcknowledge.setStatus('mandatory')
sensorTemperatureSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureSerialNumber.setStatus('mandatory')
sensorTemperatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureId.setStatus('mandatory')
sensorHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3), )
if mibBuilder.loadTexts: sensorHumidityTable.setStatus('mandatory')
sensorHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorHumidityIndex"))
if mibBuilder.loadTexts: sensorHumidityEntry.setStatus('mandatory')
sensorHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityIndex.setStatus('mandatory')
sensorHumidityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDescription.setStatus('mandatory')
sensorHumidityPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityPercent.setStatus('mandatory')
sensorHumidityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityUnit.setStatus('mandatory')
sensorHumidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityStatus.setStatus('mandatory')
sensorHumidityGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityGoOffline.setStatus('mandatory')
sensorHumidityLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowCritical.setStatus('mandatory')
sensorHumidityLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowWarning.setStatus('mandatory')
sensorHumidityHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighWarning.setStatus('mandatory')
sensorHumidityHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighCritical.setStatus('mandatory')
sensorHumidityRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityRearm.setStatus('mandatory')
sensorHumidityDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayError.setStatus('mandatory')
sensorHumidityDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayNormal.setStatus('mandatory')
sensorHumidityDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayLowCritical.setStatus('mandatory')
sensorHumidityDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayLowWarning.setStatus('mandatory')
sensorHumidityDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayHighWarning.setStatus('mandatory')
sensorHumidityDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayHighCritical.setStatus('mandatory')
sensorHumidityRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityRaw.setStatus('mandatory')
sensorHumidityOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityOffset.setStatus('mandatory')
sensorHumidityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityPort.setStatus('mandatory')
sensorHumiditySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumiditySubPort.setStatus('mandatory')
sensorHumidityDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityDeviceIndex.setStatus('mandatory')
sensorHumidityDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDisplayStyle.setStatus('mandatory')
sensorHumidityHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighCriticalDesc.setStatus('mandatory')
sensorHumidityLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowCriticalDesc.setStatus('mandatory')
sensorHumidityNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityNormalDesc.setStatus('mandatory')
sensorHumidityLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowWarningDesc.setStatus('mandatory')
sensorHumidityHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighWarningDesc.setStatus('mandatory')
sensorHumiditySensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumiditySensorErrorDesc.setStatus('mandatory')
sensorHumidityHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighCriticalColor.setStatus('mandatory')
sensorHumidityLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowCriticalColor.setStatus('mandatory')
sensorHumidityNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityNormalColor.setStatus('mandatory')
sensorHumidityLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowWarningColor.setStatus('mandatory')
sensorHumidityHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighWarningColor.setStatus('mandatory')
sensorHumiditySensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumiditySensorErrorColor.setStatus('mandatory')
sensorHumidityAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityAcknowledge.setStatus('mandatory')
sensorHumidityId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityId.setStatus('mandatory')
sensorDryContactTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4), )
if mibBuilder.loadTexts: sensorDryContactTable.setStatus('mandatory')
sensorDryContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorDryContactIndex"))
if mibBuilder.loadTexts: sensorDryContactEntry.setStatus('mandatory')
sensorDryContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactIndex.setStatus('mandatory')
sensorDryContactDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactDescription.setStatus('mandatory')
sensorDryContactType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 22))).clone(namedValues=NamedValues(("drycontact-inout", 7), ("drycontact-input", 8), ("drycontact-array", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactType.setStatus('mandatory')
sensorDryContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("outputLow", 8), ("outputHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactStatus.setStatus('mandatory')
sensorDryContactGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactGoOffline.setStatus('mandatory')
sensorDryContactDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactDirection.setStatus('mandatory')
sensorDryContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactNormalState.setStatus('mandatory')
sensorDryContactControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactControlMode.setStatus('mandatory')
sensorDryContactOutputManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOutputManualCycleTime.setStatus('mandatory')
sensorDryContactOutputManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 1), ("cycle-Low-High-Low", 2), ("cycle-High-Low-High", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOutputManualAction.setStatus('mandatory')
sensorDryContactPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactPort.setStatus('mandatory')
sensorDryContactSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactSubPort.setStatus('mandatory')
sensorDryContactDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactDeviceIndex.setStatus('mandatory')
sensorDryContactCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactCriticalDesc.setStatus('mandatory')
sensorDryContactNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactNormalDesc.setStatus('mandatory')
sensorDryContactOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOnDesc.setStatus('mandatory')
sensorDryContactOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOffDesc.setStatus('mandatory')
sensorDryContactCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactCriticalColor.setStatus('mandatory')
sensorDryContactNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactNormalColor.setStatus('mandatory')
sensorDryContactOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOnColor.setStatus('mandatory')
sensorDryContactOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOffColor.setStatus('mandatory')
sensorDryContactAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactAcknowledge.setStatus('mandatory')
sensorDryContactId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactId.setStatus('mandatory')
sensor4to20mATable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5), )
if mibBuilder.loadTexts: sensor4to20mATable.setStatus('mandatory')
sensor4to20mAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensor4to20mAIndex"))
if mibBuilder.loadTexts: sensor4to20mAEntry.setStatus('mandatory')
sensor4to20mAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAIndex.setStatus('mandatory')
sensor4to20mADescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADescription.setStatus('mandatory')
sensor4to20mAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAValue.setStatus('mandatory')
sensor4to20mAUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAUnit.setStatus('mandatory')
sensor4to20mAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAStatus.setStatus('mandatory')
sensor4to20mAGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAGoOffline.setStatus('mandatory')
sensor4to20mALowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowCritical.setStatus('mandatory')
sensor4to20mALowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowWarning.setStatus('mandatory')
sensor4to20mAHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighWarning.setStatus('mandatory')
sensor4to20mAHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighCritical.setStatus('mandatory')
sensor4to20mARearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mARearm.setStatus('mandatory')
sensor4to20mADelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayError.setStatus('mandatory')
sensor4to20mADelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayNormal.setStatus('mandatory')
sensor4to20mADelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayLowCritical.setStatus('mandatory')
sensor4to20mADelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayLowWarning.setStatus('mandatory')
sensor4to20mADelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayHighWarning.setStatus('mandatory')
sensor4to20mADelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayHighCritical.setStatus('mandatory')
sensor4to20mARaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mARaw.setStatus('mandatory')
sensor4to20mAOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAOffset.setStatus('mandatory')
sensor4to20mAAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAAmountMaxVoltage.setStatus('mandatory')
sensor4to20mAAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAAmountBaseVoltage.setStatus('mandatory')
sensor4to20mAPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAPort.setStatus('mandatory')
sensor4to20mASubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mASubPort.setStatus('mandatory')
sensor4to20mADeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mADeviceIndex.setStatus('mandatory')
sensor4to20mAMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAMaxVoltage.setStatus('mandatory')
sensor4to20mABaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mABaseVoltage.setStatus('mandatory')
sensor4to20mADisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADisplayStyle.setStatus('mandatory')
sensor4to20mAHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighCriticalDesc.setStatus('mandatory')
sensor4to20mALowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowCriticalDesc.setStatus('mandatory')
sensor4to20mANormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mANormalDesc.setStatus('mandatory')
sensor4to20mALowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowWarningDesc.setStatus('mandatory')
sensor4to20mAHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighWarningDesc.setStatus('mandatory')
sensor4to20mASensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mASensorErrorDesc.setStatus('mandatory')
sensor4to20mAHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighCriticalColor.setStatus('mandatory')
sensor4to20mALowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowCriticalColor.setStatus('mandatory')
sensor4to20mANormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mANormalColor.setStatus('mandatory')
sensor4to20mALowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowWarningColor.setStatus('mandatory')
sensor4to20mAHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighWarningColor.setStatus('mandatory')
sensor4to20mASensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mASensorErrorColor.setStatus('mandatory')
sensor4to20mASensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mASensorAcknowledge.setStatus('mandatory')
sensor4to20mAId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAId.setStatus('mandatory')
sensorDCvoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6), )
if mibBuilder.loadTexts: sensorDCvoltageTable.setStatus('mandatory')
sensorDCvoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorDCvoltageIndex"))
if mibBuilder.loadTexts: sensorDCvoltageEntry.setStatus('mandatory')
sensorDCvoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageIndex.setStatus('mandatory')
sensorDCvoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDescription.setStatus('mandatory')
sensorDCvoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageValue.setStatus('mandatory')
sensorDCvoltageUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageUnit.setStatus('mandatory')
sensorDCvoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageStatus.setStatus('mandatory')
sensorDCvoltageGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageGoOffline.setStatus('mandatory')
sensorDCvoltageLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowCritical.setStatus('mandatory')
sensorDCvoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowWarning.setStatus('mandatory')
sensorDCvoltageHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighWarning.setStatus('mandatory')
sensorDCvoltageHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighCritical.setStatus('mandatory')
sensorDCvoltageRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageRearm.setStatus('mandatory')
sensorDCvoltageDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayError.setStatus('mandatory')
sensorDCvoltageDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayNormal.setStatus('mandatory')
sensorDCvoltageDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayLowCritical.setStatus('mandatory')
sensorDCvoltageDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayLowWarning.setStatus('mandatory')
sensorDCvoltageDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayHighWarning.setStatus('mandatory')
sensorDCvoltageDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayHighCritical.setStatus('mandatory')
sensorDCvoltageRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageRaw.setStatus('mandatory')
sensorDCvoltageOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageOffset.setStatus('mandatory')
sensorDCvoltageJumper = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-600, -400, -300, -200, -100, 100, 200, 300, 400, 600))).clone(namedValues=NamedValues(("jumperAt-60", -600), ("jumperAt-40", -400), ("jumperAt-30", -300), ("jumperAt-20", -200), ("jumperAt-10", -100), ("jumperAt10", 100), ("jumperAt20", 200), ("jumperAt30", 300), ("jumperAt40", 400), ("jumperAt60", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageJumper.setStatus('mandatory')
sensorDCvoltageAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageAmountMaxVoltage.setStatus('mandatory')
sensorDCvoltageAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageAmountBaseVoltage.setStatus('mandatory')
sensorDCvoltagePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltagePort.setStatus('mandatory')
sensorDCvoltageSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageSubPort.setStatus('mandatory')
sensorDCvoltageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageDeviceIndex.setStatus('mandatory')
sensorDCvoltageMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageMaxVoltage.setStatus('mandatory')
sensorDCvoltageBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageBaseVoltage.setStatus('mandatory')
sensorDCvoltageDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDisplayStyle.setStatus('mandatory')
sensorDCvoltageHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighCriticalDesc.setStatus('mandatory')
sensorDCvoltageLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowCriticalDesc.setStatus('mandatory')
sensorDCvoltageNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageNormalDesc.setStatus('mandatory')
sensorDCvoltageLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowWarningDesc.setStatus('mandatory')
sensorDCvoltageHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighWarningDesc.setStatus('mandatory')
sensorDCvoltageSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageSensorErrorDesc.setStatus('mandatory')
sensorDCvoltageHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighCriticalColor.setStatus('mandatory')
sensorDCvoltageLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowCriticalColor.setStatus('mandatory')
sensorDCvoltageNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageNormalColor.setStatus('mandatory')
sensorDCvoltageLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowWarningColor.setStatus('mandatory')
sensorDCvoltageHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighWarningColor.setStatus('mandatory')
sensorDCvoltageSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageSensorErrorColor.setStatus('mandatory')
sensorDCvoltageAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageAcknowledge.setStatus('mandatory')
sensorDCvoltageId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageId.setStatus('mandatory')
sensorAirflowTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7), )
if mibBuilder.loadTexts: sensorAirflowTable.setStatus('mandatory')
sensorAirflowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorAirflowIndex"))
if mibBuilder.loadTexts: sensorAirflowEntry.setStatus('mandatory')
sensorAirflowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowIndex.setStatus('mandatory')
sensorAirflowDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDescription.setStatus('mandatory')
sensorAirflowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowValue.setStatus('mandatory')
sensorAirflowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowStatus.setStatus('mandatory')
sensorAirflowGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowGoOffline.setStatus('mandatory')
sensorAirflowLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowCritical.setStatus('mandatory')
sensorAirflowLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowWarning.setStatus('mandatory')
sensorAirflowHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighWarning.setStatus('mandatory')
sensorAirflowHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighCritical.setStatus('mandatory')
sensorAirflowRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowRearm.setStatus('mandatory')
sensorAirflowDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayError.setStatus('mandatory')
sensorAirflowDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayNormal.setStatus('mandatory')
sensorAirflowDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayLowCritical.setStatus('mandatory')
sensorAirflowDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayLowWarning.setStatus('mandatory')
sensorAirflowDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayHighWarning.setStatus('mandatory')
sensorAirflowDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayHighCritical.setStatus('mandatory')
sensorAirflowRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowRaw.setStatus('mandatory')
sensorAirflowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowPort.setStatus('mandatory')
sensorAirflowSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowSubPort.setStatus('mandatory')
sensorAirflowDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowDeviceIndex.setStatus('mandatory')
sensorAirflowDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDisplayStyle.setStatus('mandatory')
sensorAirflowHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighCriticalDesc.setStatus('mandatory')
sensorAirflowLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowCriticalDesc.setStatus('mandatory')
sensorAirflowNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowNormalDesc.setStatus('mandatory')
sensorAirflowLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowWarningDesc.setStatus('mandatory')
sensorAirflowHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighWarningDesc.setStatus('mandatory')
sensorAirflowSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowSensorErrorDesc.setStatus('mandatory')
sensorAirflowHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighCriticalColor.setStatus('mandatory')
sensorAirflowLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowCriticalColor.setStatus('mandatory')
sensorAirflowNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowNormalColor.setStatus('mandatory')
sensorAirflowLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowWarningColor.setStatus('mandatory')
sensorAirflowHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighWarningColor.setStatus('mandatory')
sensorAirflowSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowSensorErrorColor.setStatus('mandatory')
sensorAirflowAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowAcknowledge.setStatus('mandatory')
sensorAirflowId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowId.setStatus('mandatory')
sensorMotionTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8), )
if mibBuilder.loadTexts: sensorMotionTable.setStatus('mandatory')
sensorMotionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorMotionIndex"))
if mibBuilder.loadTexts: sensorMotionEntry.setStatus('mandatory')
sensorMotionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionIndex.setStatus('mandatory')
sensorMotionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionDescription.setStatus('mandatory')
sensorMotionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionStatus.setStatus('mandatory')
sensorMotionGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionGoOffline.setStatus('mandatory')
sensorMotionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionPort.setStatus('mandatory')
sensorMotionSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionSubPort.setStatus('mandatory')
sensorMotionDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionDeviceIndex.setStatus('mandatory')
sensorMotionCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionCriticalDesc.setStatus('mandatory')
sensorMotionNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionNormalDesc.setStatus('mandatory')
sensorMotionCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionCriticalColor.setStatus('mandatory')
sensorMotionNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionNormalColor.setStatus('mandatory')
sensorMotionAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionAcknowledge.setStatus('mandatory')
sensorMotionId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionId.setStatus('mandatory')
sensorWaterTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9), )
if mibBuilder.loadTexts: sensorWaterTable.setStatus('mandatory')
sensorWaterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorWaterIndex"))
if mibBuilder.loadTexts: sensorWaterEntry.setStatus('mandatory')
sensorWaterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterIndex.setStatus('mandatory')
sensorWaterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterDescription.setStatus('mandatory')
sensorWaterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterStatus.setStatus('mandatory')
sensorWaterGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterGoOffline.setStatus('mandatory')
sensorWaterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterPort.setStatus('mandatory')
sensorWaterSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterSubPort.setStatus('mandatory')
sensorWaterDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterDeviceIndex.setStatus('mandatory')
sensorWaterCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterCriticalDesc.setStatus('mandatory')
sensorWaterNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterNormalDesc.setStatus('mandatory')
sensorWaterCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterCriticalColor.setStatus('mandatory')
sensorWaterNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterNormalColor.setStatus('mandatory')
sensorWaterAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterAcknowledge.setStatus('mandatory')
sensorWaterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterId.setStatus('mandatory')
sensorSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10), )
if mibBuilder.loadTexts: sensorSecurityTable.setStatus('mandatory')
sensorSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorSecurityIndex"))
if mibBuilder.loadTexts: sensorSecurityEntry.setStatus('mandatory')
sensorSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityIndex.setStatus('mandatory')
sensorSecurityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityDescription.setStatus('mandatory')
sensorSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityStatus.setStatus('mandatory')
sensorSecurityGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityGoOffline.setStatus('mandatory')
sensorSecurityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityPort.setStatus('mandatory')
sensorSecuritySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecuritySubPort.setStatus('mandatory')
sensorSecurityDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityDeviceIndex.setStatus('mandatory')
sensorSecurityCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityCriticalDesc.setStatus('mandatory')
sensorSecurityNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityNormalDesc.setStatus('mandatory')
sensorSecurityCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityCriticalColor.setStatus('mandatory')
sensorSecurityNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityNormalColor.setStatus('mandatory')
sensorSecurityAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityAcknowledge.setStatus('mandatory')
sensorSecurityId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityId.setStatus('mandatory')
sensorSirenTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11), )
if mibBuilder.loadTexts: sensorSirenTable.setStatus('mandatory')
sensorSirenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorSirenIndex"))
if mibBuilder.loadTexts: sensorSirenEntry.setStatus('mandatory')
sensorSirenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenIndex.setStatus('mandatory')
sensorSirenDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenDescription.setStatus('mandatory')
sensorSirenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenStatus.setStatus('mandatory')
sensorSirenGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenGoOffline.setStatus('mandatory')
sensorSirenControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenControlMode.setStatus('mandatory')
sensorSirenManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenManualCycleTime.setStatus('mandatory')
sensorSirenManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenManualAction.setStatus('mandatory')
sensorSirenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenPort.setStatus('mandatory')
sensorSirenSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenSubPort.setStatus('mandatory')
sensorSirenDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenDeviceIndex.setStatus('mandatory')
sensorSirenOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOnDesc.setStatus('mandatory')
sensorSirenOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOffDesc.setStatus('mandatory')
sensorSirenOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOnColor.setStatus('mandatory')
sensorSirenOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOffColor.setStatus('mandatory')
sensorSirenAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenAcknowledge.setStatus('mandatory')
sensorSirenId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenId.setStatus('mandatory')
sensorRelayTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12), )
if mibBuilder.loadTexts: sensorRelayTable.setStatus('mandatory')
sensorRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorRelayIndex"))
if mibBuilder.loadTexts: sensorRelayEntry.setStatus('mandatory')
sensorRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayIndex.setStatus('mandatory')
sensorRelayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayDescription.setStatus('mandatory')
sensorRelayType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 19))).clone(namedValues=NamedValues(("relay", 13), ("xrelay", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayType.setStatus('mandatory')
sensorRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayStatus.setStatus('mandatory')
sensorRelayGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayGoOffline.setStatus('mandatory')
sensorRelayControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayControlMode.setStatus('mandatory')
sensorRelayManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayManualCycleTime.setStatus('mandatory')
sensorRelayManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayManualAction.setStatus('mandatory')
sensorRelayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayPort.setStatus('mandatory')
sensorRelaySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelaySubPort.setStatus('mandatory')
sensorRelayDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayDeviceIndex.setStatus('mandatory')
sensorRelayOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOnDesc.setStatus('mandatory')
sensorRelayOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOffDesc.setStatus('mandatory')
sensorRelayOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOnColor.setStatus('mandatory')
sensorRelayOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOffColor.setStatus('mandatory')
sensorRelayAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayAcknowledge.setStatus('mandatory')
sensorRelayId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayId.setStatus('mandatory')
sensorACvoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13), )
if mibBuilder.loadTexts: sensorACvoltageTable.setStatus('mandatory')
sensorACvoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorACvoltageIndex"))
if mibBuilder.loadTexts: sensorACvoltageEntry.setStatus('mandatory')
sensorACvoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageIndex.setStatus('mandatory')
sensorACvoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageDescription.setStatus('mandatory')
sensorACvoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageStatus.setStatus('mandatory')
sensorACvoltageGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageGoOffline.setStatus('mandatory')
sensorACvoltagePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltagePort.setStatus('mandatory')
sensorACvoltageSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageSubPort.setStatus('mandatory')
sensorACvoltageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageDeviceIndex.setStatus('mandatory')
sensorACvoltageCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageCriticalDesc.setStatus('mandatory')
sensorACvoltageNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageNormalDesc.setStatus('mandatory')
sensorACvoltageCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageCriticalColor.setStatus('mandatory')
sensorACvoltageNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageNormalColor.setStatus('mandatory')
sensorACvoltageAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageAcknowledge.setStatus('mandatory')
sensorACvoltageId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageId.setStatus('mandatory')
sensorSmokeTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14), )
if mibBuilder.loadTexts: sensorSmokeTable.setStatus('mandatory')
sensorSmokeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorSmokeIndex"))
if mibBuilder.loadTexts: sensorSmokeEntry.setStatus('mandatory')
sensorSmokeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeIndex.setStatus('mandatory')
sensorSmokeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeDescription.setStatus('mandatory')
sensorSmokeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeStatus.setStatus('mandatory')
sensorSmokeGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeGoOffline.setStatus('mandatory')
sensorSmokePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokePort.setStatus('mandatory')
sensorSmokeSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeSubPort.setStatus('mandatory')
sensorSmokeDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeDeviceIndex.setStatus('mandatory')
sensorSmokeCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeCriticalDesc.setStatus('mandatory')
sensorSmokeNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeNormalDesc.setStatus('mandatory')
sensorSmokeCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeCriticalColor.setStatus('mandatory')
sensorSmokeNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeNormalColor.setStatus('mandatory')
sensorSmokeAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeAcknowledge.setStatus('mandatory')
sensorSmokeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeId.setStatus('mandatory')
sensorThermostatTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20), )
if mibBuilder.loadTexts: sensorThermostatTable.setStatus('mandatory')
sensorThermostatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorThermostatIndex"))
if mibBuilder.loadTexts: sensorThermostatEntry.setStatus('mandatory')
sensorThermostatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatIndex.setStatus('mandatory')
sensorThermostatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDescription.setStatus('mandatory')
sensorThermostatDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatDegree.setStatus('mandatory')
sensorThermostatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatStatus.setStatus('mandatory')
sensorThermostatGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatGoOffline.setStatus('mandatory')
sensorThermostatLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowCritical.setStatus('mandatory')
sensorThermostatLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowWarning.setStatus('mandatory')
sensorThermostatHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighWarning.setStatus('mandatory')
sensorThermostatHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighCritical.setStatus('mandatory')
sensorThermostatRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatRearm.setStatus('mandatory')
sensorThermostatDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayError.setStatus('mandatory')
sensorThermostatDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayNormal.setStatus('mandatory')
sensorThermostatDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayLowCritical.setStatus('mandatory')
sensorThermostatDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayLowWarning.setStatus('mandatory')
sensorThermostatDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayHighWarning.setStatus('mandatory')
sensorThermostatDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayHighCritical.setStatus('mandatory')
sensorThermostatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatPort.setStatus('mandatory')
sensorThermostatSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatSubPort.setStatus('mandatory')
sensorThermostatDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatDeviceIndex.setStatus('mandatory')
sensorThermostatDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDisplayStyle.setStatus('mandatory')
sensorThermostatHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighCriticalDesc.setStatus('mandatory')
sensorThermostatLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowCriticalDesc.setStatus('mandatory')
sensorThermostatNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatNormalDesc.setStatus('mandatory')
sensorThermostatLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowWarningDesc.setStatus('mandatory')
sensorThermostatHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighWarningDesc.setStatus('mandatory')
sensorThermostatSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatSensorErrorDesc.setStatus('mandatory')
sensorThermostatHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighCriticalColor.setStatus('mandatory')
sensorThermostatLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowCriticalColor.setStatus('mandatory')
sensorThermostatNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatNormalColor.setStatus('mandatory')
sensorThermostatLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowWarningColor.setStatus('mandatory')
sensorThermostatHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighWarningColor.setStatus('mandatory')
sensorThermostatSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatSensorErrorColor.setStatus('mandatory')
sensorThermostatAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatAcknowledge.setStatus('mandatory')
sensorThermostatId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatId.setStatus('mandatory')
sensorWaterRopeTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21), )
if mibBuilder.loadTexts: sensorWaterRopeTable.setStatus('mandatory')
sensorWaterRopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorWaterRopeIndex"))
if mibBuilder.loadTexts: sensorWaterRopeEntry.setStatus('mandatory')
sensorWaterRopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeIndex.setStatus('mandatory')
sensorWaterRopeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeDescription.setStatus('mandatory')
sensorWaterRopeLeakLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeLeakLocation.setStatus('mandatory')
sensorWaterRopeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeUnit.setStatus('mandatory')
sensorWaterRopeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeStatus.setStatus('mandatory')
sensorWaterRopeGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeGoOffline.setStatus('mandatory')
sensorWaterRopeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeRaw.setStatus('mandatory')
sensorWaterRopeDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeDeviceIndex.setStatus('mandatory')
sensorWaterRopeCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeCriticalDesc.setStatus('mandatory')
sensorWaterRopeNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeNormalDesc.setStatus('mandatory')
sensorWaterRopeSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeSensorErrorDesc.setStatus('mandatory')
sensorWaterRopeCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeCriticalColor.setStatus('mandatory')
sensorWaterRopeNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeNormalColor.setStatus('mandatory')
sensorWaterRopeSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeSensorErrorColor.setStatus('mandatory')
sensorWaterRopeAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeAcknowledge.setStatus('mandatory')
sensorWaterRopeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeLength.setStatus('mandatory')
sensorWaterRopeImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeImpedance.setStatus('mandatory')
sensorWaterRopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("custom", 0), ("water", 1), ("fuel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeType.setStatus('mandatory')
sensorWaterRopeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeId.setStatus('mandatory')
sensorPowerTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22), )
if mibBuilder.loadTexts: sensorPowerTable.setStatus('mandatory')
sensorPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorPowerIndex"))
if mibBuilder.loadTexts: sensorPowerEntry.setStatus('mandatory')
sensorPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerIndex.setStatus('mandatory')
sensorPowerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDescription.setStatus('mandatory')
sensorPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerValue.setStatus('mandatory')
sensorPowerUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerUnit.setStatus('mandatory')
sensorPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerStatus.setStatus('mandatory')
sensorPowerGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerGoOffline.setStatus('mandatory')
sensorPowerLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowCritical.setStatus('mandatory')
sensorPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowWarning.setStatus('mandatory')
sensorPowerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighWarning.setStatus('mandatory')
sensorPowerHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighCritical.setStatus('mandatory')
sensorPowerRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerRearm.setStatus('mandatory')
sensorPowerDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayError.setStatus('mandatory')
sensorPowerDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayNormal.setStatus('mandatory')
sensorPowerDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayLowCritical.setStatus('mandatory')
sensorPowerDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayLowWarning.setStatus('mandatory')
sensorPowerDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayHighWarning.setStatus('mandatory')
sensorPowerDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayHighCritical.setStatus('mandatory')
sensorPowerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerPort.setStatus('mandatory')
sensorPowerSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerSubPort.setStatus('mandatory')
sensorPowerDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerDeviceIndex.setStatus('mandatory')
sensorPowerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerTimeOut.setStatus('mandatory')
sensorPowerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerInterval.setStatus('mandatory')
sensorPowerErrorRetryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerErrorRetryNum.setStatus('mandatory')
sensorPowerMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerMaxValue.setStatus('mandatory')
sensorPowerMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerMinValue.setStatus('mandatory')
sensorPowerDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDisplayStyle.setStatus('mandatory')
sensorPowerHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighCriticalDesc.setStatus('mandatory')
sensorPowerLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowCriticalDesc.setStatus('mandatory')
sensorPowerNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerNormalDesc.setStatus('mandatory')
sensorPowerLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowWarningDesc.setStatus('mandatory')
sensorPowerHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighWarningDesc.setStatus('mandatory')
sensorPowerSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerSensorErrorDesc.setStatus('mandatory')
sensorPowerHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighCriticalColor.setStatus('mandatory')
sensorPowerLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowCriticalColor.setStatus('mandatory')
sensorPowerNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerNormalColor.setStatus('mandatory')
sensorPowerLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowWarningColor.setStatus('mandatory')
sensorPowerHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighWarningColor.setStatus('mandatory')
sensorPowerSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerSensorErrorColor.setStatus('mandatory')
sensorPowerValueFormatString = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerValueFormatString.setStatus('mandatory')
sensorPowerValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 67), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerValueFormatFloat.setStatus('mandatory')
sensorPowerAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerAcknowledge.setStatus('mandatory')
sensorPowerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerId.setStatus('mandatory')
sensorFuelTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24), )
if mibBuilder.loadTexts: sensorFuelTable.setStatus('mandatory')
sensorFuelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorFuelIndex"))
if mibBuilder.loadTexts: sensorFuelEntry.setStatus('mandatory')
sensorFuelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelIndex.setStatus('mandatory')
sensorFuelDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDescription.setStatus('mandatory')
sensorFuelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelValue.setStatus('mandatory')
sensorFuelUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelUnit.setStatus('mandatory')
sensorFuelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelStatus.setStatus('mandatory')
sensorFuelGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelGoOffline.setStatus('mandatory')
sensorFuelLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowCritical.setStatus('mandatory')
sensorFuelLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowWarning.setStatus('mandatory')
sensorFuelHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighWarning.setStatus('mandatory')
sensorFuelHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighCritical.setStatus('mandatory')
sensorFuelRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelRearm.setStatus('mandatory')
sensorFuelDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayError.setStatus('mandatory')
sensorFuelDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayNormal.setStatus('mandatory')
sensorFuelDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayLowCritical.setStatus('mandatory')
sensorFuelDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayLowWarning.setStatus('mandatory')
sensorFuelDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayHighWarning.setStatus('mandatory')
sensorFuelDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayHighCritical.setStatus('mandatory')
sensorFuelRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelRaw.setStatus('mandatory')
sensorFuelAmountMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelAmountMaxValue.setStatus('mandatory')
sensorFuelAmountBaseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelAmountBaseValue.setStatus('mandatory')
sensorFuelDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelDeviceIndex.setStatus('mandatory')
sensorFuelDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDisplayStyle.setStatus('mandatory')
sensorFuelHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighCriticalDesc.setStatus('mandatory')
sensorFuelLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowCriticalDesc.setStatus('mandatory')
sensorFuelNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelNormalDesc.setStatus('mandatory')
sensorFuelLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowWarningDesc.setStatus('mandatory')
sensorFuelHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighWarningDesc.setStatus('mandatory')
sensorFuelSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelSensorErrorDesc.setStatus('mandatory')
sensorFuelHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighCriticalColor.setStatus('mandatory')
sensorFuelLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowCriticalColor.setStatus('mandatory')
sensorFuelNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelNormalColor.setStatus('mandatory')
sensorFuelLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowWarningColor.setStatus('mandatory')
sensorFuelHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighWarningColor.setStatus('mandatory')
sensorFuelSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelSensorErrorColor.setStatus('mandatory')
sensorFuelAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelAcknowledge.setStatus('mandatory')
sensorFuelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelId.setStatus('mandatory')
sensorTankSenderTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26), )
if mibBuilder.loadTexts: sensorTankSenderTable.setStatus('mandatory')
sensorTankSenderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorTankSenderIndex"))
if mibBuilder.loadTexts: sensorTankSenderEntry.setStatus('mandatory')
sensorTankSenderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderIndex.setStatus('mandatory')
sensorTankSenderDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDescription.setStatus('mandatory')
sensorTankSenderValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderValue.setStatus('mandatory')
sensorTankSenderUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderUnit.setStatus('mandatory')
sensorTankSenderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderStatus.setStatus('mandatory')
sensorTankSenderGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderGoOffline.setStatus('mandatory')
sensorTankSenderLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowCritical.setStatus('mandatory')
sensorTankSenderLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowWarning.setStatus('mandatory')
sensorTankSenderHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighWarning.setStatus('mandatory')
sensorTankSenderHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighCritical.setStatus('mandatory')
sensorTankSenderRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderRearm.setStatus('mandatory')
sensorTankSenderDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayError.setStatus('mandatory')
sensorTankSenderDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayNormal.setStatus('mandatory')
sensorTankSenderDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayLowCritical.setStatus('mandatory')
sensorTankSenderDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayLowWarning.setStatus('mandatory')
sensorTankSenderDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayHighWarning.setStatus('mandatory')
sensorTankSenderDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayHighCritical.setStatus('mandatory')
sensorTankSenderRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderRaw.setStatus('mandatory')
sensorTankSenderDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderDeviceIndex.setStatus('mandatory')
sensorTankSenderDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDisplayStyle.setStatus('mandatory')
sensorTankSenderHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighCriticalDesc.setStatus('mandatory')
sensorTankSenderLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowCriticalDesc.setStatus('mandatory')
sensorTankSenderNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderNormalDesc.setStatus('mandatory')
sensorTankSenderLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowWarningDesc.setStatus('mandatory')
sensorTankSenderHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighWarningDesc.setStatus('mandatory')
sensorTankSenderSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderSensorErrorDesc.setStatus('mandatory')
sensorTankSenderHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighCriticalColor.setStatus('mandatory')
sensorTankSenderLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowCriticalColor.setStatus('mandatory')
sensorTankSenderNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderNormalColor.setStatus('mandatory')
sensorTankSenderLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowWarningColor.setStatus('mandatory')
sensorTankSenderHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighWarningColor.setStatus('mandatory')
sensorTankSenderSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderSensorErrorColor.setStatus('mandatory')
sensorTankSenderAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderAcknowledge.setStatus('mandatory')
sensorTankSenderId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderId.setStatus('mandatory')
sensorDoorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27), )
if mibBuilder.loadTexts: sensorDoorTable.setStatus('mandatory')
sensorDoorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorDoorIndex"))
if mibBuilder.loadTexts: sensorDoorEntry.setStatus('mandatory')
sensorDoorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDoorIndex.setStatus('mandatory')
sensorDoorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDoorDescription.setStatus('mandatory')
sensorDoorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDoorValue.setStatus('mandatory')
sensorDoorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("closed", 2), ("heldOpen", 3), ("fire", 4), ("opened", 5), ("forceOpened", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDoorStatus.setStatus('mandatory')
sensorDoorUnlockPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDoorUnlockPeriod.setStatus('mandatory')
sensorDoorOpenPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDoorOpenPeriod.setStatus('mandatory')
sensorDoorCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDoorCmd.setStatus('mandatory')
sensorDoorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDoorAcknowledge.setStatus('mandatory')
sensorDoorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDoorId.setStatus('mandatory')
sensorTemperatureArrayTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28), )
if mibBuilder.loadTexts: sensorTemperatureArrayTable.setStatus('mandatory')
sensorTemperatureArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorTemperatureArrayIndex"))
if mibBuilder.loadTexts: sensorTemperatureArrayEntry.setStatus('mandatory')
sensorTemperatureArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayIndex.setStatus('mandatory')
sensorTemperatureArrayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDescription.setStatus('mandatory')
sensorTemperatureArrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(23))).clone(namedValues=NamedValues(("arraytemp", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayType.setStatus('mandatory')
sensorTemperatureArrayDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayDegree.setStatus('mandatory')
sensorTemperatureArrayUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayUnit.setStatus('mandatory')
sensorTemperatureArrayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayStatus.setStatus('mandatory')
sensorTemperatureArrayGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayGoOffline.setStatus('mandatory')
sensorTemperatureArrayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowCritical.setStatus('mandatory')
sensorTemperatureArrayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowWarning.setStatus('mandatory')
sensorTemperatureArrayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighWarning.setStatus('mandatory')
sensorTemperatureArrayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighCritical.setStatus('mandatory')
sensorTemperatureArrayRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayRearm.setStatus('mandatory')
sensorTemperatureArrayDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayError.setStatus('mandatory')
sensorTemperatureArrayDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayNormal.setStatus('mandatory')
sensorTemperatureArrayDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayLowCritical.setStatus('mandatory')
sensorTemperatureArrayDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayLowWarning.setStatus('mandatory')
sensorTemperatureArrayDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayHighWarning.setStatus('mandatory')
sensorTemperatureArrayDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayHighCritical.setStatus('mandatory')
sensorTemperatureArrayRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayRaw.setStatus('mandatory')
sensorTemperatureArrayOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayOffset.setStatus('mandatory')
sensorTemperatureArrayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayPort.setStatus('mandatory')
sensorTemperatureArraySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArraySubPort.setStatus('mandatory')
sensorTemperatureArrayDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayDeviceIndex.setStatus('mandatory')
sensorTemperatureArrayDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDisplayStyle.setStatus('mandatory')
sensorTemperatureArrayHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighCriticalDesc.setStatus('mandatory')
sensorTemperatureArrayLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowCriticalDesc.setStatus('mandatory')
sensorTemperatureArrayNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayNormalDesc.setStatus('mandatory')
sensorTemperatureArrayLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowWarningDesc.setStatus('mandatory')
sensorTemperatureArrayHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighWarningDesc.setStatus('mandatory')
sensorTemperatureArraySensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArraySensorErrorDesc.setStatus('mandatory')
sensorTemperatureArrayHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighCriticalColor.setStatus('mandatory')
sensorTemperatureArrayLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowCriticalColor.setStatus('mandatory')
sensorTemperatureArrayNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayNormalColor.setStatus('mandatory')
sensorTemperatureArrayLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowWarningColor.setStatus('mandatory')
sensorTemperatureArrayHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighWarningColor.setStatus('mandatory')
sensorTemperatureArraySensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArraySensorErrorColor.setStatus('mandatory')
sensorTemperatureArrayAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayAcknowledge.setStatus('mandatory')
sensorTemperatureArraySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArraySerialNumber.setStatus('mandatory')
sensorTemperatureArrayId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayId.setStatus('mandatory')
secNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 4))
action = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1))
actionTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1), )
if mibBuilder.loadTexts: actionTable.setStatus('mandatory')
actionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "actionIndex"))
if mibBuilder.loadTexts: actionEntry.setStatus('mandatory')
actionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionIndex.setStatus('mandatory')
actionType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22))).clone(namedValues=NamedValues(("trap", 1), ("email", 2), ("sms", 3), ("mms", 4), ("sound", 5), ("speech", 6), ("dial", 7), ("relay", 8), ("custom", 9), ("ftp", 10), ("event", 11), ("fax", 12), ("soundlog", 13), ("camera", 14), ("siren", 15), ("mobile", 16), ("shut", 17), ("windows", 19), ("skype", 20), ("drycontact", 21), ("ctrSensorAction", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionType.setStatus('mandatory')
actionName = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionName.setStatus('mandatory')
actionMaxResend = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionMaxResend.setStatus('mandatory')
actionResendInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionResendInterval.setStatus('mandatory')
actionTest = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionTest.setStatus('mandatory')
sensorByPort = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 5))
commonSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1), )
if mibBuilder.loadTexts: commonSensorTable.setStatus('mandatory')
commonSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "commonSensorIndex"))
if mibBuilder.loadTexts: commonSensorEntry.setStatus('mandatory')
commonSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorIndex.setStatus('mandatory')
commonSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorDescription.setStatus('mandatory')
commonSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 128, 129, 130, 131, 132, 133, 224, 255))).clone(namedValues=NamedValues(("temperature", 1), ("humidity", 2), ("temperature-dual", 3), ("four-20mA", 4), ("dcvoltage", 5), ("airflow", 6), ("io", 7), ("drycontact", 8), ("motion", 9), ("water", 10), ("security", 11), ("siren", 12), ("relay", 13), ("acvoltage", 14), ("vrms", 15), ("irms", 16), ("watt", 17), ("watthour", 18), ("xrelay", 19), ("thermocouple", 20), ("smoke", 21), ("drycontact-array", 22), ("temperature-array", 23), ("thermostat", 128), ("virtual", 129), ("sound", 130), ("softmotion", 131), ("camera-dummy", 132), ("board-state", 133), ("nosignal", 224), ("test", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorType.setStatus('mandatory')
commonSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorValue.setStatus('mandatory')
commonSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorUnit.setStatus('mandatory')
commonSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorStatus.setStatus('mandatory')
commonSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorGoOffline.setStatus('mandatory')
commonSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorPort.setStatus('mandatory')
commonSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorSubPort.setStatus('mandatory')
commonSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorDeviceIndex.setStatus('mandatory')
commonSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorDisplayStyle.setStatus('mandatory')
commonSensorHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorHighCriticalDescription.setStatus('mandatory')
commonSensorLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorLowCriticalDescription.setStatus('mandatory')
commonSensorSensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorSensorNormalDescription.setStatus('mandatory')
commonSensorLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorLowWarningDescription.setStatus('mandatory')
commonSensorHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorHighWarningDescription.setStatus('mandatory')
commonSensorSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorSensorErrorDescription.setStatus('mandatory')
commonSensorOnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorOnDescription.setStatus('mandatory')
commonSensorOffDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorOffDescription.setStatus('mandatory')
commonSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorHighCriticalColor.setStatus('mandatory')
commonSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorLowCriticalColor.setStatus('mandatory')
commonSensorSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorSensorNormalColor.setStatus('mandatory')
commonSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorLowWarningColor.setStatus('mandatory')
commonSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorHighWarningColor.setStatus('mandatory')
commonSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorSensorErrorColor.setStatus('mandatory')
commonSensorOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorOnColor.setStatus('mandatory')
commonSensorOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorOffColor.setStatus('mandatory')
commonSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorAcknowledge.setStatus('mandatory')
commonSensorValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 99), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorValueFormatFloat.setStatus('mandatory')
commonSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorId.setStatus('mandatory')
temperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2), )
if mibBuilder.loadTexts: temperatureSensorTable.setStatus('mandatory')
temperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "temperatureSensorIndex"))
if mibBuilder.loadTexts: temperatureSensorEntry.setStatus('mandatory')
temperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorIndex.setStatus('mandatory')
temperatureSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDescription.setStatus('mandatory')
temperatureSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 20))).clone(namedValues=NamedValues(("temperature", 1), ("dualsensor", 3), ("thermocouple", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorType.setStatus('mandatory')
temperatureSensorDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorDegree.setStatus('mandatory')
temperatureSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorUnit.setStatus('mandatory')
temperatureSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorStatus.setStatus('mandatory')
temperatureSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorGoOffline.setStatus('mandatory')
temperatureSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowCritical.setStatus('mandatory')
temperatureSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowWarning.setStatus('mandatory')
temperatureSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighWarning.setStatus('mandatory')
temperatureSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighCritical.setStatus('mandatory')
temperatureSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorRearm.setStatus('mandatory')
temperatureSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayError.setStatus('mandatory')
temperatureSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayNormal.setStatus('mandatory')
temperatureSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayLowCritical.setStatus('mandatory')
temperatureSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayLowWarning.setStatus('mandatory')
temperatureSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayHighWarning.setStatus('mandatory')
temperatureSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayHighCritical.setStatus('mandatory')
temperatureSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorRaw.setStatus('mandatory')
temperatureSensorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorOffset.setStatus('mandatory')
temperatureSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorPort.setStatus('mandatory')
temperatureSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorSubPort.setStatus('mandatory')
temperatureSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorDeviceIndex.setStatus('mandatory')
temperatureSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDisplayStyle.setStatus('mandatory')
temperatureSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighCriticalDesc.setStatus('mandatory')
temperatureSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowCriticalDesc.setStatus('mandatory')
temperatureSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorNormalDesc.setStatus('mandatory')
temperatureSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowWarningDesc.setStatus('mandatory')
temperatureSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighWarningDesc.setStatus('mandatory')
temperatureSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorSensorErrorDesc.setStatus('mandatory')
temperatureSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighCriticalColor.setStatus('mandatory')
temperatureSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowCriticalColor.setStatus('mandatory')
temperatureSensorSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorSensorNormalColor.setStatus('mandatory')
temperatureSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowWarningColor.setStatus('mandatory')
temperatureSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighWarningColor.setStatus('mandatory')
temperatureSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorSensorErrorColor.setStatus('mandatory')
temperatureSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorAcknowledge.setStatus('mandatory')
temperatureSensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorSerialNumber.setStatus('mandatory')
temperatureSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorId.setStatus('mandatory')
humiditySensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3), )
if mibBuilder.loadTexts: humiditySensorTable.setStatus('mandatory')
humiditySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1), ).setIndexNames((0, "SPAGENT-MIB", "humiditySensorIndex"))
if mibBuilder.loadTexts: humiditySensorEntry.setStatus('mandatory')
humiditySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorIndex.setStatus('mandatory')
humiditySensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDescription.setStatus('mandatory')
humiditySensorPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorPercent.setStatus('mandatory')
humiditySensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorUnit.setStatus('mandatory')
humiditySensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorStatus.setStatus('mandatory')
humiditySensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorGoOffline.setStatus('mandatory')
humiditySensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowCritical.setStatus('mandatory')
humiditySensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowWarning.setStatus('mandatory')
humiditySensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighWarning.setStatus('mandatory')
humiditySensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighCritical.setStatus('mandatory')
humiditySensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorRearm.setStatus('mandatory')
humiditySensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayError.setStatus('mandatory')
humiditySensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayNormal.setStatus('mandatory')
humiditySensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayLowCritical.setStatus('mandatory')
humiditySensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayLowWarning.setStatus('mandatory')
humiditySensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayHighWarning.setStatus('mandatory')
humiditySensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayHighCritical.setStatus('mandatory')
humiditySensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorRaw.setStatus('mandatory')
humiditySensorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorOffset.setStatus('mandatory')
humiditySensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorPort.setStatus('mandatory')
humiditySensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorSubPort.setStatus('mandatory')
humiditySensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorDeviceIndex.setStatus('mandatory')
humiditySensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDisplayStyle.setStatus('mandatory')
humiditySensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighCriticalDesc.setStatus('mandatory')
humiditySensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowCriticalDesc.setStatus('mandatory')
humiditySensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorNormalDesc.setStatus('mandatory')
humiditySensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowWarningDesc.setStatus('mandatory')
humiditySensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighWarningDesc.setStatus('mandatory')
humiditySensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorSensorErrorDesc.setStatus('mandatory')
humiditySensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighCriticalColor.setStatus('mandatory')
humiditySensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowCriticalColor.setStatus('mandatory')
humiditySensorSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorSensorNormalColor.setStatus('mandatory')
humiditySensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowWarningColor.setStatus('mandatory')
humiditySensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighWarningColor.setStatus('mandatory')
humiditySensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorSensorErrorColor.setStatus('mandatory')
humiditySensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorAcknowledge.setStatus('mandatory')
humiditySensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorId.setStatus('mandatory')
dryContactSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4), )
if mibBuilder.loadTexts: dryContactSensorTable.setStatus('mandatory')
dryContactSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1), ).setIndexNames((0, "SPAGENT-MIB", "dryContactSensorIndex"))
if mibBuilder.loadTexts: dryContactSensorEntry.setStatus('mandatory')
dryContactSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorIndex.setStatus('mandatory')
dryContactSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorDescription.setStatus('mandatory')
dryContactSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 22))).clone(namedValues=NamedValues(("drycontact-inout", 7), ("drycontact-input", 8), ("drycontact-array", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorType.setStatus('mandatory')
dryContactSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("outputLow", 8), ("outputHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorStatus.setStatus('mandatory')
dryContactSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorGoOffline.setStatus('mandatory')
dryContactSensorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorDirection.setStatus('mandatory')
dryContactSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorNormalState.setStatus('mandatory')
dryContactSensorControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorControlMode.setStatus('mandatory')
dryContactSensorOutputManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOutputManualCycleTime.setStatus('mandatory')
dryContactSensorOutputManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 1), ("cycle-Low-High-Low", 2), ("cycle-High-Low-High", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOutputManualAction.setStatus('mandatory')
dryContactSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorPort.setStatus('mandatory')
dryContactSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorSubPort.setStatus('mandatory')
dryContactSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorDeviceIndex.setStatus('mandatory')
dryContactSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorCriticalDesc.setStatus('mandatory')
dryContactSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorNormalDesc.setStatus('mandatory')
dryContactSensorOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOnDesc.setStatus('mandatory')
dryContactSensorOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOffDesc.setStatus('mandatory')
dryContactSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorCriticalColor.setStatus('mandatory')
dryContactSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorNormalColor.setStatus('mandatory')
dryContactSensorOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOnColor.setStatus('mandatory')
dryContactSensorOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOffColor.setStatus('mandatory')
dryContactSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorAcknowledge.setStatus('mandatory')
dryContactSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorId.setStatus('mandatory')
current4to20mASensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5), )
if mibBuilder.loadTexts: current4to20mASensorTable.setStatus('mandatory')
current4to20mASensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1), ).setIndexNames((0, "SPAGENT-MIB", "current4to20mASensorIndex"))
if mibBuilder.loadTexts: current4to20mASensorEntry.setStatus('mandatory')
current4to20mASensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorIndex.setStatus('mandatory')
current4to20mASensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDescription.setStatus('mandatory')
current4to20mASensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorValue.setStatus('mandatory')
current4to20mASensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorUnit.setStatus('mandatory')
current4to20mASensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorStatus.setStatus('mandatory')
current4to20mASensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorGoOffline.setStatus('mandatory')
current4to20mASensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowCritical.setStatus('mandatory')
current4to20mASensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowWarning.setStatus('mandatory')
current4to20mASensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighWarning.setStatus('mandatory')
current4to20mASensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighCritical.setStatus('mandatory')
current4to20mASensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorRearm.setStatus('mandatory')
current4to20mASensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayError.setStatus('mandatory')
current4to20mASensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayNormal.setStatus('mandatory')
current4to20mASensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayLowCritical.setStatus('mandatory')
current4to20mASensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayLowWarning.setStatus('mandatory')
current4to20mASensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayHighWarning.setStatus('mandatory')
current4to20mASensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayHighCritical.setStatus('mandatory')
current4to20mASensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorRaw.setStatus('mandatory')
current4to20mASensorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorOffset.setStatus('mandatory')
current4to20mASensorAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorAmountMaxVoltage.setStatus('mandatory')
current4to20mASensorAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorAmountBaseVoltage.setStatus('mandatory')
current4to20mASensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorPort.setStatus('mandatory')
current4to20mASensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorSubPort.setStatus('mandatory')
current4to20mASensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorDeviceIndex.setStatus('mandatory')
current4to20mASensorMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorMaxVoltage.setStatus('mandatory')
current4to20mASensorBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorBaseVoltage.setStatus('mandatory')
current4to20mASensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDisplayStyle.setStatus('mandatory')
current4to20mASensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighCriticalDesc.setStatus('mandatory')
current4to20mASensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowCriticalDesc.setStatus('mandatory')
current4to20mASensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorNormalDesc.setStatus('mandatory')
current4to20mASensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowWarningDesc.setStatus('mandatory')
current4to20mASensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighWarningDesc.setStatus('mandatory')
current4to20mASensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorSensorErrorDesc.setStatus('mandatory')
current4to20mASensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighCriticalColor.setStatus('mandatory')
current4to20mASensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowCriticalColor.setStatus('mandatory')
current4to20mASensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorNormalColor.setStatus('mandatory')
current4to20mASensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowWarningColor.setStatus('mandatory')
current4to20mASensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighWarningColor.setStatus('mandatory')
current4to20mASensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorSensorErrorColor.setStatus('mandatory')
current4to20mASensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorAcknowledge.setStatus('mandatory')
current4to20mASensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorId.setStatus('mandatory')
dcVoltageSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6), )
if mibBuilder.loadTexts: dcVoltageSensorTable.setStatus('mandatory')
dcVoltageSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1), ).setIndexNames((0, "SPAGENT-MIB", "dcVoltageSensorIndex"))
if mibBuilder.loadTexts: dcVoltageSensorEntry.setStatus('mandatory')
dcVoltageSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorIndex.setStatus('mandatory')
dcVoltageSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDescription.setStatus('mandatory')
dcVoltageSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorValue.setStatus('mandatory')
dcVoltageSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorUnit.setStatus('mandatory')
dcVoltageSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorStatus.setStatus('mandatory')
dcVoltageSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorGoOffline.setStatus('mandatory')
dcVoltageSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowCritical.setStatus('mandatory')
dcVoltageSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowWarning.setStatus('mandatory')
dcVoltageSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighWarning.setStatus('mandatory')
dcVoltageSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighCritical.setStatus('mandatory')
dcVoltageSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorRearm.setStatus('mandatory')
dcVoltageSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayError.setStatus('mandatory')
dcVoltageSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayNormal.setStatus('mandatory')
dcVoltageSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayLowCritical.setStatus('mandatory')
dcVoltageSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayLowWarning.setStatus('mandatory')
dcVoltageSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayHighWarning.setStatus('mandatory')
dcVoltageSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayHighCritical.setStatus('mandatory')
dcVoltageSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorRaw.setStatus('mandatory')
dcVoltageSensorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorOffset.setStatus('mandatory')
dcVoltageSensorJumper = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-600, -400, -300, -200, -100, 100, 200, 300, 400, 600))).clone(namedValues=NamedValues(("jumperAt-60", -600), ("jumperAt-40", -400), ("jumperAt-30", -300), ("jumperAt-20", -200), ("jumperAt-10", -100), ("jumperAt10", 100), ("jumperAt20", 200), ("jumperAt30", 300), ("jumperAt40", 400), ("jumperAt60", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorJumper.setStatus('mandatory')
dcVoltageSensorAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorAmountMaxVoltage.setStatus('mandatory')
dcVoltageSensorAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorAmountBaseVoltage.setStatus('mandatory')
dcVoltageSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorPort.setStatus('mandatory')
dcVoltageSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorSubPort.setStatus('mandatory')
dcVoltageSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorDeviceIndex.setStatus('mandatory')
dcVoltageSensorMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorMaxVoltage.setStatus('mandatory')
dcVoltageSensorBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorBaseVoltage.setStatus('mandatory')
dcVoltageSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDisplayStyle.setStatus('mandatory')
dcVoltageSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighCriticalDesc.setStatus('mandatory')
dcVoltageSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowCriticalDesc.setStatus('mandatory')
dcVoltageSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorNormalDesc.setStatus('mandatory')
dcVoltageSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowWarningDesc.setStatus('mandatory')
dcVoltageSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighWarningDesc.setStatus('mandatory')
dcVoltageSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorSensorErrorDesc.setStatus('mandatory')
dcVoltageSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighCriticalColor.setStatus('mandatory')
dcVoltageSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowCriticalColor.setStatus('mandatory')
dcVoltageSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorNormalColor.setStatus('mandatory')
dcVoltageSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowWarningColor.setStatus('mandatory')
dcVoltageSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighWarningColor.setStatus('mandatory')
dcVoltageSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorSensorErrorColor.setStatus('mandatory')
dcVoltageSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorAcknowledge.setStatus('mandatory')
dcVoltageSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorId.setStatus('mandatory')
airflowSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7), )
if mibBuilder.loadTexts: airflowSensorTable.setStatus('mandatory')
airflowSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1), ).setIndexNames((0, "SPAGENT-MIB", "airflowSensorIndex"))
if mibBuilder.loadTexts: airflowSensorEntry.setStatus('mandatory')
airflowSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorIndex.setStatus('mandatory')
airflowSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDescription.setStatus('mandatory')
airflowSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorValue.setStatus('mandatory')
airflowSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorStatus.setStatus('mandatory')
airflowSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorGoOffline.setStatus('mandatory')
airflowSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowCritical.setStatus('mandatory')
airflowSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowWarning.setStatus('mandatory')
airflowSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighWarning.setStatus('mandatory')
airflowSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighCritical.setStatus('mandatory')
airflowSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorRearm.setStatus('mandatory')
airflowSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayError.setStatus('mandatory')
airflowSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayNormal.setStatus('mandatory')
airflowSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayLowCritical.setStatus('mandatory')
airflowSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayLowWarning.setStatus('mandatory')
airflowSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayHighWarning.setStatus('mandatory')
airflowSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayHighCritical.setStatus('mandatory')
airflowSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorRaw.setStatus('mandatory')
airflowSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorPort.setStatus('mandatory')
airflowSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorSubPort.setStatus('mandatory')
airflowSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorDeviceIndex.setStatus('mandatory')
airflowSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDisplayStyle.setStatus('mandatory')
airflowSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighCriticalDesc.setStatus('mandatory')
airflowSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowCriticalDesc.setStatus('mandatory')
airflowSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorNormalDesc.setStatus('mandatory')
airflowSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowWarningDesc.setStatus('mandatory')
airflowSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighWarningDesc.setStatus('mandatory')
airflowSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorSensorErrorDesc.setStatus('mandatory')
airflowSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighCriticalColor.setStatus('mandatory')
airflowSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowCriticalColor.setStatus('mandatory')
airflowSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorNormalColor.setStatus('mandatory')
airflowSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowWarningColor.setStatus('mandatory')
airflowSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighWarningColor.setStatus('mandatory')
airflowSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorSensorErrorColor.setStatus('mandatory')
airflowSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorAcknowledge.setStatus('mandatory')
airflowSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorId.setStatus('mandatory')
motionSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8), )
if mibBuilder.loadTexts: motionSensorTable.setStatus('mandatory')
motionSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1), ).setIndexNames((0, "SPAGENT-MIB", "motionSensorIndex"))
if mibBuilder.loadTexts: motionSensorEntry.setStatus('mandatory')
motionSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorIndex.setStatus('mandatory')
motionSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorDescription.setStatus('mandatory')
motionSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorStatus.setStatus('mandatory')
motionSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorGoOffline.setStatus('mandatory')
motionSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorPort.setStatus('mandatory')
motionSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorSubPort.setStatus('mandatory')
motionSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorDeviceIndex.setStatus('mandatory')
motionSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorCriticalDesc.setStatus('mandatory')
motionSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorNormalDesc.setStatus('mandatory')
motionSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorCriticalColor.setStatus('mandatory')
motionSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorNormalColor.setStatus('mandatory')
motionSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorAcknowledge.setStatus('mandatory')
motionSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorId.setStatus('mandatory')
waterSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9), )
if mibBuilder.loadTexts: waterSensorTable.setStatus('mandatory')
waterSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1), ).setIndexNames((0, "SPAGENT-MIB", "waterSensorIndex"))
if mibBuilder.loadTexts: waterSensorEntry.setStatus('mandatory')
waterSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorIndex.setStatus('mandatory')
waterSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorDescription.setStatus('mandatory')
waterSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorStatus.setStatus('mandatory')
waterSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorGoOffline.setStatus('mandatory')
waterSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorPort.setStatus('mandatory')
waterSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorSubPort.setStatus('mandatory')
waterSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorDeviceIndex.setStatus('mandatory')
waterSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorCriticalDesc.setStatus('mandatory')
waterSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorNormalDesc.setStatus('mandatory')
waterSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorCriticalColor.setStatus('mandatory')
waterSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorNormalColor.setStatus('mandatory')
waterSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorAcknowledge.setStatus('mandatory')
waterSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorId.setStatus('mandatory')
securitySensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10), )
if mibBuilder.loadTexts: securitySensorTable.setStatus('mandatory')
securitySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1), ).setIndexNames((0, "SPAGENT-MIB", "securitySensorIndex"))
if mibBuilder.loadTexts: securitySensorEntry.setStatus('mandatory')
securitySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorIndex.setStatus('mandatory')
securitySensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorDescription.setStatus('mandatory')
securitySensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorStatus.setStatus('mandatory')
securitySensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorGoOffline.setStatus('mandatory')
securitySensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorPort.setStatus('mandatory')
securitySensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorSubPort.setStatus('mandatory')
securitySensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorDeviceIndex.setStatus('mandatory')
securitySensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorCriticalDesc.setStatus('mandatory')
securitySensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorNormalDesc.setStatus('mandatory')
securitySensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorCriticalColor.setStatus('mandatory')
securitySensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorNormalColor.setStatus('mandatory')
securitySensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorAcknowledge.setStatus('mandatory')
securitySensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorId.setStatus('mandatory')
sirenSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11), )
if mibBuilder.loadTexts: sirenSensorTable.setStatus('mandatory')
sirenSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1), ).setIndexNames((0, "SPAGENT-MIB", "sirenSensorIndex"))
if mibBuilder.loadTexts: sirenSensorEntry.setStatus('mandatory')
sirenSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorIndex.setStatus('mandatory')
sirenSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorDescription.setStatus('mandatory')
sirenSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorStatus.setStatus('mandatory')
sirenSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorGoOffline.setStatus('mandatory')
sirenSensorControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorControlMode.setStatus('mandatory')
sirenSensorManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorManualCycleTime.setStatus('mandatory')
sirenSensorManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorManualAction.setStatus('mandatory')
sirenSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorPort.setStatus('mandatory')
sirenSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorSubPort.setStatus('mandatory')
sirenSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorDeviceIndex.setStatus('mandatory')
sirenSensorOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorOnDesc.setStatus('mandatory')
sirenSensorOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorOffDesc.setStatus('mandatory')
sirenSensorOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorOnColor.setStatus('mandatory')
sirenSensorOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorOffColor.setStatus('mandatory')
sirenSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorAcknowledge.setStatus('mandatory')
sirenSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorId.setStatus('mandatory')
relaySensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12), )
if mibBuilder.loadTexts: relaySensorTable.setStatus('mandatory')
relaySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1), ).setIndexNames((0, "SPAGENT-MIB", "relaySensorIndex"))
if mibBuilder.loadTexts: relaySensorEntry.setStatus('mandatory')
relaySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorIndex.setStatus('mandatory')
relaySensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorDescription.setStatus('mandatory')
relaySensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 19))).clone(namedValues=NamedValues(("relay", 13), ("xrelay", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorType.setStatus('mandatory')
relaySensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorStatus.setStatus('mandatory')
relaySensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorGoOffline.setStatus('mandatory')
relaySensorControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorControlMode.setStatus('mandatory')
relaySensorManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorManualCycleTime.setStatus('mandatory')
relaySensorManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorManualAction.setStatus('mandatory')
relaySensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorPort.setStatus('mandatory')
relaySensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorSubPort.setStatus('mandatory')
relaySensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorDeviceIndex.setStatus('mandatory')
relaySensorOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorOnDesc.setStatus('mandatory')
relaySensorOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorOffDesc.setStatus('mandatory')
relaySensorOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorOnColor.setStatus('mandatory')
relaySensorOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorOffColor.setStatus('mandatory')
relaySensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorAcknowledge.setStatus('mandatory')
relaySensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorId.setStatus('mandatory')
acVoltageSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13), )
if mibBuilder.loadTexts: acVoltageSensorTable.setStatus('mandatory')
acVoltageSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1), ).setIndexNames((0, "SPAGENT-MIB", "acVoltageSensorIndex"))
if mibBuilder.loadTexts: acVoltageSensorEntry.setStatus('mandatory')
acVoltageSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorIndex.setStatus('mandatory')
acVoltageSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorDescription.setStatus('mandatory')
acVoltageSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorStatus.setStatus('mandatory')
acVoltageSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorGoOffline.setStatus('mandatory')
acVoltageSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorPort.setStatus('mandatory')
acVoltageSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorSubPort.setStatus('mandatory')
acVoltageSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorDeviceIndex.setStatus('mandatory')
acVoltageSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorCriticalDesc.setStatus('mandatory')
acVoltageSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorNormalDesc.setStatus('mandatory')
acVoltageSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorCriticalColor.setStatus('mandatory')
acVoltageSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorNormalColor.setStatus('mandatory')
acVoltageSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorAcknowledge.setStatus('mandatory')
acVoltageSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorId.setStatus('mandatory')
smokeSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14), )
if mibBuilder.loadTexts: smokeSensorTable.setStatus('mandatory')
smokeSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1), ).setIndexNames((0, "SPAGENT-MIB", "smokeSensorIndex"))
if mibBuilder.loadTexts: smokeSensorEntry.setStatus('mandatory')
smokeSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorIndex.setStatus('mandatory')
smokeSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorDescription.setStatus('mandatory')
smokeSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorStatus.setStatus('mandatory')
smokeSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorGoOffline.setStatus('mandatory')
smokeSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorPort.setStatus('mandatory')
smokeSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorSubPort.setStatus('mandatory')
smokeSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorDeviceIndex.setStatus('mandatory')
smokeSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorCriticalDesc.setStatus('mandatory')
smokeSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorNormalDesc.setStatus('mandatory')
smokeSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorCriticalColor.setStatus('mandatory')
smokeSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorNormalColor.setStatus('mandatory')
smokeSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorAcknowledge.setStatus('mandatory')
smokeSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorId.setStatus('mandatory')
thermostatSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20), )
if mibBuilder.loadTexts: thermostatSensorTable.setStatus('mandatory')
thermostatSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1), ).setIndexNames((0, "SPAGENT-MIB", "thermostatSensorIndex"))
if mibBuilder.loadTexts: thermostatSensorEntry.setStatus('mandatory')
thermostatSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorIndex.setStatus('mandatory')
thermostatSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDescription.setStatus('mandatory')
thermostatSensorDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorDegree.setStatus('mandatory')
thermostatSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorStatus.setStatus('mandatory')
thermostatSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorGoOffline.setStatus('mandatory')
thermostatSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowCritical.setStatus('mandatory')
thermostatSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowWarning.setStatus('mandatory')
thermostatSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighWarning.setStatus('mandatory')
thermostatSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighCritical.setStatus('mandatory')
thermostatSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorRearm.setStatus('mandatory')
thermostatSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayError.setStatus('mandatory')
thermostatSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayNormal.setStatus('mandatory')
thermostatSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayLowCritical.setStatus('mandatory')
thermostatSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayLowWarning.setStatus('mandatory')
thermostatSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayHighWarning.setStatus('mandatory')
thermostatSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayHighCritical.setStatus('mandatory')
thermostatSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorPort.setStatus('mandatory')
thermostatSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorSubPort.setStatus('mandatory')
thermostatSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorDeviceIndex.setStatus('mandatory')
thermostatSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDisplayStyle.setStatus('mandatory')
thermostatSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighCriticalDesc.setStatus('mandatory')
thermostatSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowCriticalDesc.setStatus('mandatory')
thermostatSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorNormalDesc.setStatus('mandatory')
thermostatSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowWarningDesc.setStatus('mandatory')
thermostatSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighWarningDesc.setStatus('mandatory')
thermostatSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorSensorErrorDesc.setStatus('mandatory')
thermostatSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighCriticalColor.setStatus('mandatory')
thermostatSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowCriticalColor.setStatus('mandatory')
thermostatSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorNormalColor.setStatus('mandatory')
thermostatSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowWarningColor.setStatus('mandatory')
thermostatSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighWarningColor.setStatus('mandatory')
thermostatSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorSensorErrorColor.setStatus('mandatory')
thermostatSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorAcknowledge.setStatus('mandatory')
thermostatSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorId.setStatus('mandatory')
waterRopeSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21), )
if mibBuilder.loadTexts: waterRopeSensorTable.setStatus('mandatory')
waterRopeSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1), ).setIndexNames((0, "SPAGENT-MIB", "waterRopeSensorIndex"))
if mibBuilder.loadTexts: waterRopeSensorEntry.setStatus('mandatory')
waterRopeSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorIndex.setStatus('mandatory')
waterRopeSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorDescription.setStatus('mandatory')
waterRopeSensorLeakLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorLeakLocation.setStatus('mandatory')
waterRopeSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorUnit.setStatus('mandatory')
waterRopeSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorStatus.setStatus('mandatory')
waterRopeSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorGoOffline.setStatus('mandatory')
waterRopeSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorRaw.setStatus('mandatory')
waterRopeSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorDeviceIndex.setStatus('mandatory')
waterRopeSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorCriticalDesc.setStatus('mandatory')
waterRopeSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorNormalDesc.setStatus('mandatory')
waterRopeSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorSensorErrorDesc.setStatus('mandatory')
waterRopeSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorCriticalColor.setStatus('mandatory')
waterRopeSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorNormalColor.setStatus('mandatory')
waterRopeSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorSensorErrorColor.setStatus('mandatory')
waterRopeSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorAcknowledge.setStatus('mandatory')
waterRopeSensorLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorLength.setStatus('mandatory')
waterRopeSensorImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorImpedance.setStatus('mandatory')
waterRopeSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("custom", 0), ("water", 1), ("fuel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorType.setStatus('mandatory')
waterRopeSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorId.setStatus('mandatory')
powerSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22), )
if mibBuilder.loadTexts: powerSensorTable.setStatus('mandatory')
powerSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1), ).setIndexNames((0, "SPAGENT-MIB", "powerSensorIndex"))
if mibBuilder.loadTexts: powerSensorEntry.setStatus('mandatory')
powerSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorIndex.setStatus('mandatory')
powerSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDescription.setStatus('mandatory')
powerSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorValue.setStatus('mandatory')
powerSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorUnit.setStatus('mandatory')
powerSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorStatus.setStatus('mandatory')
powerSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorGoOffline.setStatus('mandatory')
powerSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowCritical.setStatus('mandatory')
powerSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowWarning.setStatus('mandatory')
powerSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighWarning.setStatus('mandatory')
powerSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighCritical.setStatus('mandatory')
powerSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorRearm.setStatus('mandatory')
powerSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayError.setStatus('mandatory')
powerSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayNormal.setStatus('mandatory')
powerSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayLowCritical.setStatus('mandatory')
powerSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayLowWarning.setStatus('mandatory')
powerSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayHighWarning.setStatus('mandatory')
powerSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayHighCritical.setStatus('mandatory')
powerSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorPort.setStatus('mandatory')
powerSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorSubPort.setStatus('mandatory')
powerSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorDeviceIndex.setStatus('mandatory')
powerSensorTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorTimeOut.setStatus('mandatory')
powerSensorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorInterval.setStatus('mandatory')
powerSensorErrorRetryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorErrorRetryNum.setStatus('mandatory')
powerSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorMaxValue.setStatus('mandatory')
powerSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorMinValue.setStatus('mandatory')
powerSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDisplayStyle.setStatus('mandatory')
powerSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighCriticalDesc.setStatus('mandatory')
powerSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowCriticalDesc.setStatus('mandatory')
powerSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorNormalDesc.setStatus('mandatory')
powerSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowWarningDesc.setStatus('mandatory')
powerSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighWarningDesc.setStatus('mandatory')
powerSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorSensorErrorDesc.setStatus('mandatory')
powerSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighCriticalColor.setStatus('mandatory')
powerSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowCriticalColor.setStatus('mandatory')
powerSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorNormalColor.setStatus('mandatory')
powerSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowWarningColor.setStatus('mandatory')
powerSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighWarningColor.setStatus('mandatory')
powerSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorSensorErrorColor.setStatus('mandatory')
powerSensorValueFormatString = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorValueFormatString.setStatus('mandatory')
powerSensorValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 67), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorValueFormatFloat.setStatus('mandatory')
powerSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorAcknowledge.setStatus('mandatory')
powerSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorId.setStatus('mandatory')
fuelSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24), )
if mibBuilder.loadTexts: fuelSensorTable.setStatus('mandatory')
fuelSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1), ).setIndexNames((0, "SPAGENT-MIB", "fuelSensorIndex"))
if mibBuilder.loadTexts: fuelSensorEntry.setStatus('mandatory')
fuelSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorIndex.setStatus('mandatory')
fuelSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDescription.setStatus('mandatory')
fuelSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorValue.setStatus('mandatory')
fuelSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorUnit.setStatus('mandatory')
fuelSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorStatus.setStatus('mandatory')
fuelSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorGoOffline.setStatus('mandatory')
fuelSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowCritical.setStatus('mandatory')
fuelSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowWarning.setStatus('mandatory')
fuelSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighWarning.setStatus('mandatory')
fuelSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighCritical.setStatus('mandatory')
fuelSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorRearm.setStatus('mandatory')
fuelSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayError.setStatus('mandatory')
fuelSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayNormal.setStatus('mandatory')
fuelSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayLowCritical.setStatus('mandatory')
fuelSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayLowWarning.setStatus('mandatory')
fuelSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayHighWarning.setStatus('mandatory')
fuelSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayHighCritical.setStatus('mandatory')
fuelSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorRaw.setStatus('mandatory')
fuelSensorAmountMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorAmountMaxValue.setStatus('mandatory')
fuelSensorAmountBaseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorAmountBaseValue.setStatus('mandatory')
fuelSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorDeviceIndex.setStatus('mandatory')
fuelSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDisplayStyle.setStatus('mandatory')
fuelSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighCriticalDesc.setStatus('mandatory')
fuelSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowCriticalDesc.setStatus('mandatory')
fuelSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorNormalDesc.setStatus('mandatory')
fuelSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowWarningDesc.setStatus('mandatory')
fuelSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighWarningDesc.setStatus('mandatory')
fuelSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorSensorErrorDesc.setStatus('mandatory')
fuelSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighCriticalColor.setStatus('mandatory')
fuelSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowCriticalColor.setStatus('mandatory')
fuelSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorNormalColor.setStatus('mandatory')
fuelSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowWarningColor.setStatus('mandatory')
fuelSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighWarningColor.setStatus('mandatory')
fuelSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorSensorErrorColor.setStatus('mandatory')
fuelSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorAcknowledge.setStatus('mandatory')
fuelSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorId.setStatus('mandatory')
tankSenderSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26), )
if mibBuilder.loadTexts: tankSenderSensorTable.setStatus('mandatory')
tankSenderSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1), ).setIndexNames((0, "SPAGENT-MIB", "tankSenderSensorIndex"))
if mibBuilder.loadTexts: tankSenderSensorEntry.setStatus('mandatory')
tankSenderSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorIndex.setStatus('mandatory')
tankSenderSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDescription.setStatus('mandatory')
tankSenderSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorValue.setStatus('mandatory')
tankSenderSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorUnit.setStatus('mandatory')
tankSenderSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorStatus.setStatus('mandatory')
tankSenderSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorGoOffline.setStatus('mandatory')
tankSenderSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowCritical.setStatus('mandatory')
tankSenderSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowWarning.setStatus('mandatory')
tankSenderSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighWarning.setStatus('mandatory')
tankSenderSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighCritical.setStatus('mandatory')
tankSenderSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorRearm.setStatus('mandatory')
tankSenderSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayError.setStatus('mandatory')
tankSenderSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayNormal.setStatus('mandatory')
tankSenderSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayLowCritical.setStatus('mandatory')
tankSenderSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayLowWarning.setStatus('mandatory')
tankSenderSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayHighWarning.setStatus('mandatory')
tankSenderSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayHighCritical.setStatus('mandatory')
tankSenderSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorRaw.setStatus('mandatory')
tankSenderSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorDeviceIndex.setStatus('mandatory')
tankSenderSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDisplayStyle.setStatus('mandatory')
tankSenderSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighCriticalDesc.setStatus('mandatory')
tankSenderSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowCriticalDesc.setStatus('mandatory')
tankSenderSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorNormalDesc.setStatus('mandatory')
tankSenderSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowWarningDesc.setStatus('mandatory')
tankSenderSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighWarningDesc.setStatus('mandatory')
tankSenderSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorSensorErrorDesc.setStatus('mandatory')
tankSenderSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighCriticalColor.setStatus('mandatory')
tankSenderSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowCriticalColor.setStatus('mandatory')
tankSenderSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorNormalColor.setStatus('mandatory')
tankSenderSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowWarningColor.setStatus('mandatory')
tankSenderSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighWarningColor.setStatus('mandatory')
tankSenderSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorSensorErrorColor.setStatus('mandatory')
tankSenderSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorAcknowledge.setStatus('mandatory')
tankSenderSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorId.setStatus('mandatory')
doorSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27), )
if mibBuilder.loadTexts: doorSensorTable.setStatus('mandatory')
doorSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1), ).setIndexNames((0, "SPAGENT-MIB", "doorSensorIndex"))
if mibBuilder.loadTexts: doorSensorEntry.setStatus('mandatory')
doorSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorIndex.setStatus('mandatory')
doorSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorDescription.setStatus('mandatory')
doorSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorValue.setStatus('mandatory')
doorSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("closed", 2), ("heldOpen", 3), ("fire", 4), ("opened", 5), ("forceOpened", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorStatus.setStatus('mandatory')
doorSensorUnlockPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorUnlockPeriod.setStatus('mandatory')
doorSensorOpenPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorOpenPeriod.setStatus('mandatory')
doorSensorCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorCmd.setStatus('mandatory')
doorSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorAcknowledge.setStatus('mandatory')
doorSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorId.setStatus('mandatory')
temperatureArraySensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28), )
if mibBuilder.loadTexts: temperatureArraySensorTable.setStatus('mandatory')
temperatureArraySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1), ).setIndexNames((0, "SPAGENT-MIB", "temperatureArraySensorIndex"))
if mibBuilder.loadTexts: temperatureArraySensorEntry.setStatus('mandatory')
temperatureArraySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorIndex.setStatus('mandatory')
temperatureArraySensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDescription.setStatus('mandatory')
temperatureArraySensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 20))).clone(namedValues=NamedValues(("temperature", 1), ("dualsensor", 3), ("thermocouple", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorType.setStatus('mandatory')
temperatureArraySensorDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorDegree.setStatus('mandatory')
temperatureArraySensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorUnit.setStatus('mandatory')
temperatureArraySensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorStatus.setStatus('mandatory')
temperatureArraySensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorGoOffline.setStatus('mandatory')
temperatureArraySensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowCritical.setStatus('mandatory')
temperatureArraySensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowWarning.setStatus('mandatory')
temperatureArraySensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighWarning.setStatus('mandatory')
temperatureArraySensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighCritical.setStatus('mandatory')
temperatureArraySensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorRearm.setStatus('mandatory')
temperatureArraySensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayError.setStatus('mandatory')
temperatureArraySensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayNormal.setStatus('mandatory')
temperatureArraySensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayLowCritical.setStatus('mandatory')
temperatureArraySensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayLowWarning.setStatus('mandatory')
temperatureArraySensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayHighWarning.setStatus('mandatory')
temperatureArraySensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayHighCritical.setStatus('mandatory')
temperatureArraySensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorRaw.setStatus('mandatory')
temperatureArraySensorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorOffset.setStatus('mandatory')
temperatureArraySensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorPort.setStatus('mandatory')
temperatureArraySensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorSubPort.setStatus('mandatory')
temperatureArraySensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorDeviceIndex.setStatus('mandatory')
temperatureArraySensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDisplayStyle.setStatus('mandatory')
temperatureArraySensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighCriticalDesc.setStatus('mandatory')
temperatureArraySensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowCriticalDesc.setStatus('mandatory')
temperatureArraySensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorNormalDesc.setStatus('mandatory')
temperatureArraySensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowWarningDesc.setStatus('mandatory')
temperatureArraySensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighWarningDesc.setStatus('mandatory')
temperatureArraySensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorSensorErrorDesc.setStatus('mandatory')
temperatureArraySensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighCriticalColor.setStatus('mandatory')
temperatureArraySensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowCriticalColor.setStatus('mandatory')
temperatureArraySensorSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorSensorNormalColor.setStatus('mandatory')
temperatureArraySensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowWarningColor.setStatus('mandatory')
temperatureArraySensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighWarningColor.setStatus('mandatory')
temperatureArraySensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorSensorErrorColor.setStatus('mandatory')
temperatureArraySensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorAcknowledge.setStatus('mandatory')
temperatureArraySensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorSerialNumber.setStatus('mandatory')
temperatureArraySensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorId.setStatus('mandatory')
virtualSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129))
virtualAnalogSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2), )
if mibBuilder.loadTexts: virtualAnalogSensorTable.setStatus('mandatory')
virtualAnalogSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "virtualAnalogSensorIndex"))
if mibBuilder.loadTexts: virtualAnalogSensorEntry.setStatus('mandatory')
virtualAnalogSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAnalogSensorIndex.setStatus('mandatory')
virtualAnalogSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorDescription.setStatus('mandatory')
virtualAnalogSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAnalogSensorStatus.setStatus('mandatory')
virtualAnalogSensorOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAnalogSensorOnline.setStatus('mandatory')
virtualAnalogSensorGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorGoOnline.setStatus('mandatory')
virtualAnalogSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorHighWarning.setStatus('mandatory')
virtualAnalogSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorHighCritical.setStatus('mandatory')
virtualAnalogSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorLowWarning.setStatus('mandatory')
virtualAnalogSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorLowCritical.setStatus('mandatory')
virtualAnalogSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorRearm.setStatus('mandatory')
virtualAnalogSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAnalogSensorRaw.setStatus('mandatory')
virtualAnalogSensorEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorEmailTrapLimit.setStatus('mandatory')
virtualAnalogSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorUnit.setStatus('mandatory')
virtualAnalogSensorAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorAcknowledgement.setStatus('mandatory')
virtualAnalogSensorURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorURL.setStatus('mandatory')
virtualAnalogSensorOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorOpenURL.setStatus('mandatory')
virtualAnalogSensorContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeHighCritical.setStatus('mandatory')
virtualAnalogSensorContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeHighWarning.setStatus('mandatory')
virtualAnalogSensorContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeNormal.setStatus('mandatory')
virtualAnalogSensorContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeLowWarning.setStatus('mandatory')
virtualAnalogSensorContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeLowCritical.setStatus('mandatory')
virtualAnalogSensorContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeSensorError.setStatus('mandatory')
virtualAnalogSensorCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorCalendar.setStatus('mandatory')
virtualAnalogSensorValueFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000))).clone(namedValues=NamedValues(("x1", 1), ("x0-1", 10), ("x0-01", 100), ("x0-001", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorValueFactor.setStatus('mandatory')
virtualAnalogSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAnalogSensorId.setStatus('mandatory')
virtualSwitchSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4), )
if mibBuilder.loadTexts: virtualSwitchSensorTable.setStatus('mandatory')
virtualSwitchSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1), ).setIndexNames((0, "SPAGENT-MIB", "virtualSwitchSensorIndex"))
if mibBuilder.loadTexts: virtualSwitchSensorEntry.setStatus('mandatory')
virtualSwitchSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSwitchSensorIndex.setStatus('mandatory')
virtualSwitchSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorDescription.setStatus('mandatory')
virtualSwitchSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSwitchSensorStatus.setStatus('mandatory')
virtualSwitchSensorOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSwitchSensorOnline.setStatus('mandatory')
virtualSwitchSensorGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorGoOnline.setStatus('mandatory')
virtualSwitchSensorEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorEmailTrapLimit.setStatus('mandatory')
virtualSwitchSensorContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorContTimeHighCritical.setStatus('mandatory')
virtualSwitchSensorContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorContTimeNormal.setStatus('mandatory')
virtualSwitchSensorDescriptionCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorDescriptionCritical.setStatus('mandatory')
virtualSwitchSensorDescriptionNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorDescriptionNormal.setStatus('mandatory')
virtualSwitchSensorAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorAcknowledgement.setStatus('mandatory')
virtualSwitchSensorURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorURL.setStatus('mandatory')
virtualSwitchSensorOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorOpenURL.setStatus('mandatory')
virtualSwitchSensorCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorCalendar.setStatus('mandatory')
virtualSwitchSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorNormalState.setStatus('mandatory')
virtualSwitchSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSwitchSensorId.setStatus('mandatory')
sensorProbeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 7))
spSensorStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7), ("turnOn", 8), ("turnOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorStatus.setStatus('mandatory')
spSensorValue = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorValue.setStatus('mandatory')
spSensorLevelExceeded = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorLevelExceeded.setStatus('mandatory')
spSensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorIndex.setStatus('mandatory')
spSensorName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorName.setStatus('mandatory')
spSensorDescription = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorDescription.setStatus('mandatory')
spSensorProbeKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorProbeKeepAlive.setStatus('mandatory')
spSensorType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 128, 129, 132, 134, 138))).clone(namedValues=NamedValues(("temperature", 1), ("fourTo20mA", 2), ("humidity", 3), ("water", 4), ("atod", 5), ("security", 6), ("airflow", 8), ("siren", 9), ("dryContact", 10), ("voltage", 12), ("relay", 13), ("motion", 14), ("extradrycontact", 16), ("thermostat", 23), ("smoke", 24), ("power", 25), ("irms", 26), ("vrms", 27), ("watt", 28), ("relayarray", 29), ("virtual", 30), ("watthour", 32), ("temperaturearray", 33), ("waterrope", 34), ("fuellevel", 35), ("tanksender", 36), ("sound", 128), ("softwaremotion", 129), ("nosignal", 132), ("powermeter", 134), ("door", 138)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorType.setStatus('mandatory')
spSensorStatusName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorStatusName.setStatus('mandatory')
spSensorSubIndex = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorSubIndex.setStatus('mandatory')
spBoardIndex = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spBoardIndex.setStatus('mandatory')
spBoardDescription = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spBoardDescription.setStatus('mandatory')
spEventTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEventTimeStamp.setStatus('mandatory')
spEventClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEventClassNumber.setStatus('mandatory')
spEventClassName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEventClassName.setStatus('mandatory')
spSensorDecimalValue = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorDecimalValue.setStatus('mandatory')
spSensorAliveHigh = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorAliveHigh.setStatus('mandatory')
spSensorAliveLow = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorAliveLow.setStatus('mandatory')
plusSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3))
summary = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 1))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 2))
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 4))
sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 5))
virtual = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 6))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1))
cfgServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgServerAddress.setStatus('mandatory')
cfgServerPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgServerPort.setStatus('mandatory')
cfgDevicePassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 3), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgDevicePassword.setStatus('mandatory')
cfgSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSystemDescription.setStatus('mandatory')
cfgSystemName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSystemName.setStatus('mandatory')
cfgSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSystemLocation.setStatus('mandatory')
cfgSystemContact = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSystemContact.setStatus('mandatory')
cfgIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIPAddress.setStatus('mandatory')
cfgSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSubnetMask.setStatus('mandatory')
cfgDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDefaultGateway.setStatus('mandatory')
cfgDefaultDNS = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDefaultDNS.setStatus('mandatory')
cfgDeviceUseDHCP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDeviceUseDHCP.setStatus('mandatory')
cfgNTPMode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("do-not-use", 0), ("one-time", 1), ("on-system-start-up", 2), ("once-a-month", 3), ("once-a-week", 4), ("once-a-day", 5), ("once-a-hour", 6), ("continuously", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNTPMode.setStatus('mandatory')
cfgNTPServer1 = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNTPServer1.setStatus('mandatory')
cfgNTPServer2 = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNTPServer2.setStatus('mandatory')
cfgTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgTimeZone.setStatus('mandatory')
cfgGSMConnectionMethod = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("never-dial", 0), ("dial-if-eth-failed", 1), ("dial-only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMConnectionMethod.setStatus('mandatory')
cfgGSMConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMConnectionType.setStatus('mandatory')
cfgGSMInitString = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMInitString.setStatus('mandatory')
cfgGSMConnectionMode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMConnectionMode.setStatus('mandatory')
cfgGSMAPN = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMAPN.setStatus('mandatory')
cfgGSMRetry = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMRetry.setStatus('mandatory')
cfgGSMIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMIdleTimeout.setStatus('mandatory')
cfgGSMLogin = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMLogin.setStatus('mandatory')
cfgGSMPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 32), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgGSMPassword.setStatus('mandatory')
cfgGSMDNS = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMDNS.setStatus('mandatory')
cfgWEBPasswordEnable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgWEBPasswordEnable.setStatus('mandatory')
cfgWEBPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgWEBPort.setStatus('mandatory')
cfgWEBSecurePort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgWEBSecurePort.setStatus('mandatory')
cfgWEBSecureEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("useByDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgWEBSecureEnabled.setStatus('mandatory')
cfgWEBEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgWEBEnabled.setStatus('mandatory')
cfgSNMPReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 42), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgSNMPReadCommunity.setStatus('mandatory')
cfgSNMPWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 43), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgSNMPWriteCommunity.setStatus('mandatory')
cfgSNMPv3Mode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("authNoPriv", 0), ("authPriv", 1), ("noAuthNoPriv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3Mode.setStatus('mandatory')
cfgEMailEnable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEMailEnable.setStatus('mandatory')
cfgSMTPServer = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPServer.setStatus('mandatory')
cfgSMTPPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPPort.setStatus('mandatory')
cfgSMTPAuth = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-required", 0), ("required", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPAuth.setStatus('mandatory')
cfgSMTPLogin = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPLogin.setStatus('mandatory')
cfgSMTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 52), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgSMTPPassword.setStatus('mandatory')
cfgEMailResendInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEMailResendInterval.setStatus('mandatory')
cfgEMailMaxResend = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEMailMaxResend.setStatus('mandatory')
cfgKeepAliveTime = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 78), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgKeepAliveTime.setStatus('mandatory')
cfgHostID = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgHostID.setStatus('mandatory')
cfgHostUID = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgHostUID.setStatus('mandatory')
cfgHostSensorUID = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgHostSensorUID.setStatus('mandatory')
cfgVPNServerPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgVPNServerPort.setStatus('mandatory')
cfgVPNServerDNSName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 84), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgVPNServerDNSName.setStatus('mandatory')
cfgRSysLogServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 85), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRSysLogServerAddress.setStatus('mandatory')
cfgRSysLogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRSysLogServerPort.setStatus('mandatory')
cfgSMTPSSL = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no-encryption", 0), ("ssl-tls", 1), ("starttls", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPSSL.setStatus('mandatory')
cfgVPNCipherType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("blowfish", 1), ("aes128", 2), ("des-ede3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgVPNCipherType.setStatus('mandatory')
cfgVPNPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 91), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgVPNPassword.setStatus('mandatory')
cfgVPNEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgVPNEnabled.setStatus('mandatory')
cfgSNMPPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPPort.setStatus('mandatory')
cfgSNMPv3EngineId = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 94), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3EngineId.setStatus('mandatory')
cfgSNMPv3UserName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 95), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3UserName.setStatus('mandatory')
cfgSNMPv3AuthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("sha1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3AuthProtocol.setStatus('mandatory')
cfgSNMPv3AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 97), Opaque()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgSNMPv3AuthPassword.setStatus('mandatory')
cfgSNMPv3PrivProtocol = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3PrivProtocol.setStatus('mandatory')
cfgSNMPv3PrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 99), Opaque()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgSNMPv3PrivPassword.setStatus('mandatory')
cfgSNMPv3AccessPrivelege = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("read-only", 0), ("read-write", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3AccessPrivelege.setStatus('mandatory')
cfgSNMPv1Disable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv1Disable.setStatus('mandatory')
cfgSNMPv3Disable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3Disable.setStatus('mandatory')
cfgGraphDataCollectionPeriod = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGraphDataCollectionPeriod.setStatus('mandatory')
cfgServiceTelnet = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgServiceTelnet.setStatus('mandatory')
cfgEnableNotiFilteringOnBoot = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEnableNotiFilteringOnBoot.setStatus('mandatory')
cfgSystemURL = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 107), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSystemURL.setStatus('mandatory')
cfgServerIntegrationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgServerIntegrationEnabled.setStatus('mandatory')
cfgServerIntegrationPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 109), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgServerIntegrationPort.setStatus('mandatory')
cfgSMTPEMailFrom = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 110), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPEMailFrom.setStatus('mandatory')
cfgSupportEMail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 111), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSupportEMail.setStatus('mandatory')
cfgDHCPHostName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 137), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDHCPHostName.setStatus('mandatory')
licenses = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2))
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1), )
if mibBuilder.loadTexts: licenseTable.setStatus('mandatory')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "licenseIndex"))
if mibBuilder.loadTexts: licenseEntry.setStatus('mandatory')
licenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIndex.setStatus('mandatory')
license5DC = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: license5DC.setStatus('mandatory')
licenseSNMPv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseSNMPv3.setStatus('mandatory')
licenseVPN = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseVPN.setStatus('mandatory')
licenseVSens = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseVSens.setStatus('mandatory')
licenseAccessUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseAccessUsers.setStatus('mandatory')
license3rdPartyPMS = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: license3rdPartyPMS.setStatus('mandatory')
lic5DCTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lic5DCTotal.setStatus('mandatory')
lic5DCUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lic5DCUsed.setStatus('mandatory')
licSNMPv3 = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forbidden", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licSNMPv3.setStatus('mandatory')
licVPN = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forbidden", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licVPN.setStatus('mandatory')
licVSensTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licVSensTotal.setStatus('mandatory')
licVSensUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licVSensUsed.setStatus('mandatory')
licAccessUsersTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licAccessUsersTotal.setStatus('mandatory')
licAccessUsersUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licAccessUsersUsed.setStatus('mandatory')
lic3rdPartyPMS = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forbidden", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lic3rdPartyPMS.setStatus('mandatory')
licAddKey = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1000), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: licAddKey.setStatus('mandatory')
commonTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1), )
if mibBuilder.loadTexts: commonTable.setStatus('mandatory')
commonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "commonIndex"))
if mibBuilder.loadTexts: commonEntry.setStatus('mandatory')
commonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonIndex.setStatus('mandatory')
commonDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDescription.setStatus('mandatory')
commonType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 31, 128, 129, 130, 131, 132, 133, 224, 255))).clone(namedValues=NamedValues(("temperature", 1), ("humidity", 2), ("temperature-dual", 3), ("four-20mA", 4), ("dcvoltage", 5), ("airflow", 6), ("io", 7), ("drycontact", 8), ("motion", 9), ("water", 10), ("security", 11), ("siren", 12), ("relay", 13), ("acvoltage", 14), ("vrms", 15), ("irms", 16), ("watt", 17), ("watthour", 18), ("xrelay", 19), ("thermocouple", 20), ("smoke", 21), ("drycontact-array", 22), ("temperature-array", 23), ("waterrope", 24), ("five-drycontacts", 31), ("thermostat", 128), ("virtual", 129), ("sound", 130), ("softmotion", 131), ("camera-dummy", 132), ("board-state", 133), ("nosignal", 224), ("test", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonType.setStatus('mandatory')
commonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonValue.setStatus('mandatory')
commonUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonUnit.setStatus('mandatory')
commonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonStatus.setStatus('mandatory')
commonGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGoOffline.setStatus('mandatory')
commonRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonRaw.setStatus('mandatory')
commonPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPort.setStatus('mandatory')
commonSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSubPort.setStatus('mandatory')
commonDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDisplayStyle.setStatus('mandatory')
commonHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonHighCriticalDescription.setStatus('mandatory')
commonLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonLowCriticalDescription.setStatus('mandatory')
commonSensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorNormalDescription.setStatus('mandatory')
commonLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonLowWarningDescription.setStatus('mandatory')
commonHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonHighWarningDescription.setStatus('mandatory')
commonSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorErrorDescription.setStatus('mandatory')
commonOnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOnDescription.setStatus('mandatory')
commonOffDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOffDescription.setStatus('mandatory')
commonHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonHighCriticalColor.setStatus('mandatory')
commonLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonLowCriticalColor.setStatus('mandatory')
commonSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorNormalColor.setStatus('mandatory')
commonLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonLowWarningColor.setStatus('mandatory')
commonHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonHighWarningColor.setStatus('mandatory')
commonSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorErrorColor.setStatus('mandatory')
commonOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOnColor.setStatus('mandatory')
commonOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOffColor.setStatus('mandatory')
commonAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAcknowledge.setStatus('mandatory')
commonValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 99), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonValueFormatFloat.setStatus('mandatory')
commonId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonId.setStatus('mandatory')
temperatureTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2), )
if mibBuilder.loadTexts: temperatureTable.setStatus('mandatory')
temperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureEntry.setStatus('mandatory')
temperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureIndex.setStatus('mandatory')
temperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDescription.setStatus('mandatory')
temperatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 20, 23))).clone(namedValues=NamedValues(("temperature", 1), ("temperature-dual", 3), ("thermocouple", 20), ("temperature-array", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureType.setStatus('mandatory')
temperatureDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureDegree.setStatus('mandatory')
temperatureUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureUnit.setStatus('mandatory')
temperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureStatus.setStatus('mandatory')
temperatureGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureGoOffline.setStatus('mandatory')
temperatureLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowCritical.setStatus('mandatory')
temperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowWarning.setStatus('mandatory')
temperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighWarning.setStatus('mandatory')
temperatureHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighCritical.setStatus('mandatory')
temperatureRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureRearm.setStatus('mandatory')
temperatureDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayError.setStatus('mandatory')
temperatureDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayNormal.setStatus('mandatory')
temperatureDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayLowCritical.setStatus('mandatory')
temperatureDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayLowWarning.setStatus('mandatory')
temperatureDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayHighWarning.setStatus('mandatory')
temperatureDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayHighCritical.setStatus('mandatory')
temperatureRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureRaw.setStatus('mandatory')
temperatureOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureOffset.setStatus('mandatory')
temperaturePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperaturePort.setStatus('mandatory')
temperatureSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSubPort.setStatus('mandatory')
temperatureDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDisplayStyle.setStatus('mandatory')
temperatureHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighCriticalDescription.setStatus('mandatory')
temperatureLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowCriticalDescription.setStatus('mandatory')
temperatureSensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorNormalDescription.setStatus('mandatory')
temperatureLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowWarningDescription.setStatus('mandatory')
temperatureHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighWarningDescription.setStatus('mandatory')
temperatureSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorErrorDescription.setStatus('mandatory')
temperatureHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighCriticalColor.setStatus('mandatory')
temperatureLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowCriticalColor.setStatus('mandatory')
temperatureSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorNormalColor.setStatus('mandatory')
temperatureLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowWarningColor.setStatus('mandatory')
temperatureHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighWarningColor.setStatus('mandatory')
temperatureSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorErrorColor.setStatus('mandatory')
temperatureAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureAcknowledge.setStatus('mandatory')
temperatureSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSerialNumber.setStatus('mandatory')
temperatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureId.setStatus('mandatory')
humidityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3), )
if mibBuilder.loadTexts: humidityTable.setStatus('mandatory')
humidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1), ).setIndexNames((0, "SPAGENT-MIB", "humidityIndex"))
if mibBuilder.loadTexts: humidityEntry.setStatus('mandatory')
humidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityIndex.setStatus('mandatory')
humidityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDescription.setStatus('mandatory')
humidityPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityPercent.setStatus('mandatory')
humidityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityUnit.setStatus('mandatory')
humidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityStatus.setStatus('mandatory')
humidityGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityGoOffline.setStatus('mandatory')
humidityLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowCritical.setStatus('mandatory')
humidityLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowWarning.setStatus('mandatory')
humidityHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighWarning.setStatus('mandatory')
humidityHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighCritical.setStatus('mandatory')
humidityRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityRearm.setStatus('mandatory')
humidityDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayError.setStatus('mandatory')
humidityDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayNormal.setStatus('mandatory')
humidityDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayLowCritical.setStatus('mandatory')
humidityDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayLowWarning.setStatus('mandatory')
humidityDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayHighWarning.setStatus('mandatory')
humidityDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayHighCritical.setStatus('mandatory')
humidityRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityRaw.setStatus('mandatory')
humidityOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityOffset.setStatus('mandatory')
humidityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityPort.setStatus('mandatory')
humiditySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySubPort.setStatus('mandatory')
humidityDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDisplayStyle.setStatus('mandatory')
humidityHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighCriticalDescription.setStatus('mandatory')
humidityLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowCriticalDescription.setStatus('mandatory')
humiditySensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorNormalDescription.setStatus('mandatory')
humidityLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowWarningDescription.setStatus('mandatory')
humidityHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighWarningDescription.setStatus('mandatory')
humiditySensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorErrorDescription.setStatus('mandatory')
humidityHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighCriticalColor.setStatus('mandatory')
humidityLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowCriticalColor.setStatus('mandatory')
humiditySensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorNormalColor.setStatus('mandatory')
humidityLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowWarningColor.setStatus('mandatory')
humidityHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighWarningColor.setStatus('mandatory')
humiditySensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorErrorColor.setStatus('mandatory')
humidityAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityAcknowledge.setStatus('mandatory')
humidityId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityId.setStatus('mandatory')
drycontactTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4), )
if mibBuilder.loadTexts: drycontactTable.setStatus('mandatory')
drycontactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1), ).setIndexNames((0, "SPAGENT-MIB", "drycontactIndex"))
if mibBuilder.loadTexts: drycontactEntry.setStatus('mandatory')
drycontactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactIndex.setStatus('mandatory')
drycontactDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactDescription.setStatus('mandatory')
drycontactType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 22))).clone(namedValues=NamedValues(("drycontact-inout", 7), ("drycontact-input", 8), ("drycontact-array", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactType.setStatus('mandatory')
drycontactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("outputLow", 8), ("outputHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactStatus.setStatus('mandatory')
drycontactGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactGoOffline.setStatus('mandatory')
drycontactDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactDirection.setStatus('mandatory')
drycontactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactNormalState.setStatus('mandatory')
drycontactControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactControlMode.setStatus('mandatory')
drycontactOutputManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOutputManualCycleTime.setStatus('mandatory')
drycontactOutputManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 1), ("cycle-Low-High-Low", 2), ("cycle-High-Low-High", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOutputManualAction.setStatus('mandatory')
drycontactPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactPort.setStatus('mandatory')
drycontactSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactSubPort.setStatus('mandatory')
drycontactCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactCriticalDescription.setStatus('mandatory')
drycontactNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactNormalDescription.setStatus('mandatory')
drycontactOnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOnDescription.setStatus('mandatory')
drycontactOffDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOffDescription.setStatus('mandatory')
drycontactCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactCriticalColor.setStatus('mandatory')
drycontactNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactNormalColor.setStatus('mandatory')
drycontactOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOnColor.setStatus('mandatory')
drycontactOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOffColor.setStatus('mandatory')
drycontactAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactAcknowledge.setStatus('mandatory')
drycontactId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactId.setStatus('mandatory')
current4to20mATable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5), )
if mibBuilder.loadTexts: current4to20mATable.setStatus('mandatory')
current4to20mAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1), ).setIndexNames((0, "SPAGENT-MIB", "current4to20mAIndex"))
if mibBuilder.loadTexts: current4to20mAEntry.setStatus('mandatory')
current4to20mAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mAIndex.setStatus('mandatory')
current4to20mADescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADescription.setStatus('mandatory')
current4to20mAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mAValue.setStatus('mandatory')
current4to20mAUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAUnit.setStatus('mandatory')
current4to20mAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mAStatus.setStatus('mandatory')
current4to20mAGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAGoOffline.setStatus('mandatory')
current4to20mALowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowCritical.setStatus('mandatory')
current4to20mALowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowWarning.setStatus('mandatory')
current4to20mAHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighWarning.setStatus('mandatory')
current4to20mAHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighCritical.setStatus('mandatory')
current4to20mARearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mARearm.setStatus('mandatory')
current4to20mADelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayError.setStatus('mandatory')
current4to20mADelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayNormal.setStatus('mandatory')
current4to20mADelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayLowCritical.setStatus('mandatory')
current4to20mADelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayLowWarning.setStatus('mandatory')
current4to20mADelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayHighWarning.setStatus('mandatory')
current4to20mADelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayHighCritical.setStatus('mandatory')
current4to20mARaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mARaw.setStatus('mandatory')
current4to20mAOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAOffset.setStatus('mandatory')
current4to20mAAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAAmountMaxVoltage.setStatus('mandatory')
current4to20mAAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAAmountBaseVoltage.setStatus('mandatory')
current4to20mAPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mAPort.setStatus('mandatory')
current4to20mASubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASubPort.setStatus('mandatory')
current4to20mAMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAMaxVoltage.setStatus('mandatory')
current4to20mABaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mABaseVoltage.setStatus('mandatory')
current4to20mADisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADisplayStyle.setStatus('mandatory')
current4to20mAHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighCriticalDescription.setStatus('mandatory')
current4to20mALowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowCriticalDescription.setStatus('mandatory')
current4to20mANormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mANormalDescription.setStatus('mandatory')
current4to20mALowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowWarningDescription.setStatus('mandatory')
current4to20mAHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighWarningDescription.setStatus('mandatory')
current4to20mASensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorErrorDescription.setStatus('mandatory')
current4to20mAHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighCriticalColor.setStatus('mandatory')
current4to20mALowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowCriticalColor.setStatus('mandatory')
current4to20mANormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mANormalColor.setStatus('mandatory')
current4to20mALowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowWarningColor.setStatus('mandatory')
current4to20mAHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighWarningColor.setStatus('mandatory')
current4to20mASensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorErrorColor.setStatus('mandatory')
current4to20mAAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAAcknowledge.setStatus('mandatory')
current4to20mAId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mAId.setStatus('mandatory')
dcVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6), )
if mibBuilder.loadTexts: dcVoltageTable.setStatus('mandatory')
dcVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1), ).setIndexNames((0, "SPAGENT-MIB", "dcVoltageIndex"))
if mibBuilder.loadTexts: dcVoltageEntry.setStatus('mandatory')
dcVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageIndex.setStatus('mandatory')
dcVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDescription.setStatus('mandatory')
dcVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageValue.setStatus('mandatory')
dcVoltageUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageUnit.setStatus('mandatory')
dcVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageStatus.setStatus('mandatory')
dcVoltageGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageGoOffline.setStatus('mandatory')
dcVoltageLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowCritical.setStatus('mandatory')
dcVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowWarning.setStatus('mandatory')
dcVoltageHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighWarning.setStatus('mandatory')
dcVoltageHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighCritical.setStatus('mandatory')
dcVoltageRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageRearm.setStatus('mandatory')
dcVoltageDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayError.setStatus('mandatory')
dcVoltageDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayNormal.setStatus('mandatory')
dcVoltageDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayLowCritical.setStatus('mandatory')
dcVoltageDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayLowWarning.setStatus('mandatory')
dcVoltageDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayHighWarning.setStatus('mandatory')
dcVoltageDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayHighCritical.setStatus('mandatory')
dcVoltageRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageRaw.setStatus('mandatory')
dcVoltageOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageOffset.setStatus('mandatory')
dcVoltageJumper = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-600, -400, -300, -200, -100, 100, 200, 300, 400, 600))).clone(namedValues=NamedValues(("jumperAt-60", -600), ("jumperAt-40", -400), ("jumperAt-30", -300), ("jumperAt-20", -200), ("jumperAt-10", -100), ("jumperAt10", 100), ("jumperAt20", 200), ("jumperAt30", 300), ("jumperAt40", 400), ("jumperAt60", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageJumper.setStatus('mandatory')
dcVoltageAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageAmountMaxVoltage.setStatus('mandatory')
dcVoltageAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageAmountBaseVoltage.setStatus('mandatory')
dcVoltagePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltagePort.setStatus('mandatory')
dcVoltageSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSubPort.setStatus('mandatory')
dcVoltageMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageMaxVoltage.setStatus('mandatory')
dcVoltageBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageBaseVoltage.setStatus('mandatory')
dcVoltageDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDisplayStyle.setStatus('mandatory')
dcVoltageHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighCriticalDescription.setStatus('mandatory')
dcVoltageLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowCriticalDescription.setStatus('mandatory')
dcVoltageNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageNormalDescription.setStatus('mandatory')
dcVoltageLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowWarningDescription.setStatus('mandatory')
dcVoltageHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighWarningDescription.setStatus('mandatory')
dcVoltageSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorErrorDescription.setStatus('mandatory')
dcVoltageHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighCriticalColor.setStatus('mandatory')
dcVoltageLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowCriticalColor.setStatus('mandatory')
dcVoltageNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageNormalColor.setStatus('mandatory')
dcVoltageLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowWarningColor.setStatus('mandatory')
dcVoltageHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighWarningColor.setStatus('mandatory')
dcVoltageSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorErrorColor.setStatus('mandatory')
dcVoltageAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageAcknowledge.setStatus('mandatory')
dcVoltageId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageId.setStatus('mandatory')
airflowTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7), )
if mibBuilder.loadTexts: airflowTable.setStatus('mandatory')
airflowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1), ).setIndexNames((0, "SPAGENT-MIB", "airflowIndex"))
if mibBuilder.loadTexts: airflowEntry.setStatus('mandatory')
airflowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowIndex.setStatus('mandatory')
airflowDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDescription.setStatus('mandatory')
airflowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowValue.setStatus('mandatory')
airflowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowStatus.setStatus('mandatory')
airflowGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowGoOffline.setStatus('mandatory')
airflowLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowCritical.setStatus('mandatory')
airflowLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowWarning.setStatus('mandatory')
airflowHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighWarning.setStatus('mandatory')
airflowHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighCritical.setStatus('mandatory')
airflowRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowRearm.setStatus('mandatory')
airflowDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayError.setStatus('mandatory')
airflowDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayNormal.setStatus('mandatory')
airflowDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayLowCritical.setStatus('mandatory')
airflowDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayLowWarning.setStatus('mandatory')
airflowDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayHighWarning.setStatus('mandatory')
airflowDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayHighCritical.setStatus('mandatory')
airflowRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowRaw.setStatus('mandatory')
airflowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowPort.setStatus('mandatory')
airflowSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSubPort.setStatus('mandatory')
airflowDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDisplayStyle.setStatus('mandatory')
airflowHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighCriticalDescription.setStatus('mandatory')
airflowLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowCriticalDescription.setStatus('mandatory')
airflowNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowNormalDescription.setStatus('mandatory')
airflowLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowWarningDescription.setStatus('mandatory')
airflowHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighWarningDescription.setStatus('mandatory')
airflowSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorErrorDescription.setStatus('mandatory')
airflowHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighCriticalColor.setStatus('mandatory')
airflowLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowCriticalColor.setStatus('mandatory')
airflowNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowNormalColor.setStatus('mandatory')
airflowLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowWarningColor.setStatus('mandatory')
airflowHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighWarningColor.setStatus('mandatory')
airflowSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorErrorColor.setStatus('mandatory')
airflowAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowAcknowledge.setStatus('mandatory')
airflowId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowId.setStatus('mandatory')
motionTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8), )
if mibBuilder.loadTexts: motionTable.setStatus('mandatory')
motionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1), ).setIndexNames((0, "SPAGENT-MIB", "motionIndex"))
if mibBuilder.loadTexts: motionEntry.setStatus('mandatory')
motionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionIndex.setStatus('mandatory')
motionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionDescription.setStatus('mandatory')
motionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionStatus.setStatus('mandatory')
motionGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionGoOffline.setStatus('mandatory')
motionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionPort.setStatus('mandatory')
motionSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSubPort.setStatus('mandatory')
motionCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionCriticalDescription.setStatus('mandatory')
motionNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionNormalDescription.setStatus('mandatory')
motionCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionCriticalColor.setStatus('mandatory')
motionNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionNormalColor.setStatus('mandatory')
motionAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionAcknowledge.setStatus('mandatory')
motionId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionId.setStatus('mandatory')
waterTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9), )
if mibBuilder.loadTexts: waterTable.setStatus('mandatory')
waterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1), ).setIndexNames((0, "SPAGENT-MIB", "waterIndex"))
if mibBuilder.loadTexts: waterEntry.setStatus('mandatory')
waterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterIndex.setStatus('mandatory')
waterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterDescription.setStatus('mandatory')
waterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterStatus.setStatus('mandatory')
waterGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterGoOffline.setStatus('mandatory')
waterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterPort.setStatus('mandatory')
waterSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSubPort.setStatus('mandatory')
waterCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCriticalDescription.setStatus('mandatory')
waterNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterNormalDescription.setStatus('mandatory')
waterCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCriticalColor.setStatus('mandatory')
waterNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterNormalColor.setStatus('mandatory')
waterAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterAcknowledge.setStatus('mandatory')
waterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterId.setStatus('mandatory')
securityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10), )
if mibBuilder.loadTexts: securityTable.setStatus('mandatory')
securityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1), ).setIndexNames((0, "SPAGENT-MIB", "securityIndex"))
if mibBuilder.loadTexts: securityEntry.setStatus('mandatory')
securityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityIndex.setStatus('mandatory')
securityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityDescription.setStatus('mandatory')
securityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityStatus.setStatus('mandatory')
securityGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityGoOffline.setStatus('mandatory')
securityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityPort.setStatus('mandatory')
securitySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySubPort.setStatus('mandatory')
securityCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityCriticalDescription.setStatus('mandatory')
securityNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityNormalDescription.setStatus('mandatory')
securityCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityCriticalColor.setStatus('mandatory')
securityNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityNormalColor.setStatus('mandatory')
securityAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityAcknowledge.setStatus('mandatory')
securityId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityId.setStatus('mandatory')
sirenTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11), )
if mibBuilder.loadTexts: sirenTable.setStatus('mandatory')
sirenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1), ).setIndexNames((0, "SPAGENT-MIB", "sirenIndex"))
if mibBuilder.loadTexts: sirenEntry.setStatus('mandatory')
sirenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenIndex.setStatus('mandatory')
sirenDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenDescription.setStatus('mandatory')
sirenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenStatus.setStatus('mandatory')
sirenGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenGoOffline.setStatus('mandatory')
sirenControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenControlMode.setStatus('mandatory')
sirenManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenManualCycleTime.setStatus('mandatory')
sirenManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenManualAction.setStatus('mandatory')
sirenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenPort.setStatus('mandatory')
sirenSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSubPort.setStatus('mandatory')
sirenOnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenOnDescription.setStatus('mandatory')
sirenOffDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenOffDescription.setStatus('mandatory')
sirenOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenOnColor.setStatus('mandatory')
sirenOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenOffColor.setStatus('mandatory')
sirenAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenAcknowledge.setStatus('mandatory')
sirenId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenId.setStatus('mandatory')
relayTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12), )
if mibBuilder.loadTexts: relayTable.setStatus('mandatory')
relayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1), ).setIndexNames((0, "SPAGENT-MIB", "relayIndex"))
if mibBuilder.loadTexts: relayEntry.setStatus('mandatory')
relayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayIndex.setStatus('mandatory')
relayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayDescription.setStatus('mandatory')
relayType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 19))).clone(namedValues=NamedValues(("relay", 13), ("xrelay", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayType.setStatus('mandatory')
relayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayStatus.setStatus('mandatory')
relayGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayGoOffline.setStatus('mandatory')
relayControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayControlMode.setStatus('mandatory')
relayManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayManualCycleTime.setStatus('mandatory')
relayManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayManualAction.setStatus('mandatory')
relayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayPort.setStatus('mandatory')
relaySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySubPort.setStatus('mandatory')
relayOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayOnDesc.setStatus('mandatory')
relayOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayOffDesc.setStatus('mandatory')
relayOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayOnColor.setStatus('mandatory')
relayOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayOffColor.setStatus('mandatory')
relayAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayAcknowledge.setStatus('mandatory')
relayId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayId.setStatus('mandatory')
acVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13), )
if mibBuilder.loadTexts: acVoltageTable.setStatus('mandatory')
acVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1), ).setIndexNames((0, "SPAGENT-MIB", "acVoltageIndex"))
if mibBuilder.loadTexts: acVoltageEntry.setStatus('mandatory')
acVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageIndex.setStatus('mandatory')
acVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageDescription.setStatus('mandatory')
acVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageStatus.setStatus('mandatory')
acVoltageGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageGoOffline.setStatus('mandatory')
acVoltagePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltagePort.setStatus('mandatory')
acVoltageSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSubPort.setStatus('mandatory')
acVoltageCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageCriticalDescription.setStatus('mandatory')
acVoltageNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageNormalDescription.setStatus('mandatory')
acVoltageCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageCriticalColor.setStatus('mandatory')
acVoltageNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageNormalColor.setStatus('mandatory')
acVoltageAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageAcknowledge.setStatus('mandatory')
acVoltageId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageId.setStatus('mandatory')
smokeTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14), )
if mibBuilder.loadTexts: smokeTable.setStatus('mandatory')
smokeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1), ).setIndexNames((0, "SPAGENT-MIB", "smokeIndex"))
if mibBuilder.loadTexts: smokeEntry.setStatus('mandatory')
smokeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeIndex.setStatus('mandatory')
smokeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeDescription.setStatus('mandatory')
smokeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeStatus.setStatus('mandatory')
smokeGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeGoOffline.setStatus('mandatory')
smokePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokePort.setStatus('mandatory')
smokeSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSubPort.setStatus('mandatory')
smokeCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeCriticalDescription.setStatus('mandatory')
smokeNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeNormalDescription.setStatus('mandatory')
smokeCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeCriticalColor.setStatus('mandatory')
smokeNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeNormalColor.setStatus('mandatory')
smokeAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeAcknowledge.setStatus('mandatory')
smokeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeId.setStatus('mandatory')
waterRopeTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21), )
if mibBuilder.loadTexts: waterRopeTable.setStatus('mandatory')
waterRopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1), ).setIndexNames((0, "SPAGENT-MIB", "waterRopeIndex"))
if mibBuilder.loadTexts: waterRopeEntry.setStatus('mandatory')
waterRopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeIndex.setStatus('mandatory')
waterRopeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeDescription.setStatus('mandatory')
waterRopeLeakLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeLeakLocation.setStatus('mandatory')
waterRopeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeUnit.setStatus('mandatory')
waterRopeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeStatus.setStatus('mandatory')
waterRopeGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeGoOffline.setStatus('mandatory')
waterRopeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeRaw.setStatus('mandatory')
waterRopeCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeCriticalDescription.setStatus('mandatory')
waterRopeNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeNormalDescription.setStatus('mandatory')
waterRopeSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorErrorDescription.setStatus('mandatory')
waterRopeCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeCriticalColor.setStatus('mandatory')
waterRopeNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeNormalColor.setStatus('mandatory')
waterRopeSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorErrorColor.setStatus('mandatory')
waterRopeAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeAcknowledge.setStatus('mandatory')
waterRopeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeLength.setStatus('mandatory')
waterRopeImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 101), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeImpedance.setStatus('mandatory')
waterRopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("custom", 0), ("water", 1), ("fuel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeType.setStatus('mandatory')
waterRopeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeId.setStatus('mandatory')
powerTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22), )
if mibBuilder.loadTexts: powerTable.setStatus('mandatory')
powerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1), ).setIndexNames((0, "SPAGENT-MIB", "powerIndex"))
if mibBuilder.loadTexts: powerEntry.setStatus('mandatory')
powerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerIndex.setStatus('mandatory')
powerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDescription.setStatus('mandatory')
powerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerValue.setStatus('mandatory')
powerUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnit.setStatus('mandatory')
powerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatus.setStatus('mandatory')
powerGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerGoOffline.setStatus('mandatory')
powerLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowCritical.setStatus('mandatory')
powerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowWarning.setStatus('mandatory')
powerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighWarning.setStatus('mandatory')
powerHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighCritical.setStatus('mandatory')
powerRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerRearm.setStatus('mandatory')
powerDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayError.setStatus('mandatory')
powerDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayNormal.setStatus('mandatory')
powerDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayLowCritical.setStatus('mandatory')
powerDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayLowWarning.setStatus('mandatory')
powerDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayHighWarning.setStatus('mandatory')
powerDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayHighCritical.setStatus('mandatory')
powerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPort.setStatus('mandatory')
powerSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSubPort.setStatus('mandatory')
powerDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDisplayStyle.setStatus('mandatory')
powerHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighCriticalDescription.setStatus('mandatory')
powerLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowCriticalDescription.setStatus('mandatory')
powerNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerNormalDescription.setStatus('mandatory')
powerLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowWarningDescription.setStatus('mandatory')
powerHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighWarningDescription.setStatus('mandatory')
powerSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorErrorDescription.setStatus('mandatory')
powerHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighCriticalColor.setStatus('mandatory')
powerLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowCriticalColor.setStatus('mandatory')
powerNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerNormalColor.setStatus('mandatory')
powerLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowWarningColor.setStatus('mandatory')
powerHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighWarningColor.setStatus('mandatory')
powerSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorErrorColor.setStatus('mandatory')
powerValueFormatString = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerValueFormatString.setStatus('mandatory')
powerValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 67), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerValueFormatFloat.setStatus('mandatory')
powerAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerAcknowledge.setStatus('mandatory')
powerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerId.setStatus('mandatory')
fuelTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24), )
if mibBuilder.loadTexts: fuelTable.setStatus('mandatory')
fuelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1), ).setIndexNames((0, "SPAGENT-MIB", "fuelIndex"))
if mibBuilder.loadTexts: fuelEntry.setStatus('mandatory')
fuelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelIndex.setStatus('mandatory')
fuelDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDescription.setStatus('mandatory')
fuelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelValue.setStatus('mandatory')
fuelUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelUnit.setStatus('mandatory')
fuelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelStatus.setStatus('mandatory')
fuelGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelGoOffline.setStatus('mandatory')
fuelLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowCritical.setStatus('mandatory')
fuelLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowWarning.setStatus('mandatory')
fuelHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighWarning.setStatus('mandatory')
fuelHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighCritical.setStatus('mandatory')
fuelRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelRearm.setStatus('mandatory')
fuelDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayError.setStatus('mandatory')
fuelDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayNormal.setStatus('mandatory')
fuelDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayLowCritical.setStatus('mandatory')
fuelDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayLowWarning.setStatus('mandatory')
fuelDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayHighWarning.setStatus('mandatory')
fuelDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayHighCritical.setStatus('mandatory')
fuelRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelRaw.setStatus('mandatory')
fuelAmountMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelAmountMaxValue.setStatus('mandatory')
fuelAmountBaseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelAmountBaseValue.setStatus('mandatory')
fuelDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDisplayStyle.setStatus('mandatory')
fuelHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighCriticalDescription.setStatus('mandatory')
fuelLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowCriticalDescription.setStatus('mandatory')
fuelNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelNormalDescription.setStatus('mandatory')
fuelLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowWarningDescription.setStatus('mandatory')
fuelHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighWarningDescription.setStatus('mandatory')
fuelSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorErrorDescription.setStatus('mandatory')
fuelHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighCriticalColor.setStatus('mandatory')
fuelLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowCriticalColor.setStatus('mandatory')
fuelNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelNormalColor.setStatus('mandatory')
fuelLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowWarningColor.setStatus('mandatory')
fuelHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighWarningColor.setStatus('mandatory')
fuelSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorErrorColor.setStatus('mandatory')
fuelAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelAcknowledge.setStatus('mandatory')
fuelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelId.setStatus('mandatory')
tankSenderTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26), )
if mibBuilder.loadTexts: tankSenderTable.setStatus('mandatory')
tankSenderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1), ).setIndexNames((0, "SPAGENT-MIB", "tankSenderIndex"))
if mibBuilder.loadTexts: tankSenderEntry.setStatus('mandatory')
tankSenderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderIndex.setStatus('mandatory')
tankSenderDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDescription.setStatus('mandatory')
tankSenderValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderValue.setStatus('mandatory')
tankSenderUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderUnit.setStatus('mandatory')
tankSenderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderStatus.setStatus('mandatory')
tankSenderGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderGoOffline.setStatus('mandatory')
tankSenderLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowCritical.setStatus('mandatory')
tankSenderLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowWarning.setStatus('mandatory')
tankSenderHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighWarning.setStatus('mandatory')
tankSenderHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighCritical.setStatus('mandatory')
tankSenderRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderRearm.setStatus('mandatory')
tankSenderDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayError.setStatus('mandatory')
tankSenderDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayNormal.setStatus('mandatory')
tankSenderDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayLowCritical.setStatus('mandatory')
tankSenderDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayLowWarning.setStatus('mandatory')
tankSenderDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayHighWarning.setStatus('mandatory')
tankSenderDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayHighCritical.setStatus('mandatory')
tankSenderRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderRaw.setStatus('mandatory')
tankSenderDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDisplayStyle.setStatus('mandatory')
tankSenderHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighCriticalDescription.setStatus('mandatory')
tankSenderLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowCriticalDescription.setStatus('mandatory')
tankSenderNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderNormalDescription.setStatus('mandatory')
tankSenderLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowWarningDescription.setStatus('mandatory')
tankSenderHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighWarningDescription.setStatus('mandatory')
tankSenderSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorErrorDescription.setStatus('mandatory')
tankSenderHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighCriticalColor.setStatus('mandatory')
tankSenderLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowCriticalColor.setStatus('mandatory')
tankSenderNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderNormalColor.setStatus('mandatory')
tankSenderLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowWarningColor.setStatus('mandatory')
tankSenderHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighWarningColor.setStatus('mandatory')
tankSenderSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorErrorColor.setStatus('mandatory')
tankSenderAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderAcknowledge.setStatus('mandatory')
tankSenderId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderId.setStatus('mandatory')
doorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27), )
if mibBuilder.loadTexts: doorTable.setStatus('mandatory')
doorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1), ).setIndexNames((0, "SPAGENT-MIB", "doorIndex"))
if mibBuilder.loadTexts: doorEntry.setStatus('mandatory')
doorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorIndex.setStatus('mandatory')
doorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorDescription.setStatus('mandatory')
doorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorValue.setStatus('mandatory')
doorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("closed", 2), ("heldOpen", 3), ("fire", 4), ("opened", 5), ("forceOpened", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorStatus.setStatus('mandatory')
doorUnlockPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorUnlockPeriod.setStatus('mandatory')
doorOpenPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorOpenPeriod.setStatus('mandatory')
doorCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("trig-open", 1), ("trig-close", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: doorCmd.setStatus('mandatory')
doorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorAcknowledge.setStatus('mandatory')
doorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorId.setStatus('mandatory')
temperatureArrayTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28), )
if mibBuilder.loadTexts: temperatureArrayTable.setStatus('mandatory')
temperatureArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1), ).setIndexNames((0, "SPAGENT-MIB", "temperatureArrayIndex"))
if mibBuilder.loadTexts: temperatureArrayEntry.setStatus('mandatory')
temperatureArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayIndex.setStatus('mandatory')
temperatureArrayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDescription.setStatus('mandatory')
temperatureArrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 20, 23))).clone(namedValues=NamedValues(("temperature", 1), ("thermocouple", 20), ("arraytemp", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayType.setStatus('mandatory')
temperatureArrayDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayDegree.setStatus('mandatory')
temperatureArrayUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayUnit.setStatus('mandatory')
temperatureArrayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayStatus.setStatus('mandatory')
temperatureArrayGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayGoOffline.setStatus('mandatory')
temperatureArrayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowCritical.setStatus('mandatory')
temperatureArrayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowWarning.setStatus('mandatory')
temperatureArrayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighWarning.setStatus('mandatory')
temperatureArrayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighCritical.setStatus('mandatory')
temperatureArrayRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayRearm.setStatus('mandatory')
temperatureArrayDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayError.setStatus('mandatory')
temperatureArrayDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayNormal.setStatus('mandatory')
temperatureArrayDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayLowCritical.setStatus('mandatory')
temperatureArrayDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayLowWarning.setStatus('mandatory')
temperatureArrayDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayHighWarning.setStatus('mandatory')
temperatureArrayDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayHighCritical.setStatus('mandatory')
temperatureArrayRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayRaw.setStatus('mandatory')
temperatureArrayOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayOffset.setStatus('mandatory')
temperatureArrayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayPort.setStatus('mandatory')
temperatureArraySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySubPort.setStatus('mandatory')
temperatureArrayDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDisplayStyle.setStatus('mandatory')
temperatureArrayHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighCriticalDescription.setStatus('mandatory')
temperatureArrayLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowCriticalDescription.setStatus('mandatory')
temperatureArraySensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorNormalDescription.setStatus('mandatory')
temperatureArrayLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowWarningDescription.setStatus('mandatory')
temperatureArrayHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighWarningDescription.setStatus('mandatory')
temperatureArraySensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorErrorDescription.setStatus('mandatory')
temperatureArrayHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighCriticalColor.setStatus('mandatory')
temperatureArrayLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowCriticalColor.setStatus('mandatory')
temperatureArraySensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorNormalColor.setStatus('mandatory')
temperatureArrayLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowWarningColor.setStatus('mandatory')
temperatureArrayHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighWarningColor.setStatus('mandatory')
temperatureArraySensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorErrorColor.setStatus('mandatory')
temperatureArrayAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayAcknowledge.setStatus('mandatory')
temperatureArraySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySerialNumber.setStatus('mandatory')
temperatureArrayId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayId.setStatus('mandatory')
spNormalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,1))
spWarningStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,2))
spCriticalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,3))
spDownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,4))
spKeepAliveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,5))
spUnknownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,7))
spTemperatureStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,10)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,11)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,12)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,13)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,14)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,15)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,16)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,17)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,18)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spAnalogueStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,20)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitchStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,30)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spIRMSStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,40)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVRMSStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,50)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spWattStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,60)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,71)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,72)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,73)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,74)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,75)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,77)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,78)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtualStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,80)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSenUnknownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,51)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSenNormalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,52)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSenWarningStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,53)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSenCriticalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,54)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSenDownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,55)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperature1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,101)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperature2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,102)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperature3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,103)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperature4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,104)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperature5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,105)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperature6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,106)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperature7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,107)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperature8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,108)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray1_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,111)).setLabel("spTemperatureArray1-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray1_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,112)).setLabel("spTemperatureArray1-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray1_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,113)).setLabel("spTemperatureArray1-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray1_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,114)).setLabel("spTemperatureArray1-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray1_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,115)).setLabel("spTemperatureArray1-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray1_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,116)).setLabel("spTemperatureArray1-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray1_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,117)).setLabel("spTemperatureArray1-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray1_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,118)).setLabel("spTemperatureArray1-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray2_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,121)).setLabel("spTemperatureArray2-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray2_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,122)).setLabel("spTemperatureArray2-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray2_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,123)).setLabel("spTemperatureArray2-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray2_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,124)).setLabel("spTemperatureArray2-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray2_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,125)).setLabel("spTemperatureArray2-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray2_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,126)).setLabel("spTemperatureArray2-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray2_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,127)).setLabel("spTemperatureArray2-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray2_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,128)).setLabel("spTemperatureArray2-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray3_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,131)).setLabel("spTemperatureArray3-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray3_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,132)).setLabel("spTemperatureArray3-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray3_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,133)).setLabel("spTemperatureArray3-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray3_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,134)).setLabel("spTemperatureArray3-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray3_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,135)).setLabel("spTemperatureArray3-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray3_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,136)).setLabel("spTemperatureArray3-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray3_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,137)).setLabel("spTemperatureArray3-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray3_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,138)).setLabel("spTemperatureArray3-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray4_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,141)).setLabel("spTemperatureArray4-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray4_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,142)).setLabel("spTemperatureArray4-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray4_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,143)).setLabel("spTemperatureArray4-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray4_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,144)).setLabel("spTemperatureArray4-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray4_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,145)).setLabel("spTemperatureArray4-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray4_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,146)).setLabel("spTemperatureArray4-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray4_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,147)).setLabel("spTemperatureArray4-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray4_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,148)).setLabel("spTemperatureArray4-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray5_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,151)).setLabel("spTemperatureArray5-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray5_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,152)).setLabel("spTemperatureArray5-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray5_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,153)).setLabel("spTemperatureArray5-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray5_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,154)).setLabel("spTemperatureArray5-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray5_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,155)).setLabel("spTemperatureArray5-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray5_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,156)).setLabel("spTemperatureArray5-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray5_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,157)).setLabel("spTemperatureArray5-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray5_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,158)).setLabel("spTemperatureArray5-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray6_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,161)).setLabel("spTemperatureArray6-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray6_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,162)).setLabel("spTemperatureArray6-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray6_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,163)).setLabel("spTemperatureArray6-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray6_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,164)).setLabel("spTemperatureArray6-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray6_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,165)).setLabel("spTemperatureArray6-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray6_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,166)).setLabel("spTemperatureArray6-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray6_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,167)).setLabel("spTemperatureArray6-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray6_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,168)).setLabel("spTemperatureArray6-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray7_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,171)).setLabel("spTemperatureArray7-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray7_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,172)).setLabel("spTemperatureArray7-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray7_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,173)).setLabel("spTemperatureArray7-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray7_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,174)).setLabel("spTemperatureArray7-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray7_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,175)).setLabel("spTemperatureArray7-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray7_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,176)).setLabel("spTemperatureArray7-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray7_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,177)).setLabel("spTemperatureArray7-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray7_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,178)).setLabel("spTemperatureArray7-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray8_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,181)).setLabel("spTemperatureArray8-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray8_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,182)).setLabel("spTemperatureArray8-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray8_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,183)).setLabel("spTemperatureArray8-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray8_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,184)).setLabel("spTemperatureArray8-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray8_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,185)).setLabel("spTemperatureArray8-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray8_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,186)).setLabel("spTemperatureArray8-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray8_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,187)).setLabel("spTemperatureArray8-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spTemperatureArray8_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,188)).setLabel("spTemperatureArray8-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spAnalogue1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,201)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spAnalogue2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,202)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spAnalogue3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,203)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spAnalogue4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,204)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spAnalogue5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,205)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spAnalogue6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,206)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spAnalogue7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,207)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spAnalogue8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,208)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,301)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,302)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,303)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,304)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,305)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,306)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,307)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,308)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch9Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,309)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch10Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,310)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch11Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,311)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch12Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,312)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch13Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,313)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch14Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,314)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch15Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,315)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch16Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,316)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch17Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,317)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch18Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,318)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch19Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,319)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch20Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,320)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch21Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,321)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch22Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,322)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch23Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,323)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch24Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,324)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch25Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,325)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch26Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,326)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch27Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,327)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch28Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,328)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch29Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,329)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch30Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,330)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch31Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,331)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch32Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,332)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch33Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,333)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch34Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,334)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch35Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,335)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch36Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,336)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch37Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,337)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch38Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,338)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch39Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,339)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch40Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,340)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch41Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,341)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch42Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,342)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch43Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,343)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch44Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,344)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch45Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,345)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch46Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,346)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch47Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,347)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch48Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,348)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch49Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,349)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch50Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,350)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch51Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,351)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch52Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,352)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch53Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,353)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch54Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,354)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch55Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,355)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch56Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,356)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch57Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,357)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch58Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,358)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch59Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,359)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch60Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,360)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch61Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,361)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch62Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,362)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch63Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,363)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch64Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,364)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch65Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,365)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch66Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,366)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch67Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,367)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spSwitch68Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,368)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spIRMS1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,401)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spIRMS2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,402)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spIRMS3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,403)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spIRMS4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,404)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spIRMS5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,405)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spIRMS6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,406)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spIRMS7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,407)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spIRMS8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,408)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVRMS1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,501)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVRMS2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,502)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVRMS3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,503)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVRMS4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,504)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVRMS5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,505)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVRMS6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,506)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVRMS7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,507)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVRMS8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,508)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spEnergy1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,601)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spEnergy2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,602)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spEnergy3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,603)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spEnergy4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,604)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spEnergy5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,605)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spEnergy6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,606)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spEnergy7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,607)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spEnergy8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,608)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray1_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,711)).setLabel("spRelayArray1-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray1_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,712)).setLabel("spRelayArray1-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray1_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,713)).setLabel("spRelayArray1-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray1_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,714)).setLabel("spRelayArray1-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray1_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,715)).setLabel("spRelayArray1-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray1_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,716)).setLabel("spRelayArray1-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray1_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,717)).setLabel("spRelayArray1-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray1_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,718)).setLabel("spRelayArray1-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray2_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,721)).setLabel("spRelayArray2-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray2_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,722)).setLabel("spRelayArray2-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray2_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,723)).setLabel("spRelayArray2-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray2_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,724)).setLabel("spRelayArray2-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray2_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,725)).setLabel("spRelayArray2-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray2_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,726)).setLabel("spRelayArray2-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray2_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,727)).setLabel("spRelayArray2-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray2_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,728)).setLabel("spRelayArray2-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray3_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,731)).setLabel("spRelayArray3-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray3_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,732)).setLabel("spRelayArray3-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray3_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,733)).setLabel("spRelayArray3-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray3_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,734)).setLabel("spRelayArray3-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray3_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,735)).setLabel("spRelayArray3-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray3_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,736)).setLabel("spRelayArray3-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray3_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,737)).setLabel("spRelayArray3-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray3_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,738)).setLabel("spRelayArray3-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray4_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,741)).setLabel("spRelayArray4-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray4_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,742)).setLabel("spRelayArray4-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray4_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,743)).setLabel("spRelayArray4-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray4_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,744)).setLabel("spRelayArray4-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray4_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,745)).setLabel("spRelayArray4-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray4_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,746)).setLabel("spRelayArray4-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray4_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,747)).setLabel("spRelayArray4-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray4_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,748)).setLabel("spRelayArray4-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray5_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,751)).setLabel("spRelayArray5-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray5_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,752)).setLabel("spRelayArray5-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray5_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,753)).setLabel("spRelayArray5-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray5_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,754)).setLabel("spRelayArray5-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray5_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,755)).setLabel("spRelayArray5-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray5_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,756)).setLabel("spRelayArray5-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray5_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,757)).setLabel("spRelayArray5-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray5_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,758)).setLabel("spRelayArray5-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray6_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,761)).setLabel("spRelayArray6-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray6_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,762)).setLabel("spRelayArray6-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray6_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,763)).setLabel("spRelayArray6-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray6_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,764)).setLabel("spRelayArray6-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray6_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,765)).setLabel("spRelayArray6-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray6_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,766)).setLabel("spRelayArray6-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray6_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,767)).setLabel("spRelayArray6-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray6_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,768)).setLabel("spRelayArray6-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray7_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,771)).setLabel("spRelayArray7-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray7_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,772)).setLabel("spRelayArray7-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray7_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,773)).setLabel("spRelayArray7-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray7_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,774)).setLabel("spRelayArray7-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray7_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,775)).setLabel("spRelayArray7-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray7_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,776)).setLabel("spRelayArray7-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray7_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,777)).setLabel("spRelayArray7-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray7_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,778)).setLabel("spRelayArray7-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray8_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,781)).setLabel("spRelayArray8-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray8_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,782)).setLabel("spRelayArray8-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray8_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,783)).setLabel("spRelayArray8-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray8_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,784)).setLabel("spRelayArray8-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray8_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,785)).setLabel("spRelayArray8-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray8_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,786)).setLabel("spRelayArray8-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray8_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,787)).setLabel("spRelayArray8-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spRelayArray8_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,788)).setLabel("spRelayArray8-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,801)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,802)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,803)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,804)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,805)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,806)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,807)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,808)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual9Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,809)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual10Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,810)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual11Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,811)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual12Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,812)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual13Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,813)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual14Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,814)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual15Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,815)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual16Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,816)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual17Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,817)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual18Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,818)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual19Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,819)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spVirtual20Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,820)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
spCustomStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,1000)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"), ("SPAGENT-MIB", "spSensorType"), ("SPAGENT-MIB", "spSensorStatusName"), ("SPAGENT-MIB", "spSensorSubIndex"), ("SPAGENT-MIB", "spBoardIndex"), ("SPAGENT-MIB", "spBoardDescription"), ("SPAGENT-MIB", "spEventTimeStamp"), ("SPAGENT-MIB", "spEventClassNumber"), ("SPAGENT-MIB", "spEventClassName"))
mibBuilder.exportSymbols("SPAGENT-MIB", temperatureSensorSensorNormalColor=temperatureSensorSensorNormalColor, sensorProbeTemperatureArrayPort8DegreeType=sensorProbeTemperatureArrayPort8DegreeType, commonSensorLowWarningDescription=commonSensorLowWarningDescription, relaySensorDescription=relaySensorDescription, sirenSubPort=sirenSubPort, sensorProbeDrycontactArrayPort1Number=sensorProbeDrycontactArrayPort1Number, humiditySensorErrorDescription=humiditySensorErrorDescription, spTemperatureArray8Status=spTemperatureArray8Status, sensorProbeThermostatTemperatureArrayPort6LowLimitAction1=sensorProbeThermostatTemperatureArrayPort6LowLimitAction1, deviceDryContactStatus=deviceDryContactStatus, sensorProbePTZRotateAbsolute=sensorProbePTZRotateAbsolute, sensorProbeTemperatureArrayPort5Description=sensorProbeTemperatureArrayPort5Description, sensorRelayOffColor=sensorRelayOffColor, fuelLowCriticalDescription=fuelLowCriticalDescription, sensorProbeTypePCF8574XRelayName=sensorProbeTypePCF8574XRelayName, sensorProbeRelayArrayPort3Description=sensorProbeRelayArrayPort3Description, sensorProbeUseCamera=sensorProbeUseCamera, commonSensorSensorErrorDescription=commonSensorSensorErrorDescription, acVoltageCriticalDescription=acVoltageCriticalDescription, current4to20mADelayHighCritical=current4to20mADelayHighCritical, spTemperature2Status=spTemperature2Status, sensorProbeSoundDetectorContTimeHighWarning=sensorProbeSoundDetectorContTimeHighWarning, sensorProbeTemperatureArrayPort3ContTimeNormal=sensorProbeTemperatureArrayPort3ContTimeNormal, sensorProbeTemperatureArrayPort6LowCritical=sensorProbeTemperatureArrayPort6LowCritical, airflowSensorHighWarningColor=airflowSensorHighWarningColor, humidityHighWarningColor=humidityHighWarningColor, waterRopeStatus=waterRopeStatus, temperatureSensorDisplayStyle=temperatureSensorDisplayStyle, humidityPort=humidityPort, sensorProbeGetCommunity=sensorProbeGetCommunity, sensorProbeThermostatOnline=sensorProbeThermostatOnline, sensorProbeNoCameraContTimeNormal=sensorProbeNoCameraContTimeNormal, humidityDelayError=humidityDelayError, current4to20mAPort=current4to20mAPort, airflowDelayNormal=airflowDelayNormal, spTemperatureArray1_3Status=spTemperatureArray1_3Status, sensor4to20mAHighCriticalColor=sensor4to20mAHighCriticalColor, commonLowWarningColor=commonLowWarningColor, sensorProbeEnergyRelayOnPort=sensorProbeEnergyRelayOnPort, sensorProbeSubnetMask=sensorProbeSubnetMask, sensorHumidityLowCriticalDesc=sensorHumidityLowCriticalDesc, sensor4to20mASensorAcknowledge=sensor4to20mASensorAcknowledge, sensorTemperatureArrayTable=sensorTemperatureArrayTable, sensorProbeDrycontactArrayPort1ManualOutputAction=sensorProbeDrycontactArrayPort1ManualOutputAction, cfgVPNPassword=cfgVPNPassword, sensorDoorValue=sensorDoorValue, spVirtual14Status=spVirtual14Status, sensorFuelHighWarningDesc=sensorFuelHighWarningDesc, spTemperatureArray3_4Status=spTemperatureArray3_4Status, sensorProbeTemperatureArrayPort4GoOnline=sensorProbeTemperatureArrayPort4GoOnline, dcVoltageNormalColor=dcVoltageNormalColor, sensorProbeHumidityStatus=sensorProbeHumidityStatus, sensorProbeTemperatureArrayPort3=sensorProbeTemperatureArrayPort3, spSwitch54Status=spSwitch54Status, sensorProbeRelayArrayPort7ControlMode=sensorProbeRelayArrayPort7ControlMode, sensorProbeVirtualAnalogSensorEntry=sensorProbeVirtualAnalogSensorEntry, sensorProbeVirtualSwitchDescriptionNormal=sensorProbeVirtualSwitchDescriptionNormal, humiditySensorRaw=humiditySensorRaw, sensorDryContactType=sensorDryContactType, powerDelayError=powerDelayError, sensor4to20mADeviceIndex=sensor4to20mADeviceIndex, sensorProbeTemperatureArrayPort1LowCritical=sensorProbeTemperatureArrayPort1LowCritical, sensorProbeVirtualAnalogOnline=sensorProbeVirtualAnalogOnline, motionAcknowledge=motionAcknowledge, sensorProbeIRMSContTimeHighCritical=sensorProbeIRMSContTimeHighCritical, virtualSwitchSensorDescription=virtualSwitchSensorDescription, temperatureArraySensorNormalColor=temperatureArraySensorNormalColor, sensorProbeTemperatureArrayPort3ContTimeLowCritical=sensorProbeTemperatureArrayPort3ContTimeLowCritical, sensorProbeDrycontactArrayPort1ContTimeNormal=sensorProbeDrycontactArrayPort1ContTimeNormal, sensorProbeThermostatTemperatureArrayPort2HighLimit1=sensorProbeThermostatTemperatureArrayPort2HighLimit1, sensorDryContactId=sensorDryContactId, sensorFuelDelayHighCritical=sensorFuelDelayHighCritical, spIRMS5Status=spIRMS5Status, motionSensorStatus=motionSensorStatus, current4to20mASensorDisplayStyle=current4to20mASensorDisplayStyle, fuelGoOffline=fuelGoOffline, virtualAnalogSensorRearm=virtualAnalogSensorRearm, fuelSensorAmountBaseValue=fuelSensorAmountBaseValue, spVRMS4Status=spVRMS4Status, temperatureHighCriticalColor=temperatureHighCriticalColor, sensorMotionAcknowledge=sensorMotionAcknowledge, airflowSensorAcknowledge=airflowSensorAcknowledge, sensorProbeSoundDetectorIndex=sensorProbeSoundDetectorIndex, temperatureArrayHighCriticalDescription=temperatureArrayHighCriticalDescription, virtualAnalogSensorOnline=virtualAnalogSensorOnline, fuelLowWarning=fuelLowWarning, dryContactSensorCriticalDesc=dryContactSensorCriticalDesc, tankSenderIndex=tankSenderIndex, sensorProbeVRMSPercent=sensorProbeVRMSPercent, acVoltageGoOffline=acVoltageGoOffline, sensorAirflowDeviceIndex=sensorAirflowDeviceIndex, securityGoOffline=securityGoOffline, sensorProbeTempURL=sensorProbeTempURL, sensorDoorEntry=sensorDoorEntry, sensorProbeHumiditySirenCycleTime=sensorProbeHumiditySirenCycleTime, sensorProbeTemperatureArrayPort7Status=sensorProbeTemperatureArrayPort7Status, spSensorAliveHigh=spSensorAliveHigh, spRelayArray6_2Status=spRelayArray6_2Status, sensorProbeMailFrom=sensorProbeMailFrom, cfgSystemLocation=cfgSystemLocation, spSwitch34Status=spSwitch34Status, sensorProbeHumidityDescription=sensorProbeHumidityDescription, tankSenderSensorLowCriticalColor=tankSenderSensorLowCriticalColor, sensorProbeClearSysLog=sensorProbeClearSysLog, sensorAirflowSensorErrorDesc=sensorAirflowSensorErrorDesc, fuelSensorDelayHighWarning=fuelSensorDelayHighWarning, spRelayArray2_4Status=spRelayArray2_4Status, sensorProbeDrycontactArrayPort3Online=sensorProbeDrycontactArrayPort3Online, sensorProbeRelayArrayPort1Online=sensorProbeRelayArrayPort1Online, sensorProbeTemperatureArrayPort5HighWarning=sensorProbeTemperatureArrayPort5HighWarning, sensorTemperatureArrayHighCriticalColor=sensorTemperatureArrayHighCriticalColor, sensorFuelDelayNormal=sensorFuelDelayNormal, current4to20mARearm=current4to20mARearm, sensorProbeRelayArrayPort3RelayDescOff=sensorProbeRelayArrayPort3RelayDescOff, sensorProbeIRMSContTimeSensorError=sensorProbeIRMSContTimeSensorError, doorIndex=doorIndex, temperatureStatus=temperatureStatus, sensorProbeDrycontactArrayPort7Direction=sensorProbeDrycontactArrayPort7Direction, sensorDCvoltageDelayNormal=sensorDCvoltageDelayNormal, tankSenderSensorGoOffline=tankSenderSensorGoOffline, sensorDryContactPort9GoOnline=sensorDryContactPort9GoOnline, virtualAnalogSensorIndex=virtualAnalogSensorIndex, fuelDelayNormal=fuelDelayNormal, sensorSirenId=sensorSirenId, sensorPowerLowCriticalColor=sensorPowerLowCriticalColor, sensorDryContactIndex=sensorDryContactIndex, sensorProbeHumidityLowVoltage=sensorProbeHumidityLowVoltage, spRelayArray5_7Status=spRelayArray5_7Status, sensorACvoltageCriticalDesc=sensorACvoltageCriticalDesc, sensorPowerDelayError=sensorPowerDelayError, sensorHumidityDelayLowCritical=sensorHumidityDelayLowCritical, sensorProbeThermostatTemperatureArrayPort8Index=sensorProbeThermostatTemperatureArrayPort8Index, relayAcknowledge=relayAcknowledge, acVoltageSensorTable=acVoltageSensorTable, sensorProbeRelayArrayPort8GoOnline=sensorProbeRelayArrayPort8GoOnline, airflowSensorDelayError=airflowSensorDelayError, relaySensorControlMode=relaySensorControlMode, spSwitch47Status=spSwitch47Status, current4to20mASensorLowWarningColor=current4to20mASensorLowWarningColor, sensorProbeTemperatureArrayPort5DatacollectType=sensorProbeTemperatureArrayPort5DatacollectType, temperatureArraySensorErrorDescription=temperatureArraySensorErrorDescription, sensorProbeRelayArrayPort3RelayAction=sensorProbeRelayArrayPort3RelayAction, sensorProbeDrycontactArrayPort8ManualOutputAction=sensorProbeDrycontactArrayPort8ManualOutputAction, airflowSensorTable=airflowSensorTable, thermostatSensorLowCritical=thermostatSensorLowCritical, sensorProbeSoftMotionSensorIndex=sensorProbeSoftMotionSensorIndex, thermostatSensorHighCritical=thermostatSensorHighCritical, thermostatSensorDelayError=thermostatSensorDelayError, spTemperatureArray3_1Status=spTemperatureArray3_1Status, smokeId=smokeId, relayEntry=relayEntry, powerHighCritical=powerHighCritical, sensorHumidityDelayNormal=sensorHumidityDelayNormal, spAnalogue5Status=spAnalogue5Status, sensorProbeTemperatureArrayPort7Number=sensorProbeTemperatureArrayPort7Number, sensorProbeTemperatureArrayPort2GoOnline=sensorProbeTemperatureArrayPort2GoOnline, sensorProbeTemperatureArrayPort3Description=sensorProbeTemperatureArrayPort3Description, sensorFuelSensorErrorDesc=sensorFuelSensorErrorDesc, sensorDryContactPort3GoOnline=sensorDryContactPort3GoOnline, sensorProbeTemperatureArrayPort7=sensorProbeTemperatureArrayPort7, sensorWaterIndex=sensorWaterIndex, temperatureSerialNumber=temperatureSerialNumber, sensorProbeTemperatureArrayPort4ContTimeHighCritical=sensorProbeTemperatureArrayPort4ContTimeHighCritical, sensorProbeSoundDetectorOnline=sensorProbeSoundDetectorOnline, sensorACvoltageEntry=sensorACvoltageEntry, fuelSensorNormalDesc=fuelSensorNormalDesc, powerPort=powerPort, sensorProbeAdcCalibratePort=sensorProbeAdcCalibratePort, securityId=securityId, sensorACvoltageDeviceIndex=sensorACvoltageDeviceIndex, sensorProbeTemperatureArrayPort5Index=sensorProbeTemperatureArrayPort5Index, commonHighCriticalDescription=commonHighCriticalDescription, fuelTable=fuelTable, sensorProbeTemperatureArrayPort8GoOnline=sensorProbeTemperatureArrayPort8GoOnline, devicePowerMeterWorstSensotStatus=devicePowerMeterWorstSensotStatus, sensorTemperatureGoOffline=sensorTemperatureGoOffline, sensorFuelDelayLowCritical=sensorFuelDelayLowCritical, sensorPowerSensorErrorColor=sensorPowerSensorErrorColor, sensorSirenAcknowledge=sensorSirenAcknowledge, sensorProbeThermostatTemperatureArrayPort8Description=sensorProbeThermostatTemperatureArrayPort8Description, thermostatSensorLowWarningDesc=thermostatSensorLowWarningDesc, commonSensorOnDescription=commonSensorOnDescription, thermostatSensorSubPort=thermostatSensorSubPort, sensorProbeHumidityContTimeHighWarning=sensorProbeHumidityContTimeHighWarning, sirenStatus=sirenStatus, dcVoltageHighWarningDescription=dcVoltageHighWarningDescription, sensorProbeVRMSSensorTable=sensorProbeVRMSSensorTable, thermostatSensorDelayHighWarning=thermostatSensorDelayHighWarning, sensorProbeIRMSRaw=sensorProbeIRMSRaw, sensorProbeSwitchSirenActiveStatus=sensorProbeSwitchSirenActiveStatus, sensorProbeIRMSDelayNormal=sensorProbeIRMSDelayNormal, spSwitch35Status=spSwitch35Status, spTemperatureArray1_5Status=spTemperatureArray1_5Status, sensorProbeHumidityAtoDAmountMaxVoltage=sensorProbeHumidityAtoDAmountMaxVoltage, notifications=notifications, sensorThermostatHighCritical=sensorThermostatHighCritical, actionName=actionName, spTemperatureArray5_6Status=spTemperatureArray5_6Status, powerSensorSubPort=powerSensorSubPort, sensorProbeIRMSSensorEntry=sensorProbeIRMSSensorEntry, sensorProbeMailCustom=sensorProbeMailCustom, spSensorDescription=spSensorDescription, sensorProbeTemperatureArrayPort2ContTimeLowWarning=sensorProbeTemperatureArrayPort2ContTimeLowWarning, sirenSensorPort=sirenSensorPort, sensorProbeEnergyContTimeSensorError=sensorProbeEnergyContTimeSensorError, securitySensorNormalColor=securitySensorNormalColor, thermostatSensorDelayHighCritical=thermostatSensorDelayHighCritical, spTemperatureArray5_7Status=spTemperatureArray5_7Status, sensorProbeVRMSSirenAction=sensorProbeVRMSSirenAction, humidityHighWarningDescription=humidityHighWarningDescription, sensorProbeTemperatureArrayPort7DatacollectType=sensorProbeTemperatureArrayPort7DatacollectType, sensorProbeSoftMotionPercentSensitivity=sensorProbeSoftMotionPercentSensitivity, sensorProbeTypeSecurityName=sensorProbeTypeSecurityName, current4to20mASensorValue=current4to20mASensorValue, sensorProbeTemperatureArrayPort8=sensorProbeTemperatureArrayPort8, tankSenderSensorHighWarningColor=tankSenderSensorHighWarningColor, commonType=commonType, sensorProbeTempRelayOnPort=sensorProbeTempRelayOnPort, sensorProbeRelayArrayPort2OpenURL=sensorProbeRelayArrayPort2OpenURL, sensorThermostatSensorErrorColor=sensorThermostatSensorErrorColor, sensorProbeTempStatus=sensorProbeTempStatus, sensorPowerGoOffline=sensorPowerGoOffline, sensorProbePowerMeter1phDelayBetweenCommand=sensorProbePowerMeter1phDelayBetweenCommand, sensorProbeDrycontactArrayPort6ControlMode=sensorProbeDrycontactArrayPort6ControlMode, sensorProbeTempSirenCycleTime=sensorProbeTempSirenCycleTime, sensorDCvoltageStatus=sensorDCvoltageStatus, sensorRelayIndex=sensorRelayIndex, virtualAnalogSensorContTimeNormal=virtualAnalogSensorContTimeNormal, sensorTemperatureArrayDelayNormal=sensorTemperatureArrayDelayNormal, cfgGSMConnectionMode=cfgGSMConnectionMode, sensorProbeMailCC=sensorProbeMailCC, sensorProbeTemperatureArrayPort2LowWarning=sensorProbeTemperatureArrayPort2LowWarning, sensorProbeDrycontactArrayPort3Entry=sensorProbeDrycontactArrayPort3Entry, commonSensorValue=commonSensorValue, powerSensorDescription=powerSensorDescription, cfgWEBSecurePort=cfgWEBSecurePort, tankSenderDelayHighWarning=tankSenderDelayHighWarning, spVRMS5Status=spVRMS5Status, sensorDryContactPort10GoOnline=sensorDryContactPort10GoOnline, sensorProbeJavaTimeOut=sensorProbeJavaTimeOut, tankSenderDelayLowCritical=tankSenderDelayLowCritical, sensorProbeDrycontactArrayPort1ContTimeCritical=sensorProbeDrycontactArrayPort1ContTimeCritical, temperatureArraySerialNumber=temperatureArraySerialNumber, virtualAnalogSensorId=virtualAnalogSensorId, sensors=sensors, sensorProbeHumidityLowWarning=sensorProbeHumidityLowWarning, waterNormalDescription=waterNormalDescription, sensorProbeSoundDetectorMicBoost=sensorProbeSoundDetectorMicBoost, sensorDryContactControlMode=sensorDryContactControlMode, acVoltageSensorId=acVoltageSensorId, deviceTable=deviceTable, dcVoltageSensorHighWarningColor=dcVoltageSensorHighWarningColor, dryContactSensorTable=dryContactSensorTable, sensorProbeDrycontactArrayPort6ManualOutputAction=sensorProbeDrycontactArrayPort6ManualOutputAction)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeRelayArrayPort7RelayDescOn=sensorProbeRelayArrayPort7RelayDescOn, sensorProbeHumidityOnline=sensorProbeHumidityOnline, sensorProbeNoCameraContTimeHighCritical=sensorProbeNoCameraContTimeHighCritical, sensorPowerMaxValue=sensorPowerMaxValue, sensorProbeRelayArrayPort4RelayCycleTime=sensorProbeRelayArrayPort4RelayCycleTime, sensorProbeTemperatureArrayPort7ContTimeLowWarning=sensorProbeTemperatureArrayPort7ContTimeLowWarning, powerSensorHighWarningColor=powerSensorHighWarningColor, smokeNormalDescription=smokeNormalDescription, current4to20mARaw=current4to20mARaw, waterGoOffline=waterGoOffline, sensorProbeTemperatureArrayPort8Index=sensorProbeTemperatureArrayPort8Index, acVoltageTable=acVoltageTable, sensorIntelligentPort5GoOnline=sensorIntelligentPort5GoOnline, sensorTankSenderLowWarningDesc=sensorTankSenderLowWarningDesc, temperatureSensorSensorErrorDesc=temperatureSensorSensorErrorDesc, securitySensorSubPort=securitySensorSubPort, doorUnlockPeriod=doorUnlockPeriod, current4to20mASensorDelayNormal=current4to20mASensorDelayNormal, deviceLicenseVrtCount=deviceLicenseVrtCount, sensorProbeSoundDetectorOpenURL=sensorProbeSoundDetectorOpenURL, airflowHighCriticalColor=airflowHighCriticalColor, deviceLicenseExpUsed=deviceLicenseExpUsed, dcVoltageSensorHighCriticalColor=dcVoltageSensorHighCriticalColor, commonValueFormatFloat=commonValueFormatFloat, humiditySensorLowCritical=humiditySensorLowCritical, waterRopeSensorEntry=waterRopeSensorEntry, sensorFuelIndex=sensorFuelIndex, humidityLowCriticalDescription=humidityLowCriticalDescription, sensorProbeVRMSContTimeSensorError=sensorProbeVRMSContTimeSensorError, securityTable=securityTable, sensorProbeTemperatureArrayPort4DegreeRaw=sensorProbeTemperatureArrayPort4DegreeRaw, waterRopeSensorCriticalDesc=waterRopeSensorCriticalDesc, airflowDescription=airflowDescription, fuelSensorDelayNormal=fuelSensorDelayNormal, humidityRaw=humidityRaw, fuelSensorSensorErrorColor=fuelSensorSensorErrorColor, spRelayArray4_7Status=spRelayArray4_7Status, tankSenderNormalDescription=tankSenderNormalDescription, sensorProbeVRMSRaw=sensorProbeVRMSRaw, sirenSensorId=sirenSensorId, sensorProbeEnergySirenOnPort=sensorProbeEnergySirenOnPort, temperatureHighWarningDescription=temperatureHighWarningDescription, sensorProbeRelayArrayPort5=sensorProbeRelayArrayPort5, sensorProbeIRMSRelayActiveStatus=sensorProbeIRMSRelayActiveStatus, spVirtual3Status=spVirtual3Status, sensorProbeThermostatTemperatureArrayPort4LowLimit2=sensorProbeThermostatTemperatureArrayPort4LowLimit2, deviceLicenseTable=deviceLicenseTable, dcVoltageSensorNormalDesc=dcVoltageSensorNormalDesc, commonUnit=commonUnit, sensorProbeIRMSContTimeHighWarning=sensorProbeIRMSContTimeHighWarning, sensorProbeDrycontactArrayPort4Direction=sensorProbeDrycontactArrayPort4Direction, devicePowerMeterCountTimeoutPacket=devicePowerMeterCountTimeoutPacket, sensorProbeVirtualAnalogHighCritical=sensorProbeVirtualAnalogHighCritical, dryContactSensorCriticalColor=dryContactSensorCriticalColor, sensorTankSenderNormalDesc=sensorTankSenderNormalDesc, sensorProbeRelayArrayPort6OpenURL=sensorProbeRelayArrayPort6OpenURL, sensorWaterPort=sensorWaterPort, temperatureSensorLowWarningDesc=temperatureSensorLowWarningDesc, sensorProbeEnergyRelayActiveStatus=sensorProbeEnergyRelayActiveStatus, sensorSmokeIndex=sensorSmokeIndex, sensorProbeDrycontactArrayPort3OpenURL=sensorProbeDrycontactArrayPort3OpenURL, spSwitch61Status=spSwitch61Status, dcVoltageSensorDelayHighWarning=dcVoltageSensorDelayHighWarning, current4to20mASensorRaw=current4to20mASensorRaw, tankSenderHighCritical=tankSenderHighCritical, sensorWaterRopeNormalDesc=sensorWaterRopeNormalDesc, temperatureSensorNormalDesc=temperatureSensorNormalDesc, sensorProbeTempDescription=sensorProbeTempDescription, securityProbe=securityProbe, dryContactSensorGoOffline=dryContactSensorGoOffline, sensorPort=sensorPort, sensorProbeHumidityHighWarning=sensorProbeHumidityHighWarning, powerValue=powerValue, sensorHumidityRearm=sensorHumidityRearm, dcVoltageSensorLowCriticalColor=dcVoltageSensorLowCriticalColor, airflowSensorHighWarning=airflowSensorHighWarning, deviceAccessDescription=deviceAccessDescription, sensorFuelHighCritical=sensorFuelHighCritical, spBoardIndex=spBoardIndex, sensorTemperatureArrayHighWarning=sensorTemperatureArrayHighWarning, sensorProbeRelayArrayPort3GoOnline=sensorProbeRelayArrayPort3GoOnline, thermostatSensorIndex=thermostatSensorIndex, sensorProbeThermostatTemperatureArrayPort7NormalAction1=sensorProbeThermostatTemperatureArrayPort7NormalAction1, current4to20mASensorDeviceIndex=current4to20mASensorDeviceIndex, spTemperatureArray6_6Status=spTemperatureArray6_6Status, spSwitch62Status=spSwitch62Status, temperatureArraySensorNormalDescription=temperatureArraySensorNormalDescription, fuelSensorHighCriticalColor=fuelSensorHighCriticalColor, cfgSMTPPort=cfgSMTPPort, sensorProbeRelayArrayPort8RelayCycleTime=sensorProbeRelayArrayPort8RelayCycleTime, sensorDryContactPort16GoOnline=sensorDryContactPort16GoOnline, sensorSubPort=sensorSubPort, spSwitch6Status=spSwitch6Status, sensorProbeThermostatTemperatureArrayPort1NormalAction2=sensorProbeThermostatTemperatureArrayPort1NormalAction2, sensorProbeThermostatValue=sensorProbeThermostatValue, sensorProbeNoCameraSensorNumber=sensorProbeNoCameraSensorNumber, temperatureSensorDegree=temperatureSensorDegree, tankSenderLowCriticalColor=tankSenderLowCriticalColor, current4to20mALowWarningDescription=current4to20mALowWarningDescription, humiditySensorEntry=humiditySensorEntry, sensorProbeTemperatureArrayPort5Offset=sensorProbeTemperatureArrayPort5Offset, sensorTemperatureArrayHighWarningColor=sensorTemperatureArrayHighWarningColor, temperatureSensorDelayLowWarning=temperatureSensorDelayLowWarning, sensorProbeAutoSense=sensorProbeAutoSense, spVirtual4Status=spVirtual4Status, tankSenderSensorSensorErrorColor=tankSenderSensorSensorErrorColor, temperatureArrayType=temperatureArrayType, airflowPort=airflowPort, sensorHumidityDescription=sensorHumidityDescription, sensorProbeTemperatureArrayPort6Entry=sensorProbeTemperatureArrayPort6Entry, sensorProbeRelayArrayPort6Number=sensorProbeRelayArrayPort6Number, dryContactSensorOffDesc=dryContactSensorOffDesc, sensorProbeRelayArrayPort1Status=sensorProbeRelayArrayPort1Status, sensorProbeVRMSContTimeHighWarning=sensorProbeVRMSContTimeHighWarning, tankSenderSensorLowWarning=tankSenderSensorLowWarning, humiditySensorErrorColor=humiditySensorErrorColor, cfgSNMPv3UserName=cfgSNMPv3UserName, motionId=motionId, sensorProbeVRMSRelayOnPort=sensorProbeVRMSRelayOnPort, sensorProbeTemperatureArrayPort6URL=sensorProbeTemperatureArrayPort6URL, spSensorStatus=spSensorStatus, sensorProbeTemperatureArrayPort3Number=sensorProbeTemperatureArrayPort3Number, smokeGoOffline=smokeGoOffline, sensorProbeTempLowCritical=sensorProbeTempLowCritical, smokeSensorDeviceIndex=smokeSensorDeviceIndex, acVoltageIndex=acVoltageIndex, sensorProbeRelayArrayPort1NormalState=sensorProbeRelayArrayPort1NormalState, commonSensorLowCriticalDescription=commonSensorLowCriticalDescription, thermostatSensorRearm=thermostatSensorRearm, sensorProbeSwitchManualRelayAction=sensorProbeSwitchManualRelayAction, sensorProbeRelayArrayPort3Online=sensorProbeRelayArrayPort3Online, sensorAirflowDelayLowWarning=sensorAirflowDelayLowWarning, sensorWaterCriticalDesc=sensorWaterCriticalDesc, sensor4to20mAGoOffline=sensor4to20mAGoOffline, sensorProbeVirtualAnalogSensor=sensorProbeVirtualAnalogSensor, sensorProbeTemperatureArrayPort7ContTimeHighCritical=sensorProbeTemperatureArrayPort7ContTimeHighCritical, powerSensorNormalColor=powerSensorNormalColor, spTemperatureArray4_1Status=spTemperatureArray4_1Status, licVPN=licVPN, sensorTankSenderEntry=sensorTankSenderEntry, spTemperatureArray2_5Status=spTemperatureArray2_5Status, sensorProbeSoundDetectorRecordingSource=sensorProbeSoundDetectorRecordingSource, sensorDCvoltageNormalDesc=sensorDCvoltageNormalDesc, sensorProbeDrycontactArrayPort2Entry=sensorProbeDrycontactArrayPort2Entry, sirenSensorOnColor=sirenSensorOnColor, sensorProbeRelayArrayPort4OpenURL=sensorProbeRelayArrayPort4OpenURL, sensorProbeHumidityHighCritical=sensorProbeHumidityHighCritical, cfgVPNEnabled=cfgVPNEnabled, sensorProbeTemperatureArrayPort7Rearm=sensorProbeTemperatureArrayPort7Rearm, sensorProbeThermostatTemperatureArrayPort2LowLimitAction2=sensorProbeThermostatTemperatureArrayPort2LowLimitAction2, sensorHighWarningDescription=sensorHighWarningDescription, sensorProbeAllowIPChange=sensorProbeAllowIPChange, sensorProbeTemperatureArrayPort4ContTimeNormal=sensorProbeTemperatureArrayPort4ContTimeNormal, temperatureLowCriticalDescription=temperatureLowCriticalDescription, current4to20mASensorLowWarningDesc=current4to20mASensorLowWarningDesc, sensorProbeThermostatIndex=sensorProbeThermostatIndex, sensorProbeDrycontactArrayPort6ContTimeCritical=sensorProbeDrycontactArrayPort6ContTimeCritical, sensorProbeTempSendTrap=sensorProbeTempSendTrap, sensorProbeIRMSSirenDelayAlarm=sensorProbeIRMSSirenDelayAlarm, sensorACvoltageTable=sensorACvoltageTable, securitySensorAcknowledge=securitySensorAcknowledge, tankSenderSensorHighWarningDesc=tankSenderSensorHighWarningDesc, doorSensorAcknowledge=doorSensorAcknowledge, spSensorSubIndex=spSensorSubIndex, sensorSecurityNormalDesc=sensorSecurityNormalDesc, dcVoltageValue=dcVoltageValue, cfgGSMLogin=cfgGSMLogin, sensorProbeTemperatureArrayPort2Table=sensorProbeTemperatureArrayPort2Table, sensorProbeDrycontactArrayPort7Index=sensorProbeDrycontactArrayPort7Index, temperatureArraySensorDescription=temperatureArraySensorDescription, sensorFuelHighCriticalDesc=sensorFuelHighCriticalDesc, airflowSensorLowCriticalDesc=airflowSensorLowCriticalDesc, spVRMS7Status=spVRMS7Status, sensorProbeSwitchManualRelayCycleTime=sensorProbeSwitchManualRelayCycleTime, sensorProbeCameraServerEntry=sensorProbeCameraServerEntry, sensorTankSenderDeviceIndex=sensorTankSenderDeviceIndex, dryContactSensorStatus=dryContactSensorStatus, dcVoltageSensorLowWarningDesc=dcVoltageSensorLowWarningDesc, airflowId=airflowId, spTemperatureArray2_8Status=spTemperatureArray2_8Status, current4to20mAGoOffline=current4to20mAGoOffline, spSwitch12Status=spSwitch12Status, sensorAirflowId=sensorAirflowId, humiditySensorTable=humiditySensorTable, sensorProbeTemperatureArrayPort1Calendar=sensorProbeTemperatureArrayPort1Calendar, spTemperatureArray2_4Status=spTemperatureArray2_4Status, sensorProbeRelayArrayPort4ManualRelayAction=sensorProbeRelayArrayPort4ManualRelayAction, sensorProbeTempRelayCycleTime=sensorProbeTempRelayCycleTime, sensorProbeTemperatureArrayPort3Index=sensorProbeTemperatureArrayPort3Index, sensorHumidityStatus=sensorHumidityStatus, deviceAccessTable=deviceAccessTable, commonSensorOffColor=commonSensorOffColor, tankSenderUnit=tankSenderUnit, waterRopeGoOffline=waterRopeGoOffline, sensorProbeRelayArrayPort6NormalState=sensorProbeRelayArrayPort6NormalState, humiditySensorSensorErrorColor=humiditySensorSensorErrorColor, temperatureArrayDelayHighWarning=temperatureArrayDelayHighWarning, spIRMS8Status=spIRMS8Status, dcVoltageId=dcVoltageId, humidityDelayLowCritical=humidityDelayLowCritical, dcVoltageRearm=dcVoltageRearm, sensorProbeTempSirenOnPort=sensorProbeTempSirenOnPort, sensorProbeTemperatureArrayPort2Index=sensorProbeTemperatureArrayPort2Index, sensorProbeCameraServerTable=sensorProbeCameraServerTable, sensorProbeIRMSSensor=sensorProbeIRMSSensor, sensorProbeEnergyRelayCycleTime=sensorProbeEnergyRelayCycleTime, sensorProbeThermostatTemperatureArrayPort1NormalAction1=sensorProbeThermostatTemperatureArrayPort1NormalAction1, motionSensorDescription=motionSensorDescription, licenseSNMPv3=licenseSNMPv3, sensorFuelDelayLowWarning=sensorFuelDelayLowWarning, spSwitch60Status=spSwitch60Status, powerSensorLowCriticalDesc=powerSensorLowCriticalDesc, spTemperatureArray1_2Status=spTemperatureArray1_2Status, deviceIntelligentTable=deviceIntelligentTable, commonSensorStatus=commonSensorStatus, sensorProbeTemperatureArrayPort2ContTimeLowCritical=sensorProbeTemperatureArrayPort2ContTimeLowCritical, dcVoltageSensorTable=dcVoltageSensorTable, cfgSNMPv3Mode=cfgSNMPv3Mode, sensorHumidityDelayLowWarning=sensorHumidityDelayLowWarning, sensorProbePowerMeter3phDelayBetweenMeter=sensorProbePowerMeter3phDelayBetweenMeter, sensorIntelligentPort8GoOnline=sensorIntelligentPort8GoOnline, sensorProbeTemperatureArrayPort3ContTimeHighWarning=sensorProbeTemperatureArrayPort3ContTimeHighWarning, temperatureTable=temperatureTable, sensorProbeIRMSDelayError=sensorProbeIRMSDelayError, sensorPowerPort=sensorPowerPort, sirenEntry=sirenEntry, spWarningStatus=spWarningStatus, tankSenderSensorHighCriticalDesc=tankSenderSensorHighCriticalDesc, humidityHighWarning=humidityHighWarning, sensorProbeIRMSSensorNumber=sensorProbeIRMSSensorNumber, virtualSwitchSensorCalendar=virtualSwitchSensorCalendar, sensorProbeHumidityAtoDAmountBaseVoltage=sensorProbeHumidityAtoDAmountBaseVoltage, spTemperatureArray6_1Status=spTemperatureArray6_1Status, waterRopeSensorAcknowledge=waterRopeSensorAcknowledge, sensorProbeDrycontactArrayPort7Number=sensorProbeDrycontactArrayPort7Number, spStatus=spStatus, dcVoltageSensorErrorDescription=dcVoltageSensorErrorDescription, fuelDescription=fuelDescription, spTemperatureArray8_3Status=spTemperatureArray8_3Status, sensorProbeTemperatureArrayPort4OpenURL=sensorProbeTemperatureArrayPort4OpenURL, sensorProbeTemperatureArrayPort7GoOnline=sensorProbeTemperatureArrayPort7GoOnline, powerSensorInterval=powerSensorInterval, powerSensorHighCriticalColor=powerSensorHighCriticalColor, temperatureDelayHighWarning=temperatureDelayHighWarning, airflowSensorLowWarningDesc=airflowSensorLowWarningDesc, sensorHumidityDeviceIndex=sensorHumidityDeviceIndex, sensorProbeDrycontactArrayPort8NormalState=sensorProbeDrycontactArrayPort8NormalState, sensorProbeSMTPPassword=sensorProbeSMTPPassword, sensorAirflowAcknowledge=sensorAirflowAcknowledge, sensorProbeVRMSRearm=sensorProbeVRMSRearm, sensorPowerLowWarning=sensorPowerLowWarning, temperatureDegree=temperatureDegree, spRelayArray1_1Status=spRelayArray1_1Status, sensorProbeRelayArrayPort1Index=sensorProbeRelayArrayPort1Index)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeDrycontactArrayPort5Entry=sensorProbeDrycontactArrayPort5Entry, sensorProbeTypeSoundName=sensorProbeTypeSoundName, commonOffColor=commonOffColor, current4to20mADelayHighWarning=current4to20mADelayHighWarning, spRelayArray4_4Status=spRelayArray4_4Status, sensorAirflowDelayError=sensorAirflowDelayError, sensorProbeWattHoursPercent=sensorProbeWattHoursPercent, sensorProbeTempOnline=sensorProbeTempOnline, sensorProbeRelayArrayPort2GoOnline=sensorProbeRelayArrayPort2GoOnline, spTemperatureArray7_8Status=spTemperatureArray7_8Status, relaySensorOffDesc=relaySensorOffDesc, cfgGSMRetry=cfgGSMRetry, dryContactSensorDirection=dryContactSensorDirection, spRelayArray1_6Status=spRelayArray1_6Status, spTemperatureArray1_1Status=spTemperatureArray1_1Status, deviceLicenseIndex=deviceLicenseIndex, waterRopeLeakLocation=waterRopeLeakLocation, temperatureArraySensorDelayNormal=temperatureArraySensorDelayNormal, sensorProbeThermostatHighLimitAction2=sensorProbeThermostatHighLimitAction2, sensorProbeDrycontactArrayPort7ManualOutputCycleTime=sensorProbeDrycontactArrayPort7ManualOutputCycleTime, sensorProbeDrycontactArrayPort8Description=sensorProbeDrycontactArrayPort8Description, temperatureArraySensorLowCriticalColor=temperatureArraySensorLowCriticalColor, sensorProbeDrycontactArrayPort4ContTimeCritical=sensorProbeDrycontactArrayPort4ContTimeCritical, humidityAcknowledge=humidityAcknowledge, spTemperatureArray6Status=spTemperatureArray6Status, sensorMotionCriticalDesc=sensorMotionCriticalDesc, spTemperatureArray8_5Status=spTemperatureArray8_5Status, current4to20mASensorHighWarning=current4to20mASensorHighWarning, sensorProbeDrycontactArrayPort7Table=sensorProbeDrycontactArrayPort7Table, spRelayArray8_1Status=spRelayArray8_1Status, commonSensorTable=commonSensorTable, sensorProbeRelayArrayPort2Table=sensorProbeRelayArrayPort2Table, powerSensorEntry=powerSensorEntry, sensorProbeRelayArrayPort3RelayCycleTime=sensorProbeRelayArrayPort3RelayCycleTime, relaySensorId=relaySensorId, powerSensorLowWarning=powerSensorLowWarning, powerId=powerId, spVRMS3Status=spVRMS3Status, fuelDisplayStyle=fuelDisplayStyle, sensorProbeTemperatureArrayPort8DatacollectType=sensorProbeTemperatureArrayPort8DatacollectType, sensorProbeRelayArrayPort7URL=sensorProbeRelayArrayPort7URL, sensorProbeThermostatTemperatureArrayPort8HighLimit2=sensorProbeThermostatTemperatureArrayPort8HighLimit2, sensorProbeRelayArrayPort8URL=sensorProbeRelayArrayPort8URL, thermostatSensorDelayLowWarning=thermostatSensorDelayLowWarning, sensorProbeSoftMotionSensorNumber=sensorProbeSoftMotionSensorNumber, relayType=relayType, sensorProbeSwitchSendNormalTrap=sensorProbeSwitchSendNormalTrap, virtual=virtual, spSwitch42Status=spSwitch42Status, sensorProbeVirtualAnalogStatus=sensorProbeVirtualAnalogStatus, sensorProbeVRMSSensorEntry=sensorProbeVRMSSensorEntry, sensorRelaySubPort=sensorRelaySubPort, sensorProbeEnergySensor=sensorProbeEnergySensor, sensorProbeTemperatureArrayPort3DatacollectType=sensorProbeTemperatureArrayPort3DatacollectType, airflowTable=airflowTable, powerUnit=powerUnit, spSwitch17Status=spSwitch17Status, sensorProbeTemperatureArrayPort8LowWarning=sensorProbeTemperatureArrayPort8LowWarning, tankSenderSensorLowWarningColor=tankSenderSensorLowWarningColor, sensorProbeRelayArrayPort5RelayDescOff=sensorProbeRelayArrayPort5RelayDescOff, temperatureSensorAcknowledge=temperatureSensorAcknowledge, airflowDelayHighCritical=airflowDelayHighCritical, sensorAirflowRearm=sensorAirflowRearm, sensorProbeTempLowWarning=sensorProbeTempLowWarning, spRelayArray8_6Status=spRelayArray8_6Status, sensorTankSenderId=sensorTankSenderId, spRelayArray6_8Status=spRelayArray6_8Status, tankSenderStatus=tankSenderStatus, sensorProbeThermostatTemperatureArrayPort6RelayControlPort=sensorProbeThermostatTemperatureArrayPort6RelayControlPort, sensorProbeThermostatTemperatureArrayPort8LowLimitAction2=sensorProbeThermostatTemperatureArrayPort8LowLimitAction2, airflowSensorLowCriticalColor=airflowSensorLowCriticalColor, sensorHumidityDelayHighWarning=sensorHumidityDelayHighWarning, sensorProbeWattHoursSensorTable=sensorProbeWattHoursSensorTable, cfgSNMPv3PrivProtocol=cfgSNMPv3PrivProtocol, commonSensorHighCriticalDescription=commonSensorHighCriticalDescription, sensorSmokeNormalColor=sensorSmokeNormalColor, fuelDelayHighWarning=fuelDelayHighWarning, sensorPowerDelayLowCritical=sensorPowerDelayLowCritical, temperatureType=temperatureType, sensorDryContactCriticalColor=sensorDryContactCriticalColor, spRelayArray1_7Status=spRelayArray1_7Status, sensorProbeSoundDetectorSensorTable=sensorProbeSoundDetectorSensorTable, deviceDescription=deviceDescription, temperatureArraySubPort=temperatureArraySubPort, sensorProbeRelayArrayPort8Number=sensorProbeRelayArrayPort8Number, waterSensorGoOffline=waterSensorGoOffline, commonAcknowledge=commonAcknowledge, sensorProbeTempIndex=sensorProbeTempIndex, sensorProbeDrycontactArrayPort2Status=sensorProbeDrycontactArrayPort2Status, sensorProbeThermostatTemperatureArrayPort1LowLimit2=sensorProbeThermostatTemperatureArrayPort1LowLimit2, sensorProbeTemperatureArrayPort6DatacollectType=sensorProbeTemperatureArrayPort6DatacollectType, sensorDCvoltageDelayError=sensorDCvoltageDelayError, virtualAnalogSensorCalendar=virtualAnalogSensorCalendar, spAnalogue1Status=spAnalogue1Status, current4to20mASensorTable=current4to20mASensorTable, sensorProbeTemperatureArrayPort8Calendar=sensorProbeTemperatureArrayPort8Calendar, cfgGSMConnectionType=cfgGSMConnectionType, sensorProbeThermostatTemperatureArrayPort7LowLimit2=sensorProbeThermostatTemperatureArrayPort7LowLimit2, thermostatSensorId=thermostatSensorId, sensorProbeTemperatureArrayPort8HighWarning=sensorProbeTemperatureArrayPort8HighWarning, relayTable=relayTable, sensorProbeTemperatureArrayPort1Table=sensorProbeTemperatureArrayPort1Table, cfgSystemContact=cfgSystemContact, acVoltageNormalDescription=acVoltageNormalDescription, sensorProbeTemperatureArrayPort8Rearm=sensorProbeTemperatureArrayPort8Rearm, sensorSmokeDeviceIndex=sensorSmokeDeviceIndex, spVRMSStatus=spVRMSStatus, sensorProbeRelayArrayPort1OpenURL=sensorProbeRelayArrayPort1OpenURL, airflowDelayHighWarning=airflowDelayHighWarning, commonSensorGoOffline=commonSensorGoOffline, sensorProbeVRMSContTimeHighCritical=sensorProbeVRMSContTimeHighCritical, airflowRearm=airflowRearm, sensorProbeVirtualAnalogContTimeNormal=sensorProbeVirtualAnalogContTimeNormal, sensorProbeDrycontactArrayPort1OutputDescOn=sensorProbeDrycontactArrayPort1OutputDescOn, sensor4to20mABaseVoltage=sensor4to20mABaseVoltage, waterRopeSensorRaw=waterRopeSensorRaw, spEnergy5Status=spEnergy5Status, akcp=akcp, cfgSNMPv1Disable=cfgSNMPv1Disable, sensorSecurityDeviceIndex=sensorSecurityDeviceIndex, sensorProbeEnergyAcknowledgement=sensorProbeEnergyAcknowledgement, current4to20mASensorEntry=current4to20mASensorEntry, sensorPowerEntry=sensorPowerEntry, powerValueFormatString=powerValueFormatString, current4to20mADescription=current4to20mADescription, sensorProbeHumidityLowCritical=sensorProbeHumidityLowCritical, sensorDCvoltageHighWarningDesc=sensorDCvoltageHighWarningDesc, waterRopeNormalColor=waterRopeNormalColor, sensorProbeRelayArrayPort7Table=sensorProbeRelayArrayPort7Table, sensorProbeRelayArrayPort8Status=sensorProbeRelayArrayPort8Status, devicePowerMeterEntry=devicePowerMeterEntry, sensorWaterRopeImpedance=sensorWaterRopeImpedance, fuelSensorHighWarning=fuelSensorHighWarning, temperatureArrayLowCriticalDescription=temperatureArrayLowCriticalDescription, tankSenderDelayLowWarning=tankSenderDelayLowWarning, spRelayArray6_7Status=spRelayArray6_7Status, sensorProbeTemperatureArrayPort8URL=sensorProbeTemperatureArrayPort8URL, doorStatus=doorStatus, tankSenderHighWarningColor=tankSenderHighWarningColor, temperatureArraySensorAcknowledge=temperatureArraySensorAcknowledge, sensorProbeHumidityRearm=sensorProbeHumidityRearm, temperatureSensorHighWarningDesc=temperatureSensorHighWarningDesc, sensorProbeSoundDetectorContTimeLowCritical=sensorProbeSoundDetectorContTimeLowCritical, sensorTemperatureHighWarningColor=sensorTemperatureHighWarningColor, waterSensorIndex=waterSensorIndex, sensorThermostatHighCriticalDesc=sensorThermostatHighCriticalDesc, sensorProbeDrycontactArrayPort3ContTimeNormal=sensorProbeDrycontactArrayPort3ContTimeNormal, sensorDCvoltageNormalColor=sensorDCvoltageNormalColor, sirenSensorEntry=sirenSensorEntry, cfgRSysLogServerAddress=cfgRSysLogServerAddress, humiditySensorLowCriticalColor=humiditySensorLowCriticalColor, securityIndex=securityIndex, dcVoltageSensorId=dcVoltageSensorId, sensorProbeCameraServerClientIP=sensorProbeCameraServerClientIP, cfgSMTPSSL=cfgSMTPSSL, sensorProbeRelayArrayPort5Entry=sensorProbeRelayArrayPort5Entry, virtualSwitchSensorAcknowledgement=virtualSwitchSensorAcknowledgement, sensorTemperatureArrayStatus=sensorTemperatureArrayStatus, current4to20mASensorPort=current4to20mASensorPort, sensorProbeTemperatureArrayPort1Description=sensorProbeTemperatureArrayPort1Description, cfgWEBEnabled=cfgWEBEnabled, sensorProbeTemperatureArrayPort1GoOnline=sensorProbeTemperatureArrayPort1GoOnline, sensorProbeRelayArraySensor=sensorProbeRelayArraySensor, sensorProbeRelayArrayPort2ManualRelayCycleTime=sensorProbeRelayArrayPort2ManualRelayCycleTime, sensorTemperatureArrayIndex=sensorTemperatureArrayIndex, sensorProbeThermostatTemperatureArrayPort3LowLimitAction1=sensorProbeThermostatTemperatureArrayPort3LowLimitAction1, dcVoltageDelayError=dcVoltageDelayError, sirenTable=sirenTable, sensorProbeDrycontactArrayPort2GoOnline=sensorProbeDrycontactArrayPort2GoOnline, relaySensorOffColor=relaySensorOffColor, sensorProbeThermostatTemperatureArrayPort2Description=sensorProbeThermostatTemperatureArrayPort2Description, sensorProbeDrycontactArrayPort3ManualOutputCycleTime=sensorProbeDrycontactArrayPort3ManualOutputCycleTime, doorSensorDescription=doorSensorDescription, sensorProbeTempGoOnline=sensorProbeTempGoOnline, sensorProbeTemperatureArrayPort7DegreeRaw=sensorProbeTemperatureArrayPort7DegreeRaw, sensorThermostatRearm=sensorThermostatRearm, sensor4to20mALowCriticalColor=sensor4to20mALowCriticalColor, sensorProbeSoftMotionContTimeNormal=sensorProbeSoftMotionContTimeNormal, tankSenderHighCriticalDescription=tankSenderHighCriticalDescription, dcVoltageLowCriticalDescription=dcVoltageLowCriticalDescription, spVirtualStatus=spVirtualStatus, current4to20mAHighWarningDescription=current4to20mAHighWarningDescription, sensorProbePTZRotateRelative=sensorProbePTZRotateRelative, sensorHumidityUnit=sensorHumidityUnit, sensorACvoltageNormalDesc=sensorACvoltageNormalDesc, sensorProbeRelayArrayPort7Status=sensorProbeRelayArrayPort7Status, sensorTemperatureDelayNormal=sensorTemperatureDelayNormal, sensorFuelLowCriticalColor=sensorFuelLowCriticalColor, sensorTemperatureArrayHighCriticalDesc=sensorTemperatureArrayHighCriticalDesc, temperatureArrayHighCritical=temperatureArrayHighCritical, commonSensorValueFormatFloat=commonSensorValueFormatFloat, sensorProbeNoCameraSensor=sensorProbeNoCameraSensor, airflowSensorErrorColor=airflowSensorErrorColor, sensorProbeRelayArrayPort1RelayDescOff=sensorProbeRelayArrayPort1RelayDescOff, sensorProbeSoundDetectorRearm=sensorProbeSoundDetectorRearm, sensorDryContactPort6GoOnline=sensorDryContactPort6GoOnline, cfgVPNServerDNSName=cfgVPNServerDNSName, deviceWorstSensotStatus=deviceWorstSensotStatus, sensorProbeDrycontactArrayPort5ManualOutputCycleTime=sensorProbeDrycontactArrayPort5ManualOutputCycleTime, sensorProbeThermostatGoOnline=sensorProbeThermostatGoOnline, sensorProbeHumidityContTimeLowWarning=sensorProbeHumidityContTimeLowWarning, sensorProbeRelayArrayPort4Entry=sensorProbeRelayArrayPort4Entry, sensorProbeDrycontactArrayPort8Number=sensorProbeDrycontactArrayPort8Number, airflowSensorDelayHighWarning=airflowSensorDelayHighWarning, temperatureSensorUnit=temperatureSensorUnit, sirenSensorManualCycleTime=sirenSensorManualCycleTime, sensorProbeThermostatTemperatureArrayPort4LowLimitAction1=sensorProbeThermostatTemperatureArrayPort4LowLimitAction1, sensorSirenStatus=sensorSirenStatus, spTemperatureArray2_1Status=spTemperatureArray2_1Status, sensorProbeTypeXDryName=sensorProbeTypeXDryName, sensorProbeIRMSURL=sensorProbeIRMSURL, sensorProbeEnergyContTimeNormal=sensorProbeEnergyContTimeNormal, deviceType=deviceType, sensorProbeThermostatTemperatureArrayPort6HighLimit2=sensorProbeThermostatTemperatureArrayPort6HighLimit2, current4to20mASensorUnit=current4to20mASensorUnit, spTemperatureArray1Status=spTemperatureArray1Status, sensorProbeDrycontactArrayPort3ManualOutputAction=sensorProbeDrycontactArrayPort3ManualOutputAction, sensorProbeIRMSStatus=sensorProbeIRMSStatus, sensorPowerInterval=sensorPowerInterval, relayOnDesc=relayOnDesc, powerSensorLowWarningDesc=powerSensorLowWarningDesc, sensor4to20mAStatus=sensor4to20mAStatus, sensorProbeRelayArrayPort4RelayDescOff=sensorProbeRelayArrayPort4RelayDescOff, sensorProbeDrycontactArrayPort2Direction=sensorProbeDrycontactArrayPort2Direction, sensorProbeTemperatureArrayPort7Index=sensorProbeTemperatureArrayPort7Index, sensorTankSenderTable=sensorTankSenderTable, sirenOffColor=sirenOffColor, sensorDCvoltageTable=sensorDCvoltageTable, waterRopeAcknowledge=waterRopeAcknowledge, sensorTemperatureArrayDelayHighCritical=sensorTemperatureArrayDelayHighCritical, sirenSensorControlMode=sirenSensorControlMode, sensorTemperatureArrayId=sensorTemperatureArrayId, waterSensorNormalDesc=waterSensorNormalDesc, humidityOffset=humidityOffset, spRelayArray2_5Status=spRelayArray2_5Status, spRelayArray3_8Status=spRelayArray3_8Status, sensor4to20mAPort=sensor4to20mAPort, sensorProbeVirtualSwitchEmailTrapLimit=sensorProbeVirtualSwitchEmailTrapLimit, sensorProbeWattHoursSensorNumber=sensorProbeWattHoursSensorNumber, sensorAirflowValue=sensorAirflowValue, sensorAirflowGoOffline=sensorAirflowGoOffline, waterRopeSensorDescription=waterRopeSensorDescription, spEnergy6Status=spEnergy6Status, cfgGSMAPN=cfgGSMAPN, dcVoltageSensorJumper=dcVoltageSensorJumper, deviceDryContactEntry=deviceDryContactEntry, virtualSwitchSensorEntry=virtualSwitchSensorEntry, sensorProbeEntry=sensorProbeEntry, sensorProbeNoCameraCalendar=sensorProbeNoCameraCalendar, temperatureSensorHighWarning=temperatureSensorHighWarning, sensorProbeDrycontactArrayPort2Index=sensorProbeDrycontactArrayPort2Index, sensorProbeSwitchDelayError=sensorProbeSwitchDelayError, fuelSensorHighCriticalDesc=fuelSensorHighCriticalDesc, spTemperatureArray6_5Status=spTemperatureArray6_5Status)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeTemperatureArrayPort1ContTimeLowWarning=sensorProbeTemperatureArrayPort1ContTimeLowWarning, sensorProbeThermostatTemperatureArrayPort8LowLimit1=sensorProbeThermostatTemperatureArrayPort8LowLimit1, temperatureSensorEntry=temperatureSensorEntry, sensorFuelSensorErrorColor=sensorFuelSensorErrorColor, temperatureArraySensorLowWarning=temperatureArraySensorLowWarning, tankSenderHighWarning=tankSenderHighWarning, temperaturePort=temperaturePort, humidityHighCriticalDescription=humidityHighCriticalDescription, spSwitch59Status=spSwitch59Status, temperatureArraySensorTable=temperatureArraySensorTable, spSwitch11Status=spSwitch11Status, sensorProbeTemperatureArrayPort5OpenURL=sensorProbeTemperatureArrayPort5OpenURL, temperatureArraySensorDelayError=temperatureArraySensorDelayError, sensorProbeHumiditySendNormalMail=sensorProbeHumiditySendNormalMail, sensorAirflowHighWarningDesc=sensorAirflowHighWarningDesc, temperatureArraySensorSensorErrorDesc=temperatureArraySensorSensorErrorDesc, dcVoltageLowCriticalColor=dcVoltageLowCriticalColor, current4to20mABaseVoltage=current4to20mABaseVoltage, spTemperatureArray7_7Status=spTemperatureArray7_7Status, airflowDelayLowCritical=airflowDelayLowCritical, drycontactSubPort=drycontactSubPort, sensorProbeTempSensorType=sensorProbeTempSensorType, sensorProbeThermostatLowLimit1=sensorProbeThermostatLowLimit1, temperatureArraySensorPort=temperatureArraySensorPort, sensorProbeTempRelayAction=sensorProbeTempRelayAction, sensorProbeTypeDCvoltageName=sensorProbeTypeDCvoltageName, action=action, dcVoltageRaw=dcVoltageRaw, spSwitch46Status=spSwitch46Status, sensorTankSenderRearm=sensorTankSenderRearm, commonLowWarningDescription=commonLowWarningDescription, temperatureArraySensorHighWarning=temperatureArraySensorHighWarning, sensorWaterRopeEntry=sensorWaterRopeEntry, fuelSensorLowCritical=fuelSensorLowCritical, sensorTankSenderHighCriticalDesc=sensorTankSenderHighCriticalDesc, sensorProbeTypeSHT11Name=sensorProbeTypeSHT11Name, temperatureArraySensorSensorErrorColor=temperatureArraySensorSensorErrorColor, sensorProbeRelayArrayPort1=sensorProbeRelayArrayPort1, sensorProbeThermostatTemperatureArrayPort4GoOnline=sensorProbeThermostatTemperatureArrayPort4GoOnline, sensorProbeThermostatTemperatureArrayPort5HighLimit1=sensorProbeThermostatTemperatureArrayPort5HighLimit1, sensorProbeSwitchLocation=sensorProbeSwitchLocation, fuelSensorEntry=fuelSensorEntry, current4to20mAHighCritical=current4to20mAHighCritical, sensorProbeWattHoursSensorEntry=sensorProbeWattHoursSensorEntry, sensorProbeSoundDetectorGoOnline=sensorProbeSoundDetectorGoOnline, current4to20mASensorNormalColor=current4to20mASensorNormalColor, spHelpUrl=spHelpUrl, doorCmd=doorCmd, sensorProbeRelayArrayPort6Index=sensorProbeRelayArrayPort6Index, cfgGSMPassword=cfgGSMPassword, current4to20mASensorHighCriticalDesc=current4to20mASensorHighCriticalDesc, cfgServerIntegrationEnabled=cfgServerIntegrationEnabled, powerLowCritical=powerLowCritical, securityEntry=securityEntry, sensorProbeDrycontactArrayPort8Table=sensorProbeDrycontactArrayPort8Table, commonSensorUnit=commonSensorUnit, sensorDoorId=sensorDoorId, sensorProbePowerMeterCountCRCErrorPacket=sensorProbePowerMeterCountCRCErrorPacket, commonTable=commonTable, sensorProbeRelayArrayPort5GoOnline=sensorProbeRelayArrayPort5GoOnline, airflowAcknowledge=airflowAcknowledge, virtualSwitchSensorGoOnline=virtualSwitchSensorGoOnline, spTemperatureArray8_8Status=spTemperatureArray8_8Status, spAnalogue8Status=spAnalogue8Status, sensorProbeSoundDetectorCalendar=sensorProbeSoundDetectorCalendar, relayDescription=relayDescription, sensorProbeDrycontactArrayPort8GoOnline=sensorProbeDrycontactArrayPort8GoOnline, sensorProbeIRMSSensorTable=sensorProbeIRMSSensorTable, sirenOnDescription=sirenOnDescription, cfgServiceTelnet=cfgServiceTelnet, sensorProbeDrycontactArrayPort2Description=sensorProbeDrycontactArrayPort2Description, virtualAnalogSensorLowCritical=virtualAnalogSensorLowCritical, virtualAnalogSensorValueFactor=virtualAnalogSensorValueFactor, powerHighWarning=powerHighWarning, sensorProbeRelayArrayPort8Entry=sensorProbeRelayArrayPort8Entry, sensorProbeTempHighCritical=sensorProbeTempHighCritical, sensorProbeDrycontactArrayPort6Entry=sensorProbeDrycontactArrayPort6Entry, sensorPowerLowWarningColor=sensorPowerLowWarningColor, temperatureSensorStatus=temperatureSensorStatus, sensorProbeThermostatTemperatureArrayPort6LowLimit1=sensorProbeThermostatTemperatureArrayPort6LowLimit1, sensorProbeThermostatTemperatureArrayPort6LowLimitAction2=sensorProbeThermostatTemperatureArrayPort6LowLimitAction2, waterRopeIndex=waterRopeIndex, sensorDryContactPort=sensorDryContactPort, sirenSensorTable=sirenSensorTable, dcVoltageTable=dcVoltageTable, sensorProbeThermostatTemperatureArrayPort8NormalAction2=sensorProbeThermostatTemperatureArrayPort8NormalAction2, sensorHumidityLowWarning=sensorHumidityLowWarning, sensorProbeRelayArrayPort8RelayAction=sensorProbeRelayArrayPort8RelayAction, cfgRSysLogServerPort=cfgRSysLogServerPort, dcVoltageSensorUnit=dcVoltageSensorUnit, sensorProbeSoundDetectorDescription=sensorProbeSoundDetectorDescription, current4to20mASensorId=current4to20mASensorId, dcVoltageSensorBaseVoltage=dcVoltageSensorBaseVoltage, sensorProbeDrycontactArrayPort6Description=sensorProbeDrycontactArrayPort6Description, sensorProbeTempSirenAction=sensorProbeTempSirenAction, sensorProbeIRMSSirenOnPort=sensorProbeIRMSSirenOnPort, sirenSensorDescription=sirenSensorDescription, sensorProbeTypePowerMeterName=sensorProbeTypePowerMeterName, fuelSensorDelayLowWarning=fuelSensorDelayLowWarning, sensorProbeTypeDrycontactInoutName=sensorProbeTypeDrycontactInoutName, commonSensorPort=commonSensorPort, spStatusSoftMotion=spStatusSoftMotion, sensorProbeRelayArrayPort1ManualRelayAction=sensorProbeRelayArrayPort1ManualRelayAction, sensorProbeVirtualAnalogEmailTrapLimit=sensorProbeVirtualAnalogEmailTrapLimit, powerLowCriticalColor=powerLowCriticalColor, deviceLicenseVrtTotal=deviceLicenseVrtTotal, spCriticalStatus=spCriticalStatus, sensorMotionIndex=sensorMotionIndex, current4to20mASensorStatus=current4to20mASensorStatus, sensorProbeStatusNumber=sensorProbeStatusNumber, sensorProbeDrycontactArrayPort6Index=sensorProbeDrycontactArrayPort6Index, current4to20mAEntry=current4to20mAEntry, fuelHighWarningDescription=fuelHighWarningDescription, sensorProbeTypeFuelLevelName=sensorProbeTypeFuelLevelName, relayOnColor=relayOnColor, sensorProbeThermostatTemperatureArrayPort4Value=sensorProbeThermostatTemperatureArrayPort4Value, sensorTankSenderIndex=sensorTankSenderIndex, sensorDoorIndex=sensorDoorIndex, sensorProbeHumidityContTimeSensorError=sensorProbeHumidityContTimeSensorError, waterSensorTable=waterSensorTable, fuelSensorGoOffline=fuelSensorGoOffline, sensorProbeHumidity4to20mAUnit=sensorProbeHumidity4to20mAUnit, tankSenderLowWarningDescription=tankSenderLowWarningDescription, temperatureSensorLowCritical=temperatureSensorLowCritical, sensorProbeTypeTemperatureName=sensorProbeTypeTemperatureName, smokeEntry=smokeEntry, sensorTemperatureRaw=sensorTemperatureRaw, sensorHumidityHighWarningDesc=sensorHumidityHighWarningDesc, spTemperatureArray6_7Status=spTemperatureArray6_7Status, dcVoltageSensorRaw=dcVoltageSensorRaw, spEnergy4Status=spEnergy4Status, dcVoltageHighWarning=dcVoltageHighWarning, sensorProbeThermostatTemperatureArrayPort5Mode=sensorProbeThermostatTemperatureArrayPort5Mode, license5DC=license5DC, sensorDCvoltageHighWarning=sensorDCvoltageHighWarning, sensorHumidityHighCriticalDesc=sensorHumidityHighCriticalDesc, current4to20mATable=current4to20mATable, sensorProbeSwitchGoOnline=sensorProbeSwitchGoOnline, sensorErrorColor=sensorErrorColor, dcVoltageSensorMaxVoltage=dcVoltageSensorMaxVoltage, sensorProbeThermostatTemperatureArrayPort6NormalAction1=sensorProbeThermostatTemperatureArrayPort6NormalAction1, devicePowerMeterIndex=devicePowerMeterIndex, sensorProbeTemperatureArrayPort2HighWarning=sensorProbeTemperatureArrayPort2HighWarning, sensorProbeThermostatTemperatureArrayPort5Online=sensorProbeThermostatTemperatureArrayPort5Online, sensorHumidityEntry=sensorHumidityEntry, relaySensorOnDesc=relaySensorOnDesc, humidityHighCritical=humidityHighCritical, sensorProbeTypeThermostatName=sensorProbeTypeThermostatName, sensorProbeIRMSAcknowledgement=sensorProbeIRMSAcknowledgement, spSwitch27Status=spSwitch27Status, deviceIntelligentEntry=deviceIntelligentEntry, sensorWaterGoOffline=sensorWaterGoOffline, temperatureArraySensorEntry=temperatureArraySensorEntry, sensorProbeDrycontactArrayPort3GoOnline=sensorProbeDrycontactArrayPort3GoOnline, airflowSensorEntry=airflowSensorEntry, sensorProbeHumidityEntry=sensorProbeHumidityEntry, sensorProbeTypeACvoltageName=sensorProbeTypeACvoltageName, spSwitch64Status=spSwitch64Status, humiditySensorLowWarningColor=humiditySensorLowWarningColor, airflowSensorLowWarningColor=airflowSensorLowWarningColor, sensorProbeHumidityIndexCount=sensorProbeHumidityIndexCount, sensorDryContactPort11GoOnline=sensorDryContactPort11GoOnline, sensorProbeTemperatureArrayPort6ContTimeSensorError=sensorProbeTemperatureArrayPort6ContTimeSensorError, sensorProbeRelayArrayPort7RelayCycleTime=sensorProbeRelayArrayPort7RelayCycleTime, sensorWaterRopeSensorErrorColor=sensorWaterRopeSensorErrorColor, securitySensorDeviceIndex=securitySensorDeviceIndex, tankSenderSensorErrorColor=tankSenderSensorErrorColor, doorEntry=doorEntry, dcVoltageJumper=dcVoltageJumper, sensorProbeThermostatMode=sensorProbeThermostatMode, sensorSirenSubPort=sensorSirenSubPort, sensorDryContactOffDesc=sensorDryContactOffDesc, tankSenderSensorValue=tankSenderSensorValue, spSwitch29Status=spSwitch29Status, sensorProbeIRMSLowWarning=sensorProbeIRMSLowWarning, deviceLicensePmsAvailable=deviceLicensePmsAvailable, spSwitch45Status=spSwitch45Status, motionTable=motionTable, sensorProbeTemperatureArrayPort6GoOnline=sensorProbeTemperatureArrayPort6GoOnline, sensorProbeRelayArrayPort6ControlMode=sensorProbeRelayArrayPort6ControlMode, spStatusNoVideoSignal=spStatusNoVideoSignal, sensorProbeSoftMotionMask=sensorProbeSoftMotionMask, motionSensorId=motionSensorId, sensorTemperatureArrayDegree=sensorTemperatureArrayDegree, temperatureArraySensorDelayHighCritical=temperatureArraySensorDelayHighCritical, sensorProbeSwitchRelayDescOn=sensorProbeSwitchRelayDescOn, sensorACvoltageIndex=sensorACvoltageIndex, spTemperatureArray6_2Status=spTemperatureArray6_2Status, sensorProbeRelayArrayPort2URL=sensorProbeRelayArrayPort2URL, sensorProbeUsePassword=sensorProbeUsePassword, securitySensorIndex=securitySensorIndex, sensorProbeThermostatTemperatureArrayPort7Online=sensorProbeThermostatTemperatureArrayPort7Online, sensorProbeThermostatTemperatureArrayPort3Online=sensorProbeThermostatTemperatureArrayPort3Online, sensorProbeSyslogDestIP=sensorProbeSyslogDestIP, sensorAirflowHighCriticalColor=sensorAirflowHighCriticalColor, fuelHighCriticalDescription=fuelHighCriticalDescription, sensorProbeVirtualAnalogSensorNumber=sensorProbeVirtualAnalogSensorNumber, sensorProbeTemperatureArrayPort7LowCritical=sensorProbeTemperatureArrayPort7LowCritical, sensorDryContactNormalColor=sensorDryContactNormalColor, sensorProbeDrycontactArrayPort5OutputDescOff=sensorProbeDrycontactArrayPort5OutputDescOff, sensorThermostatDegree=sensorThermostatDegree, deviceAccessInfo=deviceAccessInfo, sensorAirflowIndex=sensorAirflowIndex, sensorWaterDeviceIndex=sensorWaterDeviceIndex, sensorDCvoltagePort=sensorDCvoltagePort, relaySubPort=relaySubPort, sensorOffColor=sensorOffColor, relaySensorGoOffline=relaySensorGoOffline, sensorProbeVRMSHighWarning=sensorProbeVRMSHighWarning, tankSenderDelayError=tankSenderDelayError, sensorProbeVirtualAnalogContTimeSensorError=sensorProbeVirtualAnalogContTimeSensorError, sensorProbeVirtualSwitchSensorTable=sensorProbeVirtualSwitchSensorTable, sensorProbeTemperatureArrayPort6Offset=sensorProbeTemperatureArrayPort6Offset, sirenSensorSubPort=sirenSensorSubPort, sensorProbeRelayArrayPort7Description=sensorProbeRelayArrayPort7Description, sensorSirenOffColor=sensorSirenOffColor, sensorAirflowLowCritical=sensorAirflowLowCritical, deviceLicenseIpv6=deviceLicenseIpv6, sensorProbeSwitchRelayDescOff=sensorProbeSwitchRelayDescOff, motionSensorAcknowledge=motionSensorAcknowledge, spVirtual17Status=spVirtual17Status, drycontactOffDescription=drycontactOffDescription, spSwitch5Status=spSwitch5Status, fuelLowWarningColor=fuelLowWarningColor, sensorProbeSwitchSirenControlMode=sensorProbeSwitchSirenControlMode, sensorProbeNoCameraOnline=sensorProbeNoCameraOnline, sensorProbeDrycontactArrayPort8Direction=sensorProbeDrycontactArrayPort8Direction, sensorTemperatureId=sensorTemperatureId, sensorProbeEnergySensorTable=sensorProbeEnergySensorTable, sensorAirflowStatus=sensorAirflowStatus, commonOnColor=commonOnColor, humiditySensorStatus=humiditySensorStatus, sensorProbeStatusNumberNotNormal=sensorProbeStatusNumberNotNormal, sensorProbeRelayArrayPort1ControlMode=sensorProbeRelayArrayPort1ControlMode, spSwitch49Status=spSwitch49Status, sensorLowWarningColor=sensorLowWarningColor, spIRMS6Status=spIRMS6Status, sensorProbeThermostatTemperatureArrayPort1RelayControlPort=sensorProbeThermostatTemperatureArrayPort1RelayControlPort, motionPort=motionPort, sensorProbeRelayArrayPort3Entry=sensorProbeRelayArrayPort3Entry, sensorProbeDrycontactArrayPort1Entry=sensorProbeDrycontactArrayPort1Entry, sensorSecurityGoOffline=sensorSecurityGoOffline, dcVoltageSubPort=dcVoltageSubPort, sensorProbeThermostatTemperatureArrayPort1Value=sensorProbeThermostatTemperatureArrayPort1Value, sensorProbeSoftMotionDescription=sensorProbeSoftMotionDescription, sensorProbeSMTPAuth=sensorProbeSMTPAuth, sensorFuelNormalDesc=sensorFuelNormalDesc, temperatureArrayEntry=temperatureArrayEntry, sensorMotionStatus=sensorMotionStatus, sensorProbeTempLocation=sensorProbeTempLocation, sensorRelayOnDesc=sensorRelayOnDesc, airflowLowCritical=airflowLowCritical, sensorSecurityId=sensorSecurityId, sensorProbeTemperatureArrayPort1HighCritical=sensorProbeTemperatureArrayPort1HighCritical)
mibBuilder.exportSymbols("SPAGENT-MIB", powerHighCriticalColor=powerHighCriticalColor, current4to20mASensorBaseVoltage=current4to20mASensorBaseVoltage, temperatureArrayLowWarningDescription=temperatureArrayLowWarningDescription, thermostatSensorGoOffline=thermostatSensorGoOffline, waterRopeSensorNormalColor=waterRopeSensorNormalColor, sensorTemperatureArrayDelayError=sensorTemperatureArrayDelayError, sensorProbeTypeADE7763VRMSName=sensorProbeTypeADE7763VRMSName, sensorHumidityGoOffline=sensorHumidityGoOffline, powerSensorErrorColor=powerSensorErrorColor, cfgHostID=cfgHostID, temperatureDescription=temperatureDescription, sensorProbeThermostatTemperatureArrayPort5RelayControlPort=sensorProbeThermostatTemperatureArrayPort5RelayControlPort, spRelayArray4_1Status=spRelayArray4_1Status, sensorProbeDrycontactArrayPort1Online=sensorProbeDrycontactArrayPort1Online, sensorThermostatDelayLowCritical=sensorThermostatDelayLowCritical, humiditySensorHighWarning=humiditySensorHighWarning, sensorProbeDrycontactArrayPort3OutputDescOff=sensorProbeDrycontactArrayPort3OutputDescOff, licSNMPv3=licSNMPv3, sensorPowerHighWarningDesc=sensorPowerHighWarningDesc, spRelayArray8Status=spRelayArray8Status, sensorProbePowerMeter=sensorProbePowerMeter, smokeSubPort=smokeSubPort, current4to20mAStatus=current4to20mAStatus, sensorProbeTemperatureArrayPort2Calendar=sensorProbeTemperatureArrayPort2Calendar, sensorProbePowerMeterCountSentPacket=sensorProbePowerMeterCountSentPacket, sensorProbeTemperatureArrayPort7Entry=sensorProbeTemperatureArrayPort7Entry, sensorTankSenderLowCriticalDesc=sensorTankSenderLowCriticalDesc, temperatureDelayError=temperatureDelayError, powerNormalDescription=powerNormalDescription, spTemperatureArray4_8Status=spTemperatureArray4_8Status, waterAcknowledge=waterAcknowledge, sensorProbeThermostatTemperatureArrayPort3HighLimit2=sensorProbeThermostatTemperatureArrayPort3HighLimit2, sensorProbeDrycontactArrayPort8Status=sensorProbeDrycontactArrayPort8Status, sensorProbeServerEnable=sensorProbeServerEnable, sensorProbeTemperatureArrayPort3Online=sensorProbeTemperatureArrayPort3Online, sensorProbeRelayArrayPort6Table=sensorProbeRelayArrayPort6Table, sensorProbeIRMSContTimeLowCritical=sensorProbeIRMSContTimeLowCritical, motionSensorSubPort=motionSensorSubPort, sensorDoorOpenPeriod=sensorDoorOpenPeriod, sensorProbeSoftMotionSensorTable=sensorProbeSoftMotionSensorTable, temperatureArraySensorOffset=temperatureArraySensorOffset, dcVoltageIndex=dcVoltageIndex, doorAcknowledge=doorAcknowledge, sensorProbeHumidityAtoDJumper=sensorProbeHumidityAtoDJumper, sensorProbeMailLastStatus=sensorProbeMailLastStatus, fuelEntry=fuelEntry, dcVoltageDelayLowWarning=dcVoltageDelayLowWarning, fuelDelayError=fuelDelayError, humiditySensorNormalColor=humiditySensorNormalColor, sensorHumidityNormalColor=sensorHumidityNormalColor, sensorProbeRelayArrayPort8OpenURL=sensorProbeRelayArrayPort8OpenURL, current4to20mASensorSensorErrorDesc=current4to20mASensorSensorErrorDesc, sensorProbeTempEmailInterval=sensorProbeTempEmailInterval, sensorDCvoltageJumper=sensorDCvoltageJumper, fuelSensorStatus=fuelSensorStatus, fuelSensorLowWarningDesc=fuelSensorLowWarningDesc, commonSensorDescription=commonSensorDescription, sensorProbePowerMeter1phDelayBetweenMeter=sensorProbePowerMeter1phDelayBetweenMeter, sensorProbeSwitchContTimeNormal=sensorProbeSwitchContTimeNormal, sensorProbeIRMSPercent=sensorProbeIRMSPercent, sensorProbeVirtualSwitchStatus=sensorProbeVirtualSwitchStatus, commonOnDescription=commonOnDescription, sensorSirenGoOffline=sensorSirenGoOffline, deviceLicense=deviceLicense, spTemperature5Status=spTemperature5Status, spSwitch65Status=spSwitch65Status, spRelayArray7_4Status=spRelayArray7_4Status, sensorProbeRelayArrayPort7RelayAction=sensorProbeRelayArrayPort7RelayAction, sensorThermostatSensorErrorDesc=sensorThermostatSensorErrorDesc, waterRopeSensorDeviceIndex=waterRopeSensorDeviceIndex, actionResendInterval=actionResendInterval, powerSensorHighWarning=powerSensorHighWarning, current4to20mAHighCriticalColor=current4to20mAHighCriticalColor, spSwitch44Status=spSwitch44Status, sensorProbeTypeTemperatureArrayName=sensorProbeTypeTemperatureArrayName, deviceAccessEntry=deviceAccessEntry, commonSensorAcknowledge=commonSensorAcknowledge, spTemperatureArray8_1Status=spTemperatureArray8_1Status, sensorProbeTempOpenURL=sensorProbeTempOpenURL, sensorProbeVRMSRelayAction=sensorProbeVRMSRelayAction, tankSenderSensorRearm=tankSenderSensorRearm, sensorTankSenderLowWarning=sensorTankSenderLowWarning, thermostatSensorStatus=thermostatSensorStatus, doorSensorStatus=doorSensorStatus, thermostatSensorDescription=thermostatSensorDescription, sensorProbeVirtualSwitchDescriptionCritical=sensorProbeVirtualSwitchDescriptionCritical, sensorProbeRelayArrayPort1Description=sensorProbeRelayArrayPort1Description, sensorProbeThermostatTemperatureArrayPort3LowLimit1=sensorProbeThermostatTemperatureArrayPort3LowLimit1, license3rdPartyPMS=license3rdPartyPMS, sensorProbeSoundDetectorSensorNumber=sensorProbeSoundDetectorSensorNumber, commonIndex=commonIndex, sensorIntelligentPort3GoOnline=sensorIntelligentPort3GoOnline, commonPort=commonPort, relaySensorStatus=relaySensorStatus, fuelSensorSensorErrorDesc=fuelSensorSensorErrorDesc, current4to20mASensorDelayError=current4to20mASensorDelayError, sensorProbeThermostatTemperatureArrayPort3HighLimitAction2=sensorProbeThermostatTemperatureArrayPort3HighLimitAction2, sensorProbeTemperatureArrayPort6Online=sensorProbeTemperatureArrayPort6Online, virtualSwitchSensorTable=virtualSwitchSensorTable, deviceLicenseVrtAvailable=deviceLicenseVrtAvailable, sensorProbeTemperatureArrayPort6ContTimeLowCritical=sensorProbeTemperatureArrayPort6ContTimeLowCritical, device=device, deviceLicenseVrtUsed=deviceLicenseVrtUsed, humidityIndex=humidityIndex, sensorProbeSoundDetectorValue=sensorProbeSoundDetectorValue, sensorProbeTypeMotionName=sensorProbeTypeMotionName, smokeSensorStatus=smokeSensorStatus, sensorProbeSwitchRelayControlMode=sensorProbeSwitchRelayControlMode, sensorProbeTempContTimeLowCritical=sensorProbeTempContTimeLowCritical, commonStatus=commonStatus, dcVoltageDelayNormal=dcVoltageDelayNormal, spSwitch55Status=spSwitch55Status, cfgSNMPReadCommunity=cfgSNMPReadCommunity, spRelayArray4Status=spRelayArray4Status, powerSensorValueFormatString=powerSensorValueFormatString, spTemperatureArray1_8Status=spTemperatureArray1_8Status, sensorSecuritySubPort=sensorSecuritySubPort, sensorProbeRelayArrayPort4NormalState=sensorProbeRelayArrayPort4NormalState, sensor4to20mALowWarningDesc=sensor4to20mALowWarningDesc, airflowSensorHighWarningDesc=airflowSensorHighWarningDesc, temperatureSensorNormalDescription=temperatureSensorNormalDescription, dcVoltageSensorDelayError=dcVoltageSensorDelayError, sensorProbeSoundDetectorStatus=sensorProbeSoundDetectorStatus, sensorIntelligentTypeSelected=sensorIntelligentTypeSelected, dryContactSensorAcknowledge=dryContactSensorAcknowledge, spTemperatureArray7_6Status=spTemperatureArray7_6Status, sensorProbeThermostatTemperatureArrayPort2Online=sensorProbeThermostatTemperatureArrayPort2Online, sensorProbeDrycontactArrayPort7=sensorProbeDrycontactArrayPort7, sensorProbeTrapReIntervalAlive=sensorProbeTrapReIntervalAlive, tankSenderSensorDelayLowWarning=tankSenderSensorDelayLowWarning, sensorDCvoltageValue=sensorDCvoltageValue, temperatureArraySensorStatus=temperatureArraySensorStatus, powerSensorDisplayStyle=powerSensorDisplayStyle, spIRMS7Status=spIRMS7Status, sensorProbeRelayArrayPort2ManualRelayAction=sensorProbeRelayArrayPort2ManualRelayAction, sensorProbeSwitchContTimeHighCritical=sensorProbeSwitchContTimeHighCritical, sensorProbeTempDelayError=sensorProbeTempDelayError, sensorProbeRelayArrayPort8ManualRelayCycleTime=sensorProbeRelayArrayPort8ManualRelayCycleTime, sensorProbeSwitchOutputLevel=sensorProbeSwitchOutputLevel, sensorProbeSwitchWaterRopeUnit=sensorProbeSwitchWaterRopeUnit, fuelSensorErrorColor=fuelSensorErrorColor, temperatureLowCriticalColor=temperatureLowCriticalColor, sensorProbeEnableSysLog=sensorProbeEnableSysLog, sensorProbeRelayArrayPort6URL=sensorProbeRelayArrayPort6URL, sensorProbeThermostatTemperatureArrayPort3NormalAction2=sensorProbeThermostatTemperatureArrayPort3NormalAction2, temperatureArraySensorHighCritical=temperatureArraySensorHighCritical, sensorHumidityAcknowledge=sensorHumidityAcknowledge, waterCriticalDescription=waterCriticalDescription, spVirtual15Status=spVirtual15Status, sensorPowerDelayNormal=sensorPowerDelayNormal, humiditySensorDelayHighWarning=humiditySensorDelayHighWarning, powerSensorLowWarningColor=powerSensorLowWarningColor, sensorFuelHighCriticalColor=sensorFuelHighCriticalColor, sensorProbeTypeSHT11HumidityName=sensorProbeTypeSHT11HumidityName, sensorProbeTimeOfDay=sensorProbeTimeOfDay, temperatureSensorRaw=temperatureSensorRaw, virtualSwitchSensorOpenURL=virtualSwitchSensorOpenURL, sensorProbeDrycontactArrayPort7NormalState=sensorProbeDrycontactArrayPort7NormalState, current4to20mASensorOffset=current4to20mASensorOffset, tankSenderSensorLowCriticalDesc=tankSenderSensorLowCriticalDesc, temperatureArrayDescription=temperatureArrayDescription, sensorDCvoltageDelayHighWarning=sensorDCvoltageDelayHighWarning, dcVoltageSensorValue=dcVoltageSensorValue, airflowSensorNormalDesc=airflowSensorNormalDesc, sensorProbeDrycontactArrayPort7ControlMode=sensorProbeDrycontactArrayPort7ControlMode, powerDisplayStyle=powerDisplayStyle, spRelayArray4_2Status=spRelayArray4_2Status, sensorProbeTempEmailTrapInterval=sensorProbeTempEmailTrapInterval, sensorProbeDrycontactArrayPort7Online=sensorProbeDrycontactArrayPort7Online, sensorProbeTemperatureArrayPort6Value=sensorProbeTemperatureArrayPort6Value, temperatureSensorLowWarningColor=temperatureSensorLowWarningColor, waterRopeLength=waterRopeLength, cfgVPNCipherType=cfgVPNCipherType, temperatureArraySensorLowWarningDesc=temperatureArraySensorLowWarningDesc, spTemperatureArray8_4Status=spTemperatureArray8_4Status, sensorProbeThermostatTemperatureArrayPort8EnableTime=sensorProbeThermostatTemperatureArrayPort8EnableTime, sensorThermostatId=sensorThermostatId, sensorHumidityHighCriticalColor=sensorHumidityHighCriticalColor, waterRopeSensorNormalDesc=waterRopeSensorNormalDesc, sensorProbeEnergyDatacollectType=sensorProbeEnergyDatacollectType, temperatureArraySensorIndex=temperatureArraySensorIndex, spSwitch15Status=spSwitch15Status, sensorProbeIRMSOpenURL=sensorProbeIRMSOpenURL, sensorProbeTemperatureArrayPort3ContTimeSensorError=sensorProbeTemperatureArrayPort3ContTimeSensorError, sensorTemperatureArrayLowWarningColor=sensorTemperatureArrayLowWarningColor, spTemperatureArray1_4Status=spTemperatureArray1_4Status, sensorProbeTemperatureArrayPort4DegreeType=sensorProbeTemperatureArrayPort4DegreeType, spRelayArray1_8Status=spRelayArray1_8Status, sirenSensorOffColor=sirenSensorOffColor, humiditySensorPercent=humiditySensorPercent, powerSensorDelayHighWarning=powerSensorDelayHighWarning, commonSensorNormalDescription=commonSensorNormalDescription, airflowStatus=airflowStatus, smokeAcknowledge=smokeAcknowledge, sensorHighWarningColor=sensorHighWarningColor, humidityLowWarning=humidityLowWarning, waterRopeEntry=waterRopeEntry, sensorProbeDataCollectionPeriod=sensorProbeDataCollectionPeriod, spProductName=spProductName, sensorProbeEnergyLowCritical=sensorProbeEnergyLowCritical, spSwitch4Status=spSwitch4Status, sensorProbeDrycontactArrayPort1ManualOutputCycleTime=sensorProbeDrycontactArrayPort1ManualOutputCycleTime, virtualSwitchSensorContTimeNormal=virtualSwitchSensorContTimeNormal, sensorProbeDrycontactArrayPort7ContTimeNormal=sensorProbeDrycontactArrayPort7ContTimeNormal, sensorDCvoltageMaxVoltage=sensorDCvoltageMaxVoltage, sensorProbeDrycontactArrayPort4Index=sensorProbeDrycontactArrayPort4Index, securityNormalDescription=securityNormalDescription, sensorProbeTempDegree=sensorProbeTempDegree, sensorProbeVirtualSwitchGoOnline=sensorProbeVirtualSwitchGoOnline, sensorProbeSendTestMail=sensorProbeSendTestMail, sensorProbeMailTimeout=sensorProbeMailTimeout, sensorDoorStatus=sensorDoorStatus, sensorProbeSoundDetectorLowWarning=sensorProbeSoundDetectorLowWarning, securitySensorStatus=securitySensorStatus, airflowSensorNormalColor=airflowSensorNormalColor, sensorProbeTemperatureArrayPort8ContTimeHighWarning=sensorProbeTemperatureArrayPort8ContTimeHighWarning, smokeIndex=smokeIndex, commonRaw=commonRaw, tankSenderAcknowledge=tankSenderAcknowledge, sensorSecurityNormalColor=sensorSecurityNormalColor, virtualAnalogSensorRaw=virtualAnalogSensorRaw, spSensorAliveLow=spSensorAliveLow, spTemperatureArray7_3Status=spTemperatureArray7_3Status, sensorWaterRopeNormalColor=sensorWaterRopeNormalColor, virtualSwitchSensorStatus=virtualSwitchSensorStatus, spSwitch21Status=spSwitch21Status, relayStatus=relayStatus, dcVoltageSensorSubPort=dcVoltageSensorSubPort, humidityDelayHighCritical=humidityDelayHighCritical, sensorProbeVirtualAnalogContTimeHighWarning=sensorProbeVirtualAnalogContTimeHighWarning, sensorProbeSwitchEmailTrapLimit=sensorProbeSwitchEmailTrapLimit, sensorTemperatureArraySensorErrorColor=sensorTemperatureArraySensorErrorColor, spEnergy3Status=spEnergy3Status, sensorProbeTemperatureArrayPort5LowWarning=sensorProbeTemperatureArrayPort5LowWarning, sensorSirenDeviceIndex=sensorSirenDeviceIndex, sensorRelayType=sensorRelayType, sensorProbeThermostatTemperatureArrayPort8LowLimit2=sensorProbeThermostatTemperatureArrayPort8LowLimit2, sensorProbeTempAcknowledgement=sensorProbeTempAcknowledgement, sensorProbeRelayArrayPort6Entry=sensorProbeRelayArrayPort6Entry, sensorTemperatureArrayDescription=sensorTemperatureArrayDescription, sensor4to20mALowCriticalDesc=sensor4to20mALowCriticalDesc, acVoltageSensorCriticalColor=acVoltageSensorCriticalColor, sensorProbeWattHoursSensorIndex=sensorProbeWattHoursSensorIndex, cfgDHCPHostName=cfgDHCPHostName, fuelLowCritical=fuelLowCritical, sensorAirflowEntry=sensorAirflowEntry, dryContactSensorOnColor=dryContactSensorOnColor, current4to20mAHighWarning=current4to20mAHighWarning, sensorProbeThermostatHighLimit1=sensorProbeThermostatHighLimit1, sensorProbeSoundDetectorContTimeLowWarning=sensorProbeSoundDetectorContTimeLowWarning, dcVoltageSensorErrorColor=dcVoltageSensorErrorColor, sensorProbeThermostatTemperatureArrayPort1HighLimit2=sensorProbeThermostatTemperatureArrayPort1HighLimit2, sensorRelayOffDesc=sensorRelayOffDesc, sensorThermostatStatus=sensorThermostatStatus)
mibBuilder.exportSymbols("SPAGENT-MIB", spCustomStatus=spCustomStatus, spIRMS1Status=spIRMS1Status, sensorProbeThermostatTemperatureArrayPort6Mode=sensorProbeThermostatTemperatureArrayPort6Mode, sensorProbeTemperatureArrayPort1Number=sensorProbeTemperatureArrayPort1Number, drycontactDirection=drycontactDirection, powerSubPort=powerSubPort, powerSensorTimeOut=powerSensorTimeOut, sensorProbeVirtualSwitchContTimeNormal=sensorProbeVirtualSwitchContTimeNormal, sensorProbeTemperatureArrayPort4HighWarning=sensorProbeTemperatureArrayPort4HighWarning, sensorDCvoltageDescription=sensorDCvoltageDescription, sensorProbeTemperatureArrayPort6DegreeType=sensorProbeTemperatureArrayPort6DegreeType, sensorProbeTemperatureArrayPort4ContTimeSensorError=sensorProbeTemperatureArrayPort4ContTimeSensorError, sensorProbeTemperatureArrayPort7ContTimeNormal=sensorProbeTemperatureArrayPort7ContTimeNormal, humiditySubPort=humiditySubPort, sensorProbeAirFlowProtocolType=sensorProbeAirFlowProtocolType, waterTable=waterTable, waterEntry=waterEntry, sensorProbeRelayArrayPort5RelayCycleTime=sensorProbeRelayArrayPort5RelayCycleTime, sensorProbeTemperatureArrayPort3Offset=sensorProbeTemperatureArrayPort3Offset, sensorProbeCameraResolution=sensorProbeCameraResolution, sensorProbeTemperatureArrayPort3URL=sensorProbeTemperatureArrayPort3URL, temperatureArrayDelayLowCritical=temperatureArrayDelayLowCritical, virtualSwitchSensorDescriptionNormal=virtualSwitchSensorDescriptionNormal, spTemperatureArray1_6Status=spTemperatureArray1_6Status, fuelSensorLowCriticalColor=fuelSensorLowCriticalColor, spTemperature1Status=spTemperature1Status, sensorProbeTemperatureArrayPort3HighCritical=sensorProbeTemperatureArrayPort3HighCritical, sensorProbeRelayArrayPort2RelayDescOff=sensorProbeRelayArrayPort2RelayDescOff, sensorHumidityPercent=sensorHumidityPercent, motionSensorIndex=motionSensorIndex, sensorProbeThermostatTemperatureArrayPort4HighLimit2=sensorProbeThermostatTemperatureArrayPort4HighLimit2, sensorFuelStatus=sensorFuelStatus, sensorProbeTemperatureArrayPort6Index=sensorProbeTemperatureArrayPort6Index, doorSensorCmd=doorSensorCmd, spTemperatureArray7Status=spTemperatureArray7Status, spRelayArray3_5Status=spRelayArray3_5Status, spRelayArray2_3Status=spRelayArray2_3Status, sensorRelayId=sensorRelayId, sensorProbeVRMSOnline=sensorProbeVRMSOnline, sensorProbeThermostatTemperatureArrayPort5NormalAction1=sensorProbeThermostatTemperatureArrayPort5NormalAction1, sensorHumiditySensorErrorColor=sensorHumiditySensorErrorColor, sensorSmokeDescription=sensorSmokeDescription, sensorProbeThermostatTemperatureArrayPort3Value=sensorProbeThermostatTemperatureArrayPort3Value, sensorWaterRopeStatus=sensorWaterRopeStatus, cfgGSMInitString=cfgGSMInitString, temperatureArrayPort=temperatureArrayPort, sensorTankSenderHighWarningDesc=sensorTankSenderHighWarningDesc, sensorProbeVRMSSirenActiveStatus=sensorProbeVRMSSirenActiveStatus, sensorErrorDescription=sensorErrorDescription, virtualAnalogSensorURL=virtualAnalogSensorURL, sensorProbeSwitchSendNormalMail=sensorProbeSwitchSendNormalMail, relaySensorPort=relaySensorPort, securityNormalColor=securityNormalColor, sensorProbeDrycontactArrayPort7URL=sensorProbeDrycontactArrayPort7URL, smokeSensorId=smokeSensorId, sensorProbeSwitchSendMail=sensorProbeSwitchSendMail, sensorProbeTemperatureArrayPort1ContTimeHighCritical=sensorProbeTemperatureArrayPort1ContTimeHighCritical, sensorProbeEnergyDelayNormal=sensorProbeEnergyDelayNormal, sensorProbeRelayArrayPort8NormalState=sensorProbeRelayArrayPort8NormalState, sensorProbeDrycontactArrayPort8Online=sensorProbeDrycontactArrayPort8Online, sensorProbeThermostatTemperatureArrayPort8NormalAction1=sensorProbeThermostatTemperatureArrayPort8NormalAction1, sensorProbeDebug=sensorProbeDebug, sensorProbeSyslogPort=sensorProbeSyslogPort, temperatureSensorDelayError=temperatureSensorDelayError, sensorACvoltageDescription=sensorACvoltageDescription, sensorProbeRelayArrayPort4Number=sensorProbeRelayArrayPort4Number, spStatusVirtual=spStatusVirtual, humidityPercent=humidityPercent, sensorProbeVirtualAnalogLowCritical=sensorProbeVirtualAnalogLowCritical, sensorTemperatureArrayHighCritical=sensorTemperatureArrayHighCritical, current4to20mASensorSubPort=current4to20mASensorSubPort, airflowLowWarningDescription=airflowLowWarningDescription, spAnalogue2Status=spAnalogue2Status, sensorProbeThermostatTemperatureArrayPort5GoOnline=sensorProbeThermostatTemperatureArrayPort5GoOnline, spSwitch8Status=spSwitch8Status, spSenNormalStatus=spSenNormalStatus, relaySensorOnColor=relaySensorOnColor, waterRopeSensorErrorColor=waterRopeSensorErrorColor, dcVoltageHighWarningColor=dcVoltageHighWarningColor, sensorProbeTemperatureArrayPort2=sensorProbeTemperatureArrayPort2, spSwitch41Status=spSwitch41Status, waterCriticalColor=waterCriticalColor, spTemperatureArray4_7Status=spTemperatureArray4_7Status, spEventTimeStamp=spEventTimeStamp, commonSensorHighCriticalColor=commonSensorHighCriticalColor, sensorAirflowLowCriticalColor=sensorAirflowLowCriticalColor, sensorTemperatureType=sensorTemperatureType, waterRopeSensorCriticalColor=waterRopeSensorCriticalColor, sensorProbeRelayArrayPort3Number=sensorProbeRelayArrayPort3Number, sensorThermostatDelayHighCritical=sensorThermostatDelayHighCritical, sensorProbeVRMSCalendar=sensorProbeVRMSCalendar, sensorProbeVirtualSwitchURL=sensorProbeVirtualSwitchURL, sensorProbeRelayArrayPort4GoOnline=sensorProbeRelayArrayPort4GoOnline, sensorProbeIRMSRearm=sensorProbeIRMSRearm, commonSensorNormalColor=commonSensorNormalColor, waterSensorSubPort=waterSensorSubPort, sensorProbeTempDelayNormal=sensorProbeTempDelayNormal, sensorProbeRelayArrayPort2NormalState=sensorProbeRelayArrayPort2NormalState, sensorAirflowTable=sensorAirflowTable, deviceLicenseExpAvailable=deviceLicenseExpAvailable, sensorProbeCameraServerClientSetPassword=sensorProbeCameraServerClientSetPassword, spVirtual20Status=spVirtual20Status, sensorPowerAcknowledge=sensorPowerAcknowledge, spStatusRJ45=spStatusRJ45, sensorProbeThermostatTemperatureArrayPort7LowLimitAction1=sensorProbeThermostatTemperatureArrayPort7LowLimitAction1, spSwitch10Status=spSwitch10Status, temperatureArrayStatus=temperatureArrayStatus, sensorProbeTemperatureArrayPort2ContTimeSensorError=sensorProbeTemperatureArrayPort2ContTimeSensorError, sensorProbeThermostatLowLimit2=sensorProbeThermostatLowLimit2, sensorProbeSoftMotionURL=sensorProbeSoftMotionURL, lic3rdPartyPMS=lic3rdPartyPMS, temperatureSensorGoOffline=temperatureSensorGoOffline, powerDelayLowWarning=powerDelayLowWarning, sensorProbeThermostatTemperatureArrayPort4NormalAction2=sensorProbeThermostatTemperatureArrayPort4NormalAction2, sensorProbeTemperatureArrayPort8ContTimeLowCritical=sensorProbeTemperatureArrayPort8ContTimeLowCritical, sensorDCvoltageLowCriticalColor=sensorDCvoltageLowCriticalColor, cfgSystemName=cfgSystemName, sensorProbeEnergyPercent=sensorProbeEnergyPercent, cfgKeepAliveTime=cfgKeepAliveTime, current4to20mAHighWarningColor=current4to20mAHighWarningColor, sensorHumidityNormalDesc=sensorHumidityNormalDesc, sensorProbeSoundDetectorPulseLength=sensorProbeSoundDetectorPulseLength, sensorProbeThermostatTemperatureArrayPort5Index=sensorProbeThermostatTemperatureArrayPort5Index, sensorDCvoltageAmountMaxVoltage=sensorDCvoltageAmountMaxVoltage, sensorProbeTemperatureArrayPort3ContTimeLowWarning=sensorProbeTemperatureArrayPort3ContTimeLowWarning, virtualAnalogSensorGoOnline=virtualAnalogSensorGoOnline, fuelHighCriticalColor=fuelHighCriticalColor, sensorProbeTemperatureArrayPort5LowCritical=sensorProbeTemperatureArrayPort5LowCritical, sensorRelayAcknowledge=sensorRelayAcknowledge, doorId=doorId, powerSensorValue=powerSensorValue, drycontactCriticalDescription=drycontactCriticalDescription, airflowLowCriticalColor=airflowLowCriticalColor, sensor4to20mALowWarning=sensor4to20mALowWarning, sensorProbeTempCalendar=sensorProbeTempCalendar, sensorTemperatureIndex=sensorTemperatureIndex, sensorTemperatureArrayPort=sensorTemperatureArrayPort, sensorProbeRelayArrayPort5NormalState=sensorProbeRelayArrayPort5NormalState, sensorWaterRopeRaw=sensorWaterRopeRaw, spSwitch51Status=spSwitch51Status, sensorProbeTemperatureArrayPort6ContTimeHighCritical=sensorProbeTemperatureArrayPort6ContTimeHighCritical, sensorProbeDrycontactArrayPort6=sensorProbeDrycontactArrayPort6, temperatureSensorLowCriticalDesc=temperatureSensorLowCriticalDesc, sensorProbeSoftMotionCalendar=sensorProbeSoftMotionCalendar, spRelayArray5_8Status=spRelayArray5_8Status, humidityStatus=humidityStatus, spNormalStatus=spNormalStatus, spKeepAliveTrap=spKeepAliveTrap, temperatureArraySensorErrorColor=temperatureArraySensorErrorColor, sensorSmokeCriticalColor=sensorSmokeCriticalColor, sensorHumidityOffset=sensorHumidityOffset, sensorProbeThermostatTemperatureArrayPort4HighLimit1=sensorProbeThermostatTemperatureArrayPort4HighLimit1, sensorProbeThermostatTemperatureArrayPort4RelayControlPort=sensorProbeThermostatTemperatureArrayPort4RelayControlPort, sensorDryContactOutputManualCycleTime=sensorDryContactOutputManualCycleTime, sensorProbeTrapCommunity=sensorProbeTrapCommunity, sensorThermostatLowCritical=sensorThermostatLowCritical, spEnergy8Status=spEnergy8Status, deviceAccessIndex=deviceAccessIndex, sensorProbeTemperatureArrayPort6ContTimeNormal=sensorProbeTemperatureArrayPort6ContTimeNormal, sensorProbeVRMSLowCritical=sensorProbeVRMSLowCritical, sensorProbeHumidityDcUnit=sensorProbeHumidityDcUnit, commonSensorSensorNormalDescription=commonSensorSensorNormalDescription, dryContactSensorDescription=dryContactSensorDescription, sensor4to20mASubPort=sensor4to20mASubPort, thermostatSensorDisplayStyle=thermostatSensorDisplayStyle, secNotification=secNotification, temperatureRearm=temperatureRearm, sensorProbeVRMSDelayNormal=sensorProbeVRMSDelayNormal, sensorProbeTemperatureArrayPort3ContTimeHighCritical=sensorProbeTemperatureArrayPort3ContTimeHighCritical, tankSenderSensorTable=tankSenderSensorTable, deviceIntelligentWorstSensotStatus=deviceIntelligentWorstSensotStatus, temperatureId=temperatureId, spTemperatureStatus=spTemperatureStatus, sensorProbeTypeSHT11TempName=sensorProbeTypeSHT11TempName, sensorProbeRouteAdd=sensorProbeRouteAdd, sensorThermostatHighWarningDesc=sensorThermostatHighWarningDesc, sensorProbeSwitchSirenOnPort=sensorProbeSwitchSirenOnPort, current4to20mASensorHighCritical=current4to20mASensorHighCritical, current4to20mADisplayStyle=current4to20mADisplayStyle, sensorWaterRopeCriticalDesc=sensorWaterRopeCriticalDesc, sensorProbeThermostatTemperatureArrayPort2LowLimitAction1=sensorProbeThermostatTemperatureArrayPort2LowLimitAction1, securitySensorCriticalDesc=securitySensorCriticalDesc, sensorProbeRelayArrayPort5Status=sensorProbeRelayArrayPort5Status, temperatureGoOffline=temperatureGoOffline, powerSensorSensorErrorColor=powerSensorSensorErrorColor, sensorProbeVirtualAnalogContTimeLowCritical=sensorProbeVirtualAnalogContTimeLowCritical, sensorProbeDrycontactArrayPort7OpenURL=sensorProbeDrycontactArrayPort7OpenURL, sensorProbeAltWebPort=sensorProbeAltWebPort, sensorProbeVRMSDatacollectType=sensorProbeVRMSDatacollectType, sensorAirflowHighWarning=sensorAirflowHighWarning, sensorProbeSoftMotionOnline=sensorProbeSoftMotionOnline, airflowHighWarning=airflowHighWarning, temperatureArrayDelayLowWarning=temperatureArrayDelayLowWarning, sensorProbeIRMSRelayAction=sensorProbeIRMSRelayAction, current4to20mASensorLowCriticalColor=current4to20mASensorLowCriticalColor, sensorProbeStatusNumberError=sensorProbeStatusNumberError, sirenManualCycleTime=sirenManualCycleTime, sensorProbeThermostatTemperatureArrayPort2NormalAction2=sensorProbeThermostatTemperatureArrayPort2NormalAction2, spTemperatureArray3_7Status=spTemperatureArray3_7Status, sensorTemperatureDelayLowCritical=sensorTemperatureDelayLowCritical, sensorProbeVRMSSensorNumber=sensorProbeVRMSSensorNumber, secSensor=secSensor, sensorProbeSwitchRelayOutputVoltStatus=sensorProbeSwitchRelayOutputVoltStatus, sensorProbeRelayArrayPort4Index=sensorProbeRelayArrayPort4Index, sensorDCvoltageRaw=sensorDCvoltageRaw, motionSensorPort=motionSensorPort, humidityLowWarningDescription=humidityLowWarningDescription, sensorProbeThermostatTemperatureArrayPort1Mode=sensorProbeThermostatTemperatureArrayPort1Mode, sensorProbeDrycontactArrayPort4OutputDescOff=sensorProbeDrycontactArrayPort4OutputDescOff, sensorProbeDrycontactArrayPort4URL=sensorProbeDrycontactArrayPort4URL, temperatureArraySensorSubPort=temperatureArraySensorSubPort, sensorProbeRelayArrayPort1Entry=sensorProbeRelayArrayPort1Entry, cfgNTPServer1=cfgNTPServer1, dcVoltageStatus=dcVoltageStatus, acVoltageCriticalColor=acVoltageCriticalColor, sensorProbeJpegQualityFactor=sensorProbeJpegQualityFactor, airflowRaw=airflowRaw, virtualAnalogSensorEmailTrapLimit=virtualAnalogSensorEmailTrapLimit, sensorProbeThermostatTemperatureArrayPort4NormalAction1=sensorProbeThermostatTemperatureArrayPort4NormalAction1, sensorProbeThermostatTemperatureArrayPort3EnableTime=sensorProbeThermostatTemperatureArrayPort3EnableTime, sensorProbeSwitchRelayCycleTime=sensorProbeSwitchRelayCycleTime, sensorProbeTemperatureArrayPort1ContTimeSensorError=sensorProbeTemperatureArrayPort1ContTimeSensorError, sensorProbeTemperatureArrayPort6Status=sensorProbeTemperatureArrayPort6Status, sensorTemperatureDelayHighWarning=sensorTemperatureDelayHighWarning, sensorRelayStatus=sensorRelayStatus, sensorProbeVirtualAnalogSensorIndex=sensorProbeVirtualAnalogSensorIndex, sensorProbeDrycontactArrayPort4NormalState=sensorProbeDrycontactArrayPort4NormalState, sensorProbeThermostatTemperatureArrayPort7HighLimit2=sensorProbeThermostatTemperatureArrayPort7HighLimit2, sensorPowerIndex=sensorPowerIndex, sensorPowerErrorRetryNum=sensorPowerErrorRetryNum, sensorProbeDrycontactArrayPort2ManualOutputCycleTime=sensorProbeDrycontactArrayPort2ManualOutputCycleTime, sensorProbeRelayArrayPort6Status=sensorProbeRelayArrayPort6Status, powerGoOffline=powerGoOffline, sensorProbeDrycontactArrayPort4Table=sensorProbeDrycontactArrayPort4Table, sensorTemperatureArrayType=sensorTemperatureArrayType, sensorSirenPort=sensorSirenPort, sensorSmokeId=sensorSmokeId, sensorProbeRelayArrayPort4Status=sensorProbeRelayArrayPort4Status, tankSenderNormalColor=tankSenderNormalColor, sensorTemperatureLowWarning=sensorTemperatureLowWarning, current4to20mADelayLowWarning=current4to20mADelayLowWarning, sensorProbeSwitchTable=sensorProbeSwitchTable, sensorProbeVirtualSwitchOnline=sensorProbeVirtualSwitchOnline, current4to20mASensorHighWarningDesc=current4to20mASensorHighWarningDesc, current4to20mASensorAcknowledge=current4to20mASensorAcknowledge, waterSensorNormalColor=waterSensorNormalColor, securityCriticalDescription=securityCriticalDescription, sensor4to20mADelayHighCritical=sensor4to20mADelayHighCritical, sensorProbeThermostatTemperatureArrayPort4HighLimitAction1=sensorProbeThermostatTemperatureArrayPort4HighLimitAction1, sensorProbeThermostatTemperatureArrayPort6HighLimit1=sensorProbeThermostatTemperatureArrayPort6HighLimit1, humiditySensorDeviceIndex=humiditySensorDeviceIndex, temperatureLowWarningDescription=temperatureLowWarningDescription, spSwitch31Status=spSwitch31Status, sensorProbeRelayArrayPort4URL=sensorProbeRelayArrayPort4URL)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeTemperatureArrayPort1ContTimeHighWarning=sensorProbeTemperatureArrayPort1ContTimeHighWarning, sensorRelayPort=sensorRelayPort, sensorWaterRopeId=sensorWaterRopeId, sensorProbeRelayArrayPort4Description=sensorProbeRelayArrayPort4Description, sensorProbeTemperatureArrayPort8Status=sensorProbeTemperatureArrayPort8Status, deviceDryContactInfo=deviceDryContactInfo, acVoltageSensorPort=acVoltageSensorPort, sensorProbeVRMSHighCritical=sensorProbeVRMSHighCritical, temperatureOffset=temperatureOffset, sensorProbeRelayArrayPort5URL=sensorProbeRelayArrayPort5URL, waterRopeSensorType=waterRopeSensorType, sensor4to20mADisplayStyle=sensor4to20mADisplayStyle, sensorProbeTempSirenActiveStatus=sensorProbeTempSirenActiveStatus, sensorProbeThermostatTemperatureArrayPort1Index=sensorProbeThermostatTemperatureArrayPort1Index, airflowDelayError=airflowDelayError, sensorDCvoltageLowWarning=sensorDCvoltageLowWarning, sensorProbeThermostatTemperatureArrayPort6HighLimitAction2=sensorProbeThermostatTemperatureArrayPort6HighLimitAction2, spUnknownStatus=spUnknownStatus, current4to20mALowWarning=current4to20mALowWarning, airflowDelayLowWarning=airflowDelayLowWarning, sensorTemperatureLowWarningDesc=sensorTemperatureLowWarningDesc, sensorProbeTypeWaterRopeName=sensorProbeTypeWaterRopeName, sensorProbeTemperatureArrayPort5DegreeType=sensorProbeTemperatureArrayPort5DegreeType, waterSensorAcknowledge=waterSensorAcknowledge, sensorProbeDrycontactArrayPort2Number=sensorProbeDrycontactArrayPort2Number, waterRopeSensorUnit=waterRopeSensorUnit, humiditySensorGoOffline=humiditySensorGoOffline, sensorTankSenderLowWarningColor=sensorTankSenderLowWarningColor, devicePowerMeterDelayBetweenCommand=devicePowerMeterDelayBetweenCommand, sensorTankSenderValue=sensorTankSenderValue, sensorProbeRelayArrayPort2Status=sensorProbeRelayArrayPort2Status, sensorMotionNormalColor=sensorMotionNormalColor, dcVoltageGoOffline=dcVoltageGoOffline, sensorProbeWattHoursDescription=sensorProbeWattHoursDescription, sensorProbeTemperatureArrayPort7LowWarning=sensorProbeTemperatureArrayPort7LowWarning, spTemperatureArray2_6Status=spTemperatureArray2_6Status, sensorProbeThermostatTemperatureArrayPort1GoOnline=sensorProbeThermostatTemperatureArrayPort1GoOnline, deviceIndex=deviceIndex, sensorProbeDrycontactArrayPort8ManualOutputCycleTime=sensorProbeDrycontactArrayPort8ManualOutputCycleTime, securitySensorCriticalColor=securitySensorCriticalColor, spRelayArray1_2Status=spRelayArray1_2Status, sensorProbeEnergyURL=sensorProbeEnergyURL, sensorProbeMailSMTP=sensorProbeMailSMTP, airflowHighWarningColor=airflowHighWarningColor, sensorTemperatureArraySensorErrorDesc=sensorTemperatureArraySensorErrorDesc, sensorProbeRelayArrayPort2RelayCycleTime=sensorProbeRelayArrayPort2RelayCycleTime, sensorHumidityTable=sensorHumidityTable, spRelayArray6_5Status=spRelayArray6_5Status, sensorPowerLowCritical=sensorPowerLowCritical, powerSensorErrorRetryNum=powerSensorErrorRetryNum, spSwitch24Status=spSwitch24Status, temperatureSensorDelayHighWarning=temperatureSensorDelayHighWarning, cfgWEBSecureEnabled=cfgWEBSecureEnabled, sensorWaterDescription=sensorWaterDescription, temperatureDelayLowCritical=temperatureDelayLowCritical, sensorDoorDescription=sensorDoorDescription, spTemperature7Status=spTemperature7Status, sensorProbeSupportMailRcpt=sensorProbeSupportMailRcpt, fuelHighWarningColor=fuelHighWarningColor, tankSenderSensorIndex=tankSenderSensorIndex, securityDescription=securityDescription, spVirtual5Status=spVirtual5Status, sensorProbeTemperatureArrayPort6Description=sensorProbeTemperatureArrayPort6Description, thermostatSensorHighWarning=thermostatSensorHighWarning, sensorProbeRelayArrayPort2RelayDescOn=sensorProbeRelayArrayPort2RelayDescOn, waterSensorEntry=waterSensorEntry, waterRopeCriticalColor=waterRopeCriticalColor, sensorProbeTempContTimeHighWarning=sensorProbeTempContTimeHighWarning, sensorProbeThermostatTemperatureArrayPort7EnableTime=sensorProbeThermostatTemperatureArrayPort7EnableTime, sensorProbeDefaultGateway=sensorProbeDefaultGateway, sensorProbeTemperatureArrayPort2ContTimeHighWarning=sensorProbeTemperatureArrayPort2ContTimeHighWarning, sensorProbeThermostatTemperatureArrayPort3GoOnline=sensorProbeThermostatTemperatureArrayPort3GoOnline, humidityId=humidityId, sensorACvoltageAcknowledge=sensorACvoltageAcknowledge, sensorProbeVirtualAnalogAcknowledgement=sensorProbeVirtualAnalogAcknowledgement, spTemperatureArray5_5Status=spTemperatureArray5_5Status, sensorProbeSwitchRelayActiveStatus=sensorProbeSwitchRelayActiveStatus, sensorProbeRelayArrayPort3OpenURL=sensorProbeRelayArrayPort3OpenURL, dcVoltageUnit=dcVoltageUnit, sensorProbeEnergySirenCycleTime=sensorProbeEnergySirenCycleTime, sensorProbeOtherSensor=sensorProbeOtherSensor, sensorDryContactAcknowledge=sensorDryContactAcknowledge, current4to20mASensorDelayLowCritical=current4to20mASensorDelayLowCritical, sensorProbeSwitchStatus=sensorProbeSwitchStatus, sensorProbeTypeADE7763IRMSName=sensorProbeTypeADE7763IRMSName, sensorProbeThermostatTemperatureArrayPort2LowLimit2=sensorProbeThermostatTemperatureArrayPort2LowLimit2, sensorPowerRearm=sensorPowerRearm, airflowSensorErrorDescription=airflowSensorErrorDescription, sensorSecurityStatus=sensorSecurityStatus, sensorDCvoltageEntry=sensorDCvoltageEntry, sensorProbeTypeNoSignalName=sensorProbeTypeNoSignalName, airflowSensorSubPort=airflowSensorSubPort, spManufName=spManufName, sensorProbeDrycontactArrayPort2ManualOutputAction=sensorProbeDrycontactArrayPort2ManualOutputAction, sensorSmokeSubPort=sensorSmokeSubPort, sensorProbeRelayArrayPort5OpenURL=sensorProbeRelayArrayPort5OpenURL, tankSenderSensorId=tankSenderSensorId, sensorProbeEnergyHighWarning=sensorProbeEnergyHighWarning, sensorProbeDrycontactArrayPort3NormalState=sensorProbeDrycontactArrayPort3NormalState, airflowSensorLowCritical=airflowSensorLowCritical, spSwitch28Status=spSwitch28Status, current4to20mASubPort=current4to20mASubPort, sensorFuelTable=sensorFuelTable, sensorProbeRelayArrayPort4=sensorProbeRelayArrayPort4, sensorProbeRelayArrayPort7Online=sensorProbeRelayArrayPort7Online, sensorPowerNormalColor=sensorPowerNormalColor, sensorProbeThermostatTemperatureArrayPort5HighLimitAction1=sensorProbeThermostatTemperatureArrayPort5HighLimitAction1, sensorProbeDrycontactArrayPort1URL=sensorProbeDrycontactArrayPort1URL, sensorProbeThermostatTemperatureArrayPort6Index=sensorProbeThermostatTemperatureArrayPort6Index, sensorTemperatureHighWarningDesc=sensorTemperatureHighWarningDesc, sensorDeviceIndex=sensorDeviceIndex, sensorProbeTemperatureArrayPort3Rearm=sensorProbeTemperatureArrayPort3Rearm, current4to20mAIndex=current4to20mAIndex, current4to20mANormalDescription=current4to20mANormalDescription, acVoltageSensorIndex=acVoltageSensorIndex, sensorProbeRelayArrayPort8Description=sensorProbeRelayArrayPort8Description, relayManualAction=relayManualAction, sensorProbeIDCVErrorFlag=sensorProbeIDCVErrorFlag, dcVoltageBaseVoltage=dcVoltageBaseVoltage, sensorProbeTimeZone=sensorProbeTimeZone, dcVoltageLowWarningColor=dcVoltageLowWarningColor, sensorProbeDrycontactArrayPort2ContTimeNormal=sensorProbeDrycontactArrayPort2ContTimeNormal, sensorTemperatureArrayLowWarning=sensorTemperatureArrayLowWarning, powerSensorPort=powerSensorPort, spRelayArray2_1Status=spRelayArray2_1Status, sensorProbeThermostatHighLimit2=sensorProbeThermostatHighLimit2, sensorProbe=sensorProbe, airflowSensorDelayLowWarning=airflowSensorDelayLowWarning, humiditySensorSensorNormalColor=humiditySensorSensorNormalColor, smokeSensorCriticalDesc=smokeSensorCriticalDesc, spRelayArray8_5Status=spRelayArray8_5Status, sensorTemperatureUnit=sensorTemperatureUnit, humidityHighCriticalColor=humidityHighCriticalColor, tankSenderSensorNormalColor=tankSenderSensorNormalColor, humiditySensorAcknowledge=humiditySensorAcknowledge, thermostatSensorHighCriticalDesc=thermostatSensorHighCriticalDesc, sensorPowerDeviceIndex=sensorPowerDeviceIndex, commonSubPort=commonSubPort, sensorProbeThermostatTemperatureArrayPort8Online=sensorProbeThermostatTemperatureArrayPort8Online, sensorTemperatureHighCriticalDesc=sensorTemperatureHighCriticalDesc, spSenDownStatus=spSenDownStatus, sensorPowerDelayHighWarning=sensorPowerDelayHighWarning, sensorProbeEnergyReadingMode=sensorProbeEnergyReadingMode, sensorProbeTempIndexCount=sensorProbeTempIndexCount, acVoltageSensorGoOffline=acVoltageSensorGoOffline, temperatureSensorSensorErrorColor=temperatureSensorSensorErrorColor, sensorProbeRelayArrayPort2Description=sensorProbeRelayArrayPort2Description, airflowSensorDelayNormal=airflowSensorDelayNormal, securitySensorEntry=securitySensorEntry, relaySensorTable=relaySensorTable, lic5DCUsed=lic5DCUsed, sensorProbeIDCVCalibrate=sensorProbeIDCVCalibrate, sensorProbeSwitchSirenDelayAlarm=sensorProbeSwitchSirenDelayAlarm, sensorProbeDrycontactArrayPort2ContTimeCritical=sensorProbeDrycontactArrayPort2ContTimeCritical, securityStatus=securityStatus, sensorProbeTempHighWarning=sensorProbeTempHighWarning, sirenGoOffline=sirenGoOffline, fuelAcknowledge=fuelAcknowledge, spSwitch13Status=spSwitch13Status, dcVoltageSensorOffset=dcVoltageSensorOffset, sensorMotionCriticalColor=sensorMotionCriticalColor, temperatureArrayGoOffline=temperatureArrayGoOffline, spRelayArray3_7Status=spRelayArray3_7Status, sensorProbeIRMSDescription=sensorProbeIRMSDescription, sensorProbeTemperatureArrayPort4Status=sensorProbeTemperatureArrayPort4Status, airflowSensorLowWarning=airflowSensorLowWarning, sensorProbeDrycontactArrayPort6Status=sensorProbeDrycontactArrayPort6Status, sensorProbeRelayArrayPort3ManualRelayCycleTime=sensorProbeRelayArrayPort3ManualRelayCycleTime, sensorProbeSendTraps=sensorProbeSendTraps, licenseEntry=licenseEntry, tankSenderTable=tankSenderTable, commonSensorHighWarningColor=commonSensorHighWarningColor, sensorProbeTemperatureArrayPort4Entry=sensorProbeTemperatureArrayPort4Entry, tankSenderHighWarningDescription=tankSenderHighWarningDescription, sensorProbeThermostatNormalAction2=sensorProbeThermostatNormalAction2, sensorTemperatureArrayOffset=sensorTemperatureArrayOffset, spTemperatureArray3_3Status=spTemperatureArray3_3Status, airflowSensorStatus=airflowSensorStatus, sensorProbeDrycontactArrayPort6Direction=sensorProbeDrycontactArrayPort6Direction, sensorDryContactPort15GoOnline=sensorDryContactPort15GoOnline, spTemperatureArray4_2Status=spTemperatureArray4_2Status, sensorProbeDrycontactArrayPort5Online=sensorProbeDrycontactArrayPort5Online, deviceAccessWorstSensorStatus=deviceAccessWorstSensorStatus, spSwitch16Status=spSwitch16Status, sensorTemperatureLowCriticalColor=sensorTemperatureLowCriticalColor, airflowValue=airflowValue, sensorTankSenderDelayLowCritical=sensorTankSenderDelayLowCritical, spRelayArray8_7Status=spRelayArray8_7Status, sensorProbeMailJpgInline=sensorProbeMailJpgInline, spTemperature6Status=spTemperature6Status, sensorProbeVirtualSwitchNormalState=sensorProbeVirtualSwitchNormalState, sensorProbeTemperatureArrayPort4Value=sensorProbeTemperatureArrayPort4Value, sensorProbeDrycontactArrayPort1NormalState=sensorProbeDrycontactArrayPort1NormalState, sensorProbePTZEnable=sensorProbePTZEnable, cfgIPAddress=cfgIPAddress, deviceIntelligentStatus=deviceIntelligentStatus, powerDescription=powerDescription, sensorProbeDrycontactArrayPort3ContTimeCritical=sensorProbeDrycontactArrayPort3ContTimeCritical, motionSensorGoOffline=motionSensorGoOffline, sensorProbeVirtualAnalogHighWarning=sensorProbeVirtualAnalogHighWarning, sensorProbeSoftMotionGoOnline=sensorProbeSoftMotionGoOnline, sirenSensorOnDesc=sirenSensorOnDesc, temperatureHighCriticalDescription=temperatureHighCriticalDescription, spRelayArray5_4Status=spRelayArray5_4Status, spTemperatureArray8_7Status=spTemperatureArray8_7Status, thermostatSensorNormalColor=thermostatSensorNormalColor, tankSenderSensorEntry=tankSenderSensorEntry, spTemperatureArray3_6Status=spTemperatureArray3_6Status, sensorTemperatureArrayDisplayStyle=sensorTemperatureArrayDisplayStyle, drycontactIndex=drycontactIndex, spRelayArray5_5Status=spRelayArray5_5Status, spSensor=spSensor, sensorWaterRopeCriticalColor=sensorWaterRopeCriticalColor, sensorProbeTemperatureArrayPort8Number=sensorProbeTemperatureArrayPort8Number, dryContactSensorOutputManualAction=dryContactSensorOutputManualAction, spVirtual6Status=spVirtual6Status, sensorProbeTemperatureArrayPort4URL=sensorProbeTemperatureArrayPort4URL, sensorProbeThermostatEnableTime=sensorProbeThermostatEnableTime, dcVoltageSensorHighCriticalDesc=dcVoltageSensorHighCriticalDesc, sensorProbeRelayArrayPort5RelayDescOn=sensorProbeRelayArrayPort5RelayDescOn, waterRopeCriticalDescription=waterRopeCriticalDescription, sensorAirflowLowWarningDesc=sensorAirflowLowWarningDesc, temperatureDelayNormal=temperatureDelayNormal, sensorProbeSwitchSirenAction=sensorProbeSwitchSirenAction, sensorDCvoltageHighCriticalColor=sensorDCvoltageHighCriticalColor, drycontactOutputManualAction=drycontactOutputManualAction, temperatureSensorNormalColor=temperatureSensorNormalColor, sensorAirflowLowWarningColor=sensorAirflowLowWarningColor, spRelayArray7_5Status=spRelayArray7_5Status, relaySensorManualCycleTime=relaySensorManualCycleTime, waterRopeSensorLeakLocation=waterRopeSensorLeakLocation, sensorProbeDrycontactArrayPort4Description=sensorProbeDrycontactArrayPort4Description, sensorProbeRelayArrayPort4ControlMode=sensorProbeRelayArrayPort4ControlMode, powerLowWarning=powerLowWarning, temperatureArraySensorDisplayStyle=temperatureArraySensorDisplayStyle, sensorDCvoltageSensorErrorColor=sensorDCvoltageSensorErrorColor, sensorProbeRelayArrayPort7ManualRelayCycleTime=sensorProbeRelayArrayPort7ManualRelayCycleTime, sensorProbeHumiditySirenOnPort=sensorProbeHumiditySirenOnPort, sensorProbeEnergySensorNumber=sensorProbeEnergySensorNumber, sensorProbeUseDHCP=sensorProbeUseDHCP, sensor4to20mADelayNormal=sensor4to20mADelayNormal, commonSensorSensorErrorColor=commonSensorSensorErrorColor, sensorProbeTemperatureArrayPort3Status=sensorProbeTemperatureArrayPort3Status, temperatureSensorDelayLowCritical=temperatureSensorDelayLowCritical, sensorProbeHumidityCalendar=sensorProbeHumidityCalendar, relaySensorDeviceIndex=relaySensorDeviceIndex, sensorProbeTempEntry=sensorProbeTempEntry, sensorLowWarningDescription=sensorLowWarningDescription, sensorProbeSwitchCalendar=sensorProbeSwitchCalendar, sensorProbeDrycontactArrayPort4OutputDescOn=sensorProbeDrycontactArrayPort4OutputDescOn, sensorTankSenderDelayError=sensorTankSenderDelayError, commonLowCriticalColor=commonLowCriticalColor, sensorHumidityLowWarningDesc=sensorHumidityLowWarningDesc, sensorFuelLowCriticalDesc=sensorFuelLowCriticalDesc)
mibBuilder.exportSymbols("SPAGENT-MIB", temperatureArrayHighWarning=temperatureArrayHighWarning, spVirtual7Status=spVirtual7Status, licenseIndex=licenseIndex, motionSensorNormalColor=motionSensorNormalColor, cfgSNMPv3AccessPrivelege=cfgSNMPv3AccessPrivelege, sensorProbeTemperatureArrayPort4HighCritical=sensorProbeTemperatureArrayPort4HighCritical, humidityRearm=humidityRearm, spTemperatureArray5_2Status=spTemperatureArray5_2Status, spRelayArray5_1Status=spRelayArray5_1Status, sensorSirenIndex=sensorSirenIndex, sensorProbeTempContTimeLowWarning=sensorProbeTempContTimeLowWarning, current4to20mAAmountBaseVoltage=current4to20mAAmountBaseVoltage, sensorTankSenderGoOffline=sensorTankSenderGoOffline, spVirtual13Status=spVirtual13Status, deviceDryContactIndex=deviceDryContactIndex, sensorSmokeNormalDesc=sensorSmokeNormalDesc, sensorRelayDeviceIndex=sensorRelayDeviceIndex, commonSensorHighWarningDescription=commonSensorHighWarningDescription, sensorProbeReboot=sensorProbeReboot, sensorPowerNormalDesc=sensorPowerNormalDesc, sensorTemperatureOffset=sensorTemperatureOffset, dcVoltageSensorDisplayStyle=dcVoltageSensorDisplayStyle, temperatureArrayRearm=temperatureArrayRearm, sensorSecurityDescription=sensorSecurityDescription, waterRopeUnit=waterRopeUnit, spTemperatureArray4_3Status=spTemperatureArray4_3Status, spTemperatureArray2_2Status=spTemperatureArray2_2Status, motionEntry=motionEntry, tankSenderSensorUnit=tankSenderSensorUnit, sensorThermostatHighCriticalColor=sensorThermostatHighCriticalColor, powerSensorHighCriticalDesc=powerSensorHighCriticalDesc, waterRopeSensorId=waterRopeSensorId, relayOffDesc=relayOffDesc, sensorProbeVirtualAnalogURL=sensorProbeVirtualAnalogURL, spHostName=spHostName, sensorFuelDeviceIndex=sensorFuelDeviceIndex, spSwitch26Status=spSwitch26Status, sensorProbeTemperatureArrayPort1Value=sensorProbeTemperatureArrayPort1Value, spVRMS1Status=spVRMS1Status, sensorProbeThermostatLowLimitAction2=sensorProbeThermostatLowLimitAction2, sensorProbeSwitchEmailInterval=sensorProbeSwitchEmailInterval, sirenSensorAcknowledge=sirenSensorAcknowledge, sensorProbeVirtualAnalogGoOnline=sensorProbeVirtualAnalogGoOnline, sensorProbeSwitchWaterRopeLeakLocation=sensorProbeSwitchWaterRopeLeakLocation, sensorProbeRelayArrayPort8ManualRelayAction=sensorProbeRelayArrayPort8ManualRelayAction, sensorProbeTemperatureArrayPort1Online=sensorProbeTemperatureArrayPort1Online, sensorHumidityDelayHighCritical=sensorHumidityDelayHighCritical, securitySensorDescription=securitySensorDescription, current4to20mAOffset=current4to20mAOffset, spSenWarningStatus=spSenWarningStatus, sensorProbeTemperatureArrayPort3HighWarning=sensorProbeTemperatureArrayPort3HighWarning, tankSenderDelayNormal=tankSenderDelayNormal, spSwitch20Status=spSwitch20Status, spRelayArray4_8Status=spRelayArray4_8Status, spBoardDescription=spBoardDescription, sensorPowerValueFormatString=sensorPowerValueFormatString, cfgSubnetMask=cfgSubnetMask, thermostatSensorHighWarningColor=thermostatSensorHighWarningColor, current4to20mASensorErrorDescription=current4to20mASensorErrorDescription, fuelSensorDisplayStyle=fuelSensorDisplayStyle, spAnalogue6Status=spAnalogue6Status, spTemperature3Status=spTemperature3Status, current4to20mASensorSensorErrorColor=current4to20mASensorSensorErrorColor, virtualAnalogSensorHighCritical=virtualAnalogSensorHighCritical, spVirtual1Status=spVirtual1Status, sensor4to20mANormalDesc=sensor4to20mANormalDesc, sensorDryContactPort4GoOnline=sensorDryContactPort4GoOnline, tankSenderSensorDelayLowCritical=tankSenderSensorDelayLowCritical, sensorProbeTemperatureArrayPort7Calendar=sensorProbeTemperatureArrayPort7Calendar, sensorThermostatLowWarningColor=sensorThermostatLowWarningColor, sensorProbeThermostatTemperatureArrayPort1LowLimitAction1=sensorProbeThermostatTemperatureArrayPort1LowLimitAction1, sensorMotionSubPort=sensorMotionSubPort, sensorProbeTemperatureArrayPort2OpenURL=sensorProbeTemperatureArrayPort2OpenURL, acVoltageSensorEntry=acVoltageSensorEntry, sensorFuelLowWarning=sensorFuelLowWarning, sensorProbeDrycontactArrayPort2OutputDescOff=sensorProbeDrycontactArrayPort2OutputDescOff, sensorProbeThermostatHighLimitAction1=sensorProbeThermostatHighLimitAction1, sensorProbeHumidityDelayNormal=sensorProbeHumidityDelayNormal, sensorProbeTempRearm=sensorProbeTempRearm, current4to20mAHighCriticalDescription=current4to20mAHighCriticalDescription, deviceLicensePmsUsed=deviceLicensePmsUsed, sensorFuelNormalColor=sensorFuelNormalColor, waterRopeImpedance=waterRopeImpedance, thermostatSensorLowCriticalColor=thermostatSensorLowCriticalColor, relayIndex=relayIndex, temperatureArrayLowWarning=temperatureArrayLowWarning, sensorProbeTraps=sensorProbeTraps, powerDelayNormal=powerDelayNormal, powerDelayLowCritical=powerDelayLowCritical, licenseTable=licenseTable, sensorProbeHumidityEmailTrapLimit=sensorProbeHumidityEmailTrapLimit, sensorProbeTypeThermocoupleName=sensorProbeTypeThermocoupleName, sensorProbeRelayArrayPort7Number=sensorProbeRelayArrayPort7Number, devicePowerMeterType=devicePowerMeterType, sensorDCvoltageSensorErrorDesc=sensorDCvoltageSensorErrorDesc, virtualAnalogSensorOpenURL=virtualAnalogSensorOpenURL, virtualSwitchSensorURL=virtualSwitchSensorURL, sensorFuelAcknowledge=sensorFuelAcknowledge, sensorProbeHumidityHighVoltage=sensorProbeHumidityHighVoltage, sensorMotionPort=sensorMotionPort, powerSensorMaxValue=powerSensorMaxValue, sensorProbeTempTable=sensorProbeTempTable, thermostatSensorLowWarningColor=thermostatSensorLowWarningColor, sensorProbeTypeDrycontactInputName=sensorProbeTypeDrycontactInputName, sensorProbeTempSendNormalTrap=sensorProbeTempSendNormalTrap, sensorHumidityHighWarning=sensorHumidityHighWarning, licAddKey=licAddKey, sensorPowerUnit=sensorPowerUnit, sensorProbeNoCameraGoOnline=sensorProbeNoCameraGoOnline, sensorProbeTempDatacollectType=sensorProbeTempDatacollectType, spRelayArray7_6Status=spRelayArray7_6Status, thermostatSensorDeviceIndex=thermostatSensorDeviceIndex, smokeSensorCriticalColor=smokeSensorCriticalColor, sensorProbeDrycontactArrayPort4ManualOutputCycleTime=sensorProbeDrycontactArrayPort4ManualOutputCycleTime, powerSensorDelayNormal=powerSensorDelayNormal, fuelSensorDelayError=fuelSensorDelayError, fuelSensorRaw=fuelSensorRaw, temperatureIndex=temperatureIndex, spSwitch56Status=spSwitch56Status, current4to20mASensorLowCriticalDesc=current4to20mASensorLowCriticalDesc, dcVoltageSensorLowWarning=dcVoltageSensorLowWarning, waterIndex=waterIndex, sensorProbeEnergyGoOnline=sensorProbeEnergyGoOnline, sensorDryContactNormalState=sensorDryContactNormalState, sensor4to20mARearm=sensor4to20mARearm, temperatureArraySensorDelayLowCritical=temperatureArraySensorDelayLowCritical, humiditySensorDelayLowCritical=humiditySensorDelayLowCritical, fuelId=fuelId, waterRopeSensorImpedance=waterRopeSensorImpedance, sensorProbeEnergyHighCritical=sensorProbeEnergyHighCritical, powerSensorNormalDesc=powerSensorNormalDesc, sensorProbeSoundDetectorDatacollectType=sensorProbeSoundDetectorDatacollectType, fuelLowCriticalColor=fuelLowCriticalColor, sensorProbeSwitchEmailTrapSchedule=sensorProbeSwitchEmailTrapSchedule, airflowLowWarning=airflowLowWarning, tankSenderSensorDelayError=tankSenderSensorDelayError, commonSensorErrorDescription=commonSensorErrorDescription, sensorProbeSoundDetectorContTimeSensorError=sensorProbeSoundDetectorContTimeSensorError, sensorLowCriticalColor=sensorLowCriticalColor, licAccessUsersUsed=licAccessUsersUsed, temperatureLowWarning=temperatureLowWarning, sensorDryContactPort5GoOnline=sensorDryContactPort5GoOnline, sensorDCvoltageGoOffline=sensorDCvoltageGoOffline, sensorProbeDrycontactArrayPort4GoOnline=sensorProbeDrycontactArrayPort4GoOnline, sensorPowerHighWarning=sensorPowerHighWarning, sensorAirflowNormalColor=sensorAirflowNormalColor, sensorProbeDrycontactArrayPort1=sensorProbeDrycontactArrayPort1, sensorTemperatureDelayLowWarning=sensorTemperatureDelayLowWarning, sensorDryContactDirection=sensorDryContactDirection, temperatureArraySensorDegree=temperatureArraySensorDegree, sensorDCvoltageLowCritical=sensorDCvoltageLowCritical, sensorFuelAmountMaxValue=sensorFuelAmountMaxValue, waterSensorPort=waterSensorPort, powerSensorDelayHighCritical=powerSensorDelayHighCritical, fuelSensorDelayHighCritical=fuelSensorDelayHighCritical, sensorProbeThermostatTemperatureArrayPort7Index=sensorProbeThermostatTemperatureArrayPort7Index, sensorDCvoltageSubPort=sensorDCvoltageSubPort, virtualSwitchSensorDescriptionCritical=virtualSwitchSensorDescriptionCritical, sensorProbeRelayArrayPort1ManualRelayCycleTime=sensorProbeRelayArrayPort1ManualRelayCycleTime, sensorMotionNormalDesc=sensorMotionNormalDesc, airflowEntry=airflowEntry, sensorProbeSwitchDelayNormal=sensorProbeSwitchDelayNormal, sensorTemperatureRearm=sensorTemperatureRearm, sensorDCvoltageAmountBaseVoltage=sensorDCvoltageAmountBaseVoltage, drycontactNormalDescription=drycontactNormalDescription, current4to20mAAcknowledge=current4to20mAAcknowledge, powerDelayHighCritical=powerDelayHighCritical, sensorProbeVRMSContTimeLowWarning=sensorProbeVRMSContTimeLowWarning, sensorProbeTemperatureArrayPort1Entry=sensorProbeTemperatureArrayPort1Entry, sensorProbeTemperatureArrayPort3OpenURL=sensorProbeTemperatureArrayPort3OpenURL, sensorProbePowerMeter3phDelayBetweenCommand=sensorProbePowerMeter3phDelayBetweenCommand, sensorProbeTemperatureArrayPort5GoOnline=sensorProbeTemperatureArrayPort5GoOnline, commonHighWarningColor=commonHighWarningColor, powerTable=powerTable, humiditySensorDelayNormal=humiditySensorDelayNormal, sensorProbeSwitchRelayOnPort=sensorProbeSwitchRelayOnPort, sensorProbeVRMSDescription=sensorProbeVRMSDescription, spSwitch37Status=spSwitch37Status, sensorProbeVirtualSwitchSensorIndex=sensorProbeVirtualSwitchSensorIndex, commonSensorOffDescription=commonSensorOffDescription, spIRMS2Status=spIRMS2Status, spRelayArray5_3Status=spRelayArray5_3Status, humidityUnit=humidityUnit, dcVoltageOffset=dcVoltageOffset, sensorProbeDrycontactArrayPort2OutputDescOn=sensorProbeDrycontactArrayPort2OutputDescOn, dcVoltageSensorIndex=dcVoltageSensorIndex, sensorProbeThermostatTemperatureArrayPort4EnableTime=sensorProbeThermostatTemperatureArrayPort4EnableTime, sensorTemperatureDelayError=sensorTemperatureDelayError, cfgServerAddress=cfgServerAddress, sensorProbeVirtualSwitchCalendar=sensorProbeVirtualSwitchCalendar, sensorProbeThermostatTemperatureArrayPort5LowLimit2=sensorProbeThermostatTemperatureArrayPort5LowLimit2, fuelSensorDescription=fuelSensorDescription, waterSensorId=waterSensorId, cfgNTPServer2=cfgNTPServer2, sensorProbeHumidityDatacollectType=sensorProbeHumidityDatacollectType, spRelayArray3_6Status=spRelayArray3_6Status, spVirtual12Status=spVirtual12Status, dryContactSensorId=dryContactSensorId, commonSensorDeviceIndex=commonSensorDeviceIndex, securitySubPort=securitySubPort, sensorProbeDrycontactArrayPort8ContTimeCritical=sensorProbeDrycontactArrayPort8ContTimeCritical, sensorProbeDrycontactArrayPort4Number=sensorProbeDrycontactArrayPort4Number, temperatureSensorType=temperatureSensorType, thermostatSensorHighWarningDesc=thermostatSensorHighWarningDesc, dryContactSensorNormalColor=dryContactSensorNormalColor, cfgEMailResendInterval=cfgEMailResendInterval, sensorProbeTemperatureArrayPort3Table=sensorProbeTemperatureArrayPort3Table, sensorProbeTempDegreeType=sensorProbeTempDegreeType, sensorProbeDrycontactArrayPort5OutputDescOn=sensorProbeDrycontactArrayPort5OutputDescOn, sensorProbeRelayArrayPort5ManualRelayAction=sensorProbeRelayArrayPort5ManualRelayAction, deviceDryContactWorstSensotStatus=deviceDryContactWorstSensotStatus, sensorDCvoltageLowWarningDesc=sensorDCvoltageLowWarningDesc, sensorProbeThermostatTemperatureArrayPort1Description=sensorProbeThermostatTemperatureArrayPort1Description, acVoltageSensorDeviceIndex=acVoltageSensorDeviceIndex, tankSenderDelayHighCritical=tankSenderDelayHighCritical, sensorRelayManualCycleTime=sensorRelayManualCycleTime, sensorTemperatureArrayDelayHighWarning=sensorTemperatureArrayDelayHighWarning, spSensorType=spSensorType, sensorProbeRelayArrayPort5Index=sensorProbeRelayArrayPort5Index, sensorProbeNoCameraSensorTable=sensorProbeNoCameraSensorTable, fuelSensorLowWarning=fuelSensorLowWarning, humiditySensorDelayLowWarning=humiditySensorDelayLowWarning, sensorProbePTZPanTiltUntilEnd=sensorProbePTZPanTiltUntilEnd, sensorProbeVirtualAnalogSensorTable=sensorProbeVirtualAnalogSensorTable, sensorDCvoltageHighWarningColor=sensorDCvoltageHighWarningColor, airflowSensorSensorErrorColor=airflowSensorSensorErrorColor, sensorProbeVirtualAnalogOpenURL=sensorProbeVirtualAnalogOpenURL, sensorDCvoltageId=sensorDCvoltageId, spSwitch48Status=spSwitch48Status, securityAcknowledge=securityAcknowledge, fuelHighWarning=fuelHighWarning, sensorProbeHumidityRelayActiveStatus=sensorProbeHumidityRelayActiveStatus, waterNormalColor=waterNormalColor, sensorProbeTemperatureArrayPort7Offset=sensorProbeTemperatureArrayPort7Offset, sensorProbeNtpServer=sensorProbeNtpServer, smokeSensorNormalDesc=smokeSensorNormalDesc, sensorThermostatDelayNormal=sensorThermostatDelayNormal, tankSenderSensorHighWarning=tankSenderSensorHighWarning, sensorProbeVirtualAnalogContTimeLowWarning=sensorProbeVirtualAnalogContTimeLowWarning, sensorProbeDrycontactArrayPort1Index=sensorProbeDrycontactArrayPort1Index, spSwitch66Status=spSwitch66Status, current4to20mASensorRearm=current4to20mASensorRearm, sensorProbePowerMeterWaitTimeout=sensorProbePowerMeterWaitTimeout, sensorProbeNoCameraDescription=sensorProbeNoCameraDescription, sensorHumidityHighWarningColor=sensorHumidityHighWarningColor, sensorProbeTemperatureArrayPort8Value=sensorProbeTemperatureArrayPort8Value, relaySensorIndex=relaySensorIndex, sensorWaterRopeSensorErrorDesc=sensorWaterRopeSensorErrorDesc, sensorDryContactTable=sensorDryContactTable, fuelAmountMaxValue=fuelAmountMaxValue, doorSensorValue=doorSensorValue, current4to20mASensorMaxVoltage=current4to20mASensorMaxVoltage, sensorAirflowLowWarning=sensorAirflowLowWarning, commonDescription=commonDescription)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeIRMSOnline=sensorProbeIRMSOnline, sensorProbeThermostatTemperatureArrayPort5EnableTime=sensorProbeThermostatTemperatureArrayPort5EnableTime, commonSensorSubPort=commonSensorSubPort, sensorFuelGoOffline=sensorFuelGoOffline, sensorProbeDrycontactArrayPort5Number=sensorProbeDrycontactArrayPort5Number, sensorProbeTemperatureArrayPort3LowCritical=sensorProbeTemperatureArrayPort3LowCritical, sensorProbeThermostatTemperatureArrayPort7LowLimitAction2=sensorProbeThermostatTemperatureArrayPort7LowLimitAction2, dcVoltageDelayHighCritical=dcVoltageDelayHighCritical, spRelayArray2_6Status=spRelayArray2_6Status, powerSensorId=powerSensorId, sensorProbeTemperatureArrayPort1ContTimeLowCritical=sensorProbeTemperatureArrayPort1ContTimeLowCritical, current4to20mASensorNormalDesc=current4to20mASensorNormalDesc, dcVoltageAmountMaxVoltage=dcVoltageAmountMaxVoltage, sensorProbeSwitchIndex=sensorProbeSwitchIndex, sensorProbeTypeTankSenderName=sensorProbeTypeTankSenderName, sensorProbeTemperatureArrayPort7HighWarning=sensorProbeTemperatureArrayPort7HighWarning, spTemperature4Status=spTemperature4Status, sensorProbeTempRelayActiveStatus=sensorProbeTempRelayActiveStatus, dcVoltageLowCritical=dcVoltageLowCritical, virtualSwitchSensorOnline=virtualSwitchSensorOnline, sensorProbeHumidityContTimeNormal=sensorProbeHumidityContTimeNormal, sensorFuelLowWarningColor=sensorFuelLowWarningColor, virtualAnalogSensorHighWarning=virtualAnalogSensorHighWarning, sensorProbeVirtualAnalogLowWarning=sensorProbeVirtualAnalogLowWarning, spRelayArray2Status=spRelayArray2Status, tankSenderSensorAcknowledge=tankSenderSensorAcknowledge, sensorTemperatureEntry=sensorTemperatureEntry, sensorProbeThermostatTemperatureArrayPort3LowLimit2=sensorProbeThermostatTemperatureArrayPort3LowLimit2, sensorProbeAudioAttachChannel=sensorProbeAudioAttachChannel, spVirtual9Status=spVirtual9Status, spTemperatureArray5_4Status=spTemperatureArray5_4Status, sensorProbeTemperatureArrayPort3GoOnline=sensorProbeTemperatureArrayPort3GoOnline, sensorOnDescription=sensorOnDescription, waterStatus=waterStatus, dcVoltagePort=dcVoltagePort, spVirtual10Status=spVirtual10Status, sensorProbeRelayArrayPort8Online=sensorProbeRelayArrayPort8Online, sensorSmokeGoOffline=sensorSmokeGoOffline, sensorRelayEntry=sensorRelayEntry, motionNormalColor=motionNormalColor, sensorDryContactGoOffline=sensorDryContactGoOffline, sensorDryContactPort8GoOnline=sensorDryContactPort8GoOnline, sensorProbeTemperatureArrayPort8HighCritical=sensorProbeTemperatureArrayPort8HighCritical, current4to20mASensorAmountMaxVoltage=current4to20mASensorAmountMaxVoltage, sensorProbeThermostatRelayControlPort=sensorProbeThermostatRelayControlPort, dcVoltageSensorPort=dcVoltageSensorPort, sensorProbeIRMSHighCritical=sensorProbeIRMSHighCritical, sensorProbeDrycontactArrayPort8=sensorProbeDrycontactArrayPort8, waterSensorStatus=waterSensorStatus, sensorTemperatureTable=sensorTemperatureTable, sensorProbeThermostatNormalAction1=sensorProbeThermostatNormalAction1, sensorProbeDrycontactArrayPort6Table=sensorProbeDrycontactArrayPort6Table, sensor4to20mATable=sensor4to20mATable, sensorProbeThermostatTemperatureArrayPort8GoOnline=sensorProbeThermostatTemperatureArrayPort8GoOnline, sensorProbePowerMeterCountRecievedPacket=sensorProbePowerMeterCountRecievedPacket, sensorSecurityAcknowledge=sensorSecurityAcknowledge, sensorPowerHighCriticalDesc=sensorPowerHighCriticalDesc, commonSensorErrorColor=commonSensorErrorColor, smokePort=smokePort, spVRMS2Status=spVRMS2Status, sensorProbeRelayArrayPort4RelayDescOn=sensorProbeRelayArrayPort4RelayDescOn, drycontactOffColor=drycontactOffColor, powerSensorMinValue=powerSensorMinValue, temperatureArrayDegree=temperatureArrayDegree, sensorFuelDelayError=sensorFuelDelayError, sensorProbeRelayArrayPort7Index=sensorProbeRelayArrayPort7Index, waterRopeSensorGoOffline=waterRopeSensorGoOffline, spRelayArray6_1Status=spRelayArray6_1Status, sensorDryContactSubPort=sensorDryContactSubPort, spTemperatureArray6_3Status=spTemperatureArray6_3Status, humidityDelayHighWarning=humidityDelayHighWarning, cfgWEBPasswordEnable=cfgWEBPasswordEnable, sensorProbeTemperatureArrayPort5ContTimeNormal=sensorProbeTemperatureArrayPort5ContTimeNormal, sensorProbeProductType=sensorProbeProductType, sensorProbeTemperatureArrayPort2LowCritical=sensorProbeTemperatureArrayPort2LowCritical, sensorProbeThermostatTemperatureArrayPort8Mode=sensorProbeThermostatTemperatureArrayPort8Mode, sensorSmokeStatus=sensorSmokeStatus, dryContactSensorPort=dryContactSensorPort, sensorProbeIRMSCalendar=sensorProbeIRMSCalendar, cfgSMTPPassword=cfgSMTPPassword, temperatureEntry=temperatureEntry, sensorProbeTempDegreeRaw=sensorProbeTempDegreeRaw, sensorProbeTemperatureArrayPort5Online=sensorProbeTemperatureArrayPort5Online, fuelRearm=fuelRearm, sensorTemperatureLowCritical=sensorTemperatureLowCritical, humiditySensorDelayHighCritical=humiditySensorDelayHighCritical, sensorProbeTemperatureArrayPort2ContTimeHighCritical=sensorProbeTemperatureArrayPort2ContTimeHighCritical, sensorTemperatureArrayGoOffline=sensorTemperatureArrayGoOffline, sensorProbeRelayArrayPort8Table=sensorProbeRelayArrayPort8Table, sensorProbeTemperatureArrayPort2Number=sensorProbeTemperatureArrayPort2Number, sensorProbeTemperatureArrayPort8Table=sensorProbeTemperatureArrayPort8Table, dcVoltageSensorLowCritical=dcVoltageSensorLowCritical, sensorProbeStatusNumberCriticalAndError=sensorProbeStatusNumberCriticalAndError, sensorProbeThermostatTemperatureArrayPort7Value=sensorProbeThermostatTemperatureArrayPort7Value, humiditySensorSubPort=humiditySensorSubPort, temperatureSensorHighCritical=temperatureSensorHighCritical, dryContactSensorOffColor=dryContactSensorOffColor, sensorProbeSmtpPort=sensorProbeSmtpPort, sensorTankSenderNormalColor=sensorTankSenderNormalColor, sensorProbeRelayArrayPort1GoOnline=sensorProbeRelayArrayPort1GoOnline, sensorProbeRelayArrayPort5RelayAction=sensorProbeRelayArrayPort5RelayAction, powerRearm=powerRearm, sensorProbeVRMSLowWarning=sensorProbeVRMSLowWarning, sensorProbeThermostatTemperatureArrayPort5HighLimitAction2=sensorProbeThermostatTemperatureArrayPort5HighLimitAction2, temperatureArraySensorRearm=temperatureArraySensorRearm, sensorProbeTemperatureArrayPort4ContTimeLowCritical=sensorProbeTemperatureArrayPort4ContTimeLowCritical, sensorTankSenderDelayHighCritical=sensorTankSenderDelayHighCritical, sensorProbeTemperatureArrayPort7URL=sensorProbeTemperatureArrayPort7URL, sensorTemperatureDisplayStyle=sensorTemperatureDisplayStyle, spRelayArray3_3Status=spRelayArray3_3Status, sensorThermostatHighWarning=sensorThermostatHighWarning, dcVoltageSensorLowCriticalDesc=dcVoltageSensorLowCriticalDesc, fuelSensorDeviceIndex=fuelSensorDeviceIndex, doorSensorUnlockPeriod=doorSensorUnlockPeriod, summary=summary, sensorProbeVRMSRelayActiveStatus=sensorProbeVRMSRelayActiveStatus, sensorProbeRelayArrayPort6RelayAction=sensorProbeRelayArrayPort6RelayAction, sensorPowerHighWarningColor=sensorPowerHighWarningColor, temperatureSensorDelayHighCritical=temperatureSensorDelayHighCritical, sensorProbeVRMSRelayCycleTime=sensorProbeVRMSRelayCycleTime, temperatureArraySensorGoOffline=temperatureArraySensorGoOffline, cfgVPNServerPort=cfgVPNServerPort, sensorProbeTemperatureArrayPort5Value=sensorProbeTemperatureArrayPort5Value, sensorPowerSubPort=sensorPowerSubPort, airflowSensorHighCriticalColor=airflowSensorHighCriticalColor, smokeCriticalColor=smokeCriticalColor, sensorDCvoltageDelayLowCritical=sensorDCvoltageDelayLowCritical, smokeSensorSubPort=smokeSensorSubPort, sensorProbeThermostatTemperatureArrayPort5LowLimitAction2=sensorProbeThermostatTemperatureArrayPort5LowLimitAction2, sensorProbeTemperatureArrayPort7HighCritical=sensorProbeTemperatureArrayPort7HighCritical, sensorProbeTemperatureArrayPort2Online=sensorProbeTemperatureArrayPort2Online, sensorProbeTemperatureArrayPort8LowCritical=sensorProbeTemperatureArrayPort8LowCritical, tankSenderRearm=tankSenderRearm, sensorProbeSoundDetectorURL=sensorProbeSoundDetectorURL, thermostatSensorEntry=thermostatSensorEntry, fuelStatus=fuelStatus, sensorProbeTemperatureArrayPort6DegreeRaw=sensorProbeTemperatureArrayPort6DegreeRaw, sensorIntelligentPort2GoOnline=sensorIntelligentPort2GoOnline, sensorProbeMailSubject=sensorProbeMailSubject, spSwitch3Status=spSwitch3Status, sensor4to20mASensorErrorColor=sensor4to20mASensorErrorColor, sensorTankSenderHighCriticalColor=sensorTankSenderHighCriticalColor, sensorTemperatureArrayDelayLowWarning=sensorTemperatureArrayDelayLowWarning, sensorTemperatureArraySerialNumber=sensorTemperatureArraySerialNumber, sensorFuelRearm=sensorFuelRearm, sensorProbeEnergyCalendar=sensorProbeEnergyCalendar, sensorProbeThermostatTemperatureArrayPort3Index=sensorProbeThermostatTemperatureArrayPort3Index, dcVoltageHighCriticalDescription=dcVoltageHighCriticalDescription, sensorHumidityPort=sensorHumidityPort, temperatureArrayHighWarningDescription=temperatureArrayHighWarningDescription, sensorLowCriticalDescription=sensorLowCriticalDescription, sensorDCvoltageRearm=sensorDCvoltageRearm, actionMaxResend=actionMaxResend, temperatureArrayOffset=temperatureArrayOffset, sensorProbeIRMSHighWarning=sensorProbeIRMSHighWarning, sirenSensorStatus=sirenSensorStatus, airflowSensorDisplayStyle=airflowSensorDisplayStyle, sensorProbeChecksum=sensorProbeChecksum, sensorProbeDrycontactArrayPort5GoOnline=sensorProbeDrycontactArrayPort5GoOnline, sensorFuelHighWarningColor=sensorFuelHighWarningColor, tankSenderHighCriticalColor=tankSenderHighCriticalColor, sensorDryContactPort1GoOnline=sensorDryContactPort1GoOnline, temperatureArrayTable=temperatureArrayTable, temperatureArrayLowCriticalColor=temperatureArrayLowCriticalColor, sensorProbeHumidityOpenURL=sensorProbeHumidityOpenURL, fuelSensorHighWarningDesc=fuelSensorHighWarningDesc, sensorTemperatureSensorErrorDesc=sensorTemperatureSensorErrorDesc, sirenPort=sirenPort, cfgSNMPv3AuthProtocol=cfgSNMPv3AuthProtocol, sensorProbeRelayArrayPort2Number=sensorProbeRelayArrayPort2Number, sensorTankSenderHighCritical=sensorTankSenderHighCritical, sensorTemperatureArrayRearm=sensorTemperatureArrayRearm, sensorACvoltageStatus=sensorACvoltageStatus, sensorProbeRelayArrayPort3NormalState=sensorProbeRelayArrayPort3NormalState, powerSensorTable=powerSensorTable, sensorRelayTable=sensorRelayTable, sensorProbeRelayArrayPort2=sensorProbeRelayArrayPort2, sensorProbeSwitchWaterRopeImpedance=sensorProbeSwitchWaterRopeImpedance, sensorProbeHumidityEmailTrapSchedule=sensorProbeHumidityEmailTrapSchedule, sensorProbeTemperatureArrayPort2DegreeRaw=sensorProbeTemperatureArrayPort2DegreeRaw, devicePowerMeterCountCRCerrorPacket=devicePowerMeterCountCRCerrorPacket, smokeStatus=smokeStatus, sensorProbeTemperatureArrayPort4Table=sensorProbeTemperatureArrayPort4Table, temperatureSensorId=temperatureSensorId, dryContactSensorOutputManualCycleTime=dryContactSensorOutputManualCycleTime, sensorProbeTemperatureArrayPort7Value=sensorProbeTemperatureArrayPort7Value, temperatureSensorLowWarning=temperatureSensorLowWarning, temperatureSensorRearm=temperatureSensorRearm, spSwitch18Status=spSwitch18Status, sensorProbeThermostatTemperatureArrayPort2RelayControlPort=sensorProbeThermostatTemperatureArrayPort2RelayControlPort, sensorProbeTemperatureArrayPort7OpenURL=sensorProbeTemperatureArrayPort7OpenURL, sensorTankSenderAcknowledge=sensorTankSenderAcknowledge, sensorTemperatureArraySubPort=sensorTemperatureArraySubPort, sensorProbeThermostatTemperatureArrayPort7LowLimit1=sensorProbeThermostatTemperatureArrayPort7LowLimit1, sensorProbeNotifyBoot=sensorProbeNotifyBoot, sensorId=sensorId, spSwitch30Status=spSwitch30Status, sensorProbeVirtualAnalogDescription=sensorProbeVirtualAnalogDescription, sensor4to20mADelayLowWarning=sensor4to20mADelayLowWarning, drycontactTable=drycontactTable, sensorProbeTemperatureArrayPort4LowWarning=sensorProbeTemperatureArrayPort4LowWarning, sensorProbeTemperatureArrayPort4Offset=sensorProbeTemperatureArrayPort4Offset, virtualSwitchSensorContTimeHighCritical=virtualSwitchSensorContTimeHighCritical, spVirtual8Status=spVirtual8Status, virtualAnalogSensorDescription=virtualAnalogSensorDescription, spSwitch38Status=spSwitch38Status, airflowDisplayStyle=airflowDisplayStyle, sensorAcknowledge=sensorAcknowledge, airflowSensorId=airflowSensorId, sensorProbeTemperatureArrayPort5=sensorProbeTemperatureArrayPort5, sensorHumidityLowWarningColor=sensorHumidityLowWarningColor, dcVoltageSensorDescription=dcVoltageSensorDescription, virtualSwitchSensorId=virtualSwitchSensorId, sensorIntelligentPort1GoOnline=sensorIntelligentPort1GoOnline, sensorProbeSendMail=sensorProbeSendMail, sensorProbeSnmpPort=sensorProbeSnmpPort, sensorProbeTemperatureArrayPort1OpenURL=sensorProbeTemperatureArrayPort1OpenURL, sensorProbeSoundDetectorContTimeHighCritical=sensorProbeSoundDetectorContTimeHighCritical, sensorProbeTemperatureArrayPort7ContTimeLowCritical=sensorProbeTemperatureArrayPort7ContTimeLowCritical, sensorWaterRopeType=sensorWaterRopeType, sensorProbeDrycontactArrayPort8ControlMode=sensorProbeDrycontactArrayPort8ControlMode, sensorProbeThermostatTemperatureArrayPort3HighLimit1=sensorProbeThermostatTemperatureArrayPort3HighLimit1, current4to20mALowWarningColor=current4to20mALowWarningColor, sensorProbeRelayArrayPort2Online=sensorProbeRelayArrayPort2Online, sensorProbeDrycontactArrayPort4=sensorProbeDrycontactArrayPort4, sensorHighCriticalColor=sensorHighCriticalColor, spSwitch36Status=spSwitch36Status, deviceIntelligentIndex=deviceIntelligentIndex, sensor4to20mAAmountMaxVoltage=sensor4to20mAAmountMaxVoltage, acVoltageSensorNormalColor=acVoltageSensorNormalColor, sensorThermostatNormalColor=sensorThermostatNormalColor, sensorPowerTable=sensorPowerTable, sensorProbeDrycontactArrayPort3Index=sensorProbeDrycontactArrayPort3Index, sirenSensorManualAction=sirenSensorManualAction, sensor4to20mAEntry=sensor4to20mAEntry, humiditySensorOffset=humiditySensorOffset, sensorSirenManualCycleTime=sensorSirenManualCycleTime, sensorRelayGoOffline=sensorRelayGoOffline, temperatureSensorDeviceIndex=temperatureSensorDeviceIndex, sirenSensorIndex=sirenSensorIndex, sensorProbeSnmpTrapPort=sensorProbeSnmpTrapPort, spVirtual2Status=spVirtual2Status, cfgServerPort=cfgServerPort, powerHighWarningColor=powerHighWarningColor, sensorSmokeEntry=sensorSmokeEntry, relayManualCycleTime=relayManualCycleTime, sensorTemperatureArrayDelayLowCritical=sensorTemperatureArrayDelayLowCritical, sensorProbeIRMSEmailTrapLimit=sensorProbeIRMSEmailTrapLimit, sensorRelayManualAction=sensorRelayManualAction, sensorFuelValue=sensorFuelValue, sirenOnColor=sirenOnColor, spTemperatureArray3_8Status=spTemperatureArray3_8Status, sensor4to20mAAmountBaseVoltage=sensor4to20mAAmountBaseVoltage, dcVoltageSensorEntry=dcVoltageSensorEntry)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeTempContTimeNormal=sensorProbeTempContTimeNormal, sensorProbeEnergyRaw=sensorProbeEnergyRaw, sensorProbeNoCameraSensorIndex=sensorProbeNoCameraSensorIndex, temperatureSensorPort=temperatureSensorPort, sensorProbeRequestResendTrap=sensorProbeRequestResendTrap, sensorProbeDrycontactArrayPort7Description=sensorProbeDrycontactArrayPort7Description, sensorProbeTempEmailTrapLimit=sensorProbeTempEmailTrapLimit, tankSenderSensorHighCritical=tankSenderSensorHighCritical, sensorProbeTemperatureArrayPort2DegreeType=sensorProbeTemperatureArrayPort2DegreeType, humiditySensorDescription=humiditySensorDescription, sensorProbeIRMSSirenAction=sensorProbeIRMSSirenAction, dcVoltageSensorAmountBaseVoltage=dcVoltageSensorAmountBaseVoltage, commonSensorSensorNormalColor=commonSensorSensorNormalColor, sensorHumidityDelayError=sensorHumidityDelayError, sensorProbeThermostatTemperatureArrayPort1LowLimitAction2=sensorProbeThermostatTemperatureArrayPort1LowLimitAction2, sensorProbeTemperatureArrayPort6Rearm=sensorProbeTemperatureArrayPort6Rearm, sensorTemperatureArrayEntry=sensorTemperatureArrayEntry, sensorOnColor=sensorOnColor, sensorProbeThermostatTemperatureArrayPort2HighLimitAction2=sensorProbeThermostatTemperatureArrayPort2HighLimitAction2, sensorProbeHumidityTable=sensorProbeHumidityTable, sensorDCvoltageLowCriticalDesc=sensorDCvoltageLowCriticalDesc, sensorProbeRelayArrayPort2RelayAction=sensorProbeRelayArrayPort2RelayAction, sensorThermostatLowWarningDesc=sensorThermostatLowWarningDesc, spAnalogue7Status=spAnalogue7Status, dcVoltageSensorDelayLowCritical=dcVoltageSensorDelayLowCritical, spRelayArray7_3Status=spRelayArray7_3Status, sensorProbeTemperatureArrayPort1ContTimeNormal=sensorProbeTemperatureArrayPort1ContTimeNormal, sensorProbeEnergyEmailTrapLimit=sensorProbeEnergyEmailTrapLimit, sensorProbeRelayArrayPort8RelayDescOff=sensorProbeRelayArrayPort8RelayDescOff, sensorSecurityEntry=sensorSecurityEntry, sensor4to20mAMaxVoltage=sensor4to20mAMaxVoltage, sensorDoorAcknowledge=sensorDoorAcknowledge, sensorProbeVirtualAnalogUnit=sensorProbeVirtualAnalogUnit, sensorTankSenderSensorErrorDesc=sensorTankSenderSensorErrorDesc, spIRMSStatus=spIRMSStatus, spSwitch43Status=spSwitch43Status, sensorProbeHumiditySendMail=sensorProbeHumiditySendMail, sensorProbeTemperatureArrayPort2ContTimeNormal=sensorProbeTemperatureArrayPort2ContTimeNormal, thermostatSensorTable=thermostatSensorTable, commonGoOffline=commonGoOffline, current4to20mASensorDelayHighCritical=current4to20mASensorDelayHighCritical, temperatureArraySensorLowWarningColor=temperatureArraySensorLowWarningColor, sensorProbeSwitchAcknowledgement=sensorProbeSwitchAcknowledgement, sensorProbeTemperatureArrayPort5ContTimeHighCritical=sensorProbeTemperatureArrayPort5ContTimeHighCritical, current4to20mASensorGoOffline=current4to20mASensorGoOffline, sensor4to20mADescription=sensor4to20mADescription, sensorTankSenderRaw=sensorTankSenderRaw, temperatureArraySensorDeviceIndex=temperatureArraySensorDeviceIndex, tankSenderEntry=tankSenderEntry, sensorDoorUnlockPeriod=sensorDoorUnlockPeriod, fuelAmountBaseValue=fuelAmountBaseValue, sensorTemperatureSensorErrorColor=sensorTemperatureSensorErrorColor, drycontactType=drycontactType, sensorWaterNormalColor=sensorWaterNormalColor, sensorProbeDisplayLogo=sensorProbeDisplayLogo, sensorFuelDelayHighWarning=sensorFuelDelayHighWarning, airflowSensorPort=airflowSensorPort, cfgSMTPEMailFrom=cfgSMTPEMailFrom, sensorTemperatureSerialNumber=sensorTemperatureSerialNumber, sensorDryContactOnDesc=sensorDryContactOnDesc, powerLowWarningColor=powerLowWarningColor, airflowSensorDescription=airflowSensorDescription, temperatureSensorHighWarningColor=temperatureSensorHighWarningColor, sensorTankSenderUnit=sensorTankSenderUnit, sensorAirflowDelayHighCritical=sensorAirflowDelayHighCritical, sensorProbeDrycontactArrayPort1OutputDescOff=sensorProbeDrycontactArrayPort1OutputDescOff, sensorProbeTemperatureArrayPort1DegreeType=sensorProbeTemperatureArrayPort1DegreeType, spVRMS8Status=spVRMS8Status, virtualAnalogSensorContTimeLowWarning=virtualAnalogSensorContTimeLowWarning, sensorProbeTypeWaterName=sensorProbeTypeWaterName, dryContactSensorControlMode=dryContactSensorControlMode, powerSensorDelayLowWarning=powerSensorDelayLowWarning, sensorWaterCriticalColor=sensorWaterCriticalColor, sensorProbeRelayArrayPort5Online=sensorProbeRelayArrayPort5Online, sensorThermostatTable=sensorThermostatTable, sensorProbeTemperatureArrayPort6Number=sensorProbeTemperatureArrayPort6Number, sensorProbeDrycontactArrayPort1ControlMode=sensorProbeDrycontactArrayPort1ControlMode, motionSensorTable=motionSensorTable, sensorProbeThermostatTemperatureArrayPort7GoOnline=sensorProbeThermostatTemperatureArrayPort7GoOnline, spSenUnknownStatus=spSenUnknownStatus, humiditySensorId=humiditySensorId, sensorProbeDrycontactArrayPort1Direction=sensorProbeDrycontactArrayPort1Direction, sensorProbeTypeVirtualName=sensorProbeTypeVirtualName, relayGoOffline=relayGoOffline, dcVoltageSensorAcknowledge=dcVoltageSensorAcknowledge, virtualSensor=virtualSensor, powerDelayHighWarning=powerDelayHighWarning, spRelayArray8_8Status=spRelayArray8_8Status, sensorProbeType4to20MAName=sensorProbeType4to20MAName, powerSensorAcknowledge=powerSensorAcknowledge, sensorProbeDrycontactArrayPort6OutputDescOff=sensorProbeDrycontactArrayPort6OutputDescOff, spTemperatureArray7_5Status=spTemperatureArray7_5Status, spTemperatureArray6_8Status=spTemperatureArray6_8Status, powerSensorLowCriticalColor=powerSensorLowCriticalColor, sensorProbeThermostatTemperatureArrayPort4LowLimitAction2=sensorProbeThermostatTemperatureArrayPort4LowLimitAction2, sensorProbeDrycontactArrayPort1Description=sensorProbeDrycontactArrayPort1Description, humidityGoOffline=humidityGoOffline, current4to20mALowCriticalDescription=current4to20mALowCriticalDescription, sensorProbeTrapResend=sensorProbeTrapResend, smokeNormalColor=smokeNormalColor, sensorMotionId=sensorMotionId, humidityDelayLowWarning=humidityDelayLowWarning, sensorDoorCmd=sensorDoorCmd, deviceLicenseEntry=deviceLicenseEntry, sensorProbeRelayArrayPort3ControlMode=sensorProbeRelayArrayPort3ControlMode, sensor4to20mAHighWarningDesc=sensor4to20mAHighWarningDesc, sensorProbeDrycontactArrayPort2NormalState=sensorProbeDrycontactArrayPort2NormalState, cfgNTPMode=cfgNTPMode, tankSenderValue=tankSenderValue, dryContactSensorIndex=dryContactSensorIndex, dcVoltageSensorHighWarningDesc=dcVoltageSensorHighWarningDesc, dcVoltageSensorSensorErrorDesc=dcVoltageSensorSensorErrorDesc, sensorProbeEnergyRearm=sensorProbeEnergyRearm, sensorProbeSoundDetectorSensor=sensorProbeSoundDetectorSensor, sensorProbeSoftMotionSensorEntry=sensorProbeSoftMotionSensorEntry, sensorTemperatureAcknowledge=sensorTemperatureAcknowledge, current4to20mAId=current4to20mAId, spTemperatureArray5_8Status=spTemperatureArray5_8Status, sensorProbeSoundDetectorHighWarning=sensorProbeSoundDetectorHighWarning, spRelayArray7_7Status=spRelayArray7_7Status, fuelSensorHighCritical=fuelSensorHighCritical, smokeSensorDescription=smokeSensorDescription, drycontactControlMode=drycontactControlMode, deviceIntelligentInfo=deviceIntelligentInfo, spSensorDecimalValue=spSensorDecimalValue, cfgEMailMaxResend=cfgEMailMaxResend, motionGoOffline=motionGoOffline, smokeCriticalDescription=smokeCriticalDescription, sensorProbeThermostatLowLimitAction1=sensorProbeThermostatLowLimitAction1, sensorProbeTemperatureArrayPort1HighWarning=sensorProbeTemperatureArrayPort1HighWarning, airflowSensorIndex=airflowSensorIndex, powerSensorErrorDescription=powerSensorErrorDescription, sensorProbeMailMaxResend=sensorProbeMailMaxResend, sensorProbeSwitchEntry=sensorProbeSwitchEntry, powerSensorGoOffline=powerSensorGoOffline, waterRopeTable=waterRopeTable, sensorProbeHumidityEmailTrapInterval=sensorProbeHumidityEmailTrapInterval, cfgGSMConnectionMethod=cfgGSMConnectionMethod, drycontactPort=drycontactPort, sensorProbeThermostatTemperatureArrayPort7Description=sensorProbeThermostatTemperatureArrayPort7Description, sensorDCvoltageAcknowledge=sensorDCvoltageAcknowledge, airflowHighWarningDescription=airflowHighWarningDescription, sensorProbeDrycontactArrayPort1Status=sensorProbeDrycontactArrayPort1Status, spAnalogueStatus=spAnalogueStatus, sensorProbeDrycontactArrayPort2URL=sensorProbeDrycontactArrayPort2URL, sensorProbeThermostatTemperatureArrayPort8HighLimitAction1=sensorProbeThermostatTemperatureArrayPort8HighLimitAction1, sensorProbeDrycontactArrayPort7Status=sensorProbeDrycontactArrayPort7Status, spRelayArray2_8Status=spRelayArray2_8Status, sensorProbeVRMSDelayError=sensorProbeVRMSDelayError, sensorProbeTypeADE7763WattName=sensorProbeTypeADE7763WattName, sensorTankSenderDelayLowWarning=sensorTankSenderDelayLowWarning, sirenSensorDeviceIndex=sirenSensorDeviceIndex, sensorProbeEnergySirenActiveStatus=sensorProbeEnergySirenActiveStatus, sensorProbeTypeSmokeName=sensorProbeTypeSmokeName, relaySensorEntry=relaySensorEntry, spRelayArray8_3Status=spRelayArray8_3Status, smokeSensorPort=smokeSensorPort, spSensorStatusName=spSensorStatusName, acVoltageId=acVoltageId, sensorProbeTemperatureArrayPort4Rearm=sensorProbeTemperatureArrayPort4Rearm, sensorProbeHumidityEmailInterval=sensorProbeHumidityEmailInterval, sensorDryContactOnColor=sensorDryContactOnColor, tankSenderLowWarning=tankSenderLowWarning, sensorProbeTemperatureArrayPort4LowCritical=sensorProbeTemperatureArrayPort4LowCritical, current4to20mADelayError=current4to20mADelayError, sensorProbeTemperatureArrayPort2Status=sensorProbeTemperatureArrayPort2Status, spTemperatureArray3_2Status=spTemperatureArray3_2Status, sensorDCvoltageIndex=sensorDCvoltageIndex, smokeSensorTable=smokeSensorTable, sensorPowerStatus=sensorPowerStatus, sensorProbeThermostatTemperatureArrayPort5LowLimitAction1=sensorProbeThermostatTemperatureArrayPort5LowLimitAction1, sensorProbeEnergySensorEntry=sensorProbeEnergySensorEntry, waterRopeSensorSensorErrorColor=waterRopeSensorSensorErrorColor, waterRopeRaw=waterRopeRaw, temperatureArrayLowWarningColor=temperatureArrayLowWarningColor, sensorProbeTemperatureArrayPort1Index=sensorProbeTemperatureArrayPort1Index, spSwitch58Status=spSwitch58Status, sensorValue=sensorValue, airflowSensorRearm=airflowSensorRearm, temperatureArrayId=temperatureArrayId, sensorSirenOnColor=sensorSirenOnColor, thermostatSensorLowWarning=thermostatSensorLowWarning, sensorProbeVRMSOpenURL=sensorProbeVRMSOpenURL, sensorProbeSoftMotionStatus=sensorProbeSoftMotionStatus, acVoltageSensorDescription=acVoltageSensorDescription, dcVoltageSensorAmountMaxVoltage=dcVoltageSensorAmountMaxVoltage, sensorFuelHighWarning=sensorFuelHighWarning, cfgSMTPServer=cfgSMTPServer, sensorThermostatSubPort=sensorThermostatSubPort, sensorProbeHumidityDelayError=sensorProbeHumidityDelayError, sensorProbeCameraServerClientGoOnline=sensorProbeCameraServerClientGoOnline, devicePowerMeterTable=devicePowerMeterTable, sensorWaterAcknowledge=sensorWaterAcknowledge, sensorProbeRelayArrayPort5Description=sensorProbeRelayArrayPort5Description, cfgSystemDescription=cfgSystemDescription, licenses=licenses, sensorProbeRelayArrayPort3URL=sensorProbeRelayArrayPort3URL, temperatureArraySensorHighWarningDesc=temperatureArraySensorHighWarningDesc, sensorThermostatDisplayStyle=sensorThermostatDisplayStyle, sensorProbeHumidityContTimeLowCritical=sensorProbeHumidityContTimeLowCritical, sensorProbeTempEmailTrapSchedule=sensorProbeTempEmailTrapSchedule, powerAcknowledge=powerAcknowledge, spSwitch33Status=spSwitch33Status, relayPort=relayPort, powerValueFormatFloat=powerValueFormatFloat, acVoltageStatus=acVoltageStatus, humiditySensorLowCriticalDesc=humiditySensorLowCriticalDesc, spRelayArray1Status=spRelayArray1Status, sensorProbeIRMSLowCritical=sensorProbeIRMSLowCritical, sensorEntry=sensorEntry, sensorProbeTemperatureArrayPort7Table=sensorProbeTemperatureArrayPort7Table, airflowNormalColor=airflowNormalColor, fuelNormalColor=fuelNormalColor, sensorUnit=sensorUnit, acVoltageSubPort=acVoltageSubPort, sensorThermostatIndex=sensorThermostatIndex, fuelDelayHighCritical=fuelDelayHighCritical, sensorProbeWattHoursReset=sensorProbeWattHoursReset, virtualSwitchSensorEmailTrapLimit=virtualSwitchSensorEmailTrapLimit, sensorProbeVirtualAnalogCalendar=sensorProbeVirtualAnalogCalendar, sensorProbeRelayArrayPort5Table=sensorProbeRelayArrayPort5Table, sensorProbeVirtualSwitchSensorEntry=sensorProbeVirtualSwitchSensorEntry, sensorProbeSwitchSirenCycleTime=sensorProbeSwitchSirenCycleTime, sensorProbeTemperatureArraySensor=sensorProbeTemperatureArraySensor, sensorProbeTypeAirflowName=sensorProbeTypeAirflowName, sensorHumidityLowCriticalColor=sensorHumidityLowCriticalColor, fuelSensorDelayLowCritical=fuelSensorDelayLowCritical, cfgSNMPv3Disable=cfgSNMPv3Disable, spTemperatureArray4_4Status=spTemperatureArray4_4Status, sensorProbeTemperatureArrayPort2Description=sensorProbeTemperatureArrayPort2Description, sensorAirflowDelayHighWarning=sensorAirflowDelayHighWarning, cfgDeviceUseDHCP=cfgDeviceUseDHCP, cfgEnableNotiFilteringOnBoot=cfgEnableNotiFilteringOnBoot, cfgSNMPPort=cfgSNMPPort, airflowGoOffline=airflowGoOffline, sensorProbeHumiditySirenDelayAlarm=sensorProbeHumiditySirenDelayAlarm, sensorProbeRelayArrayPort5Number=sensorProbeRelayArrayPort5Number, waterSensorCriticalDesc=waterSensorCriticalDesc, current4to20mASensorErrorColor=current4to20mASensorErrorColor, dcVoltageSensorNormalColor=dcVoltageSensorNormalColor, smokeSensorGoOffline=smokeSensorGoOffline, spSwitch40Status=spSwitch40Status, sensorProbeTemperatureArrayPort6=sensorProbeTemperatureArrayPort6, sensorProbeRelayArrayPort8Index=sensorProbeRelayArrayPort8Index, relaySensorManualAction=relaySensorManualAction, sensorProbeThermostatTemperatureArrayPort7HighLimit1=sensorProbeThermostatTemperatureArrayPort7HighLimit1, waterRopeSensorSensorErrorDesc=waterRopeSensorSensorErrorDesc, sensorProbeThermostatTemperatureArrayPort4HighLimitAction2=sensorProbeThermostatTemperatureArrayPort4HighLimitAction2, spTemperatureArray5_1Status=spTemperatureArray5_1Status, sensorProbeTemperatureArrayPort5Rearm=sensorProbeTemperatureArrayPort5Rearm, dryContactSensorNormalDesc=dryContactSensorNormalDesc, sensorProbeSensorType=sensorProbeSensorType, sensorProbeEnergyStatus=sensorProbeEnergyStatus, spRelayArray2_7Status=spRelayArray2_7Status)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeTemperatureArrayPort4Online=sensorProbeTemperatureArrayPort4Online, powerIndex=powerIndex, sensorProbeDrycontactArrayPort4Status=sensorProbeDrycontactArrayPort4Status, spRelayArray4_5Status=spRelayArray4_5Status, current4to20mAValue=current4to20mAValue, sensorValueFormatFloat=sensorValueFormatFloat, sensorProbeRelayArrayPort7OpenURL=sensorProbeRelayArrayPort7OpenURL, sensorDryContactOutputManualAction=sensorDryContactOutputManualAction, fuelValue=fuelValue, sensorDryContactOffColor=sensorDryContactOffColor, cfgSNMPv3PrivPassword=cfgSNMPv3PrivPassword, sensorProbeRelayArrayPort2Index=sensorProbeRelayArrayPort2Index, sensor4to20mAHighCriticalDesc=sensor4to20mAHighCriticalDesc, humiditySensorLowWarning=humiditySensorLowWarning, sensorProbeDrycontactArrayPort2ControlMode=sensorProbeDrycontactArrayPort2ControlMode, dcVoltageNormalDescription=dcVoltageNormalDescription, commonSensorIndex=commonSensorIndex, sensorProbeTemperatureArrayPort8DegreeRaw=sensorProbeTemperatureArrayPort8DegreeRaw, sensorProbeThermostatTemperatureArrayPort4Mode=sensorProbeThermostatTemperatureArrayPort4Mode, sensorProbeCameraServerClientOnline=sensorProbeCameraServerClientOnline, fuelSensorTable=fuelSensorTable, sensorThermostatDelayLowWarning=sensorThermostatDelayLowWarning, temperatureArraySensorHighCriticalDesc=temperatureArraySensorHighCriticalDesc, sensorProbeHumidityRelayCycleTime=sensorProbeHumidityRelayCycleTime, commonId=commonId, acVoltageSensorAcknowledge=acVoltageSensorAcknowledge, virtualAnalogSensorContTimeHighWarning=virtualAnalogSensorContTimeHighWarning, waterRopeSensorErrorDescription=waterRopeSensorErrorDescription, spRelayArray7_2Status=spRelayArray7_2Status, tankSenderLowWarningColor=tankSenderLowWarningColor, fuelSensorLowWarningColor=fuelSensorLowWarningColor, sensorProbeRelayArrayPort4RelayAction=sensorProbeRelayArrayPort4RelayAction, spAnalogue3Status=spAnalogue3Status, sensorTemperatureHighCriticalColor=sensorTemperatureHighCriticalColor, current4to20mASensorHighCriticalColor=current4to20mASensorHighCriticalColor, sensorProbeVirtualAnalogRaw=sensorProbeVirtualAnalogRaw, securitySensorId=securitySensorId, waterSensorDescription=waterSensorDescription, sensorTemperatureArrayUnit=sensorTemperatureArrayUnit, sensorSirenOffDesc=sensorSirenOffDesc, virtualAnalogSensorContTimeHighCritical=virtualAnalogSensorContTimeHighCritical, sirenDescription=sirenDescription, sensorProbeTemperatureArrayPort8ContTimeLowWarning=sensorProbeTemperatureArrayPort8ContTimeLowWarning, sensorProbeTemperatureArrayPort6Table=sensorProbeTemperatureArrayPort6Table, sensorHumidityRaw=sensorHumidityRaw, sensorThermostatLowCriticalColor=sensorThermostatLowCriticalColor, sensorFuelId=sensorFuelId, dcVoltageSensorDelayNormal=dcVoltageSensorDelayNormal, airflowSensorGoOffline=airflowSensorGoOffline, sensorDescription=sensorDescription, commonSensorId=commonSensorId, doorOpenPeriod=doorOpenPeriod, spTemperatureArray4_6Status=spTemperatureArray4_6Status, sensorProbeDrycontactArrayPort6Online=sensorProbeDrycontactArrayPort6Online, drycontactOutputManualCycleTime=drycontactOutputManualCycleTime, humiditySensorSensorErrorDesc=humiditySensorSensorErrorDesc, sensorWaterRopeUnit=sensorWaterRopeUnit, temperatureRaw=temperatureRaw, sensorProbeDrycontactArrayPort7GoOnline=sensorProbeDrycontactArrayPort7GoOnline, spVRMS6Status=spVRMS6Status, sirenOffDescription=sirenOffDescription, sensorProbeRelayArrayPort6RelayCycleTime=sensorProbeRelayArrayPort6RelayCycleTime, sensorProbeThermostatTemperatureArrayPort4Online=sensorProbeThermostatTemperatureArrayPort4Online, motionSensorEntry=motionSensorEntry, spVirtual18Status=spVirtual18Status, sensorProbeThermostatTemperatureArrayPort7HighLimitAction1=sensorProbeThermostatTemperatureArrayPort7HighLimitAction1, sensorProbeThermostatTemperatureArrayPort1Online=sensorProbeThermostatTemperatureArrayPort1Online, sensorPowerLowWarningDesc=sensorPowerLowWarningDesc, sensorStatus=sensorStatus, actionEntry=actionEntry, deviceLicensePmsCount=deviceLicensePmsCount, sensor4to20mAId=sensor4to20mAId, secDevice=secDevice, sensorProbeSnmpIndexingMode=sensorProbeSnmpIndexingMode, sensorProbeRelayArrayPort7NormalState=sensorProbeRelayArrayPort7NormalState, sensorProbeRelayArrayPort8=sensorProbeRelayArrayPort8, humiditySensorLowWarningDesc=humiditySensorLowWarningDesc, humidityDisplayStyle=humidityDisplayStyle, temperatureArrayHighWarningColor=temperatureArrayHighWarningColor, virtualAnalogSensorContTimeLowCritical=virtualAnalogSensorContTimeLowCritical, sensorOffDescription=sensorOffDescription, sensorACvoltageCriticalColor=sensorACvoltageCriticalColor, waterRopeSensorStatus=waterRopeSensorStatus, actionIndex=actionIndex, sensorDryContactStatus=sensorDryContactStatus, temperatureSubPort=temperatureSubPort, sensorProbeSendTrapsAlive=sensorProbeSendTrapsAlive, sensorProbeSwitchWaterRopeRaw=sensorProbeSwitchWaterRopeRaw, motionCriticalDescription=motionCriticalDescription, fuelSensorRearm=fuelSensorRearm, dcVoltageSensorSensorErrorColor=dcVoltageSensorSensorErrorColor, sensorProbeRelayArrayPort1Table=sensorProbeRelayArrayPort1Table, sensor4to20mADelayHighWarning=sensor4to20mADelayHighWarning, sensorWaterRopeGoOffline=sensorWaterRopeGoOffline, motionSensorCriticalDesc=motionSensorCriticalDesc, sensorProbeDrycontactArrayPort5Status=sensorProbeDrycontactArrayPort5Status, spEnergy2Status=spEnergy2Status, sensorTemperatureNormalDesc=sensorTemperatureNormalDesc, sensorProbeEnergyContTimeLowWarning=sensorProbeEnergyContTimeLowWarning, sensorProbeRelayArrayPort1URL=sensorProbeRelayArrayPort1URL, sensor4to20mAOffset=sensor4to20mAOffset, sensor4to20mAHighWarningColor=sensor4to20mAHighWarningColor, dcVoltageSensorHighCritical=dcVoltageSensorHighCritical, tankSenderSensorDeviceIndex=tankSenderSensorDeviceIndex, tankSenderLowCriticalDescription=tankSenderLowCriticalDescription, spTemperatureArray7_1Status=spTemperatureArray7_1Status, sensorProbeWattHoursSensor=sensorProbeWattHoursSensor, motionSensorNormalDesc=motionSensorNormalDesc, dryContactSensorEntry=dryContactSensorEntry, powerNormalColor=powerNormalColor, sensorProbeTemperatureArrayPort1=sensorProbeTemperatureArrayPort1, sensorProbeTemperatureArrayPort3Value=sensorProbeTemperatureArrayPort3Value, sensorProbeRelayArrayPort4Table=sensorProbeRelayArrayPort4Table, sensorProbeVirtualAnalogDelayError=sensorProbeVirtualAnalogDelayError, sensorRelayOnColor=sensorRelayOnColor, fuelNormalDescription=fuelNormalDescription, sensorTable=sensorTable, securityPort=securityPort, spSwitch9Status=spSwitch9Status, sensorProbeRelayArrayPort3Table=sensorProbeRelayArrayPort3Table, doorSensorEntry=doorSensorEntry, fuelSensorLowCriticalDesc=fuelSensorLowCriticalDesc, sirenSensorGoOffline=sirenSensorGoOffline, sensorDryContactPort12GoOnline=sensorDryContactPort12GoOnline, temperatureArraySensorDelayHighWarning=temperatureArraySensorDelayHighWarning, deviceLicenseExpTotal=deviceLicenseExpTotal, sensorWaterRopeDescription=sensorWaterRopeDescription, sensorTemperaturePort=sensorTemperaturePort, sensorAirflowDelayNormal=sensorAirflowDelayNormal, deviceLicenseStatus=deviceLicenseStatus, sensorProbeDrycontactArrayPort6ContTimeNormal=sensorProbeDrycontactArrayPort6ContTimeNormal, sensorProbeRelayArrayPort8ControlMode=sensorProbeRelayArrayPort8ControlMode, sensorProbeThermostatTemperatureArrayPort6Description=sensorProbeThermostatTemperatureArrayPort6Description, spVirtual16Status=spVirtual16Status, waterSensorDeviceIndex=waterSensorDeviceIndex, sensorProbeFirmwareVersion=sensorProbeFirmwareVersion, dcVoltageSensorDelayLowWarning=dcVoltageSensorDelayLowWarning, tankSenderDisplayStyle=tankSenderDisplayStyle, sensorProbeDrycontactArrayPort5Index=sensorProbeDrycontactArrayPort5Index, sensorProbeHumidityAtoDTypeUnit=sensorProbeHumidityAtoDTypeUnit, sensorSmokeTable=sensorSmokeTable, sensor4to20mAHighCritical=sensor4to20mAHighCritical, sensorProbeRelayArrayPort3Index=sensorProbeRelayArrayPort3Index, temperatureArrayUnit=temperatureArrayUnit, sensorProbeNoCameraSensorEntry=sensorProbeNoCameraSensorEntry, drycontactNormalState=drycontactNormalState, sensorProbeDrycontactArrayPort1Table=sensorProbeDrycontactArrayPort1Table, sensorProbeDrycontactArrayPort3=sensorProbeDrycontactArrayPort3, spSwitch23Status=spSwitch23Status, licenseAccessUsers=licenseAccessUsers, sensorProbeSoundDetectorHighCritical=sensorProbeSoundDetectorHighCritical, spSensorProbeKeepAlive=spSensorProbeKeepAlive, sensorDryContactEntry=sensorDryContactEntry, sensorProbeTrapResendInterval=sensorProbeTrapResendInterval, sensorSmokeCriticalDesc=sensorSmokeCriticalDesc, motionSensorDeviceIndex=motionSensorDeviceIndex, sensorMotionDescription=sensorMotionDescription, dryContactSensorType=dryContactSensorType, sensorProbeSMTPLogin=sensorProbeSMTPLogin, spRelayArray4_6Status=spRelayArray4_6Status, sensor4to20mAUnit=sensor4to20mAUnit, sensorProbeDrycontactArrayPort5NormalState=sensorProbeDrycontactArrayPort5NormalState, sensor4to20mAHighWarning=sensor4to20mAHighWarning, sensorAirflowSensorErrorColor=sensorAirflowSensorErrorColor, sensorProbeThermostatTemperatureArrayPort8LowLimitAction1=sensorProbeThermostatTemperatureArrayPort8LowLimitAction1, sensorThermostatPort=sensorThermostatPort, deviceDryContactTable=deviceDryContactTable, waterRopeNormalDescription=waterRopeNormalDescription, waterDescription=waterDescription, sensorProbeTemperatureArrayPort1LowWarning=sensorProbeTemperatureArrayPort1LowWarning, sensorWaterNormalDesc=sensorWaterNormalDesc, acVoltageSensorStatus=acVoltageSensorStatus, spSwitch50Status=spSwitch50Status, sensorProbeThermostatTemperatureArrayPort3LowLimitAction2=sensorProbeThermostatTemperatureArrayPort3LowLimitAction2, sensorTemperatureDegree=sensorTemperatureDegree, sensorProbeVRMSSirenCycleTime=sensorProbeVRMSSirenCycleTime, temperatureArrayDelayHighCritical=temperatureArrayDelayHighCritical, dcVoltageMaxVoltage=dcVoltageMaxVoltage, temperatureArrayDelayNormal=temperatureArrayDelayNormal, sensorProbeDrycontactArrayPort3URL=sensorProbeDrycontactArrayPort3URL, sensorProbeDrycontactArrayPort4OpenURL=sensorProbeDrycontactArrayPort4OpenURL, sensorDCvoltageHighCriticalDesc=sensorDCvoltageHighCriticalDesc, spRelayArray3_1Status=spRelayArray3_1Status, temperatureArraySensorDelayLowWarning=temperatureArraySensorDelayLowWarning, sensorAirflowHighCriticalDesc=sensorAirflowHighCriticalDesc, sensorProbeRelayArrayPort6RelayDescOff=sensorProbeRelayArrayPort6RelayDescOff, sensorAirflowHighWarningColor=sensorAirflowHighWarningColor, temperatureArrayDelayError=temperatureArrayDelayError, spSensorName=spSensorName, secSummary=secSummary, temperatureSensorHighCriticalDesc=temperatureSensorHighCriticalDesc, spSwitch39Status=spSwitch39Status, sensorProbeRelayArrayPort3Status=sensorProbeRelayArrayPort3Status, thermostatSensorLowCriticalDesc=thermostatSensorLowCriticalDesc, doorSensorIndex=doorSensorIndex, temperatureArraySensorId=temperatureArraySensorId, dcVoltageDescription=dcVoltageDescription, temperatureSensorIndex=temperatureSensorIndex, sensorProbeVRMSSirenDelayAlarm=sensorProbeVRMSSirenDelayAlarm, spTemperatureArray8_6Status=spTemperatureArray8_6Status, spRelayArray3_4Status=spRelayArray3_4Status, sensorProbeTemperatureArrayPort8ContTimeHighCritical=sensorProbeTemperatureArrayPort8ContTimeHighCritical, sensorProbeDrycontactArrayPort5Table=sensorProbeDrycontactArrayPort5Table, sensorProbeIRMSRelayCycleTime=sensorProbeIRMSRelayCycleTime, sensorProbeRelayArrayPort6GoOnline=sensorProbeRelayArrayPort6GoOnline, sensorProbeTemperatureArrayPort1DatacollectType=sensorProbeTemperatureArrayPort1DatacollectType, sensorProbeTrapDestination=sensorProbeTrapDestination, humiditySensorPort=humiditySensorPort, sensorProbeNumberOfSensorPort=sensorProbeNumberOfSensorPort, temperatureUnit=temperatureUnit, motionStatus=motionStatus, virtualAnalogSensorLowWarning=virtualAnalogSensorLowWarning, sensorProbeVirtualSwitchAcknowledgement=sensorProbeVirtualSwitchAcknowledgement, waterRopeId=waterRopeId, cfgGraphDataCollectionPeriod=cfgGraphDataCollectionPeriod, sensorProbeCameraRotate=sensorProbeCameraRotate, sensorProbeTemperatureArrayPort5ContTimeHighWarning=sensorProbeTemperatureArrayPort5ContTimeHighWarning, sensorTankSenderLowCriticalColor=sensorTankSenderLowCriticalColor, dryContactSensorNormalState=dryContactSensorNormalState, sensorProbeThermostatTemperatureArrayPort1HighLimitAction1=sensorProbeThermostatTemperatureArrayPort1HighLimitAction1, humidityLowWarningColor=humidityLowWarningColor, cfgGSMIdleTimeout=cfgGSMIdleTimeout, sensorProbeTemperatureArrayPort5DegreeRaw=sensorProbeTemperatureArrayPort5DegreeRaw, spSwitch7Status=spSwitch7Status, dryContactSensorDeviceIndex=dryContactSensorDeviceIndex, sensorProbeLastSystemError=sensorProbeLastSystemError, commonSensorType=commonSensorType, plusSeries=plusSeries, acVoltageSensorCriticalDesc=acVoltageSensorCriticalDesc, sensorProbeTemperatureArrayPort4ContTimeLowWarning=sensorProbeTemperatureArrayPort4ContTimeLowWarning, sensor4to20mAIndex=sensor4to20mAIndex, tankSenderSensorHighCriticalColor=tankSenderSensorHighCriticalColor, smokeTable=smokeTable, airflowSensorDeviceIndex=airflowSensorDeviceIndex, sensorProbeTemperatureArrayPort3LowWarning=sensorProbeTemperatureArrayPort3LowWarning, sensorProbeSoundDetectorContTimeNormal=sensorProbeSoundDetectorContTimeNormal, sensorFuelDisplayStyle=sensorFuelDisplayStyle, cfgHostUID=cfgHostUID, sensorProbeSwitchRelayAction=sensorProbeSwitchRelayAction, tankSenderSensorDisplayStyle=tankSenderSensorDisplayStyle, sensorTankSenderHighWarningColor=sensorTankSenderHighWarningColor, virtualAnalogSensorTable=virtualAnalogSensorTable, powerSensorRearm=powerSensorRearm, sensorProbeDrycontactArraySensor=sensorProbeDrycontactArraySensor, sensorWaterStatus=sensorWaterStatus, spWattStatus=spWattStatus, spRelayArray5_6Status=spRelayArray5_6Status, sensorProbeTemperatureArrayPort2Entry=sensorProbeTemperatureArrayPort2Entry, lic5DCTotal=lic5DCTotal, spSwitch32Status=spSwitch32Status, sensorDoorTable=sensorDoorTable, current4to20mALowCritical=current4to20mALowCritical, sensorProbeThermostatTemperatureArrayPort3NormalAction1=sensorProbeThermostatTemperatureArrayPort3NormalAction1, sensorProbeThermostatTemperatureArrayPort6GoOnline=sensorProbeThermostatTemperatureArrayPort6GoOnline)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeSwitchSendTrap=sensorProbeSwitchSendTrap, cfgSystemURL=cfgSystemURL, spStatusSoundDetector=spStatusSoundDetector, sensorTankSenderStatus=sensorTankSenderStatus, spEventClassName=spEventClassName, sensorProbeRelayArrayPort6Online=sensorProbeRelayArrayPort6Online, sensorProbeTemperatureArrayPort4DatacollectType=sensorProbeTemperatureArrayPort4DatacollectType, sensorProbeDrycontactArrayPort3Direction=sensorProbeDrycontactArrayPort3Direction, powerSensorDeviceIndex=powerSensorDeviceIndex, deviceAccessStatus=deviceAccessStatus, sensorWaterRopeLeakLocation=sensorWaterRopeLeakLocation, sensorProbeHumiditySirenAction=sensorProbeHumiditySirenAction, sensorProbeDrycontactArrayPort7ContTimeCritical=sensorProbeDrycontactArrayPort7ContTimeCritical, sensor4to20mADelayLowCritical=sensor4to20mADelayLowCritical, sensorPowerId=sensorPowerId, sensorProbeSwitchWaterRopeType=sensorProbeSwitchWaterRopeType, humiditySensorHighCriticalDesc=humiditySensorHighCriticalDesc, temperatureArraySensorNormalDesc=temperatureArraySensorNormalDesc, temperatureHighWarning=temperatureHighWarning, relayId=relayId, sensor4to20mAValue=sensor4to20mAValue, fuelSensorValue=fuelSensorValue, sensorProbeRelayArrayPort1RelayDescOn=sensorProbeRelayArrayPort1RelayDescOn, devicePowerMeterDescription=devicePowerMeterDescription, fuelHighCritical=fuelHighCritical, deviceDryContactDescription=deviceDryContactDescription, sensorProbeSwitchIndexCount=sensorProbeSwitchIndexCount, commonHighCriticalColor=commonHighCriticalColor, sirenManualAction=sirenManualAction, fuelRaw=fuelRaw, sensorProbeDrycontactArrayPort3OutputDescOn=sensorProbeDrycontactArrayPort3OutputDescOn, sensorProbeEnergyRelayAction=sensorProbeEnergyRelayAction, sensorProbeTrapType=sensorProbeTrapType, tankSenderSensorDelayHighWarning=tankSenderSensorDelayHighWarning, sensorProbeDrycontactArrayPort7OutputDescOn=sensorProbeDrycontactArrayPort7OutputDescOn, sensorProbeRelayArrayPort7ManualRelayAction=sensorProbeRelayArrayPort7ManualRelayAction, sensorThermostatLowWarning=sensorThermostatLowWarning, sensorProbeDrycontactArrayPort2Online=sensorProbeDrycontactArrayPort2Online, sensorProbeThermostatTemperatureArrayPort5Description=sensorProbeThermostatTemperatureArrayPort5Description, sensorProbeThermostatTemperatureArrayPort2HighLimitAction1=sensorProbeThermostatTemperatureArrayPort2HighLimitAction1, sensorProbeTypeSirenName=sensorProbeTypeSirenName, sensorProbeVirtualAnalogContTimeHighCritical=sensorProbeVirtualAnalogContTimeHighCritical, config=config, sensorDCvoltageHighCritical=sensorDCvoltageHighCritical, sensorProbeIRMSDatacollectType=sensorProbeIRMSDatacollectType, sensorRelayControlMode=sensorRelayControlMode, current4to20mAUnit=current4to20mAUnit, humiditySensorRearm=humiditySensorRearm, spRelayArray8_2Status=spRelayArray8_2Status, sensorProbeHumidityRaw=sensorProbeHumidityRaw, tankSenderSensorLowWarningDesc=tankSenderSensorLowWarningDesc, sensorProbeDrycontactArrayPort7Entry=sensorProbeDrycontactArrayPort7Entry, virtualSwitchSensorNormalState=virtualSwitchSensorNormalState, dcVoltageDelayHighWarning=dcVoltageDelayHighWarning, sensorSecurityCriticalDesc=sensorSecurityCriticalDesc, dcVoltageDelayLowCritical=dcVoltageDelayLowCritical, sensorProbeDrycontactArrayPort3Description=sensorProbeDrycontactArrayPort3Description, sensorProbeDrycontactArrayPort4Entry=sensorProbeDrycontactArrayPort4Entry, drycontactGoOffline=drycontactGoOffline, relaySensorType=relaySensorType, sensorProbeRelayArrayPort4Online=sensorProbeRelayArrayPort4Online, sensorProbeDrycontactArrayPort8OpenURL=sensorProbeDrycontactArrayPort8OpenURL, sensorProbeSwitchNormalState=sensorProbeSwitchNormalState, current4to20mAAmountMaxVoltage=current4to20mAAmountMaxVoltage, powerSensorLowCritical=powerSensorLowCritical, airflowSensorValue=airflowSensorValue, temperatureArrayLowCritical=temperatureArrayLowCritical, powerSensorUnit=powerSensorUnit, tankSenderDescription=tankSenderDescription, sensorProbeTemperatureArrayPort5ContTimeLowWarning=sensorProbeTemperatureArrayPort5ContTimeLowWarning, humidityDelayNormal=humidityDelayNormal, sensorProbeVRMSStatus=sensorProbeVRMSStatus, sensorDCvoltageLowWarningColor=sensorDCvoltageLowWarningColor, temperatureArrayRaw=temperatureArrayRaw, cfgSMTPAuth=cfgSMTPAuth, powerHighWarningDescription=powerHighWarningDescription, sensorProbeTempSirenDelayAlarm=sensorProbeTempSirenDelayAlarm, spTemperatureArray3Status=spTemperatureArray3Status, sensorProbeIRMSSensorIndex=sensorProbeIRMSSensorIndex, sensorPowerDescription=sensorPowerDescription, drycontactCriticalColor=drycontactCriticalColor, thermostatSensorNormalDesc=thermostatSensorNormalDesc, sensorProbeDrycontactArrayPort5Direction=sensorProbeDrycontactArrayPort5Direction, sensorPowerValue=sensorPowerValue, sensorACvoltageNormalColor=sensorACvoltageNormalColor, cfgWEBPort=cfgWEBPort, sensorAirflowSubPort=sensorAirflowSubPort, spSwitch22Status=spSwitch22Status, sensorTemperatureArrayLowCriticalColor=sensorTemperatureArrayLowCriticalColor, dcVoltageSensorStatus=dcVoltageSensorStatus, commonOffDescription=commonOffDescription, humidityLowCriticalColor=humidityLowCriticalColor, sensorProbeHumidityRelayAction=sensorProbeHumidityRelayAction, sensorProbeDrycontactArrayPort8Entry=sensorProbeDrycontactArrayPort8Entry, humiditySensorDisplayStyle=humiditySensorDisplayStyle, relaySensorAcknowledge=relaySensorAcknowledge, powerSensorSensorErrorDesc=powerSensorSensorErrorDesc, spRelayArray3_2Status=spRelayArray3_2Status, sensorHumidityDisplayStyle=sensorHumidityDisplayStyle, sensorProbeTemperatureArrayPort4=sensorProbeTemperatureArrayPort4, sensorTemperatureLowWarningColor=sensorTemperatureLowWarningColor, sensorWaterRopeDeviceIndex=sensorWaterRopeDeviceIndex, thermostatSensorHighCriticalColor=thermostatSensorHighCriticalColor, humidityEntry=humidityEntry, powerHighCriticalDescription=powerHighCriticalDescription, sensorProbeThermostatTemperatureArrayPort8Value=sensorProbeThermostatTemperatureArrayPort8Value, sensorProbeSwitchEmailTrapInterval=sensorProbeSwitchEmailTrapInterval, sensorProbeTemperatureArrayPort5URL=sensorProbeTemperatureArrayPort5URL, sensorPowerDisplayStyle=sensorPowerDisplayStyle, sensorProbeMailResendInterval=sensorProbeMailResendInterval, airflowSubPort=airflowSubPort, sensorProbeDrycontactArrayPort6OpenURL=sensorProbeDrycontactArrayPort6OpenURL, spRelayArray1_3Status=spRelayArray1_3Status, current4to20mASensorDelayHighWarning=current4to20mASensorDelayHighWarning, tankSenderSensorDescription=tankSenderSensorDescription, waterPort=waterPort, licAccessUsersTotal=licAccessUsersTotal, spSwitch19Status=spSwitch19Status, drycontactStatus=drycontactStatus, sensorAirflowDescription=sensorAirflowDescription, sensorProbeTemperatureArrayPort8Entry=sensorProbeTemperatureArrayPort8Entry, sirenAcknowledge=sirenAcknowledge, sensorProbeHumidityPercent=sensorProbeHumidityPercent, spSenCriticalStatus=spSenCriticalStatus, sensorProbeNtpMode=sensorProbeNtpMode, sensorDryContactPort13GoOnline=sensorDryContactPort13GoOnline, sensorProbeTemperatureArrayPort4Number=sensorProbeTemperatureArrayPort4Number, sensorProbeThermostatTemperatureArrayPort6NormalAction2=sensorProbeThermostatTemperatureArrayPort6NormalAction2, sensorProbeTemperatureArrayPort5Calendar=sensorProbeTemperatureArrayPort5Calendar, airflowLowCriticalDescription=airflowLowCriticalDescription, sensorFuelDescription=sensorFuelDescription, sensorProbeTemperatureArrayPort6ContTimeLowWarning=sensorProbeTemperatureArrayPort6ContTimeLowWarning, sensorProbeTemperatureArrayPort7ContTimeHighWarning=sensorProbeTemperatureArrayPort7ContTimeHighWarning, sensorThermostatHighWarningColor=sensorThermostatHighWarningColor, powerStatus=powerStatus, sensorPowerTimeOut=sensorPowerTimeOut, sensorDryContactPort14GoOnline=sensorDryContactPort14GoOnline, cfgSNMPv3EngineId=cfgSNMPv3EngineId, powerLowCriticalDescription=powerLowCriticalDescription, relaySensorSubPort=relaySensorSubPort, fuelSensorNormalColor=fuelSensorNormalColor, sensorProbeHumidityOffset=sensorProbeHumidityOffset, sensorProbeHumidityURL=sensorProbeHumidityURL, sensorProbeVirtualAnalogRearm=sensorProbeVirtualAnalogRearm, tankSenderSensorDelayHighCritical=tankSenderSensorDelayHighCritical, sensorACvoltageGoOffline=sensorACvoltageGoOffline, spAnalogue4Status=spAnalogue4Status, sensorIntelligentPort7GoOnline=sensorIntelligentPort7GoOnline, spSensorLevelExceeded=spSensorLevelExceeded, devicePowerMeterInfo=devicePowerMeterInfo, motionNormalDescription=motionNormalDescription, sensorPowerMinValue=sensorPowerMinValue, sensorProbeDrycontactArrayPort3ControlMode=sensorProbeDrycontactArrayPort3ControlMode, sensorWaterTable=sensorWaterTable, temperatureArraySensorHighWarningColor=temperatureArraySensorHighWarningColor, spRelayArray8_4Status=spRelayArray8_4Status, sensorProbeReloadNetwork=sensorProbeReloadNetwork, sensorProbeSwitchDescription=sensorProbeSwitchDescription, motionDescription=motionDescription, dcVoltageSensorDelayHighCritical=dcVoltageSensorDelayHighCritical, sensorProbeSwitchOnline=sensorProbeSwitchOnline, temperatureHighCritical=temperatureHighCritical, airflowHighCriticalDescription=airflowHighCriticalDescription, spRelayArray1_4Status=spRelayArray1_4Status, sensorThermostatDescription=sensorThermostatDescription, sensorDryContactPort7GoOnline=sensorDryContactPort7GoOnline, sensorProbeDrycontactArrayPort3Table=sensorProbeDrycontactArrayPort3Table, sensorProbeTemperatureArrayPort8Offset=sensorProbeTemperatureArrayPort8Offset, sensorProbeTrapMailPollInterval=sensorProbeTrapMailPollInterval, sensorByPort=sensorByPort, sensorDCvoltageBaseVoltage=sensorDCvoltageBaseVoltage, powerSensorHighWarningDesc=powerSensorHighWarningDesc, sensorProbeTemperatureArrayPort1URL=sensorProbeTemperatureArrayPort1URL, sensorProbeVirtualSwitchContTimeHighCritical=sensorProbeVirtualSwitchContTimeHighCritical, sensorTankSenderDelayHighWarning=sensorTankSenderDelayHighWarning, sensorSirenOnDesc=sensorSirenOnDesc, sensorProbeSoftMotionContTimeHighCritical=sensorProbeSoftMotionContTimeHighCritical, sensorProbeSoftMotionSensor=sensorProbeSoftMotionSensor, sensorProbeDrycontactArrayPort5ContTimeCritical=sensorProbeDrycontactArrayPort5ContTimeCritical, sensorACvoltageId=sensorACvoltageId, airflowSensorDelayLowCritical=airflowSensorDelayLowCritical, temperatureSensorLowCriticalColor=temperatureSensorLowCriticalColor, sensorProbeThermostatTemperatureArrayPort6LowLimit2=sensorProbeThermostatTemperatureArrayPort6LowLimit2, powerSensorHighCritical=powerSensorHighCritical, deviceEntry=deviceEntry, sensorNormalDescription=sensorNormalDescription, humiditySensorHighCriticalColor=humiditySensorHighCriticalColor, sensorProbeHumidityContTimeHighCritical=sensorProbeHumidityContTimeHighCritical, fuelSensorHighWarningColor=fuelSensorHighWarningColor, sensorProbeHumidityGoOnline=sensorProbeHumidityGoOnline, sensorProbeSwitchDirection=sensorProbeSwitchDirection, sensorProbeDrycontactArrayPort8Index=sensorProbeDrycontactArrayPort8Index, sensorProbeVRMSEmailTrapLimit=sensorProbeVRMSEmailTrapLimit, sensorTankSenderDescription=sensorTankSenderDescription, commonSensorEntry=commonSensorEntry, sensorProbeRelayArrayPort7RelayDescOff=sensorProbeRelayArrayPort7RelayDescOff, sensor4to20mARaw=sensor4to20mARaw, fuelSensorAcknowledge=fuelSensorAcknowledge, sensorProbeSwitchOpenURL=sensorProbeSwitchOpenURL, sensorProbeEnergyContTimeHighCritical=sensorProbeEnergyContTimeHighCritical, spTemperatureArray7_4Status=spTemperatureArray7_4Status, smokeSensorNormalColor=smokeSensorNormalColor, sensorProbeVRMSGoOnline=sensorProbeVRMSGoOnline, sensorProbeDrycontactArrayPort7ManualOutputAction=sensorProbeDrycontactArrayPort7ManualOutputAction, sensorProbeDrycontactArrayPort8OutputDescOff=sensorProbeDrycontactArrayPort8OutputDescOff, sensorProbeDrycontactArrayPort2=sensorProbeDrycontactArrayPort2, sensorProbeTemperatureArrayPort1Status=sensorProbeTemperatureArrayPort1Status, sensorProbeThermostatTemperatureArrayPort2Index=sensorProbeThermostatTemperatureArrayPort2Index, commonSensorLowCriticalColor=commonSensorLowCriticalColor, spSwitch67Status=spSwitch67Status, sensorProbeTemperatureArrayPort5Status=sensorProbeTemperatureArrayPort5Status, spSwitchStatus=spSwitchStatus, sensorProbeTypeName=sensorProbeTypeName, sensorPowerSensorErrorDesc=sensorPowerSensorErrorDesc, sensorProbeRelayArrayPort4ManualRelayCycleTime=sensorProbeRelayArrayPort4ManualRelayCycleTime, humiditySensorHighCritical=humiditySensorHighCritical, sensorProbeDrycontactArrayPort5URL=sensorProbeDrycontactArrayPort5URL, devicePowerMeterCountSentPacket=devicePowerMeterCountSentPacket, sensorProbeIRMSGoOnline=sensorProbeIRMSGoOnline, doorSensorOpenPeriod=doorSensorOpenPeriod, tankSenderId=tankSenderId, waterRopeDescription=waterRopeDescription, powerEntry=powerEntry, sensorTemperatureArrayDeviceIndex=sensorTemperatureArrayDeviceIndex, sensorDryContactPort2GoOnline=sensorDryContactPort2GoOnline, airflowSensorDelayHighCritical=airflowSensorDelayHighCritical, sensorProbeHumiditySendTrap=sensorProbeHumiditySendTrap, sensorWaterSubPort=sensorWaterSubPort, drycontactAcknowledge=drycontactAcknowledge, smokeSensorAcknowledge=smokeSensorAcknowledge, sensorProbeTemperatureArrayPort8ContTimeNormal=sensorProbeTemperatureArrayPort8ContTimeNormal, sensorTemperatureArrayHighWarningDesc=sensorTemperatureArrayHighWarningDesc, temperatureDelayLowWarning=temperatureDelayLowWarning, temperatureSensorHighCriticalColor=temperatureSensorHighCriticalColor, sensorTankSenderLowCritical=sensorTankSenderLowCritical, fuelDelayLowCritical=fuelDelayLowCritical, sensorProbeDrycontactArrayPort2Table=sensorProbeDrycontactArrayPort2Table, sensorProbeRelayArrayPort5ControlMode=sensorProbeRelayArrayPort5ControlMode, sensorPowerValueFormatFloat=sensorPowerValueFormatFloat, sensorProbeTemperatureArrayPort3Calendar=sensorProbeTemperatureArrayPort3Calendar, sensorWaterRopeLength=sensorWaterRopeLength, sensorProbeDrycontactArrayPort3Number=sensorProbeDrycontactArrayPort3Number, sensorTemperatureLowCriticalDesc=sensorTemperatureLowCriticalDesc, sensorProbeIRMSContTimeNormal=sensorProbeIRMSContTimeNormal, sensorSecurityIndex=sensorSecurityIndex, actionType=actionType, cfgGSMDNS=cfgGSMDNS, temperatureArrayDisplayStyle=temperatureArrayDisplayStyle, fuelSensorId=fuelSensorId, sensorAirflowNormalDesc=sensorAirflowNormalDesc, waterRopeType=waterRopeType, dcVoltageSensorLowWarningColor=dcVoltageSensorLowWarningColor, sensorProbeMAC=sensorProbeMAC, spTemperatureArray8_2Status=spTemperatureArray8_2Status)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeDrycontactArrayPort6NormalState=sensorProbeDrycontactArrayPort6NormalState, deviceLicensePmsTotal=deviceLicensePmsTotal, commonValue=commonValue, sensorTemperatureArrayAcknowledge=sensorTemperatureArrayAcknowledge, spTemperatureArray4_5Status=spTemperatureArray4_5Status, sensorDCvoltageUnit=sensorDCvoltageUnit, sensorFuelRaw=sensorFuelRaw, airflowSensorRaw=airflowSensorRaw, sensorProbeDrycontactArrayPort5ContTimeNormal=sensorProbeDrycontactArrayPort5ContTimeNormal, sensorTemperatureDelayHighCritical=sensorTemperatureDelayHighCritical, sensorAirflowLowCriticalDesc=sensorAirflowLowCriticalDesc, sensorProbeVRMSSensorIndex=sensorProbeVRMSSensorIndex, securitySensorTable=securitySensorTable, cfgDevicePassword=cfgDevicePassword, spRelayArray3Status=spRelayArray3Status, airflowHighCritical=airflowHighCritical, sensorProbeRelayArrayPort5ManualRelayCycleTime=sensorProbeRelayArrayPort5ManualRelayCycleTime, virtualAnalogSensorContTimeSensorError=virtualAnalogSensorContTimeSensorError, sensorProbeRelayArrayPort3RelayDescOn=sensorProbeRelayArrayPort3RelayDescOn, sensorProbeTemperatureArrayPort7Online=sensorProbeTemperatureArrayPort7Online, sensorProbeIRMSContTimeLowWarning=sensorProbeIRMSContTimeLowWarning, sensorProbeVirtualAnalogDelayNormal=sensorProbeVirtualAnalogDelayNormal, sensorProbeDrycontactArrayPort4ContTimeNormal=sensorProbeDrycontactArrayPort4ContTimeNormal, sensorPowerDelayHighCritical=sensorPowerDelayHighCritical, sensorProbeThermostatTemperatureArrayPort8HighLimitAction2=sensorProbeThermostatTemperatureArrayPort8HighLimitAction2, spDownStatus=spDownStatus, airflowLowWarningColor=airflowLowWarningColor, drycontactDescription=drycontactDescription, sensorTemperatureStatus=sensorTemperatureStatus, current4to20mASensorDescription=current4to20mASensorDescription, sensorProbeAirFlowCalibrate=sensorProbeAirFlowCalibrate, motionCriticalColor=motionCriticalColor, tankSenderSensorErrorDescription=tankSenderSensorErrorDescription, sensorProbeThermostatTemperatureArrayPort6HighLimitAction1=sensorProbeThermostatTemperatureArrayPort6HighLimitAction1, sensorThermostatAcknowledge=sensorThermostatAcknowledge, sensorProbeDrycontactArrayPort5ControlMode=sensorProbeDrycontactArrayPort5ControlMode, spSwitch68Status=spSwitch68Status, temperatureArraySensorLowCriticalDesc=temperatureArraySensorLowCriticalDesc, sensorProbeDrycontactArrayPort5Description=sensorProbeDrycontactArrayPort5Description, thermostatSensorSensorErrorDesc=thermostatSensorSensorErrorDesc, sensorProbeTemperatureArrayPort2Rearm=sensorProbeTemperatureArrayPort2Rearm, temperatureArrayHighCriticalColor=temperatureArrayHighCriticalColor, humiditySensorNormalDescription=humiditySensorNormalDescription, sensorProbeDrycontactArrayPort4ManualOutputAction=sensorProbeDrycontactArrayPort4ManualOutputAction, motionSensorCriticalColor=motionSensorCriticalColor, sensorProbeDrycontactArrayPort5ManualOutputAction=sensorProbeDrycontactArrayPort5ManualOutputAction, sensorProbeThermostatTemperatureArrayPort3Description=sensorProbeThermostatTemperatureArrayPort3Description, actionTable=actionTable, spRelayArray4_3Status=spRelayArray4_3Status, sensorACvoltageSubPort=sensorACvoltageSubPort, sensorProbeTemperatureArrayPort6HighCritical=sensorProbeTemperatureArrayPort6HighCritical, sensorWaterRopeIndex=sensorWaterRopeIndex, sensorFuelLowCritical=sensorFuelLowCritical, dcVoltageHighCriticalColor=dcVoltageHighCriticalColor, acVoltageEntry=acVoltageEntry, humidityDescription=humidityDescription, spTemperatureArray1_7Status=spTemperatureArray1_7Status, devicePowerMeterCountRecievedPacket=devicePowerMeterCountRecievedPacket, sensorProbeTempContTimeSensorError=sensorProbeTempContTimeSensorError, powerSensorDelayError=powerSensorDelayError, dryContactSensorSubPort=dryContactSensorSubPort, temperatureArraySensorRaw=temperatureArraySensorRaw, temperatureSensorSubPort=temperatureSensorSubPort, smokeDescription=smokeDescription, waterSubPort=waterSubPort, sensorProbeThermostatTemperatureArrayPort2HighLimit2=sensorProbeThermostatTemperatureArrayPort2HighLimit2, virtualAnalogSensorStatus=virtualAnalogSensorStatus, sensorProbeSoftMotionOpenURL=sensorProbeSoftMotionOpenURL, sensorProbeSoundDetectorLowCritical=sensorProbeSoundDetectorLowCritical, sensorProbeThermostatTemperatureArrayPort3Mode=sensorProbeThermostatTemperatureArrayPort3Mode, sensorDryContactDescription=sensorDryContactDescription, cfgSMTPLogin=cfgSMTPLogin, sensorWaterRopeAcknowledge=sensorWaterRopeAcknowledge, sensorProbeTempSendNormalMail=sensorProbeTempSendNormalMail, sensorProbeThermostatTemperatureArrayPort2Value=sensorProbeThermostatTemperatureArrayPort2Value, sensorProbeDrycontactArrayPort2OpenURL=sensorProbeDrycontactArrayPort2OpenURL, sensorProbeTemperatureArrayPort5Number=sensorProbeTemperatureArrayPort5Number, spRelayArray6Status=spRelayArray6Status, sensorTankSenderSensorErrorColor=sensorTankSenderSensorErrorColor, sensorProbeThermostatTemperatureArrayPort6EnableTime=sensorProbeThermostatTemperatureArrayPort6EnableTime, sensorProbeIRMSSirenActiveStatus=sensorProbeIRMSSirenActiveStatus, sensorTemperatureArrayNormalDesc=sensorTemperatureArrayNormalDesc, licenseVSens=licenseVSens, sensorProbeThermostatTemperatureArrayPort2Mode=sensorProbeThermostatTemperatureArrayPort2Mode, sensorProbeHumidityAcknowledgement=sensorProbeHumidityAcknowledgement, sensorProbeThermostatTemperatureArrayPort2NormalAction1=sensorProbeThermostatTemperatureArrayPort2NormalAction1, virtualSwitchSensorIndex=virtualSwitchSensorIndex, virtualAnalogSensorEntry=virtualAnalogSensorEntry, sensorFuelEntry=sensorFuelEntry, temperatureAcknowledge=temperatureAcknowledge, sensorProbeMailRecpt=sensorProbeMailRecpt, sensorProbeThermostatTemperatureArrayPort7RelayControlPort=sensorProbeThermostatTemperatureArrayPort7RelayControlPort, sensorProbeTemperatureArrayPort6OpenURL=sensorProbeTemperatureArrayPort6OpenURL, sensorProbeThermostatTemperatureArrayPort8RelayControlPort=sensorProbeThermostatTemperatureArrayPort8RelayControlPort, sensorProbeThermostatTemperatureArrayPort3RelayControlPort=sensorProbeThermostatTemperatureArrayPort3RelayControlPort, sensorProbeCameraDescription=sensorProbeCameraDescription, humidityTable=humidityTable, doorDescription=doorDescription, sensorProbeHumidityRelayOnPort=sensorProbeHumidityRelayOnPort, cfgTimeZone=cfgTimeZone, dcVoltageEntry=dcVoltageEntry, temperatureArrayIndex=temperatureArrayIndex, sensorSecurityPort=sensorSecurityPort, sensorSirenControlMode=sensorSirenControlMode, sensorSmokeAcknowledge=sensorSmokeAcknowledge, sensorSecurityTable=sensorSecurityTable, sensorProbeTemperatureArrayPort5ContTimeLowCritical=sensorProbeTemperatureArrayPort5ContTimeLowCritical, sirenControlMode=sirenControlMode, tankSenderSensorStatus=tankSenderSensorStatus, drycontactOnColor=drycontactOnColor, dcVoltageLowWarningDescription=dcVoltageLowWarningDescription, spRelayArray5_2Status=spRelayArray5_2Status, powerLowWarningDescription=powerLowWarningDescription, sirenId=sirenId, sensorProbeRelayArrayPort1Number=sensorProbeRelayArrayPort1Number, fuelLowWarningDescription=fuelLowWarningDescription, sensorProbeTemperatureArrayPort8Online=sensorProbeTemperatureArrayPort8Online, sensorProbeDrycontactArrayPort6ManualOutputCycleTime=sensorProbeDrycontactArrayPort6ManualOutputCycleTime, spTemperatureArray7_2Status=spTemperatureArray7_2Status, sensorDryContactDeviceIndex=sensorDryContactDeviceIndex, sensorThermostatEntry=sensorThermostatEntry, sensorTankSenderHighWarning=sensorTankSenderHighWarning, sensorProbeVirtualSwitchSensorNumber=sensorProbeVirtualSwitchSensorNumber, sensorProbeTemperatureArrayPort2Offset=sensorProbeTemperatureArrayPort2Offset, current4to20mASensorLowCritical=current4to20mASensorLowCritical, doorSensorTable=doorSensorTable, sensorProbeNoCameraStatus=sensorProbeNoCameraStatus, sensorProbeDetail=sensorProbeDetail, spTemperatureArray5_3Status=spTemperatureArray5_3Status, doorSensorId=doorSensorId, sensorHumiditySubPort=sensorHumiditySubPort, spSwitch2Status=spSwitch2Status, spEventClassNumber=spEventClassNumber, temperatureLowWarningColor=temperatureLowWarningColor, doorTable=doorTable, sensorProbeVRMSSirenOnPort=sensorProbeVRMSSirenOnPort, sensorDryContactCriticalDesc=sensorDryContactCriticalDesc, sensorPowerHighCriticalColor=sensorPowerHighCriticalColor, sensorProbeReadSysLog=sensorProbeReadSysLog, spTemperature8Status=spTemperature8Status, sensorProbeTypeRelayName=sensorProbeTypeRelayName, commonSensorLowWarningColor=commonSensorLowWarningColor, sensorProbeDrycontactArrayPort8OutputDescOn=sensorProbeDrycontactArrayPort8OutputDescOn, sensorHumidityLowCritical=sensorHumidityLowCritical, deviceLicenseIPv6Enable=deviceLicenseIPv6Enable, sensorIntelligentPort6GoOnline=sensorIntelligentPort6GoOnline, sensorProbeDrycontactArrayPort5OpenURL=sensorProbeDrycontactArrayPort5OpenURL, sensorSirenDescription=sensorSirenDescription, temperatureDisplayStyle=temperatureDisplayStyle, sensorProbeDNSServer=sensorProbeDNSServer, sensorDCvoltageDeviceIndex=sensorDCvoltageDeviceIndex, sensorProbeTemperatureArrayPort6LowWarning=sensorProbeTemperatureArrayPort6LowWarning, sensor4to20mALowWarningColor=sensor4to20mALowWarningColor, thermostatSensorPort=thermostatSensorPort, tankSenderLowCritical=tankSenderLowCritical, sensorPowerDelayLowWarning=sensorPowerDelayLowWarning, temperatureSensorTable=temperatureSensorTable, sensorProbeTemperatureArrayPort2Value=sensorProbeTemperatureArrayPort2Value, sensorProbeVRMSContTimeNormal=sensorProbeVRMSContTimeNormal, sensorProbeDrycontactArrayPort6URL=sensorProbeDrycontactArrayPort6URL, sensorProbeProductRevision=sensorProbeProductRevision, sensorProbeAirFlowNormalState=sensorProbeAirFlowNormalState, dcVoltageSensorDeviceIndex=dcVoltageSensorDeviceIndex, fuelSensorErrorDescription=fuelSensorErrorDescription, spTemperatureArray2_7Status=spTemperatureArray2_7Status, fuelIndex=fuelIndex, sensorProbeThermostatTemperatureArrayPort6Value=sensorProbeThermostatTemperatureArrayPort6Value, sensorProbeEnergySirenAction=sensorProbeEnergySirenAction, spSensorIndex=spSensorIndex, sensorFuelUnit=sensorFuelUnit, spRelayArray6_4Status=spRelayArray6_4Status, sensorProbeDrycontactArrayPort1OpenURL=sensorProbeDrycontactArrayPort1OpenURL, sensorProbeThermostatTemperatureArrayPort4Description=sensorProbeThermostatTemperatureArrayPort4Description, sensorProbeThermostatTemperatureArrayPort7NormalAction2=sensorProbeThermostatTemperatureArrayPort7NormalAction2, spSwitch53Status=spSwitch53Status, sensorProbeTempContTimeHighCritical=sensorProbeTempContTimeHighCritical, sensorProbeRelayArrayPort3=sensorProbeRelayArrayPort3, cfgEMailEnable=cfgEMailEnable, sensorProbeVirtualSwitchDescription=sensorProbeVirtualSwitchDescription, sensorThermostatLowCriticalDesc=sensorThermostatLowCriticalDesc, tankSenderSensorRaw=tankSenderSensorRaw, sensor4to20mASensorErrorDesc=sensor4to20mASensorErrorDesc, sensorProbeDrycontactArrayPort3Status=sensorProbeDrycontactArrayPort3Status, temperatureSensorDescription=temperatureSensorDescription, spIRMS4Status=spIRMS4Status, sensorProbeRelayArrayPort1RelayCycleTime=sensorProbeRelayArrayPort1RelayCycleTime, sensorProbeTypeSoftMotionName=sensorProbeTypeSoftMotionName, deviceInfo=deviceInfo, sensorProbeThermostatTemperatureArrayPort2LowLimit1=sensorProbeThermostatTemperatureArrayPort2LowLimit1, sensorProbeHumiditySendNormalTrap=sensorProbeHumiditySendNormalTrap, waterRopeSensorIndex=waterRopeSensorIndex, tankSenderSensorDelayNormal=tankSenderSensorDelayNormal, sensorProbeRelayArrayPort8RelayDescOn=sensorProbeRelayArrayPort8RelayDescOn, spStatusEachModule=spStatusEachModule, spTemperatureArray5Status=spTemperatureArray5Status, waterRopeSensorTable=waterRopeSensorTable, sensorIndex=sensorIndex, sensorTemperatureDeviceIndex=sensorTemperatureDeviceIndex, sensorMotionTable=sensorMotionTable, commonHighWarningDescription=commonHighWarningDescription, airflowSensorHighCriticalDesc=airflowSensorHighCriticalDesc, commonSensorOnColor=commonSensorOnColor, sirenSensorOffDesc=sirenSensorOffDesc, waterId=waterId, spEnergy7Status=spEnergy7Status, sensorProbeRelayArrayPort6ManualRelayCycleTime=sensorProbeRelayArrayPort6ManualRelayCycleTime, sensorProbeEnergyDescription=sensorProbeEnergyDescription, sensorProbeTemperatureArrayPort1DegreeRaw=sensorProbeTemperatureArrayPort1DegreeRaw, sensorDisplayStyle=sensorDisplayStyle, sensorProbeThermostatTemperatureArrayPort1HighLimit1=sensorProbeThermostatTemperatureArrayPort1HighLimit1, airflowSensorHighCritical=airflowSensorHighCritical, sensorTemperatureSubPort=sensorTemperatureSubPort, temperatureHighWarningColor=temperatureHighWarningColor, sensorProbeDrycontactArrayPort6OutputDescOn=sensorProbeDrycontactArrayPort6OutputDescOn, sensorMotionGoOffline=sensorMotionGoOffline, sensorProbeTemperatureArrayPort5Entry=sensorProbeTemperatureArrayPort5Entry, sensorProbeTemperatureArrayPort6HighWarning=sensorProbeTemperatureArrayPort6HighWarning, acVoltageNormalColor=acVoltageNormalColor, sensorHumiditySensorErrorDesc=sensorHumiditySensorErrorDesc, sensorProbeThermostatTemperatureArrayPort1LowLimit1=sensorProbeThermostatTemperatureArrayPort1LowLimit1, sensorAirflowHighCritical=sensorAirflowHighCritical, sensorHumidityIndex=sensorHumidityIndex, sensorProbeEnergyOnline=sensorProbeEnergyOnline, sensorProbeSwitchWaterRopeLength=sensorProbeSwitchWaterRopeLength, sensorProbeEnergyDelayError=sensorProbeEnergyDelayError, sensorThermostatGoOffline=sensorThermostatGoOffline, sensorProbeTemperatureArrayPort6ContTimeHighWarning=sensorProbeTemperatureArrayPort6ContTimeHighWarning, current4to20mADelayNormal=current4to20mADelayNormal, current4to20mASensorAmountBaseVoltage=current4to20mASensorAmountBaseVoltage, sensorDCvoltageDisplayStyle=sensorDCvoltageDisplayStyle, sensorWaterEntry=sensorWaterEntry, current4to20mASensorHighWarningColor=current4to20mASensorHighWarningColor, thermostatSensorAcknowledge=thermostatSensorAcknowledge, sensorProbeDrycontactArrayPort4Online=sensorProbeDrycontactArrayPort4Online, sensorProbeThermostatTemperatureArrayPort1EnableTime=sensorProbeThermostatTemperatureArrayPort1EnableTime, sensorProbeThermostatTemperatureArrayPort5LowLimit1=sensorProbeThermostatTemperatureArrayPort5LowLimit1, spRelayArray5Status=spRelayArray5Status, smokeSensorIndex=smokeSensorIndex, sensorProbeThermostatTemperatureArrayPort7HighLimitAction2=sensorProbeThermostatTemperatureArrayPort7HighLimitAction2, sensorSirenEntry=sensorSirenEntry, dryContactSensorOnDesc=dryContactSensorOnDesc, cfgSupportEMail=cfgSupportEMail, sensorAirflowRaw=sensorAirflowRaw, tankSenderSensorNormalDesc=tankSenderSensorNormalDesc, sensorProbeTemperatureArrayPort3Entry=sensorProbeTemperatureArrayPort3Entry, sensorWaterRopeTable=sensorWaterRopeTable, fuelUnit=fuelUnit, drycontactId=drycontactId, temperatureSensorDelayNormal=temperatureSensorDelayNormal, sensorTemperatureArrayLowCriticalDesc=sensorTemperatureArrayLowCriticalDesc, sensorWaterId=sensorWaterId, powerSensorIndex=powerSensorIndex, airflowIndex=airflowIndex, sensorProbeAirFlowSensitivity=sensorProbeAirFlowSensitivity)
mibBuilder.exportSymbols("SPAGENT-MIB", current4to20mALowCriticalColor=current4to20mALowCriticalColor, sensorProbeTemperatureArrayPort8ContTimeSensorError=sensorProbeTemperatureArrayPort8ContTimeSensorError, motionIndex=motionIndex, sensorProbeEnergyContTimeLowCritical=sensorProbeEnergyContTimeLowCritical, sensorProbeVRMSvoltageMode=sensorProbeVRMSvoltageMode, dcVoltageAmountBaseVoltage=dcVoltageAmountBaseVoltage, relayControlMode=relayControlMode, tankSenderSensorLowCritical=tankSenderSensorLowCritical, thermostatSensorDelayLowCritical=thermostatSensorDelayLowCritical, spEnergy1Status=spEnergy1Status, sensorProbeThermostatTemperatureArrayPort4LowLimit1=sensorProbeThermostatTemperatureArrayPort4LowLimit1, sensorMotionDeviceIndex=sensorMotionDeviceIndex, sensorACvoltagePort=sensorACvoltagePort, sensorPowerLowCriticalDesc=sensorPowerLowCriticalDesc, sensorTemperatureArrayNormalColor=sensorTemperatureArrayNormalColor, spVirtual11Status=spVirtual11Status, sensorProbeRelayArrayPort6Description=sensorProbeRelayArrayPort6Description, sensorProbeThermostatTemperatureArrayPort5Value=sensorProbeThermostatTemperatureArrayPort5Value, sensorProbeRelayArrayPort2ControlMode=sensorProbeRelayArrayPort2ControlMode, sensorRelayDescription=sensorRelayDescription, sensorProbeRelayArrayPort6=sensorProbeRelayArrayPort6, sensorThermostatNormalDesc=sensorThermostatNormalDesc, powerSensorValueFormatFloat=powerSensorValueFormatFloat, current4to20mADelayLowCritical=current4to20mADelayLowCritical, sensorProbeTemperatureArrayPort7ContTimeSensorError=sensorProbeTemperatureArrayPort7ContTimeSensorError, temperatureSensorSerialNumber=temperatureSensorSerialNumber, sensorSirenManualAction=sensorSirenManualAction, sensorProbeTemperatureArrayPort4Description=sensorProbeTemperatureArrayPort4Description, sensorProbeIRMSRelayOnPort=sensorProbeIRMSRelayOnPort, sensorDryContactNormalDesc=sensorDryContactNormalDesc, sensorPowerHighCritical=sensorPowerHighCritical, temperatureArraySensorSensorNormalColor=temperatureArraySensorSensorNormalColor, spSensorValue=spSensorValue, sensorType=sensorType, sensorThermostatDeviceIndex=sensorThermostatDeviceIndex, spTemperatureArray4Status=spTemperatureArray4Status, deviceIntelligentDescription=deviceIntelligentDescription, spTemperatureArray3_5Status=spTemperatureArray3_5Status, sensorMotionEntry=sensorMotionEntry, sensorProbeTemperatureArrayPort4Calendar=sensorProbeTemperatureArrayPort4Calendar, acVoltageDescription=acVoltageDescription, dcVoltageSensorHighWarning=dcVoltageSensorHighWarning, sensorHighCriticalDescription=sensorHighCriticalDescription, spVirtual19Status=spVirtual19Status, thermostatSensorDelayNormal=thermostatSensorDelayNormal, airflowNormalDescription=airflowNormalDescription, temperatureArraySensorType=temperatureArraySensorType, sensorProbeEnergyOpenURL=sensorProbeEnergyOpenURL, dcVoltageSensorRearm=dcVoltageSensorRearm, commonEntry=commonEntry, sensorProbeRelayArrayPort7GoOnline=sensorProbeRelayArrayPort7GoOnline, sensorProbeRelayArrayPort7=sensorProbeRelayArrayPort7, actionTest=actionTest, commonLowCriticalDescription=commonLowCriticalDescription, sensorProbeHumiditySirenActiveStatus=sensorProbeHumiditySirenActiveStatus, deviceLicenseExpCount=deviceLicenseExpCount, current4to20mASensorLowWarning=current4to20mASensorLowWarning, sensorTemperatureDescription=sensorTemperatureDescription, sensorProbeSetSyslogMsgPrefix=sensorProbeSetSyslogMsgPrefix, sensorProbeUntidePassword=sensorProbeUntidePassword, sensorProbeThermostatTemperatureArrayPort5HighLimit2=sensorProbeThermostatTemperatureArrayPort5HighLimit2, sensorProbeTemperatureArrayPort1Offset=sensorProbeTemperatureArrayPort1Offset, spRelayArray6_3Status=spRelayArray6_3Status, sensorProbeDrycontactArrayPort1GoOnline=sensorProbeDrycontactArrayPort1GoOnline, spSwitch63Status=spSwitch63Status, sensorProbeTemperatureArrayPort6Calendar=sensorProbeTemperatureArrayPort6Calendar, licVSensUsed=licVSensUsed, virtualAnalogSensorUnit=virtualAnalogSensorUnit, sensorProbeThermostatDescription=sensorProbeThermostatDescription, sensorIntelligentPort4GoOnline=sensorIntelligentPort4GoOnline, securitySensorGoOffline=securitySensorGoOffline, sensor4to20mANormalColor=sensor4to20mANormalColor, temperatureArraySensorUnit=temperatureArraySensorUnit, temperatureSensorErrorDescription=temperatureSensorErrorDescription, smokeSensorEntry=smokeSensorEntry, sensorHumidityId=sensorHumidityId, current4to20mASensorIndex=current4to20mASensorIndex, humiditySensorNormalDesc=humiditySensorNormalDesc, dcVoltageAcknowledge=dcVoltageAcknowledge, commonDisplayStyle=commonDisplayStyle, tankSenderRaw=tankSenderRaw, acVoltageAcknowledge=acVoltageAcknowledge, sensorSecurityCriticalColor=sensorSecurityCriticalColor, sensorDCvoltageOffset=sensorDCvoltageOffset, securitySensorPort=securitySensorPort, drycontactEntry=drycontactEntry, sensorProbeDrycontactArrayPort5=sensorProbeDrycontactArrayPort5, sensorProbeRelayArrayPort6RelayDescOn=sensorProbeRelayArrayPort6RelayDescOn, temperatureDelayHighCritical=temperatureDelayHighCritical, sensorProbeDrycontactArrayPort4ControlMode=sensorProbeDrycontactArrayPort4ControlMode, spRelayArray6_6Status=spRelayArray6_6Status, sensorProbeTemperatureArrayPort8Description=sensorProbeTemperatureArrayPort8Description, sensorProbeTemperatureArrayPort2DatacollectType=sensorProbeTemperatureArrayPort2DatacollectType, virtualAnalogSensorAcknowledgement=virtualAnalogSensorAcknowledgement, sensorDCvoltageDelayHighCritical=sensorDCvoltageDelayHighCritical, securityCriticalColor=securityCriticalColor, acVoltageSensorSubPort=acVoltageSensorSubPort, sensorProbeDrycontactArrayPort6Number=sensorProbeDrycontactArrayPort6Number, sensorProbeThermostatTemperatureArrayPort4Index=sensorProbeThermostatTemperatureArrayPort4Index, sensorTemperatureNormalColor=sensorTemperatureNormalColor, sensorProbeThermostatTemperatureArrayPort5NormalAction2=sensorProbeThermostatTemperatureArrayPort5NormalAction2, drycontactOnDescription=drycontactOnDescription, sensorProbeVRMSSensor=sensorProbeVRMSSensor, dcVoltageLowWarning=dcVoltageLowWarning, cfgDefaultGateway=cfgDefaultGateway, sensorProbeSetCommunity=sensorProbeSetCommunity, motionSubPort=motionSubPort, thermostatSensorSensorErrorColor=thermostatSensorSensorErrorColor, sensorProbePowerMeterCountTimeoutPacket=sensorProbePowerMeterCountTimeoutPacket, sensorProbeTemperatureArrayPort8OpenURL=sensorProbeTemperatureArrayPort8OpenURL, sensorProbeTemperatureArrayPort1Rearm=sensorProbeTemperatureArrayPort1Rearm, sensor4to20mALowCritical=sensor4to20mALowCritical, sensorProbeThermostatTemperatureArrayPort6Online=sensorProbeThermostatTemperatureArrayPort6Online, dcVoltageHighCritical=dcVoltageHighCritical, sensorProbeVirtualSwitchOpenURL=sensorProbeVirtualSwitchOpenURL, cfgSNMPWriteCommunity=cfgSNMPWriteCommunity, humidityLowCritical=humidityLowCritical, drycontactNormalColor=drycontactNormalColor, sensorProbeHumidityIndex=sensorProbeHumidityIndex, sensorProbeRelayArrayPort3ManualRelayAction=sensorProbeRelayArrayPort3ManualRelayAction, sensorProbeTemperatureArrayPort5Table=sensorProbeTemperatureArrayPort5Table, spTemperatureArray2Status=spTemperatureArray2Status, current4to20mAMaxVoltage=current4to20mAMaxVoltage, spRelayArray1_5Status=spRelayArray1_5Status, sensorProbeSwitchURL=sensorProbeSwitchURL, sensorProbeTemperatureArrayPort3DegreeType=sensorProbeTemperatureArrayPort3DegreeType, waterSensorCriticalColor=waterSensorCriticalColor, powerSensorDelayLowCritical=powerSensorDelayLowCritical, sensorProbeSeparateEmail=sensorProbeSeparateEmail, temperatureArrayAcknowledge=temperatureArrayAcknowledge, sensorAirflowDisplayStyle=sensorAirflowDisplayStyle, sensorProbeVRMSAcknowledgement=sensorProbeVRMSAcknowledgement, sensorProbeDrycontactArrayPort7OutputDescOff=sensorProbeDrycontactArrayPort7OutputDescOff, temperatureArraySensorLowCritical=temperatureArraySensorLowCritical, humiditySensorDelayError=humiditySensorDelayError, sensorProbeTemperatureArrayPort7DegreeType=sensorProbeTemperatureArrayPort7DegreeType, current4to20mASensorDelayLowWarning=current4to20mASensorDelayLowWarning, spSwitch25Status=spSwitch25Status, doorValue=doorValue, sensorProbeTypeADE7763WatthourName=sensorProbeTypeADE7763WatthourName, sensorProbeHumidityLocation=sensorProbeHumidityLocation, fuelSensorUnit=fuelSensorUnit, sensorProbeEnergySirenDelayAlarm=sensorProbeEnergySirenDelayAlarm, temperatureSensorErrorColor=temperatureSensorErrorColor, sensorFuelAmountBaseValue=sensorFuelAmountBaseValue, spRelayArray7_1Status=spRelayArray7_1Status, sensorProbeDrycontactArrayPort6GoOnline=sensorProbeDrycontactArrayPort6GoOnline, sensorProbeRelayArrayPort2Entry=sensorProbeRelayArrayPort2Entry, sensorProbeTemperatureArrayPort2URL=sensorProbeTemperatureArrayPort2URL, powerSensorStatus=powerSensorStatus, cfgHostSensorUID=cfgHostSensorUID, temperatureArraySensorHighCriticalColor=temperatureArraySensorHighCriticalColor, sensor4to20mADelayError=sensor4to20mADelayError, temperatureSensorOffset=temperatureSensorOffset, sensorTemperatureArrayRaw=sensorTemperatureArrayRaw, sensorProbeVRMSURL=sensorProbeVRMSURL, sensorProbeVirtualAnalogValueFactor=sensorProbeVirtualAnalogValueFactor, tankSenderGoOffline=tankSenderGoOffline, dcVoltageDisplayStyle=dcVoltageDisplayStyle, sensorProbePTZBrand=sensorProbePTZBrand, sensorProbeIRMSSirenCycleTime=sensorProbeIRMSSirenCycleTime, sensorProbeEnergySensorIndex=sensorProbeEnergySensorIndex, sensorProbeTemperatureArrayPort5HighCritical=sensorProbeTemperatureArrayPort5HighCritical, deviceStatus=deviceStatus, sensorProbeThermostatTemperatureArrayPort1HighLimitAction2=sensorProbeThermostatTemperatureArrayPort1HighLimitAction2, sensorTankSenderDelayNormal=sensorTankSenderDelayNormal, tankSenderSensorSensorErrorDesc=tankSenderSensorSensorErrorDesc, spSwitch52Status=spSwitch52Status, temperatureArraySensorSerialNumber=temperatureArraySensorSerialNumber, spSummary=spSummary, sensorSmokePort=sensorSmokePort, sensorProbeDelayNotifyBoot=sensorProbeDelayNotifyBoot, spTemperatureArray6_4Status=spTemperatureArray6_4Status, sensorProbeDrycontactArrayPort8URL=sensorProbeDrycontactArrayPort8URL, sensorNormalColor=sensorNormalColor, dcVoltageSensorGoOffline=dcVoltageSensorGoOffline, commonSensorDisplayStyle=commonSensorDisplayStyle, sensorTemperatureArrayLowCritical=sensorTemperatureArrayLowCritical, sirenIndex=sirenIndex, spSwitch1Status=spSwitch1Status, spRelayArray7_8Status=spRelayArray7_8Status, current4to20mANormalColor=current4to20mANormalColor, spTemperatureArray2_3Status=spTemperatureArray2_3Status, devicePowerMeterStatus=devicePowerMeterStatus, sensorAirflowDelayLowCritical=sensorAirflowDelayLowCritical, sensorTemperatureArrayLowWarningDesc=sensorTemperatureArrayLowWarningDesc, spSwitch14Status=spSwitch14Status, sensorProbeTypeADE7763Name=sensorProbeTypeADE7763Name, fuelDelayLowWarning=fuelDelayLowWarning, sensorProbeCameraServerIndex=sensorProbeCameraServerIndex, sensorProbeMegaVersion=sensorProbeMegaVersion, sensorProbeThermostatTemperatureArrayPort3HighLimitAction1=sensorProbeThermostatTemperatureArrayPort3HighLimitAction1, sensorAirflowPort=sensorAirflowPort, sensorTankSenderDisplayStyle=sensorTankSenderDisplayStyle, sensorProbeTemperatureArrayPort7Description=sensorProbeTemperatureArrayPort7Description, sensorThermostatDelayHighWarning=sensorThermostatDelayHighWarning, spRelayArray2_2Status=spRelayArray2_2Status, sensorTemperatureHighCritical=sensorTemperatureHighCritical, cfgServerIntegrationPort=cfgServerIntegrationPort, humiditySensorHighWarningDesc=humiditySensorHighWarningDesc, sensorProbeThermostatTemperatureArrayPort2EnableTime=sensorProbeThermostatTemperatureArrayPort2EnableTime, sensorProbeRelayArrayPort6ManualRelayAction=sensorProbeRelayArrayPort6ManualRelayAction, sensorProbeTemperatureArrayPort4ContTimeHighWarning=sensorProbeTemperatureArrayPort4ContTimeHighWarning, cfgSNMPv3AuthPassword=cfgSNMPv3AuthPassword, licenseVPN=licenseVPN, relayOffColor=relayOffColor, sensorFuelLowWarningDesc=sensorFuelLowWarningDesc, temperatureLowCritical=temperatureLowCritical, acVoltageSensorNormalDesc=acVoltageSensorNormalDesc, sensorProbeHost=sensorProbeHost, spSwitch57Status=spSwitch57Status, humiditySensorHighWarningColor=humiditySensorHighWarningColor, sensorTemperatureHighWarning=sensorTemperatureHighWarning, airflowSensorSensorErrorDesc=airflowSensorSensorErrorDesc, sensorProbeTempOffset=sensorProbeTempOffset, fuelSensorAmountMaxValue=fuelSensorAmountMaxValue, sensorProbeThermostatTemperatureArrayPort8HighLimit1=sensorProbeThermostatTemperatureArrayPort8HighLimit1, sensorHumidityHighCritical=sensorHumidityHighCritical, sensorProbeRelayArrayPort7Entry=sensorProbeRelayArrayPort7Entry, sensorDCvoltageDelayLowWarning=sensorDCvoltageDelayLowWarning, sensorProbeThermostatTemperatureArrayPort2GoOnline=sensorProbeThermostatTemperatureArrayPort2GoOnline, acVoltagePort=acVoltagePort, sensorProbeVRMSContTimeLowCritical=sensorProbeVRMSContTimeLowCritical, sensorProbeEnergyContTimeHighWarning=sensorProbeEnergyContTimeHighWarning, sensorProbeThermostatTemperatureArrayPort7Mode=sensorProbeThermostatTemperatureArrayPort7Mode, sensorProbeTempSendMail=sensorProbeTempSendMail, sensorProbeTemperatureArrayPort3DegreeRaw=sensorProbeTemperatureArrayPort3DegreeRaw, sensorProbeTemperatureArrayPort5ContTimeSensorError=sensorProbeTemperatureArrayPort5ContTimeSensorError, waterRopeSensorLength=waterRopeSensorLength, cfgDefaultDNS=cfgDefaultDNS, licVSensTotal=licVSensTotal, sensorProbeSoundDetectorSensorEntry=sensorProbeSoundDetectorSensorEntry, securitySensorNormalDesc=securitySensorNormalDesc, sensorProbeVirtualSwitchSensor=sensorProbeVirtualSwitchSensor, sensorProbeTemperatureArrayPort4Index=sensorProbeTemperatureArrayPort4Index, sensorProbeSoundDetectorMicSensitivity=sensorProbeSoundDetectorMicSensitivity, fuelSensorIndex=fuelSensorIndex, sensorProbeDrycontactArrayPort8ContTimeNormal=sensorProbeDrycontactArrayPort8ContTimeNormal, humiditySensorUnit=humiditySensorUnit, spIRMS3Status=spIRMS3Status, sensorProbeRelayArrayPort1RelayAction=sensorProbeRelayArrayPort1RelayAction, sensorProbeTemperatureArrayPort2HighCritical=sensorProbeTemperatureArrayPort2HighCritical, thermostatSensorDegree=thermostatSensorDegree, sensorProbeIDCVVoltateRatio=sensorProbeIDCVVoltateRatio, humiditySensorIndex=humiditySensorIndex, sensorProbeEnergyLowWarning=sensorProbeEnergyLowWarning, sensorGoOffline=sensorGoOffline, sensorSirenTable=sensorSirenTable, sensorThermostatDelayError=sensorThermostatDelayError)
