#
# PySNMP MIB module RS-XX8000-DVB-TX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX8000-DVB-TX-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 12:27:46 2024
# On host fv-az1019-803 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
IndexRack, indexAmplifier, EqualizerCalibrationState, eventAlarmPriority, LogbookEntrySlope, LogbookEntryMessagesExcTv, EventClass, TvStandard, FloatingPoint, indexRack, indexAB, EventMaxEntryNumber, SwitchOnOff, EventMask, EventPriority, ProdInfoModuleNameTv, LogbookEntryMessagesOST, Trigger, TimeOfDay, EventState, LogbookEntryMessagesNetCCU, IndexAmplifier, ReadableString, FailDelayStatus, eventEvent, Sx801AmplifierState, eventAlarmClass, rsXx8000, IndexAB, rsXx8000MibModule, FailDelayMode, InputSource, LogbookMaxEntryNumber = mibBuilder.importSymbols("RS-XX8000-COMMON-MIB", "IndexRack", "indexAmplifier", "EqualizerCalibrationState", "eventAlarmPriority", "LogbookEntrySlope", "LogbookEntryMessagesExcTv", "EventClass", "TvStandard", "FloatingPoint", "indexRack", "indexAB", "EventMaxEntryNumber", "SwitchOnOff", "EventMask", "EventPriority", "ProdInfoModuleNameTv", "LogbookEntryMessagesOST", "Trigger", "TimeOfDay", "EventState", "LogbookEntryMessagesNetCCU", "IndexAmplifier", "ReadableString", "FailDelayStatus", "eventEvent", "Sx801AmplifierState", "eventAlarmClass", "rsXx8000", "IndexAB", "rsXx8000MibModule", "FailDelayMode", "InputSource", "LogbookMaxEntryNumber")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, NotificationType, Bits, ObjectIdentity, Counter64, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, Integer32, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "NotificationType", "Bits", "ObjectIdentity", "Counter64", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "Integer32", "Gauge32", "Unsigned32")
DateAndTime, DisplayString, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention", "TruthValue", "RowStatus")
rsXx8000DvbTxMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 163, 3))
rsXx8000DvbTxMibModule.setRevisions(('2012-11-01 08:00', '2012-09-03 08:00', '2011-05-12 08:00', '2011-02-28 08:00', '2010-12-02 08:00', '2010-10-13 08:00', '2010-05-21 08:00', '2010-04-16 08:00', '2010-02-02 08:00', '2010-01-29 08:00', '2010-01-12 08:00', '2009-12-18 08:00', '2009-11-26 08:00', '2009-11-13 08:00', '2009-10-08 08:00', '2009-09-10 08:00', '2009-07-16 08:00', '2009-06-26 08:00', '2009-06-17 09:00', '2009-05-28 09:00', '2009-03-30 09:00', '2009-02-12 15:00', '2009-01-29 09:00', '2009-01-06 16:00', '2008-12-12 14:30', '2008-10-23 08:00', '2008-10-08 10:30', '2008-09-10 15:00', '2008-08-29 10:00', '2008-08-26 09:00', '2008-07-23 10:00', '2008-05-05 09:30', '2008-03-31 11:00', '2007-12-07 17:00', '2007-09-10 11:00', '2007-08-09 14:00', '2007-07-11 16:00', '2007-03-08 10:00', '2006-12-21 10:00',))
if mibBuilder.loadTexts: rsXx8000DvbTxMibModule.setLastUpdated('201211010800Z')
if mibBuilder.loadTexts: rsXx8000DvbTxMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
rsXx8000DvbTx = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4))
if mibBuilder.loadTexts: rsXx8000DvbTx.setStatus('current')
rsXx8000DvbTxObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1))
commandsTxTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1), )
if mibBuilder.loadTexts: commandsTxTable.setStatus('current')
commandsTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "cmdDeviceIdx"))
if mibBuilder.loadTexts: commandsTxEntry.setStatus('current')
cmdTxResetSumFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 1), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxResetSumFault.setStatus('current')
cmdTxParametersetLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxParametersetLoad.setStatus('current')
cmdTxParametersetSave = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxParametersetSave.setStatus('current')
cmdTxParametersetReSave = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 4), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxParametersetReSave.setStatus('obsolete')
cmdTxOperationModeProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 5), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxOperationModeProgram.setStatus('current')
cmdTxOperationModeReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxOperationModeReserve.setStatus('current')
cmdTxOpModeExcAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 7), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxOpModeExcAutomatic.setStatus('current')
cmdTxOpModeOstAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 8), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxOpModeOstAutomatic.setStatus('current')
cmdTxPreselectExciter = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 9), IndexAB()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxPreselectExciter.setStatus('current')
cmdTxPreselectOutputstage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("outputstageA", 1), ("outputstageB", 2), ("bothToAntenna", 3), ("bothToDummyLoad", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxPreselectOutputstage.setStatus('current')
cmdTxDelayTimeExcAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxDelayTimeExcAutomatic.setStatus('current')
cmdTxDelayTimeOstAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxDelayTimeOstAutomatic.setStatus('current')
cmdTxRfSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("antenna", 1), ("dummyLoad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxRfSwitch.setStatus('current')
cmdTxSystemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 15), TvStandard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxSystemMode.setStatus('current')
cmdTxProgramExciterPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 20), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxProgramExciterPrio.setStatus('current')
cmdTxChangeOver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 21), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxChangeOver.setStatus('current')
cmdTxSwitchPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("controlExcOnAmp", 2), ("programExcOnAmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdTxSwitchPosition.setStatus('current')
cmdDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 30), IndexAB())
if mibBuilder.loadTexts: cmdDeviceIdx.setStatus('current')
cmdExcOpModeInputAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 31), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcOpModeInputAutomatic.setStatus('current')
cmdExcPreselectInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input1", 1), ("input2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcPreselectInput.setStatus('current')
cmdExcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dvbT", 1), ("dvbH", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcMode.setStatus('current')
cmdExcNetworkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mfn", 1), ("sfn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcNetworkMode.setStatus('current')
cmdExcTPSSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manualPresets", 1), ("mip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSSource.setStatus('current')
cmdExcEnableCellID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 36), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcEnableCellID.setStatus('current')
cmdExcTxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTxAddress.setStatus('current')
cmdExcTxAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 38), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTxAutomatic.setStatus('current')
cmdExcInputAutoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 39), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputAutoSwitch.setStatus('deprecated')
cmdExcInputSeamless = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 40), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputSeamless.setStatus('current')
cmdExcInputPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("equal", 1), ("prior", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputPriority.setStatus('current')
cmdExcInputCheckTimeForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputCheckTimeForward.setStatus('current')
cmdExcInputCheckTimeSwitchback = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputCheckTimeSwitchback.setStatus('current')
cmdExcInputMuteOnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mute", 1), ("noMute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputMuteOnFail.setStatus('current')
cmdExcInputManualPreseletionHP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("asi", 2), ("smpte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputManualPreseletionHP1.setStatus('current')
cmdExcInputManualPreseletionHP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("asi", 2), ("smpte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputManualPreseletionHP2.setStatus('current')
cmdExcInputManualPreseletionLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("asi", 2), ("smpte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputManualPreseletionLP1.setStatus('current')
cmdExcInputManualPreseletionLP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("asi", 2), ("smpte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputManualPreseletionLP2.setStatus('current')
cmdExcTPSManualBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mhz5", 1), ("mhz6", 2), ("mhz7", 3), ("mhz8", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualBandwidth.setStatus('current')
cmdExcTPSManualFFTLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("k2", 1), ("k8", 2), ("k4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualFFTLength.setStatus('current')
cmdExcTPSManualGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneOf32", 1), ("oneOf16", 2), ("oneOf8", 3), ("oneOf4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualGuardInterval.setStatus('current')
cmdExcTPSManualConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qpsk", 1), ("qam16", 2), ("qam64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualConstellation.setStatus('current')
cmdExcTPSManualAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noHierarchy", 1), ("one", 2), ("two", 3), ("four", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualAlpha.setStatus('obsolete')
cmdExcTPSManualCellID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualCellID.setStatus('current')
cmdExcTPSManualInterleaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indepth", 1), ("nat", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualInterleaver.setStatus('current')
cmdExcTPSManualCoderateHP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("oneOf2", 1), ("twoOf3", 2), ("threeOf4", 3), ("fiveOf6", 4), ("sevenOf8", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualCoderateHP.setStatus('current')
cmdExcTPSManualCoderateLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("oneOf2", 1), ("twoOf3", 2), ("threeOf4", 3), ("fiveOf6", 4), ("sevenOf8", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualCoderateLP.setStatus('current')
cmdExcTPSManualTimeSlicingHP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 58), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualTimeSlicingHP.setStatus('current')
cmdExcTPSManualTimeSlicingLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 59), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualTimeSlicingLP.setStatus('current')
cmdExcTPSManualFECHP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 60), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualFECHP.setStatus('current')
cmdExcTPSManualFECLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 61), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualFECLP.setStatus('current')
cmdExcSFNStaticDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 62), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcSFNStaticDelay.setStatus('current')
cmdExcSFNDeviationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcSFNDeviationTime.setStatus('current')
cmdExcFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(47000000, 1500000000))).setUnits('Hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcFrequency.setStatus('current')
cmdExcReferenceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("intern", 1), ("extern5Mhz", 2), ("extern10Mhz", 3), ("extern1PPS", 4), ("internGPS", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcReferenceSource.setStatus('current')
cmdExcMuteOnPPSFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onlyAtStartup", 2), ("afterFailDelayTime", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcMuteOnPPSFail.setStatus('current')
cmdExcMuteOnReferenceFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onlyAtStartup", 2), ("afterFailDelayTime", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcMuteOnReferenceFail.setStatus('current')
cmdExcRefFailDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setUnits('Hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRefFailDelayTime.setStatus('current')
cmdExcTypeLossOfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("fault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTypeLossOfInput.setStatus('current')
cmdExcRfOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 70), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutput.setStatus('current')
cmdExcRfOutputRegulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 71), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutputRegulation.setStatus('current')
cmdExcRfOutputManualRfLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 72), FloatingPoint()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutputManualRfLevel.setStatus('current')
cmdExcRfOutputAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutputAttenuation.setStatus('current')
cmdExcRfOutputRfSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 74), FloatingPoint()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutputRfSlope.setStatus('current')
cmdExcRfOutputModulationSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 75), FloatingPoint()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutputModulationSlope.setStatus('current')
cmdExcRfIqAdjustStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("break", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustStart.setStatus('current')
cmdExcRfIqAdjustTestsignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 78), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustTestsignal.setStatus('current')
cmdExcRfIqAdjustBiasCoarseI = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1023, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasCoarseI.setStatus('current')
cmdExcRfIqAdjustBiasCoarseQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1023, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasCoarseQ.setStatus('current')
cmdExcRfIqAdjustBiasFineI = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasFineI.setStatus('current')
cmdExcRfIqAdjustBiasFineQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasFineQ.setStatus('current')
cmdExcRfIqAdjustGainI = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustGainI.setStatus('current')
cmdExcRfIqAdjustGainQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustGainQ.setStatus('current')
cmdExcRfIqAdjustPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 85), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustPhase.setStatus('current')
cmdExcInput1Source = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 86), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInput1Source.setStatus('current')
cmdExcInput2Source = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 87), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInput2Source.setStatus('current')
cmdExcInpAutoReadyAfterChangeOv = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 88), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInpAutoReadyAfterChangeOv.setStatus('current')
cmdExcInputFailDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputFailDelayTime.setStatus('current')
cmdExcTransmitterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atv", 1), ("dvb", 2), ("atsc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTransmitterType.setStatus('current')
cmdExcTimeScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 91), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTimeScheduler.setStatus('current')
cmdExcMuteCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onAllFaults", 1), ("notBeforeSyncLoss", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcMuteCondition.setStatus('current')
cmdExcRfWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 97), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfWarningLimit.setStatus('current')
cmdExcRfFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 98), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfFailLimit.setStatus('current')
cmdExcOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 99), FloatingPoint()).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcOutputPower.setStatus('current')
cmdOstRefVoltageVision = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 100), FloatingPoint()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdOstRefVoltageVision.setStatus('current')
cmdOstMaxOutletTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(45, 65))).setUnits('Degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdOstMaxOutletTempThreshold.setStatus('current')
cmdExcMonitoringOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("reference10MHz", 2), ("generated1PPS", 3), ("kHz1", 4), ("pulse1PPS", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcMonitoringOutput.setStatus('current')
cmdExcOcxoAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcOcxoAdjust.setStatus('current')
cmdExcExpectInputReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 112), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcExpectInputReserve.setStatus('current')
cmdExcEnablePcrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 113), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcEnablePcrReset.setStatus('obsolete')
cmdExcTimeForDailyPcrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 114), TimeOfDay()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTimeForDailyPcrReset.setStatus('obsolete')
cmdExcFailDelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 115), FailDelayMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcFailDelayMode.setStatus('current')
summaryInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2))
summaryFaultTx = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryFaultTx.setStatus('current')
summaryWarningTx = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryWarningTx.setStatus('current')
localModeTx = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModeTx.setStatus('current')
rfOnTx = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOnTx.setStatus('current')
forwardPower = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 5), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardPower.setStatus('current')
reflectedPower = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 6), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: reflectedPower.setStatus('current')
summaryFaultExcA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryFaultExcA.setStatus('current')
summaryFaultOstA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryFaultOstA.setStatus('current')
summaryFaultExcB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryFaultExcB.setStatus('current')
summaryFaultOstB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryFaultOstB.setStatus('current')
exciterAutomaticReady = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exciterAutomaticReady.setStatus('current')
exciterAutomaticChanged = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exciterAutomaticChanged.setStatus('current')
exciterAutomaticFault = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exciterAutomaticFault.setStatus('current')
outputstageAutomaticReady = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputstageAutomaticReady.setStatus('current')
outputstageAutomaticChanged = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputstageAutomaticChanged.setStatus('current')
outputstageAutomaticFault = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputstageAutomaticFault.setStatus('current')
noConnectionExcA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noConnectionExcA.setStatus('current')
noConnectionOstA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noConnectionOstA.setStatus('current')
noConnectionExcB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noConnectionExcB.setStatus('current')
noConnectionOstB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noConnectionOstB.setStatus('current')
activeExcA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeExcA.setStatus('current')
activeOstA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeOstA.setStatus('current')
activeExcB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeExcB.setStatus('current')
activeOstB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeOstB.setStatus('current')
forwardPowerOstA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 25), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardPowerOstA.setStatus('current')
reflectedPowerOstA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 26), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: reflectedPowerOstA.setStatus('current')
forwardPowerOstB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 27), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardPowerOstB.setStatus('current')
reflectedPowerOstB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 28), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: reflectedPowerOstB.setStatus('current')
powerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 29), FloatingPoint()).setUnits('volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupply.setStatus('current')
additionalPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: additionalPowerSupply.setStatus('current')
internalPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 31), FloatingPoint()).setUnits('volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPowerSupply.setStatus('current')
externalPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 32), FloatingPoint()).setUnits('volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPowerSupply.setStatus('current')
detailedInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3))
excInputTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2), )
if mibBuilder.loadTexts: excInputTable.setStatus('current')
excInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "excInputExcIdx"), (0, "RS-XX8000-DVB-TX-MIB", "excInputChannelIdx"))
if mibBuilder.loadTexts: excInputEntry.setStatus('current')
excInputExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 1), IndexAB())
if mibBuilder.loadTexts: excInputExcIdx.setStatus('current')
excInputChannelIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: excInputChannelIdx.setStatus('current')
excInputChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("hp1", 1), ("hp2", 2), ("lp1", 3), ("lp2", 4), ("activeHP", 5), ("activeLP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputChannelName.setStatus('current')
excInputConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputConnected.setStatus('current')
excInputSeamless = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputSeamless.setStatus('current')
excInputPreselected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputPreselected.setStatus('current')
excInputActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputActive.setStatus('current')
excInputMipFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputMipFail.setStatus('current')
excInputBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mhz5", 1), ("mhz6", 2), ("mhz7", 3), ("mhz8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputBandwidth.setStatus('current')
excInputFFTLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("k2", 1), ("k8", 2), ("k4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputFFTLength.setStatus('current')
excInputGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneOf32", 1), ("oneOf16", 2), ("oneOf8", 3), ("oneOf4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputGuardInterval.setStatus('current')
excInputConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qpsk", 1), ("qam16", 2), ("qam64", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputConstellation.setStatus('current')
excInputAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noHierarchy", 1), ("one", 2), ("two", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputAlpha.setStatus('obsolete')
excInputCellID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputCellID.setStatus('current')
excInputInterleaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indepth", 1), ("nat", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputInterleaver.setStatus('current')
excInputCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("oneOf2", 1), ("twoOf3", 2), ("threeOf4", 3), ("fiveOf6", 4), ("sevenOf8", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputCodeRate.setStatus('current')
excInputPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(188, 208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputPacketLength.setStatus('current')
excInputMeasuredDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputMeasuredDatarate.setStatus('current')
excInputRequiredDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputRequiredDatarate.setStatus('current')
excInputMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setUnits('Nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputMaximumDelay.setStatus('current')
ostTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3), )
if mibBuilder.loadTexts: ostTable.setStatus('current')
ostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "ostIdx"), (0, "RS-XX8000-DVB-TX-MIB", "ostRackIdx"), (0, "RS-XX8000-DVB-TX-MIB", "ostRackAmpIdx"))
if mibBuilder.loadTexts: ostEntry.setStatus('current')
ostIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 1), IndexAB())
if mibBuilder.loadTexts: ostIdx.setStatus('current')
ostRackIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 2), IndexRack())
if mibBuilder.loadTexts: ostRackIdx.setStatus('current')
ostRackInletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 3), FloatingPoint()).setUnits('Degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackInletTemperature.setStatus('current')
ostRackOutletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 4), FloatingPoint()).setUnits('Degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackOutletTemperature.setStatus('current')
ostRackAuxPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 5), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAuxPowerSupply.setStatus('current')
ostRackAmpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 400), IndexAmplifier())
if mibBuilder.loadTexts: ostRackAmpIdx.setStatus('current')
ostRackAmpI1A = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 401), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI1A.setStatus('current')
ostRackAmpI2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 402), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI2A.setStatus('current')
ostRackAmpI3A = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 403), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI3A.setStatus('current')
ostRackAmpI4A = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 404), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI4A.setStatus('current')
ostRackAmpI1B = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 405), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI1B.setStatus('current')
ostRackAmpI2B = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 406), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI2B.setStatus('current')
ostRackAmpI3B = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 407), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI3B.setStatus('current')
ostRackAmpI4B = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 408), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI4B.setStatus('current')
ostRackAmpIDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 409), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpIDrv.setStatus('current')
ostRackAmpUDc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 410), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpUDc.setStatus('current')
ostRackAmpIDc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 411), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpIDc.setStatus('current')
ostRackAmpUDcControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 412), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpUDcControl.setStatus('current')
ostRackAmpUReg = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 413), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpUReg.setStatus('current')
ostRackAmpPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 414), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpPowerA.setStatus('current')
ostRackAmpPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 415), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpPowerB.setStatus('current')
ostRackAmpPowerOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 416), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpPowerOut.setStatus('current')
ostRackAmpPowerReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 417), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpPowerReflection.setStatus('current')
ostRackAmpPowerReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 418), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpPowerReference.setStatus('current')
ostRackAmpDeltaPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 419), FloatingPoint()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpDeltaPhase.setStatus('current')
ostRackAmpCmdDeltaPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 420), FloatingPoint()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ostRackAmpCmdDeltaPhase.setStatus('current')
exciterStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20), )
if mibBuilder.loadTexts: exciterStatusTable.setStatus('current')
exciterStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "excStatusExcIdx"))
if mibBuilder.loadTexts: exciterStatusEntry.setStatus('current')
excStatusExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 3), IndexAB())
if mibBuilder.loadTexts: excStatusExcIdx.setStatus('current')
excStatusRfOutputAgcRegulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 4), FloatingPoint()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusRfOutputAgcRegulation.setStatus('current')
excStatusRfIqAdjustAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAdjusted", 1), ("inProgress", 2), ("adjusted", 3)))).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusRfIqAdjustAuto.setStatus('current')
excStatusRfIqAdjustLO1Frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 6), FloatingPoint()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusRfIqAdjustLO1Frequency.setStatus('current')
excStatusNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 7), Integer32()).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: excStatusNominalPower.setStatus('current')
excStatusVSWR = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 9), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusVSWR.setStatus('current')
excStatusSfnDelayProcessing = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 13), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayProcessing.setStatus('current')
excStatusSfnDelayDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 14), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayDynamic.setStatus('current')
excStatusSfnDelayNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 15), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayNetwork.setStatus('current')
excStatusSfnDelayTxOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 16), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayTxOffset.setStatus('current')
excStatusSfnDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 17), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayMaximum.setStatus('current')
excStatusSfnDelayTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 18), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayTotal.setStatus('current')
excStatusAmplifierControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusAmplifierControl.setStatus('current')
excStatusReqDataRateHP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 30), Integer32()).setUnits('bit per seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusReqDataRateHP.setStatus('current')
excStatusReqDataRateLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 31), Integer32()).setUnits('bit per seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusReqDataRateLP.setStatus('current')
excStatusFailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 40), FailDelayStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusFailDelay.setStatus('current')
exciterPrecorrectionTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21), )
if mibBuilder.loadTexts: exciterPrecorrectionTable.setStatus('current')
exciterPrecorrectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "excPrecExcIdx"))
if mibBuilder.loadTexts: exciterPrecorrectionEntry.setStatus('current')
excPrecExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 3), IndexAB())
if mibBuilder.loadTexts: excPrecExcIdx.setStatus('current')
excPrecLinCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 4), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecLinCorrection.setStatus('current')
excPrecLinAutomaticADE = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2), ("adaptive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecLinAutomaticADE.setStatus('current')
excPrecLinMaxAmplitudeRipple = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 6), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecLinMaxAmplitudeRipple.setStatus('current')
excPrecLinMaxGroupDelayRipple = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setUnits('Nanoseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecLinMaxGroupDelayRipple.setStatus('current')
excPrecLinAmplitudeRipple = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 8), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecLinAmplitudeRipple.setStatus('current')
excPrecLinGroupDelayRipple = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 9), Integer32()).setUnits('Nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecLinGroupDelayRipple.setStatus('current')
excPrecLinInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tooHigh", 1), ("ok", 2), ("tooLow", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecLinInputLevel.setStatus('current')
excPrecLinAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("active", 2), ("calculate", 3), ("measure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecLinAutomatic.setStatus('current')
excPrecNonlinCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 12), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecNonlinCorrection.setStatus('current')
excPrecNonlinAutomaticADE = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2), ("adaptive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecNonlinAutomaticADE.setStatus('current')
excPrecNonlinThresholdShoulders = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 14), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecNonlinThresholdShoulders.setStatus('current')
excPrecNonlinShoulderLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 15), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecNonlinShoulderLeft.setStatus('current')
excPrecNonlinShoulderRight = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 16), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecNonlinShoulderRight.setStatus('current')
excPrecNonlinInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tooHigh", 1), ("ok", 2), ("tooLow", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecNonlinInputLevel.setStatus('current')
excPrecNonlinAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("active", 2), ("calculate", 3), ("measure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecNonlinAutomatic.setStatus('current')
excPrecUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 100), EqualizerCalibrationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecUserState.setStatus('current')
excPrecFactoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 101), EqualizerCalibrationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecFactoryState.setStatus('current')
excPrecRestoreCurrentSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecRestoreCurrentSettings.setStatus('current')
excPrecRestoreAllSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecRestoreAllSettings.setStatus('current')
configurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30), )
if mibBuilder.loadTexts: configurationTable.setStatus('current')
configurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "configTvStandardIdx"))
if mibBuilder.loadTexts: configurationEntry.setStatus('current')
configTvStandardIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 3), TvStandard())
if mibBuilder.loadTexts: configTvStandardIdx.setStatus('current')
configTvStandardName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 5), TvStandard()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTvStandardName.setStatus('current')
configRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160000000, 910000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: configRxFrequency.setStatus('current')
configFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(47000000, 1500000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFrequency.setStatus('current')
configPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 8), FloatingPoint()).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPower.setStatus('current')
configInputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 9), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configInputSource.setStatus('current')
timeSchedulerTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31), )
if mibBuilder.loadTexts: timeSchedulerTable.setStatus('current')
timeSchedulerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "schedulerDateTimeIdx"))
if mibBuilder.loadTexts: timeSchedulerEntry.setStatus('current')
schedulerDateTimeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1, 3), DateAndTime())
if mibBuilder.loadTexts: schedulerDateTimeIdx.setStatus('current')
schedulerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedulerRowStatus.setStatus('current')
schedulerEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("daily", 1), ("once", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedulerEvent.setStatus('current')
schedulerDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerDateTime.setStatus('current')
schedulerTvStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1, 8), TvStandard()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedulerTvStandard.setStatus('current')
configuration2Table = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32), )
if mibBuilder.loadTexts: configuration2Table.setStatus('current')
configuration2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1), )
configurationEntry.registerAugmentions(("RS-XX8000-DVB-TX-MIB", "configuration2Entry"))
configuration2Entry.setIndexNames(*configurationEntry.getIndexNames())
if mibBuilder.loadTexts: configuration2Entry.setStatus('current')
config2TvStandardName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1, 5), TvStandard()).setMaxAccess("readonly")
if mibBuilder.loadTexts: config2TvStandardName.setStatus('current')
config2RxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160000000, 910000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: config2RxFrequency.setStatus('current')
config2Frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(47000000, 1500000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: config2Frequency.setStatus('current')
config2Power = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1, 8), FloatingPoint()).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: config2Power.setStatus('current')
config2InputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1, 9), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: config2InputSource.setStatus('current')
productInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100), )
if mibBuilder.loadTexts: productInfoTable.setStatus('current')
productInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "prodInfoModuleIdx"), (0, "RS-XX8000-DVB-TX-MIB", "prodInfoDeviceIdx"), (0, "RS-XX8000-DVB-TX-MIB", "prodInfoRackIdx"), (0, "RS-XX8000-DVB-TX-MIB", "prodInfoAmpIdx"))
if mibBuilder.loadTexts: productInfoEntry.setStatus('current')
prodInfoModuleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 1), ProdInfoModuleNameTv())
if mibBuilder.loadTexts: prodInfoModuleIdx.setStatus('current')
prodInfoDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 2), IndexAB())
if mibBuilder.loadTexts: prodInfoDeviceIdx.setStatus('current')
prodInfoRackIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 3), IndexRack())
if mibBuilder.loadTexts: prodInfoRackIdx.setStatus('current')
prodInfoAmpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 4), IndexAmplifier())
if mibBuilder.loadTexts: prodInfoAmpIdx.setStatus('current')
prodInfoModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 5), ProdInfoModuleNameTv()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoModuleName.setStatus('current')
prodInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 6), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoSerialNumber.setStatus('current')
prodInfoIdentNumberSW = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 7), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoIdentNumberSW.setStatus('current')
prodInfoVersionNumberSW = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 8), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoVersionNumberSW.setStatus('current')
prodInfoIdentNumberHW = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 9), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoIdentNumberHW.setStatus('current')
prodInfoVersionNumberHW = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 10), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoVersionNumberHW.setStatus('current')
productInfoProductDateHW = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productInfoProductDateHW.setStatus('current')
logbook = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4))
netCCUNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 1), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCUNumberOfEntries.setStatus('current')
netCCULogbookClear = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 2), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netCCULogbookClear.setStatus('current')
netCCULogbookTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3), )
if mibBuilder.loadTexts: netCCULogbookTable.setStatus('current')
netCCULogbookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "netCCULogbookEntryIdx"))
if mibBuilder.loadTexts: netCCULogbookEntry.setStatus('current')
netCCULogbookEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 1), LogbookMaxEntryNumber())
if mibBuilder.loadTexts: netCCULogbookEntryIdx.setStatus('current')
netCCULogbookEntryNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 2), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCULogbookEntryNbr.setStatus('current')
netCCULogbookType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 3), EventClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCULogbookType.setStatus('current')
netCCULogbookSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 4), LogbookEntrySlope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCULogbookSlope.setStatus('current')
netCCULogbookMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 5), LogbookEntryMessagesNetCCU()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCULogbookMessage.setStatus('current')
netCCULogbookDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCULogbookDateTime.setStatus('current')
exciterANumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 4), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exciterANumberOfEntries.setStatus('current')
exciterALogbookClear = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 5), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exciterALogbookClear.setStatus('current')
exciterALogbookTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6), )
if mibBuilder.loadTexts: exciterALogbookTable.setStatus('current')
exciterALogbookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "excALogbookEntryIdx"))
if mibBuilder.loadTexts: exciterALogbookEntry.setStatus('current')
excALogbookEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 1), LogbookMaxEntryNumber())
if mibBuilder.loadTexts: excALogbookEntryIdx.setStatus('current')
excALogbookEntryNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 2), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excALogbookEntryNbr.setStatus('current')
excALogbookType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 3), EventClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excALogbookType.setStatus('current')
excALogbookSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 4), LogbookEntrySlope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excALogbookSlope.setStatus('current')
excALogbookMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 5), LogbookEntryMessagesExcTv()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excALogbookMessage.setStatus('current')
excALogbookDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excALogbookDateTime.setStatus('current')
outputstageANumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 7), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputstageANumberOfEntries.setStatus('current')
outputstageALogbookClear = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 8), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputstageALogbookClear.setStatus('current')
outputstageALogbookTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9), )
if mibBuilder.loadTexts: outputstageALogbookTable.setStatus('current')
outputstageALogbookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "ostALogbookEntryIdx"))
if mibBuilder.loadTexts: outputstageALogbookEntry.setStatus('current')
ostALogbookEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 1), LogbookMaxEntryNumber())
if mibBuilder.loadTexts: ostALogbookEntryIdx.setStatus('current')
ostALogbookEntryNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 2), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostALogbookEntryNbr.setStatus('current')
ostALogbookType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 3), EventClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostALogbookType.setStatus('current')
ostALogbookSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 4), LogbookEntrySlope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostALogbookSlope.setStatus('current')
ostALogbookMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 5), LogbookEntryMessagesOST()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostALogbookMessage.setStatus('current')
ostALogbookDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostALogbookDateTime.setStatus('current')
exciterBNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 10), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exciterBNumberOfEntries.setStatus('current')
exciterBLogbookClear = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 11), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exciterBLogbookClear.setStatus('current')
exciterBLogbookTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12), )
if mibBuilder.loadTexts: exciterBLogbookTable.setStatus('current')
exciterBLogbookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "excBLogbookEntryIdx"))
if mibBuilder.loadTexts: exciterBLogbookEntry.setStatus('current')
excBLogbookEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 1), LogbookMaxEntryNumber())
if mibBuilder.loadTexts: excBLogbookEntryIdx.setStatus('current')
excBLogbookEntryNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 2), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excBLogbookEntryNbr.setStatus('current')
excBLogbookType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 3), EventClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excBLogbookType.setStatus('current')
excBLogbookSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 4), LogbookEntrySlope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excBLogbookSlope.setStatus('current')
excBLogbookMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 5), LogbookEntryMessagesExcTv()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excBLogbookMessage.setStatus('current')
excBLogbookDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excBLogbookDateTime.setStatus('current')
outputstageBNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 13), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputstageBNumberOfEntries.setStatus('current')
outputstageBLogbookClear = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 14), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputstageBLogbookClear.setStatus('current')
outputstageBLogbookTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15), )
if mibBuilder.loadTexts: outputstageBLogbookTable.setStatus('current')
outputstageBLogbookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "ostBLogbookEntryIdx"))
if mibBuilder.loadTexts: outputstageBLogbookEntry.setStatus('current')
ostBLogbookEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 1), LogbookMaxEntryNumber())
if mibBuilder.loadTexts: ostBLogbookEntryIdx.setStatus('current')
ostBLogbookEntryNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 2), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostBLogbookEntryNbr.setStatus('current')
ostBLogbookType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 3), EventClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostBLogbookType.setStatus('current')
ostBLogbookSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 4), LogbookEntrySlope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostBLogbookSlope.setStatus('current')
ostBLogbookMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 5), LogbookEntryMessagesOST()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostBLogbookMessage.setStatus('current')
ostBLogbookDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostBLogbookDateTime.setStatus('current')
rfProbesTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5), )
if mibBuilder.loadTexts: rfProbesTable.setStatus('current')
rfProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "rfProbesOstIdx"))
if mibBuilder.loadTexts: rfProbesEntry.setStatus('current')
rfProbesNetCCURfProbe1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 1), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbesNetCCURfProbe1.setStatus('current')
rfProbesNetCCURfProbe2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 2), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbesNetCCURfProbe2.setStatus('current')
rfProbesAntFwdNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 3), FloatingPoint()).setUnits('Watt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdNominal.setStatus('current')
rfProbesAntFwdWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 4), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdWarningLimit.setStatus('current')
rfProbesAntFwdFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 5), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdFailLimit.setStatus('current')
rfProbesAntFwdDelayTimeRfFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdDelayTimeRfFail.setStatus('current')
rfProbesAntFwdSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 7), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdSetOffset.setStatus('current')
rfProbesAntFwdSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 8), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdSetGain.setStatus('current')
rfProbesAntReflWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 9), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntReflWarningLimit.setStatus('current')
rfProbesAntReflSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 10), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntReflSetOffset.setStatus('current')
rfProbesAntReflSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 11), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntReflSetGain.setStatus('current')
rfProbesDLFwdNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 12), FloatingPoint()).setUnits('Watt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdNominal.setStatus('current')
rfProbesDLFwdWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 13), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdWarningLimit.setStatus('current')
rfProbesDLFwdFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 14), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdFailLimit.setStatus('current')
rfProbesDLFwdDelayTimeRfFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdDelayTimeRfFail.setStatus('current')
rfProbesDLFwdSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 16), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdSetOffset.setStatus('current')
rfProbesDLFwdSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 17), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdSetGain.setStatus('current')
rfProbesDLReflWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 18), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLReflWarningLimit.setStatus('current')
rfProbesDLReflSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 19), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLReflSetOffset.setStatus('current')
rfProbesDLReflSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 20), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLReflSetGain.setStatus('current')
rfProbesOstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 21), IndexAB())
if mibBuilder.loadTexts: rfProbesOstIdx.setStatus('current')
rfProbesOstFwdNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 22), FloatingPoint()).setUnits('Watt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdNominal.setStatus('current')
rfProbesOstFwdWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 23), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdWarningLimit.setStatus('current')
rfProbesOstFwdFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 24), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdFailLimit.setStatus('current')
rfProbesOstFwdDelayTimeRfFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdDelayTimeRfFail.setStatus('current')
rfProbesOstFwdSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 26), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdSetOffset.setStatus('current')
rfProbesOstFwdSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 27), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdSetGain.setStatus('current')
rfProbesOstReflWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 28), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstReflWarningLimit.setStatus('current')
rfProbesOstReflSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 29), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstReflSetOffset.setStatus('current')
rfProbesOstReflSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 30), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstReflSetGain.setStatus('current')
rackTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6), )
if mibBuilder.loadTexts: rackTable.setStatus('current')
rackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "ostDeviceIdx"), (0, "RS-XX8000-DVB-TX-MIB", "rackIdx"), (0, "RS-XX8000-DVB-TX-MIB", "rackRfProbeIdx"))
if mibBuilder.loadTexts: rackEntry.setStatus('current')
ostDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 2), IndexAB())
if mibBuilder.loadTexts: ostDeviceIdx.setStatus('current')
rackIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 3), IndexRack())
if mibBuilder.loadTexts: rackIdx.setStatus('current')
rackRfProbeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("reflected", 2))))
if mibBuilder.loadTexts: rackRfProbeIdx.setStatus('current')
amplifiersPerRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amplifiersPerRack.setStatus('current')
rackRfEventSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rackRfEventSignalling.setStatus('current')
rackReferenceVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 8), FloatingPoint()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rackReferenceVoltage.setStatus('current')
amplifiersPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 9), FloatingPoint()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: amplifiersPowerSupply.setStatus('current')
rackGeneralPurposeInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 1), ("doorOpen", 2), ("extCoolingWarning", 3), ("extCoolingFault", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rackGeneralPurposeInput.setStatus('current')
rackOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 20), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rackOnOff.setStatus('current')
rfProbePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 50), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbePresent.setStatus('current')
rfProbeConfigurationLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 51), ReadableString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeConfigurationLabel.setStatus('obsolete')
rfProbeConfigurationNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeConfigurationNominalValue.setStatus('current')
rfProbeThresholdRfFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 55), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeThresholdRfFailLimit.setStatus('current')
rfProbeThresholdTimeoutRfFailCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeThresholdTimeoutRfFailCtr.setStatus('current')
rfProbeThresholdWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 57), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeThresholdWarningLimit.setStatus('current')
rfProbeCalibrationGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 60), FloatingPoint()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbeCalibrationGain.setStatus('current')
rfProbeCalibrationOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 61), FloatingPoint()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbeCalibrationOffset.setStatus('current')
rfProbeCalibrationSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 62), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeCalibrationSetGain.setStatus('current')
rfProbeCalibrationSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 63), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeCalibrationSetOffset.setStatus('current')
rfProbeMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 65), FloatingPoint()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbeMeasuredValue.setStatus('current')
sx801AmplifierTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7), )
if mibBuilder.loadTexts: sx801AmplifierTable.setStatus('current')
sx801AmplifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "sx801AmpIdx"))
if mibBuilder.loadTexts: sx801AmplifierEntry.setStatus('current')
sx801AmpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 1), IndexAmplifier())
if mibBuilder.loadTexts: sx801AmpIdx.setStatus('current')
sx801AmpRfOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 2), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpRfOut.setStatus('current')
sx801AmpRfIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 3), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpRfIn.setStatus('current')
sx801AmpReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("warning", 2), ("unknown", 3), ("fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpReflection.setStatus('current')
sx801AmpOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpOn.setStatus('current')
sx801AmpAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 6), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpAC.setStatus('current')
sx801AmpCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("unknown", 2), ("ok", 3), ("fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpCommunication.setStatus('current')
sx801AmpTransistor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 8), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpTransistor.setStatus('current')
sx801AmpDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 9), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpDriver.setStatus('current')
sx801AmpTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 10), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpTemperature.setStatus('current')
sx801AmpBlower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 11), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpBlower.setStatus('current')
sx801AmpRegulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 12), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpRegulation.setStatus('current')
sx801AmpUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpUpdate.setStatus('current')
sx801Supply1Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 14), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply1Temperature.setStatus('current')
sx801Supply2Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 15), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply2Temperature.setStatus('current')
sx801SupplyRTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 16), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801SupplyRTemperature.setStatus('current')
sx801Supply1DC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 17), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply1DC.setStatus('current')
sx801Supply2DC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 18), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply2DC.setStatus('current')
sx801SupplyRDC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 19), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801SupplyRDC.setStatus('current')
sx801AmpValueI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 50), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueI1.setStatus('current')
sx801AmpValueI2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 51), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueI2.setStatus('current')
sx801AmpValueI3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 52), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueI3.setStatus('current')
sx801AmpValueI4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 53), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueI4.setStatus('current')
sx801AmpValueIPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 54), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueIPre.setStatus('current')
sx801AmpValueIDrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 55), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueIDrv1.setStatus('current')
sx801AmpValueIDrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 56), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueIDrv2.setStatus('current')
sx801AmpValuePowerOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 57), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValuePowerOut.setStatus('current')
sx801AmpValueReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 58), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueReflection.setStatus('current')
sx801AmpValueVRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 59), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueVRef.setStatus('current')
sx801AmpValueVReg = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 60), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueVReg.setStatus('current')
sx801AmpValueTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 61), FloatingPoint()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueTemperature.setStatus('current')
sx801AmpValueMonAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 62), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueMonAtt.setStatus('current')
sx801AmpValueVAux1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 63), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueVAux1.setStatus('current')
sx801AmpValueVAux2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 64), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueVAux2.setStatus('current')
sx801Supply1ValuePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 65), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply1ValuePwr.setStatus('current')
sx801Supply2ValuePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 66), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply2ValuePwr.setStatus('current')
sx801Supply1ValueDc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 67), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply1ValueDc.setStatus('current')
sx801Supply2ValueDc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 68), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply2ValueDc.setStatus('current')
rsXx8000DvbTxEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3))
eventTx = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2))
eventsTxV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0))
if mibBuilder.loadTexts: eventsTxV2.setStatus('current')
txSummaryFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 1)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txSummaryFault.setStatus('current')
txSummaryWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 2)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txSummaryWarning.setStatus('current')
txLocal = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 3)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txLocal.setStatus('current')
txRfOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 4)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfOn.setStatus('current')
txRfOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 5)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfOk.setStatus('current')
txParamSetSubDeviceDiffers = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 6)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txParamSetSubDeviceDiffers.setStatus('obsolete')
txParamSetValuesChanged = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 7)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txParamSetValuesChanged.setStatus('current')
txRfLoopProgram = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 8)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfLoopProgram.setStatus('current')
txRfLoopReserve = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 9)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfLoopReserve.setStatus('current')
txRfWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 10)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfWarning.setStatus('current')
txReflectionWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 11)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txReflectionWarning.setStatus('current')
txNetCCUFanFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 12)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUFanFault.setStatus('current')
txNetCCUPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 13)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUPowerSupply.setStatus('current')
txRfFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 14)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfFail.setStatus('current')
txReflectionFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 15)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txReflectionFault.setStatus('current')
txNetCCUBoardTemperatureFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 16)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUBoardTemperatureFault.setStatus('deprecated')
txNetCCUNoConnectionToExcA = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 17)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUNoConnectionToExcA.setStatus('current')
txNetCCUNoConnectionToOstA = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 18)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUNoConnectionToOstA.setStatus('current')
txNetCCUNoConnectionToExcB = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 19)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUNoConnectionToExcB.setStatus('current')
txNetCCUNoConnectionToOstB = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 20)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUNoConnectionToOstB.setStatus('current')
txAutomaticExcReady = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 21)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticExcReady.setStatus('current')
txAutomaticExcChanged = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 22)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticExcChanged.setStatus('current')
txAutomaticExcFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 23)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticExcFault.setStatus('current')
txAutomaticOstReady = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 24)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticOstReady.setStatus('current')
txAutomaticOstChanged = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 25)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticOstChanged.setStatus('current')
txAutomaticOstFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 26)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticOstFault.setStatus('current')
txNetCCUBoardTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 27)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUBoardTemperatureWarning.setStatus('current')
txInternalPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 30)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txInternalPowerSupplyWarning.setStatus('current')
txExternalPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 31)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txExternalPowerSupplyWarning.setStatus('current')
txModeSwitchOverStarted = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 35)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txModeSwitchOverStarted.setStatus('current')
txModeSwitchOverEnded = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 36)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txModeSwitchOverEnded.setStatus('current')
txModeInconsistent = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 37)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txModeInconsistent.setStatus('current')
txModeSwitchOverFailed = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 38)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txModeSwitchOverFailed.setStatus('current')
txExcSummaryFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 100)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcSummaryFault.setStatus('current')
txExcSummaryWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 101)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcSummaryWarning.setStatus('current')
txExcLocal = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 102)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcLocal.setStatus('current')
txExcRfOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 104)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcRfOk.setStatus('current')
txExcInputNoConnectHP1 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 105)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputNoConnectHP1.setStatus('current')
txExcInputNoConnectLP1 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 106)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputNoConnectLP1.setStatus('current')
txExcInputNoConnectHP2 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 107)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputNoConnectHP2.setStatus('current')
txExcInputNoConnectLP2 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 108)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputNoConnectLP2.setStatus('current')
txExcInputActiveHP1 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 109)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputActiveHP1.setStatus('current')
txExcInputActiveLP1 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 110)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputActiveLP1.setStatus('current')
txExcInputActiveHP2 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 111)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputActiveHP2.setStatus('current')
txExcInputActiveLP2 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 112)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputActiveLP2.setStatus('current')
txExcOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 113)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcOn.setStatus('current')
txExcRfOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 114)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcRfOn.setStatus('current')
txExcNoInput = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 115)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcNoInput.setStatus('current')
txExcRfLoop = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 116)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcRfLoop.setStatus('current')
txExcRfFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 117)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcRfFail.setStatus('current')
txExcSelfTest = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 118)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcSelfTest.setStatus('current')
txExcOutputOpen = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 119)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcOutputOpen.setStatus('current')
txExcBoardTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 120)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcBoardTemperatureWarning.setStatus('current')
txExcFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 121)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcFanWarning.setStatus('current')
txExcFanFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 122)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcFanFault.setStatus('current')
txExcFifoWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 123)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcFifoWarning.setStatus('current')
txExcTestSignal = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 124)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcTestSignal.setStatus('current')
txExcSFNDelay = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 125)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcSFNDelay.setStatus('current')
txExcWrongDatarate = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 126)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcWrongDatarate.setStatus('current')
txExcMute = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 127)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcMute.setStatus('current')
txExcPPSFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 128)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcPPSFail.setStatus('current')
txExcReferenceFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 129)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcReferenceFail.setStatus('current')
txExcMIPFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 130)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcMIPFail.setStatus('current')
txExcInputAutomaticSwitchReady = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 131)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputAutomaticSwitchReady.setStatus('current')
txExcInputAutomaticChangedOver = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 132)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputAutomaticChangedOver.setStatus('current')
txExcInputReseveMissing = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 133))
if mibBuilder.loadTexts: txExcInputReseveMissing.setStatus('current')
txOstSummaryFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 200)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstSummaryFault.setStatus('current')
txOstSummaryWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 201)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstSummaryWarning.setStatus('current')
txOstRfOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 202)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstRfOn.setStatus('current')
txOstRfOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 203)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstRfOk.setStatus('current')
txOstNoInput = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 204)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstNoInput.setStatus('current')
txOstRfWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 205)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstRfWarning.setStatus('current')
txOstReflectionWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 206)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstReflectionWarning.setStatus('current')
txOstRackWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 207)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstRackWarning.setStatus('current')
txOstCoolingWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 208)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstCoolingWarning.setStatus('current')
txOstRfFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 209)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstRfFail.setStatus('current')
txOstReflectionFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 210)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstReflectionFault.setStatus('current')
txOstACFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 211)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstACFault.setStatus('current')
txOstCoolingFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 212)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstCoolingFault.setStatus('current')
txOstCommFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 213)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstCommFault.setStatus('current')
txRackSumFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 300)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackSumFault.setStatus('current')
txRackSumWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 301)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackSumWarning.setStatus('current')
txRackOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 302)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackOn.setStatus('current')
txRackGpiWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 303)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackGpiWarning.setStatus('current')
txRackFan1Fault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 304)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackFan1Fault.setStatus('current')
txRackFan2Fault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 305)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackFan2Fault.setStatus('current')
txRackCoolingSumWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 306)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackCoolingSumWarning.setStatus('current')
txRackAmplifierSumFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 307)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackAmplifierSumFault.setStatus('current')
txRackNoLink = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 308)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackNoLink.setStatus('current')
txRackGpiFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 309)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackGpiFault.setStatus('current')
txRackTemperatureFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 310)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackTemperatureFault.setStatus('current')
txRackACFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 311)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackACFault.setStatus('current')
txRackCoolingSumFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 312)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackCoolingSumFault.setStatus('current')
txRackTempFaultAbs1 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 313)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackTempFaultAbs1.setStatus('current')
txRackTempFaultAbs2 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 314)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackTempFaultAbs2.setStatus('current')
txRackDCFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 315)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackDCFault.setStatus('current')
txRackRfOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 318)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackRfOn.setStatus('current')
txRackRfOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 319)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackRfOk.setStatus('current')
txRackRfWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 320)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackRfWarning.setStatus('current')
txRackRfFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 321)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackRfFault.setStatus('current')
txRackReflectionWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 322)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackReflectionWarning.setStatus('current')
txRackReflectionFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 323)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackReflectionFault.setStatus('current')
txRackProbeNotCalibrated = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 330)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackProbeNotCalibrated.setStatus('current')
txRackTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 331)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackTemperatureWarning.setStatus('current')
txRackOvervoltProtectWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 335)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackOvervoltProtectWarning.setStatus('current')
txAmpSumFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 400)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpSumFault.setStatus('current')
txAmpSumWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 401)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpSumWarning.setStatus('current')
txAmpPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 402)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpPowerOn.setStatus('current')
txAmpDCOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 403)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpDCOk.setStatus('current')
txAmpACOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 404)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpACOk.setStatus('current')
txAmpRfInFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 405)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpRfInFail.setStatus('current')
txAmpRfFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 406)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpRfFail.setStatus('current')
txAmpReflectionFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 407)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpReflectionFault.setStatus('current')
txAmpTemperatureFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 408)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpTemperatureFault.setStatus('current')
txAmpTransistorFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 409)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpTransistorFault.setStatus('current')
eventsTxTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1), )
if mibBuilder.loadTexts: eventsTxTable.setStatus('current')
eventsTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "eventTxABIdx"), (0, "RS-XX8000-DVB-TX-MIB", "eventTxRackIdx"), (0, "RS-XX8000-DVB-TX-MIB", "eventTxAmpIdx"), (0, "RS-XX8000-DVB-TX-MIB", "eventTxNameIdx"))
if mibBuilder.loadTexts: eventsTxEntry.setStatus('current')
eventTxABIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a", 1), ("b", 2))))
if mibBuilder.loadTexts: eventTxABIdx.setStatus('current')
eventTxRackIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: eventTxRackIdx.setStatus('current')
eventTxAmpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: eventTxAmpIdx.setStatus('current')
eventTxNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 4), EventMaxEntryNumber())
if mibBuilder.loadTexts: eventTxNameIdx.setStatus('current')
eventTxName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 35, 36, 37, 38, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 330, 331, 335, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409))).clone(namedValues=NamedValues(("txSummaryFault", 1), ("txSummaryWarning", 2), ("txLocal", 3), ("txRfOn", 4), ("txRfOk", 5), ("txParamSetSubDeviceDiffers", 6), ("txParamSetValuesChanged", 7), ("txRfLoopProgram", 8), ("txRfLoopReserve", 9), ("txRfWarning", 10), ("txReflectionWarning", 11), ("txNetCCUFanFault", 12), ("txNetCCUPowerSupply", 13), ("txRfFail", 14), ("txReflectionFault", 15), ("txNetCCUBoardTemperatureFault", 16), ("txNetCCUNoConnectionToExcA", 17), ("txNetCCUNoConnectionToOstA", 18), ("txNetCCUNoConnectionToExcB", 19), ("txNetCCUNoConnectionToOstB", 20), ("txAutomaticExcReady", 21), ("txAutomaticExcChanged", 22), ("txAutomaticExcFault", 23), ("txAutomaticOstReady", 24), ("txAutomaticOstChanged", 25), ("txAutomaticOstFault", 26), ("txNetCCUBoardTemperatureWarning", 27), ("txInternalPowerSupplyWarning", 30), ("txExternalPowerSupplyWarning", 31), ("txModeSwitchOverStarted", 35), ("txModeSwitchOverEnded", 36), ("txModeInconsistent", 37), ("txModeSwitchOverFailed", 38), ("txExcSummaryFault", 100), ("txExcSummaryWarning", 101), ("txExcLocal", 102), ("txExcRfOk", 104), ("txExcInputNoConnectHP1", 105), ("txExcInputNoConnectLP1", 106), ("txExcInputNoConnectHP2", 107), ("txExcInputNoConnectLP2", 108), ("txExcInputActiveHP1", 109), ("txExcInputActiveLP1", 110), ("txExcInputActiveHP2", 111), ("txExcInputActiveLP2", 112), ("txExcOn", 113), ("txExcRfOn", 114), ("txExcNoInput", 115), ("txExcRfLoop", 116), ("txExcRfFail", 117), ("txExcSelfTest", 118), ("txExcOutputOpen", 119), ("txExcBoardTemperatureWarning", 120), ("txExcFanWarning", 121), ("txExcFanFault", 122), ("txExcFifoWarning", 123), ("txExcTestSignal", 124), ("txExcSFNDelay", 125), ("txExcWrongDatarate", 126), ("txExcMute", 127), ("txExcPPSFail", 128), ("txExcReferenceFail", 129), ("txExcMIPFail", 130), ("txExcInputAutomaticSwitchReady", 131), ("txExcInputAutomaticChangedOver", 132), ("txExcInputReseveMissing", 133), ("txOstSummaryFault", 200), ("txOstSummaryWarning", 201), ("txOstRfOn", 202), ("txOstRfOk", 203), ("txOstNoInput", 204), ("txOstRfWarning", 205), ("txOstReflectionWarning", 206), ("txOstRackWarning", 207), ("txOstCoolingWarning", 208), ("txOstRfFail", 209), ("txOstReflectionFault", 210), ("txOstACFault", 211), ("txOstCoolingFault", 212), ("txOstCommFault", 213), ("txRackSumFault", 300), ("txRackSumWarning", 301), ("txRackOn", 302), ("txRackGpiWarning", 303), ("txRackFan1Fault", 304), ("txRackFan2Fault", 305), ("txRackCoolingSumWarning", 306), ("txRackAmplifierSumFault", 307), ("txRackNoLink", 308), ("txRackGpiFault", 309), ("txRackTemperatureFault", 310), ("txRackACFault", 311), ("txRackCoolingSumFault", 312), ("txRackTempFaultAbs1", 313), ("txRackTempFaultAbs2", 314), ("txRackDCFault", 315), ("txRackRfOn", 318), ("txRackRfOk", 319), ("txRackRfWarning", 320), ("txRackRfFault", 321), ("txRackReflectionWarning", 322), ("txRackReflectionFault", 323), ("txRackProbeNotCalibrated", 330), ("txRackTemperatureWarning", 331), ("txRackOvervoltProtectWarning", 335), ("txAmpSumFault", 400), ("txAmpSumWarning", 401), ("txAmpPowerOn", 402), ("txAmpDCOk", 403), ("txAmpACOk", 404), ("txAmpRfInFail", 405), ("txAmpRfFail", 406), ("txAmpReflectionFault", 407), ("txAmpTemperatureFault", 408), ("txAmpTransistorFault", 409)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTxName.setStatus('current')
eventTxMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 6), EventMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventTxMask.setStatus('current')
eventTxPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 7), EventPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventTxPriority.setStatus('current')
eventTxEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 8), EventState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTxEvent.setStatus('current')
rsXx8000DvbTxConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5))
rsXx8000DvbTxGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1))
groupEvents = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 1)).setObjects(("RS-XX8000-DVB-TX-MIB", "eventTxName"), ("RS-XX8000-DVB-TX-MIB", "eventTxMask"), ("RS-XX8000-DVB-TX-MIB", "eventTxPriority"), ("RS-XX8000-DVB-TX-MIB", "eventTxEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEvents = groupEvents.setStatus('current')
groupTxCommon = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 2)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxResetSumFault"), ("RS-XX8000-DVB-TX-MIB", "cmdTxParametersetLoad"), ("RS-XX8000-DVB-TX-MIB", "cmdTxParametersetSave"), ("RS-XX8000-DVB-TX-MIB", "cmdTxOperationModeProgram"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultTx"), ("RS-XX8000-DVB-TX-MIB", "summaryWarningTx"), ("RS-XX8000-DVB-TX-MIB", "localModeTx"), ("RS-XX8000-DVB-TX-MIB", "rfOnTx"), ("RS-XX8000-DVB-TX-MIB", "forwardPower"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultExcA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupTxCommon = groupTxCommon.setStatus('current')
groupEventsTxCommon = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 3)).setObjects(("RS-XX8000-DVB-TX-MIB", "txSummaryFault"), ("RS-XX8000-DVB-TX-MIB", "txSummaryWarning"), ("RS-XX8000-DVB-TX-MIB", "txLocal"), ("RS-XX8000-DVB-TX-MIB", "txRfOn"), ("RS-XX8000-DVB-TX-MIB", "txParamSetValuesChanged"), ("RS-XX8000-DVB-TX-MIB", "txRfLoopProgram"), ("RS-XX8000-DVB-TX-MIB", "txRfFail"), ("RS-XX8000-DVB-TX-MIB", "txOstSummaryFault"), ("RS-XX8000-DVB-TX-MIB", "txOstSummaryWarning"), ("RS-XX8000-DVB-TX-MIB", "txRfOk"), ("RS-XX8000-DVB-TX-MIB", "txOstRfOn"), ("RS-XX8000-DVB-TX-MIB", "txRfWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsTxCommon = groupEventsTxCommon.setStatus('current')
groupDualDrive = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 4)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxOperationModeReserve"), ("RS-XX8000-DVB-TX-MIB", "cmdTxOpModeExcAutomatic"), ("RS-XX8000-DVB-TX-MIB", "cmdTxPreselectExciter"), ("RS-XX8000-DVB-TX-MIB", "cmdTxDelayTimeExcAutomatic"), ("RS-XX8000-DVB-TX-MIB", "exciterBNumberOfEntries"), ("RS-XX8000-DVB-TX-MIB", "exciterBLogbookClear"), ("RS-XX8000-DVB-TX-MIB", "excBLogbookEntryNbr"), ("RS-XX8000-DVB-TX-MIB", "excBLogbookType"), ("RS-XX8000-DVB-TX-MIB", "excBLogbookSlope"), ("RS-XX8000-DVB-TX-MIB", "excBLogbookMessage"), ("RS-XX8000-DVB-TX-MIB", "excBLogbookDateTime"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultExcB"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticReady"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticChanged"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticFault"), ("RS-XX8000-DVB-TX-MIB", "noConnectionExcB"), ("RS-XX8000-DVB-TX-MIB", "activeExcA"), ("RS-XX8000-DVB-TX-MIB", "activeExcB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupDualDrive = groupDualDrive.setStatus('current')
groupEventsDualDrive = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 5)).setObjects(("RS-XX8000-DVB-TX-MIB", "txRfLoopReserve"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUNoConnectionToExcB"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcReady"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcChanged"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsDualDrive = groupEventsDualDrive.setStatus('current')
groupPowerReserve = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 6)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxOpModeOstAutomatic"), ("RS-XX8000-DVB-TX-MIB", "cmdTxPreselectOutputstage"), ("RS-XX8000-DVB-TX-MIB", "cmdTxDelayTimeOstAutomatic"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultOstB"), ("RS-XX8000-DVB-TX-MIB", "outputstageAutomaticReady"), ("RS-XX8000-DVB-TX-MIB", "outputstageAutomaticChanged"), ("RS-XX8000-DVB-TX-MIB", "outputstageAutomaticFault"), ("RS-XX8000-DVB-TX-MIB", "noConnectionOstB"), ("RS-XX8000-DVB-TX-MIB", "activeOstA"), ("RS-XX8000-DVB-TX-MIB", "activeOstB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupPowerReserve = groupPowerReserve.setStatus('current')
groupEventsPowerReserve = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 7)).setObjects(("RS-XX8000-DVB-TX-MIB", "txNetCCUNoConnectionToOstB"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticOstReady"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticOstChanged"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticOstFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsPowerReserve = groupEventsPowerReserve.setStatus('current')
groupCommonMP = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 8)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdOstRefVoltageVision"), ("RS-XX8000-DVB-TX-MIB", "cmdOstMaxOutletTempThreshold"), ("RS-XX8000-DVB-TX-MIB", "outputstageANumberOfEntries"), ("RS-XX8000-DVB-TX-MIB", "outputstageALogbookClear"), ("RS-XX8000-DVB-TX-MIB", "ostALogbookEntryNbr"), ("RS-XX8000-DVB-TX-MIB", "ostALogbookType"), ("RS-XX8000-DVB-TX-MIB", "ostALogbookSlope"), ("RS-XX8000-DVB-TX-MIB", "ostALogbookMessage"), ("RS-XX8000-DVB-TX-MIB", "ostALogbookDateTime"), ("RS-XX8000-DVB-TX-MIB", "reflectedPower"), ("RS-XX8000-DVB-TX-MIB", "ostRackInletTemperature"), ("RS-XX8000-DVB-TX-MIB", "ostRackOutletTemperature"), ("RS-XX8000-DVB-TX-MIB", "ostRackAuxPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "amplifiersPerRack"), ("RS-XX8000-DVB-TX-MIB", "rackRfEventSignalling"), ("RS-XX8000-DVB-TX-MIB", "rackGeneralPurposeInput"), ("RS-XX8000-DVB-TX-MIB", "rfProbePresent"), ("RS-XX8000-DVB-TX-MIB", "rfProbeConfigurationNominalValue"), ("RS-XX8000-DVB-TX-MIB", "rfProbeThresholdRfFailLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbeThresholdTimeoutRfFailCtr"), ("RS-XX8000-DVB-TX-MIB", "rfProbeThresholdWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbeCalibrationGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbeCalibrationOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbeCalibrationSetGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbeCalibrationSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbeMeasuredValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupCommonMP = groupCommonMP.setStatus('current')
groupEventsCommonMP = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 9)).setObjects(("RS-XX8000-DVB-TX-MIB", "txReflectionWarning"), ("RS-XX8000-DVB-TX-MIB", "txReflectionFault"), ("RS-XX8000-DVB-TX-MIB", "txOstRfOk"), ("RS-XX8000-DVB-TX-MIB", "txOstNoInput"), ("RS-XX8000-DVB-TX-MIB", "txOstRfWarning"), ("RS-XX8000-DVB-TX-MIB", "txOstReflectionWarning"), ("RS-XX8000-DVB-TX-MIB", "txOstRackWarning"), ("RS-XX8000-DVB-TX-MIB", "txOstCoolingWarning"), ("RS-XX8000-DVB-TX-MIB", "txOstRfFail"), ("RS-XX8000-DVB-TX-MIB", "txOstReflectionFault"), ("RS-XX8000-DVB-TX-MIB", "txOstACFault"), ("RS-XX8000-DVB-TX-MIB", "txOstCoolingFault"), ("RS-XX8000-DVB-TX-MIB", "txOstCommFault"), ("RS-XX8000-DVB-TX-MIB", "txRackSumFault"), ("RS-XX8000-DVB-TX-MIB", "txRackSumWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackOn"), ("RS-XX8000-DVB-TX-MIB", "txRackGpiWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackFan1Fault"), ("RS-XX8000-DVB-TX-MIB", "txRackFan2Fault"), ("RS-XX8000-DVB-TX-MIB", "txRackCoolingSumWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackAmplifierSumFault"), ("RS-XX8000-DVB-TX-MIB", "txRackNoLink"), ("RS-XX8000-DVB-TX-MIB", "txRackGpiFault"), ("RS-XX8000-DVB-TX-MIB", "txRackTemperatureFault"), ("RS-XX8000-DVB-TX-MIB", "txRackACFault"), ("RS-XX8000-DVB-TX-MIB", "txRackCoolingSumFault"), ("RS-XX8000-DVB-TX-MIB", "txRackTempFaultAbs1"), ("RS-XX8000-DVB-TX-MIB", "txRackTempFaultAbs2"), ("RS-XX8000-DVB-TX-MIB", "txRackDCFault"), ("RS-XX8000-DVB-TX-MIB", "txRackRfWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackRfFault"), ("RS-XX8000-DVB-TX-MIB", "txRackReflectionWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackReflectionFault"), ("RS-XX8000-DVB-TX-MIB", "txRackRfOk"), ("RS-XX8000-DVB-TX-MIB", "txRackRfOn"), ("RS-XX8000-DVB-TX-MIB", "txRackOvervoltProtectWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackTemperatureWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackProbeNotCalibrated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsCommonMP = groupEventsCommonMP.setStatus('current')
groupCommonNetCCU = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 10)).setObjects(("RS-XX8000-DVB-TX-MIB", "netCCUNumberOfEntries"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookClear"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookEntryNbr"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookType"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookSlope"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookMessage"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookDateTime"), ("RS-XX8000-DVB-TX-MIB", "powerSupply"), ("RS-XX8000-DVB-TX-MIB", "cmdTxSystemMode"), ("RS-XX8000-DVB-TX-MIB", "additionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultOstA"), ("RS-XX8000-DVB-TX-MIB", "noConnectionExcA"), ("RS-XX8000-DVB-TX-MIB", "noConnectionOstA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupCommonNetCCU = groupCommonNetCCU.setStatus('current')
groupEventsCommonNetCCU = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 11)).setObjects(("RS-XX8000-DVB-TX-MIB", "txNetCCUFanFault"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUNoConnectionToExcA"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUNoConnectionToOstA"), ("RS-XX8000-DVB-TX-MIB", "txModeSwitchOverStarted"), ("RS-XX8000-DVB-TX-MIB", "txModeSwitchOverEnded"), ("RS-XX8000-DVB-TX-MIB", "txModeInconsistent"), ("RS-XX8000-DVB-TX-MIB", "txModeSwitchOverFailed"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUBoardTemperatureWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsCommonNetCCU = groupEventsCommonNetCCU.setStatus('current')
groupOstBLogbook = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 12)).setObjects(("RS-XX8000-DVB-TX-MIB", "outputstageBNumberOfEntries"), ("RS-XX8000-DVB-TX-MIB", "outputstageBLogbookClear"), ("RS-XX8000-DVB-TX-MIB", "ostBLogbookEntryNbr"), ("RS-XX8000-DVB-TX-MIB", "ostBLogbookType"), ("RS-XX8000-DVB-TX-MIB", "ostBLogbookSlope"), ("RS-XX8000-DVB-TX-MIB", "ostBLogbookMessage"), ("RS-XX8000-DVB-TX-MIB", "ostBLogbookDateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupOstBLogbook = groupOstBLogbook.setStatus('current')
groupSumProbe = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 14)).setObjects(("RS-XX8000-DVB-TX-MIB", "forwardPowerOstA"), ("RS-XX8000-DVB-TX-MIB", "reflectedPowerOstA"), ("RS-XX8000-DVB-TX-MIB", "forwardPowerOstB"), ("RS-XX8000-DVB-TX-MIB", "reflectedPowerOstB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupSumProbe = groupSumProbe.setStatus('current')
groupProductInfo = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 18)).setObjects(("RS-XX8000-DVB-TX-MIB", "prodInfoModuleName"), ("RS-XX8000-DVB-TX-MIB", "prodInfoSerialNumber"), ("RS-XX8000-DVB-TX-MIB", "prodInfoIdentNumberSW"), ("RS-XX8000-DVB-TX-MIB", "prodInfoVersionNumberSW"), ("RS-XX8000-DVB-TX-MIB", "productInfoProductDateHW"), ("RS-XX8000-DVB-TX-MIB", "prodInfoIdentNumberHW"), ("RS-XX8000-DVB-TX-MIB", "prodInfoVersionNumberHW"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupProductInfo = groupProductInfo.setStatus('current')
groupAmpMeasureValues = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 19)).setObjects(("RS-XX8000-DVB-TX-MIB", "ostRackAmpI1A"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI2A"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI3A"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI4A"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI1B"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI2B"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI3B"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI4B"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpIDrv"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpUDc"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpIDc"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpUDcControl"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpUReg"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpPowerA"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpPowerB"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpPowerOut"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpPowerReflection"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpPowerReference"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpDeltaPhase"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpCmdDeltaPhase"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupAmpMeasureValues = groupAmpMeasureValues.setStatus('current')
groupEventsAmplifier = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 20)).setObjects(("RS-XX8000-DVB-TX-MIB", "txAmpSumFault"), ("RS-XX8000-DVB-TX-MIB", "txAmpSumWarning"), ("RS-XX8000-DVB-TX-MIB", "txAmpPowerOn"), ("RS-XX8000-DVB-TX-MIB", "txAmpDCOk"), ("RS-XX8000-DVB-TX-MIB", "txAmpACOk"), ("RS-XX8000-DVB-TX-MIB", "txAmpRfInFail"), ("RS-XX8000-DVB-TX-MIB", "txAmpRfFail"), ("RS-XX8000-DVB-TX-MIB", "txAmpReflectionFault"), ("RS-XX8000-DVB-TX-MIB", "txAmpTemperatureFault"), ("RS-XX8000-DVB-TX-MIB", "txAmpTransistorFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsAmplifier = groupEventsAmplifier.setStatus('current')
groupRfProbes = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 21)).setObjects(("RS-XX8000-DVB-TX-MIB", "rfProbesNetCCURfProbe1"), ("RS-XX8000-DVB-TX-MIB", "rfProbesNetCCURfProbe2"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdNominal"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdFailLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdDelayTimeRfFail"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdSetGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntReflWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntReflSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntReflSetGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdNominal"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdFailLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdDelayTimeRfFail"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdSetGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstReflWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstReflSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstReflSetGain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupRfProbes = groupRfProbes.setStatus('current')
groupDummyLoadRF = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 22)).setObjects(("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdNominal"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdFailLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdDelayTimeRfFail"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdSetGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLReflWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLReflSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLReflSetGain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupDummyLoadRF = groupDummyLoadRF.setStatus('current')
groupExcCommon = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 23)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdExcOpModeInputAutomatic"), ("RS-XX8000-DVB-TX-MIB", "cmdExcPreselectInput"), ("RS-XX8000-DVB-TX-MIB", "cmdExcMode"), ("RS-XX8000-DVB-TX-MIB", "cmdExcNetworkMode"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSSource"), ("RS-XX8000-DVB-TX-MIB", "cmdExcEnableCellID"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTxAddress"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTxAutomatic"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputSeamless"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputPriority"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputCheckTimeForward"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputCheckTimeSwitchback"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputMuteOnFail"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputManualPreseletionHP1"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputManualPreseletionHP2"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputManualPreseletionLP1"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputManualPreseletionLP2"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualBandwidth"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualFFTLength"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualGuardInterval"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualConstellation"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualCellID"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualInterleaver"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualCoderateHP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualCoderateLP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualTimeSlicingHP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualTimeSlicingLP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualFECHP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualFECLP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcSFNStaticDelay"), ("RS-XX8000-DVB-TX-MIB", "cmdExcSFNDeviationTime"), ("RS-XX8000-DVB-TX-MIB", "cmdExcFrequency"), ("RS-XX8000-DVB-TX-MIB", "cmdExcReferenceSource"), ("RS-XX8000-DVB-TX-MIB", "cmdExcMuteOnPPSFail"), ("RS-XX8000-DVB-TX-MIB", "cmdExcMuteOnReferenceFail"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTypeLossOfInput"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutput"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutputAttenuation"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutputRfSlope"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutputModulationSlope"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustTestsignal"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustBiasCoarseI"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustBiasCoarseQ"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustBiasFineI"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustBiasFineQ"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustGainI"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustGainQ"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustPhase"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInpAutoReadyAfterChangeOv"), ("RS-XX8000-DVB-TX-MIB", "excInputChannelName"), ("RS-XX8000-DVB-TX-MIB", "excInputConnected"), ("RS-XX8000-DVB-TX-MIB", "excInputSeamless"), ("RS-XX8000-DVB-TX-MIB", "excInputPreselected"), ("RS-XX8000-DVB-TX-MIB", "excInputActive"), ("RS-XX8000-DVB-TX-MIB", "excInputMipFail"), ("RS-XX8000-DVB-TX-MIB", "excInputBandwidth"), ("RS-XX8000-DVB-TX-MIB", "excInputFFTLength"), ("RS-XX8000-DVB-TX-MIB", "excInputGuardInterval"), ("RS-XX8000-DVB-TX-MIB", "excInputConstellation"), ("RS-XX8000-DVB-TX-MIB", "excInputCellID"), ("RS-XX8000-DVB-TX-MIB", "excInputInterleaver"), ("RS-XX8000-DVB-TX-MIB", "excInputCodeRate"), ("RS-XX8000-DVB-TX-MIB", "excInputPacketLength"), ("RS-XX8000-DVB-TX-MIB", "excInputMeasuredDatarate"), ("RS-XX8000-DVB-TX-MIB", "excInputRequiredDatarate"), ("RS-XX8000-DVB-TX-MIB", "excInputMaximumDelay"), ("RS-XX8000-DVB-TX-MIB", "exciterANumberOfEntries"), ("RS-XX8000-DVB-TX-MIB", "exciterALogbookClear"), ("RS-XX8000-DVB-TX-MIB", "excALogbookEntryNbr"), ("RS-XX8000-DVB-TX-MIB", "excALogbookType"), ("RS-XX8000-DVB-TX-MIB", "excALogbookSlope"), ("RS-XX8000-DVB-TX-MIB", "excALogbookMessage"), ("RS-XX8000-DVB-TX-MIB", "excALogbookDateTime"), ("RS-XX8000-DVB-TX-MIB", "cmdExcOcxoAdjust"), ("RS-XX8000-DVB-TX-MIB", "cmdExcExpectInputReserve"), ("RS-XX8000-DVB-TX-MIB", "excStatusReqDataRateLP"), ("RS-XX8000-DVB-TX-MIB", "excStatusReqDataRateHP"), ("RS-XX8000-DVB-TX-MIB", "excStatusAmplifierControl"), ("RS-XX8000-DVB-TX-MIB", "excStatusFailDelay"), ("RS-XX8000-DVB-TX-MIB", "cmdExcFailDelayMode"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputFailDelayTime"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRefFailDelayTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupExcCommon = groupExcCommon.setStatus('current')
groupExcAdditionalSx800 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 24)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutputRegulation"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutputManualRfLevel"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustStart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupExcAdditionalSx800 = groupExcAdditionalSx800.setStatus('current')
groupExcAdditionalSLx = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 25)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdExcInput1Source"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInput2Source"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupExcAdditionalSLx = groupExcAdditionalSLx.setStatus('current')
groupEventsExciter = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 26)).setObjects(("RS-XX8000-DVB-TX-MIB", "txExcSummaryFault"), ("RS-XX8000-DVB-TX-MIB", "txExcSummaryWarning"), ("RS-XX8000-DVB-TX-MIB", "txExcInputNoConnectHP1"), ("RS-XX8000-DVB-TX-MIB", "txExcInputNoConnectLP1"), ("RS-XX8000-DVB-TX-MIB", "txExcInputNoConnectHP2"), ("RS-XX8000-DVB-TX-MIB", "txExcInputNoConnectLP2"), ("RS-XX8000-DVB-TX-MIB", "txExcInputActiveHP1"), ("RS-XX8000-DVB-TX-MIB", "txExcInputActiveLP1"), ("RS-XX8000-DVB-TX-MIB", "txExcInputActiveHP2"), ("RS-XX8000-DVB-TX-MIB", "txExcInputActiveLP2"), ("RS-XX8000-DVB-TX-MIB", "txExcOn"), ("RS-XX8000-DVB-TX-MIB", "txExcRfOn"), ("RS-XX8000-DVB-TX-MIB", "txExcNoInput"), ("RS-XX8000-DVB-TX-MIB", "txExcRfLoop"), ("RS-XX8000-DVB-TX-MIB", "txExcRfFail"), ("RS-XX8000-DVB-TX-MIB", "txExcSelfTest"), ("RS-XX8000-DVB-TX-MIB", "txExcOutputOpen"), ("RS-XX8000-DVB-TX-MIB", "txExcBoardTemperatureWarning"), ("RS-XX8000-DVB-TX-MIB", "txExcFanWarning"), ("RS-XX8000-DVB-TX-MIB", "txExcFanFault"), ("RS-XX8000-DVB-TX-MIB", "txExcFifoWarning"), ("RS-XX8000-DVB-TX-MIB", "txExcTestSignal"), ("RS-XX8000-DVB-TX-MIB", "txExcSFNDelay"), ("RS-XX8000-DVB-TX-MIB", "txExcWrongDatarate"), ("RS-XX8000-DVB-TX-MIB", "txExcMute"), ("RS-XX8000-DVB-TX-MIB", "txExcPPSFail"), ("RS-XX8000-DVB-TX-MIB", "txExcReferenceFail"), ("RS-XX8000-DVB-TX-MIB", "txExcMIPFail"), ("RS-XX8000-DVB-TX-MIB", "txExcInputAutomaticSwitchReady"), ("RS-XX8000-DVB-TX-MIB", "txExcRfOk"), ("RS-XX8000-DVB-TX-MIB", "txExcInputReseveMissing"), ("RS-XX8000-DVB-TX-MIB", "txExcInputAutomaticChangedOver"), ("RS-XX8000-DVB-TX-MIB", "txExcLocal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsExciter = groupEventsExciter.setStatus('current')
groupExciterStatus = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 27)).setObjects(("RS-XX8000-DVB-TX-MIB", "excStatusRfOutputAgcRegulation"), ("RS-XX8000-DVB-TX-MIB", "excStatusRfIqAdjustAuto"), ("RS-XX8000-DVB-TX-MIB", "excStatusRfIqAdjustLO1Frequency"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayProcessing"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayDynamic"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayNetwork"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayTxOffset"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayMaximum"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayTotal"), ("RS-XX8000-DVB-TX-MIB", "excStatusNominalPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupExciterStatus = groupExciterStatus.setStatus('current')
groupExciterPrecorrection = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 28)).setObjects(("RS-XX8000-DVB-TX-MIB", "excPrecLinCorrection"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinAutomaticADE"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinMaxAmplitudeRipple"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinMaxGroupDelayRipple"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinAmplitudeRipple"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinGroupDelayRipple"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinInputLevel"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinAutomatic"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinCorrection"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinAutomaticADE"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinThresholdShoulders"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinShoulderLeft"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinShoulderRight"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinInputLevel"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinAutomatic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupExciterPrecorrection = groupExciterPrecorrection.setStatus('current')
groupSLx = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 29)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdExcTransmitterType"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTimeScheduler"), ("RS-XX8000-DVB-TX-MIB", "excPrecUserState"), ("RS-XX8000-DVB-TX-MIB", "excPrecFactoryState"), ("RS-XX8000-DVB-TX-MIB", "excPrecRestoreCurrentSettings"), ("RS-XX8000-DVB-TX-MIB", "excPrecRestoreAllSettings"), ("RS-XX8000-DVB-TX-MIB", "configTvStandardName"), ("RS-XX8000-DVB-TX-MIB", "configFrequency"), ("RS-XX8000-DVB-TX-MIB", "configPower"), ("RS-XX8000-DVB-TX-MIB", "schedulerRowStatus"), ("RS-XX8000-DVB-TX-MIB", "schedulerEvent"), ("RS-XX8000-DVB-TX-MIB", "schedulerDateTime"), ("RS-XX8000-DVB-TX-MIB", "config2InputSource"), ("RS-XX8000-DVB-TX-MIB", "config2Power"), ("RS-XX8000-DVB-TX-MIB", "config2Frequency"), ("RS-XX8000-DVB-TX-MIB", "config2RxFrequency"), ("RS-XX8000-DVB-TX-MIB", "config2TvStandardName"), ("RS-XX8000-DVB-TX-MIB", "excStatusVSWR"), ("RS-XX8000-DVB-TX-MIB", "cmdExcMuteCondition"), ("RS-XX8000-DVB-TX-MIB", "schedulerTvStandard"), ("RS-XX8000-DVB-TX-MIB", "configRxFrequency"), ("RS-XX8000-DVB-TX-MIB", "configInputSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupSLx = groupSLx.setStatus('current')
groupObjectsACU = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 30)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdExcRfWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfFailLimit"), ("RS-XX8000-DVB-TX-MIB", "cmdExcOutputPower"), ("RS-XX8000-DVB-TX-MIB", "cmdExcMonitoringOutput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjectsACU = groupObjectsACU.setStatus('current')
groupIndependentRacks = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 31)).setObjects(("RS-XX8000-DVB-TX-MIB", "rackReferenceVoltage"), ("RS-XX8000-DVB-TX-MIB", "amplifiersPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "rackOnOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupIndependentRacks = groupIndependentRacks.setStatus('current')
groupObjectsRE = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 32)).setObjects(("RS-XX8000-DVB-TX-MIB", "summaryFaultExcA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjectsRE = groupObjectsRE.setStatus('current')
groupEventsControlExciter = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 34)).setObjects(("RS-XX8000-DVB-TX-MIB", "txNetCCUNoConnectionToExcB"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcReady"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcChanged"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsControlExciter = groupEventsControlExciter.setStatus('current')
groupEventsAdditionalPowerSupply = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 35)).setObjects(("RS-XX8000-DVB-TX-MIB", "txInternalPowerSupplyWarning"), ("RS-XX8000-DVB-TX-MIB", "txExternalPowerSupplyWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsAdditionalPowerSupply = groupEventsAdditionalPowerSupply.setStatus('current')
groupObjsAdditionalPowerSupply = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 36)).setObjects(("RS-XX8000-DVB-TX-MIB", "internalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "externalPowerSupply"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjsAdditionalPowerSupply = groupObjsAdditionalPowerSupply.setStatus('current')
groupObjectsControlExciter = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 37)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxOperationModeReserve"), ("RS-XX8000-DVB-TX-MIB", "cmdTxOpModeExcAutomatic"), ("RS-XX8000-DVB-TX-MIB", "cmdTxDelayTimeExcAutomatic"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultExcB"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticReady"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticChanged"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticFault"), ("RS-XX8000-DVB-TX-MIB", "noConnectionExcB"), ("RS-XX8000-DVB-TX-MIB", "activeExcB"), ("RS-XX8000-DVB-TX-MIB", "cmdTxProgramExciterPrio"), ("RS-XX8000-DVB-TX-MIB", "cmdTxChangeOver"), ("RS-XX8000-DVB-TX-MIB", "cmdTxSwitchPosition"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjectsControlExciter = groupObjectsControlExciter.setStatus('current')
groupObjectsSingleEnded = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 38)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxRfSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjectsSingleEnded = groupObjectsSingleEnded.setStatus('current')
groupObjectsSx801Amplifier = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 39)).setObjects(("RS-XX8000-DVB-TX-MIB", "sx801AmpRfOut"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpRfIn"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpReflection"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpOn"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpAC"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpCommunication"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpTransistor"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpDriver"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpTemperature"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpBlower"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpRegulation"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpUpdate"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply1Temperature"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply2Temperature"), ("RS-XX8000-DVB-TX-MIB", "sx801SupplyRTemperature"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply1DC"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply2DC"), ("RS-XX8000-DVB-TX-MIB", "sx801SupplyRDC"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueI1"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueI2"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueI3"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueI4"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueIPre"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueIDrv1"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueIDrv2"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValuePowerOut"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueReflection"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueVRef"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueVReg"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueTemperature"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueMonAtt"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueVAux1"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueVAux2"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply1ValuePwr"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply2ValuePwr"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply1ValueDc"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply2ValueDc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjectsSx801Amplifier = groupObjectsSx801Amplifier.setStatus('current')
groupObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 99)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxParametersetReSave"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTimeForDailyPcrReset"), ("RS-XX8000-DVB-TX-MIB", "cmdExcEnablePcrReset"), ("RS-XX8000-DVB-TX-MIB", "excInputAlpha"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualAlpha"), ("RS-XX8000-DVB-TX-MIB", "rfProbeConfigurationLabel"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputAutoSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObsoleted = groupObsoleted.setStatus('obsolete')
groupEventsObsoleted = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 100)).setObjects(("RS-XX8000-DVB-TX-MIB", "txParamSetSubDeviceDiffers"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUBoardTemperatureFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsObsoleted = groupEventsObsoleted.setStatus('obsolete')
rsXx8000DvbTxCompl = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3))
rsXx8000DVBSingleTxMP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 1)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupProductInfo"), ("RS-XX8000-DVB-TX-MIB", "groupRfProbes"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsSingleEnded"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupIndependentRacks"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSx800"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupAmpMeasureValues"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAmplifier"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBSingleTxMP = rsXx8000DVBSingleTxMP.setStatus('current')
rsXx8000DVBDualDriveMP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 2)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupProductInfo"), ("RS-XX8000-DVB-TX-MIB", "groupRfProbes"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsSingleEnded"), ("RS-XX8000-DVB-TX-MIB", "groupEventsDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupIndependentRacks"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSx800"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupAmpMeasureValues"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAmplifier"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBDualDriveMP = rsXx8000DVBDualDriveMP.setStatus('current')
rsXx8000DVBPowerReserveMP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 3)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupProductInfo"), ("RS-XX8000-DVB-TX-MIB", "groupRfProbes"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupPowerReserve"), ("RS-XX8000-DVB-TX-MIB", "groupCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupOstBLogbook"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupEventsPowerReserve"), ("RS-XX8000-DVB-TX-MIB", "groupEventsDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupIndependentRacks"), ("RS-XX8000-DVB-TX-MIB", "groupSumProbe"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSx800"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupAmpMeasureValues"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAmplifier"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupDummyLoadRF"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBPowerReserveMP = rsXx8000DVBPowerReserveMP.setStatus('current')
rsXx8000DVBSingleTxLP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 5)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSLx"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBSingleTxLP = rsXx8000DVBSingleTxLP.setStatus('current')
rsXx8000DVBDualDriveLP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 6)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSLx"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupEventsDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBDualDriveLP = rsXx8000DVBDualDriveLP.setStatus('current')
rsXx8000DVBPowerReserveLP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 7)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSLx"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupPowerReserve"), ("RS-XX8000-DVB-TX-MIB", "groupDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupEventsPowerReserve"), ("RS-XX8000-DVB-TX-MIB", "groupEventsDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBPowerReserveLP = rsXx8000DVBPowerReserveLP.setStatus('current')
rsXx8000DVBSingleTxLPNoNetCCU = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 9)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSLx"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBSingleTxLPNoNetCCU = rsXx8000DVBSingleTxLPNoNetCCU.setStatus('current')
rsXx8000DVBSLx = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 10)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupSLx"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsACU"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBSLx = rsXx8000DVBSLx.setStatus('current')
rsXx8000DVBExciterOnly = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 11)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupProductInfo"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsRE"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsSx801Amplifier"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupSLx"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBExciterOnly = rsXx8000DVBExciterOnly.setStatus('current')
rsXx8000DVBSx801ControlExciter = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 12)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupSLx"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsACU"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsSx801Amplifier"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsControlExciter"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsControlExciter"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBSx801ControlExciter = rsXx8000DVBSx801ControlExciter.setStatus('current')
mibBuilder.exportSymbols("RS-XX8000-DVB-TX-MIB", cmdExcInputCheckTimeForward=cmdExcInputCheckTimeForward, txOstNoInput=txOstNoInput, txAmpTemperatureFault=txAmpTemperatureFault, cmdExcTPSManualCoderateHP=cmdExcTPSManualCoderateHP, cmdExcInputSeamless=cmdExcInputSeamless, productInfoTable=productInfoTable, cmdExcRefFailDelayTime=cmdExcRefFailDelayTime, rfProbeCalibrationSetGain=rfProbeCalibrationSetGain, excStatusReqDataRateLP=excStatusReqDataRateLP, outputstageBLogbookClear=outputstageBLogbookClear, excInputExcIdx=excInputExcIdx, rsXx8000DVBPowerReserveLP=rsXx8000DVBPowerReserveLP, txOstRfFail=txOstRfFail, sx801Supply2DC=sx801Supply2DC, sx801AmpAC=sx801AmpAC, config2Frequency=config2Frequency, excStatusExcIdx=excStatusExcIdx, excALogbookMessage=excALogbookMessage, configurationTable=configurationTable, cmdExcSFNStaticDelay=cmdExcSFNStaticDelay, noConnectionOstA=noConnectionOstA, excPrecNonlinCorrection=excPrecNonlinCorrection, excPrecFactoryState=excPrecFactoryState, txExcRfFail=txExcRfFail, localModeTx=localModeTx, rsXx8000DVBSingleTxLPNoNetCCU=rsXx8000DVBSingleTxLPNoNetCCU, cmdTxSystemMode=cmdTxSystemMode, cmdExcInputManualPreseletionLP2=cmdExcInputManualPreseletionLP2, txExcSummaryWarning=txExcSummaryWarning, cmdExcMode=cmdExcMode, excInputPacketLength=excInputPacketLength, cmdExcTPSManualTimeSlicingHP=cmdExcTPSManualTimeSlicingHP, configurationEntry=configurationEntry, txNetCCUNoConnectionToOstB=txNetCCUNoConnectionToOstB, sx801AmpRfIn=sx801AmpRfIn, configuration2Table=configuration2Table, ostALogbookSlope=ostALogbookSlope, netCCULogbookEntryNbr=netCCULogbookEntryNbr, excPrecLinMaxAmplitudeRipple=excPrecLinMaxAmplitudeRipple, rfProbesAntReflSetGain=rfProbesAntReflSetGain, rfProbesDLFwdFailLimit=rfProbesDLFwdFailLimit, excStatusSfnDelayNetwork=excStatusSfnDelayNetwork, sx801AmpValueI4=sx801AmpValueI4, txRackRfOk=txRackRfOk, txAmpSumFault=txAmpSumFault, internalPowerSupply=internalPowerSupply, sx801AmpValuePowerOut=sx801AmpValuePowerOut, groupObjectsControlExciter=groupObjectsControlExciter, ostALogbookType=ostALogbookType, activeExcB=activeExcB, groupEventsObsoleted=groupEventsObsoleted, cmdExcTPSManualCoderateLP=cmdExcTPSManualCoderateLP, eventTxName=eventTxName, excInputInterleaver=excInputInterleaver, sx801Supply1DC=sx801Supply1DC, sx801AmpBlower=sx801AmpBlower, groupProductInfo=groupProductInfo, summaryInfo=summaryInfo, txExcSFNDelay=txExcSFNDelay, rsXx8000DVBSingleTxMP=rsXx8000DVBSingleTxMP, PYSNMP_MODULE_ID=rsXx8000DvbTxMibModule, sx801AmpValueVAux2=sx801AmpValueVAux2, txExcInputNoConnectHP2=txExcInputNoConnectHP2, ostRackAuxPowerSupply=ostRackAuxPowerSupply, excPrecLinAmplitudeRipple=excPrecLinAmplitudeRipple, cmdExcRfOutput=cmdExcRfOutput, summaryFaultOstB=summaryFaultOstB, txExcOutputOpen=txExcOutputOpen, cmdTxOpModeOstAutomatic=cmdTxOpModeOstAutomatic, ostTable=ostTable, config2Power=config2Power, txRackCoolingSumWarning=txRackCoolingSumWarning, logbook=logbook, eventsTxEntry=eventsTxEntry, txOstSummaryWarning=txOstSummaryWarning, excStatusReqDataRateHP=excStatusReqDataRateHP, excInputActive=excInputActive, rsXx8000DVBSx801ControlExciter=rsXx8000DVBSx801ControlExciter, excInputGuardInterval=excInputGuardInterval, cmdExcInputPriority=cmdExcInputPriority, txParamSetSubDeviceDiffers=txParamSetSubDeviceDiffers, netCCULogbookType=netCCULogbookType, txRackRfFault=txRackRfFault, cmdExcTPSManualAlpha=cmdExcTPSManualAlpha, cmdExcRfFailLimit=cmdExcRfFailLimit, timeSchedulerTable=timeSchedulerTable, excStatusRfIqAdjustAuto=excStatusRfIqAdjustAuto, cmdExcRfOutputRfSlope=cmdExcRfOutputRfSlope, activeOstB=activeOstB, excStatusSfnDelayMaximum=excStatusSfnDelayMaximum, exciterAutomaticFault=exciterAutomaticFault, excALogbookEntryNbr=excALogbookEntryNbr, rfProbeThresholdTimeoutRfFailCtr=rfProbeThresholdTimeoutRfFailCtr, eventTx=eventTx, sx801AmpValueVReg=sx801AmpValueVReg, rackEntry=rackEntry, additionalPowerSupply=additionalPowerSupply, cmdExcInput2Source=cmdExcInput2Source, cmdExcOcxoAdjust=cmdExcOcxoAdjust, noConnectionExcA=noConnectionExcA, groupDummyLoadRF=groupDummyLoadRF, groupRfProbes=groupRfProbes, amplifiersPerRack=amplifiersPerRack, cmdTxProgramExciterPrio=cmdTxProgramExciterPrio, cmdExcMuteCondition=cmdExcMuteCondition, summaryFaultExcB=summaryFaultExcB, excInputSeamless=excInputSeamless, txAmpSumWarning=txAmpSumWarning, txExcInputNoConnectLP1=txExcInputNoConnectLP1, cmdTxOperationModeProgram=cmdTxOperationModeProgram, forwardPower=forwardPower, ostEntry=ostEntry, groupTxCommon=groupTxCommon, excStatusSfnDelayTotal=excStatusSfnDelayTotal, txRackTempFaultAbs1=txRackTempFaultAbs1, excPrecNonlinAutomaticADE=excPrecNonlinAutomaticADE, excPrecNonlinShoulderLeft=excPrecNonlinShoulderLeft, exciterBLogbookClear=exciterBLogbookClear, rackReferenceVoltage=rackReferenceVoltage, rfProbesDLFwdDelayTimeRfFail=rfProbesDLFwdDelayTimeRfFail, txExcInputAutomaticChangedOver=txExcInputAutomaticChangedOver, rsXx8000DvbTxCompl=rsXx8000DvbTxCompl, prodInfoVersionNumberSW=prodInfoVersionNumberSW, sx801AmplifierTable=sx801AmplifierTable, txAutomaticOstFault=txAutomaticOstFault, ostDeviceIdx=ostDeviceIdx, txExcInputActiveLP1=txExcInputActiveLP1, txOstRfWarning=txOstRfWarning, cmdExcRfOutputRegulation=cmdExcRfOutputRegulation, cmdTxSwitchPosition=cmdTxSwitchPosition, excInputFFTLength=excInputFFTLength, exciterBNumberOfEntries=exciterBNumberOfEntries, cmdTxParametersetSave=cmdTxParametersetSave, configInputSource=configInputSource, groupExciterPrecorrection=groupExciterPrecorrection, ostRackAmpUReg=ostRackAmpUReg, netCCULogbookMessage=netCCULogbookMessage, txExcInputReseveMissing=txExcInputReseveMissing, outputstageALogbookTable=outputstageALogbookTable, excInputEntry=excInputEntry, cmdExcInputAutoSwitch=cmdExcInputAutoSwitch, cmdExcOutputPower=cmdExcOutputPower, schedulerDateTimeIdx=schedulerDateTimeIdx, groupSumProbe=groupSumProbe, ostRackAmpI2B=ostRackAmpI2B, txExcFifoWarning=txExcFifoWarning, txNetCCUNoConnectionToOstA=txNetCCUNoConnectionToOstA, cmdExcReferenceSource=cmdExcReferenceSource, txExcSelfTest=txExcSelfTest, rfProbesNetCCURfProbe1=rfProbesNetCCURfProbe1, ostALogbookEntryNbr=ostALogbookEntryNbr, txExcInputNoConnectHP1=txExcInputNoConnectHP1, cmdTxChangeOver=cmdTxChangeOver, txExcOn=txExcOn, groupAmpMeasureValues=groupAmpMeasureValues, excStatusSfnDelayProcessing=excStatusSfnDelayProcessing, cmdTxDelayTimeOstAutomatic=cmdTxDelayTimeOstAutomatic, cmdExcRfIqAdjustBiasCoarseI=cmdExcRfIqAdjustBiasCoarseI, cmdExcRfIqAdjustBiasFineI=cmdExcRfIqAdjustBiasFineI, txOstRfOn=txOstRfOn, cmdExcTPSManualGuardInterval=cmdExcTPSManualGuardInterval, groupCommonMP=groupCommonMP, cmdTxResetSumFault=cmdTxResetSumFault, netCCULogbookSlope=netCCULogbookSlope, rfProbeConfigurationLabel=rfProbeConfigurationLabel, rsXx8000DVBDualDriveLP=rsXx8000DVBDualDriveLP, txOstCoolingFault=txOstCoolingFault, cmdExcTPSManualConstellation=cmdExcTPSManualConstellation, rfProbesDLFwdWarningLimit=rfProbesDLFwdWarningLimit, rsXx8000DvbTxConf=rsXx8000DvbTxConf, groupObjsAdditionalPowerSupply=groupObjsAdditionalPowerSupply, prodInfoIdentNumberSW=prodInfoIdentNumberSW, sx801SupplyRDC=sx801SupplyRDC, txOstACFault=txOstACFault, rackRfEventSignalling=rackRfEventSignalling, excInputRequiredDatarate=excInputRequiredDatarate, txRfWarning=txRfWarning, cmdExcTxAddress=cmdExcTxAddress, config2TvStandardName=config2TvStandardName, sx801AmpValueI2=sx801AmpValueI2, rfProbesAntFwdSetGain=rfProbesAntFwdSetGain, cmdExcNetworkMode=cmdExcNetworkMode, prodInfoVersionNumberHW=prodInfoVersionNumberHW, excBLogbookEntryIdx=excBLogbookEntryIdx, externalPowerSupply=externalPowerSupply, cmdExcRfOutputManualRfLevel=cmdExcRfOutputManualRfLevel, txExcSummaryFault=txExcSummaryFault, txExcRfOn=txExcRfOn, txNetCCUNoConnectionToExcA=txNetCCUNoConnectionToExcA, txOstSummaryFault=txOstSummaryFault, groupExcAdditionalSLx=groupExcAdditionalSLx, rfProbeThresholdRfFailLimit=rfProbeThresholdRfFailLimit, ostBLogbookDateTime=ostBLogbookDateTime, cmdExcTPSSource=cmdExcTPSSource, txExcInputActiveLP2=txExcInputActiveLP2, groupCommonNetCCU=groupCommonNetCCU, excInputBandwidth=excInputBandwidth, sx801Supply2ValueDc=sx801Supply2ValueDc, sx801AmpValueMonAtt=sx801AmpValueMonAtt, excStatusVSWR=excStatusVSWR, excInputChannelIdx=excInputChannelIdx, txOstRfOk=txOstRfOk, excPrecRestoreCurrentSettings=excPrecRestoreCurrentSettings, groupDualDrive=groupDualDrive, prodInfoRackIdx=prodInfoRackIdx, cmdTxPreselectExciter=cmdTxPreselectExciter, cmdExcInputMuteOnFail=cmdExcInputMuteOnFail, exciterBLogbookEntry=exciterBLogbookEntry, sx801SupplyRTemperature=sx801SupplyRTemperature, rfProbeMeasuredValue=rfProbeMeasuredValue, txReflectionFault=txReflectionFault, eventTxEvent=eventTxEvent, sx801AmpTemperature=sx801AmpTemperature, excPrecLinAutomatic=excPrecLinAutomatic, exciterBLogbookTable=exciterBLogbookTable, rfProbesOstFwdSetOffset=rfProbesOstFwdSetOffset, rfProbeConfigurationNominalValue=rfProbeConfigurationNominalValue, eventTxAmpIdx=eventTxAmpIdx, cmdExcMuteOnPPSFail=cmdExcMuteOnPPSFail, txNetCCUBoardTemperatureWarning=txNetCCUBoardTemperatureWarning, exciterALogbookClear=exciterALogbookClear, rackTable=rackTable, cmdExcInputFailDelayTime=cmdExcInputFailDelayTime, txAmpRfFail=txAmpRfFail, reflectedPowerOstA=reflectedPowerOstA, outputstageAutomaticChanged=outputstageAutomaticChanged, cmdExcRfIqAdjustGainI=cmdExcRfIqAdjustGainI, excPrecRestoreAllSettings=excPrecRestoreAllSettings, sx801AmpRfOut=sx801AmpRfOut, excBLogbookDateTime=excBLogbookDateTime, summaryFaultExcA=summaryFaultExcA, excPrecLinGroupDelayRipple=excPrecLinGroupDelayRipple, outputstageALogbookClear=outputstageALogbookClear, configuration2Entry=configuration2Entry, rfProbesAntReflSetOffset=rfProbesAntReflSetOffset, rsXx8000DVBExciterOnly=rsXx8000DVBExciterOnly, exciterALogbookTable=exciterALogbookTable, exciterAutomaticChanged=exciterAutomaticChanged, cmdExcInpAutoReadyAfterChangeOv=cmdExcInpAutoReadyAfterChangeOv, groupObjectsACU=groupObjectsACU, cmdExcTPSManualFECHP=cmdExcTPSManualFECHP, rfProbeCalibrationGain=rfProbeCalibrationGain, sx801AmpValueTemperature=sx801AmpValueTemperature, schedulerDateTime=schedulerDateTime, netCCUNumberOfEntries=netCCUNumberOfEntries, txRackRfWarning=txRackRfWarning, txExcRfLoop=txExcRfLoop, cmdExcInputCheckTimeSwitchback=cmdExcInputCheckTimeSwitchback, ostRackAmpIDrv=ostRackAmpIDrv, prodInfoModuleName=prodInfoModuleName, excPrecNonlinAutomatic=excPrecNonlinAutomatic, cmdExcRfIqAdjustPhase=cmdExcRfIqAdjustPhase, txAmpPowerOn=txAmpPowerOn, ostBLogbookMessage=ostBLogbookMessage)
mibBuilder.exportSymbols("RS-XX8000-DVB-TX-MIB", ostRackIdx=ostRackIdx, ostRackAmpUDcControl=ostRackAmpUDcControl, excStatusRfIqAdjustLO1Frequency=excStatusRfIqAdjustLO1Frequency, cmdExcRfIqAdjustStart=cmdExcRfIqAdjustStart, cmdExcRfWarningLimit=cmdExcRfWarningLimit, txExcInputNoConnectLP2=txExcInputNoConnectLP2, rfProbesDLReflSetOffset=rfProbesDLReflSetOffset, txRackCoolingSumFault=txRackCoolingSumFault, cmdExcRfIqAdjustGainQ=cmdExcRfIqAdjustGainQ, txOstCoolingWarning=txOstCoolingWarning, rfProbesOstFwdWarningLimit=rfProbesOstFwdWarningLimit, eventTxRackIdx=eventTxRackIdx, cmdExcSFNDeviationTime=cmdExcSFNDeviationTime, ostRackAmpI4A=ostRackAmpI4A, cmdExcTPSManualFECLP=cmdExcTPSManualFECLP, rfProbesNetCCURfProbe2=rfProbesNetCCURfProbe2, rfProbesOstReflWarningLimit=rfProbesOstReflWarningLimit, txRackTempFaultAbs2=txRackTempFaultAbs2, txRackAmplifierSumFault=txRackAmplifierSumFault, txRfLoopProgram=txRfLoopProgram, groupObjectsSingleEnded=groupObjectsSingleEnded, txAutomaticExcReady=txAutomaticExcReady, txAutomaticExcChanged=txAutomaticExcChanged, summaryFaultTx=summaryFaultTx, rfProbesEntry=rfProbesEntry, ostRackAmpI4B=ostRackAmpI4B, txRfFail=txRfFail, ostRackAmpDeltaPhase=ostRackAmpDeltaPhase, excInputCodeRate=excInputCodeRate, cmdExcOpModeInputAutomatic=cmdExcOpModeInputAutomatic, rfProbesOstFwdSetGain=rfProbesOstFwdSetGain, txNetCCUFanFault=txNetCCUFanFault, ostALogbookMessage=ostALogbookMessage, exciterPrecorrectionEntry=exciterPrecorrectionEntry, outputstageBLogbookEntry=outputstageBLogbookEntry, rfProbesAntFwdNominal=rfProbesAntFwdNominal, activeExcA=activeExcA, cmdExcRfOutputModulationSlope=cmdExcRfOutputModulationSlope, cmdExcTPSManualBandwidth=cmdExcTPSManualBandwidth, groupEventsPowerReserve=groupEventsPowerReserve, configTvStandardIdx=configTvStandardIdx, excPrecLinCorrection=excPrecLinCorrection, excBLogbookEntryNbr=excBLogbookEntryNbr, txRackSumWarning=txRackSumWarning, groupEventsCommonMP=groupEventsCommonMP, txRfLoopReserve=txRfLoopReserve, txRackOvervoltProtectWarning=txRackOvervoltProtectWarning, groupObsoleted=groupObsoleted, groupIndependentRacks=groupIndependentRacks, excStatusFailDelay=excStatusFailDelay, txNetCCUNoConnectionToExcB=txNetCCUNoConnectionToExcB, excPrecLinAutomaticADE=excPrecLinAutomaticADE, excInputAlpha=excInputAlpha, groupExcAdditionalSx800=groupExcAdditionalSx800, eventsTxV2=eventsTxV2, txSummaryWarning=txSummaryWarning, netCCULogbookTable=netCCULogbookTable, txLocal=txLocal, ostRackAmpPowerReflection=ostRackAmpPowerReflection, sx801AmpValueIDrv1=sx801AmpValueIDrv1, eventsTxTable=eventsTxTable, txRackRfOn=txRackRfOn, txAmpReflectionFault=txAmpReflectionFault, sx801AmpValueI3=sx801AmpValueI3, groupPowerReserve=groupPowerReserve, ostRackAmpI3A=ostRackAmpI3A, excALogbookSlope=excALogbookSlope, sx801Supply2Temperature=sx801Supply2Temperature, ostBLogbookEntryIdx=ostBLogbookEntryIdx, cmdExcRfOutputAttenuation=cmdExcRfOutputAttenuation, ostRackInletTemperature=ostRackInletTemperature, cmdExcInputManualPreseletionLP1=cmdExcInputManualPreseletionLP1, cmdExcTPSManualFFTLength=cmdExcTPSManualFFTLength, prodInfoAmpIdx=prodInfoAmpIdx, rackGeneralPurposeInput=rackGeneralPurposeInput, txExcRfOk=txExcRfOk, rfProbesOstFwdFailLimit=rfProbesOstFwdFailLimit, rackOnOff=rackOnOff, cmdExcTimeForDailyPcrReset=cmdExcTimeForDailyPcrReset, excInputChannelName=excInputChannelName, netCCULogbookDateTime=netCCULogbookDateTime, txAmpACOk=txAmpACOk, rfProbesAntFwdWarningLimit=rfProbesAntFwdWarningLimit, excStatusNominalPower=excStatusNominalPower, rfProbesTable=rfProbesTable, excStatusSfnDelayDynamic=excStatusSfnDelayDynamic, prodInfoDeviceIdx=prodInfoDeviceIdx, rackIdx=rackIdx, outputstageBNumberOfEntries=outputstageBNumberOfEntries, txParamSetValuesChanged=txParamSetValuesChanged, excBLogbookType=excBLogbookType, excBLogbookMessage=excBLogbookMessage, txRackNoLink=txRackNoLink, rfProbesOstReflSetOffset=rfProbesOstReflSetOffset, exciterALogbookEntry=exciterALogbookEntry, outputstageAutomaticFault=outputstageAutomaticFault, cmdOstMaxOutletTempThreshold=cmdOstMaxOutletTempThreshold, excPrecUserState=excPrecUserState, sx801AmpUpdate=sx801AmpUpdate, txAutomaticOstReady=txAutomaticOstReady, txSummaryFault=txSummaryFault, schedulerTvStandard=schedulerTvStandard, groupEventsAmplifier=groupEventsAmplifier, cmdExcTypeLossOfInput=cmdExcTypeLossOfInput, cmdExcTxAutomatic=cmdExcTxAutomatic, forwardPowerOstB=forwardPowerOstB, exciterAutomaticReady=exciterAutomaticReady, cmdExcInput1Source=cmdExcInput1Source, txOstRackWarning=txOstRackWarning, sx801AmpValueVRef=sx801AmpValueVRef, cmdTxPreselectOutputstage=cmdTxPreselectOutputstage, txExcInputAutomaticSwitchReady=txExcInputAutomaticSwitchReady, rfProbeCalibrationOffset=rfProbeCalibrationOffset, sx801AmplifierEntry=sx801AmplifierEntry, txRackGpiFault=txRackGpiFault, eventTxABIdx=eventTxABIdx, ostBLogbookType=ostBLogbookType, outputstageALogbookEntry=outputstageALogbookEntry, rfProbesDLFwdSetGain=rfProbesDLFwdSetGain, cmdExcFailDelayMode=cmdExcFailDelayMode, cmdExcTimeScheduler=cmdExcTimeScheduler, txOstReflectionFault=txOstReflectionFault, groupEventsControlExciter=groupEventsControlExciter, cmdOstRefVoltageVision=cmdOstRefVoltageVision, groupEventsCommonNetCCU=groupEventsCommonNetCCU, rfProbesDLFwdNominal=rfProbesDLFwdNominal, txAutomaticExcFault=txAutomaticExcFault, cmdExcFrequency=cmdExcFrequency, exciterANumberOfEntries=exciterANumberOfEntries, prodInfoIdentNumberHW=prodInfoIdentNumberHW, schedulerRowStatus=schedulerRowStatus, sx801AmpCommunication=sx801AmpCommunication, netCCULogbookEntry=netCCULogbookEntry, commandsTxTable=commandsTxTable, exciterStatusTable=exciterStatusTable, rsXx8000DvbTxEvents=rsXx8000DvbTxEvents, txRackTemperatureWarning=txRackTemperatureWarning, cmdExcTransmitterType=cmdExcTransmitterType, excInputTable=excInputTable, excInputCellID=excInputCellID, excInputConnected=excInputConnected, cmdTxDelayTimeExcAutomatic=cmdTxDelayTimeExcAutomatic, reflectedPowerOstB=reflectedPowerOstB, excPrecLinMaxGroupDelayRipple=excPrecLinMaxGroupDelayRipple, txRfOn=txRfOn, excPrecNonlinShoulderRight=excPrecNonlinShoulderRight, txAutomaticOstChanged=txAutomaticOstChanged, txExcFanFault=txExcFanFault, rfProbeThresholdWarningLimit=rfProbeThresholdWarningLimit, rfProbePresent=rfProbePresent, txExcInputActiveHP2=txExcInputActiveHP2, cmdTxRfSwitch=cmdTxRfSwitch, forwardPowerOstA=forwardPowerOstA, txInternalPowerSupplyWarning=txInternalPowerSupplyWarning, txRackACFault=txRackACFault, excInputPreselected=excInputPreselected, txRackReflectionWarning=txRackReflectionWarning, excStatusRfOutputAgcRegulation=excStatusRfOutputAgcRegulation, exciterStatusEntry=exciterStatusEntry, txRackFan1Fault=txRackFan1Fault, activeOstA=activeOstA, sx801AmpValueI1=sx801AmpValueI1, txReflectionWarning=txReflectionWarning, cmdExcInputManualPreseletionHP1=cmdExcInputManualPreseletionHP1, rfProbeCalibrationSetOffset=rfProbeCalibrationSetOffset, cmdExcTPSManualCellID=cmdExcTPSManualCellID, txRackOn=txRackOn, txExcFanWarning=txExcFanWarning, excPrecNonlinInputLevel=excPrecNonlinInputLevel, sx801AmpRegulation=sx801AmpRegulation, sx801Supply1ValuePwr=sx801Supply1ValuePwr, configFrequency=configFrequency, productInfoProductDateHW=productInfoProductDateHW, cmdExcEnableCellID=cmdExcEnableCellID, excInputMaximumDelay=excInputMaximumDelay, txExcBoardTemperatureWarning=txExcBoardTemperatureWarning, cmdExcPreselectInput=cmdExcPreselectInput, excBLogbookSlope=excBLogbookSlope, cmdExcExpectInputReserve=cmdExcExpectInputReserve, excInputMipFail=excInputMipFail, txModeInconsistent=txModeInconsistent, groupOstBLogbook=groupOstBLogbook, rfProbesAntFwdSetOffset=rfProbesAntFwdSetOffset, ostBLogbookSlope=ostBLogbookSlope, txRackReflectionFault=txRackReflectionFault, configRxFrequency=configRxFrequency, sx801AmpValueIPre=sx801AmpValueIPre, rfProbesOstFwdNominal=rfProbesOstFwdNominal, txExcWrongDatarate=txExcWrongDatarate, eventTxMask=eventTxMask, rsXx8000DvbTxObjs=rsXx8000DvbTxObjs, noConnectionExcB=noConnectionExcB, sx801AmpValueReflection=sx801AmpValueReflection, txExternalPowerSupplyWarning=txExternalPowerSupplyWarning, rsXx8000DvbTx=rsXx8000DvbTx, txOstCommFault=txOstCommFault, netCCULogbookClear=netCCULogbookClear, productInfoEntry=productInfoEntry, sx801AmpValueIDrv2=sx801AmpValueIDrv2, rfOnTx=rfOnTx, noConnectionOstB=noConnectionOstB, prodInfoModuleIdx=prodInfoModuleIdx, cmdExcTPSManualTimeSlicingLP=cmdExcTPSManualTimeSlicingLP, cmdExcInputManualPreseletionHP2=cmdExcInputManualPreseletionHP2, txExcPPSFail=txExcPPSFail, txExcMIPFail=txExcMIPFail, schedulerEvent=schedulerEvent, rackRfProbeIdx=rackRfProbeIdx, powerSupply=powerSupply, excInputMeasuredDatarate=excInputMeasuredDatarate, ostRackAmpI3B=ostRackAmpI3B, txNetCCUBoardTemperatureFault=txNetCCUBoardTemperatureFault, excPrecLinInputLevel=excPrecLinInputLevel, rsXx8000DvbTxGroups=rsXx8000DvbTxGroups, excStatusSfnDelayTxOffset=excStatusSfnDelayTxOffset, sx801AmpOn=sx801AmpOn, groupEvents=groupEvents, rsXx8000DVBPowerReserveMP=rsXx8000DVBPowerReserveMP, rsXx8000DVBSingleTxLP=rsXx8000DVBSingleTxLP, ostRackAmpCmdDeltaPhase=ostRackAmpCmdDeltaPhase, ostRackAmpIdx=ostRackAmpIdx, cmdTxParametersetReSave=cmdTxParametersetReSave, cmdDeviceIdx=cmdDeviceIdx, ostRackAmpPowerA=ostRackAmpPowerA, ostALogbookDateTime=ostALogbookDateTime, eventTxPriority=eventTxPriority, txExcMute=txExcMute, groupSLx=groupSLx, txExcReferenceFail=txExcReferenceFail, txExcInputActiveHP1=txExcInputActiveHP1, rfProbesAntReflWarningLimit=rfProbesAntReflWarningLimit, ostRackAmpIDc=ostRackAmpIDc, excStatusAmplifierControl=excStatusAmplifierControl, sx801Supply1Temperature=sx801Supply1Temperature, groupEventsExciter=groupEventsExciter, outputstageANumberOfEntries=outputstageANumberOfEntries, summaryWarningTx=summaryWarningTx, rfProbesOstFwdDelayTimeRfFail=rfProbesOstFwdDelayTimeRfFail, ostRackOutletTemperature=ostRackOutletTemperature, txAmpRfInFail=txAmpRfInFail, cmdTxParametersetLoad=cmdTxParametersetLoad, ostRackAmpPowerReference=ostRackAmpPowerReference, txOstReflectionWarning=txOstReflectionWarning, txRackSumFault=txRackSumFault, txRackFan2Fault=txRackFan2Fault, groupEventsAdditionalPowerSupply=groupEventsAdditionalPowerSupply, excPrecNonlinThresholdShoulders=excPrecNonlinThresholdShoulders, txNetCCUPowerSupply=txNetCCUPowerSupply, txRackDCFault=txRackDCFault, config2RxFrequency=config2RxFrequency, cmdExcEnablePcrReset=cmdExcEnablePcrReset, groupObjectsSx801Amplifier=groupObjectsSx801Amplifier, amplifiersPowerSupply=amplifiersPowerSupply, txModeSwitchOverStarted=txModeSwitchOverStarted)
mibBuilder.exportSymbols("RS-XX8000-DVB-TX-MIB", configTvStandardName=configTvStandardName, txRackProbeNotCalibrated=txRackProbeNotCalibrated, rfProbesAntFwdDelayTimeRfFail=rfProbesAntFwdDelayTimeRfFail, sx801AmpDriver=sx801AmpDriver, cmdTxOpModeExcAutomatic=cmdTxOpModeExcAutomatic, ostRackAmpI2A=ostRackAmpI2A, sx801AmpReflection=sx801AmpReflection, outputstageBLogbookTable=outputstageBLogbookTable, txModeSwitchOverEnded=txModeSwitchOverEnded, configPower=configPower, cmdExcTPSManualInterleaver=cmdExcTPSManualInterleaver, sx801Supply1ValueDc=sx801Supply1ValueDc, prodInfoSerialNumber=prodInfoSerialNumber, sx801Supply2ValuePwr=sx801Supply2ValuePwr, sx801AmpTransistor=sx801AmpTransistor, cmdTxOperationModeReserve=cmdTxOperationModeReserve, cmdExcMonitoringOutput=cmdExcMonitoringOutput, rfProbesDLReflWarningLimit=rfProbesDLReflWarningLimit, ostRackAmpPowerB=ostRackAmpPowerB, groupExciterStatus=groupExciterStatus, excPrecExcIdx=excPrecExcIdx, excInputConstellation=excInputConstellation, cmdExcRfIqAdjustTestsignal=cmdExcRfIqAdjustTestsignal, reflectedPower=reflectedPower, groupObjectsRE=groupObjectsRE, rfProbesDLReflSetGain=rfProbesDLReflSetGain, summaryFaultOstA=summaryFaultOstA, txExcTestSignal=txExcTestSignal, txAmpDCOk=txAmpDCOk, txAmpTransistorFault=txAmpTransistorFault, ostRackAmpI1B=ostRackAmpI1B, txModeSwitchOverFailed=txModeSwitchOverFailed, sx801AmpIdx=sx801AmpIdx, rfProbesDLFwdSetOffset=rfProbesDLFwdSetOffset, excALogbookType=excALogbookType, sx801AmpValueVAux1=sx801AmpValueVAux1, timeSchedulerEntry=timeSchedulerEntry, ostRackAmpI1A=ostRackAmpI1A, excALogbookDateTime=excALogbookDateTime, ostRackAmpUDc=ostRackAmpUDc, ostALogbookEntryIdx=ostALogbookEntryIdx, txRackTemperatureFault=txRackTemperatureFault, cmdExcRfIqAdjustBiasFineQ=cmdExcRfIqAdjustBiasFineQ, cmdExcRfIqAdjustBiasCoarseQ=cmdExcRfIqAdjustBiasCoarseQ, groupEventsDualDrive=groupEventsDualDrive, rfProbesOstIdx=rfProbesOstIdx, excALogbookEntryIdx=excALogbookEntryIdx, txRfOk=txRfOk, ostIdx=ostIdx, ostRackAmpPowerOut=ostRackAmpPowerOut, txExcLocal=txExcLocal, eventTxNameIdx=eventTxNameIdx, groupExcCommon=groupExcCommon, groupEventsTxCommon=groupEventsTxCommon, detailedInfo=detailedInfo, rfProbesOstReflSetGain=rfProbesOstReflSetGain, commandsTxEntry=commandsTxEntry, rsXx8000DVBDualDriveMP=rsXx8000DVBDualDriveMP, rfProbesAntFwdFailLimit=rfProbesAntFwdFailLimit, ostBLogbookEntryNbr=ostBLogbookEntryNbr, cmdExcMuteOnReferenceFail=cmdExcMuteOnReferenceFail, txRackGpiWarning=txRackGpiWarning, exciterPrecorrectionTable=exciterPrecorrectionTable, rsXx8000DVBSLx=rsXx8000DVBSLx, config2InputSource=config2InputSource, rsXx8000DvbTxMibModule=rsXx8000DvbTxMibModule, txExcNoInput=txExcNoInput, outputstageAutomaticReady=outputstageAutomaticReady, netCCULogbookEntryIdx=netCCULogbookEntryIdx)
