#
# PySNMP MIB module ACD-DESC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/accedian/ACD-DESC-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:01:51 2024
# On host fv-az1773-903 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acdProducts, = mibBuilder.importSymbols("ACCEDIAN-SMI", "acdProducts")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Integer32, MibIdentifier, TimeTicks, ModuleIdentity, NotificationType, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, ObjectIdentity, Gauge32, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "TimeTicks", "ModuleIdentity", "NotificationType", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "ObjectIdentity", "Gauge32", "Bits", "IpAddress")
TruthValue, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "DisplayString", "TextualConvention")
acdDesc = ModuleIdentity((1, 3, 6, 1, 4, 1, 22420, 1, 1))
acdDesc.setRevisions(('2010-11-10 01:00', '2010-06-30 01:00', '2009-02-04 01:00', '2008-12-01 01:00', '2006-08-06 01:00',))
if mibBuilder.loadTexts: acdDesc.setLastUpdated('201011100100Z')
if mibBuilder.loadTexts: acdDesc.setOrganization('Accedian Networks, Inc.')
acdDescNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 1, 1, 0))
acdDescMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 1, 1, 15))
acdDescConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 1, 1, 15, 1))
acdDescCommercialName = MibScalar((1, 3, 6, 1, 4, 1, 22420, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescCommercialName.setStatus('current')
acdDescMacBaseAddr = MibScalar((1, 3, 6, 1, 4, 1, 22420, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescMacBaseAddr.setStatus('current')
acdDescIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 22420, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescIdentifier.setStatus('current')
acdDescFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 22420, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescFirmwareVersion.setStatus('current')
acdDescHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 22420, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescHardwareVersion.setStatus('current')
acdDescSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 22420, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescSerialNumber.setStatus('current')
acdDescCpuUsageCurrent = MibScalar((1, 3, 6, 1, 4, 1, 22420, 1, 1, 20), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescCpuUsageCurrent.setStatus('current')
acdDescCpuUsageAverage15 = MibScalar((1, 3, 6, 1, 4, 1, 22420, 1, 1, 21), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescCpuUsageAverage15.setStatus('current')
acdDescCpuUsageAverage30 = MibScalar((1, 3, 6, 1, 4, 1, 22420, 1, 1, 22), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescCpuUsageAverage30.setStatus('current')
acdDescCpuUsageAverage60 = MibScalar((1, 3, 6, 1, 4, 1, 22420, 1, 1, 23), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescCpuUsageAverage60.setStatus('current')
acdDescCpuUsageAverage900 = MibScalar((1, 3, 6, 1, 4, 1, 22420, 1, 1, 24), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescCpuUsageAverage900.setStatus('current')
acdDescConnectorTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 1, 1, 10), )
if mibBuilder.loadTexts: acdDescConnectorTable.setStatus('current')
acdDescConnectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 1, 1, 10, 1), ).setIndexNames((0, "ACD-DESC-MIB", "acdDescConnectorID"))
if mibBuilder.loadTexts: acdDescConnectorEntry.setStatus('current')
acdDescConnectorID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: acdDescConnectorID.setStatus('current')
acdDescConnectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescConnectorName.setStatus('current')
acdDescConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("rj45", 2), ("rj45S", 3), ("db9", 4), ("bnc", 5), ("fAUI", 6), ("mAUI", 7), ("fiberSC", 8), ("fiberMIC", 9), ("fiberST", 10), ("telco", 11), ("mtrj", 12), ("hssdc", 13), ("fiberLC", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescConnectorType.setStatus('current')
acdDescConnectorPoESupport = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 10, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescConnectorPoESupport.setStatus('current')
acdDescPwrTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 1, 1, 11), )
if mibBuilder.loadTexts: acdDescPwrTable.setStatus('current')
acdDescPwrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 1, 1, 11, 1), ).setIndexNames((0, "ACD-DESC-MIB", "acdDescPwrID"))
if mibBuilder.loadTexts: acdDescPwrEntry.setStatus('current')
acdDescPwrID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: acdDescPwrID.setStatus('current')
acdDescPwrName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescPwrName.setStatus('current')
acdDescPwrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pwrplus5volts", 1), ("pwrminus48volts", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescPwrType.setStatus('current')
acdDescPwrPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescPwrPresent.setStatus('current')
acdDescTsTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 1, 1, 12), )
if mibBuilder.loadTexts: acdDescTsTable.setStatus('current')
acdDescTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 1, 1, 12, 1), ).setIndexNames((0, "ACD-DESC-MIB", "acdDescTsID"))
if mibBuilder.loadTexts: acdDescTsEntry.setStatus('current')
acdDescTsID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: acdDescTsID.setStatus('current')
acdDescTsCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescTsCurrentTemp.setStatus('current')
acdDescTsFirstThres = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescTsFirstThres.setStatus('current')
acdDescTsFisrtThresPass = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 12, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescTsFisrtThresPass.setStatus('current')
acdDescTsSecondThres = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescTsSecondThres.setStatus('current')
acdDescTsSecondThresPass = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 1, 1, 12, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdDescTsSecondThresPass.setStatus('current')
acdPowerLost = NotificationType((1, 3, 6, 1, 4, 1, 22420, 1, 1, 0, 1)).setObjects(("ACD-DESC-MIB", "acdDescCommercialName"), ("ACD-DESC-MIB", "acdDescMacBaseAddr"), ("ACD-DESC-MIB", "acdDescIdentifier"), ("ACD-DESC-MIB", "acdDescSerialNumber"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: acdPowerLost.setStatus('current')
acdDescCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 1, 1, 15, 1, 1))
acdDescGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 1, 1, 15, 1, 2))
acdDescGenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 1, 1, 15, 1, 2, 1)).setObjects(("ACD-DESC-MIB", "acdDescCommercialName"), ("ACD-DESC-MIB", "acdDescMacBaseAddr"), ("ACD-DESC-MIB", "acdDescIdentifier"), ("ACD-DESC-MIB", "acdDescFirmwareVersion"), ("ACD-DESC-MIB", "acdDescHardwareVersion"), ("ACD-DESC-MIB", "acdDescSerialNumber"), ("ACD-DESC-MIB", "acdDescCpuUsageCurrent"), ("ACD-DESC-MIB", "acdDescCpuUsageAverage15"), ("ACD-DESC-MIB", "acdDescCpuUsageAverage30"), ("ACD-DESC-MIB", "acdDescCpuUsageAverage60"), ("ACD-DESC-MIB", "acdDescCpuUsageAverage900"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdDescGenGroup = acdDescGenGroup.setStatus('current')
acdDescConnectorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 1, 1, 15, 1, 2, 2)).setObjects(("ACD-DESC-MIB", "acdDescConnectorName"), ("ACD-DESC-MIB", "acdDescConnectorType"), ("ACD-DESC-MIB", "acdDescConnectorPoESupport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdDescConnectorGroup = acdDescConnectorGroup.setStatus('current')
acdDescPwrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 1, 1, 15, 1, 2, 3)).setObjects(("ACD-DESC-MIB", "acdDescPwrName"), ("ACD-DESC-MIB", "acdDescPwrType"), ("ACD-DESC-MIB", "acdDescPwrPresent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdDescPwrGroup = acdDescPwrGroup.setStatus('current')
acdDescTsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 1, 1, 15, 1, 2, 4)).setObjects(("ACD-DESC-MIB", "acdDescTsCurrentTemp"), ("ACD-DESC-MIB", "acdDescTsFirstThres"), ("ACD-DESC-MIB", "acdDescTsFisrtThresPass"), ("ACD-DESC-MIB", "acdDescTsSecondThres"), ("ACD-DESC-MIB", "acdDescTsSecondThresPass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdDescTsGroup = acdDescTsGroup.setStatus('current')
acdDescNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 22420, 1, 1, 15, 1, 2, 5)).setObjects(("ACD-DESC-MIB", "acdPowerLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdDescNotificationsGroup = acdDescNotificationsGroup.setStatus('current')
acdAlarmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22420, 1, 1, 15, 1, 1, 1)).setObjects(("ACD-DESC-MIB", "acdDescGenGroup"), ("ACD-DESC-MIB", "acdDescConnectorGroup"), ("ACD-DESC-MIB", "acdDescPwrGroup"), ("ACD-DESC-MIB", "acdDescTsGroup"), ("ACD-DESC-MIB", "acdDescNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdAlarmCompliance = acdAlarmCompliance.setStatus('current')
mibBuilder.exportSymbols("ACD-DESC-MIB", acdDescCpuUsageAverage30=acdDescCpuUsageAverage30, acdDescCpuUsageCurrent=acdDescCpuUsageCurrent, acdDescCommercialName=acdDescCommercialName, acdDescPwrPresent=acdDescPwrPresent, acdDescConformance=acdDescConformance, acdDescConnectorPoESupport=acdDescConnectorPoESupport, acdDesc=acdDesc, acdDescPwrID=acdDescPwrID, acdDescMIBObjects=acdDescMIBObjects, acdDescPwrTable=acdDescPwrTable, acdDescCompliances=acdDescCompliances, acdDescPwrGroup=acdDescPwrGroup, acdDescConnectorName=acdDescConnectorName, PYSNMP_MODULE_ID=acdDesc, acdDescTsCurrentTemp=acdDescTsCurrentTemp, acdDescSerialNumber=acdDescSerialNumber, acdDescConnectorID=acdDescConnectorID, acdDescConnectorGroup=acdDescConnectorGroup, acdDescNotificationsGroup=acdDescNotificationsGroup, acdPowerLost=acdPowerLost, acdDescFirmwareVersion=acdDescFirmwareVersion, acdDescCpuUsageAverage15=acdDescCpuUsageAverage15, acdDescGenGroup=acdDescGenGroup, acdDescTsFirstThres=acdDescTsFirstThres, acdDescConnectorEntry=acdDescConnectorEntry, acdDescPwrType=acdDescPwrType, acdDescTsID=acdDescTsID, acdDescCpuUsageAverage900=acdDescCpuUsageAverage900, acdDescTsSecondThresPass=acdDescTsSecondThresPass, acdDescTsTable=acdDescTsTable, acdDescNotifications=acdDescNotifications, acdDescCpuUsageAverage60=acdDescCpuUsageAverage60, acdDescTsEntry=acdDescTsEntry, acdDescHardwareVersion=acdDescHardwareVersion, acdDescTsSecondThres=acdDescTsSecondThres, acdDescGroups=acdDescGroups, acdDescMacBaseAddr=acdDescMacBaseAddr, acdDescPwrName=acdDescPwrName, acdDescIdentifier=acdDescIdentifier, acdDescConnectorTable=acdDescConnectorTable, acdDescTsGroup=acdDescTsGroup, acdDescConnectorType=acdDescConnectorType, acdDescTsFisrtThresPass=acdDescTsFisrtThresPass, acdDescPwrEntry=acdDescPwrEntry, acdAlarmCompliance=acdAlarmCompliance)
