#
# PySNMP MIB module A4400-RTM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alcatel/A4400-RTM-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 12:19:09 2024
# On host fv-az1022-995 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
a4400CPU, = mibBuilder.importSymbols("A4400-CPU-MIB", "a4400CPU")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, TimeTicks, NotificationType, iso, enterprises, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, ModuleIdentity, ObjectIdentity, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "TimeTicks", "NotificationType", "iso", "enterprises", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ipDomainTable = MibTable((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDomainTable.setStatus('current')
ipDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1), ).setMaxAccess("readonly").setIndexNames((0, "A4400-RTM-MIB", "ipDomain"))
if mibBuilder.loadTexts: ipDomainEntry.setStatus('current')
ipDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDomain.setStatus('current')
confAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confAvailable.setStatus('current')
confBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confBusy.setStatus('current')
confOutOfOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confOutOfOrder.setStatus('current')
dspRessAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspRessAvailable.setStatus('current')
dspRessBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspRessBusy.setStatus('current')
dspRessOutOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspRessOutOfService.setStatus('current')
dspRessOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspRessOverrun.setStatus('current')
cacAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAllowed.setStatus('current')
cacUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacUsed.setStatus('current')
cacOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacOverrun.setStatus('current')
pbxRole = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("INDETERMINATE", 0), ("MAIN", 1), ("STAND-BY", 2), ("ACTIVE-PCS", 3), ("INACTIVE-PCS", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbxRole.setStatus('current')
sipRegSets = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipRegSets.setStatus('current')
sipUnregSets = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipUnregSets.setStatus('current')
setsInService = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setsInService.setStatus('current')
setsOutOfService = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setsOutOfService.setStatus('current')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkTable.setStatus('current')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1), ).setMaxAccess("readonly").setIndexNames((0, "A4400-RTM-MIB", "trunkid"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
trunkid = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkid.setStatus('current')
trunkname = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkname.setStatus('current')
crystalno = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crystalno.setStatus('current')
couplerno = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: couplerno.setStatus('current')
trunktype = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("BCA", 0), ("T2", 1), ("T2COMP", 2), ("T2IP", 3), ("T2ATM", 4), ("T2BBC2", 5), ("T2SIP", 6), ("T2IPPR", 7), ("T2", 8), ("MIXTE", 9), ("T0", 10), ("DPNSS", 11), ("DASS2", 12), ("BCAADDON", 13), ("T2HYBRID", 14), ("LIALDE", 15), ("T1", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunktype.setStatus('current')
nodepbx = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodepbx.setStatus('current')
freechan = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freechan.setStatus('current')
busychan = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busychan.setStatus('current')
ooschan = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ooschan.setStatus('current')
trunkstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("OOS", 0), ("INS", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkstatus.setStatus('current')
cumuloos = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumuloos.setStatus('current')
cumuloverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 64, 4400, 1, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumuloverrun.setStatus('current')
mibBuilder.exportSymbols("A4400-RTM-MIB", confOutOfOrder=confOutOfOrder, cacUsed=cacUsed, pbxRole=pbxRole, cumuloverrun=cumuloverrun, ipDomainEntry=ipDomainEntry, freechan=freechan, cacAllowed=cacAllowed, trunkstatus=trunkstatus, crystalno=crystalno, trunkEntry=trunkEntry, sipRegSets=sipRegSets, confBusy=confBusy, trunkid=trunkid, couplerno=couplerno, cacOverrun=cacOverrun, confAvailable=confAvailable, dspRessAvailable=dspRessAvailable, ooschan=ooschan, setsInService=setsInService, dspRessOutOfService=dspRessOutOfService, ipDomainTable=ipDomainTable, cumuloos=cumuloos, busychan=busychan, trunkTable=trunkTable, trunkname=trunkname, setsOutOfService=setsOutOfService, dspRessBusy=dspRessBusy, ipDomain=ipDomain, dspRessOverrun=dspRessOverrun, trunktype=trunktype, sipUnregSets=sipUnregSets, nodepbx=nodepbx)
