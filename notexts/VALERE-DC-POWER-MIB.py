#
# PySNMP MIB module VALERE-DC-POWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eltek/VALERE-DC-POWER-MIB
# Produced by pysmi-1.1.12 at Sat Jul  6 01:07:58 2024
# On host fv-az1532-138 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, ObjectIdentity, ModuleIdentity, Gauge32, Integer32, iso, Unsigned32, IpAddress, Bits, Counter32, enterprises, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "Gauge32", "Integer32", "iso", "Unsigned32", "IpAddress", "Bits", "Counter32", "enterprises", "Counter64", "NotificationType")
TimeStamp, TimeInterval, TestAndIncr, DisplayString, AutonomousType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TimeInterval", "TestAndIncr", "DisplayString", "AutonomousType", "TextualConvention")
vpwrDcPowerMgt = ModuleIdentity((1, 3, 6, 1, 4, 1, 13858))
if mibBuilder.loadTexts: vpwrDcPowerMgt.setLastUpdated('0512020000Z')
if mibBuilder.loadTexts: vpwrDcPowerMgt.setOrganization('Valere Power Inc.')
class PositiveInteger(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NonNegativeInteger(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

vpwrDcPowerProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 1))
vpwrDcPowerSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2))
vpwrDcPowerRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3))
vpwrDcPowerLvd = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4))
vpwrDcPowerTest = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 5))
vpwrDcPowerModuleIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 6))
vpwrDcPowerBatteryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7))
vpwrDcPowerAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 8))
vpwrDcPowerSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 9))
vpwrDcPowerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 10))
vpwrDcPowerTrapsMsgString = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 11))
vpwrDcPowerRinger = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 12))
vpwrDcPowerDcDcConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 13))
vpwrDcPowerDcAcInverter = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 14))
vpwrDcPowerBayController = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 15))
vpwrDcPowerIoModule = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 16))
vpwrDcPowerDist = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 17))
vpwrDcPowerTrio = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 18))
vpwrSystemIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 1))
vpwrSystemConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 2))
vpwrSystemParameterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 3))
vpwrSystemPanelIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 4))
vpwrSystemBayctrlIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 5))
vpwrLvdConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 1))
vpwrLvdAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 2))
vpwrLvdTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 3))
vpwrRectifierConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 1))
vpwrRectifierAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 2))
vpwrRectifierTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 3))
vpwrBatteryTempGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7, 1))
vpwrBatteryCurrentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7, 2))
vpwrBatteryBoostGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7, 3))
vpwrBatteryDischargeTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7, 4))
vpwrRingerConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 12, 1))
vpwrRingerAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 12, 2))
vpwrRingerTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 12, 3))
vpwrDcDcConverterConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 13, 1))
vpwrDcDcConverterAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 13, 2))
vpwrDcDcConverterTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 13, 3))
vpwrDcAcInverterConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 14, 1))
vpwrDcAcInverterAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 14, 2))
vpwrDcAcInverterTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 14, 3))
vpwrIoModuleConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 16, 1))
vpwrIoModuleAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 16, 2))
vpwrIoModuleTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 16, 3))
vpwrIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentManufacturer.setStatus('current')
vpwrIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentModel.setStatus('current')
vpwrIdentControllerVersion = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentControllerVersion.setStatus('current')
vpwrIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentAgentSoftwareVersion.setStatus('current')
vpwrIdentName = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrIdentName.setStatus('current')
vpwrSystemIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6), )
if mibBuilder.loadTexts: vpwrSystemIdentTable.setStatus('current')
vpwrSystemIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrBayIndex"), (0, "VALERE-DC-POWER-MIB", "vpwrModuleIndex"))
if mibBuilder.loadTexts: vpwrSystemIdentEntry.setStatus('current')
vpwrBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayIndex.setStatus('current')
vpwrModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 2), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleIndex.setStatus('current')
vpwrModuleOID = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleOID.setStatus('current')
vpwrModuleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleCurrent.setStatus('current')
vpwrModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("moduleStatusOK", 0), ("moduleStatusAlarm", 1), ("moduleStatusDisabled", 2), ("moduleStatusRingerAOn", 3), ("moduleStatusRingerBOn", 4), ("moduleStatusUnknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleOperStatus.setStatus('current')
vpwrModuleCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleCapacity.setStatus('current')
vpwrPanelIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1), )
if mibBuilder.loadTexts: vpwrPanelIdentTable.setStatus('current')
vpwrPanelIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrPanelBayIndex"), (0, "VALERE-DC-POWER-MIB", "vpwrPanelModuleIndex"))
if mibBuilder.loadTexts: vpwrPanelIdentEntry.setStatus('current')
vpwrPanelBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelBayIndex.setStatus('current')
vpwrPanelModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 2), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleIndex.setStatus('current')
vpwrPanelModuleOID = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleOID.setStatus('current')
vpwrPanelModuleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleCurrent.setStatus('current')
vpwrPanelModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("moduleStatusOK", 0), ("moduleStatusAlarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleOperStatus.setStatus('current')
vpwrPanelModuleCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleCapacity.setStatus('current')
vpwrBayctrlIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1), )
if mibBuilder.loadTexts: vpwrBayctrlIdentTable.setStatus('current')
vpwrBayctrlIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrBayctrlIndex"))
if mibBuilder.loadTexts: vpwrBayctrlIdentEntry.setStatus('current')
vpwrBayctrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlIndex.setStatus('current')
vpwrBayctrlOID = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlOID.setStatus('current')
vpwrBayctrlCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlCurrent.setStatus('current')
vpwrBayctrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("moduleStatusOK", 0), ("moduleStatusAlarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlOperStatus.setStatus('current')
vpwrBayctrlCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlCapacity.setStatus('current')
vpwrSystemTempCompensation = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tempCompDisabled", 0), ("tempCompEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompensation.setStatus('current')
vpwrSystemTempCompStartTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 60))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompStartTemperature.setStatus('current')
vpwrSystemTempCompStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 3), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompStopVoltage.setStatus('current')
vpwrSystemTempCompensationSlope = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setUnits(' milli-Volts per degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompensationSlope.setStatus('current')
vpwrSystemThermalSenseType = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("external", 0), ("internal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemThermalSenseType.setStatus('current')
vpwrSystemHVAlarmSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 6), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemHVAlarmSetpoint.setStatus('current')
vpwrSystemBDAlarmSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 7), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemBDAlarmSetpoint.setStatus('current')
vpwrSystemInternalTempLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 8), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemInternalTempLThreshold.setStatus('current')
vpwrSystemInternalTempUThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 9), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemInternalTempUThreshold.setStatus('current')
vpwrSystemShelfCapacity = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemShelfCapacity.setStatus('current')
vpwrSystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 2), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemVoltage.setStatus('current')
vpwrSystemCurrent = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 3), Integer32()).setUnits(' Amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemCurrent.setStatus('current')
vpwrSystemControllerState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("systemControllerStateUnknown", 0), ("systemControllerStateNormal", 1), ("systemControllerStateChange", 2), ("systemControllerStateAlarm", 3), ("systemControllerStateMenu", 4), ("systemControllerStateIrActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemControllerState.setStatus('current')
vpwrSystemInternalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 5), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemInternalTemperature.setStatus('current')
vpwrSystemTempCompensationState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("systemTempCompInactive", 0), ("systemTempCompActive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemTempCompensationState.setStatus('current')
vpwrSystemType = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sysTypeUnknow", 0), ("sysType48V", 1), ("sysType24V", 2), ("sysType12V", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemType.setStatus('current')
vpwrLvdWarningSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 1), Integer32()).setUnits(' * .01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdWarningSetpoint.setStatus('current')
vpwrLvdDisconnectSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 2), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdDisconnectSetpoint.setStatus('current')
vpwrLvdReconnectSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 3), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdReconnectSetpoint.setStatus('current')
vpwrLvdReconnectDelayTimer = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 240))).setUnits(' Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdReconnectDelayTimer.setStatus('current')
vpwrLvdContactorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5), )
if mibBuilder.loadTexts: vpwrLvdContactorConfigTable.setStatus('current')
vpwrLvdContactorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrBayIndex"), (0, "VALERE-DC-POWER-MIB", "vpwrModuleIndex"), (0, "VALERE-DC-POWER-MIB", "vpwrLvdContactorIndex"))
if mibBuilder.loadTexts: vpwrLvdContactorConfigEntry.setStatus('current')
vpwrLvdContactorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 1), PositiveInteger()).setUnits(' None').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrLvdContactorIndex.setStatus('current')
vpwrLvdContactorWarningSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 2), PositiveInteger()).setUnits(' * .01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdContactorWarningSetpoint.setStatus('current')
vpwrLvdContactorDisconnectSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 3), PositiveInteger()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdContactorDisconnectSetpoint.setStatus('current')
vpwrLvdContactorReconnectSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 4), PositiveInteger()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdContactorReconnectSetpoint.setStatus('current')
vpwrLvdContactorReconnectDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 5), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setUnits(' Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdContactorReconnectDelayTimer.setStatus('current')
vpwrLvdContactorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("contactorOpen", 0), ("contactorClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdContactorState.setStatus('current')
vpwrRectifierFVSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 1), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierFVSetpoint.setStatus('current')
vpwrRectifierHVSDSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 2), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierHVSDSetpoint.setStatus('current')
vpwrRectifierCurrentLimitAdminState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rectCurrentLimitDisabled", 0), ("rectCurrentLimitEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierCurrentLimitAdminState.setStatus('current')
vpwrRectifierCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200))).setUnits('Amperes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierCurrentLimit.setStatus('current')
vpwrAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 13858, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmsPresent.setStatus('current')
vpwrAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 2), )
if mibBuilder.loadTexts: vpwrAlarmTable.setStatus('current')
vpwrAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrAlarmIndex"))
if mibBuilder.loadTexts: vpwrAlarmEntry.setStatus('current')
vpwrAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmIndex.setStatus('current')
vpwrAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmDescr.setStatus('current')
vpwrAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmTime.setStatus('current')
vpwrBatteryTempTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1), )
if mibBuilder.loadTexts: vpwrBatteryTempTable.setStatus('current')
vpwrBatteryTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrBatteryTempIndex"))
if mibBuilder.loadTexts: vpwrBatteryTempEntry.setStatus('current')
vpwrBatteryTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBatteryTempIndex.setStatus('current')
vpwrBatteryTempName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempName.setStatus('current')
vpwrBatteryTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 3), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBatteryTemp.setStatus('current')
vpwrBatteryTempLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 2), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempLThreshold.setStatus('current')
vpwrBatteryTempUThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 3), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempUThreshold.setStatus('current')
batteryTempCompensation = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tempCompDisabled", 0), ("tempCompEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompensation.setStatus('current')
batteryTempCompHighStartTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 60))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompHighStartTemperature.setStatus('current')
batteryTempCompHighStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 6), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompHighStopVoltage.setStatus('current')
batteryTempCompHighSlope = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setUnits(' milli-Volts per degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompHighSlope.setStatus('current')
batteryTempCompLowStartTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 8), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompLowStartTemperature.setStatus('current')
batteryTempCompLowStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 9), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompLowStopVoltage.setStatus('current')
batteryTempCompLowSlope = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setUnits(' milli-Volts per degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompLowSlope.setStatus('current')
batteryTempCompRunawayTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 60))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompRunawayTemperature.setStatus('current')
batteryTempCompRunawayStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 12), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompRunawayStopVoltage.setStatus('current')
batteryTempCompSenseSource = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("external", 0), ("internal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompSenseSource.setStatus('current')
batteryTempCompRunawayState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTempCompRunawayState.setStatus('current')
thermalProbeTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 7, 1, 15), )
if mibBuilder.loadTexts: thermalProbeTable.setStatus('current')
thermalProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 7, 1, 15, 1), )
vpwrBatteryTempEntry.registerAugmentions(("VALERE-DC-POWER-MIB", "thermalProbeEntry"))
thermalProbeEntry.setIndexNames(*vpwrBatteryTempEntry.getIndexNames())
if mibBuilder.loadTexts: thermalProbeEntry.setStatus('current')
thermalProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 0), ("present", 1), ("removed", 2), ("shorted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermalProbeState.setStatus('current')
vpwrTrapTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 9, 1), )
if mibBuilder.loadTexts: vpwrTrapTable.setStatus('current')
vpwrTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrTrapIpIndex"))
if mibBuilder.loadTexts: vpwrTrapEntry.setStatus('current')
vpwrTrapIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrTrapIpIndex.setStatus('current')
vpwrTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapIpAddress.setStatus('current')
vpwrTrapCriticality = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapCriticality.setStatus('current')
vpwrReadCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrReadCommunityString.setStatus('current')
vpwrWriteCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrWriteCommunityString.setStatus('current')
vpwrTrapCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapCommunityString.setStatus('current')
vpwrTrapPowerMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,1)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapPowerMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,2)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapACFAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,3)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapHVAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,4)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapHVSDAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,5)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapBDAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,6)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapLVDWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,7)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapLVDOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,8)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapDistAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,9)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapAuxAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,10)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapSystemRedundancyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,11)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapIShareAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,12)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapModuleFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,13)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapMultipleModuleFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,14)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapModuleCommAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,15)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapSystemOverTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,16)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapSystemOK = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,17)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,18)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"), ("VALERE-DC-POWER-MIB", "vpwrBayIndex"), ("VALERE-DC-POWER-MIB", "vpwrModuleIndex"))
vpwrTrapModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,19)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"), ("VALERE-DC-POWER-MIB", "vpwrBayIndex"), ("VALERE-DC-POWER-MIB", "vpwrModuleIndex"))
vpwrTrapThermalCompActive = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,20)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapThermalCompInactive = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,21)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapInternalTempAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,22)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapInternalTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,23)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapBatteryTempAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,24)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapBatteryTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,25)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapLoginFail = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,26)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapLoginSuccess = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,27)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapLogout = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,28)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapAdminPwdChange = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,29)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapIllegalConfigSubmit = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,30)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapCfgChange = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,31)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapClearEventHistory = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,32)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapSwDownloadNoReboot = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,33)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapSwDownloadAndReboot = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,34)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapSystemClockChange = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,35)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapModuleAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,36)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapOIDChange = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,37)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapThermalRunaway = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,38)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapBatteryDischargeTestAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,39)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapRingerAAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,40)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapRingerBAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,41)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapSingleRingerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,42)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapMultipleRingerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,43)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapThermalProbeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,44)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapRingerCommAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,45)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapDistributionCommAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,46)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapConverterAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,47)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapMultipleConvFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,48)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapUnmappedAddressAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,49)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapConfigErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,50)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapDisplayFirmwareMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,51)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapConverterInputFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,52)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapBatteryRechgIlimitFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,53)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapSystemAlive = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,54)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrLvdAlarmContactorOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 1))
if mibBuilder.loadTexts: vpwrLvdAlarmContactorOpen.setStatus('current')
vpwrLvdAlarmCBOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 2))
if mibBuilder.loadTexts: vpwrLvdAlarmCBOpen.setStatus('current')
vpwrTrapLvdFuseOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 3))
if mibBuilder.loadTexts: vpwrTrapLvdFuseOpen.setStatus('current')
vpwrLvdAlarmWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 4))
if mibBuilder.loadTexts: vpwrLvdAlarmWarning.setStatus('current')
vpwrRectAlarmDCFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 1))
if mibBuilder.loadTexts: vpwrRectAlarmDCFail.setStatus('current')
vpwrRectAlarmBoostFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 2))
if mibBuilder.loadTexts: vpwrRectAlarmBoostFail.setStatus('current')
vpwrRectAlarmACFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 3))
if mibBuilder.loadTexts: vpwrRectAlarmACFail.setStatus('current')
vpwrRectAlarmHVSD = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 4))
if mibBuilder.loadTexts: vpwrRectAlarmHVSD.setStatus('current')
vpwrRectAlarmFanFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 5))
if mibBuilder.loadTexts: vpwrRectAlarmFanFail.setStatus('current')
vpwrRectAlarmAmbTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 6))
if mibBuilder.loadTexts: vpwrRectAlarmAmbTemp.setStatus('current')
vpwrRectAlarmIntTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 7))
if mibBuilder.loadTexts: vpwrRectAlarmIntTemp.setStatus('current')
vpwrRectAlarmIShare = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 8))
if mibBuilder.loadTexts: vpwrRectAlarmIShare.setStatus('current')
vpwrRectAlarmUV = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 9))
if mibBuilder.loadTexts: vpwrRectAlarmUV.setStatus('current')
vpwrRectAlarmLowVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 10))
if mibBuilder.loadTexts: vpwrRectAlarmLowVoltage.setStatus('current')
vpwrRectAlarmReserved = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 11))
if mibBuilder.loadTexts: vpwrRectAlarmReserved.setStatus('current')
vpwrRectAlarmDCEnable = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 12))
if mibBuilder.loadTexts: vpwrRectAlarmDCEnable.setStatus('current')
vpwrRectAlarmRemoteShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 13))
if mibBuilder.loadTexts: vpwrRectAlarmRemoteShutdown.setStatus('current')
vpwrRectAlarmModDisableShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 14))
if mibBuilder.loadTexts: vpwrRectAlarmModDisableShutdown.setStatus('current')
vpwrRectAlarmShortPinShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 15))
if mibBuilder.loadTexts: vpwrRectAlarmShortPinShutdown.setStatus('current')
vpwrRectAlarmBoostComm = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 16))
if mibBuilder.loadTexts: vpwrRectAlarmBoostComm.setStatus('current')
vpwrTrapsMsgString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: vpwrTrapsMsgString.setStatus('current')
vpwrTrapUserIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 13858, 11, 2), IpAddress())
if mibBuilder.loadTexts: vpwrTrapUserIpAddress.setStatus('current')
vpwrTrapEventTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 13858, 11, 3), IpAddress())
if mibBuilder.loadTexts: vpwrTrapEventTimeStamp.setStatus('current')
sysRelayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 3), )
if mibBuilder.loadTexts: sysRelayConfigTable.setStatus('current')
sysRelayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 3, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "sysRelayIndex"))
if mibBuilder.loadTexts: sysRelayConfigEntry.setStatus('current')
sysRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRelayIndex.setStatus('current')
sysRelayDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRelayDefaultName.setStatus('current')
sysRelayCustomName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRelayCustomName.setStatus('current')
sysRelayAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("alarmNone", 0), ("alarmMajor", 1), ("alarmMinor", 2), ("alarmMajorAndMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRelayAlarmSeverity.setStatus('current')
sysAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 4), )
if mibBuilder.loadTexts: sysAlarmConfigTable.setStatus('current')
sysAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "sysAlarmIndex"))
if mibBuilder.loadTexts: sysAlarmConfigEntry.setStatus('current')
sysAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmIndex.setStatus('current')
sysAlarmDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmDefaultName.setStatus('current')
sysAlarmCustomName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmCustomName.setStatus('current')
sysAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("major", 1), ("minor", 2), ("majorAndMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmSeverity.setStatus('current')
sysAlarmToRelayMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmToRelayMapping.setStatus('current')
sysAlarmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmOperStatus.setStatus('current')
sysAuxAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 5), )
if mibBuilder.loadTexts: sysAuxAlarmConfigTable.setStatus('current')
sysAuxAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "sysAuxAlarmIndex"))
if mibBuilder.loadTexts: sysAuxAlarmConfigEntry.setStatus('current')
sysAuxAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuxAlarmIndex.setStatus('current')
sysAuxAlarmDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuxAlarmDefaultName.setStatus('current')
sysAuxAlarmCustomName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuxAlarmCustomName.setStatus('current')
sysAuxAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("major", 1), ("minor", 2), ("majorAndMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuxAlarmSeverity.setStatus('current')
sysAuxAlarmToRelayMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuxAlarmToRelayMapping.setStatus('current')
sysAuxAlarmPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alarmOnOpen", 0), ("alarmOnClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuxAlarmPolarity.setStatus('current')
sysAuxAlarmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuxAlarmOperStatus.setStatus('current')
sysAlarmComFailState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmComFailState.setStatus('current')
sysAlarmIShareState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmIShareState.setStatus('current')
sysAlarmRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("nPlus1", 1), ("nPlus2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmRedundancyState.setStatus('current')
vpwrRingerParameterTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1), )
if mibBuilder.loadTexts: vpwrRingerParameterTable.setStatus('current')
vpwrRingerParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrModuleIndex"), (0, "VALERE-DC-POWER-MIB", "vpwrRingerIndex"))
if mibBuilder.loadTexts: vpwrRingerParameterEntry.setStatus('current')
vpwrRingerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrRingerIndex.setStatus('current')
vpwrRingerParameterAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ringerDisabled", 0), ("ringerAOn", 1), ("ringerBOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRingerParameterAdminState.setStatus('current')
vpwrRingerParameterAcVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7000, 11000))).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRingerParameterAcVoltage.setStatus('current')
vpwrRingerParameterDcVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5600))).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRingerParameterDcVoltage.setStatus('current')
vpwrRingerParameterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 50))).setUnits(' Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRingerParameterFrequency.setStatus('current')
vpwrRingerNumberPresent = MibScalar((1, 3, 6, 1, 4, 1, 13858, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrRingerNumberPresent.setStatus('current')
vpwrRingerAlarmaAFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 1))
if mibBuilder.loadTexts: vpwrRingerAlarmaAFailed.setStatus('current')
vpwrRingerAlarmAOTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 2))
if mibBuilder.loadTexts: vpwrRingerAlarmAOTemp.setStatus('current')
vpwrRingerAlarmAOCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 3))
if mibBuilder.loadTexts: vpwrRingerAlarmAOCurrent.setStatus('current')
vpwrRingerAlarmaBFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 4))
if mibBuilder.loadTexts: vpwrRingerAlarmaBFailed.setStatus('current')
vpwrRingerAlarmBOverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 5))
if mibBuilder.loadTexts: vpwrRingerAlarmBOverTemp.setStatus('current')
vpwrRingerAlarmBOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 6))
if mibBuilder.loadTexts: vpwrRingerAlarmBOverCurrent.setStatus('current')
vpwrBoostAdminState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("boostDisabled", 0), ("boostEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBoostAdminState.setStatus('current')
vpwrBoostVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7000, 11000))).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBoostVoltage.setStatus('current')
vpwrBoostDuration = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBoostDuration.setStatus('current')
vpwrBoostOperState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("boostInactive", 0), ("boostActive", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBoostOperState.setStatus('current')
vpwrBatteryCurrentLimitAdminState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("battetyCurrentLimitDisabled", 0), ("battetyCurrentLimitEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryCurrentLimitAdminState.setStatus('current')
vpwrBattetyCurrentLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 40))).setUnits('Ampere').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBattetyCurrentLimitValue.setStatus('current')
vpwrBattetyCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 40))).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBattetyCurrentValue.setStatus('current')
vpwrBDTAdminState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bdtDisabled", 0), ("bdtEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTAdminState.setStatus('current')
vpwrBDTDuration = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 50))).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTDuration.setStatus('current')
vpwrBDTAlarmVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7000, 11000))).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTAlarmVoltage.setStatus('current')
vpwrBDTAbortVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5600))).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTAbortVoltage.setStatus('current')
vpwrBDTAlarmCoefficient = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('None').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTAlarmCoefficient.setStatus('current')
vpwrBDTOperState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bdtInactive", 0), ("bdtActive", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTOperState.setStatus('current')
vpwrBDTClearAlarm = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bdtNoAlarm", 0), ("bdtAlarmPresent", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTClearAlarm.setStatus('current')
vpwrModuleIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 6, 1), )
if mibBuilder.loadTexts: vpwrModuleIdentTable.setStatus('current')
vpwrModuleIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1), )
vpwrSystemIdentEntry.registerAugmentions(("VALERE-DC-POWER-MIB", "vpwrModuleIdentEntry"))
vpwrModuleIdentEntry.setIndexNames(*vpwrSystemIdentEntry.getIndexNames())
if mibBuilder.loadTexts: vpwrModuleIdentEntry.setStatus('current')
vpwrModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleSerialNumber.setStatus('current')
vpwrModuleModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleModelNumber.setStatus('current')
vpwrModuleFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleFwVersion.setStatus('current')
vpwrModuleTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleTestDate.setStatus('current')
vpwrModuleOperHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleOperHours.setStatus('current')
vpwrPanelModuleIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 6, 2), )
if mibBuilder.loadTexts: vpwrPanelModuleIdentTable.setStatus('current')
vpwrPanelModuleIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1), )
VpwrPanelIdentEntry.registerAugmentions(("VALERE-DC-POWER-MIB", "vpwrPanelModuleIdentEntry"))
vpwrPanelModuleIdentEntry.setIndexNames(*VpwrPanelIdentEntry.getIndexNames())
if mibBuilder.loadTexts: vpwrPanelModuleIdentEntry.setStatus('current')
vpwrPanelModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleSerialNumber.setStatus('current')
vpwrPanelModuleModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleModelNumber.setStatus('current')
vpwrPanelModuleFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleFwVersion.setStatus('current')
vpwrPanelModuleTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleTestDate.setStatus('current')
vpwrPanelModuleOperHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleOperHours.setStatus('current')
vpwrBayctrlModuleIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 6, 3), )
if mibBuilder.loadTexts: vpwrBayctrlModuleIdentTable.setStatus('current')
vpwrBayctrlModuleIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1), )
VpwrBayctrlIdentEntry.registerAugmentions(("VALERE-DC-POWER-MIB", "vpwrBayctrlModuleIdentEntry"))
vpwrBayctrlModuleIdentEntry.setIndexNames(*VpwrBayctrlIdentEntry.getIndexNames())
if mibBuilder.loadTexts: vpwrBayctrlModuleIdentEntry.setStatus('current')
vpwrBayctrlSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlSerialNumber.setStatus('current')
vpwrBayctrlModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlModelNumber.setStatus('current')
vpwrBayctrlFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlFwVersion.setStatus('current')
vpwrBayctrlTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlTestDate.setStatus('current')
vpwrBayctrlOperHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlOperHours.setStatus('current')
mibBuilder.exportSymbols("VALERE-DC-POWER-MIB", vpwrLvdReconnectSetpoint=vpwrLvdReconnectSetpoint, vpwrPanelModuleFwVersion=vpwrPanelModuleFwVersion, vpwrTrapTable=vpwrTrapTable, sysAlarmIndex=sysAlarmIndex, sysAlarmToRelayMapping=sysAlarmToRelayMapping, vpwrBatteryTempUThreshold=vpwrBatteryTempUThreshold, vpwrSystemConfigGroup=vpwrSystemConfigGroup, vpwrSystemInternalTempUThreshold=vpwrSystemInternalTempUThreshold, vpwrTrapEventTimeStamp=vpwrTrapEventTimeStamp, sysAuxAlarmOperStatus=sysAuxAlarmOperStatus, sysRelayCustomName=sysRelayCustomName, vpwrIoModuleTestGroup=vpwrIoModuleTestGroup, vpwrLvdWarningSetpoint=vpwrLvdWarningSetpoint, vpwrDcPowerRectifier=vpwrDcPowerRectifier, vpwrBayctrlCurrent=vpwrBayctrlCurrent, vpwrModuleOperStatus=vpwrModuleOperStatus, vpwrDcPowerTraps=vpwrDcPowerTraps, vpwrLvdContactorDisconnectSetpoint=vpwrLvdContactorDisconnectSetpoint, vpwrPanelModuleOID=vpwrPanelModuleOID, vpwrLvdContactorReconnectSetpoint=vpwrLvdContactorReconnectSetpoint, batteryTempCompHighStartTemperature=batteryTempCompHighStartTemperature, vpwrTrapConfigErrorAlarm=vpwrTrapConfigErrorAlarm, vpwrTrapConverterInputFailAlarm=vpwrTrapConverterInputFailAlarm, vpwrBayctrlModelNumber=vpwrBayctrlModelNumber, vpwrSystemPanelIdentGroup=vpwrSystemPanelIdentGroup, vpwrSystemTempCompensationSlope=vpwrSystemTempCompensationSlope, vpwrTrapIShareAlarm=vpwrTrapIShareAlarm, vpwrRingerAlarmBOverCurrent=vpwrRingerAlarmBOverCurrent, vpwrBattetyCurrentLimitValue=vpwrBattetyCurrentLimitValue, vpwrDcAcInverterConfigGroup=vpwrDcAcInverterConfigGroup, vpwrDcPowerSystem=vpwrDcPowerSystem, vpwrRectifierHVSDSetpoint=vpwrRectifierHVSDSetpoint, vpwrTrapInternalTempAlarmSet=vpwrTrapInternalTempAlarmSet, vpwrTrapOIDChange=vpwrTrapOIDChange, vpwrPanelModuleIdentEntry=vpwrPanelModuleIdentEntry, vpwrBayctrlOperHours=vpwrBayctrlOperHours, vpwrRingerAlarmaAFailed=vpwrRingerAlarmaAFailed, vpwrTrapBatteryRechgIlimitFailAlarm=vpwrTrapBatteryRechgIlimitFailAlarm, vpwrDcPowerMgt=vpwrDcPowerMgt, vpwrTrapModuleRemoved=vpwrTrapModuleRemoved, vpwrPanelModuleTestDate=vpwrPanelModuleTestDate, vpwrPanelModuleCapacity=vpwrPanelModuleCapacity, vpwrRectAlarmAmbTemp=vpwrRectAlarmAmbTemp, vpwrAlarmTable=vpwrAlarmTable, vpwrSystemIdentGroup=vpwrSystemIdentGroup, vpwrRingerAlarmBOverTemp=vpwrRingerAlarmBOverTemp, vpwrBayctrlOperStatus=vpwrBayctrlOperStatus, vpwrModuleModelNumber=vpwrModuleModelNumber, vpwrTrapModuleCommAlarm=vpwrTrapModuleCommAlarm, vpwrBatteryTempLThreshold=vpwrBatteryTempLThreshold, vpwrTrapClearEventHistory=vpwrTrapClearEventHistory, sysAlarmOperStatus=sysAlarmOperStatus, sysAlarmConfigTable=sysAlarmConfigTable, vpwrSystemParameterGroup=vpwrSystemParameterGroup, vpwrBattetyCurrentValue=vpwrBattetyCurrentValue, vpwrTrapLVDWarningAlarm=vpwrTrapLVDWarningAlarm, vpwrTrapACFAlarm=vpwrTrapACFAlarm, vpwrDcPowerTrio=vpwrDcPowerTrio, vpwrDcPowerProducts=vpwrDcPowerProducts, vpwrBatteryCurrentGroup=vpwrBatteryCurrentGroup, vpwrRectAlarmModDisableShutdown=vpwrRectAlarmModDisableShutdown, sysAlarmComFailState=sysAlarmComFailState, vpwrRingerConfigGroup=vpwrRingerConfigGroup, vpwrTrapRingerCommAlarm=vpwrTrapRingerCommAlarm, batteryTempCompLowSlope=batteryTempCompLowSlope, vpwrTrapRingerBAlarm=vpwrTrapRingerBAlarm, vpwrDcPowerDcAcInverter=vpwrDcPowerDcAcInverter, vpwrTrapMultipleModuleFailAlarm=vpwrTrapMultipleModuleFailAlarm, vpwrLvdAlarmWarning=vpwrLvdAlarmWarning, vpwrModuleOperHours=vpwrModuleOperHours, vpwrTrapThermalCompActive=vpwrTrapThermalCompActive, vpwrDcPowerLvd=vpwrDcPowerLvd, vpwrPanelIdentEntry=vpwrPanelIdentEntry, vpwrRectAlarmIntTemp=vpwrRectAlarmIntTemp, vpwrBDTClearAlarm=vpwrBDTClearAlarm, vpwrTrapModuleFailAlarm=vpwrTrapModuleFailAlarm, vpwrModuleIdentEntry=vpwrModuleIdentEntry, vpwrPanelModuleIdentTable=vpwrPanelModuleIdentTable, vpwrTrapBDAlarm=vpwrTrapBDAlarm, batteryTempCompLowStartTemperature=batteryTempCompLowStartTemperature, thermalProbeTable=thermalProbeTable, vpwrSystemTempCompensation=vpwrSystemTempCompensation, vpwrIoModuleAlarmGroup=vpwrIoModuleAlarmGroup, vpwrDcPowerTrapsMsgString=vpwrDcPowerTrapsMsgString, vpwrIdentAgentSoftwareVersion=vpwrIdentAgentSoftwareVersion, vpwrPanelBayIndex=vpwrPanelBayIndex, sysAuxAlarmToRelayMapping=sysAuxAlarmToRelayMapping, vpwrRectAlarmUV=vpwrRectAlarmUV, vpwrDcPowerIoModule=vpwrDcPowerIoModule, vpwrTrapPowerMinorAlarm=vpwrTrapPowerMinorAlarm, vpwrBDTAlarmVoltage=vpwrBDTAlarmVoltage, vpwrLvdTestGroup=vpwrLvdTestGroup, vpwrRectifierAlarmGroup=vpwrRectifierAlarmGroup, vpwrRingerParameterDcVoltage=vpwrRingerParameterDcVoltage, vpwrLvdContactorReconnectDelayTimer=vpwrLvdContactorReconnectDelayTimer, vpwrTrapCriticality=vpwrTrapCriticality, sysAlarmConfigEntry=sysAlarmConfigEntry, vpwrSystemIdentTable=vpwrSystemIdentTable, sysAlarmIShareState=sysAlarmIShareState, PYSNMP_MODULE_ID=vpwrDcPowerMgt, vpwrTrapSwDownloadNoReboot=vpwrTrapSwDownloadNoReboot, vpwrBDTDuration=vpwrBDTDuration, vpwrBDTAlarmCoefficient=vpwrBDTAlarmCoefficient, vpwrBayctrlFwVersion=vpwrBayctrlFwVersion, vpwrPanelIdentTable=vpwrPanelIdentTable, vpwrRingerNumberPresent=vpwrRingerNumberPresent, vpwrIoModuleConfigGroup=vpwrIoModuleConfigGroup, vpwrRingerParameterEntry=vpwrRingerParameterEntry, vpwrDcPowerBayController=vpwrDcPowerBayController, vpwrPanelModuleSerialNumber=vpwrPanelModuleSerialNumber, vpwrSystemControllerState=vpwrSystemControllerState, vpwrAlarmTime=vpwrAlarmTime, vpwrIdentModel=vpwrIdentModel, vpwrSystemType=vpwrSystemType, vpwrTrapSystemClockChange=vpwrTrapSystemClockChange, vpwrRectAlarmBoostComm=vpwrRectAlarmBoostComm, vpwrLvdContactorConfigTable=vpwrLvdContactorConfigTable, vpwrBoostAdminState=vpwrBoostAdminState, vpwrRectAlarmFanFail=vpwrRectAlarmFanFail, vpwrLvdDisconnectSetpoint=vpwrLvdDisconnectSetpoint, vpwrTrapAdminPwdChange=vpwrTrapAdminPwdChange, thermalProbeEntry=thermalProbeEntry, batteryTempCompRunawayStopVoltage=batteryTempCompRunawayStopVoltage, vpwrBatteryCurrentLimitAdminState=vpwrBatteryCurrentLimitAdminState, vpwrDcPowerModuleIdent=vpwrDcPowerModuleIdent, vpwrDcAcInverterTestGroup=vpwrDcAcInverterTestGroup, vpwrLvdReconnectDelayTimer=vpwrLvdReconnectDelayTimer, vpwrRectAlarmDCFail=vpwrRectAlarmDCFail, vpwrSystemBayctrlIdentGroup=vpwrSystemBayctrlIdentGroup, vpwrBatteryDischargeTestGroup=vpwrBatteryDischargeTestGroup, batteryTempCompSenseSource=batteryTempCompSenseSource, vpwrTrapSystemOK=vpwrTrapSystemOK, vpwrTrapModuleAlarm=vpwrTrapModuleAlarm, sysRelayConfigEntry=sysRelayConfigEntry, vpwrDcPowerSnmpConfig=vpwrDcPowerSnmpConfig, vpwrPanelModuleCurrent=vpwrPanelModuleCurrent, vpwrPanelModuleIndex=vpwrPanelModuleIndex, vpwrTrapLVDOpenAlarm=vpwrTrapLVDOpenAlarm, NonNegativeInteger=NonNegativeInteger, vpwrTrapIpAddress=vpwrTrapIpAddress, vpwrTrapSystemRedundancyAlarm=vpwrTrapSystemRedundancyAlarm, vpwrTrapUnmappedAddressAlarm=vpwrTrapUnmappedAddressAlarm, vpwrTrapThermalCompInactive=vpwrTrapThermalCompInactive, vpwrTrapsMsgString=vpwrTrapsMsgString, vpwrSystemShelfCapacity=vpwrSystemShelfCapacity, vpwrBayctrlIdentTable=vpwrBayctrlIdentTable, vpwrDcPowerDcDcConverter=vpwrDcPowerDcDcConverter, vpwrBatteryTempName=vpwrBatteryTempName, vpwrSystemThermalSenseType=vpwrSystemThermalSenseType, thermalProbeState=thermalProbeState, vpwrSystemIdentEntry=vpwrSystemIdentEntry, vpwrDcPowerDist=vpwrDcPowerDist, sysRelayIndex=sysRelayIndex, vpwrPanelModuleOperHours=vpwrPanelModuleOperHours, vpwrLvdAlarmGroup=vpwrLvdAlarmGroup, vpwrTrapSystemAlive=vpwrTrapSystemAlive, vpwrRectAlarmACFail=vpwrRectAlarmACFail, vpwrRectifierConfigGroup=vpwrRectifierConfigGroup, vpwrRectifierCurrentLimitAdminState=vpwrRectifierCurrentLimitAdminState, vpwrRingerTestGroup=vpwrRingerTestGroup, vpwrTrapLoginFail=vpwrTrapLoginFail, vpwrModuleCurrent=vpwrModuleCurrent, vpwrTrapSwDownloadAndReboot=vpwrTrapSwDownloadAndReboot, vpwrTrapMultipleRingerAlarm=vpwrTrapMultipleRingerAlarm, sysRelayAlarmSeverity=sysRelayAlarmSeverity, vpwrTrapInternalTempAlarmCleared=vpwrTrapInternalTempAlarmCleared, vpwrAlarmIndex=vpwrAlarmIndex, vpwrTrapBatteryDischargeTestAlarm=vpwrTrapBatteryDischargeTestAlarm, vpwrLvdContactorState=vpwrLvdContactorState, vpwrBatteryBoostGroup=vpwrBatteryBoostGroup, vpwrTrapThermalProbeAlarm=vpwrTrapThermalProbeAlarm, vpwrDcPowerAlarmGroup=vpwrDcPowerAlarmGroup, vpwrSystemCurrent=vpwrSystemCurrent, vpwrTrapMultipleConvFailAlarm=vpwrTrapMultipleConvFailAlarm, vpwrModuleIdentTable=vpwrModuleIdentTable, vpwrBatteryTempIndex=vpwrBatteryTempIndex, vpwrSystemVoltage=vpwrSystemVoltage, vpwrTrapLogout=vpwrTrapLogout, vpwrRectAlarmReserved=vpwrRectAlarmReserved, vpwrBayctrlSerialNumber=vpwrBayctrlSerialNumber, vpwrWriteCommunityString=vpwrWriteCommunityString, vpwrRectAlarmHVSD=vpwrRectAlarmHVSD, vpwrSystemHVAlarmSetpoint=vpwrSystemHVAlarmSetpoint, batteryTempCompLowStopVoltage=batteryTempCompLowStopVoltage, vpwrReadCommunityString=vpwrReadCommunityString, vpwrLvdAlarmContactorOpen=vpwrLvdAlarmContactorOpen, vpwrLvdContactorConfigEntry=vpwrLvdContactorConfigEntry, vpwrRectAlarmRemoteShutdown=vpwrRectAlarmRemoteShutdown, batteryTempCompRunawayState=batteryTempCompRunawayState, vpwrTrapDisplayFirmwareMismatchAlarm=vpwrTrapDisplayFirmwareMismatchAlarm, sysRelayDefaultName=sysRelayDefaultName, vpwrIdentManufacturer=vpwrIdentManufacturer, vpwrDcAcInverterAlarmGroup=vpwrDcAcInverterAlarmGroup, vpwrBoostVoltage=vpwrBoostVoltage, vpwrModuleIndex=vpwrModuleIndex, vpwrRectAlarmLowVoltage=vpwrRectAlarmLowVoltage, vpwrLvdAlarmCBOpen=vpwrLvdAlarmCBOpen, batteryTempCompHighSlope=batteryTempCompHighSlope, sysAlarmDefaultName=sysAlarmDefaultName, vpwrBatteryTempEntry=vpwrBatteryTempEntry, vpwrTrapLoginSuccess=vpwrTrapLoginSuccess, vpwrTrapUserIpAddress=vpwrTrapUserIpAddress, vpwrBoostOperState=vpwrBoostOperState, vpwrRingerParameterAdminState=vpwrRingerParameterAdminState, sysAuxAlarmConfigEntry=sysAuxAlarmConfigEntry, vpwrBayctrlModuleIdentTable=vpwrBayctrlModuleIdentTable, vpwrDcPowerBatteryGroup=vpwrDcPowerBatteryGroup, vpwrTrapSingleRingerAlarm=vpwrTrapSingleRingerAlarm, vpwrModuleFwVersion=vpwrModuleFwVersion, vpwrLvdContactorWarningSetpoint=vpwrLvdContactorWarningSetpoint, vpwrBoostDuration=vpwrBoostDuration, vpwrDcPowerTest=vpwrDcPowerTest, sysAuxAlarmDefaultName=sysAuxAlarmDefaultName, vpwrSystemTempCompStartTemperature=vpwrSystemTempCompStartTemperature, vpwrRectAlarmDCEnable=vpwrRectAlarmDCEnable, vpwrBayctrlIdentEntry=vpwrBayctrlIdentEntry, vpwrDcDcConverterConfigGroup=vpwrDcDcConverterConfigGroup, vpwrBDTAbortVoltage=vpwrBDTAbortVoltage, vpwrRectifierTestGroup=vpwrRectifierTestGroup, sysAuxAlarmIndex=sysAuxAlarmIndex, vpwrDcPowerRinger=vpwrDcPowerRinger, vpwrSystemInternalTemperature=vpwrSystemInternalTemperature, batteryTempCompensation=batteryTempCompensation, sysAuxAlarmSeverity=sysAuxAlarmSeverity, vpwrModuleSerialNumber=vpwrModuleSerialNumber, vpwrSystemBDAlarmSetpoint=vpwrSystemBDAlarmSetpoint, vpwrBayIndex=vpwrBayIndex, vpwrSystemInternalTempLThreshold=vpwrSystemInternalTempLThreshold, sysAlarmSeverity=sysAlarmSeverity, batteryTempCompRunawayTemperature=batteryTempCompRunawayTemperature, vpwrPanelModuleModelNumber=vpwrPanelModuleModelNumber, vpwrTrapHVSDAlarm=vpwrTrapHVSDAlarm, vpwrTrapModuleInserted=vpwrTrapModuleInserted, vpwrTrapCfgChange=vpwrTrapCfgChange, vpwrTrapDistributionCommAlarm=vpwrTrapDistributionCommAlarm, vpwrBayctrlIndex=vpwrBayctrlIndex, vpwrBayctrlOID=vpwrBayctrlOID, vpwrRectifierCurrentLimit=vpwrRectifierCurrentLimit, vpwrTrapSystemOverTemperatureAlarm=vpwrTrapSystemOverTemperatureAlarm, vpwrDcDcConverterAlarmGroup=vpwrDcDcConverterAlarmGroup, vpwrAlarmsPresent=vpwrAlarmsPresent, vpwrBatteryTemp=vpwrBatteryTemp, sysAuxAlarmCustomName=sysAuxAlarmCustomName, vpwrRingerAlarmAOTemp=vpwrRingerAlarmAOTemp, vpwrRectAlarmBoostFail=vpwrRectAlarmBoostFail, sysAuxAlarmConfigTable=sysAuxAlarmConfigTable, vpwrBayctrlCapacity=vpwrBayctrlCapacity, vpwrRingerAlarmGroup=vpwrRingerAlarmGroup, batteryTempCompHighStopVoltage=batteryTempCompHighStopVoltage, vpwrTrapDistAlarm=vpwrTrapDistAlarm, vpwrModuleCapacity=vpwrModuleCapacity, vpwrIdentControllerVersion=vpwrIdentControllerVersion, vpwrTrapThermalRunaway=vpwrTrapThermalRunaway, vpwrTrapBatteryTempAlarmSet=vpwrTrapBatteryTempAlarmSet)
mibBuilder.exportSymbols("VALERE-DC-POWER-MIB", vpwrTrapLvdFuseOpen=vpwrTrapLvdFuseOpen, vpwrBDTOperState=vpwrBDTOperState, vpwrTrapIpIndex=vpwrTrapIpIndex, vpwrBDTAdminState=vpwrBDTAdminState, vpwrTrapBatteryTempAlarmCleared=vpwrTrapBatteryTempAlarmCleared, vpwrDcDcConverterTestGroup=vpwrDcDcConverterTestGroup, vpwrTrapRingerAAlarm=vpwrTrapRingerAAlarm, vpwrBatteryTempGroup=vpwrBatteryTempGroup, vpwrTrapEntry=vpwrTrapEntry, sysRelayConfigTable=sysRelayConfigTable, vpwrBayctrlTestDate=vpwrBayctrlTestDate, vpwrTrapCommunityString=vpwrTrapCommunityString, vpwrTrapIllegalConfigSubmit=vpwrTrapIllegalConfigSubmit, vpwrRectAlarmIShare=vpwrRectAlarmIShare, vpwrRingerAlarmAOCurrent=vpwrRingerAlarmAOCurrent, sysAlarmCustomName=sysAlarmCustomName, vpwrRingerIndex=vpwrRingerIndex, vpwrTrapConverterAlarm=vpwrTrapConverterAlarm, sysAlarmRedundancyState=sysAlarmRedundancyState, vpwrModuleTestDate=vpwrModuleTestDate, vpwrBayctrlModuleIdentEntry=vpwrBayctrlModuleIdentEntry, vpwrIdentName=vpwrIdentName, vpwrSystemTempCompensationState=vpwrSystemTempCompensationState, vpwrTrapAuxAlarm=vpwrTrapAuxAlarm, vpwrRectifierFVSetpoint=vpwrRectifierFVSetpoint, vpwrAlarmDescr=vpwrAlarmDescr, vpwrTrapPowerMajorAlarm=vpwrTrapPowerMajorAlarm, vpwrBatteryTempTable=vpwrBatteryTempTable, vpwrModuleOID=vpwrModuleOID, vpwrSystemTempCompStopVoltage=vpwrSystemTempCompStopVoltage, vpwrTrapHVAlarm=vpwrTrapHVAlarm, vpwrRingerParameterTable=vpwrRingerParameterTable, vpwrRingerAlarmaBFailed=vpwrRingerAlarmaBFailed, vpwrPanelModuleOperStatus=vpwrPanelModuleOperStatus, vpwrRectAlarmShortPinShutdown=vpwrRectAlarmShortPinShutdown, sysAuxAlarmPolarity=sysAuxAlarmPolarity, PositiveInteger=PositiveInteger, vpwrRingerParameterAcVoltage=vpwrRingerParameterAcVoltage, vpwrLvdConfigGroup=vpwrLvdConfigGroup, vpwrLvdContactorIndex=vpwrLvdContactorIndex, vpwrRingerParameterFrequency=vpwrRingerParameterFrequency, vpwrAlarmEntry=vpwrAlarmEntry)
