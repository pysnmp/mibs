#
# PySNMP MIB module ALTEON-CS-PHYSICAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alteonos/ALTEON-CS-PHYSICAL-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 10:53:30 2024
# On host fv-az1986-135 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
aws_switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "aws-switch")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, Integer32, Counter32, NotificationType, ObjectIdentity, MibIdentifier, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "Counter32", "NotificationType", "ObjectIdentity", "MibIdentifier", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "iso", "TimeTicks")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
layer2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2))
layer2.setRevisions(('2004-09-01 00:00',))
if mibBuilder.loadTexts: layer2.setLastUpdated('200409010000Z')
if mibBuilder.loadTexts: layer2.setOrganization('Nortel Networks')
class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

layer2Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1))
layer2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2))
layer2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3))
layer2Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 4))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1))
trunkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2))
stgCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3))
mirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4))
lacp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5))
mstCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7))
portTeamCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9))
mirrPortMirr = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1))
mstGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1))
mstCistCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2))
fdbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1))
stpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2))
fdbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1))
stpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2))
lacpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3))
cistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4))
vlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5))
cistGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1))
portTeamInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6))
vlanMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxEnt.setStatus('current')
vlanMaxVlanID = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxVlanID.setStatus('current')
vlanCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2), )
if mibBuilder.loadTexts: vlanCurCfgTable.setStatus('current')
vlanCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "vlanCurCfgVlanId"))
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setStatus('current')
vlanCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanId.setStatus('current')
vlanCurCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanName.setStatus('current')
vlanCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPorts.setStatus('current')
vlanCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgState.setStatus('current')
vlanCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgBwmContract.setStatus('current')
vlanCurCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgStg.setStatus('current')
vlanCurCfgJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgJumbo.setStatus('current')
vlanCurCfgLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgLearn.setStatus('current')
vlanNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3), )
if mibBuilder.loadTexts: vlanNewCfgTable.setStatus('current')
vlanNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "vlanNewCfgVlanId"))
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setStatus('current')
vlanNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgVlanId.setStatus('current')
vlanNewCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgVlanName.setStatus('current')
vlanNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgPorts.setStatus('current')
vlanNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgState.setStatus('current')
vlanNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgAddPort.setStatus('current')
vlanNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setStatus('current')
vlanNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgDelete.setStatus('current')
vlanNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgBwmContract.setStatus('current')
vlanNewCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgStg.setStatus('current')
vlanNewCfgJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgJumbo.setStatus('current')
vlanNewCfgLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgLearn.setStatus('current')
lacpCurSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemPriority.setStatus('current')
lacpNewSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemPriority.setStatus('current')
lacpCurSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemTimeoutTime.setStatus('current')
lacpNewSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemTimeoutTime.setStatus('current')
lacpCurPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7), )
if mibBuilder.loadTexts: lacpCurPortCfgTable.setStatus('current')
lacpCurPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "lacpCurPortCfgTableId"))
if mibBuilder.loadTexts: lacpCurPortCfgTableEntry.setStatus('current')
lacpCurPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortCfgTableId.setStatus('current')
lacpCurPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortState.setStatus('current')
lacpCurPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorPortPriority.setStatus('current')
lacpCurPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorAdminKey.setStatus('current')
lacpNewPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8), )
if mibBuilder.loadTexts: lacpNewPortCfgTable.setStatus('current')
lacpNewPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "lacpNewPortCfgTableId"))
if mibBuilder.loadTexts: lacpNewPortCfgTableEntry.setStatus('current')
lacpNewPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpNewPortCfgTableId.setStatus('current')
lacpNewPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortState.setStatus('current')
lacpNewPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorPortPriority.setStatus('current')
lacpNewPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorAdminKey.setStatus('current')
trunkGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setStatus('current')
trunkGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2), )
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setStatus('current')
trunkGroupCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "trunkGroupCurCfgIndex"))
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setStatus('current')
trunkGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setStatus('current')
trunkGroupCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setStatus('current')
trunkGroupCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgState.setStatus('current')
trunkGroupCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgBwmContract.setStatus('current')
trunkGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3), )
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setStatus('current')
trunkGroupNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "trunkGroupNewCfgIndex"))
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setStatus('current')
trunkGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setStatus('current')
trunkGroupNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setStatus('current')
trunkGroupNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setStatus('current')
trunkGroupNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setStatus('current')
trunkGroupNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgState.setStatus('current')
trunkGroupNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setStatus('current')
trunkGroupNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgBwmContract.setStatus('current')
stgCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1), )
if mibBuilder.loadTexts: stgCurCfgTable.setStatus('current')
stgCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stgCurCfgIndex"))
if mibBuilder.loadTexts: stgCurCfgTableEntry.setStatus('current')
stgCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgIndex.setStatus('current')
stgCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgState.setStatus('current')
stgCurCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPriority.setStatus('current')
stgCurCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgHelloTime.setStatus('current')
stgCurCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgForwardDelay.setStatus('current')
stgCurCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgMaxAge.setStatus('current')
stgCurCfgAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgAgingTime.setStatus('current')
stgCurCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap.setStatus('current')
stgNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2), )
if mibBuilder.loadTexts: stgNewCfgTable.setStatus('current')
stgNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stgNewCfgIndex"))
if mibBuilder.loadTexts: stgNewCfgTableEntry.setStatus('current')
stgNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgIndex.setStatus('current')
stgNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgState.setStatus('current')
stgNewCfgDefaultCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default-config", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgDefaultCfg.setStatus('current')
stgNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgAddVlan.setStatus('current')
stgNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgRemoveVlan.setStatus('current')
stgNewCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgPriority.setStatus('current')
stgNewCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgBrgHelloTime.setStatus('current')
stgNewCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgBrgForwardDelay.setStatus('current')
stgNewCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgBrgMaxAge.setStatus('current')
stgNewCfgAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgAgingTime.setStatus('current')
stgNewCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap.setStatus('current')
stgCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3), )
if mibBuilder.loadTexts: stgCurCfgPortTable.setStatus('current')
stgCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stgCurCfgStgIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "stgCurCfgPortIndex"))
if mibBuilder.loadTexts: stgCurCfgPortTableEntry.setStatus('current')
stgCurCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgStgIndex.setStatus('current')
stgCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortIndex.setStatus('current')
stgCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortState.setStatus('current')
stgCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPriority.setStatus('current')
stgCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPathCost.setStatus('current')
stgCurCfgPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortLink.setStatus('current')
stgCurCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortEdge.setStatus('current')
stgNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4), )
if mibBuilder.loadTexts: stgNewCfgPortTable.setStatus('current')
stgNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stgNewCfgStgIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "stgNewCfgPortIndex"))
if mibBuilder.loadTexts: stgNewCfgPortTableEntry.setStatus('current')
stgNewCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgStgIndex.setStatus('current')
stgNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgPortIndex.setStatus('current')
stgNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortState.setStatus('current')
stgNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPriority.setStatus('current')
stgNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPathCost.setStatus('current')
stgNewCfgPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortLink.setStatus('current')
stgNewCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortEdge.setStatus('current')
pmCurCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPortMirrState.setStatus('current')
pmNewCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgPortMirrState.setStatus('current')
pmCurCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3), )
if mibBuilder.loadTexts: pmCurCfgPortMonitorTable.setStatus('current')
pmCurCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "pmCurCfgPmirrMoniPortIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "pmCurCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmCurCfgPortMonitorEntry.setStatus('current')
pmCurCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMoniPortIndex.setStatus('current')
pmCurCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMirrPortIndex.setStatus('current')
pmCurCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrDirection.setStatus('current')
pmCurCfgPmirrPortVlansBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrPortVlansBmap.setStatus('current')
pmNewCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4), )
if mibBuilder.loadTexts: pmNewCfgPortMonitorTable.setStatus('current')
pmNewCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "pmNewCfgPmirrMoniPortIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "pmNewCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmNewCfgPortMonitorEntry.setStatus('current')
pmNewCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMoniPortIndex.setStatus('current')
pmNewCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMirrPortIndex.setStatus('current')
pmNewCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDirection.setStatus('current')
pmNewCfgPmirrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDelete.setStatus('current')
pmNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgAddVlan.setStatus('current')
pmNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgRemoveVlan.setStatus('current')
pmNewCfgPmirrPortVlansBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrPortVlansBmap.setStatus('current')
mstCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgState.setStatus('current')
mstNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgState.setStatus('current')
mstCurCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionName.setStatus('current')
mstNewCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionName.setStatus('current')
mstCurCfgRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionVersion.setStatus('current')
mstNewCfgRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionVersion.setStatus('current')
mstCurCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgMaxHopCount.setStatus('current')
mstNewCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgMaxHopCount.setStatus('current')
mstCurCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgStpMode.setStatus('current')
mstNewCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgStpMode.setStatus('current')
mstCistDefaultCfg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistDefaultCfg.setStatus('current')
mstCistBridgeCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2))
mstCistCurCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgePriority.setStatus('current')
mstCistNewCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgePriority.setStatus('current')
mstCistCurCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeMaxAge.setStatus('current')
mstCistNewCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeMaxAge.setStatus('current')
mstCistCurCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeForwardDelay.setStatus('current')
mstCistNewCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeForwardDelay.setStatus('current')
mstCistCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3), )
if mibBuilder.loadTexts: mstCistCurCfgPortTable.setStatus('current')
mstCistCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "mstCistCurCfgPortIndex"))
if mibBuilder.loadTexts: mstCistCurCfgPortTableEntry.setStatus('current')
mstCistCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortIndex.setStatus('current')
mstCistCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPriority.setStatus('current')
mstCistCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPathCost.setStatus('current')
mstCistCurCfgPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortLinkType.setStatus('current')
mstCistCurCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortEdge.setStatus('current')
mstCistCurCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortStpState.setStatus('current')
mstCistCurCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortHelloTime.setStatus('current')
mstCistNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4), )
if mibBuilder.loadTexts: mstCistNewCfgPortTable.setStatus('current')
mstCistNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "mstCistNewCfgPortIndex"))
if mibBuilder.loadTexts: mstCistNewCfgPortTableEntry.setStatus('current')
mstCistNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistNewCfgPortIndex.setStatus('current')
mstCistNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortPriority.setStatus('current')
mstCistNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortPathCost.setStatus('current')
mstCistNewCfgPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortLinkType.setStatus('current')
mstCistNewCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortEdge.setStatus('current')
mstCistNewCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortStpState.setStatus('current')
mstCistNewCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortHelloTime.setStatus('current')
portTeamTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamTableMaxSize.setStatus('current')
portTeamCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2), )
if mibBuilder.loadTexts: portTeamCurCfgTable.setStatus('current')
portTeamCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "portTeamCurCfgIndex"))
if mibBuilder.loadTexts: portTeamCurCfgTableEntry.setStatus('current')
portTeamCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamCurCfgIndex.setStatus('current')
portTeamCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamCurCfgState.setStatus('current')
portTeamCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamCurCfgPorts.setStatus('current')
portTeamCurCfgTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamCurCfgTrunks.setStatus('current')
portTeamNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3), )
if mibBuilder.loadTexts: portTeamNewCfgTable.setStatus('current')
portTeamNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "portTeamNewCfgIndex"))
if mibBuilder.loadTexts: portTeamNewCfgTableEntry.setStatus('current')
portTeamNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamNewCfgIndex.setStatus('current')
portTeamNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgState.setStatus('current')
portTeamNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamNewCfgPorts.setStatus('current')
portTeamNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgAddPort.setStatus('current')
portTeamNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgRemovePort.setStatus('current')
portTeamNewCfgTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamNewCfgTrunks.setStatus('current')
portTeamNewCfgAddTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgAddTrunk.setStatus('current')
portTeamNewCfgRemoveTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgRemoveTrunk.setStatus('current')
portTeamNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgDelete.setStatus('current')
portTeamInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1), )
if mibBuilder.loadTexts: portTeamInfoTable.setStatus('current')
portTeamInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "portTeamInfoIndex"))
if mibBuilder.loadTexts: portTeamInfoTableEntry.setStatus('current')
portTeamInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoIndex.setStatus('current')
portTeamInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("passive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoState.setStatus('current')
portTeamInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoPorts.setStatus('current')
portTeamInfoPortsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoPortsState.setStatus('current')
portTeamInfoTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoTrunks.setStatus('current')
portTeamInfoTrunksState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoTrunksState.setStatus('current')
fdbStatsCreates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsCreates.setStatus('current')
fdbStatsDeletes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsDeletes.setStatus('current')
fdbStatsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsCurrent.setStatus('current')
fdbStatsHiwat = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsHiwat.setStatus('current')
fdbStatsLookups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsLookups.setStatus('current')
fdbStatsLookupFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsLookupFails.setStatus('current')
fdbStatsFinds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFinds.setStatus('current')
fdbStatsFindFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFindFails.setStatus('current')
fdbStatsFindOrCreates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFindOrCreates.setStatus('current')
fdbStatsOverflows = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsOverflows.setStatus('current')
stgStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1), )
if mibBuilder.loadTexts: stgStatsPortTable.setStatus('current')
stgStatsPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stgStatsStpIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "stgStatsPortIndex"))
if mibBuilder.loadTexts: stgStatsPortTableEntry.setStatus('current')
stgStatsStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsStpIndex.setStatus('current')
stgStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortIndex.setStatus('current')
stgStatsPortRcvCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvCfgBpdus.setStatus('current')
stgStatsPortRcvTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvTcnBpdus.setStatus('current')
stgStatsPortXmtCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtCfgBpdus.setStatus('current')
stgStatsPortXmtTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtTcnBpdus.setStatus('current')
fdbClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbClear.setStatus('current')
fdbTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2), )
if mibBuilder.loadTexts: fdbTable.setStatus('current')
fdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "fdbMacAddr"))
if mibBuilder.loadTexts: fdbEntry.setStatus('current')
fdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacAddr.setStatus('current')
fdbVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbVlan.setStatus('current')
fdbSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcPort.setStatus('current')
fdbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("ignore", 2), ("forward", 3), ("flood", 4), ("ffd", 5), ("trunk", 6), ("vir", 7), ("vsr", 8), ("vpr", 9), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbState.setStatus('current')
fdbRefSps = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbRefSps.setStatus('current')
fdbLearnedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbLearnedPort.setStatus('current')
fdbSrcTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcTrunk.setStatus('current')
stpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1), )
if mibBuilder.loadTexts: stpInfoTable.setStatus('current')
stpInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stpInfoIndex"))
if mibBuilder.loadTexts: stpInfoTableEntry.setStatus('current')
stpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoIndex.setStatus('current')
stpInfoTimeSinceTopChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTimeSinceTopChange.setStatus('current')
stpInfoTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTopChanges.setStatus('current')
stpInfoDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoDesignatedRoot.setStatus('current')
stpInfoRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootCost.setStatus('current')
stpInfoRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootPort.setStatus('current')
stpInfoMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoMaxAge.setStatus('current')
stpInfoHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHelloTime.setStatus('current')
stpInfoForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoForwardDelay.setStatus('current')
stpInfoHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHoldTime.setStatus('current')
stpInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2), )
if mibBuilder.loadTexts: stpInfoPortTable.setStatus('current')
stpInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stpInfoPortStpIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "stpInfoPortIndex"))
if mibBuilder.loadTexts: stpInfoPortTableEntry.setStatus('current')
stpInfoPortStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortStpIndex.setStatus('current')
stpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortIndex.setStatus('current')
stpInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("discarding", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortState.setStatus('current')
stpInfoPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedRoot.setStatus('current')
stpInfoPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedCost.setStatus('current')
stpInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedBridge.setStatus('current')
stpInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedPort.setStatus('current')
stpInfoPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortForwardTransitions.setStatus('current')
stpInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortPathCost.setStatus('current')
stpInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortRole.setStatus('current')
stpInfoPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("shared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortLinkType.setStatus('current')
stpInfoPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortEdge.setStatus('current')
lacpInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1), )
if mibBuilder.loadTexts: lacpInfoPortTable.setStatus('current')
lacpInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "lacpInfoPortIndex"))
if mibBuilder.loadTexts: lacpInfoPortTableEntry.setStatus('current')
lacpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortIndex.setStatus('current')
lacpInfoPortSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selected", 1), ("unselected", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortSelected.setStatus('current')
lacpInfoPortNtt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortNtt.setStatus('current')
lacpInfoPortReadyN = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortReadyN.setStatus('current')
lacpInfoPortMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortMoved.setStatus('current')
cistRoot = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 1), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRoot.setStatus('current')
cistRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPathCost.setStatus('current')
cistRootPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPort.setStatus('current')
cistBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeHelloTime.setStatus('current')
cistBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeMaxAge.setStatus('current')
cistBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeForwardDelay.setStatus('current')
cistRegionalRoot = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalRoot.setStatus('current')
cistRegionalPathCost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalPathCost.setStatus('current')
cistInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2), )
if mibBuilder.loadTexts: cistInfoPortTable.setStatus('current')
cistInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "cistInfoPortIndex"))
if mibBuilder.loadTexts: cistInfoPortTableEntry.setStatus('current')
cistInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortIndex.setStatus('current')
cistInfoPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPriority.setStatus('current')
cistInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPathCost.setStatus('current')
cistInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortState.setStatus('current')
cistInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortRole.setStatus('current')
cistInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedBridge.setStatus('current')
cistInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedPort.setStatus('current')
cistInfoPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("shared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortLinkType.setStatus('current')
vlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1), )
if mibBuilder.loadTexts: vlanInfoTable.setStatus('current')
vlanInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "vlanInfoId"))
if mibBuilder.loadTexts: vlanInfoTableEntry.setStatus('current')
vlanInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoId.setStatus('current')
vlanInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoName.setStatus('current')
vlanInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoStatus.setStatus('current')
vlanInfoJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoJumbo.setStatus('current')
vlanInfoBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoBwmContract.setStatus('current')
vlanInfoLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoLearn.setStatus('current')
vlanInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoPorts.setStatus('current')
mibBuilder.exportSymbols("ALTEON-CS-PHYSICAL-MIB", lacpNewPortCfgTableId=lacpNewPortCfgTableId, stpStats=stpStats, stgNewCfgBrgHelloTime=stgNewCfgBrgHelloTime, stgCurCfgBrgForwardDelay=stgCurCfgBrgForwardDelay, mstCistNewCfgPortHelloTime=mstCistNewCfgPortHelloTime, lacpCurPortCfgTable=lacpCurPortCfgTable, vlanInfoBwmContract=vlanInfoBwmContract, mstCurCfgStpMode=mstCurCfgStpMode, stpInfoForwardDelay=stpInfoForwardDelay, PYSNMP_MODULE_ID=layer2, vlanCurCfgJumbo=vlanCurCfgJumbo, pmCurCfgPmirrDirection=pmCurCfgPmirrDirection, vlanInfoPorts=vlanInfoPorts, vlanNewCfgTable=vlanNewCfgTable, mstCistNewCfgPortLinkType=mstCistNewCfgPortLinkType, mstCistCurCfgPortStpState=mstCistCurCfgPortStpState, portTeamNewCfgAddPort=portTeamNewCfgAddPort, stgNewCfgBrgForwardDelay=stgNewCfgBrgForwardDelay, fdbStatsLookups=fdbStatsLookups, stgCurCfgAgingTime=stgCurCfgAgingTime, fdbEntry=fdbEntry, vlanInfoJumbo=vlanInfoJumbo, stpInfoHelloTime=stpInfoHelloTime, cistInfoPortIndex=cistInfoPortIndex, mstCistNewCfgPortPriority=mstCistNewCfgPortPriority, lacpCurPortActorAdminKey=lacpCurPortActorAdminKey, cistInfoPortTable=cistInfoPortTable, mstCistCurCfgBridgeMaxAge=mstCistCurCfgBridgeMaxAge, stgStatsPortTable=stgStatsPortTable, pmNewCfgPortMirrState=pmNewCfgPortMirrState, stgNewCfgBrgMaxAge=stgNewCfgBrgMaxAge, stgStatsPortRcvCfgBpdus=stgStatsPortRcvCfgBpdus, vlanInfoName=vlanInfoName, lacpCurSystemPriority=lacpCurSystemPriority, layer2Stats=layer2Stats, stgNewCfgAddVlan=stgNewCfgAddVlan, stgNewCfgRemoveVlan=stgNewCfgRemoveVlan, mstCistCurCfgPortHelloTime=mstCistCurCfgPortHelloTime, vlanInfoId=vlanInfoId, stgCurCfgBrgMaxAge=stgCurCfgBrgMaxAge, cistInfoPortPathCost=cistInfoPortPathCost, stgNewCfgPriority=stgNewCfgPriority, vlanNewCfgVlanName=vlanNewCfgVlanName, mstNewCfgMaxHopCount=mstNewCfgMaxHopCount, stgStatsPortTableEntry=stgStatsPortTableEntry, fdbState=fdbState, lacpNewPortCfgTable=lacpNewPortCfgTable, trunkGroupCurCfgTableEntry=trunkGroupCurCfgTableEntry, mstCistNewCfgPortEdge=mstCistNewCfgPortEdge, stpInfoPortEdge=stpInfoPortEdge, stgStatsPortXmtTcnBpdus=stgStatsPortXmtTcnBpdus, trunkGroupCurCfgState=trunkGroupCurCfgState, mstGeneralCfg=mstGeneralCfg, stgNewCfgDefaultCfg=stgNewCfgDefaultCfg, fdbMacAddr=fdbMacAddr, portTeamCurCfgTrunks=portTeamCurCfgTrunks, portTeamInfoState=portTeamInfoState, mstCistCurCfgPortTableEntry=mstCistCurCfgPortTableEntry, portTeamNewCfgAddTrunk=portTeamNewCfgAddTrunk, stgNewCfgPortLink=stgNewCfgPortLink, BridgeId=BridgeId, vlanMaxEnt=vlanMaxEnt, pmCurCfgPortMonitorTable=pmCurCfgPortMonitorTable, stgCurCfgIndex=stgCurCfgIndex, mstCistNewCfgBridgePriority=mstCistNewCfgBridgePriority, trunkGroupNewCfgPorts=trunkGroupNewCfgPorts, mstCistNewCfgPortIndex=mstCistNewCfgPortIndex, mstCistNewCfgPortStpState=mstCistNewCfgPortStpState, vlanCurCfgTable=vlanCurCfgTable, stpInfoPortPathCost=stpInfoPortPathCost, stpInfoPortLinkType=stpInfoPortLinkType, fdbLearnedPort=fdbLearnedPort, stgStatsPortXmtCfgBpdus=stgStatsPortXmtCfgBpdus, cistBridgeMaxAge=cistBridgeMaxAge, fdbClear=fdbClear, fdbStatsDeletes=fdbStatsDeletes, stpInfoTableEntry=stpInfoTableEntry, trunkGroupCurCfgPorts=trunkGroupCurCfgPorts, layer2=layer2, lacpNewPortCfgTableEntry=lacpNewPortCfgTableEntry, mstCistCurCfgPortEdge=mstCistCurCfgPortEdge, portTeamCurCfgTableEntry=portTeamCurCfgTableEntry, pmNewCfgPmirrDirection=pmNewCfgPmirrDirection, mstNewCfgRegionVersion=mstNewCfgRegionVersion, stgCurCfgPortPriority=stgCurCfgPortPriority, pmCurCfgPortMonitorEntry=pmCurCfgPortMonitorEntry, vlan=vlan, mstNewCfgStpMode=mstNewCfgStpMode, portTeamNewCfgTableEntry=portTeamNewCfgTableEntry, vlanInfo=vlanInfo, portTeamNewCfgTrunks=portTeamNewCfgTrunks, lacpInfo=lacpInfo, mstNewCfgState=mstNewCfgState, stgStatsPortRcvTcnBpdus=stgStatsPortRcvTcnBpdus, portTeamNewCfgRemovePort=portTeamNewCfgRemovePort, portTeamCurCfgIndex=portTeamCurCfgIndex, mstCistDefaultCfg=mstCistDefaultCfg, stpInfoPortForwardTransitions=stpInfoPortForwardTransitions, portTeamInfoPortsState=portTeamInfoPortsState, mstCistCurCfgPortPriority=mstCistCurCfgPortPriority, portTeamInfoTrunksState=portTeamInfoTrunksState, stpInfoRootPort=stpInfoRootPort, portTeamNewCfgPorts=portTeamNewCfgPorts, pmCurCfgPortMirrState=pmCurCfgPortMirrState, vlanInfoTable=vlanInfoTable, stpInfo=stpInfo, lacpCurPortCfgTableEntry=lacpCurPortCfgTableEntry, stgNewCfgTable=stgNewCfgTable, stgCfg=stgCfg, stgNewCfgPortTable=stgNewCfgPortTable, mstCistNewCfgPortTableEntry=mstCistNewCfgPortTableEntry, portTeamInfoTrunks=portTeamInfoTrunks, fdbVlan=fdbVlan, vlanMaxVlanID=vlanMaxVlanID, portTeamNewCfgState=portTeamNewCfgState, cistInfoPortLinkType=cistInfoPortLinkType, stgNewCfgPortTableEntry=stgNewCfgPortTableEntry, lacpCurSystemTimeoutTime=lacpCurSystemTimeoutTime, stpInfoTable=stpInfoTable, stpInfoHoldTime=stpInfoHoldTime, stgNewCfgAgingTime=stgNewCfgAgingTime, mstCistNewCfgBridgeForwardDelay=mstCistNewCfgBridgeForwardDelay, stgCurCfgBrgHelloTime=stgCurCfgBrgHelloTime, mstNewCfgRegionName=mstNewCfgRegionName, stgCurCfgTable=stgCurCfgTable, fdbStatsOverflows=fdbStatsOverflows, stpInfoIndex=stpInfoIndex, stgNewCfgTableEntry=stgNewCfgTableEntry, vlanNewCfgLearn=vlanNewCfgLearn, mstCfg=mstCfg, mstCistCurCfgPortPathCost=mstCistCurCfgPortPathCost, lacpInfoPortNtt=lacpInfoPortNtt, portTeamTableMaxSize=portTeamTableMaxSize, mstCistBridgeCfg=mstCistBridgeCfg, stgCurCfgPortIndex=stgCurCfgPortIndex, vlanNewCfgJumbo=vlanNewCfgJumbo, fdbStatsFindOrCreates=fdbStatsFindOrCreates, mstCistCurCfgBridgeForwardDelay=mstCistCurCfgBridgeForwardDelay, stgNewCfgStgIndex=stgNewCfgStgIndex, pmNewCfgPmirrDelete=pmNewCfgPmirrDelete, portTeamInfo=portTeamInfo, portTeamNewCfgTable=portTeamNewCfgTable, portTeamInfoIndex=portTeamInfoIndex, cistInfo=cistInfo, stpInfoTopChanges=stpInfoTopChanges, stgCurCfgPortTable=stgCurCfgPortTable, pmNewCfgPortMonitorTable=pmNewCfgPortMonitorTable, vlanCurCfgStg=vlanCurCfgStg, vlanNewCfgTableEntry=vlanNewCfgTableEntry, mstCistCurCfgBridgePriority=mstCistCurCfgBridgePriority, pmNewCfgPmirrMirrPortIndex=pmNewCfgPmirrMirrPortIndex, mstCurCfgState=mstCurCfgState, trunkGroupNewCfgIndex=trunkGroupNewCfgIndex, lacpInfoPortSelected=lacpInfoPortSelected, vlanNewCfgStg=vlanNewCfgStg, fdbSrcPort=fdbSrcPort, lacpInfoPortTable=lacpInfoPortTable, trunkGroupCurCfgIndex=trunkGroupCurCfgIndex, vlanNewCfgPorts=vlanNewCfgPorts, portTeamCurCfgTable=portTeamCurCfgTable, cistRegionalRoot=cistRegionalRoot, lacpCurPortState=lacpCurPortState, pmNewCfgPmirrPortVlansBmap=pmNewCfgPmirrPortVlansBmap, vlanCurCfgTableEntry=vlanCurCfgTableEntry, fdbStatsFindFails=fdbStatsFindFails, portTeamNewCfgDelete=portTeamNewCfgDelete, stgStatsPortIndex=stgStatsPortIndex, stgCurCfgVlanBmap=stgCurCfgVlanBmap, fdbStatsFinds=fdbStatsFinds, stpInfoPortTable=stpInfoPortTable, layer2Configs=layer2Configs, trunkGroupCurCfgBwmContract=trunkGroupCurCfgBwmContract, vlanNewCfgDelete=vlanNewCfgDelete, stpInfoRootCost=stpInfoRootCost, trunkGroupNewCfgDelete=trunkGroupNewCfgDelete, trunkGroupTableMaxSize=trunkGroupTableMaxSize, pmCurCfgPmirrMirrPortIndex=pmCurCfgPmirrMirrPortIndex, stgNewCfgPortEdge=stgNewCfgPortEdge, fdbStats=fdbStats, stgNewCfgVlanBmap=stgNewCfgVlanBmap, fdbStatsLookupFails=fdbStatsLookupFails, portTeamCurCfgState=portTeamCurCfgState, stgCurCfgPortPathCost=stgCurCfgPortPathCost, layer2Oper=layer2Oper, vlanCurCfgPorts=vlanCurCfgPorts, trunkGroupNewCfgRemovePort=trunkGroupNewCfgRemovePort, stgNewCfgPortIndex=stgNewCfgPortIndex, stgNewCfgPortState=stgNewCfgPortState, stgCurCfgState=stgCurCfgState, fdbTable=fdbTable, fdbRefSps=fdbRefSps, stpInfoPortState=stpInfoPortState, mstCurCfgRegionName=mstCurCfgRegionName, cistRootPathCost=cistRootPathCost, stgCurCfgTableEntry=stgCurCfgTableEntry, lacpInfoPortReadyN=lacpInfoPortReadyN, mirroring=mirroring, lacpNewPortActorPortPriority=lacpNewPortActorPortPriority, stgNewCfgState=stgNewCfgState, mstCistNewCfgPortPathCost=mstCistNewCfgPortPathCost, mstCistCurCfgPortIndex=mstCistCurCfgPortIndex, portTeamInfoTableEntry=portTeamInfoTableEntry, lacpInfoPortIndex=lacpInfoPortIndex, stgNewCfgPortPriority=stgNewCfgPortPriority, mirrPortMirr=mirrPortMirr, cistInfoPortTableEntry=cistInfoPortTableEntry, stpInfoPortIndex=stpInfoPortIndex, stpInfoPortRole=stpInfoPortRole, pmNewCfgRemoveVlan=pmNewCfgRemoveVlan, stgStatsStpIndex=stgStatsStpIndex, portTeamInfoTable=portTeamInfoTable, stpInfoPortDesignatedRoot=stpInfoPortDesignatedRoot, stpInfoPortDesignatedPort=stpInfoPortDesignatedPort, vlanCurCfgBwmContract=vlanCurCfgBwmContract, portTeamCfg=portTeamCfg, stgCurCfgPortEdge=stgCurCfgPortEdge, trunkGroupCurCfgTable=trunkGroupCurCfgTable, stpInfoDesignatedRoot=stpInfoDesignatedRoot, mstCistCfg=mstCistCfg, lacpCurPortActorPortPriority=lacpCurPortActorPortPriority, stpInfoPortDesignatedCost=stpInfoPortDesignatedCost, pmNewCfgPmirrMoniPortIndex=pmNewCfgPmirrMoniPortIndex, portTeamNewCfgRemoveTrunk=portTeamNewCfgRemoveTrunk, stpInfoPortTableEntry=stpInfoPortTableEntry, cistBridgeHelloTime=cistBridgeHelloTime, stpInfoTimeSinceTopChange=stpInfoTimeSinceTopChange, vlanNewCfgVlanId=vlanNewCfgVlanId, cistInfoPortDesignatedPort=cistInfoPortDesignatedPort, vlanCurCfgVlanName=vlanCurCfgVlanName, pmNewCfgAddVlan=pmNewCfgAddVlan, cistRegionalPathCost=cistRegionalPathCost, lacpNewSystemTimeoutTime=lacpNewSystemTimeoutTime, cistInfoPortState=cistInfoPortState, stgNewCfgIndex=stgNewCfgIndex, fdbStatsCurrent=fdbStatsCurrent, lacp=lacp, mstCistNewCfgPortTable=mstCistNewCfgPortTable, pmNewCfgPortMonitorEntry=pmNewCfgPortMonitorEntry, trunkGroupNewCfgTableEntry=trunkGroupNewCfgTableEntry, portTeamCurCfgPorts=portTeamCurCfgPorts, vlanNewCfgAddPort=vlanNewCfgAddPort, lacpNewPortActorAdminKey=lacpNewPortActorAdminKey, vlanNewCfgBwmContract=vlanNewCfgBwmContract, portTeamNewCfgIndex=portTeamNewCfgIndex, portTeamInfoPorts=portTeamInfoPorts, stpInfoPortDesignatedBridge=stpInfoPortDesignatedBridge, mstCistNewCfgBridgeMaxAge=mstCistNewCfgBridgeMaxAge, lacpInfoPortTableEntry=lacpInfoPortTableEntry, cistInfoPortPriority=cistInfoPortPriority, trunkGroupNewCfgAddPort=trunkGroupNewCfgAddPort, trunkGroupNewCfgTable=trunkGroupNewCfgTable, stgCurCfgPortLink=stgCurCfgPortLink, vlanCurCfgVlanId=vlanCurCfgVlanId, stgCurCfgPriority=stgCurCfgPriority)
mibBuilder.exportSymbols("ALTEON-CS-PHYSICAL-MIB", mstCistCurCfgPortLinkType=mstCistCurCfgPortLinkType, pmCurCfgPmirrPortVlansBmap=pmCurCfgPmirrPortVlansBmap, fdbStatsCreates=fdbStatsCreates, vlanInfoLearn=vlanInfoLearn, mstCurCfgRegionVersion=mstCurCfgRegionVersion, mstCurCfgMaxHopCount=mstCurCfgMaxHopCount, trunkGroupNewCfgBwmContract=trunkGroupNewCfgBwmContract, stgNewCfgPortPathCost=stgNewCfgPortPathCost, fdbInfo=fdbInfo, fdbSrcTrunk=fdbSrcTrunk, cistGeneralInfo=cistGeneralInfo, vlanInfoStatus=vlanInfoStatus, cistRoot=cistRoot, vlanNewCfgRemovePort=vlanNewCfgRemovePort, cistInfoPortDesignatedBridge=cistInfoPortDesignatedBridge, trunkGroupNewCfgState=trunkGroupNewCfgState, fdbStatsHiwat=fdbStatsHiwat, vlanInfoTableEntry=vlanInfoTableEntry, trunkgroup=trunkgroup, vlanNewCfgState=vlanNewCfgState, vlanCurCfgLearn=vlanCurCfgLearn, lacpCurPortCfgTableId=lacpCurPortCfgTableId, mstCistCurCfgPortTable=mstCistCurCfgPortTable, stpInfoMaxAge=stpInfoMaxAge, lacpNewPortState=lacpNewPortState, lacpInfoPortMoved=lacpInfoPortMoved, cistRootPort=cistRootPort, vlanCurCfgState=vlanCurCfgState, pmCurCfgPmirrMoniPortIndex=pmCurCfgPmirrMoniPortIndex, cistInfoPortRole=cistInfoPortRole, layer2Info=layer2Info, stpInfoPortStpIndex=stpInfoPortStpIndex, lacpNewSystemPriority=lacpNewSystemPriority, stgCurCfgPortState=stgCurCfgPortState, stgCurCfgStgIndex=stgCurCfgStgIndex, stgCurCfgPortTableEntry=stgCurCfgPortTableEntry, cistBridgeForwardDelay=cistBridgeForwardDelay)
