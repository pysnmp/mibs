#
# PySNMP MIB module RS-XX9-DAB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-DAB-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 11:45:00 2024
# On host fv-az842-370 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9MibModule, rsXx9Dab = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9MibModule", "rsXx9Dab")
NotificationState, IndexAB, NotificationMask, NotificationPriority, IndexTransmitter = mibBuilder.importSymbols("RS-XX9-TC-MIB", "NotificationState", "IndexAB", "NotificationMask", "NotificationPriority", "IndexTransmitter")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, TimeTicks, Counter64, Bits, iso, Unsigned32, NotificationType, ModuleIdentity, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "TimeTicks", "Counter64", "Bits", "iso", "Unsigned32", "NotificationType", "ModuleIdentity", "IpAddress", "ObjectIdentity")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
rsXx9DabMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 1))
rsXx9DabMibModule.setRevisions(('2016-03-23 09:00', '2015-11-30 15:00', '2015-02-27 15:00', '2015-02-02 18:00', '2014-12-22 16:00', '2014-09-30 13:00', '2014-06-03 12:00', '2014-05-16 15:00', '2014-03-06 16:00', '2013-12-20 10:00', '2013-10-10 14:00', '2013-10-01 10:00', '2013-03-13 10:00',))
if mibBuilder.loadTexts: rsXx9DabMibModule.setLastUpdated('201603230900Z')
if mibBuilder.loadTexts: rsXx9DabMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
class DabTiiSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("manual", 2), ("etiMNSC", 3))

class DabMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("modeI", 1), ("modeII", 2), ("modeIII", 3), ("modeIV", 4))

class DabModeSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("manual", 1), ("etiMID", 2))

class NetworkCompensationDelay(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 1000000)

class ErrorLevelState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 1), ("off", 2), ("noSignal", 3), ("tooHigh", 4), ("ok", 5))

class DatarateState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 1), ("off", 2), ("bufferUnderrun", 3), ("bufferOverflow", 4), ("ok", 5))

rsXx9DabNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0))
dabTiiMainIdOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DAB-MIB", "dabStatusNotificationPriority"), ("RS-XX9-DAB-MIB", "dabStatusNotificationState"))
if mibBuilder.loadTexts: dabTiiMainIdOutOfRange.setStatus('current')
dabEncoderSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DAB-MIB", "dabStatusNotificationPriority"), ("RS-XX9-DAB-MIB", "dabStatusNotificationState"))
if mibBuilder.loadTexts: dabEncoderSummary.setStatus('current')
dabTest = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DAB-MIB", "dabStatusNotificationPriority"), ("RS-XX9-DAB-MIB", "dabStatusNotificationState"))
if mibBuilder.loadTexts: dabTest.setStatus('current')
dabInpIfEtiState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0, 4)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DAB-MIB", "dabInputNotificationPriority"), ("RS-XX9-DAB-MIB", "dabInputNotificationState"))
if mibBuilder.loadTexts: dabInpIfEtiState.setStatus('current')
dabInpIfEdiState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0, 5)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DAB-MIB", "dabInputNotificationPriority"), ("RS-XX9-DAB-MIB", "dabInputNotificationState"))
if mibBuilder.loadTexts: dabInpIfEdiState.setStatus('current')
rsXx9DabObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1))
dabInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1))
dabInputCommonTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1), )
if mibBuilder.loadTexts: dabInputCommonTable.setStatus('current')
dabInputCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabInputCmnTxIdx"), (0, "RS-XX9-DAB-MIB", "dabInputCmnExcIdx"))
if mibBuilder.loadTexts: dabInputCommonEntry.setStatus('current')
dabInputCmnTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dabInputCmnTxIdx.setStatus('current')
dabInputCmnExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dabInputCmnExcIdx.setStatus('current')
dabInputCmnImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ohm75", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputCmnImpedance.setStatus('current')
dabInputCmnEdiDejitterBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setUnits('frames').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputCmnEdiDejitterBuffer.setStatus('current')
dabInputCmnEdiMaxReplacements = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('frames').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputCmnEdiMaxReplacements.setStatus('current')
dabInputEtiTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2), )
if mibBuilder.loadTexts: dabInputEtiTable.setStatus('current')
dabInputEtiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabInputCmnTxIdx"), (0, "RS-XX9-DAB-MIB", "dabInputCmnExcIdx"), (0, "RS-XX9-DAB-MIB", "dabInputEtiInputIdx"))
if mibBuilder.loadTexts: dabInputEtiEntry.setStatus('current')
dabInputEtiInputIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input1", 1), ("input2", 2))))
if mibBuilder.loadTexts: dabInputEtiInputIdx.setStatus('current')
dabInputEtiSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("undefined", 1), ("noSignal", 2), ("ais", 3), ("g703", 4), ("g704", 5), ("niG703", 6), ("na5592", 7), ("na5376", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEtiSyncState.setStatus('current')
dabInputEtiDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1, 3), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEtiDatarate.setStatus('current')
dabInputEtiDatarateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1, 4), DatarateState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEtiDatarateState.setStatus('current')
dabInputEtiErrorLevelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1, 5), ErrorLevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEtiErrorLevelState.setStatus('current')
dabInputNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3), )
if mibBuilder.loadTexts: dabInputNotificationTable.setStatus('current')
dabInputNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabInputNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabInputNotificationExcIdx"), (0, "RS-XX9-DAB-MIB", "dabInputNotificationInputIdx"), (0, "RS-XX9-DAB-MIB", "dabInputNotificationIdx"))
if mibBuilder.loadTexts: dabInputNotificationEntry.setStatus('current')
dabInputNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dabInputNotificationTxIdx.setStatus('current')
dabInputNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 2), IndexAB())
if mibBuilder.loadTexts: dabInputNotificationExcIdx.setStatus('current')
dabInputNotificationInputIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input1", 1), ("input2", 2))))
if mibBuilder.loadTexts: dabInputNotificationInputIdx.setStatus('current')
dabInputNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 5)))
if mibBuilder.loadTexts: dabInputNotificationIdx.setStatus('current')
dabInputNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("dabInpIfEtiState", 4), ("dabInpIfEdiState", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputNotificationName.setStatus('current')
dabInputNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 6), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputNotificationMask.setStatus('current')
dabInputNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 7), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputNotificationPriority.setStatus('current')
dabInputNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 8), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputNotificationState.setStatus('current')
dabInputEdiTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4), )
if mibBuilder.loadTexts: dabInputEdiTable.setStatus('current')
dabInputEdiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabInputCmnTxIdx"), (0, "RS-XX9-DAB-MIB", "dabInputCmnExcIdx"), (0, "RS-XX9-DAB-MIB", "dabInputNotificationInputIdx"))
if mibBuilder.loadTexts: dabInputEdiEntry.setStatus('current')
dabInputEdiSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 8, 9))).clone(namedValues=NamedValues(("undefined", 0), ("noSignal", 1), ("stiDLi", 8), ("etiNi", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiSyncState.setStatus('current')
dabInputEdiDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 2), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiDatarate.setStatus('current')
dabInputEdiDatarateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 3), DatarateState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiDatarateState.setStatus('current')
dabInputEdiConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tsLan1", 1), ("tsLan2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputEdiConnector.setStatus('current')
dabInputEdiStreamingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniCast", 1), ("multiCast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputEdiStreamingMode.setStatus('current')
dabInputEdiStreamAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiStreamAddressType.setStatus('current')
dabInputEdiStreamAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputEdiStreamAddress.setStatus('current')
dabInputEdiStreamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputEdiStreamPort.setStatus('current')
dabInputEdiErrorLevelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 9), ErrorLevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiErrorLevelState.setStatus('current')
dabInputEdiReplacementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("noInput", 2), ("unused", 3), ("replacedFrames", 4), ("ok", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputEdiReplacementStatus.setStatus('current')
dabInputEdiFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("undefined", 1), ("off", 2), ("mode1", 3), ("mode2", 4), ("mode3", 5), ("mode4", 6), ("mode5", 7), ("mode6OrHigher", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiFecMode.setStatus('current')
dabStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2))
dabStatusNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1), )
if mibBuilder.loadTexts: dabStatusNotificationTable.setStatus('current')
dabStatusNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationIdx"))
if mibBuilder.loadTexts: dabStatusNotificationEntry.setStatus('current')
dabStatusNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dabStatusNotificationTxIdx.setStatus('current')
dabStatusNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dabStatusNotificationExcIdx.setStatus('current')
dabStatusNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: dabStatusNotificationIdx.setStatus('current')
dabStatusNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dabTiiMainIdOutOfRange", 1), ("dabEncoderSummary", 2), ("dabTest", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStatusNotificationName.setStatus('current')
dabStatusNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabStatusNotificationMask.setStatus('current')
dabStatusNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabStatusNotificationPriority.setStatus('current')
dabStatusNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStatusNotificationState.setStatus('current')
dabActiveConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 2), )
if mibBuilder.loadTexts: dabActiveConfigurationTable.setStatus('current')
dabActiveConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 2, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dabActiveConfigurationEntry.setStatus('current')
dabActCfgModeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 2, 1, 1), DabModeSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActCfgModeSource.setStatus('current')
dabActiveLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3), )
if mibBuilder.loadTexts: dabActiveLocalizationTable.setStatus('current')
dabActiveLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dabActiveLocalizationEntry.setStatus('current')
dabActLclTxAddressPresentPlain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActLclTxAddressPresentPlain.setStatus('current')
dabActLclTxAddressRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActLclTxAddressRequired.setStatus('current')
dabActLclTxAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("neverSeen", 2), ("holdover", 3), ("ok", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActLclTxAddressState.setStatus('current')
dabActLclTiiSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3, 1, 4), DabTiiSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActLclTiiSource.setStatus('current')
dabActiveModulationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 4), )
if mibBuilder.loadTexts: dabActiveModulationTable.setStatus('current')
dabActiveModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 4, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dabActiveModulationEntry.setStatus('current')
dabActMdlModeEti = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 4, 1, 1), DabMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActMdlModeEti.setStatus('current')
dabActMdlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 4, 1, 2), DabMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActMdlMode.setStatus('current')
dabActiveTiiTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5), )
if mibBuilder.loadTexts: dabActiveTiiTable.setStatus('current')
dabActiveTiiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dabActiveTiiEntry.setStatus('current')
dabActTiiMainIdMnsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActTiiMainIdMnsc.setStatus('current')
dabActTiiSubIdMnsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActTiiSubIdMnsc.setStatus('current')
dabActTiiMainId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActTiiMainId.setStatus('current')
dabActTiiSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActTiiSubId.setStatus('current')
dabStatusSfnTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6), )
if mibBuilder.loadTexts: dabStatusSfnTable.setStatus('current')
dabStatusSfnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dabStatusSfnEntry.setStatus('current')
dabStSfnTxOffsetDelaySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("mnsc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnTxOffsetDelaySource.setStatus('current')
dabStSfnTxOffsetDelayMnsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 2), Unsigned32()).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnTxOffsetDelayMnsc.setStatus('current')
dabStSfnNetworkCompensationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 3), NetworkCompensationDelay()).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnNetworkCompensationDelay.setStatus('current')
dabStSfnTxCompensationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 4), Unsigned32()).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnTxCompensationDelay.setStatus('current')
dabStSfnTxOffsetDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 5), Unsigned32()).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnTxOffsetDelay.setStatus('current')
dabStSfnMfnOverallSignalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnMfnOverallSignalDelay.setStatus('current')
dabStatusSfnInputTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 7), )
if mibBuilder.loadTexts: dabStatusSfnInputTable.setStatus('current')
dabStatusSfnInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 7, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"), (0, "RS-XX9-DAB-MIB", "dabStSfnInputIdx"))
if mibBuilder.loadTexts: dabStatusSfnInputEntry.setStatus('current')
dabStSfnInputIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input1", 1), ("input2", 2))))
if mibBuilder.loadTexts: dabStSfnInputIdx.setStatus('current')
dabStSfnTistState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 1), ("off", 2), ("missingNi", 3), ("missingNa", 4), ("null", 5), ("ok", 6), ("flywheelActive", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnTistState.setStatus('current')
dabStSfnNetworkCompensationDelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 7, 1, 3), NetworkCompensationDelay()).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnNetworkCompensationDelayState.setStatus('current')
dabSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3))
dabConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 1), )
if mibBuilder.loadTexts: dabConfigurationTable.setStatus('current')
dabConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 1, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabConfigurationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabConfigurationExcIdx"))
if mibBuilder.loadTexts: dabConfigurationEntry.setStatus('current')
dabConfigurationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dabConfigurationTxIdx.setStatus('current')
dabConfigurationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dabConfigurationExcIdx.setStatus('current')
dabConfigurationModeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 1, 1, 3), DabModeSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabConfigurationModeSource.setStatus('current')
dabLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 2), )
if mibBuilder.loadTexts: dabLocalizationTable.setStatus('current')
dabLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 2, 1), )
dabConfigurationEntry.registerAugmentions(("RS-XX9-DAB-MIB", "dabLocalizationEntry"))
dabLocalizationEntry.setIndexNames(*dabConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dabLocalizationEntry.setStatus('current')
dabLocalizationTxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabLocalizationTxAddress.setStatus('current')
dabLocalizationTiiSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 2, 1, 2), DabTiiSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabLocalizationTiiSource.setStatus('current')
dabModulationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 3), )
if mibBuilder.loadTexts: dabModulationTable.setStatus('current')
dabModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 3, 1), )
dabConfigurationEntry.registerAugmentions(("RS-XX9-DAB-MIB", "dabModulationEntry"))
dabModulationEntry.setIndexNames(*dabConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dabModulationEntry.setStatus('current')
dabModulationChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("mhz1p5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabModulationChannelBandwidth.setStatus('current')
dabModulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 3, 1, 2), DabMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabModulationMode.setStatus('current')
dabTiiTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 4), )
if mibBuilder.loadTexts: dabTiiTable.setStatus('current')
dabTiiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 4, 1), )
dabConfigurationEntry.registerAugmentions(("RS-XX9-DAB-MIB", "dabTiiEntry"))
dabTiiEntry.setIndexNames(*dabConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dabTiiEntry.setStatus('current')
dabTiiMainId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 69))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTiiMainId.setStatus('current')
dabTiiSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTiiSubId.setStatus('current')
dabTiiCarrierPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("etsi", 1), ("prSymbol", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTiiCarrierPhase.setStatus('current')
dabSetupSfnTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5), )
if mibBuilder.loadTexts: dabSetupSfnTable.setStatus('current')
dabSetupSfnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1), )
dabConfigurationEntry.registerAugmentions(("RS-XX9-DAB-MIB", "dabSetupSfnEntry"))
dabSetupSfnEntry.setIndexNames(*dabConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dabSetupSfnEntry.setStatus('current')
dabSetupSfnSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnSync.setStatus('current')
dabSetupSfnTistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("etiLi", 3), ("etiNa", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnTistSource.setStatus('current')
dabSetupSfnMaxTistLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("level1", 3), ("level2", 4), ("level3", 5), ("level4", 6), ("level5", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnMaxTistLevel.setStatus('current')
dabSetupSfnNetworkCompensationDelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 4), NetworkCompensationDelay()).setUnits('micro second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnNetworkCompensationDelay1.setStatus('current')
dabSetupSfnNetworkCompensationDelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 5), NetworkCompensationDelay()).setUnits('micro second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnNetworkCompensationDelay2.setStatus('current')
dabSetupSfnTxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('micro second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnTxDelay.setStatus('current')
dabSetupSfnTxOffsetDelaySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("mnsc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnTxOffsetDelaySource.setStatus('current')
dabTestTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 6), )
if mibBuilder.loadTexts: dabTestTable.setStatus('current')
dabTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 6, 1), )
dabConfigurationEntry.registerAugmentions(("RS-XX9-DAB-MIB", "dabTestEntry"))
dabTestEntry.setIndexNames(*dabConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dabTestEntry.setStatus('current')
dabTestSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("rohdeSchwarzEnsemble", 2), ("singleCarrier", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTestSignal.setStatus('current')
dabTestRsEnsembleDataChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("prbs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTestRsEnsembleDataChannel.setStatus('current')
dabTestRsEnsemblePrbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("poly1", 1), ("poly2", 2), ("poly3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTestRsEnsemblePrbs.setStatus('current')
rsXx9DabConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2))
rsXx9DabCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 1))
dabBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 1, 1)).setObjects(("RS-XX9-DAB-MIB", "dabObjBasic"), ("RS-XX9-DAB-MIB", "dabNotifyBasic"), ("RS-XX9-DAB-MIB", "dabObjInput"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabBasicCompliance = dabBasicCompliance.setStatus('current')
rsXx9DabGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 2))
dabObjBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 2, 1)).setObjects(("RS-XX9-DAB-MIB", "dabConfigurationModeSource"), ("RS-XX9-DAB-MIB", "dabLocalizationTxAddress"), ("RS-XX9-DAB-MIB", "dabLocalizationTiiSource"), ("RS-XX9-DAB-MIB", "dabTestSignal"), ("RS-XX9-DAB-MIB", "dabTiiSubId"), ("RS-XX9-DAB-MIB", "dabTiiMainId"), ("RS-XX9-DAB-MIB", "dabModulationChannelBandwidth"), ("RS-XX9-DAB-MIB", "dabActCfgModeSource"), ("RS-XX9-DAB-MIB", "dabActLclTxAddressPresentPlain"), ("RS-XX9-DAB-MIB", "dabActLclTxAddressRequired"), ("RS-XX9-DAB-MIB", "dabActLclTiiSource"), ("RS-XX9-DAB-MIB", "dabActMdlMode"), ("RS-XX9-DAB-MIB", "dabActTiiMainIdMnsc"), ("RS-XX9-DAB-MIB", "dabActTiiSubIdMnsc"), ("RS-XX9-DAB-MIB", "dabActTiiMainId"), ("RS-XX9-DAB-MIB", "dabActTiiSubId"), ("RS-XX9-DAB-MIB", "dabActMdlModeEti"), ("RS-XX9-DAB-MIB", "dabActLclTxAddressState"), ("RS-XX9-DAB-MIB", "dabSetupSfnSync"), ("RS-XX9-DAB-MIB", "dabSetupSfnTistSource"), ("RS-XX9-DAB-MIB", "dabSetupSfnMaxTistLevel"), ("RS-XX9-DAB-MIB", "dabSetupSfnNetworkCompensationDelay1"), ("RS-XX9-DAB-MIB", "dabSetupSfnNetworkCompensationDelay2"), ("RS-XX9-DAB-MIB", "dabSetupSfnTxDelay"), ("RS-XX9-DAB-MIB", "dabStSfnTxOffsetDelaySource"), ("RS-XX9-DAB-MIB", "dabStSfnTxOffsetDelayMnsc"), ("RS-XX9-DAB-MIB", "dabStSfnNetworkCompensationDelay"), ("RS-XX9-DAB-MIB", "dabStSfnTxCompensationDelay"), ("RS-XX9-DAB-MIB", "dabStSfnTxOffsetDelay"), ("RS-XX9-DAB-MIB", "dabStSfnTistState"), ("RS-XX9-DAB-MIB", "dabTiiCarrierPhase"), ("RS-XX9-DAB-MIB", "dabSetupSfnTxOffsetDelaySource"), ("RS-XX9-DAB-MIB", "dabStSfnNetworkCompensationDelayState"), ("RS-XX9-DAB-MIB", "dabStSfnMfnOverallSignalDelay"), ("RS-XX9-DAB-MIB", "dabTestRsEnsemblePrbs"), ("RS-XX9-DAB-MIB", "dabTestRsEnsembleDataChannel"), ("RS-XX9-DAB-MIB", "dabModulationMode"), ("RS-XX9-DAB-MIB", "dabStatusNotificationName"), ("RS-XX9-DAB-MIB", "dabStatusNotificationMask"), ("RS-XX9-DAB-MIB", "dabStatusNotificationPriority"), ("RS-XX9-DAB-MIB", "dabStatusNotificationState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabObjBasic = dabObjBasic.setStatus('current')
dabObjInput = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 2, 2)).setObjects(("RS-XX9-DAB-MIB", "dabInputEtiDatarateState"), ("RS-XX9-DAB-MIB", "dabInputEtiDatarate"), ("RS-XX9-DAB-MIB", "dabInputEtiErrorLevelState"), ("RS-XX9-DAB-MIB", "dabInputNotificationState"), ("RS-XX9-DAB-MIB", "dabInputNotificationPriority"), ("RS-XX9-DAB-MIB", "dabInputNotificationMask"), ("RS-XX9-DAB-MIB", "dabInputNotificationName"), ("RS-XX9-DAB-MIB", "dabInputEdiFecMode"), ("RS-XX9-DAB-MIB", "dabInputEdiReplacementStatus"), ("RS-XX9-DAB-MIB", "dabInputEdiErrorLevelState"), ("RS-XX9-DAB-MIB", "dabInputEdiDatarateState"), ("RS-XX9-DAB-MIB", "dabInputEdiStreamPort"), ("RS-XX9-DAB-MIB", "dabInputEdiStreamAddress"), ("RS-XX9-DAB-MIB", "dabInputEdiStreamAddressType"), ("RS-XX9-DAB-MIB", "dabInputEdiStreamingMode"), ("RS-XX9-DAB-MIB", "dabInputEdiConnector"), ("RS-XX9-DAB-MIB", "dabInputEdiDatarate"), ("RS-XX9-DAB-MIB", "dabInputCmnEdiMaxReplacements"), ("RS-XX9-DAB-MIB", "dabInputCmnEdiDejitterBuffer"), ("RS-XX9-DAB-MIB", "dabInputEtiSyncState"), ("RS-XX9-DAB-MIB", "dabInputCmnImpedance"), ("RS-XX9-DAB-MIB", "dabInputEdiSyncState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabObjInput = dabObjInput.setStatus('current')
dabNotifyBasic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 2, 3)).setObjects(("RS-XX9-DAB-MIB", "dabTiiMainIdOutOfRange"), ("RS-XX9-DAB-MIB", "dabEncoderSummary"), ("RS-XX9-DAB-MIB", "dabTest"), ("RS-XX9-DAB-MIB", "dabInpIfEtiState"), ("RS-XX9-DAB-MIB", "dabInpIfEdiState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabNotifyBasic = dabNotifyBasic.setStatus('current')
mibBuilder.exportSymbols("RS-XX9-DAB-MIB", dabNotifyBasic=dabNotifyBasic, dabInputCmnEdiMaxReplacements=dabInputCmnEdiMaxReplacements, ErrorLevelState=ErrorLevelState, dabConfigurationEntry=dabConfigurationEntry, dabTiiMainId=dabTiiMainId, dabInputNotificationExcIdx=dabInputNotificationExcIdx, dabStSfnMfnOverallSignalDelay=dabStSfnMfnOverallSignalDelay, dabConfigurationTxIdx=dabConfigurationTxIdx, dabModulationMode=dabModulationMode, DabTiiSource=DabTiiSource, dabStatusNotificationIdx=dabStatusNotificationIdx, dabActMdlModeEti=dabActMdlModeEti, dabStatusNotificationTxIdx=dabStatusNotificationTxIdx, dabStSfnTistState=dabStSfnTistState, dabActiveLocalizationTable=dabActiveLocalizationTable, dabInputEtiDatarate=dabInputEtiDatarate, dabLocalizationTable=dabLocalizationTable, dabTestRsEnsembleDataChannel=dabTestRsEnsembleDataChannel, dabStatusNotificationState=dabStatusNotificationState, dabSetup=dabSetup, rsXx9DabConformance=rsXx9DabConformance, dabInputEdiTable=dabInputEdiTable, dabActiveModulationEntry=dabActiveModulationEntry, dabInputNotificationTxIdx=dabInputNotificationTxIdx, rsXx9DabCompliances=rsXx9DabCompliances, dabStatusNotificationPriority=dabStatusNotificationPriority, dabInputEtiTable=dabInputEtiTable, dabInputEdiEntry=dabInputEdiEntry, dabActiveLocalizationEntry=dabActiveLocalizationEntry, dabInputEtiSyncState=dabInputEtiSyncState, dabInputEdiStreamAddressType=dabInputEdiStreamAddressType, dabStatusSfnEntry=dabStatusSfnEntry, dabEncoderSummary=dabEncoderSummary, dabInputCmnExcIdx=dabInputCmnExcIdx, dabLocalizationEntry=dabLocalizationEntry, dabInputEtiEntry=dabInputEtiEntry, dabActTiiSubId=dabActTiiSubId, dabSetupSfnEntry=dabSetupSfnEntry, dabInput=dabInput, dabActiveModulationTable=dabActiveModulationTable, dabObjInput=dabObjInput, dabConfigurationTable=dabConfigurationTable, dabStSfnTxOffsetDelayMnsc=dabStSfnTxOffsetDelayMnsc, dabActiveTiiEntry=dabActiveTiiEntry, dabStatusNotificationMask=dabStatusNotificationMask, DatarateState=DatarateState, dabModulationChannelBandwidth=dabModulationChannelBandwidth, dabInpIfEdiState=dabInpIfEdiState, dabTest=dabTest, dabStSfnTxCompensationDelay=dabStSfnTxCompensationDelay, dabInputEdiDatarateState=dabInputEdiDatarateState, dabLocalizationTxAddress=dabLocalizationTxAddress, dabActTiiMainId=dabActTiiMainId, dabInputCmnTxIdx=dabInputCmnTxIdx, dabInputEdiStreamingMode=dabInputEdiStreamingMode, dabActLclTxAddressState=dabActLclTxAddressState, dabInputEdiReplacementStatus=dabInputEdiReplacementStatus, dabInputCommonEntry=dabInputCommonEntry, dabSetupSfnTable=dabSetupSfnTable, dabInputEtiDatarateState=dabInputEtiDatarateState, dabActiveTiiTable=dabActiveTiiTable, dabActMdlMode=dabActMdlMode, dabTiiMainIdOutOfRange=dabTiiMainIdOutOfRange, dabActiveConfigurationEntry=dabActiveConfigurationEntry, dabTestRsEnsemblePrbs=dabTestRsEnsemblePrbs, dabTiiSubId=dabTiiSubId, dabStatusSfnTable=dabStatusSfnTable, dabModulationTable=dabModulationTable, dabSetupSfnTxOffsetDelaySource=dabSetupSfnTxOffsetDelaySource, dabSetupSfnTistSource=dabSetupSfnTistSource, dabInputNotificationTable=dabInputNotificationTable, DabMode=DabMode, dabActiveConfigurationTable=dabActiveConfigurationTable, dabConfigurationModeSource=dabConfigurationModeSource, dabInputCmnImpedance=dabInputCmnImpedance, dabInputEdiDatarate=dabInputEdiDatarate, dabActTiiSubIdMnsc=dabActTiiSubIdMnsc, dabInputEdiFecMode=dabInputEdiFecMode, dabActLclTiiSource=dabActLclTiiSource, dabInputNotificationMask=dabInputNotificationMask, dabInputEdiStreamPort=dabInputEdiStreamPort, dabStatusNotificationExcIdx=dabStatusNotificationExcIdx, dabSetupSfnNetworkCompensationDelay2=dabSetupSfnNetworkCompensationDelay2, NetworkCompensationDelay=NetworkCompensationDelay, dabInputNotificationEntry=dabInputNotificationEntry, dabLocalizationTiiSource=dabLocalizationTiiSource, dabSetupSfnSync=dabSetupSfnSync, dabStatusSfnInputEntry=dabStatusSfnInputEntry, dabInputEtiInputIdx=dabInputEtiInputIdx, dabInputEdiSyncState=dabInputEdiSyncState, dabStatusSfnInputTable=dabStatusSfnInputTable, dabInputCommonTable=dabInputCommonTable, dabStSfnInputIdx=dabStSfnInputIdx, dabSetupSfnNetworkCompensationDelay1=dabSetupSfnNetworkCompensationDelay1, dabStatusNotificationEntry=dabStatusNotificationEntry, dabActLclTxAddressRequired=dabActLclTxAddressRequired, rsXx9DabMibModule=rsXx9DabMibModule, dabActCfgModeSource=dabActCfgModeSource, dabStatusNotificationTable=dabStatusNotificationTable, dabStSfnTxOffsetDelay=dabStSfnTxOffsetDelay, DabModeSource=DabModeSource, dabInputEtiErrorLevelState=dabInputEtiErrorLevelState, rsXx9DabNotifications=rsXx9DabNotifications, dabTestSignal=dabTestSignal, dabInputNotificationInputIdx=dabInputNotificationInputIdx, dabStSfnTxOffsetDelaySource=dabStSfnTxOffsetDelaySource, dabSetupSfnMaxTistLevel=dabSetupSfnMaxTistLevel, dabInputNotificationIdx=dabInputNotificationIdx, dabStatusNotificationName=dabStatusNotificationName, dabTiiTable=dabTiiTable, dabInpIfEtiState=dabInpIfEtiState, dabStSfnNetworkCompensationDelay=dabStSfnNetworkCompensationDelay, dabTestTable=dabTestTable, dabStatus=dabStatus, dabInputEdiErrorLevelState=dabInputEdiErrorLevelState, PYSNMP_MODULE_ID=rsXx9DabMibModule, dabActTiiMainIdMnsc=dabActTiiMainIdMnsc, rsXx9DabObjects=rsXx9DabObjects, dabActLclTxAddressPresentPlain=dabActLclTxAddressPresentPlain, dabConfigurationExcIdx=dabConfigurationExcIdx, dabTiiCarrierPhase=dabTiiCarrierPhase, dabSetupSfnTxDelay=dabSetupSfnTxDelay, dabTestEntry=dabTestEntry, rsXx9DabGroups=rsXx9DabGroups, dabModulationEntry=dabModulationEntry, dabInputCmnEdiDejitterBuffer=dabInputCmnEdiDejitterBuffer, dabInputNotificationState=dabInputNotificationState, dabStSfnNetworkCompensationDelayState=dabStSfnNetworkCompensationDelayState, dabInputNotificationName=dabInputNotificationName, dabInputEdiConnector=dabInputEdiConnector, dabInputEdiStreamAddress=dabInputEdiStreamAddress, dabObjBasic=dabObjBasic, dabBasicCompliance=dabBasicCompliance, dabTiiEntry=dabTiiEntry, dabInputNotificationPriority=dabInputNotificationPriority)
