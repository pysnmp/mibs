#
# PySNMP MIB module SAF-IPRADIO (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/saf/SAF-IPRADIO
# Produced by pysmi-1.1.12 at Mon Jun  3 13:13:07 2024
# On host fv-az883-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ifEntry, = mibBuilder.importSymbols("IF-MIB", "ifEntry")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibIdentifier, Counter64, Counter32, TimeTicks, NotificationType, Unsigned32, IpAddress, ModuleIdentity, ObjectIdentity, Gauge32, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "Counter64", "Counter32", "TimeTicks", "NotificationType", "Unsigned32", "IpAddress", "ModuleIdentity", "ObjectIdentity", "Gauge32", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "enterprises")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
saf = MibIdentifier((1, 3, 6, 1, 4, 1, 7571))
tehnika = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100))
microwaveRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1))
pointToPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1))
safip = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5))
ipRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1))
ipRadioCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1))
ipRadioMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 2))
ipRadioStat = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3))
ipRadioCfgGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1))
ipRadioCfgNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 2))
ipRadioStatEth = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2))
modemStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4))
product = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: product.setStatus('mandatory')
description = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: description.setStatus('mandatory')
hostname = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostname.setStatus('mandatory')
sysDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 4), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDateAndTime.setStatus('mandatory')
sysTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTemperature.setStatus('mandatory')
license = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: license.setStatus('mandatory')
licenseMask = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseMask.setStatus('mandatory')
licenseUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseUpdateStatus.setStatus('mandatory')
writeConfig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 2, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: writeConfig.setStatus('mandatory')
restartcpu = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 2, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartcpu.setStatus('mandatory')
loopbacks = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 12))).clone(namedValues=NamedValues(("error", 1), ("off", 2), ("if", 4), ("modem", 5), ("multi", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbacks.setStatus('mandatory')
loopback_tributary_mask = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 2, 4), Integer32()).setLabel("loopback-tributary-mask").setMaxAccess("readonly")
if mibBuilder.loadTexts: loopback_tributary_mask.setStatus('mandatory')
localIp = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localIp.setStatus('mandatory')
localIpMask = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localIpMask.setStatus('mandatory')
remoteIp = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteIp.setStatus('mandatory')
radioTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10), )
if mibBuilder.loadTexts: radioTable.setStatus('mandatory')
radioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10, 1), ).setIndexNames((0, "SAF-IPRADIO", "radioIndex"))
if mibBuilder.loadTexts: radioEntry.setStatus('mandatory')
radioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioIndex.setStatus('mandatory')
radioGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioGenStatus.setStatus('mandatory')
radioSide = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioSide.setStatus('mandatory')
radioTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTxPower.setStatus('mandatory')
radioRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRxLevel.setStatus('mandatory')
radioDuplexShift = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioDuplexShift.setStatus('mandatory')
radioLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLoopback.setStatus('mandatory')
radioTxMute = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTxMute.setStatus('mandatory')
radioTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTxFrequency.setStatus('mandatory')
radioRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRxFrequency.setStatus('mandatory')
aTPCTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 11), )
if mibBuilder.loadTexts: aTPCTable.setStatus('mandatory')
aTPCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 11, 1), ).setIndexNames((0, "SAF-IPRADIO", "atpcIndex"))
if mibBuilder.loadTexts: aTPCEntry.setStatus('mandatory')
atpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpcIndex.setStatus('mandatory')
atpcEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atpcEnabled.setStatus('mandatory')
atpcTxPowerCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpcTxPowerCorrection.setStatus('mandatory')
modemTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12), )
if mibBuilder.loadTexts: modemTable.setStatus('mandatory')
modemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1), ).setIndexNames((0, "SAF-IPRADIO", "modemIndex"))
if mibBuilder.loadTexts: modemEntry.setStatus('mandatory')
modemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIndex.setStatus('mandatory')
modemGeneralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemGeneralStatus.setStatus('mandatory')
modemBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemBandwith.setStatus('mandatory')
modemE1T1Channels = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemE1T1Channels.setStatus('mandatory')
modemModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 40, 41, 42, 49, 50, 57, 58))).clone(namedValues=NamedValues(("qpsk", 1), ("psk8", 2), ("qam16", 3), ("qam32", 4), ("qam64", 5), ("qam128", 6), ("qam256", 7), ("qpsklimited", 8), ("wqpsk", 9), ("wpsk8", 10), ("wqam16", 11), ("wqam32", 12), ("wqam64", 13), ("wqam128", 14), ("wqam256", 15), ("acmqpsk", 17), ("acmpsk8", 18), ("acmqam16", 19), ("acmqam32", 20), ("acmqam64", 21), ("acmqam128", 22), ("acmqam256", 23), ("acmwqpsk", 25), ("acmwpsk8", 26), ("acmwqam16", 27), ("acmwqam32", 28), ("acmwqam64", 29), ("acmwqam128", 30), ("acmwqam256", 31), ("qam4", 33), ("qam8", 34), ("qam4limited", 40), ("wqam4", 41), ("wqam8", 42), ("acmqam4", 49), ("acmqam8", 50), ("acmwqam4", 57), ("acmwqam8", 58)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemModulation.setStatus('mandatory')
modemTotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemTotalCapacity.setStatus('mandatory')
modemEthernetCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemEthernetCapacity.setStatus('mandatory')
modemAcqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemAcqStatus.setStatus('mandatory')
modemLastAcqError = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("success", 1), ("erragc", 2), ("errtiming", 3), ("errfreqsweep", 4), ("errmse", 5), ("errbit", 6), ("errservice", 7), ("errblind", 8), ("errtimeout", 9), ("errstopped", 10), ("errfatal", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemLastAcqError.setStatus('mandatory')
modemRadialMSE = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemRadialMSE.setStatus('mandatory')
modemInternalAGCgain = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInternalAGCgain.setStatus('mandatory')
modemCarrierOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCarrierOffset.setStatus('mandatory')
modemSymbolRateTx = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSymbolRateTx.setStatus('mandatory')
modemSymbolRateRx = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSymbolRateRx.setStatus('mandatory')
modemLDPCdecoderStress = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemLDPCdecoderStress.setStatus('mandatory')
modemACMengine = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemACMengine.setStatus('mandatory')
modemACMmodulationMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 40, 41, 42, 49, 50, 57, 58))).clone(namedValues=NamedValues(("qpsk", 1), ("psk8", 2), ("qam16", 3), ("qam32", 4), ("qam64", 5), ("qam128", 6), ("qam256", 7), ("qpsklimited", 8), ("wqpsk", 9), ("wpsk8", 10), ("wqam16", 11), ("wqam32", 12), ("wqam64", 13), ("wqam128", 14), ("wqam256", 15), ("acmqpsk", 17), ("acmpsk8", 18), ("acmqam16", 19), ("acmqam32", 20), ("acmqam64", 21), ("acmqam128", 22), ("acmqam256", 23), ("acmwqpsk", 25), ("acmwpsk8", 26), ("acmwqam16", 27), ("acmwqam32", 28), ("acmwqam64", 29), ("acmwqam128", 30), ("acmwqam256", 31), ("qam4", 33), ("qam8", 34), ("qam4limited", 40), ("wqam4", 41), ("wqam8", 42), ("acmqam4", 49), ("acmqam8", 50), ("acmwqam4", 57), ("acmwqam8", 58)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMmodulationMin.setStatus('mandatory')
modemACMtotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemACMtotalCapacity.setStatus('mandatory')
modemACMethernetCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemACMethernetCapacity.setStatus('mandatory')
modemStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("etsi", 1), ("ansi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemStandard.setStatus('mandatory')
modemE1T1ChannelMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemE1T1ChannelMask.setStatus('mandatory')
modemACMmodulationMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 40, 41, 42, 49, 50, 57, 58))).clone(namedValues=NamedValues(("qpsk", 1), ("psk8", 2), ("qam16", 3), ("qam32", 4), ("qam64", 5), ("qam128", 6), ("qam256", 7), ("qpsklimited", 8), ("wqpsk", 9), ("wpsk8", 10), ("wqam16", 11), ("wqam32", 12), ("wqam64", 13), ("wqam128", 14), ("wqam256", 15), ("acmqpsk", 17), ("acmpsk8", 18), ("acmqam16", 19), ("acmqam32", 20), ("acmqam64", 21), ("acmqam128", 22), ("acmqam256", 23), ("acmwqpsk", 25), ("acmwpsk8", 26), ("acmwqam16", 27), ("acmwqam32", 28), ("acmwqam64", 29), ("acmwqam128", 30), ("acmwqam256", 31), ("qam4", 33), ("qam8", 34), ("qam4limited", 40), ("wqam4", 41), ("wqam8", 42), ("acmqam4", 49), ("acmqam8", 50), ("acmwqam4", 57), ("acmwqam8", 58)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMmodulationMax.setStatus('mandatory')
modemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 12, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notReady", 3), ("undo", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemRowStatus.setStatus('mandatory')
vlansEnabled = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlansEnabled.setStatus('mandatory')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 14), )
if mibBuilder.loadTexts: vlanTable.setStatus('mandatory')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 14, 1), )
ifEntry.registerAugmentions(("SAF-IPRADIO", "vlanEntry"))
vlanEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: vlanEntry.setStatus('mandatory')
vlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNumber.setStatus('mandatory')
vlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("management", 1), ("none", 2), ("traffic", 3), ("endpoint", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortType.setStatus('mandatory')
vlanPortmap = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortmap.setStatus('mandatory')
vlanFid = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanFid.setStatus('optional')
vlanCfgStat = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCfgStat.setStatus('mandatory')
vlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 1, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notReady", 3), ("undo", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanRowStatus.setStatus('mandatory')
ethRXTruncatedFrames = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXTruncatedFrames.setStatus('mandatory')
ethRXLongEvents = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXLongEvents.setStatus('mandatory')
ethRXVlanTagsDetected = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXVlanTagsDetected.setStatus('mandatory')
ethRXUnsupOpcodes = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXUnsupOpcodes.setStatus('mandatory')
ethRXPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXPauseFrames.setStatus('mandatory')
ethRXControlFrames = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXControlFrames.setStatus('mandatory')
ethRXDribleNibbles = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXDribleNibbles.setStatus('mandatory')
ethRXBroadcasts = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXBroadcasts.setStatus('mandatory')
ethRXMulticasts = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXMulticasts.setStatus('mandatory')
ethRXDones = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXDones.setStatus('mandatory')
ethRXOutOfRangeErrors = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXOutOfRangeErrors.setStatus('mandatory')
ethRXLengthCheckerrorsErrors = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXLengthCheckerrorsErrors.setStatus('mandatory')
ethRXCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXCRCErrors.setStatus('mandatory')
ethRXCodeErrors = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXCodeErrors.setStatus('mandatory')
ethRXFalseCarrierErrors = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXFalseCarrierErrors.setStatus('mandatory')
ethRXDvEvent = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXDvEvent.setStatus('mandatory')
ethRXPrevPktDropped = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXPrevPktDropped.setStatus('mandatory')
ethRXByteCounterHi = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXByteCounterHi.setStatus('mandatory')
ethRXByteCounterLow = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRXByteCounterLow.setStatus('mandatory')
ethTXVlanTags = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXVlanTags.setStatus('mandatory')
ethTXBackpresEvents = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXBackpresEvents.setStatus('mandatory')
ethTXPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXPauseFrames.setStatus('mandatory')
ethTXControlFrames = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXControlFrames.setStatus('mandatory')
ethTXWireByteCounterHi = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXWireByteCounterHi.setStatus('mandatory')
ethTXWireByteCounterLow = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXWireByteCounterLow.setStatus('mandatory')
ethTXUnderruns = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXUnderruns.setStatus('mandatory')
ethTXGiants = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXGiants.setStatus('mandatory')
ethTXLateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXLateCollisions.setStatus('mandatory')
ethTXMaxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXMaxCollisions.setStatus('mandatory')
ethTXExcessiveDefers = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXExcessiveDefers.setStatus('mandatory')
ethTXNonExcessiveDefers = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXNonExcessiveDefers.setStatus('mandatory')
ethTXBroadcasts = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXBroadcasts.setStatus('mandatory')
ethTXMulticasts = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXMulticasts.setStatus('mandatory')
ethTXDones = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXDones.setStatus('mandatory')
ethTXLengthCheckErrors = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXLengthCheckErrors.setStatus('mandatory')
ethTXCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXCRCErrors.setStatus('mandatory')
ethTXCollisions = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXCollisions.setStatus('mandatory')
ethTXByteCounterHi = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXByteCounterHi.setStatus('mandatory')
ethTXByteCounterLow = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTXByteCounterLow.setStatus('mandatory')
ethGFPFCSErrors = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGFPFCSErrors.setStatus('mandatory')
ethGFPCHECErrors = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGFPCHECErrors.setStatus('mandatory')
ethGFPDropedFrames = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGFPDropedFrames.setStatus('mandatory')
ethGFPDelineationErrors = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGFPDelineationErrors.setStatus('mandatory')
ethQOSRXQ1Frames = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethQOSRXQ1Frames.setStatus('mandatory')
ethQOSRXQ1Dropped = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethQOSRXQ1Dropped.setStatus('mandatory')
ethQOSRXQ2Frames = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethQOSRXQ2Frames.setStatus('mandatory')
ethQOSRXQ2Dropped = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethQOSRXQ2Dropped.setStatus('mandatory')
ethQOSTXFrames = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethQOSTXFrames.setStatus('mandatory')
ethQOSTXDropped = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 2, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethQOSTXDropped.setStatus('mandatory')
e1t1StatTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 3), )
if mibBuilder.loadTexts: e1t1StatTable.setStatus('mandatory')
e1t1StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 3, 1), )
ifEntry.registerAugmentions(("SAF-IPRADIO", "e1t1StatEntry"))
e1t1StatEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: e1t1StatEntry.setStatus('mandatory')
e1t1LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1LOS.setStatus('mandatory')
e1t1AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1AIS.setStatus('mandatory')
e1t1ChannelNr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1ChannelNr.setStatus('mandatory')
modemCountTime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCountTime.setStatus('mandatory')
modemErroredBlock = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemErroredBlock.setStatus('mandatory')
modemErroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemErroredSecond.setStatus('mandatory')
modemSeverelyErroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSeverelyErroredSecond.setStatus('mandatory')
modemBackgroundBlockErrror = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemBackgroundBlockErrror.setStatus('mandatory')
modemTotalBlockNumber = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemTotalBlockNumber.setStatus('mandatory')
modemErroredSecondRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemErroredSecondRatio.setStatus('mandatory')
modemSeverelyErroredSecondRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSeverelyErroredSecondRatio.setStatus('mandatory')
modemBackgroundBlockErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemBackgroundBlockErrorRatio.setStatus('mandatory')
modemUptime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemUptime.setStatus('mandatory')
modemUnavailtime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 1, 3, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemUnavailtime.setStatus('mandatory')
mibBuilder.exportSymbols("SAF-IPRADIO", modemACMtotalCapacity=modemACMtotalCapacity, modemTable=modemTable, ethGFPCHECErrors=ethGFPCHECErrors, modemErroredSecondRatio=modemErroredSecondRatio, ethRXLongEvents=ethRXLongEvents, modemE1T1Channels=modemE1T1Channels, ethGFPDropedFrames=ethGFPDropedFrames, ipRadioStat=ipRadioStat, ethGFPFCSErrors=ethGFPFCSErrors, saf=saf, ethQOSTXFrames=ethQOSTXFrames, licenseMask=licenseMask, e1t1LOS=e1t1LOS, modemErroredSecond=modemErroredSecond, ethTXLengthCheckErrors=ethTXLengthCheckErrors, ethRXBroadcasts=ethRXBroadcasts, atpcEnabled=atpcEnabled, modemACMmodulationMin=modemACMmodulationMin, modemModulation=modemModulation, license=license, modemBandwith=modemBandwith, pointToPoint=pointToPoint, vlansEnabled=vlansEnabled, ethTXCollisions=ethTXCollisions, radioTxMute=radioTxMute, modemEthernetCapacity=modemEthernetCapacity, modemGeneralStatus=modemGeneralStatus, e1t1StatTable=e1t1StatTable, restartcpu=restartcpu, vlanCfgStat=vlanCfgStat, hostname=hostname, atpcIndex=atpcIndex, modemBackgroundBlockErrror=modemBackgroundBlockErrror, microwaveRadio=microwaveRadio, ethRXControlFrames=ethRXControlFrames, ipRadio=ipRadio, vlanPortType=vlanPortType, modemInternalAGCgain=modemInternalAGCgain, description=description, modemACMengine=modemACMengine, ethTXBackpresEvents=ethTXBackpresEvents, vlanRowStatus=vlanRowStatus, ethTXByteCounterLow=ethTXByteCounterLow, tehnika=tehnika, ethQOSRXQ1Frames=ethQOSRXQ1Frames, radioDuplexShift=radioDuplexShift, ethRXUnsupOpcodes=ethRXUnsupOpcodes, modemBackgroundBlockErrorRatio=modemBackgroundBlockErrorRatio, ipRadioCfgNetwork=ipRadioCfgNetwork, ethRXDribleNibbles=ethRXDribleNibbles, aTPCTable=aTPCTable, licenseUpdateStatus=licenseUpdateStatus, e1t1AIS=e1t1AIS, radioSide=radioSide, e1t1StatEntry=e1t1StatEntry, ethTXControlFrames=ethTXControlFrames, ethRXFalseCarrierErrors=ethRXFalseCarrierErrors, ethTXUnderruns=ethTXUnderruns, radioTxFrequency=radioTxFrequency, ethRXByteCounterLow=ethRXByteCounterLow, ethGFPDelineationErrors=ethGFPDelineationErrors, modemSeverelyErroredSecond=modemSeverelyErroredSecond, ethRXVlanTagsDetected=ethRXVlanTagsDetected, ethTXLateCollisions=ethTXLateCollisions, ethRXDones=ethRXDones, ethRXOutOfRangeErrors=ethRXOutOfRangeErrors, writeConfig=writeConfig, product=product, ethRXLengthCheckerrorsErrors=ethRXLengthCheckerrorsErrors, ethRXByteCounterHi=ethRXByteCounterHi, ethQOSRXQ2Dropped=ethQOSRXQ2Dropped, modemTotalCapacity=modemTotalCapacity, vlanNumber=vlanNumber, ethRXPrevPktDropped=ethRXPrevPktDropped, ethTXMulticasts=ethTXMulticasts, modemTotalBlockNumber=modemTotalBlockNumber, ethTXWireByteCounterHi=ethTXWireByteCounterHi, loopbacks=loopbacks, modemStandard=modemStandard, vlanPortmap=vlanPortmap, ethTXPauseFrames=ethTXPauseFrames, ipRadioStatEth=ipRadioStatEth, radioIndex=radioIndex, modemStatistics=modemStatistics, safip=safip, modemCarrierOffset=modemCarrierOffset, modemRowStatus=modemRowStatus, ethTXExcessiveDefers=ethTXExcessiveDefers, modemACMmodulationMax=modemACMmodulationMax, ethTXNonExcessiveDefers=ethTXNonExcessiveDefers, ethTXByteCounterHi=ethTXByteCounterHi, radioEntry=radioEntry, modemLDPCdecoderStress=modemLDPCdecoderStress, modemUptime=modemUptime, sysDateAndTime=sysDateAndTime, ethRXDvEvent=ethRXDvEvent, ipRadioCfg=ipRadioCfg, ethQOSRXQ1Dropped=ethQOSRXQ1Dropped, localIp=localIp, modemAcqStatus=modemAcqStatus, radioRxLevel=radioRxLevel, ethRXCRCErrors=ethRXCRCErrors, sysTemperature=sysTemperature, ethQOSRXQ2Frames=ethQOSRXQ2Frames, ipRadioMgmt=ipRadioMgmt, remoteIp=remoteIp, ethRXCodeErrors=ethRXCodeErrors, vlanFid=vlanFid, radioGenStatus=radioGenStatus, ipRadioCfgGeneral=ipRadioCfgGeneral, ethTXWireByteCounterLow=ethTXWireByteCounterLow, modemCountTime=modemCountTime, e1t1ChannelNr=e1t1ChannelNr, ethRXTruncatedFrames=ethRXTruncatedFrames, modemSymbolRateTx=modemSymbolRateTx, atpcTxPowerCorrection=atpcTxPowerCorrection, ethTXCRCErrors=ethTXCRCErrors, radioLoopback=radioLoopback, modemLastAcqError=modemLastAcqError, modemE1T1ChannelMask=modemE1T1ChannelMask, vlanEntry=vlanEntry, ethTXMaxCollisions=ethTXMaxCollisions, vlanTable=vlanTable, ethTXBroadcasts=ethTXBroadcasts, radioTxPower=radioTxPower, modemEntry=modemEntry, ethTXDones=ethTXDones, loopback_tributary_mask=loopback_tributary_mask, modemSymbolRateRx=modemSymbolRateRx, modemUnavailtime=modemUnavailtime, modemErroredBlock=modemErroredBlock, ethQOSTXDropped=ethQOSTXDropped, ethTXVlanTags=ethTXVlanTags, modemSeverelyErroredSecondRatio=modemSeverelyErroredSecondRatio, ethRXMulticasts=ethRXMulticasts, modemACMethernetCapacity=modemACMethernetCapacity, modemRadialMSE=modemRadialMSE, ethRXPauseFrames=ethRXPauseFrames, localIpMask=localIpMask, ethTXGiants=ethTXGiants, radioTable=radioTable, aTPCEntry=aTPCEntry, radioRxFrequency=radioRxFrequency, modemIndex=modemIndex)
