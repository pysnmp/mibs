#
# PySNMP MIB module TELECOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eaton/TELECOM-MIB
# Produced by pysmi-1.1.12 at Sat Jul  6 01:07:44 2024
# On host fv-az1532-138 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, enterprises, ModuleIdentity, MibIdentifier, Unsigned32, NotificationType, iso, Counter64, Gauge32, Integer32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "enterprises", "ModuleIdentity", "MibIdentifier", "Unsigned32", "NotificationType", "iso", "Counter64", "Gauge32", "Integer32", "IpAddress", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class PositiveInteger(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NonNegativeInteger(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

ppc = MibIdentifier((1, 3, 6, 1, 4, 1, 935))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10))
matAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2))
matObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1))
matTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 2))
matController = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1))
matInverter = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2))
matSts = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3))
matDryContact = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4))
matConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5))
matTrapTargets = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6))
matConSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConSerialNum.setStatus('mandatory')
matConName = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConName.setStatus('mandatory')
matConWarningState = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConWarningState.setStatus('mandatory')
matConTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConTemperature.setStatus('mandatory')
matAgentSoftwareVerison = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matAgentSoftwareVerison.setStatus('mandatory')
matInvModuleNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvModuleNum.setStatus('mandatory')
matInvTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2), )
if mibBuilder.loadTexts: matInvTable.setStatus('mandatory')
matInvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1), ).setIndexNames((0, "TELECOM-MIB", "matInvModuleIndex"))
if mibBuilder.loadTexts: matInvEntry.setStatus('mandatory')
matInvModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: matInvModuleIndex.setStatus('mandatory')
matInvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvSerialNum.setStatus('mandatory')
matInvFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvFirmwareVersion.setStatus('mandatory')
matInvHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvHardwareVersion.setStatus('mandatory')
matInvWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvWarningState.setStatus('mandatory')
matInvOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvOutputVoltage.setStatus('mandatory')
matInvOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvOutputCurrent.setStatus('mandatory')
matInvBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 8), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvBatteryVoltage.setStatus('mandatory')
matInvOutputFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 9), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvOutputFreq.setStatus('mandatory')
matInvOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 10), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvOutputPower.setStatus('mandatory')
matInvPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 11), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvPowerLimit.setStatus('mandatory')
matInvRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 12), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvRunTime.setStatus('mandatory')
matInvTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvTemperature.setStatus('mandatory')
matInvLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 14), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvLineVoltage.setStatus('mandatory')
matInvLineFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 15), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvLineFreq.setStatus('mandatory')
matInvMbsPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("transfer", 1), ("normal", 2), ("bypass", 3), ("invalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvMbsPosition.setStatus('mandatory')
matInvRunMode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("powerOn", 1), ("standby", 2), ("bypass", 3), ("line", 4), ("battery", 5), ("fault", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvRunMode.setStatus('mandatory')
matInvPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("batteryMode", 1), ("lineMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvPriority.setStatus('mandatory')
matConfInvOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 19), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvOutputVoltage.setStatus('mandatory')
matConfInvInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 20), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvInputVoltage.setStatus('mandatory')
matConfInvOutputVoltHighLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 21), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvOutputVoltHighLoss.setStatus('mandatory')
matConfInvOutputVoltLowLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 22), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvOutputVoltLowLoss.setStatus('mandatory')
matConfInvOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 23), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvOutputPower.setStatus('mandatory')
matConfInvOutputFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 24), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matConfInvOutputFreq.setStatus('mandatory')
matInvPhaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singlePhase", 1), ("threePhase", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matInvPhaseType.setStatus('mandatory')
matInvOnOffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shutdown", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matInvOnOffStatus.setStatus('mandatory')
matStsModuleNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsModuleNum.setStatus('mandatory')
matStsTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2), )
if mibBuilder.loadTexts: matStsTable.setStatus('mandatory')
matStsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1), ).setIndexNames((0, "TELECOM-MIB", "matStsModuleIndex"))
if mibBuilder.loadTexts: matStsEntry.setStatus('mandatory')
matStsModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: matStsModuleIndex.setStatus('mandatory')
matStsModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsModuleType.setStatus('mandatory')
matStsSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsSerialNum.setStatus('mandatory')
matStsFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsFirmwareVersion.setStatus('mandatory')
matStsHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsHardwareVersion.setStatus('mandatory')
matStsWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsWarningState.setStatus('mandatory')
matStsMainInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsMainInputVoltage.setStatus('mandatory')
matStsMainInputFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 8), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsMainInputFreq.setStatus('mandatory')
matStsInvInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 9), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsInvInputVoltage.setStatus('mandatory')
matStsInvInputFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 10), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsInvInputFreq.setStatus('mandatory')
matStsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 11), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsOutputVoltage.setStatus('mandatory')
matStsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 12), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsOutputCurrent.setStatus('mandatory')
matStsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 13), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsOutputPower.setStatus('mandatory')
matStsOutputFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 14), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsOutputFreq.setStatus('mandatory')
matStsRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 15), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsRuntime.setStatus('mandatory')
matStsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsTemperature.setStatus('mandatory')
matStsMbsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normalPosition", 1), ("issPosition", 2), ("ibpPosition", 3), ("mssPosition", 4), ("mbpPosition", 5), ("mbsError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsMbsStatus.setStatus('mandatory')
matStsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onLine", 1), ("offLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsStatus.setStatus('mandatory')
matStsRunningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inverter", 1), ("mains", 2), ("noOutput", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsRunningMode.setStatus('mandatory')
matStsMainHighLossVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 20), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsMainHighLossVoltage.setStatus('mandatory')
matStsMainLowLossVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 21), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsMainLowLossVoltage.setStatus('mandatory')
matStsInvHighLossVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 22), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsInvHighLossVoltage.setStatus('mandatory')
matStsInvLosLossVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 3, 2, 1, 23), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matStsInvLosLossVoltage.setStatus('mandatory')
matDryContactNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matDryContactNum.setStatus('mandatory')
matDryContactTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4, 2), )
if mibBuilder.loadTexts: matDryContactTable.setStatus('mandatory')
matDryContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4, 2, 1), ).setIndexNames((0, "TELECOM-MIB", "matDryContactIndex"))
if mibBuilder.loadTexts: matDryContactEntry.setStatus('mandatory')
matDryContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: matDryContactIndex.setStatus('mandatory')
matDryContactString = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matDryContactString.setStatus('mandatory')
matConfInvSysOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 1), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysOutputFreq.setStatus('mandatory')
matConfInvSysOutputVolt = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 2), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysOutputVolt.setStatus('mandatory')
matConfInvSysOutputVoltHighLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 3), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysOutputVoltHighLoss.setStatus('mandatory')
matConfInvSysOutputVoltLowLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 4), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysOutputVoltLowLoss.setStatus('mandatory')
matConfInvSysInputVolt = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 5), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysInputVolt.setStatus('mandatory')
matConfInvSysPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 6), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysPowerLimit.setStatus('mandatory')
matConfInvSysLineVoltHighLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 7), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysLineVoltHighLoss.setStatus('mandatory')
matConfInvSysLineVoltLowLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 8), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysLineVoltLowLoss.setStatus('mandatory')
matConfInvSysPriority = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("batteryMode", 1), ("lineMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysPriority.setStatus('mandatory')
matConfInvSysFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalSpeed", 1), ("fullSpeed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfInvSysFanSpeed.setStatus('mandatory')
matConfStsAcVoltHighLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 11), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsAcVoltHighLoss.setStatus('mandatory')
matConfStsAcVoltLowLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 12), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsAcVoltLowLoss.setStatus('mandatory')
matConfStsIpvVoltHighLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 13), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsIpvVoltHighLoss.setStatus('mandatory')
matConfStsIpvVoltLowLoss = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 14), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsIpvVoltLowLoss.setStatus('mandatory')
matConfStsPriority = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onLine", 1), ("offLine", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsPriority.setStatus('mandatory')
matConfStsFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalSpeed", 1), ("fullSpeed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matConfStsFanSpeed.setStatus('mandatory')
matTrapTargetsNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matTrapTargetsNum.setStatus('mandatory')
matTrapTargetsTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2), )
if mibBuilder.loadTexts: matTrapTargetsTable.setStatus('mandatory')
matTrapTargetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1), ).setIndexNames((0, "TELECOM-MIB", "matTrapTargetsIndex"))
if mibBuilder.loadTexts: matTrapTargetsEntry.setStatus('mandatory')
matTrapTargetsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: matTrapTargetsIndex.setStatus('mandatory')
matTrapTargetsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matTrapTargetsAddress.setStatus('mandatory')
matTrapTargetsCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matTrapTargetsCommunity.setStatus('mandatory')
matTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("matTrap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matTrapType.setStatus('mandatory')
matTrapSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("observe", 1), ("major", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matTrapSeverityLevel.setStatus('mandatory')
matTrapTargetsDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 2, 1, 6, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matTrapTargetsDesc.setStatus('mandatory')
matInvFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,1)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,2)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,3)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,4)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvFanFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,5)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvFanFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,6)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvTempPowerLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,7)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvTempPowerLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,8)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvInputAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,9)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvInputAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,10)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvLowInputShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,11)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvLowInputShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,12)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvNotRespond = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,13)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvNotRespond = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,14)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvBusVoltageOverLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,15)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvBusVoltOverLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,16)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvBusVoltageUnderLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,17)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvBusVoltUnderLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,18)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvBusSoftFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,19)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvBusSoftFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,20)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvOutputShort = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,21)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvOutputShort = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,22)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvOutputVoltLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,23)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvOutputVoltLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,24)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvOutputVoltHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,25)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvOutputVoltHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,26)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,27)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,28)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvNegativePowerProtect = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,29)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvNegativePowerProtect = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,30)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvPulseFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,31)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvPulseFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,32))
matInvEPOShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,33)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvEPOShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,34)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvSoftStartFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,35)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvSoftStartFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,36)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,37)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,38)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvBypassSCRShort = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,39)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvBypassSCRShort = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,40)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvMBSPosError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,41)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvMBSPosError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,42)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvBackfeedRelayOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,43)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvBackfeedRelayOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,44)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvHardwareError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,45)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvHardwareError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,46)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvMainUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,47)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvMainUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,48)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matInvMaintenaceBypass = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,49)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matReturnFromInvMaintenaceBypass = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,50)).setObjects(("TELECOM-MIB", "matInvSerialNum"))
matStsBypassUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,51)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsBypassUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,52)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsBackfeedRelayOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,53)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsBackfeedRelayOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,54)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsScr1ShortCurcuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,55)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsScr1ShortCurcuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,56)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsScr2ShortCurcuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,57)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsScr2ShortCurcuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,58)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsFaultMode = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,59)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsFaultMode = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,60)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsFanFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,61)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsFanFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,62)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,63)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,64)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsInvFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,65)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsInvFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,66)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsMainsFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,67)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsMainFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,68)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,69)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,70)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsOutputShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,71)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsOutputShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,72)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsInvBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,73)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsInvBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,74)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,75)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,76)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsMBSPosFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,77)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsMBSPosFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,78)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsControlPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,79)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsControlPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,80)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsNotRespond = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,81)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsNotRespond = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,82)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsOutputAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,83)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsOutputAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,84)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matStsMaintenanceBypass = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,85)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matReturnFromStsMaintenanceBypass = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,86)).setObjects(("TELECOM-MIB", "matStsSerialNum"))
matConBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,87)).setObjects(("TELECOM-MIB", "matConSerialNum"))
matReturnFromConBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,88)).setObjects(("TELECOM-MIB", "matConSerialNum"))
matConTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,89)).setObjects(("TELECOM-MIB", "matConSerialNum"))
matReturnFromConTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,90)).setObjects(("TELECOM-MIB", "matConSerialNum"))
matConEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,91)).setObjects(("TELECOM-MIB", "matConSerialNum"))
matReturnFromConEEPROMFault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,92)).setObjects(("TELECOM-MIB", "matConSerialNum"))
matConBatteryVoltHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,93)).setObjects(("TELECOM-MIB", "matConSerialNum"))
matReturnFromConBatteryVoltHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,94)).setObjects(("TELECOM-MIB", "matConSerialNum"))
matConCanBusOff = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,95)).setObjects(("TELECOM-MIB", "matConSerialNum"))
matReturnFromConCanBusOff = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,96)).setObjects(("TELECOM-MIB", "matConSerialNum"))
matConCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,97)).setObjects(("TELECOM-MIB", "matConSerialNum"))
matReturnFromCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 2, 2) + (0,98)).setObjects(("TELECOM-MIB", "matConSerialNum"))
mibBuilder.exportSymbols("TELECOM-MIB", matTrapTargetsDesc=matTrapTargetsDesc, matInvEEPROMFault=matInvEEPROMFault, matInvPhaseType=matInvPhaseType, matTrapTargetsTable=matTrapTargetsTable, matStsHardwareVersion=matStsHardwareVersion, matInvOutputVoltLow=matInvOutputVoltLow, matStsMainsFail=matStsMainsFail, matReturnFromInvOutputVoltHigh=matReturnFromInvOutputVoltHigh, matConfInvOutputFreq=matConfInvOutputFreq, matStsOutputCurrent=matStsOutputCurrent, matStsRunningMode=matStsRunningMode, matReturnFromStsInvFail=matReturnFromStsInvFail, matInvHardwareVersion=matInvHardwareVersion, matInvWarningState=matInvWarningState, matConfInvSysPriority=matConfInvSysPriority, matReturnFromStsTemperatureHigh=matReturnFromStsTemperatureHigh, matStsScr1ShortCurcuit=matStsScr1ShortCurcuit, matDryContactString=matDryContactString, matConfStsAcVoltLowLoss=matConfStsAcVoltLowLoss, matStsControlPowerFail=matStsControlPowerFail, matConCommunicationLost=matConCommunicationLost, matConName=matConName, matInvBusVoltageOverLimit=matInvBusVoltageOverLimit, matReturnFromInvEEPROMFault=matReturnFromInvEEPROMFault, matConfig=matConfig, matConEEPROMFault=matConEEPROMFault, matReturnFromStsMaintenanceBypass=matReturnFromStsMaintenanceBypass, matReturnFromStsBackfeedRelayOpen=matReturnFromStsBackfeedRelayOpen, matSts=matSts, matReturnFromStsMBSPosFault=matReturnFromStsMBSPosFault, matStsMaintenanceBypass=matStsMaintenanceBypass, matInvBusVoltageUnderLimit=matInvBusVoltageUnderLimit, matStsInvLosLossVoltage=matStsInvLosLossVoltage, matStsStatus=matStsStatus, matConSerialNum=matConSerialNum, matReturnFromStsMainFail=matReturnFromStsMainFail, matInvNegativePowerProtect=matInvNegativePowerProtect, matInvMBSPosError=matInvMBSPosError, matInvMainUnavailable=matInvMainUnavailable, matStsBypassUnavailable=matStsBypassUnavailable, matConfInvSysOutputFreq=matConfInvSysOutputFreq, matReturnFromStsScr2ShortCurcuit=matReturnFromStsScr2ShortCurcuit, matInvModuleIndex=matInvModuleIndex, matReturnFromStsBypassUnavailable=matReturnFromStsBypassUnavailable, matConBatteryLow=matConBatteryLow, matReturnFromInvBusVoltUnderLimit=matReturnFromInvBusVoltUnderLimit, ppc=ppc, matReturnFromStsOutputAbnormal=matReturnFromStsOutputAbnormal, matAgentSoftwareVerison=matAgentSoftwareVerison, matConfStsIpvVoltLowLoss=matConfStsIpvVoltLowLoss, matInvModuleNum=matInvModuleNum, matConBatteryVoltHigh=matConBatteryVoltHigh, matConfStsIpvVoltHighLoss=matConfStsIpvVoltHighLoss, matStsFanFault=matStsFanFault, matController=matController, matConfInvOutputPower=matConfInvOutputPower, matReturnFromInvEPOShutdown=matReturnFromInvEPOShutdown, matStsSerialNum=matStsSerialNum, matInvPriority=matInvPriority, matReturnFromInvBusVoltOverLimit=matReturnFromInvBusVoltOverLimit, matStsInvBypassMode=matStsInvBypassMode, matStsMainInputFreq=matStsMainInputFreq, matStsOutputFreq=matStsOutputFreq, matInverter=matInverter, matConfInvSysOutputVoltLowLoss=matConfInvSysOutputVoltLowLoss, NonNegativeInteger=NonNegativeInteger, matStsModuleNum=matStsModuleNum, matReturnFromInvFault=matReturnFromInvFault, matStsFirmwareVersion=matStsFirmwareVersion, matStsInvFail=matStsInvFail, matInvMaintenaceBypass=matInvMaintenaceBypass, matConTemperatureHigh=matConTemperatureHigh, matReturnFromStsFaultMode=matReturnFromStsFaultMode, matInvFanFault=matInvFanFault, matStsRuntime=matStsRuntime, matStsEntry=matStsEntry, matReturnFromInvNegativePowerProtect=matReturnFromInvNegativePowerProtect, matInvSerialNum=matInvSerialNum, matInvOutputCurrent=matInvOutputCurrent, matInvOutputFreq=matInvOutputFreq, matStsInvInputVoltage=matStsInvInputVoltage, matInvPowerLimit=matInvPowerLimit, matStsMainInputVoltage=matStsMainInputVoltage, matDryContactNum=matDryContactNum, matReturnFromStsNotRespond=matReturnFromStsNotRespond, matReturnFromCommunicationLost=matReturnFromCommunicationLost, matInvTempPowerLimit=matInvTempPowerLimit, matStsMbsStatus=matStsMbsStatus, matReturnFromConEEPROMFault=matReturnFromConEEPROMFault, matInvBusSoftFail=matInvBusSoftFail, matConfInvOutputVoltage=matConfInvOutputVoltage, matReturnFromInvOverLoad=matReturnFromInvOverLoad, matStsInvHighLossVoltage=matStsInvHighLossVoltage, matConfInvOutputVoltLowLoss=matConfInvOutputVoltLowLoss, matInvBackfeedRelayOpen=matInvBackfeedRelayOpen, matStsTemperature=matStsTemperature, matStsTable=matStsTable, matObjects=matObjects, matInvFirmwareVersion=matInvFirmwareVersion, matReturnFromStsEEPROMFault=matReturnFromStsEEPROMFault, device=device, matConfInvOutputVoltHighLoss=matConfInvOutputVoltHighLoss, matReturnFromStsInvBypassMode=matReturnFromStsInvBypassMode, matDryContact=matDryContact, matInvTable=matInvTable, matReturnFromInvFanFault=matReturnFromInvFanFault, matReturnFromInvTempPowerLimit=matReturnFromInvTempPowerLimit, matReturnFromInvHardwareError=matReturnFromInvHardwareError, matReturnFromStsScr1ShortCurcuit=matReturnFromStsScr1ShortCurcuit, matStsWarningState=matStsWarningState, matInvLineFreq=matInvLineFreq, matReturnFromStsOutputShortCircuit=matReturnFromStsOutputShortCircuit, matTraps=matTraps, matInvNotRespond=matInvNotRespond, matStsTemperatureHigh=matStsTemperatureHigh, matInvOutputPower=matInvOutputPower, matStsMainHighLossVoltage=matStsMainHighLossVoltage, matInvOverLoad=matInvOverLoad, matInvTemperatureHigh=matInvTemperatureHigh, matInvLowInputShutdown=matInvLowInputShutdown, matReturnFromInvBusSoftFail=matReturnFromInvBusSoftFail, matReturnFromInvPulseFault=matReturnFromInvPulseFault, matReturnFromStsFanFault=matReturnFromStsFanFault, matDryContactEntry=matDryContactEntry, matInvBypassSCRShort=matInvBypassSCRShort, matInvTemperature=matInvTemperature, matConfInvSysPowerLimit=matConfInvSysPowerLimit, matReturnFromInvBackfeedRelayOpen=matReturnFromInvBackfeedRelayOpen, matConfInvSysOutputVolt=matConfInvSysOutputVolt, matTrapSeverityLevel=matTrapSeverityLevel, matReturnFromConBatteryVoltHigh=matReturnFromConBatteryVoltHigh, matInvEntry=matInvEntry, matConWarningState=matConWarningState, matConfInvInputVoltage=matConfInvInputVoltage, matConTemperature=matConTemperature, matReturnFromInvNotRespond=matReturnFromInvNotRespond, matDryContactIndex=matDryContactIndex, matReturnFromInvMaintenaceBypass=matReturnFromInvMaintenaceBypass, matInvFault=matInvFault, matInvHardwareError=matInvHardwareError, matStsScr2ShortCurcuit=matStsScr2ShortCurcuit, matConfStsAcVoltHighLoss=matConfStsAcVoltHighLoss, matInvOutputShort=matInvOutputShort, matConfInvSysLineVoltLowLoss=matConfInvSysLineVoltLowLoss, matReturnFromInvBypassSCRShort=matReturnFromInvBypassSCRShort, matTrapType=matTrapType, matStsMBSPosFault=matStsMBSPosFault, matStsModuleType=matStsModuleType, matStsNotRespond=matStsNotRespond, matStsInvInputFreq=matStsInvInputFreq, matInvInputAbnormal=matInvInputAbnormal, matTrapTargetsNum=matTrapTargetsNum, matInvBatteryVoltage=matInvBatteryVoltage, PositiveInteger=PositiveInteger, matStsEEPROMFault=matStsEEPROMFault, matInvRunMode=matInvRunMode, matReturnFromConCanBusOff=matReturnFromConCanBusOff, matReturnFromInvSoftStartFail=matReturnFromInvSoftStartFail, matConfInvSysFanSpeed=matConfInvSysFanSpeed, matConfStsFanSpeed=matConfStsFanSpeed, matAgent=matAgent, matTrapTargetsEntry=matTrapTargetsEntry, matReturnFromInvInputAbnormal=matReturnFromInvInputAbnormal, matStsMainLowLossVoltage=matStsMainLowLossVoltage, matStsModuleIndex=matStsModuleIndex, matStsOutputShortCircuit=matStsOutputShortCircuit, matInvSoftStartFail=matInvSoftStartFail, matReturnFromInvOutputVoltLow=matReturnFromInvOutputVoltLow, matReturnFromInvMBSPosError=matReturnFromInvMBSPosError, matReturnFromInvLowInputShutdown=matReturnFromInvLowInputShutdown, matStsOutputAbnormal=matStsOutputAbnormal, matConfInvSysInputVolt=matConfInvSysInputVolt, matTrapTargetsCommunity=matTrapTargetsCommunity, matConfInvSysOutputVoltHighLoss=matConfInvSysOutputVoltHighLoss, matTrapTargetsIndex=matTrapTargetsIndex, matReturnFromInvTemperatureHigh=matReturnFromInvTemperatureHigh, matInvOutputVoltage=matInvOutputVoltage, matInvPulseFault=matInvPulseFault, matConfStsPriority=matConfStsPriority, matReturnFromInvMainUnavailable=matReturnFromInvMainUnavailable, matTrapTargetsAddress=matTrapTargetsAddress, matStsBackfeedRelayOpen=matStsBackfeedRelayOpen, matInvRunTime=matInvRunTime, matReturnFromConBatteryLow=matReturnFromConBatteryLow, matInvOnOffStatus=matInvOnOffStatus, matConCanBusOff=matConCanBusOff, matStsOutputVoltage=matStsOutputVoltage, matConfInvSysLineVoltHighLoss=matConfInvSysLineVoltHighLoss, matStsOutputPower=matStsOutputPower, matTrapTargets=matTrapTargets, matStsFaultMode=matStsFaultMode, matReturnFromInvOutputShort=matReturnFromInvOutputShort, matReturnFromStsOverLoad=matReturnFromStsOverLoad, matInvLineVoltage=matInvLineVoltage, matInvEPOShutdown=matInvEPOShutdown, matReturnFromStsControlPowerFail=matReturnFromStsControlPowerFail, matStsOverLoad=matStsOverLoad, matDryContactTable=matDryContactTable, matInvOutputVoltHigh=matInvOutputVoltHigh, matInvMbsPosition=matInvMbsPosition, matReturnFromConTemperatureHigh=matReturnFromConTemperatureHigh)
