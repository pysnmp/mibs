#
# PySNMP MIB module ADVANTECH-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/advantech/ADVANTECH-COMMON-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:27:55 2024
# On host fv-az975-559 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Counter64, ObjectIdentity, Gauge32, IpAddress, Unsigned32, enterprises, Counter32, NotificationType, ModuleIdentity, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Counter64", "ObjectIdentity", "Gauge32", "IpAddress", "Unsigned32", "enterprises", "Counter32", "NotificationType", "ModuleIdentity", "Integer32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC-v1", "DateAndTime", "DisplayString")
advantech = MibIdentifier((1, 3, 6, 1, 4, 1, 10297))
advantechCommonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 10297, 100))
advantechCommonMIB.setRevisions(('2013-05-25 00:00', '2013-08-28 00:00', '2013-08-29 00:00', '2013-09-06 00:00', '2014-10-13 00:00', '2014-10-22 00:00', '2015-01-06 00:00',))
if mibBuilder.loadTexts: advantechCommonMIB.setLastUpdated('201501060000Z')
if mibBuilder.loadTexts: advantechCommonMIB.setOrganization('Advantech eAutomation Group')
atSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 100, 1))
atMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 100, 2))
atPciConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 100, 3))
sysModuleID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 100, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModuleID.setStatus('mandatory')
sysDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 10297, 100, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDeviceName.setStatus('current')
sysDescr = MibScalar((1, 3, 6, 1, 4, 1, 10297, 100, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDescr.setStatus('current')
sysImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 100, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysImageVersion.setStatus('mandatory')
sysReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 10297, 100, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysReleaseDate.setStatus('mandatory')
sysFirstBootTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 100, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirstBootTime.setStatus('mandatory')
sysBootTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 100, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBootTime.setStatus('mandatory')
sysBootCount = MibScalar((1, 3, 6, 1, 4, 1, 10297, 100, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBootCount.setStatus('mandatory')
snmpTrapSrvObj = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 100, 2, 1))
snmpTrapSrvNumber = MibScalar((1, 3, 6, 1, 4, 1, 10297, 100, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapSrvNumber.setStatus('mandatory')
snmpTrapSrvTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 100, 2, 1, 2), )
if mibBuilder.loadTexts: snmpTrapSrvTable.setStatus('mandatory')
snmpTrapSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 100, 2, 1, 2, 1), ).setIndexNames((0, "ADVANTECH-COMMON-MIB", "snmpTrapSrvIndex"))
if mibBuilder.loadTexts: snmpTrapSrvEntry.setStatus('mandatory')
snmpTrapSrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapSrvIndex.setStatus('mandatory')
snmpTrapSrvIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapSrvIP.setStatus('mandatory')
snmpTrapSrvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapSrvPort.setStatus('mandatory')
snmpTrapSrvAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapSrvAuthentication.setStatus('mandatory')
snmpTrapSrvCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 2, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapSrvCommunity.setStatus('mandatory')
snmpTrapVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapVersion.setStatus('mandatory')
pciConfigObj = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1))
psNumber = MibScalar((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psNumber.setStatus('current')
pciSlotTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2), )
if mibBuilder.loadTexts: pciSlotTable.setStatus('current')
pciSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1), ).setIndexNames((0, "ADVANTECH-COMMON-MIB", "psIndex"))
if mibBuilder.loadTexts: pciSlotEntry.setStatus('current')
psIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIndex.setStatus('mandatory')
psBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBusIndex.setStatus('mandatory')
psDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDeviceIndex.setStatus('mandatory')
psFunctionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psFunctionIndex.setStatus('mandatory')
psDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDisplayName.setStatus('mandatory')
psDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDescr.setStatus('mandatory')
psVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVendorID.setStatus('mandatory')
psDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDeviceID.setStatus('mandatory')
psSubsysVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSubsysVendorID.setStatus('mandatory')
psSubsysDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSubsysDeviceID.setStatus('mandatory')
psClassCode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psClassCode.setStatus('mandatory')
psManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psManufacturer.setStatus('current')
psLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLocation.setStatus('current')
psBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBaseAddress.setStatus('mandatory')
psLength = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLength.setStatus('mandatory')
psIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIRQ.setStatus('mandatory')
psState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psState.setStatus('current')
psModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("com", 1), ("can", 2), ("amonet", 3), ("motion", 4), ("wireless", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psModuleType.setStatus('current')
psModulePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 100, 3, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psModulePorts.setStatus('current')
mibBuilder.exportSymbols("ADVANTECH-COMMON-MIB", psFunctionIndex=psFunctionIndex, advantechCommonMIB=advantechCommonMIB, psIndex=psIndex, psIRQ=psIRQ, sysBootTime=sysBootTime, psSubsysVendorID=psSubsysVendorID, psClassCode=psClassCode, psState=psState, psModuleType=psModuleType, snmpTrapSrvCommunity=snmpTrapSrvCommunity, pciSlotEntry=pciSlotEntry, sysModuleID=sysModuleID, psVendorID=psVendorID, psBaseAddress=psBaseAddress, snmpTrapSrvNumber=snmpTrapSrvNumber, snmpTrapSrvObj=snmpTrapSrvObj, pciSlotTable=pciSlotTable, psSubsysDeviceID=psSubsysDeviceID, snmpTrapSrvTable=snmpTrapSrvTable, atPciConfig=atPciConfig, psNumber=psNumber, sysImageVersion=sysImageVersion, snmpTrapSrvEntry=snmpTrapSrvEntry, psBusIndex=psBusIndex, snmpTrapSrvIndex=snmpTrapSrvIndex, sysDescr=sysDescr, atSystem=atSystem, sysBootCount=sysBootCount, pciConfigObj=pciConfigObj, psManufacturer=psManufacturer, psDeviceIndex=psDeviceIndex, snmpTrapSrvIP=snmpTrapSrvIP, sysDeviceName=sysDeviceName, snmpTrapVersion=snmpTrapVersion, psDescr=psDescr, psLength=psLength, advantech=advantech, psModulePorts=psModulePorts, PYSNMP_MODULE_ID=advantechCommonMIB, sysReleaseDate=sysReleaseDate, psLocation=psLocation, sysFirstBootTime=sysFirstBootTime, psDeviceID=psDeviceID, atMgmt=atMgmt, psDisplayName=psDisplayName, snmpTrapSrvPort=snmpTrapSrvPort, snmpTrapSrvAuthentication=snmpTrapSrvAuthentication)
