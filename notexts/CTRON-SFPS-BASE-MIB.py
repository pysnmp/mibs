#
# PySNMP MIB module CTRON-SFPS-BASE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-BASE-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 12:21:55 2024
# On host fv-az1019-803 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
sfpsBlockSourceStats, sfpsBlockSourcePort, sfpsBlockSourceExclude, sfpsBlockSourceAPI, sfpsBlockSourceOnly, sfpsCSPControl, sfpsATalkAMRVLANControl, sfpsServiceCenter, sfpsDHCPServerVLAN, sfpsCPResources, sfpsBlockSource = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsBlockSourceStats", "sfpsBlockSourcePort", "sfpsBlockSourceExclude", "sfpsBlockSourceAPI", "sfpsBlockSourceOnly", "sfpsCSPControl", "sfpsATalkAMRVLANControl", "sfpsServiceCenter", "sfpsDHCPServerVLAN", "sfpsCPResources", "sfpsBlockSource")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, Counter32, Unsigned32, Integer32, MibIdentifier, ModuleIdentity, iso, NotificationType, ObjectIdentity, TimeTicks, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "Counter32", "Unsigned32", "Integer32", "MibIdentifier", "ModuleIdentity", "iso", "NotificationType", "ObjectIdentity", "TimeTicks", "Counter64", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class HexInteger(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsCPResourcesTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1), )
if mibBuilder.loadTexts: sfpsCPResourcesTable.setStatus('mandatory')
sfpsCPResourcesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsCPResourcesTableId"))
if mibBuilder.loadTexts: sfpsCPResourcesTableEntry.setStatus('mandatory')
sfpsCPResourcesTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTableId.setStatus('mandatory')
sfpsCPResourcesTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTableName.setStatus('mandatory')
sfpsCPResourcesTableOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kStatusRunning", 1), ("kStatusHalted", 2), ("kStatusPending", 3), ("kStatusFaulted", 4), ("kStatusNotStarted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTableOperStatus.setStatus('mandatory')
sfpsCPResourcesTableAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTableAdminStatus.setStatus('mandatory')
sfpsCPResourcesTableStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTableStateTime.setStatus('mandatory')
sfpsCPResourcesTablePtsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTablePtsIn.setStatus('mandatory')
sfpsCPResourcesTablePtsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTablePtsUsed.setStatus('mandatory')
sfpsCPResourcesTablePolicyFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTablePolicyFlood.setStatus('mandatory')
sfpsCPResourcesResolveFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesResolveFlood.setStatus('mandatory')
sfpsCPResourcesConnectOK = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesConnectOK.setStatus('mandatory')
sfpsCPResourcesDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesDuplicate.setStatus('mandatory')
sfpsCPResourcesDiscoverOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesDiscoverOnly.setStatus('mandatory')
sfpsCPResourcesDiscoverError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesDiscoverError.setStatus('mandatory')
sfpsCPResourcesResolveFail = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesResolveFail.setStatus('mandatory')
sfpsCPResourcesResolveError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesResolveError.setStatus('mandatory')
sfpsCPResourcesPolicyFail = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesPolicyFail.setStatus('mandatory')
sfpsCPResourcesPolicyError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesPolicyError.setStatus('mandatory')
sfpsCPResourcesConnectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesConnectFail.setStatus('mandatory')
sfpsCPResourcesConnectFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesConnectFlood.setStatus('mandatory')
sfpsCPResourcesConnectError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesConnectError.setStatus('mandatory')
sfpsCPResourcesConfigTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesConfigTime.setStatus('mandatory')
sfpsCPResourcesNeedFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedFlood.setStatus('mandatory')
sfpsCPResourcesNeedResolve = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedResolve.setStatus('mandatory')
sfpsCPResourcesNeedDiscover = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedDiscover.setStatus('mandatory')
sfpsCPResourcesDiscoverAll = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesDiscoverAll.setStatus('mandatory')
sfpsCPResourcesNeedProxyOut = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedProxyOut.setStatus('mandatory')
sfpsCPResourcesNeedProxyIn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedProxyIn.setStatus('mandatory')
sfpsCPResourcesNeedFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedFilter.setStatus('mandatory')
sfpsCPResourcesAcceptRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesAcceptRate.setStatus('mandatory')
sfpsCPResourcesTotalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTotalRate.setStatus('mandatory')
sfpsCPResourcesSingleFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesSingleFlood.setStatus('mandatory')
sfpsCPResourcesNeedValidNet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedValidNet.setStatus('mandatory')
sfpsCPResourcesInvalidNetDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesInvalidNetDrops.setStatus('mandatory')
sfpsCPResourcesPersistMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesPersistMask.setStatus('mandatory')
sfpsCPResourcesAPI = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2))
sfpsCPResourcesAPIID = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIID.setStatus('mandatory')
sfpsCPResourcesAPIAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIAdminStatus.setStatus('mandatory')
sfpsCPResourcesAPIAttribute = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("none", 1), ("noFlood", 2), ("flood", 3), ("noResolve", 4), ("resolve", 5), ("noDiscover", 6), ("discover", 7), ("noDiscoverAll", 8), ("discoverAll", 9), ("noProxyIn", 10), ("proxyIn", 11), ("noProxyOut", 12), ("proxyOut", 13), ("nofilter", 14), ("filter", 15), ("noValidateNet", 16), ("validNet", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIAttribute.setStatus('mandatory')
sfpsCPResourcesAPIScope = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch", 1), ("port", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIScope.setStatus('mandatory')
sfpsCPResourcesAPIPersistance = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("persistOther", 1), ("persistDisabled", 2), ("persistEnabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIPersistance.setStatus('mandatory')
sfpsCPResourcesAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("set", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIVerb.setStatus('mandatory')
sfpsCSPControlTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1), )
if mibBuilder.loadTexts: sfpsCSPControlTable.setStatus('mandatory')
sfpsCSPControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsCSPControlTableIndex"))
if mibBuilder.loadTexts: sfpsCSPControlTableEntry.setStatus('mandatory')
sfpsCSPControlTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTableIndex.setStatus('mandatory')
sfpsCSPControlTableCSPType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTableCSPType.setStatus('mandatory')
sfpsCSPControlTableCSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTableCSPName.setStatus('mandatory')
sfpsCSPControlTableAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCSPControlTableAdminStatus.setStatus('mandatory')
sfpsCSPControlTableSwitchToCallProc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTableSwitchToCallProc.setStatus('mandatory')
sfpsCSPControlTablePktsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTablePktsProcessed.setStatus('mandatory')
sfpsCSPControlTablePktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTablePktRate.setStatus('mandatory')
sfpsServiceCenterFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9), )
if mibBuilder.loadTexts: sfpsServiceCenterFacilityTable.setStatus('mandatory')
sfpsServiceCenterFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsServiceCenterFacilityHashLeaf"))
if mibBuilder.loadTexts: sfpsServiceCenterFacilityEntry.setStatus('mandatory')
sfpsServiceCenterFacilityHashLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 1), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityHashLeaf.setStatus('mandatory')
sfpsServiceCenterFacilityMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityMetric.setStatus('mandatory')
sfpsServiceCenterFacilityName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityName.setStatus('mandatory')
sfpsServiceCenterFacilityOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kStatusRunning", 1), ("kStatusHalted", 2), ("kStatusPending", 3), ("kStatusFaulted", 4), ("kStatusNotStarted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityOperStatus.setStatus('mandatory')
sfpsServiceCenterFacilityAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityAdminStatus.setStatus('mandatory')
sfpsServiceCenterFacilityStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityStatusTime.setStatus('mandatory')
sfpsServiceCenterFacilityRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityRequests.setStatus('mandatory')
sfpsServiceCenterFacilityReply = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityReply.setStatus('mandatory')
sfpsBlockSourceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1), )
if mibBuilder.loadTexts: sfpsBlockSourceTable.setStatus('mandatory')
sfpsBlockSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsBlockSourceIndex"))
if mibBuilder.loadTexts: sfpsBlockSourceEntry.setStatus('mandatory')
sfpsBlockSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceIndex.setStatus('mandatory')
sfpsBlockSourceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceMAC.setStatus('mandatory')
sfpsBlockSourceElapTimeShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceElapTimeShort.setStatus('mandatory')
sfpsBlockSourceNumCallsShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceNumCallsShort.setStatus('mandatory')
sfpsBlockSourceElapTimeLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceElapTimeLong.setStatus('mandatory')
sfpsBlockSourceNumCallLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceNumCallLong.setStatus('mandatory')
sfpsBlockSourceBlockFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("wouldBeBlocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceBlockFlag.setStatus('mandatory')
sfpsBlockSourceUnBlockableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unblockable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceUnBlockableFlag.setStatus('mandatory')
sfpsBlockSourceFilterPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceFilterPresent.setStatus('mandatory')
sfpsBlockSourceNext = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceNext.setStatus('mandatory')
sfpsBlockSourceBlocksOnlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceBlocksOnlyIndex.setStatus('mandatory')
sfpsBlockSourceOnlyTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1), )
if mibBuilder.loadTexts: sfpsBlockSourceOnlyTable.setStatus('mandatory')
sfpsBlockSourceOnlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsBlockSourceOnlyIndex"))
if mibBuilder.loadTexts: sfpsBlockSourceOnlyEntry.setStatus('mandatory')
sfpsBlockSourceOnlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyIndex.setStatus('mandatory')
sfpsBlockSourceOnlyMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyMAC.setStatus('mandatory')
sfpsBlockSourceOnlyElapTimeShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyElapTimeShort.setStatus('mandatory')
sfpsBlockSourceOnlyNumCallsShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyNumCallsShort.setStatus('mandatory')
sfpsBlockSourceOnlyElapTimeLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyElapTimeLong.setStatus('mandatory')
sfpsBlockSourceOnlyNumCallLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyNumCallLong.setStatus('mandatory')
sfpsBlockSourceOnlyBlockFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("wouldBeBlocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyBlockFlag.setStatus('mandatory')
sfpsBlockSourceOnlyUnBlockableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unblockable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyUnBlockableFlag.setStatus('mandatory')
sfpsBlockSourceOnlyFilterPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyFilterPresent.setStatus('mandatory')
sfpsBlockSourceOnlyNext = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyNext.setStatus('mandatory')
sfpsBlockSourceOnlyBlocksOnlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyBlocksOnlyIndex.setStatus('mandatory')
sfpsBlockSourcePortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 3, 1), )
if mibBuilder.loadTexts: sfpsBlockSourcePortTable.setStatus('mandatory')
sfpsBlockSourcePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 3, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsBlockSourcePortPort"))
if mibBuilder.loadTexts: sfpsBlockSourcePortEntry.setStatus('mandatory')
sfpsBlockSourcePortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourcePortPort.setStatus('mandatory')
sfpsBlockSourcePortBlockability = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unblockable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourcePortBlockability.setStatus('mandatory')
sfpsBlockSourceAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("other", 1), ("switchToLearning", 2), ("switchToBlocking", 3), ("setShortThreshold", 4), ("setShortPeriod", 5), ("setLongThreshold", 6), ("setLongPeriod", 7), ("clearAll", 8), ("blockMac", 9), ("unblockMac", 10), ("setMacUnblockable", 11), ("setMacBlockable", 12), ("setPortUnblockable", 13), ("setPortBlockable", 14), ("setReapUserCnx", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIVerb.setStatus('mandatory')
sfpsBlockSourceAPIInputValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIInputValue.setStatus('mandatory')
sfpsBlockSourceAPIPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIPort.setStatus('mandatory')
sfpsBlockSourceAPIMAC = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 4), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIMAC.setStatus('mandatory')
sfpsBlockSourceAPIBlockStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("learning", 2), ("blocking", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIBlockStatus.setStatus('mandatory')
sfpsBlockSourceAPIShortThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIShortThreshold.setStatus('mandatory')
sfpsBlockSourceAPIShortPeriod = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIShortPeriod.setStatus('mandatory')
sfpsBlockSourceAPILongThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPILongThreshold.setStatus('mandatory')
sfpsBlockSourceAPILongPeriod = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPILongPeriod.setStatus('mandatory')
sfpsBlockSourceAPIReapUserCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIReapUserCnxs.setStatus('mandatory')
sfpsBlockSourceExcludeTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1), )
if mibBuilder.loadTexts: sfpsBlockSourceExcludeTable.setStatus('mandatory')
sfpsBlockSourceExcludeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsBlockSourceExcludeIndex"))
if mibBuilder.loadTexts: sfpsBlockSourceExcludeEntry.setStatus('mandatory')
sfpsBlockSourceExcludeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeIndex.setStatus('mandatory')
sfpsBlockSourceExcludeMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeMAC.setStatus('mandatory')
sfpsBlockSourceExcludeElapTimeShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeElapTimeShort.setStatus('mandatory')
sfpsBlockSourceExcludeNumCallsShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeNumCallsShort.setStatus('mandatory')
sfpsBlockSourceExcludeElapTimeLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeElapTimeLong.setStatus('mandatory')
sfpsBlockSourceExcludeNumCallLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeNumCallLong.setStatus('mandatory')
sfpsBlockSourceExcludeBlockFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("wouldBeBlocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeBlockFlag.setStatus('mandatory')
sfpsBlockSourceExcludeUnBlockableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unblockable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeUnBlockableFlag.setStatus('mandatory')
sfpsBlockSourceExcludeFilterPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeFilterPresent.setStatus('mandatory')
sfpsBlockSourceExcludeNext = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeNext.setStatus('mandatory')
sfpsBlockSourceExcludeBlockSourceOnlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeBlockSourceOnlyIndex.setStatus('mandatory')
sfpsBlockSourceStatsNumBlocks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsNumBlocks.setStatus('mandatory')
sfpsBlockSourceStatsNumCollisions = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsNumCollisions.setStatus('mandatory')
sfpsBlockSourceStatsLongestChain = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsLongestChain.setStatus('mandatory')
sfpsBlockSourceStatsNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsNumEntries.setStatus('mandatory')
sfpsBlockSourceStatsMaxNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsMaxNumEntries.setStatus('mandatory')
sfpsBlockSourceStatsSizeOfObj = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsSizeOfObj.setStatus('mandatory')
sfpsBlockSourceStatsHashModValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsHashModValue.setStatus('mandatory')
sfpsBlockSourceStatsHashSlotsSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsHashSlotsSize.setStatus('mandatory')
sfpsBlockSourceStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsTableSize.setStatus('mandatory')
sfpsBlockSourceStatsBlockSourceOnlySize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsBlockSourceOnlySize.setStatus('mandatory')
sfpsBlockSourceStatsUnblockableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsUnblockableSize.setStatus('mandatory')
sfpsBlockSourceStatsPortMaskSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsPortMaskSize.setStatus('mandatory')
sfpsBlockSourceStatsTotalHeapBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsTotalHeapBytes.setStatus('mandatory')
sfpsDHCPServerVLANName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 15, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDHCPServerVLANName.setStatus('mandatory')
sfpsDHCPServerVLANSingleFloodStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDHCPServerVLANSingleFloodStatus.setStatus('mandatory')
sfpsDHCPServerVLANVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDHCPServerVLANVersion.setStatus('mandatory')
sfpsATalkAMRVLANControlName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 16, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATalkAMRVLANControlName.setStatus('mandatory')
sfpsATalkAMRVLANControlVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATalkAMRVLANControlVersion.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-SFPS-BASE-MIB", sfpsBlockSourceElapTimeShort=sfpsBlockSourceElapTimeShort, sfpsBlockSourceStatsMaxNumEntries=sfpsBlockSourceStatsMaxNumEntries, sfpsBlockSourceAPIShortPeriod=sfpsBlockSourceAPIShortPeriod, sfpsDHCPServerVLANSingleFloodStatus=sfpsDHCPServerVLANSingleFloodStatus, sfpsBlockSourceAPIShortThreshold=sfpsBlockSourceAPIShortThreshold, sfpsBlockSourceExcludeFilterPresent=sfpsBlockSourceExcludeFilterPresent, sfpsServiceCenterFacilityHashLeaf=sfpsServiceCenterFacilityHashLeaf, sfpsATalkAMRVLANControlName=sfpsATalkAMRVLANControlName, sfpsBlockSourceExcludeTable=sfpsBlockSourceExcludeTable, sfpsBlockSourceStatsHashModValue=sfpsBlockSourceStatsHashModValue, sfpsBlockSourceAPILongPeriod=sfpsBlockSourceAPILongPeriod, sfpsCSPControlTableCSPType=sfpsCSPControlTableCSPType, sfpsServiceCenterFacilityRequests=sfpsServiceCenterFacilityRequests, sfpsBlockSourceStatsNumBlocks=sfpsBlockSourceStatsNumBlocks, sfpsATalkAMRVLANControlVersion=sfpsATalkAMRVLANControlVersion, sfpsBlockSourceExcludeNumCallsShort=sfpsBlockSourceExcludeNumCallsShort, sfpsBlockSourceBlocksOnlyIndex=sfpsBlockSourceBlocksOnlyIndex, sfpsCPResourcesTotalRate=sfpsCPResourcesTotalRate, sfpsBlockSourcePortEntry=sfpsBlockSourcePortEntry, sfpsBlockSourceStatsTotalHeapBytes=sfpsBlockSourceStatsTotalHeapBytes, sfpsBlockSourceFilterPresent=sfpsBlockSourceFilterPresent, sfpsCPResourcesAPIAdminStatus=sfpsCPResourcesAPIAdminStatus, sfpsCPResourcesNeedFlood=sfpsCPResourcesNeedFlood, sfpsCPResourcesDiscoverAll=sfpsCPResourcesDiscoverAll, sfpsDHCPServerVLANName=sfpsDHCPServerVLANName, sfpsBlockSourcePortTable=sfpsBlockSourcePortTable, sfpsCPResourcesDiscoverOnly=sfpsCPResourcesDiscoverOnly, sfpsBlockSourceOnlyNumCallLong=sfpsBlockSourceOnlyNumCallLong, sfpsCPResourcesPersistMask=sfpsCPResourcesPersistMask, SfpsAddress=SfpsAddress, sfpsCPResourcesDuplicate=sfpsCPResourcesDuplicate, sfpsCSPControlTable=sfpsCSPControlTable, sfpsBlockSourceOnlyIndex=sfpsBlockSourceOnlyIndex, sfpsServiceCenterFacilityTable=sfpsServiceCenterFacilityTable, sfpsCSPControlTableIndex=sfpsCSPControlTableIndex, sfpsBlockSourceOnlyNext=sfpsBlockSourceOnlyNext, sfpsCPResourcesConfigTime=sfpsCPResourcesConfigTime, sfpsCPResourcesTableName=sfpsCPResourcesTableName, sfpsCPResourcesAPI=sfpsCPResourcesAPI, sfpsCPResourcesSingleFlood=sfpsCPResourcesSingleFlood, sfpsBlockSourceMAC=sfpsBlockSourceMAC, sfpsBlockSourceBlockFlag=sfpsBlockSourceBlockFlag, sfpsBlockSourceExcludeNumCallLong=sfpsBlockSourceExcludeNumCallLong, sfpsBlockSourceElapTimeLong=sfpsBlockSourceElapTimeLong, sfpsBlockSourceNumCallLong=sfpsBlockSourceNumCallLong, sfpsBlockSourceExcludeUnBlockableFlag=sfpsBlockSourceExcludeUnBlockableFlag, sfpsServiceCenterFacilityEntry=sfpsServiceCenterFacilityEntry, sfpsBlockSourceAPIInputValue=sfpsBlockSourceAPIInputValue, sfpsBlockSourceStatsTableSize=sfpsBlockSourceStatsTableSize, sfpsDHCPServerVLANVersion=sfpsDHCPServerVLANVersion, sfpsCPResourcesConnectFlood=sfpsCPResourcesConnectFlood, sfpsCPResourcesPolicyError=sfpsCPResourcesPolicyError, sfpsCPResourcesConnectFail=sfpsCPResourcesConnectFail, sfpsCPResourcesAPIScope=sfpsCPResourcesAPIScope, sfpsCPResourcesConnectOK=sfpsCPResourcesConnectOK, sfpsServiceCenterFacilityAdminStatus=sfpsServiceCenterFacilityAdminStatus, sfpsBlockSourceExcludeBlockSourceOnlyIndex=sfpsBlockSourceExcludeBlockSourceOnlyIndex, sfpsBlockSourceStatsNumCollisions=sfpsBlockSourceStatsNumCollisions, sfpsBlockSourceAPIPort=sfpsBlockSourceAPIPort, sfpsCPResourcesNeedFilter=sfpsCPResourcesNeedFilter, sfpsCPResourcesResolveFail=sfpsCPResourcesResolveFail, HexInteger=HexInteger, sfpsBlockSourceExcludeIndex=sfpsBlockSourceExcludeIndex, sfpsCPResourcesPolicyFail=sfpsCPResourcesPolicyFail, sfpsBlockSourceAPIMAC=sfpsBlockSourceAPIMAC, sfpsCPResourcesAPIAttribute=sfpsCPResourcesAPIAttribute, sfpsCPResourcesNeedProxyOut=sfpsCPResourcesNeedProxyOut, sfpsServiceCenterFacilityMetric=sfpsServiceCenterFacilityMetric, sfpsBlockSourceIndex=sfpsBlockSourceIndex, sfpsBlockSourceOnlyElapTimeShort=sfpsBlockSourceOnlyElapTimeShort, sfpsCPResourcesTableOperStatus=sfpsCPResourcesTableOperStatus, sfpsBlockSourceExcludeElapTimeShort=sfpsBlockSourceExcludeElapTimeShort, sfpsBlockSourceStatsNumEntries=sfpsBlockSourceStatsNumEntries, sfpsCPResourcesTableAdminStatus=sfpsCPResourcesTableAdminStatus, sfpsCPResourcesTable=sfpsCPResourcesTable, sfpsBlockSourceExcludeNext=sfpsBlockSourceExcludeNext, sfpsBlockSourceStatsUnblockableSize=sfpsBlockSourceStatsUnblockableSize, sfpsBlockSourceOnlyNumCallsShort=sfpsBlockSourceOnlyNumCallsShort, sfpsBlockSourceAPIBlockStatus=sfpsBlockSourceAPIBlockStatus, sfpsBlockSourceOnlyTable=sfpsBlockSourceOnlyTable, sfpsCSPControlTableSwitchToCallProc=sfpsCSPControlTableSwitchToCallProc, sfpsBlockSourceExcludeBlockFlag=sfpsBlockSourceExcludeBlockFlag, sfpsBlockSourceStatsLongestChain=sfpsBlockSourceStatsLongestChain, sfpsCPResourcesNeedResolve=sfpsCPResourcesNeedResolve, sfpsBlockSourceAPILongThreshold=sfpsBlockSourceAPILongThreshold, sfpsCSPControlTablePktRate=sfpsCSPControlTablePktRate, sfpsCPResourcesAPIVerb=sfpsCPResourcesAPIVerb, sfpsBlockSourceOnlyMAC=sfpsBlockSourceOnlyMAC, sfpsBlockSourcePortPort=sfpsBlockSourcePortPort, sfpsCPResourcesDiscoverError=sfpsCPResourcesDiscoverError, sfpsBlockSourceStatsHashSlotsSize=sfpsBlockSourceStatsHashSlotsSize, sfpsCPResourcesConnectError=sfpsCPResourcesConnectError, sfpsBlockSourceOnlyFilterPresent=sfpsBlockSourceOnlyFilterPresent, sfpsCPResourcesAPIID=sfpsCPResourcesAPIID, sfpsServiceCenterFacilityOperStatus=sfpsServiceCenterFacilityOperStatus, sfpsBlockSourceExcludeElapTimeLong=sfpsBlockSourceExcludeElapTimeLong, sfpsServiceCenterFacilityReply=sfpsServiceCenterFacilityReply, sfpsBlockSourceStatsPortMaskSize=sfpsBlockSourceStatsPortMaskSize, sfpsCPResourcesTableEntry=sfpsCPResourcesTableEntry, sfpsCPResourcesTablePolicyFlood=sfpsCPResourcesTablePolicyFlood, sfpsBlockSourcePortBlockability=sfpsBlockSourcePortBlockability, sfpsCSPControlTableAdminStatus=sfpsCSPControlTableAdminStatus, sfpsBlockSourceEntry=sfpsBlockSourceEntry, sfpsServiceCenterFacilityName=sfpsServiceCenterFacilityName, sfpsBlockSourceOnlyBlockFlag=sfpsBlockSourceOnlyBlockFlag, sfpsCPResourcesTableId=sfpsCPResourcesTableId, sfpsCPResourcesInvalidNetDrops=sfpsCPResourcesInvalidNetDrops, sfpsBlockSourceOnlyEntry=sfpsBlockSourceOnlyEntry, sfpsServiceCenterFacilityStatusTime=sfpsServiceCenterFacilityStatusTime, sfpsBlockSourceTable=sfpsBlockSourceTable, sfpsBlockSourceOnlyUnBlockableFlag=sfpsBlockSourceOnlyUnBlockableFlag, sfpsCPResourcesAcceptRate=sfpsCPResourcesAcceptRate, sfpsBlockSourceOnlyElapTimeLong=sfpsBlockSourceOnlyElapTimeLong, sfpsBlockSourceUnBlockableFlag=sfpsBlockSourceUnBlockableFlag, sfpsCPResourcesAPIPersistance=sfpsCPResourcesAPIPersistance, sfpsBlockSourceNext=sfpsBlockSourceNext, sfpsCPResourcesTablePtsIn=sfpsCPResourcesTablePtsIn, sfpsCPResourcesNeedProxyIn=sfpsCPResourcesNeedProxyIn, sfpsCPResourcesResolveFlood=sfpsCPResourcesResolveFlood, sfpsCSPControlTableCSPName=sfpsCSPControlTableCSPName, sfpsCPResourcesTableStateTime=sfpsCPResourcesTableStateTime, sfpsBlockSourceExcludeMAC=sfpsBlockSourceExcludeMAC, sfpsBlockSourceStatsBlockSourceOnlySize=sfpsBlockSourceStatsBlockSourceOnlySize, sfpsCPResourcesNeedValidNet=sfpsCPResourcesNeedValidNet, sfpsBlockSourceOnlyBlocksOnlyIndex=sfpsBlockSourceOnlyBlocksOnlyIndex, sfpsCSPControlTableEntry=sfpsCSPControlTableEntry, sfpsBlockSourceStatsSizeOfObj=sfpsBlockSourceStatsSizeOfObj, sfpsBlockSourceAPIReapUserCnxs=sfpsBlockSourceAPIReapUserCnxs, sfpsCPResourcesResolveError=sfpsCPResourcesResolveError, sfpsBlockSourceExcludeEntry=sfpsBlockSourceExcludeEntry, sfpsBlockSourceNumCallsShort=sfpsBlockSourceNumCallsShort, sfpsCPResourcesNeedDiscover=sfpsCPResourcesNeedDiscover, sfpsCSPControlTablePktsProcessed=sfpsCSPControlTablePktsProcessed, sfpsBlockSourceAPIVerb=sfpsBlockSourceAPIVerb, sfpsCPResourcesTablePtsUsed=sfpsCPResourcesTablePtsUsed)
