#
# PySNMP MIB module SQUID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/squid/SQUID-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 12:26:26 2024
# On host fv-az1380-78 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Counter32, Unsigned32, TimeTicks, Bits, enterprises, Gauge32, Counter64, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Counter32", "Unsigned32", "TimeTicks", "Bits", "enterprises", "Gauge32", "Counter64", "MibIdentifier", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
squid = ModuleIdentity((1, 3, 6, 1, 4, 1, 3495, 1))
squid.setRevisions(('2008-12-24 02:00', '2007-12-14 00:00', '1999-01-01 00:00', '1998-09-22 00:00',))
if mibBuilder.loadTexts: squid.setLastUpdated('200812240200Z')
if mibBuilder.loadTexts: squid.setOrganization('National Laboratory for Applied Network Research')
nlanr = MibIdentifier((1, 3, 6, 1, 4, 1, 3495))
cacheSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 1))
cacheConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 2))
cachePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 3))
cacheNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 4))
cacheMesh = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 5))
cacheSysVMsize = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSysVMsize.setStatus('current')
cacheSysStorage = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSysStorage.setStatus('current')
cacheUptime = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheUptime.setStatus('current')
cacheAdmin = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAdmin.setStatus('current')
cacheSoftware = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSoftware.setStatus('current')
cacheVersionId = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheVersionId.setStatus('current')
cacheLoggingFacility = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacheLoggingFacility.setStatus('current')
cacheStorageConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 2, 5))
cacheMemMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMemMaxSize.setStatus('current')
cacheSwapMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSwapMaxSize.setStatus('current')
cacheSwapHighWM = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSwapHighWM.setStatus('current')
cacheSwapLowWM = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSwapLowWM.setStatus('current')
cacheUniqName = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheUniqName.setStatus('current')
cacheSysPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1))
cacheProtoStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2))
cacheSysPageFaults = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSysPageFaults.setStatus('current')
cacheSysNumReads = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSysNumReads.setStatus('current')
cacheMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMemUsage.setStatus('current')
cacheCpuTime = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCpuTime.setStatus('current')
cacheCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCpuUsage.setStatus('current')
cacheMaxResSize = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMaxResSize.setStatus('current')
cacheNumObjCount = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumObjCount.setStatus('current')
cacheCurrentLRUExpiration = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentLRUExpiration.setStatus('current')
cacheCurrentUnlinkRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentUnlinkRequests.setStatus('current')
cacheCurrentUnusedFDescrCnt = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentUnusedFDescrCnt.setStatus('current')
cacheCurrentResFileDescrCnt = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentResFileDescrCnt.setStatus('current')
cacheCurrentFileDescrCnt = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentFileDescrCnt.setStatus('current')
cacheCurrentFileDescrMax = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentFileDescrMax.setStatus('current')
cacheProtoAggregateStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1))
cacheProtoClientHttpRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheProtoClientHttpRequests.setStatus('current')
cacheHttpHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpHits.setStatus('current')
cacheHttpErrors = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpErrors.setStatus('current')
cacheHttpInKb = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpInKb.setStatus('current')
cacheHttpOutKb = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpOutKb.setStatus('current')
cacheIcpPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpPktsSent.setStatus('current')
cacheIcpPktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpPktsRecv.setStatus('current')
cacheIcpKbSent = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpKbSent.setStatus('current')
cacheIcpKbRecv = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpKbRecv.setStatus('current')
cacheServerRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerRequests.setStatus('current')
cacheServerErrors = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerErrors.setStatus('current')
cacheServerInKb = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerInKb.setStatus('current')
cacheServerOutKb = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerOutKb.setStatus('current')
cacheCurrentSwapSize = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurrentSwapSize.setStatus('current')
cacheClients = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClients.setStatus('current')
cacheMedianSvcTable = MibTable((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2), )
if mibBuilder.loadTexts: cacheMedianSvcTable.setStatus('current')
cacheMedianSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1), ).setIndexNames((0, "SQUID-MIB", "cacheMedianTime"))
if mibBuilder.loadTexts: cacheMedianSvcEntry.setStatus('current')
cacheMedianTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(5, 5), ValueRangeConstraint(60, 60), )))
if mibBuilder.loadTexts: cacheMedianTime.setStatus('current')
cacheHttpAllSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpAllSvcTime.setStatus('current')
cacheHttpMissSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpMissSvcTime.setStatus('current')
cacheHttpNmSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpNmSvcTime.setStatus('current')
cacheHttpHitSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpHitSvcTime.setStatus('current')
cacheIcpQuerySvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpQuerySvcTime.setStatus('current')
cacheIcpReplySvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIcpReplySvcTime.setStatus('current')
cacheDnsSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDnsSvcTime.setStatus('current')
cacheRequestHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRequestHitRatio.setStatus('current')
cacheRequestByteRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRequestByteRatio.setStatus('current')
cacheHttpNhSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 3, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHttpNhSvcTime.setStatus('current')
cacheIpCache = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1))
cacheFqdnCache = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2))
cacheDns = MibIdentifier((1, 3, 6, 1, 4, 1, 3495, 1, 4, 3))
cacheIpEntries = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpEntries.setStatus('current')
cacheIpRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpRequests.setStatus('current')
cacheIpHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpHits.setStatus('current')
cacheIpPendingHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpPendingHits.setStatus('current')
cacheIpNegativeHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpNegativeHits.setStatus('current')
cacheIpMisses = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheIpMisses.setStatus('current')
cacheBlockingGetHostByName = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBlockingGetHostByName.setStatus('current')
cacheAttemptReleaseLckEntries = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAttemptReleaseLckEntries.setStatus('current')
cacheFqdnEntries = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnEntries.setStatus('current')
cacheFqdnRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnRequests.setStatus('current')
cacheFqdnHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnHits.setStatus('current')
cacheFqdnPendingHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnPendingHits.setStatus('current')
cacheFqdnNegativeHits = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnNegativeHits.setStatus('current')
cacheFqdnMisses = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheFqdnMisses.setStatus('current')
cacheBlockingGetHostByAddr = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBlockingGetHostByAddr.setStatus('current')
cacheDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDnsRequests.setStatus('current')
cacheDnsReplies = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDnsReplies.setStatus('current')
cacheDnsNumberServers = MibScalar((1, 3, 6, 1, 4, 1, 3495, 1, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDnsNumberServers.setStatus('current')
cachePeerTable = MibTable((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1), )
if mibBuilder.loadTexts: cachePeerTable.setStatus('current')
cachePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3), ).setIndexNames((0, "SQUID-MIB", "cachePeerIndex"))
if mibBuilder.loadTexts: cachePeerEntry.setStatus('current')
class ValidPort(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class CachePeerTableIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

cachePeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 1), CachePeerTableIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerIndex.setStatus('current')
cachePeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerName.setStatus('current')
cachePeerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerAddressType.setStatus('current')
cachePeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerAddress.setStatus('current')
cachePeerPortHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 5), ValidPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerPortHttp.setStatus('current')
cachePeerPortIcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 6), ValidPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerPortIcp.setStatus('current')
cachePeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerType.setStatus('current')
cachePeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerState.setStatus('current')
cachePeerPingsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerPingsSent.setStatus('current')
cachePeerPingsAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerPingsAcked.setStatus('current')
cachePeerFetches = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerFetches.setStatus('current')
cachePeerRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerRtt.setStatus('current')
cachePeerIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerIgnored.setStatus('current')
cachePeerKeepAlSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerKeepAlSent.setStatus('current')
cachePeerKeepAlRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePeerKeepAlRecv.setStatus('current')
cacheClientTable = MibTable((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2), )
if mibBuilder.loadTexts: cacheClientTable.setStatus('current')
cacheClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 2), ).setIndexNames((0, "SQUID-MIB", "cacheClientAddress"))
if mibBuilder.loadTexts: cacheClientEntry.setStatus('current')
cacheClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 2, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientAddressType.setStatus('current')
cacheClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 2, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientAddress.setStatus('current')
cacheClientHttpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientHttpRequests.setStatus('current')
cacheClientHttpKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientHttpKb.setStatus('current')
cacheClientHttpHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientHttpHits.setStatus('current')
cacheClientHTTPHitKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientHTTPHitKb.setStatus('current')
cacheClientIcpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientIcpRequests.setStatus('current')
cacheClientIcpKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientIcpKb.setStatus('current')
cacheClientIcpHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientIcpHits.setStatus('current')
cacheClientIcpHitKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3495, 1, 5, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientIcpHitKb.setStatus('current')
mibBuilder.exportSymbols("SQUID-MIB", cachePeerIndex=cachePeerIndex, cacheDnsReplies=cacheDnsReplies, cacheIcpPktsRecv=cacheIcpPktsRecv, cacheHttpInKb=cacheHttpInKb, cacheMedianSvcEntry=cacheMedianSvcEntry, cacheFqdnPendingHits=cacheFqdnPendingHits, cacheIcpQuerySvcTime=cacheIcpQuerySvcTime, cacheBlockingGetHostByAddr=cacheBlockingGetHostByAddr, cachePeerAddress=cachePeerAddress, cacheAdmin=cacheAdmin, cacheSystem=cacheSystem, cachePeerPortIcp=cachePeerPortIcp, cacheNumObjCount=cacheNumObjCount, cacheHttpAllSvcTime=cacheHttpAllSvcTime, cacheFqdnCache=cacheFqdnCache, cacheIpMisses=cacheIpMisses, cacheFqdnMisses=cacheFqdnMisses, cachePeerRtt=cachePeerRtt, nlanr=nlanr, cacheIpHits=cacheIpHits, cacheServerInKb=cacheServerInKb, cacheServerOutKb=cacheServerOutKb, cacheClientHTTPHitKb=cacheClientHTTPHitKb, cacheUniqName=cacheUniqName, cacheDns=cacheDns, cacheCurrentSwapSize=cacheCurrentSwapSize, cacheCpuTime=cacheCpuTime, cacheMemMaxSize=cacheMemMaxSize, cacheSwapLowWM=cacheSwapLowWM, cacheIpEntries=cacheIpEntries, cacheFqdnEntries=cacheFqdnEntries, cacheIpNegativeHits=cacheIpNegativeHits, cacheDnsRequests=cacheDnsRequests, cachePeerAddressType=cachePeerAddressType, cacheClientHttpRequests=cacheClientHttpRequests, cachePeerTable=cachePeerTable, cacheProtoStats=cacheProtoStats, cacheHttpHits=cacheHttpHits, cacheHttpMissSvcTime=cacheHttpMissSvcTime, cacheIcpPktsSent=cacheIcpPktsSent, cacheCurrentResFileDescrCnt=cacheCurrentResFileDescrCnt, ValidPort=ValidPort, cacheIpRequests=cacheIpRequests, cacheLoggingFacility=cacheLoggingFacility, cacheSysNumReads=cacheSysNumReads, cacheClientAddress=cacheClientAddress, cachePeerKeepAlRecv=cachePeerKeepAlRecv, cacheClientHttpKb=cacheClientHttpKb, cachePeerEntry=cachePeerEntry, cacheSysStorage=cacheSysStorage, cachePeerKeepAlSent=cachePeerKeepAlSent, cacheCurrentUnlinkRequests=cacheCurrentUnlinkRequests, cachePeerPingsAcked=cachePeerPingsAcked, cacheClientIcpHitKb=cacheClientIcpHitKb, cacheClientHttpHits=cacheClientHttpHits, cacheHttpNhSvcTime=cacheHttpNhSvcTime, cacheMaxResSize=cacheMaxResSize, cachePeerPortHttp=cachePeerPortHttp, cacheCurrentLRUExpiration=cacheCurrentLRUExpiration, cacheSwapHighWM=cacheSwapHighWM, cacheFqdnRequests=cacheFqdnRequests, cacheClientEntry=cacheClientEntry, cacheCpuUsage=cacheCpuUsage, cacheIcpKbRecv=cacheIcpKbRecv, cacheServerRequests=cacheServerRequests, cacheSoftware=cacheSoftware, cacheClients=cacheClients, cacheSysVMsize=cacheSysVMsize, cacheClientIcpHits=cacheClientIcpHits, cacheProtoClientHttpRequests=cacheProtoClientHttpRequests, cacheNetwork=cacheNetwork, cacheServerErrors=cacheServerErrors, cacheMemUsage=cacheMemUsage, cachePeerIgnored=cachePeerIgnored, cacheIcpReplySvcTime=cacheIcpReplySvcTime, cachePeerName=cachePeerName, cacheAttemptReleaseLckEntries=cacheAttemptReleaseLckEntries, cacheProtoAggregateStats=cacheProtoAggregateStats, cacheMedianSvcTable=cacheMedianSvcTable, cacheIpPendingHits=cacheIpPendingHits, cacheRequestByteRatio=cacheRequestByteRatio, cacheSysPageFaults=cacheSysPageFaults, cacheDnsSvcTime=cacheDnsSvcTime, cacheHttpErrors=cacheHttpErrors, cachePeerPingsSent=cachePeerPingsSent, cachePerf=cachePerf, cacheVersionId=cacheVersionId, cacheFqdnHits=cacheFqdnHits, cacheConfig=cacheConfig, cacheClientIcpKb=cacheClientIcpKb, cacheFqdnNegativeHits=cacheFqdnNegativeHits, squid=squid, cacheStorageConfig=cacheStorageConfig, cacheMedianTime=cacheMedianTime, cacheBlockingGetHostByName=cacheBlockingGetHostByName, cacheCurrentUnusedFDescrCnt=cacheCurrentUnusedFDescrCnt, cacheClientTable=cacheClientTable, cachePeerFetches=cachePeerFetches, cacheIcpKbSent=cacheIcpKbSent, PYSNMP_MODULE_ID=squid, cacheRequestHitRatio=cacheRequestHitRatio, cacheHttpOutKb=cacheHttpOutKb, cacheCurrentFileDescrCnt=cacheCurrentFileDescrCnt, cacheHttpNmSvcTime=cacheHttpNmSvcTime, cacheIpCache=cacheIpCache, cacheSwapMaxSize=cacheSwapMaxSize, cacheClientAddressType=cacheClientAddressType, cachePeerState=cachePeerState, cacheMesh=cacheMesh, cacheCurrentFileDescrMax=cacheCurrentFileDescrMax, cacheHttpHitSvcTime=cacheHttpHitSvcTime, cacheClientIcpRequests=cacheClientIcpRequests, cacheDnsNumberServers=cacheDnsNumberServers, cachePeerType=cachePeerType, cacheUptime=cacheUptime, CachePeerTableIndex=CachePeerTableIndex, cacheSysPerf=cacheSysPerf)
