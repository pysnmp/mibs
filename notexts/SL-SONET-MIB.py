#
# PySNMP MIB module SL-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/packetlight/SL-SONET-MIB
# Produced by pysmi-1.1.12 at Wed Jun 26 13:37:57 2024
# On host fv-az1984-994 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
PerfTotalCount, PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfTotalCount", "PerfCurrentCount", "PerfIntervalCount")
sitelight, = mibBuilder.importSymbols("SL-NE-MIB", "sitelight")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Bits, Counter32, IpAddress, Gauge32, Integer32, ModuleIdentity, NotificationType, ObjectIdentity, MibIdentifier, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "Counter32", "IpAddress", "Gauge32", "Integer32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "MibIdentifier", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
slSonetMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4515, 1, 6))
if mibBuilder.loadTexts: slSonetMib.setLastUpdated('200008280000Z')
if mibBuilder.loadTexts: slSonetMib.setOrganization('PacketLight Networks Ltd.')
class SignalLabel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 18, 19, 20, 21, 22, 27))
    namedValues = NamedValues(("sigUnequipped", 0), ("sigEquipped", 1), ("sigPathFloatVt", 2), ("sigPathLoackedVt", 3), ("sigPathAsynchDs3", 4), ("sigPathSyntran", 5), ("sigPathAsyncDs4na", 18), ("sigPathAtm", 19), ("sigPathDqdb", 20), ("sigPathFddi", 21), ("sigPathHdlc", 22), ("sigPathGfp", 27))

slSonetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1))
slSonetOh = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2))
slSonetPos = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 6))
slSonetAls = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 7))
slSonetFs = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 8))
slSonetTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 11))
slSonetOhTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 1))
slSonetOhSl = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 2))
slSonetOhTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 3))
slSonetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1), )
if mibBuilder.loadTexts: slSonetConfigTable.setStatus('current')
slSonetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: slSonetConfigEntry.setStatus('current')
slSonetConfigFrameScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetConfigFrameScramble.setStatus('current')
slSonetConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("sonetSts3", 1), ("sonetSts3c", 2), ("sonetSts12", 3), ("sonetSts12c", 4), ("sonetSts48c", 5), ("sonetSts3cx4", 6), ("sonetSts48", 7), ("sonetSts3cx16", 8), ("sonetSts3x16", 9), ("sonetSts12cx4", 10), ("sonetSts12x4", 11), ("sonetSts192c", 12), ("sonetStsOther", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetConfigType.setStatus('current')
slSonetConfigDccSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sonetLineDcc", 1), ("sonetSectionDcc", 2), ("sonetInband", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetConfigDccSelection.setStatus('current')
slSonetResetAllCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetCounters", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetResetAllCounters.setStatus('current')
slSonetPortThresholdTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetPortThresholdTrapEnable.setStatus('current')
slSonetConfigSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetConfigSdThreshold.setStatus('current')
slSonetConfigSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetConfigSfThreshold.setStatus('current')
slSonetCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("uncompress", 0), ("posCompress32", 1), ("posCompress16", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetCompression.setStatus('current')
slSonetOverheadTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("lineDcc", 1), ("k1k2", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetOverheadTunneling.setStatus('current')
slSonetLopBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetLopBitmask.setStatus('current')
slSonetTdmTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetTdmTrunk.setStatus('current')
slSonetFsApply = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetFsApply.setStatus('current')
slSonetTxLte = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("ssb00", 1), ("ssb10", 2), ("auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetTxLte.setStatus('current')
slSonetReceivedLte = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ssb00", 1), ("ssb10", 2), ("ssb01", 3), ("ssb11", 4), ("ssbinv", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetReceivedLte.setStatus('current')
slSonetResetPmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetCounters", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetResetPmThreshold.setStatus('current')
slSonetResetAlsParams = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetCounters", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetResetAlsParams.setStatus('current')
slSonetTransceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("shortWave", 2), ("longWave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetTransceiverType.setStatus('current')
slSonetTransceiverMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sm", 2), ("mm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetTransceiverMedia.setStatus('current')
slSonetTraceTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 1, 1), )
if mibBuilder.loadTexts: slSonetTraceTable.setStatus('current')
slSonetTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: slSonetTraceEntry.setStatus('current')
slSonetTraceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("monitoring", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetTraceMode.setStatus('current')
slSonetTraceToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetTraceToTransmit.setStatus('current')
slSonetTraceToExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetTraceToExpect.setStatus('current')
slSonetTraceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetTraceFailure.setStatus('current')
slSonetTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetTraceReceived.setStatus('current')
slSonetSlTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 2, 1), )
if mibBuilder.loadTexts: slSonetSlTable.setStatus('current')
slSonetSlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: slSonetSlEntry.setStatus('current')
slSonetSlToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 2, 1, 1, 2), SignalLabel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetSlToTransmit.setStatus('current')
slSonetSlToExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 2, 1, 1, 3), SignalLabel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetSlToExpect.setStatus('current')
slSonetSlFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetSlFailure.setStatus('current')
slSonetSlReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetSlReceived.setStatus('current')
slSonetPosTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 6, 1), )
if mibBuilder.loadTexts: slSonetPosTable.setStatus('current')
slSonetPosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: slSonetPosEntry.setStatus('current')
slSonetPosFcs = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 6, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetPosFcs.setStatus('current')
slSonetPosAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 6, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetPosAbort.setStatus('current')
slSonetPosMinViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 6, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetPosMinViolation.setStatus('current')
slSonetPosMaxViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 6, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetPosMaxViolation.setStatus('current')
slSonetPosRxfifoDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 6, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetPosRxfifoDiscard.setStatus('current')
slSonetPosPacketReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 6, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetPosPacketReceived.setStatus('current')
slSonetPosPacketReceivedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 6, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetPosPacketReceivedOk.setStatus('current')
slSonetAlsTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 7, 1), )
if mibBuilder.loadTexts: slSonetAlsTable.setStatus('current')
slSonetAlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: slSonetAlsEntry.setStatus('current')
slSonetAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetAlsMode.setStatus('current')
slSonetLosDeclareTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ms500", 1), ("ms550", 2), ("ms600", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetLosDeclareTime.setStatus('current')
slSonetTestPulseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s80", 1), ("s90", 2), ("s100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetTestPulseTime.setStatus('current')
slSonetManualPulseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ms1750", 1), ("ms2000", 2), ("ms2250", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetManualPulseTime.setStatus('current')
slSonetAutomaticPulseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ms1750", 1), ("ms2000", 2), ("ms2250", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetAutomaticPulseTime.setStatus('current')
slSonetAutomaticDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetAutomaticDelayTime.setStatus('current')
slSonetLaserTestActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetLaserTestActivate.setStatus('current')
slSonetLaserManualActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetLaserManualActivate.setStatus('current')
slSonetFsTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 6, 8, 1), )
if mibBuilder.loadTexts: slSonetFsTable.setStatus('current')
slSonetFsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 6, 8, 1, 1), ).setIndexNames((0, "SL-SONET-MIB", "slSonetFsIfIndex"), (0, "SL-SONET-MIB", "slSonetFsSts"))
if mibBuilder.loadTexts: slSonetFsEntry.setStatus('current')
slSonetFsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 8, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetFsIfIndex.setStatus('current')
slSonetFsSts = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSonetFsSts.setStatus('current')
slSonetFsWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetFsWidth.setStatus('current')
slSonetFsFullPathTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 8, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetFsFullPathTermination.setStatus('current')
slSonetFsGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 6, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vc4", 1), ("vc3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSonetFsGranularity.setStatus('current')
slSonetFsTableChange = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 6, 11, 1)).setObjects(("SL-SONET-MIB", "slSonetFsIfIndex"))
if mibBuilder.loadTexts: slSonetFsTableChange.setStatus('current')
mibBuilder.exportSymbols("SL-SONET-MIB", slSonetResetAllCounters=slSonetResetAllCounters, slSonetSlReceived=slSonetSlReceived, slSonetPosMinViolation=slSonetPosMinViolation, slSonetSlToExpect=slSonetSlToExpect, slSonetPosPacketReceived=slSonetPosPacketReceived, slSonetAlsMode=slSonetAlsMode, slSonetOhTraps=slSonetOhTraps, slSonetConfigSdThreshold=slSonetConfigSdThreshold, slSonetPosTable=slSonetPosTable, slSonetCompression=slSonetCompression, slSonetConfigSfThreshold=slSonetConfigSfThreshold, slSonetOverheadTunneling=slSonetOverheadTunneling, slSonetTraceTable=slSonetTraceTable, slSonetTraceEntry=slSonetTraceEntry, slSonetPosEntry=slSonetPosEntry, slSonetManualPulseTime=slSonetManualPulseTime, slSonetTraceReceived=slSonetTraceReceived, slSonetConfigDccSelection=slSonetConfigDccSelection, slSonetConfigType=slSonetConfigType, slSonetSlToTransmit=slSonetSlToTransmit, slSonetAutomaticPulseTime=slSonetAutomaticPulseTime, slSonetFsApply=slSonetFsApply, slSonetAls=slSonetAls, slSonetPosFcs=slSonetPosFcs, slSonetLosDeclareTime=slSonetLosDeclareTime, slSonetOhSl=slSonetOhSl, slSonetConfigTable=slSonetConfigTable, slSonetResetPmThreshold=slSonetResetPmThreshold, slSonetAutomaticDelayTime=slSonetAutomaticDelayTime, slSonetOh=slSonetOh, slSonetFsEntry=slSonetFsEntry, slSonetConfigEntry=slSonetConfigEntry, slSonetTransceiverMedia=slSonetTransceiverMedia, slSonetSlFailure=slSonetSlFailure, slSonetOhTrace=slSonetOhTrace, slSonetFsIfIndex=slSonetFsIfIndex, slSonetAlsEntry=slSonetAlsEntry, slSonetLaserTestActivate=slSonetLaserTestActivate, slSonetTraceToTransmit=slSonetTraceToTransmit, slSonetFsWidth=slSonetFsWidth, slSonetTxLte=slSonetTxLte, slSonetPortThresholdTrapEnable=slSonetPortThresholdTrapEnable, slSonetFs=slSonetFs, slSonetFsTableChange=slSonetFsTableChange, slSonetConfigFrameScramble=slSonetConfigFrameScramble, slSonetPosRxfifoDiscard=slSonetPosRxfifoDiscard, slSonetAlsTable=slSonetAlsTable, slSonetSlEntry=slSonetSlEntry, PYSNMP_MODULE_ID=slSonetMib, slSonetFsSts=slSonetFsSts, slSonetConfig=slSonetConfig, slSonetTdmTrunk=slSonetTdmTrunk, slSonetTransceiverType=slSonetTransceiverType, slSonetFsTable=slSonetFsTable, slSonetReceivedLte=slSonetReceivedLte, slSonetSlTable=slSonetSlTable, slSonetPos=slSonetPos, slSonetLopBitmask=slSonetLopBitmask, slSonetTraceToExpect=slSonetTraceToExpect, slSonetPosAbort=slSonetPosAbort, slSonetResetAlsParams=slSonetResetAlsParams, slSonetTraps=slSonetTraps, slSonetFsGranularity=slSonetFsGranularity, slSonetMib=slSonetMib, slSonetPosMaxViolation=slSonetPosMaxViolation, slSonetTraceFailure=slSonetTraceFailure, slSonetLaserManualActivate=slSonetLaserManualActivate, slSonetTestPulseTime=slSonetTestPulseTime, slSonetFsFullPathTermination=slSonetFsFullPathTermination, slSonetPosPacketReceivedOk=slSonetPosPacketReceivedOk, slSonetTraceMode=slSonetTraceMode, SignalLabel=SignalLabel)
