#
# PySNMP MIB module BWA-DOT11-WLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alvarion/BWA-DOT11-WLAN-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:58:39 2024
# On host fv-az914-826 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, Bits, Integer32, TimeTicks, Counter32, enterprises, iso, IpAddress, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Bits", "Integer32", "TimeTicks", "Counter32", "enterprises", "iso", "IpAddress", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bwa = MibIdentifier((1, 3, 6, 1, 4, 1, 12394))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1))
bwaVLMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 12394, 1, 1))
bwaVLMib.setRevisions(('1907-08-14 11:46',))
if mibBuilder.loadTexts: bwaVLMib.setLastUpdated('0708141146Z')
if mibBuilder.loadTexts: bwaVLMib.setOrganization('BWA Products')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(OctetString):
    pass

bwaOID = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4))
bwaVLOID = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1))
bwaVLAU = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 1))
bwaVLSU = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 2))
bwaVLAU_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 4)).setLabel("bwaVLAU-BS")
bwaVLAU_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 5)).setLabel("bwaVLAU-SA")
bwaVLAUS_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 6)).setLabel("bwaVLAUS-BS")
bwaVLAUS_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 7)).setLabel("bwaVLAUS-SA")
bwaVLAU_EZ = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 8)).setLabel("bwaVLAU-EZ")
bwaVLSU_6_1D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 11)).setLabel("bwaVLSU-6-1D")
bwaVLSU_6_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 12)).setLabel("bwaVLSU-6-BD")
bwaVLSU_24_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 13)).setLabel("bwaVLSU-24-BD")
bwaVLSU_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 14)).setLabel("bwaVLSU-BD")
bwaVLSU_54_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 15)).setLabel("bwaVLSU-54-BD")
bwaVLSU_3_1D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 16)).setLabel("bwaVLSU-3-1D")
bwaVLSU_3_4D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 17)).setLabel("bwaVLSU-3-4D")
bwaVLSU_I = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 18)).setLabel("bwaVLSU-I")
ptp_BU_B14 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 21)).setLabel("ptp-BU-B14")
ptp_BU_B28 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 22)).setLabel("ptp-BU-B28")
ptp_BU_B100 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 23)).setLabel("ptp-BU-B100")
ptp_RB_B14 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 31)).setLabel("ptp-RB-B14")
ptp_RB_B28 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 32)).setLabel("ptp-RB-B28")
ptp_RB_B100 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 33)).setLabel("ptp-RB-B100")
bwa4900_AU_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 41)).setLabel("bwa4900-AU-BS")
bwa4900_AU_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 42)).setLabel("bwa4900-AU-SA")
bwa4900_SU_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 51)).setLabel("bwa4900-SU-BD")
bwaVLProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3))
bwaVLSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1))
bwaVLUnitHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLUnitHwVersion.setStatus('current')
bwaVLRunningSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLRunningSoftwareVersion.setStatus('current')
bwaVLRunningFrom = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mainVersion", 1), ("shadowVersion", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLRunningFrom.setStatus('current')
bwaVLMainVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMainVersionNumber.setStatus('current')
bwaVLMainVersionFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMainVersionFileName.setStatus('current')
bwaVLShadowVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLShadowVersionNumber.setStatus('current')
bwaVLShadowVersionFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLShadowVersionFileName.setStatus('current')
bwaVLUnitMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLUnitMacAddress.setStatus('current')
bwaVLUnitType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("auBS", 1), ("auSA", 2), ("su-6-1D", 3), ("su-6-BD", 4), ("su-24-BD", 5), ("bu-B14", 6), ("bu-B28", 7), ("rb-B14", 8), ("rb-B28", 9), ("su-BD", 10), ("su-54-BD", 11), ("su-3-1D", 12), ("su-3-4D", 13), ("ausBS", 14), ("ausSA", 15), ("auBS4900", 16), ("auSA4900", 17), ("su4900", 18), ("bu-B100", 19), ("rb-B100", 20), ("su-I", 21), ("au-E", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLUnitType.setStatus('current')
bwaVLAssociatedAU = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAssociatedAU.setStatus('current')
bwaVLNumOfAssociationsSinceLastReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNumOfAssociationsSinceLastReset.setStatus('current')
bwaVLCurrentNumOfAssociations = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCurrentNumOfAssociations.setStatus('current')
bwaVLUnitBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLUnitBootVersion.setStatus('current')
bwaVLRadioBand = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("band-5-8GHz", 1), ("band-5-4GHz", 2), ("band-4-9GHz", 3), ("band-5-2GHz", 4), ("band-2-4GHz", 5), ("band-5-3GHz", 6), ("band-4-9GHzJapan", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLRadioBand.setStatus('current')
bwaVLCurrentEthernetPortState = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("halfDuplexAnd10Mbps", 1), ("fullDuplexAnd10Mbps", 2), ("halfDuplexAnd100Mbps", 3), ("fullDuplexAnd100Mbps", 4), ("linkDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCurrentEthernetPortState.setStatus('current')
bwaVLTimeSinceLastReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTimeSinceLastReset.setStatus('current')
bwaVLCountryDependentParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18))
bwaVLCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCountryCode.setStatus('current')
bwaVLCountryDependentParamsTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2), )
if mibBuilder.loadTexts: bwaVLCountryDependentParamsTable.setStatus('current')
bwaVLCountryDependentParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLCountryDependentParameterTableIdx"))
if mibBuilder.loadTexts: bwaVLCountryDependentParameterEntry.setStatus('current')
bwaVLCountryDependentParameterTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCountryDependentParameterTableIdx.setStatus('current')
bwaVLCountryDependentParameterFrequencies = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCountryDependentParameterFrequencies.setStatus('current')
bwaVLAllowedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAllowedBandwidth.setStatus('current')
bwaVLRegulationMaxTxPowerAtAntennaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLRegulationMaxTxPowerAtAntennaPort.setStatus('current')
bwaVLRegulationMaxEIRP = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLRegulationMaxEIRP.setStatus('current')
bwaVLMinModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMinModulationLevel.setStatus('current')
bwaVLMaxModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMaxModulationLevel.setStatus('current')
bwaVLBurstModeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLBurstModeSupport.setStatus('current')
bwaVLMaximumBurstDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMaximumBurstDuration.setStatus('current')
bwaVLDfsSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDfsSupport.setStatus('current')
bwaVLMinimumHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMinimumHwRevision.setStatus('current')
bwaVLAuthenticationEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAuthenticationEncryptionSupport.setStatus('current')
bwaVLDataEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDataEncryptionSupport.setStatus('current')
bwaVLAESEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAESEncryptionSupport.setStatus('current')
bwaVLAntennaGainChange = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAntennaGainChange.setStatus('current')
bwaVLAteTestResults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("pass", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAteTestResults.setStatus('current')
bwaVLSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSerialNumber.setStatus('current')
bwaVLUnitControl = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2))
bwaVLResetUnit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancel", 1), ("resetSystemNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLResetUnit.setStatus('current')
bwaVLSetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noDefaultSettingRequested", 0), ("completeFactory", 1), ("partialFactory", 2), ("completeOperator", 3), ("partialOperator", 4), ("cancelCurrentPendingRequest", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSetDefaults.setStatus('current')
bwaVLUnitName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLUnitName.setStatus('current')
bwaVLFlashMemoryControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("resetAndBootFromShadowVersion", 1), ("useRunningVersionAfterReset", 2), ("cancel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFlashMemoryControl.setStatus('current')
bwaVLTelnetLogoutTimer = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLTelnetLogoutTimer.setStatus('current')
bwaVLSaveCurrentConfigurationAsOperatorDefaults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveAsDefaults", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSaveCurrentConfigurationAsOperatorDefaults.setStatus('current')
bwaVLExitTelnet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("exit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLExitTelnet.setStatus('current')
bwaVLUnitPasswords = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8))
bwaVLReadOnlyPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLReadOnlyPassword.setStatus('current')
bwaVLInstallerPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLInstallerPassword.setStatus('current')
bwaVLAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAdminPassword.setStatus('current')
bwaVLEthernetNegotiationMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("force10MbpsAndHalfDuplex", 1), ("force10MbpsAndFullDuplex", 2), ("force100MbpsAndHalfDuplex", 3), ("force100MbpsAndFullDuplex", 4), ("autoNegotiationMode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLEthernetNegotiationMode.setStatus('current')
bwaVLFTPParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10))
bwaVLFTPServerParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1))
bwaVLFTPServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFTPServerUserName.setStatus('current')
bwaVLFTPServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFTPServerPassword.setStatus('current')
bwaVLFTPClientIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFTPClientIPAddress.setStatus('current')
bwaVLFTPServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFTPServerIpAddress.setStatus('current')
bwaVLFTPClientMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFTPClientMask.setStatus('current')
bwaVLFTPGatewayIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFTPGatewayIpAddress.setStatus('current')
bwaVLFTPSwDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2))
bwaVLFTPSwFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFTPSwFileName.setStatus('current')
bwaVLFTPSwSourceDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFTPSwSourceDir.setStatus('current')
bwaVLFTPDownloadSwFile = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("downloadFile", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFTPDownloadSwFile.setStatus('current')
bwaVLConfigurationFileLoading = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3))
bwaVLConfigurationFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLConfigurationFileName.setStatus('current')
bwaVLOperatorDefaultsFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLOperatorDefaultsFileName.setStatus('current')
bwaVLFTPConfigurationFileSourceDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFTPConfigurationFileSourceDir.setStatus('current')
bwaVLExecuteFTPConfigurationFileLoading = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("executeFTPGetConfigurationFile", 1), ("executeFTPPutConfigurationFile", 2), ("executeFTPGetOperatorDefaults", 3), ("executeFTPPutOperatorDefaults", 4), ("cancel", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLExecuteFTPConfigurationFileLoading.setStatus('current')
bwaVLEventLogFileUploading = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4))
bwaVLEventLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLEventLogFileName.setStatus('current')
bwaVLEventLogDestinationDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLEventLogDestinationDir.setStatus('current')
bwaVLUploadEventLogFile = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uploadFile", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLUploadEventLogFile.setStatus('current')
bwaVLLoadingStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProcess", 1), ("successful", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLLoadingStatus.setStatus('current')
bwaVLEventLogFileParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12))
bwaVLEventLogPolicy = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("message", 1), ("warning", 2), ("error", 3), ("fatal", 4), ("logNone", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLEventLogPolicy.setStatus('current')
bwaVLEraseEventLog = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eraseEventLog", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLEraseEventLog.setStatus('current')
bwaVLSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSystemLocation.setStatus('current')
bwaVLFeatureUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 14))
bwaVLFeatureUpgradeManually = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFeatureUpgradeManually.setStatus('current')
bwaVLChangeUnitType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bu", 1), ("rb", 2), ("cancel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLChangeUnitType.setStatus('current')
bwaLighteAPWorkingMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaLighteAPWorkingMode.setStatus('current')
bwaVLNwMngParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3))
bwaVLAccessToNwMng = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("fromWirelessOnly", 1), ("fromEthernetOnly", 2), ("fromBothWirelessAndEthernet", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAccessToNwMng.setStatus('current')
bwaVLNwMngFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("activateOnEthernetPort", 2), ("activateOnWirelessPort", 3), ("activateOnBothWirelessAndEthernet", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLNwMngFilter.setStatus('current')
mngIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3), )
if mibBuilder.loadTexts: mngIpFilterTable.setStatus('current')
mngIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLNwMngIpTableIdx"))
if mibBuilder.loadTexts: mngIpFilterEntry.setStatus('current')
bwaVLNwMngIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLNwMngIpAddress.setStatus('current')
bwaVLNwMngIpTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNwMngIpTableIdx.setStatus('current')
bwaVLDeleteOneNwIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDeleteOneNwIpAddr.setStatus('current')
bwaVLDeleteAllNwIpAddrs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDeleteAllNwIpAddrs.setStatus('current')
bwaVLAccessToNwTrap = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAccessToNwTrap.setStatus('current')
mngTrapTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7), )
if mibBuilder.loadTexts: mngTrapTable.setStatus('current')
mngTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLNwTrapTableIdx"))
if mibBuilder.loadTexts: mngTrapEntry.setStatus('current')
bwaVLNwMngTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLNwMngTrapCommunity.setStatus('current')
bwaVLNwMngTrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLNwMngTrapAddress.setStatus('current')
bwaVLNwTrapTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNwTrapTableIdx.setStatus('current')
bwaVLDeleteOneTrapAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDeleteOneTrapAddr.setStatus('current')
bwaVLDeleteAllTrapAddrs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDeleteAllTrapAddrs.setStatus('current')
bwaVLMngIpRangesTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10), )
if mibBuilder.loadTexts: bwaVLMngIpRangesTable.setStatus('current')
bwaVLMngIpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLMngIpRangeIdx"))
if mibBuilder.loadTexts: bwaVLMngIpRangeEntry.setStatus('current')
bwaVLMngIpRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMngIpRangeIdx.setStatus('current')
bwaVLMngIpRangeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rangeDefinedByStartEndAddr", 1), ("rangeDefinedByStartAddrMask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMngIpRangeFlag.setStatus('current')
bwaVLMngIpRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMngIpRangeStart.setStatus('current')
bwaVLMngIpRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMngIpRangeEnd.setStatus('current')
bwaVLMngIpRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMngIpRangeMask.setStatus('current')
bwaVLDeleteOneNwIpRange = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDeleteOneNwIpRange.setStatus('current')
bwaVLDeleteAllNwIpRanges = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDeleteAllNwIpRanges.setStatus('current')
bwaVLApClientIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLApClientIpAddress.setStatus('current')
bwaVLIpParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4))
bwaVLUnitIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLUnitIpAddress.setStatus('current')
bwaVLSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSubNetMask.setStatus('current')
bwaVLDefaultGWAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDefaultGWAddress.setStatus('current')
bwaVLUseDhcp = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("dhcpOnly", 2), ("automatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLUseDhcp.setStatus('current')
bwaVLAccessToDHCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fromWirelessOnly", 1), ("fromEthernetOnly", 2), ("fromBothWirelessAndEthernet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAccessToDHCP.setStatus('current')
bwaVLRunTimeIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLRunTimeIPaddr.setStatus('current')
bwaVLRunTimeSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLRunTimeSubNetMask.setStatus('current')
bwaVLRunTimeDefaultIPGateway = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLRunTimeDefaultIPGateway.setStatus('current')
bwaVLBridgeParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5))
bwaVLVLANSupport = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1))
bwaVLVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLVlanID.setStatus('current')
bwaVLEthernetLinkType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("accessLink", 1), ("trunkLink", 2), ("hybridLink", 3), ("serviceProviderLink", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLEthernetLinkType.setStatus('current')
bwaVLManagementVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLManagementVlanID.setStatus('current')
bwaVLVLANForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4))
bwaVLVlanForwardingSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLVlanForwardingSupport.setStatus('current')
bwaVLVlanForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2), )
if mibBuilder.loadTexts: bwaVLVlanForwardingTable.setStatus('current')
bwaVLVlanForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLVlanForwardingTableIdx"))
if mibBuilder.loadTexts: bwaVLVlanForwardingEntry.setStatus('current')
bwaVLVlanForwardingTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLVlanForwardingTableIdx.setStatus('current')
bwaVLVlanIdForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLVlanIdForwarding.setStatus('current')
bwaVLVlanRelaying = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5))
bwaVLVlanRelayingSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLVlanRelayingSupport.setStatus('current')
bwaVLVlanRelayingTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2), )
if mibBuilder.loadTexts: bwaVLVlanRelayingTable.setStatus('current')
bwaVLVlanRelayingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLVlanRelayingTableIdx"))
if mibBuilder.loadTexts: bwaVLVlanRelayingEntry.setStatus('current')
bwaVLVlanRelayingTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLVlanRelayingTableIdx.setStatus('current')
bwaVLVlanIdRelaying = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLVlanIdRelaying.setStatus('current')
bwaVLVLANTrafficPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6))
bwaVLVlanDataPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLVlanDataPriority.setStatus('current')
bwaVLVlanManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLVlanManagementPriority.setStatus('current')
bwaVLVlanPriorityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLVlanPriorityThreshold.setStatus('current')
bwaVLVLANQinQ = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7))
bwaVLQinQEthertype = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(33025, 36864), ValueRangeConstraint(37120, 37120), ValueRangeConstraint(37376, 37376), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLQinQEthertype.setStatus('current')
bwaVLQinQProviderVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLQinQProviderVlanID.setStatus('current')
bwaVLBridgeAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLBridgeAgingTime.setStatus('current')
bwaVLBroadcastRelaying = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("broadcastMulticastEnable", 2), ("broadcastEnable", 3), ("multicastEnable", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLBroadcastRelaying.setStatus('current')
bwaVLUnicastRelaying = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLUnicastRelaying.setStatus('current')
bwaVLEthBroadcastFiltering = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("onEthernetOnly", 2), ("onWirelessOnly", 3), ("onBothWirelessAndEthernet", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLEthBroadcastFiltering.setStatus('current')
bwaVLEthBroadcastingParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7))
bwaVLDHCPBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDHCPBroadcastOverrideFilter.setStatus('current')
bwaVLPPPoEBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLPPPoEBroadcastOverrideFilter.setStatus('current')
bwaVLARPBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLARPBroadcastOverrideFilter.setStatus('current')
bwaVLEthBroadcastMulticastLimiterOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("limitOnlyBroadcasts", 2), ("limitMulticastsExceptBroadcasts", 3), ("limitAllMulticasts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLEthBroadcastMulticastLimiterOption.setStatus('current')
bwaVLEthBroadcastMulticastLimiterThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLEthBroadcastMulticastLimiterThreshold.setStatus('current')
bwaVLEthBroadcastMulticastLimiterSendTrapInterval = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLEthBroadcastMulticastLimiterSendTrapInterval.setStatus('current')
bwaVLToSPriorityParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 8))
bwaVLToSPrecedenceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLToSPrecedenceThreshold.setStatus('current')
bwaVLRoamingOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLRoamingOption.setStatus('current')
bwaVLMacAddressDenyList = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10))
bwaVLMacAddressDenyListTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1), )
if mibBuilder.loadTexts: bwaVLMacAddressDenyListTable.setStatus('current')
bwaVLMacAddressDenyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLMacAddressDenyListTableIdx"))
if mibBuilder.loadTexts: bwaVLMacAddressDenyListEntry.setStatus('current')
bwaVLMacAddressDenyListTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMacAddressDenyListTableIdx.setStatus('current')
bwaVLMacAddressDenyListId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMacAddressDenyListId.setStatus('current')
bwaVLMacAddressDenyListAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMacAddressDenyListAdd.setStatus('current')
bwaVLMacAddressDenyListRemove = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMacAddressDenyListRemove.setStatus('current')
bwaVLNumberOfMacAddressesInDenyList = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNumberOfMacAddressesInDenyList.setStatus('current')
bwaVLMacAddressDenyListAction = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("denyList", 1), ("allowedList", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMacAddressDenyListAction.setStatus('current')
bwaVLPortsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 11))
bwaVLEthernetPortControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLEthernetPortControl.setStatus('current')
bwaVLAirInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6))
bwaVLESSIDParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1))
bwaVLESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLESSID.setStatus('current')
bwaVLOperatorESSIDOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLOperatorESSIDOption.setStatus('current')
bwaVLOperatorESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLOperatorESSID.setStatus('current')
bwaVLRunTimeESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 31)).setFixedLength(31)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLRunTimeESSID.setStatus('current')
bwaVLMaximumCellRadius = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMaximumCellRadius.setStatus('current')
bwaVLAIFS = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneSlot", 1), ("twoSlots", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAIFS.setStatus('current')
bwaVLWirelessTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLWirelessTrapThreshold.setStatus('current')
bwaVLTransmitPowerTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5), )
if mibBuilder.loadTexts: bwaVLTransmitPowerTable.setStatus('current')
bwaVLTransmitPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLTransmitPowerIdx"))
if mibBuilder.loadTexts: bwaVLTransmitPowerEntry.setStatus('current')
bwaVLTransmitPowerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTransmitPowerIdx.setStatus('current')
bwaVLApplicableModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("level1to5", 1), ("level6", 2), ("level7", 3), ("level8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLApplicableModulationLevel.setStatus('current')
bwaVLMaximumTxPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMaximumTxPowerRange.setStatus('current')
bwaVLTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLTxPower.setStatus('current')
bwaVLCurrentTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCurrentTxPower.setStatus('current')
bwaVLMaximumTransmitPowerTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6), )
if mibBuilder.loadTexts: bwaVLMaximumTransmitPowerTable.setStatus('current')
bwaVLMaximumTransmitPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLMaximumTransmitPowerIdx"))
if mibBuilder.loadTexts: bwaVLMaximumTransmitPowerEntry.setStatus('current')
bwaVLMaximumTransmitPowerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMaximumTransmitPowerIdx.setStatus('current')
bwaVLMaxTxApplicableModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("level1to5", 1), ("level6", 2), ("level7", 3), ("level8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMaxTxApplicableModulationLevel.setStatus('current')
bwaVLDefinedMaximumTxPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDefinedMaximumTxPowerRange.setStatus('current')
bwaVLMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMaxTxPower.setStatus('current')
bwaVLMaxNumOfAssociations = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMaxNumOfAssociations.setStatus('current')
bwaVLBestAu = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11))
bwaVLBestAuSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLBestAuSupport.setStatus('current')
bwaVLBestAuNoOfScanningAttempts = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLBestAuNoOfScanningAttempts.setStatus('current')
bwaVLPreferredAuMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLPreferredAuMacAddress.setStatus('current')
bwaVLNeighborAuTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4), )
if mibBuilder.loadTexts: bwaVLNeighborAuTable.setStatus('current')
bwaVLNeighborAuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLNeighborAuIdx"))
if mibBuilder.loadTexts: bwaVLNeighborAuEntry.setStatus('current')
bwaVLNeighborAuIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuIdx.setStatus('current')
bwaVLNeighborAuMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuMacAdd.setStatus('current')
bwaVLNeighborAuESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuESSID.setStatus('current')
bwaVLNeighborAuSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuSNR.setStatus('current')
bwaVLNeighborAuAssocLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("full", 1), ("notFull", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuAssocLoadStatus.setStatus('current')
bwaVLNeighborAuMark = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuMark.setStatus('current')
bwaVLNeighborAuHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuHwRevision.setStatus('current')
bwaVLNeighborAuCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuCountryCode.setStatus('current')
bwaVLNeighborAuSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuSwVer.setStatus('current')
bwaVLNeighborAuAtpcOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuAtpcOption.setStatus('current')
bwaVLNeighborAuAdapModOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuAdapModOption.setStatus('current')
bwaVLNeighborAuBurstModeOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuBurstModeOption.setStatus('current')
bwaVLNeighborAuDfsOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuDfsOption.setStatus('current')
bwaVLNeighborAuConcatenationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuConcatenationOption.setStatus('current')
bwaVLNeighborAuLearnCountryCodeBySU = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuLearnCountryCodeBySU.setStatus('current')
bwaVLNeighborAuSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("wep", 1), ("aesOCB", 2), ("fips197", 3), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuSecurityMode.setStatus('current')
bwaVLNeighborAuAuthOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuAuthOption.setStatus('current')
bwaVLNeighborAuDataEncyptOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuDataEncyptOption.setStatus('current')
bwaVLNeighborAuPerSuDistanceLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNeighborAuPerSuDistanceLearning.setStatus('current')
bwaVLFrequencyDefinition = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12))
bwaVLSubBandLowerFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSubBandLowerFrequency.setStatus('obsolete')
bwaVLSubBandUpperFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSubBandUpperFrequency.setStatus('obsolete')
bwaVLScanningStep = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("mhz-5", 1), ("mhz-10", 2), ("mhz-20", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLScanningStep.setStatus('current')
bwaVLFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4), )
if mibBuilder.loadTexts: bwaVLFrequencySubsetTable.setStatus('current')
bwaVLFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLFrequencySubsetTableIdx"))
if mibBuilder.loadTexts: bwaVLFrequencySubsetEntry.setStatus('current')
bwaVLFrequencySubsetTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLFrequencySubsetTableIdx.setStatus('current')
bwaVLFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLFrequencySubsetFrequency.setStatus('current')
bwaVLFrequencySubsetActive = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFrequencySubsetActive.setStatus('current')
bwaVLFrequencySubsetFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFrequencySubsetFrequencyNew.setStatus('current')
bwaVLSetSelectedFreqSubset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setSelectedFreqsSubset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSetSelectedFreqSubset.setStatus('current')
bwaVLCurrentFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6), )
if mibBuilder.loadTexts: bwaVLCurrentFrequencySubsetTable.setStatus('current')
bwaVLCurrentFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLCurrentFrequencySubsetTableIdx"))
if mibBuilder.loadTexts: bwaVLCurrentFrequencySubsetEntry.setStatus('current')
bwaVLCurrentFrequencySubsetTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCurrentFrequencySubsetTableIdx.setStatus('current')
bwaVLCurrentFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCurrentFrequencySubsetFrequency.setStatus('current')
bwaVLCurrentFrequencySubsetFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCurrentFrequencySubsetFrequencyNew.setStatus('current')
bwaVLCurrentAUOperatingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCurrentAUOperatingFrequency.setStatus('current')
bwaVLCurrentAUOperatingFrequencyNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCurrentAUOperatingFrequencyNew.setStatus('current')
bwaVLAUDefinedFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAUDefinedFrequency.setStatus('current')
bwaVLAUDefinedFrequencyNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAUDefinedFrequencyNew.setStatus('current')
bwaVLCurrentSUOperatingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCurrentSUOperatingFrequency.setStatus('current')
bwaVLSubBandSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 10))
bwaVLSelectSubBandIndex = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSelectSubBandIndex.setStatus('current')
bwaVLDFSParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11))
bwaVLDFSOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDFSOption.setStatus('current')
bwaVLDFSChannelCheckTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDFSChannelCheckTime.setStatus('current')
bwaVLDFSChannelAvoidancePeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDFSChannelAvoidancePeriod.setStatus('current')
bwaVLDFSSuWaitingOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDFSSuWaitingOption.setStatus('current')
bwaVLDFSClearRadarDetectedChannelsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("cancel", 1), ("clearRadarChannels", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDFSClearRadarDetectedChannelsAfterReset.setStatus('current')
bwaVLDFSRadarDetectionChannelsTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7), )
if mibBuilder.loadTexts: bwaVLDFSRadarDetectionChannelsTable.setStatus('current')
bwaVLDFSRadarDetectionChannelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLDFSChannelIdx"))
if mibBuilder.loadTexts: bwaVLDFSRadarDetectionChannelsEntry.setStatus('current')
bwaVLDFSChannelIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDFSChannelIdx.setStatus('current')
bwaVLDFSChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDFSChannelFrequency.setStatus('current')
bwaVLDFSChannelRadarStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radarFree", 1), ("adjacentToRadar", 2), ("radarDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDFSChannelRadarStatus.setStatus('current')
bwaVLDFSChannelFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDFSChannelFrequencyNew.setStatus('current')
bwaVLDFSMinimumPulsesToDetect = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDFSMinimumPulsesToDetect.setStatus('current')
bwaVLDFSChannelReuseParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9))
bwaVLDFSChannelReuseOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDFSChannelReuseOption.setStatus('current')
bwaVLDFSRadarActivityAssessmentPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDFSRadarActivityAssessmentPeriod.setStatus('current')
bwaVLDFSMaximumNumberOfDetectionsInAssessmentPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDFSMaximumNumberOfDetectionsInAssessmentPeriod.setStatus('current')
bwaVLCountryCodeLearningBySU = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLCountryCodeLearningBySU.setStatus('current')
bwaVLAutoSubBandSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15))
bwaVLAutoSubBandSelectedFreqSubset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setAllSelectedFreqsSubset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAutoSubBandSelectedFreqSubset.setStatus('current')
bwaVLAutoSubBandFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2), )
if mibBuilder.loadTexts: bwaVLAutoSubBandFrequencySubsetTable.setStatus('current')
bwaVLAutoSubBandFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLAutoSubBandFrequencySubsetBandIdx"), (0, "BWA-DOT11-WLAN-MIB", "bwaVLAutoSubBandFrequencySubsetFrequencyIdx"))
if mibBuilder.loadTexts: bwaVLAutoSubBandFrequencySubsetEntry.setStatus('current')
bwaVLAutoSubBandFrequencySubsetBandIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAutoSubBandFrequencySubsetBandIdx.setStatus('current')
bwaVLAutoSubBandFrequencySubsetFrequencyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAutoSubBandFrequencySubsetFrequencyIdx.setStatus('current')
bwaVLAutoSubBandFrequencySubsetActive = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAutoSubBandFrequencySubsetActive.setStatus('current')
bwaVLAutoSubBandFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAutoSubBandFrequencySubsetFrequency.setStatus('current')
bwaVLATPC = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13))
bwaVLAtpcOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAtpcOption.setStatus('current')
bwaVLDeltaFromMinSNRLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDeltaFromMinSNRLevel.setStatus('current')
bwaVLMinimumSNRLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMinimumSNRLevel.setStatus('current')
bwaVLMinimumIntervalBetweenATPCMessages = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMinimumIntervalBetweenATPCMessages.setStatus('current')
bwaVLPowerLevelSteps = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLPowerLevelSteps.setStatus('current')
bwaVLCellDistanceParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15))
bwaVLCellDistanceMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLCellDistanceMode.setStatus('current')
bwaVLFairnessFactor = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLFairnessFactor.setStatus('current')
bwaVLMeasuredCellDistance = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("below-2-Km", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMeasuredCellDistance.setStatus('current')
bwaVLUnitWithMaxDistance = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLUnitWithMaxDistance.setStatus('current')
bwaVLPerSuDistanceLearning = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLPerSuDistanceLearning.setStatus('current')
bwaVLScanningMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLScanningMode.setStatus('current')
bwaVLAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAntennaGain.setStatus('current')
bwaVLSpectrumAnalysisParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18))
bwaVLSpectrumAnalysisChannelScanPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisChannelScanPeriod.setStatus('current')
bwaVLSpectrumAnalysisScanCycles = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisScanCycles.setStatus('current')
bwaVLAutomaticChannelSelection = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAutomaticChannelSelection.setStatus('current')
bwaVLSpectrumAnalysisActivation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("activateNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisActivation.setStatus('current')
bwaVLSpectrumAnalysisStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("currentlyActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisStatus.setStatus('current')
bwaVLResetSpectrumCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLResetSpectrumCounters.setStatus('current')
bwaVLSpectrumAnalysisInformationTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7), )
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisInformationTable.setStatus('current')
bwaVLSpectrumAnalysisInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLSpectrumAnalysisInformationTableIdx"))
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisInformationEntry.setStatus('current')
bwaVLSpectrumAnalysisInformationTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisInformationTableIdx.setStatus('current')
bwaVLSpectrumAnalysisInformationChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisInformationChannel.setStatus('current')
bwaVLSpectrumAnalysisInformationSignalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisInformationSignalCount.setStatus('current')
bwaVLSpectrumAnalysisInformationSignalSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisInformationSignalSNR.setStatus('current')
bwaVLSpectrumAnalysisInformationSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisInformationSignalWidth.setStatus('current')
bwaVLSpectrumAnalysisInformationOFDMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSpectrumAnalysisInformationOFDMFrames.setStatus('current')
bwaVLMaxNumOfAssociationsLimit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLMaxNumOfAssociationsLimit.setStatus('current')
bwaVLDisassociate = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20))
bwaVLDisassociateAllSUs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("disassociateAllSUs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDisassociateAllSUs.setStatus('current')
bwaVLDisassociateSuByMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDisassociateSuByMacAddress.setStatus('current')
bwaVLTxControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLTxControl.setStatus('current')
bwaVLLostBeaconsWatchdogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 1000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLLostBeaconsWatchdogThreshold.setStatus('current')
bwaVLTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLTransmitPower.setStatus('current')
bwaVLMaximumTxPower = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMaximumTxPower.setStatus('current')
bwaVLCountryCodeParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25))
bwaLCountryCodeReApply = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("reapply", 1), ("cancel", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaLCountryCodeReApply.setStatus('current')
bwaVLServiceParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7))
bwaVLMirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMirDownlink.setStatus('current')
bwaVLMirUplink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMirUplink.setStatus('current')
bwaVLCirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLCirDownlink.setStatus('current')
bwaVLCirUplink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLCirUplink.setStatus('current')
bwaVLMaxDelay = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMaxDelay.setStatus('current')
bwaVLMaxBurstDuration = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMaxBurstDuration.setStatus('current')
bwaVLGracefulDegradationLimit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLGracefulDegradationLimit.setStatus('current')
bwaVLMirOnlyOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMirOnlyOption.setStatus('current')
bwaVLTrafficPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10))
bwaVLTrafficPriVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 1))
bwaVLVLANPriorityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLVLANPriorityThreshold.setStatus('current')
bwaVLTrafficPriIPToS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2))
bwaVLToSPrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("ipPrecedence", 2), ("dSCP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLToSPrioritizationOption.setStatus('current')
bwaVLIPPrecedenceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLIPPrecedenceThreshold.setStatus('current')
bwaVLIPDSCPThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLIPDSCPThreshold.setStatus('current')
bwaVLTrafficPriUdpTcpPortRange = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3))
bwaVLUdpTcpPortRangePrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("udpOnly", 2), ("tcpOnly", 3), ("udpANDtcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLUdpTcpPortRangePrioritizationOption.setStatus('current')
bwaVLUdpPortRangeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2))
bwaVLUdpPortPriRTPRTCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtpANDrtcp", 1), ("rtpOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLUdpPortPriRTPRTCP.setStatus('current')
bwaVLUdpPortRangeNum = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLUdpPortRangeNum.setStatus('current')
bwaVLUdpPortRangeTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3), )
if mibBuilder.loadTexts: bwaVLUdpPortRangeTable.setStatus('current')
bwaVLUdpPortRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLUdpPortRangeIdx"))
if mibBuilder.loadTexts: bwaVLUdpPortRangeEntry.setStatus('current')
bwaVLUdpPortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLUdpPortRangeStart.setStatus('current')
bwaVLUdpPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLUdpPortRangeEnd.setStatus('current')
bwaVLUdpPortRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLUdpPortRangeIdx.setStatus('current')
bwaVLUdpPortRangeAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLUdpPortRangeAdd.setStatus('current')
bwaVLUdpPortRangeDelete = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLUdpPortRangeDelete.setStatus('current')
bwaVLUdpPortRangeDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLUdpPortRangeDeleteAll.setStatus('current')
bwaVLTcpPortRangeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3))
bwaVLTcpPortPriRTPRTCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtpANDrtcp", 1), ("rtpOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLTcpPortPriRTPRTCP.setStatus('current')
bwaVLTcpPortRangeNum = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTcpPortRangeNum.setStatus('current')
bwaVLTcpPortRangeTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3), )
if mibBuilder.loadTexts: bwaVLTcpPortRangeTable.setStatus('current')
bwaVLTcpPortRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLTcpPortRangeIdx"))
if mibBuilder.loadTexts: bwaVLTcpPortRangeEntry.setStatus('current')
bwaVLTcpPortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTcpPortRangeStart.setStatus('current')
bwaVLTcpPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTcpPortRangeEnd.setStatus('current')
bwaVLTcpPortRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTcpPortRangeIdx.setStatus('current')
bwaVLTcpPortRangeAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLTcpPortRangeAdd.setStatus('current')
bwaVLTcpPortRangeDelete = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLTcpPortRangeDelete.setStatus('current')
bwaVLTcpPortRangeDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLTcpPortRangeDeleteAll.setStatus('current')
bwaVLWirelessLinkPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4))
bwaVLWirelessLinkPrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLWirelessLinkPrioritizationOption.setStatus('current')
bwaVLlowPriorityAIFS = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLlowPriorityAIFS.setStatus('current')
bwaVLHWRetriesHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLHWRetriesHighPriority.setStatus('current')
bwaVLHWRetriesLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLHWRetriesLowPriority.setStatus('current')
bwaVLAUBurstDurationHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAUBurstDurationHighPriority.setStatus('current')
bwaVLAUBurstDurationLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAUBurstDurationLowPriority.setStatus('current')
bwaVLSUBurstDurationHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSUBurstDurationHighPriority.setStatus('current')
bwaVLSUBurstDurationLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSUBurstDurationLowPriority.setStatus('current')
bwaVLDrap = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11))
bwaVLDrapSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDrapSupport.setStatus('current')
bwaVLDrapUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 8200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDrapUdpPort.setStatus('current')
bwaVLDrapMaxNumberOfVoiceCalls = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDrapMaxNumberOfVoiceCalls.setStatus('current')
bwaVLDrapTTL = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDrapTTL.setStatus('current')
bwaVLDrapNoOfActiveVoiceCalls = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDrapNoOfActiveVoiceCalls.setStatus('current')
bwaVLLowPriorityTrafficMinimumPercent = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLLowPriorityTrafficMinimumPercent.setStatus('current')
bwaVLSUPMirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSUPMirDownlink.setStatus('current')
bwaVLMIRThresholdPercent = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMIRThresholdPercent.setStatus('current')
bwaVLUserFilterParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8))
bwaVLUserFilterOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("ipOnly", 2), ("userDefinedAddrOnly", 3), ("pPPoEOnly", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLUserFilterOption.setStatus('current')
bwaVLIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2), )
if mibBuilder.loadTexts: bwaVLIpFilterTable.setStatus('current')
bwaVLIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLIpFilterIdx"))
if mibBuilder.loadTexts: bwaVLIpFilterEntry.setStatus('current')
bwaVLIpID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLIpID.setStatus('current')
bwaVLMaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMaskID.setStatus('current')
bwaVLIpFilterRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLIpFilterRange.setStatus('current')
bwaVLIpFilterIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLIpFilterIdx.setStatus('current')
bwaVLDeleteOneUserFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("deletefirstEntry", 1), ("deletesecondEntry", 2), ("deletethirdEntry", 3), ("deletefourthEntry", 4), ("deletefifthEntry", 5), ("deletesixthEntry", 6), ("deleteseventhEntry", 7), ("deleteeighthEntry", 8), ("cancelOperation", 9), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDeleteOneUserFilter.setStatus('current')
bwaVLDeleteAllUserFilters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDeleteAllUserFilters.setStatus('current')
bwaVLDHCPUnicastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDHCPUnicastOverrideFilter.setStatus('current')
bwaVLSecurityParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9))
bwaVLAuthenticationAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAuthenticationAlgorithm.setStatus('current')
bwaVLSUDefaultKeyID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSUDefaultKeyID.setStatus('current')
bwaVLDataEncryptionOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLDataEncryptionOption.setStatus('current')
bwaVLAUDefaultMulticastKeyID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAUDefaultMulticastKeyID.setStatus('current')
bwaVLSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wep", 1), ("aesOCB", 2), ("fips197", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSecurityMode.setStatus('current')
bwaVLAuthenticationPromiscuousMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAuthenticationPromiscuousMode.setStatus('current')
bwaVLKey1 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLKey1.setStatus('current')
bwaVLKey2 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLKey2.setStatus('current')
bwaVLKey3 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLKey3.setStatus('current')
bwaVLKey4 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLKey4.setStatus('current')
bwaVLSecurityModeSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSecurityModeSupport.setStatus('current')
bwaVLPerformanceParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10))
bwaVLRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLRTSThreshold.setStatus('current')
bwaVLMinContentionWindow = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMinContentionWindow.setStatus('current')
bwaVLMaxContentionWindow = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMaxContentionWindow.setStatus('current')
bwaVLMaximumModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMaximumModulationLevel.setStatus('current')
bwaVLMulticastModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMulticastModulationLevel.setStatus('current')
bwaVLAvgSNRMemoryFactor = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAvgSNRMemoryFactor.setStatus('current')
bwaVLHardwareRetries = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLHardwareRetries.setStatus('current')
bwaVLAdaptiveModulationParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9))
bwaVLAdaptiveModulationAlgorithmOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAdaptiveModulationAlgorithmOption.setStatus('current')
bwaVLSoftwareRetrySupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLSoftwareRetrySupport.setStatus('current')
bwaVLNumOfSoftwareRetries = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLNumOfSoftwareRetries.setStatus('current')
bwaVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages.setStatus('current')
bwaVLAdaptiveModulationDecisionThresholds = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("normal", 1), ("high", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAdaptiveModulationDecisionThresholds.setStatus('current')
bwaVLBurstMode = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10))
bwaVLBurstModeOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("blocked", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLBurstModeOption.setStatus('current')
bwaVLBurstInterval = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLBurstInterval.setStatus('current')
bwaVLConcatenationParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11))
bwaVLConcatenationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLConcatenationOption.setStatus('current')
bwaVLConcatenationMaximumNumberOfFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLConcatenationMaximumNumberOfFrames.setStatus('current')
bwaVLConcatenationMaxFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLConcatenationMaxFrameSize.setStatus('current')
bwaVLSiteSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11))
bwaVLAverageReceiveSNR = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAverageReceiveSNR.setStatus('current')
bwaVLTrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2))
bwaVLResetTrafficCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLResetTrafficCounters.setStatus('current')
bwaVLEthCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2))
bwaVLWirelessLinkCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3))
bwaVLWirelessLinkEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4))
bwaVLPerModulationLevelCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5))
bwaVLResetPerModulationLevelCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetCounters", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLResetPerModulationLevelCounters.setStatus('current')
bwaVLSUPerModulationLevelCountersTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2), )
if mibBuilder.loadTexts: bwaVLSUPerModulationLevelCountersTable.setStatus('current')
bwaVLSUPerModulationLevelCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLSUPerModulationLevelCountersTableIdx"))
if mibBuilder.loadTexts: bwaVLSUPerModulationLevelCountersEntry.setStatus('current')
bwaVLSUPerModulationLevelCountersTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSUPerModulationLevelCountersTableIdx.setStatus('current')
bwaVLSUPerModulationLevelCountersApplicableModLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("modLevel-1", 1), ("modLevel-2", 2), ("modLevel-3", 3), ("modLevel-4", 4), ("modLevel-5", 5), ("modLevel-6", 6), ("modLevel-7", 7), ("modLevel-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSUPerModulationLevelCountersApplicableModLevel.setStatus('current')
bwaVLSUPerModulationLevelCountersTxSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSUPerModulationLevelCountersTxSuccess.setStatus('current')
bwaVLSUPerModulationLevelCountersTxFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLSUPerModulationLevelCountersTxFailed.setStatus('current')
bwaVLAverageModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAverageModulationLevel.setStatus('current')
bwaVLTotalRxFramesViaEthernet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalRxFramesViaEthernet.setStatus('current')
bwaVLTxWirelessToEthernet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTxWirelessToEthernet.setStatus('current')
bwaVLTxFramesToWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1))
bwaVLAUBeaconsToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAUBeaconsToWireless.setStatus('current')
bwaVLDataAndOtherMngFramesToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDataAndOtherMngFramesToWireless.setStatus('current')
bwaVLTotalTxFramesToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalTxFramesToWireless.setStatus('current')
bwaVLTotalTransmittedUnicasts = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalTransmittedUnicasts.setStatus('current')
bwaVLTotalTransmittedConcatenatedFramesDouble = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalTransmittedConcatenatedFramesDouble.setStatus('current')
bwaVLTotalTransmittedConcatenatedFramesSingle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalTransmittedConcatenatedFramesSingle.setStatus('current')
bwaVLTotalTransmittedConcatenatedFramesMore = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalTransmittedConcatenatedFramesMore.setStatus('current')
bwaVLTotalRxFramesFromWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalRxFramesFromWireless.setStatus('current')
bwaVLTotalRetransmittedFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalRetransmittedFrames.setStatus('current')
bwaVLFramesDropped = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLFramesDropped.setStatus('current')
bwaVLDataFramesSubmittedToBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5))
bwaVLFramesSubmittedViaHighQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLFramesSubmittedViaHighQueue.setStatus('current')
bwaVLFramesSubmittedViaMidQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLFramesSubmittedViaMidQueue.setStatus('current')
bwaVLFramesSubmittedViaLowQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLFramesSubmittedViaLowQueue.setStatus('current')
bwaVLTotalNoOfDataFramesSubmitted = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalNoOfDataFramesSubmitted.setStatus('current')
bwaVLTotalRecievedDataFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalRecievedDataFrames.setStatus('current')
bwaVLRecievedBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLRecievedBadFrames.setStatus('current')
bwaVLNoOfDuplicateFramesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNoOfDuplicateFramesDiscarded.setStatus('current')
bwaVLNoOfInternallyDiscardedMirCir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNoOfInternallyDiscardedMirCir.setStatus('current')
bwaVLTotalRxConcatenatedFramesDouble = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalRxConcatenatedFramesDouble.setStatus('current')
bwaVLTotalRxConcatenatedFramesSingle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalRxConcatenatedFramesSingle.setStatus('current')
bwaVLTotalRxConcatenatedFramesMore = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalRxConcatenatedFramesMore.setStatus('current')
bwaVLTxEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1))
bwaVLDroppedFrameEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDroppedFrameEvents.setStatus('current')
bwaVLFramesDelayedDueToSwRetry = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLFramesDelayedDueToSwRetry.setStatus('current')
bwaVLUnderrunEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLUnderrunEvents.setStatus('current')
bwaVLOthersTxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLOthersTxEvents.setStatus('current')
bwaVLTotalTxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalTxEvents.setStatus('current')
bwaVLRxEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2))
bwaVLPhyErrors = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLPhyErrors.setStatus('current')
bwaVLCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLCRCErrors.setStatus('current')
bwaVLOverrunEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLOverrunEvents.setStatus('current')
bwaVLRxDecryptEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLRxDecryptEvents.setStatus('current')
bwaVLTotalRxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTotalRxEvents.setStatus('current')
bwaVLMacAddressDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5))
bwaVLAUMacAddressDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1))
bwaVLAUAdbResetAllModulationLevelCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLAUAdbResetAllModulationLevelCounters.setStatus('current')
bwaVLAUAdbTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2), )
if mibBuilder.loadTexts: bwaVLAUAdbTable.setStatus('current')
bwaVLAUAdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLAdbIndex"))
if mibBuilder.loadTexts: bwaVLAUAdbEntry.setStatus('current')
bwaVLAdbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbIndex.setStatus('current')
bwaVLAdbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbMacAddress.setStatus('current')
bwaVLAdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("associated", 1), ("authenticated", 2), ("notAuthenticated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbStatus.setStatus('current')
bwaVLAdbSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbSwVersion.setStatus('current')
bwaVLAdbSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbSNR.setStatus('current')
bwaVLAdbMaxModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("modLevel-1", 1), ("modLevel-2", 2), ("modLevel-3", 3), ("modLevel-4", 4), ("modLevel-5", 5), ("modLevel-6", 6), ("modLevel-7", 7), ("modLevel-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbMaxModulationLevel.setStatus('current')
bwaVLAdbTxFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxFramesTotal.setStatus('current')
bwaVLAdbDroppedFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbDroppedFramesTotal.setStatus('current')
bwaVLAdbTxSuccessModLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxSuccessModLevel1.setStatus('current')
bwaVLAdbTxSuccessModLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxSuccessModLevel2.setStatus('current')
bwaVLAdbTxSuccessModLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxSuccessModLevel3.setStatus('current')
bwaVLAdbTxSuccessModLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxSuccessModLevel4.setStatus('current')
bwaVLAdbTxSuccessModLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxSuccessModLevel5.setStatus('current')
bwaVLAdbTxSuccessModLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxSuccessModLevel6.setStatus('current')
bwaVLAdbTxSuccessModLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxSuccessModLevel7.setStatus('current')
bwaVLAdbTxSuccessModLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxSuccessModLevel8.setStatus('current')
bwaVLAdbTxFailedModLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxFailedModLevel1.setStatus('current')
bwaVLAdbTxFailedModLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxFailedModLevel2.setStatus('current')
bwaVLAdbTxFailedModLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxFailedModLevel3.setStatus('current')
bwaVLAdbTxFailedModLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxFailedModLevel4.setStatus('current')
bwaVLAdbTxFailedModLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxFailedModLevel5.setStatus('current')
bwaVLAdbTxFailedModLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxFailedModLevel6.setStatus('current')
bwaVLAdbTxFailedModLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxFailedModLevel7.setStatus('current')
bwaVLAdbTxFailedModLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbTxFailedModLevel8.setStatus('current')
bwaVLAdbCirTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbCirTx.setStatus('current')
bwaVLAdbMirTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbMirTx.setStatus('current')
bwaVLAdbCirRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbCirRx.setStatus('current')
bwaVLAdbMirRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbMirRx.setStatus('current')
bwaVLAdbCirMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbCirMaxDelay.setStatus('current')
bwaVLAdbDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("below-2-Km", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbDistance.setStatus('current')
bwaVLAdbHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbHwRevision.setStatus('current')
bwaVLAdbCpldVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbCpldVer.setStatus('current')
bwaVLAdbCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbCountryCode.setStatus('current')
bwaVLAdbBootVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbBootVer.setStatus('current')
bwaVLAdbAtpcOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbAtpcOption.setStatus('current')
bwaVLAdbAdapModOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbAdapModOption.setStatus('current')
bwaVLAdbBurstModeOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbBurstModeOption.setStatus('current')
bwaVLAdbConcatenationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbConcatenationOption.setStatus('current')
bwaVLAdbSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("wep", 1), ("aes", 2), ("fips197", 3), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbSecurityMode.setStatus('current')
bwaVLAdbAuthOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbAuthOption.setStatus('current')
bwaVLAdbDataEncyptOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbDataEncyptOption.setStatus('current')
bwaVLAdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbAge.setStatus('current')
bwaVLAdbUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLAdbUnitName.setStatus('current')
bwaVLUpLinkQualityIndicator = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6))
bwaVLMeasureUpLinkQualityIndicator = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwaVLMeasureUpLinkQualityIndicator.setStatus('current')
bwaVLReadUpLinkQualityIndicator = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLReadUpLinkQualityIndicator.setStatus('current')
bwaVLUpLinkQualityIndicatorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullTest", 1), ("limitedTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLUpLinkQualityIndicatorStatus.setStatus('current')
bwaVLMacPinpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7))
bwaVLMacPinpointTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1), )
if mibBuilder.loadTexts: bwaVLMacPinpointTable.setStatus('current')
bwaVLMacPinpointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "mptEthernetStationMACAddress"))
if mibBuilder.loadTexts: bwaVLMacPinpointEntry.setStatus('current')
mptEthernetStationMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptEthernetStationMACAddress.setStatus('current')
mptUnitMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptUnitMACAddress.setStatus('current')
bwaVLDrapGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8), )
if mibBuilder.loadTexts: bwaVLDrapGatewaysTable.setStatus('current')
bwaVLDrapGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1), ).setIndexNames((0, "BWA-DOT11-WLAN-MIB", "bwaVLDrapGatewayIndex"))
if mibBuilder.loadTexts: bwaVLDrapGatewayEntry.setStatus('current')
bwaVLDrapGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDrapGatewayIndex.setStatus('current')
bwaVLDrapGatewayIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDrapGatewayIP.setStatus('current')
bwaVLDrapGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 11, 255))).clone(namedValues=NamedValues(("vgDataVoice", 4), ("vgData1Voice1", 5), ("vgData4Voice2", 6), ("vgDataVoice2", 7), ("ngData4Wireless", 11), ("vgUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDrapGatewayType.setStatus('current')
bwaVLDrapGatewayNoOfActiveVoiceCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDrapGatewayNoOfActiveVoiceCalls.setStatus('current')
bwaVLTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14))
bwaVLTrapSUMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapSUMacAddr.setStatus('current')
bwaVLTrapText = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapText.setStatus('current')
bwaVLTrapToggle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapToggle.setStatus('current')
bwaVLTrapParameterChanged = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("cirOrMir", 1), ("ipFilter", 2), ("vlan", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapParameterChanged.setStatus('current')
bwaVLTrapAccessRights = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notLoggedIn", 1), ("readOnly", 2), ("installer", 3), ("administrator", 4), ("factory", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapAccessRights.setStatus('current')
bwaVLTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("telnetLogin", 3), ("telnetLogout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapLog.setStatus('current')
bwaVLTrapTelnetUserIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapTelnetUserIpAddress.setStatus('current')
bwaVLTrapRTx = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapRTx.setStatus('current')
bwaVLTrapFtpOrTftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("successful", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapFtpOrTftpStatus.setStatus('current')
bwaVLDFSMoveFreq = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDFSMoveFreq.setStatus('current')
bwaVLDFSMoveFreqNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLDFSMoveFreqNew.setStatus('current')
bwaVLEthBroadcastThresholdExceeded = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLEthBroadcastThresholdExceeded.setStatus('current')
bwaVLTrapSubscriberType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6, 14, 24, 28, 54, 100))).clone(namedValues=NamedValues(("unknownSubscriberType", 0), ("su-3", 3), ("su-6", 6), ("rb-14", 14), ("su-24", 24), ("rb-28", 28), ("su-54", 54), ("rb-100", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapSubscriberType.setStatus('current')
bwaVLTrapMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapMACAddress.setStatus('current')
bwaVLNewUnitTypeTrap = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bu", 1), ("rb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLNewUnitTypeTrap.setStatus('current')
bwaVLTrapSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwaVLTrapSWVersion.setStatus('current')
bwaVLSUassociatedAUTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 2)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLTrapSUMacAddr"))
if mibBuilder.loadTexts: bwaVLSUassociatedAUTRAP.setStatus('current')
bwaVLAUdisassociatedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 3)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLTrapSUMacAddr"))
if mibBuilder.loadTexts: bwaVLAUdisassociatedTRAP.setStatus('current')
bwaVLAUagingTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 4)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLTrapSUMacAddr"))
if mibBuilder.loadTexts: bwaVLAUagingTRAP.setStatus('current')
bwaVLSUassociatedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 6)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLAssociatedAU"))
if mibBuilder.loadTexts: bwaVLSUassociatedTRAP.setStatus('current')
bwaVLAUwirelessQualityTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 20)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLTrapToggle"), ("BWA-DOT11-WLAN-MIB", "bwaVLTrapRTx"))
if mibBuilder.loadTexts: bwaVLAUwirelessQualityTRAP.setStatus('current')
bwaVLPowerUpFromReset = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 101)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLUnitMacAddress"))
if mibBuilder.loadTexts: bwaVLPowerUpFromReset.setStatus('current')
bwaVLTelnetStatusTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 102)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLTrapLog"), ("BWA-DOT11-WLAN-MIB", "bwaVLTrapAccessRights"), ("BWA-DOT11-WLAN-MIB", "bwaVLTrapTelnetUserIpAddress"))
if mibBuilder.loadTexts: bwaVLTelnetStatusTRAP.setStatus('current')
bwaVLParameterChangedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 103)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLTrapParameterChanged"))
if mibBuilder.loadTexts: bwaVLParameterChangedTRAP.setStatus('current')
bwaVLLoadingStatusTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 104)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLTrapFtpOrTftpStatus"), ("BWA-DOT11-WLAN-MIB", "bwaVLUnitMacAddress"))
if mibBuilder.loadTexts: bwaVLLoadingStatusTRAP.setStatus('current')
bwaVLPromiscuousModeTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 105)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLTrapToggle"), ("BWA-DOT11-WLAN-MIB", "bwaVLUnitMacAddress"))
if mibBuilder.loadTexts: bwaVLPromiscuousModeTRAP.setStatus('current')
bwaVLDFSRadarDetecetedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 106))
if mibBuilder.loadTexts: bwaVLDFSRadarDetecetedTRAP.setStatus('current')
bwaVLDFSFrequcnyTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 107)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLDFSMoveFreq"), ("BWA-DOT11-WLAN-MIB", "bwaVLDFSMoveFreqNew"))
if mibBuilder.loadTexts: bwaVLDFSFrequcnyTRAP.setStatus('current')
bwaVLDFSNoFreeChannelsExistsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 108))
if mibBuilder.loadTexts: bwaVLDFSNoFreeChannelsExistsTRAP.setStatus('current')
bwaVLEthBroadcastMulticatLimiterTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 109)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLEthBroadcastThresholdExceeded"))
if mibBuilder.loadTexts: bwaVLEthBroadcastMulticatLimiterTRAP.setStatus('current')
bwaVLAUSUnsupportedSubscriberTypeTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 110)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLTrapSUMacAddr"), ("BWA-DOT11-WLAN-MIB", "bwaVLTrapSubscriberType"))
if mibBuilder.loadTexts: bwaVLAUSUnsupportedSubscriberTypeTRAP.setStatus('current')
bwaVLUnitTypeChangedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 111)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLTrapMACAddress"), ("BWA-DOT11-WLAN-MIB", "bwaVLNewUnitTypeTrap"))
if mibBuilder.loadTexts: bwaVLUnitTypeChangedTRAP.setStatus('current')
bwaVLWLPrioritizationNotSupportedBySUTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 112)).setObjects(("BWA-DOT11-WLAN-MIB", "bwaVLTrapSUMacAddr"), ("BWA-DOT11-WLAN-MIB", "bwaVLTrapSWVersion"))
if mibBuilder.loadTexts: bwaVLWLPrioritizationNotSupportedBySUTRAP.setStatus('current')
mibBuilder.exportSymbols("BWA-DOT11-WLAN-MIB", bwaVLDFSMoveFreqNew=bwaVLDFSMoveFreqNew, bwaLCountryCodeReApply=bwaLCountryCodeReApply, bwaVLTrapLog=bwaVLTrapLog, bwaVLNeighborAuPerSuDistanceLearning=bwaVLNeighborAuPerSuDistanceLearning, bwa4900_AU_SA=bwa4900_AU_SA, bwaVLEthCounters=bwaVLEthCounters, bwaVLVlanRelaying=bwaVLVlanRelaying, bwaVLTimeSinceLastReset=bwaVLTimeSinceLastReset, bwaVLToSPriorityParameters=bwaVLToSPriorityParameters, bwaVLVLANTrafficPriority=bwaVLVLANTrafficPriority, bwaVLAssociatedAU=bwaVLAssociatedAU, bwaVLFTPDownloadSwFile=bwaVLFTPDownloadSwFile, bwaVLNwMngFilter=bwaVLNwMngFilter, bwaVLTotalNoOfDataFramesSubmitted=bwaVLTotalNoOfDataFramesSubmitted, bwaVLFrequencySubsetActive=bwaVLFrequencySubsetActive, bwaVLEthernetPortControl=bwaVLEthernetPortControl, mngIpFilterTable=mngIpFilterTable, bwaVLResetPerModulationLevelCounters=bwaVLResetPerModulationLevelCounters, bwaVLDFSRadarDetectionChannelsTable=bwaVLDFSRadarDetectionChannelsTable, bwaVLEventLogFileUploading=bwaVLEventLogFileUploading, bwaVLMinimumIntervalBetweenATPCMessages=bwaVLMinimumIntervalBetweenATPCMessages, bwaVLCurrentSUOperatingFrequency=bwaVLCurrentSUOperatingFrequency, bwaVLAdbDistance=bwaVLAdbDistance, bwaVLUserFilterOption=bwaVLUserFilterOption, bwaVLConcatenationParameters=bwaVLConcatenationParameters, bwaVLOthersTxEvents=bwaVLOthersTxEvents, bwaVLSpectrumAnalysisInformationChannel=bwaVLSpectrumAnalysisInformationChannel, bwaVLNeighborAuESSID=bwaVLNeighborAuESSID, bwaVLCurrentFrequencySubsetFrequency=bwaVLCurrentFrequencySubsetFrequency, bwaVLFrequencySubsetEntry=bwaVLFrequencySubsetEntry, bwaVLRadioBand=bwaVLRadioBand, bwaVLFramesSubmittedViaLowQueue=bwaVLFramesSubmittedViaLowQueue, bwaVLAdbTxFailedModLevel6=bwaVLAdbTxFailedModLevel6, bwaVLUnicastRelaying=bwaVLUnicastRelaying, bwaVLTcpPortRangeDelete=bwaVLTcpPortRangeDelete, bwaVLMaxNumOfAssociations=bwaVLMaxNumOfAssociations, bwaVLDFSChannelFrequencyNew=bwaVLDFSChannelFrequencyNew, bwaVLBurstModeSupport=bwaVLBurstModeSupport, bwaVLDataEncryptionSupport=bwaVLDataEncryptionSupport, bwaVLSU_I=bwaVLSU_I, bwaVLMngIpRangesTable=bwaVLMngIpRangesTable, bwaVLTcpPortRangeConfig=bwaVLTcpPortRangeConfig, bwaVLFrequencyDefinition=bwaVLFrequencyDefinition, bwaVLAdbMirRx=bwaVLAdbMirRx, bwaVLResetUnit=bwaVLResetUnit, bwaVLMinimumSNRLevel=bwaVLMinimumSNRLevel, bwaVLLostBeaconsWatchdogThreshold=bwaVLLostBeaconsWatchdogThreshold, bwaVLIpFilterTable=bwaVLIpFilterTable, bwaVLSpectrumAnalysisScanCycles=bwaVLSpectrumAnalysisScanCycles, bwaVLPortsControl=bwaVLPortsControl, bwaVLSpectrumAnalysisInformationTable=bwaVLSpectrumAnalysisInformationTable, bwaVLTrafficPrioritization=bwaVLTrafficPrioritization, bwaVLRxDecryptEvents=bwaVLRxDecryptEvents, bwaVLUnitMacAddress=bwaVLUnitMacAddress, bwaVLSpectrumAnalysisInformationTableIdx=bwaVLSpectrumAnalysisInformationTableIdx, bwaVLTotalTransmittedConcatenatedFramesMore=bwaVLTotalTransmittedConcatenatedFramesMore, bwaVLAirInterface=bwaVLAirInterface, bwaVLKey2=bwaVLKey2, bwaVLTxControl=bwaVLTxControl, bwaVLUdpPortPriRTPRTCP=bwaVLUdpPortPriRTPRTCP, bwaVLSubBandUpperFrequency=bwaVLSubBandUpperFrequency, bwaVLTcpPortRangeDeleteAll=bwaVLTcpPortRangeDeleteAll, bwaVLShadowVersionFileName=bwaVLShadowVersionFileName, bwaVLTransmitPower=bwaVLTransmitPower, bwaVLUdpPortRangeEnd=bwaVLUdpPortRangeEnd, bwaVLSetSelectedFreqSubset=bwaVLSetSelectedFreqSubset, bwaVLRxEvents=bwaVLRxEvents, bwaVLDefinedMaximumTxPowerRange=bwaVLDefinedMaximumTxPowerRange, bwaVLUdpPortRangeEntry=bwaVLUdpPortRangeEntry, bwaVLAUS_BS=bwaVLAUS_BS, bwaVLATPC=bwaVLATPC, bwaVLCurrentFrequencySubsetTable=bwaVLCurrentFrequencySubsetTable, bwaVLFTPConfigurationFileSourceDir=bwaVLFTPConfigurationFileSourceDir, bwaVLTrapSubscriberType=bwaVLTrapSubscriberType, bwaVLAU_BS=bwaVLAU_BS, bwaVLNeighborAuAdapModOption=bwaVLNeighborAuAdapModOption, bwaVLUnitPasswords=bwaVLUnitPasswords, bwaVLUnitHwVersion=bwaVLUnitHwVersion, bwaVLAverageModulationLevel=bwaVLAverageModulationLevel, bwaVLMacPinpoint=bwaVLMacPinpoint, bwaVLAdbTxFramesTotal=bwaVLAdbTxFramesTotal, bwaVLMainVersionNumber=bwaVLMainVersionNumber, bwaVLEraseEventLog=bwaVLEraseEventLog, DisplayString=DisplayString, bwaVLNeighborAuSNR=bwaVLNeighborAuSNR, bwaVLAU_SA=bwaVLAU_SA, bwaVLMacAddressDenyListTableIdx=bwaVLMacAddressDenyListTableIdx, bwaVLRegulationMaxTxPowerAtAntennaPort=bwaVLRegulationMaxTxPowerAtAntennaPort, bwaVLAdbAdapModOption=bwaVLAdbAdapModOption, bwaVLAtpcOption=bwaVLAtpcOption, bwaVLConfigurationFileName=bwaVLConfigurationFileName, bwaVLSUassociatedAUTRAP=bwaVLSUassociatedAUTRAP, bwaVLESSIDParameters=bwaVLESSIDParameters, bwaVLAdbTxFailedModLevel2=bwaVLAdbTxFailedModLevel2, bwaVLNoOfInternallyDiscardedMirCir=bwaVLNoOfInternallyDiscardedMirCir, bwaVLSUPerModulationLevelCountersTableIdx=bwaVLSUPerModulationLevelCountersTableIdx, bwaVLlowPriorityAIFS=bwaVLlowPriorityAIFS, bwaVLMaxDelay=bwaVLMaxDelay, bwaVLCellDistanceParameters=bwaVLCellDistanceParameters, ptp_RB_B28=ptp_RB_B28, bwaVLAESEncryptionSupport=bwaVLAESEncryptionSupport, bwaVLFTPServerUserName=bwaVLFTPServerUserName, bwaVLAutoSubBandFrequencySubsetEntry=bwaVLAutoSubBandFrequencySubsetEntry, bwaVLSU_24_BD=bwaVLSU_24_BD, bwaVLMacAddressDenyListAdd=bwaVLMacAddressDenyListAdd, bwaVLAutoSubBandFrequencySubsetActive=bwaVLAutoSubBandFrequencySubsetActive, bwaVLUploadEventLogFile=bwaVLUploadEventLogFile, bwaVLTraps=bwaVLTraps, bwaVLAUBurstDurationLowPriority=bwaVLAUBurstDurationLowPriority, bwaVLDisassociateAllSUs=bwaVLDisassociateAllSUs, bwaVLFTPClientIPAddress=bwaVLFTPClientIPAddress, bwaVLNeighborAuSwVer=bwaVLNeighborAuSwVer, bwaVLAdbTxFailedModLevel3=bwaVLAdbTxFailedModLevel3, bwaVLMngIpRangeMask=bwaVLMngIpRangeMask, bwaVLNumOfAssociationsSinceLastReset=bwaVLNumOfAssociationsSinceLastReset, bwaVLFeatureUpgradeManually=bwaVLFeatureUpgradeManually, bwaVLNeighborAuHwRevision=bwaVLNeighborAuHwRevision, bwaVLAdbTxFailedModLevel4=bwaVLAdbTxFailedModLevel4, bwaVLMaximumTransmitPowerTable=bwaVLMaximumTransmitPowerTable, bwaVLIpFilterIdx=bwaVLIpFilterIdx, bwaVLSUPMirDownlink=bwaVLSUPMirDownlink, bwaVLFrequencySubsetFrequency=bwaVLFrequencySubsetFrequency, bwaVLAdbTxFailedModLevel1=bwaVLAdbTxFailedModLevel1, bwaVLDFSNoFreeChannelsExistsTRAP=bwaVLDFSNoFreeChannelsExistsTRAP, bwaVLNeighborAuIdx=bwaVLNeighborAuIdx, bwaVLCountryDependentParameterTableIdx=bwaVLCountryDependentParameterTableIdx, bwaVLRunTimeESSID=bwaVLRunTimeESSID, bwaVLCurrentEthernetPortState=bwaVLCurrentEthernetPortState, bwaVLAvgSNRMemoryFactor=bwaVLAvgSNRMemoryFactor, bwaVLAdbTxSuccessModLevel7=bwaVLAdbTxSuccessModLevel7, bwaVLDrapSupport=bwaVLDrapSupport, bwaVLDisassociateSuByMacAddress=bwaVLDisassociateSuByMacAddress, bwaVLVlanDataPriority=bwaVLVlanDataPriority, bwaVLESSID=bwaVLESSID, bwaVLDrapGatewayIndex=bwaVLDrapGatewayIndex, bwaVLMIRThresholdPercent=bwaVLMIRThresholdPercent, bwaVLMacAddressDenyList=bwaVLMacAddressDenyList, bwaVLNwMngTrapCommunity=bwaVLNwMngTrapCommunity, bwaVLMacAddressDenyListId=bwaVLMacAddressDenyListId, bwaVLBridgeAgingTime=bwaVLBridgeAgingTime, bwaVLFairnessFactor=bwaVLFairnessFactor, bwaVLNeighborAuAuthOption=bwaVLNeighborAuAuthOption, bwaVLMinimumHwRevision=bwaVLMinimumHwRevision, bwaVLEventLogFileName=bwaVLEventLogFileName, bwaVLUnderrunEvents=bwaVLUnderrunEvents, bwaVLCountryDependentParamsTable=bwaVLCountryDependentParamsTable, bwaVLAUAdbTable=bwaVLAUAdbTable, bwaVLDFSChannelReuseOption=bwaVLDFSChannelReuseOption, bwaVLTotalTxEvents=bwaVLTotalTxEvents, bwaVLRunTimeSubNetMask=bwaVLRunTimeSubNetMask, bwaVLAUMacAddressDatabase=bwaVLAUMacAddressDatabase, bwaVLAdbCirRx=bwaVLAdbCirRx, bwaVLMngIpRangeStart=bwaVLMngIpRangeStart, bwaVLVlanPriorityThreshold=bwaVLVlanPriorityThreshold, bwaVLTransmitPowerTable=bwaVLTransmitPowerTable, bwaVLDeleteAllTrapAddrs=bwaVLDeleteAllTrapAddrs, bwaVLCountryCodeLearningBySU=bwaVLCountryCodeLearningBySU, bwaVLAdbAge=bwaVLAdbAge, bwaVLNeighborAuDfsOption=bwaVLNeighborAuDfsOption, bwaVLSystemLocation=bwaVLSystemLocation, bwaVLSU_6_BD=bwaVLSU_6_BD, bwaVLFramesDelayedDueToSwRetry=bwaVLFramesDelayedDueToSwRetry, bwaVLFTPGatewayIpAddress=bwaVLFTPGatewayIpAddress, bwaVLRTSThreshold=bwaVLRTSThreshold, bwaVLSpectrumAnalysisInformationSignalCount=bwaVLSpectrumAnalysisInformationSignalCount, bwaVLMaximumTxPowerRange=bwaVLMaximumTxPowerRange, bwaVLEthBroadcastThresholdExceeded=bwaVLEthBroadcastThresholdExceeded, bwaVLParameterChangedTRAP=bwaVLParameterChangedTRAP, bwaVLDataEncryptionOption=bwaVLDataEncryptionOption, mngTrapTable=mngTrapTable, bwaVLDFSFrequcnyTRAP=bwaVLDFSFrequcnyTRAP, bwaVLDfsSupport=bwaVLDfsSupport, bwaVLTrapAccessRights=bwaVLTrapAccessRights, bwaVLAUS_SA=bwaVLAUS_SA, bwaVLIpID=bwaVLIpID, bwaVLDeltaFromMinSNRLevel=bwaVLDeltaFromMinSNRLevel, bwaVLSecurityMode=bwaVLSecurityMode, bwaVLAdbMirTx=bwaVLAdbMirTx, bwaVLAUDefinedFrequencyNew=bwaVLAUDefinedFrequencyNew, bwaVLTrapRTx=bwaVLTrapRTx, bwaVLTcpPortPriRTPRTCP=bwaVLTcpPortPriRTPRTCP, bwaVLSUBurstDurationLowPriority=bwaVLSUBurstDurationLowPriority, bwaVLBestAuNoOfScanningAttempts=bwaVLBestAuNoOfScanningAttempts, bwaVLTrafficPriIPToS=bwaVLTrafficPriIPToS, bwaVLWirelessTrapThreshold=bwaVLWirelessTrapThreshold, bwaVLMaxTxPower=bwaVLMaxTxPower, bwaVLSUDefaultKeyID=bwaVLSUDefaultKeyID, bwaVLSUPerModulationLevelCountersTable=bwaVLSUPerModulationLevelCountersTable, bwaVLLoadingStatusTRAP=bwaVLLoadingStatusTRAP, PYSNMP_MODULE_ID=bwaVLMib, bwaVLApClientIpAddress=bwaVLApClientIpAddress, bwaVLAdbSecurityMode=bwaVLAdbSecurityMode, bwaVLNeighborAuBurstModeOption=bwaVLNeighborAuBurstModeOption, bwaVLTxWirelessToEthernet=bwaVLTxWirelessToEthernet, bwaVLNeighborAuEntry=bwaVLNeighborAuEntry, bwaVLMulticastModulationLevel=bwaVLMulticastModulationLevel, bwaVLMacPinpointEntry=bwaVLMacPinpointEntry, bwaVLAntennaGain=bwaVLAntennaGain, bwaVLAUDefaultMulticastKeyID=bwaVLAUDefaultMulticastKeyID, bwaVLAdbTxFailedModLevel5=bwaVLAdbTxFailedModLevel5, bwaVLVLANQinQ=bwaVLVLANQinQ, bwaVLAU=bwaVLAU, bwaVLCirDownlink=bwaVLCirDownlink, bwaVLSecurityParameters=bwaVLSecurityParameters, bwaVLDHCPUnicastOverrideFilter=bwaVLDHCPUnicastOverrideFilter, bwaVLIpParams=bwaVLIpParams, bwaVLVlanIdForwarding=bwaVLVlanIdForwarding, bwaVLPerModulationLevelCounters=bwaVLPerModulationLevelCounters, bwaVLAdminPassword=bwaVLAdminPassword, bwaVLEventLogPolicy=bwaVLEventLogPolicy, bwaVLDeleteOneUserFilter=bwaVLDeleteOneUserFilter, bwaVLCountryCode=bwaVLCountryCode, bwaVLMaximumCellRadius=bwaVLMaximumCellRadius, bwaVLAUagingTRAP=bwaVLAUagingTRAP, bwaVLSubBandSelect=bwaVLSubBandSelect, bwaVLSpectrumAnalysisParameters=bwaVLSpectrumAnalysisParameters, bwaVLAUAdbResetAllModulationLevelCounters=bwaVLAUAdbResetAllModulationLevelCounters, bwaVLVlanForwardingTable=bwaVLVlanForwardingTable, bwaVLAuthenticationEncryptionSupport=bwaVLAuthenticationEncryptionSupport, bwaVLNwMngTrapAddress=bwaVLNwMngTrapAddress, bwaVLDrap=bwaVLDrap, bwaVLSUPerModulationLevelCountersApplicableModLevel=bwaVLSUPerModulationLevelCountersApplicableModLevel, bwaVLAdbTxSuccessModLevel3=bwaVLAdbTxSuccessModLevel3, bwaVLSU_6_1D=bwaVLSU_6_1D, bwaVLDFSChannelRadarStatus=bwaVLDFSChannelRadarStatus, bwaVLTotalTransmittedConcatenatedFramesSingle=bwaVLTotalTransmittedConcatenatedFramesSingle, mptEthernetStationMACAddress=mptEthernetStationMACAddress, bwaVLBroadcastRelaying=bwaVLBroadcastRelaying, ptp_RB_B14=ptp_RB_B14, bwaVLAllowedBandwidth=bwaVLAllowedBandwidth, bwaVLCountryCodeParameters=bwaVLCountryCodeParameters, bwaVLMainVersionFileName=bwaVLMainVersionFileName, bwaVLResetTrafficCounters=bwaVLResetTrafficCounters, bwaVLRecievedBadFrames=bwaVLRecievedBadFrames, bwaVLWLPrioritizationNotSupportedBySUTRAP=bwaVLWLPrioritizationNotSupportedBySUTRAP, bwaVLWirelessLinkCounters=bwaVLWirelessLinkCounters, bwaVLFTPServerPassword=bwaVLFTPServerPassword, bwaVLTcpPortRangeAdd=bwaVLTcpPortRangeAdd, bwaVLAdbIndex=bwaVLAdbIndex, bwaVLDFSRadarDetectionChannelsEntry=bwaVLDFSRadarDetectionChannelsEntry, bwaVLAdbSwVersion=bwaVLAdbSwVersion, bwaVLCurrentNumOfAssociations=bwaVLCurrentNumOfAssociations, bwaVLUpLinkQualityIndicatorStatus=bwaVLUpLinkQualityIndicatorStatus, bwaVLTcpPortRangeStart=bwaVLTcpPortRangeStart, bwaVLVlanRelayingTable=bwaVLVlanRelayingTable, bwaVLPromiscuousModeTRAP=bwaVLPromiscuousModeTRAP, bwaVLNumberOfMacAddressesInDenyList=bwaVLNumberOfMacAddressesInDenyList, bwaVLTotalTransmittedUnicasts=bwaVLTotalTransmittedUnicasts, bwaVLAdbCountryCode=bwaVLAdbCountryCode, ptp_RB_B100=ptp_RB_B100, bwaVLTotalRxFramesFromWireless=bwaVLTotalRxFramesFromWireless, bwaVLEthBroadcastMulticatLimiterTRAP=bwaVLEthBroadcastMulticatLimiterTRAP, bwaVLRegulationMaxEIRP=bwaVLRegulationMaxEIRP, bwaVLUdpTcpPortRangePrioritizationOption=bwaVLUdpTcpPortRangePrioritizationOption)
mibBuilder.exportSymbols("BWA-DOT11-WLAN-MIB", bwaVLAU_EZ=bwaVLAU_EZ, bwaVLCurrentTxPower=bwaVLCurrentTxPower, bwaVLAutoSubBandFrequencySubsetTable=bwaVLAutoSubBandFrequencySubsetTable, bwaVLQinQProviderVlanID=bwaVLQinQProviderVlanID, bwaVLTotalRxConcatenatedFramesDouble=bwaVLTotalRxConcatenatedFramesDouble, bwaVLSpectrumAnalysisInformationOFDMFrames=bwaVLSpectrumAnalysisInformationOFDMFrames, bwaVLAutomaticChannelSelection=bwaVLAutomaticChannelSelection, bwaVLSUBurstDurationHighPriority=bwaVLSUBurstDurationHighPriority, bwaVLAUdisassociatedTRAP=bwaVLAUdisassociatedTRAP, bwaVLDeleteOneTrapAddr=bwaVLDeleteOneTrapAddr, bwaVLUdpPortRangeIdx=bwaVLUdpPortRangeIdx, bwaVLSubNetMask=bwaVLSubNetMask, bwaVLMngIpRangeFlag=bwaVLMngIpRangeFlag, bwaVLDFSSuWaitingOption=bwaVLDFSSuWaitingOption, bwaVLOverrunEvents=bwaVLOverrunEvents, bwaVLUnitTypeChangedTRAP=bwaVLUnitTypeChangedTRAP, bwaVLCurrentFrequencySubsetEntry=bwaVLCurrentFrequencySubsetEntry, bwaVLSUPerModulationLevelCountersEntry=bwaVLSUPerModulationLevelCountersEntry, bwaVLNwMngParameters=bwaVLNwMngParameters, bwaVLTransmitPowerEntry=bwaVLTransmitPowerEntry, bwaVLSUPerModulationLevelCountersTxSuccess=bwaVLSUPerModulationLevelCountersTxSuccess, bwaVLEthBroadcastFiltering=bwaVLEthBroadcastFiltering, bwaVLMirUplink=bwaVLMirUplink, bwaVLBurstMode=bwaVLBurstMode, bwaVLAdbMaxModulationLevel=bwaVLAdbMaxModulationLevel, bwaVLUnitIpAddress=bwaVLUnitIpAddress, bwaVLEthBroadcastingParameters=bwaVLEthBroadcastingParameters, bwaVLMaximumBurstDuration=bwaVLMaximumBurstDuration, bwaVLAUDefinedFrequency=bwaVLAUDefinedFrequency, bwaVLAUSUnsupportedSubscriberTypeTRAP=bwaVLAUSUnsupportedSubscriberTypeTRAP, bwaVLKey3=bwaVLKey3, bwaVLInstallerPassword=bwaVLInstallerPassword, bwaVLDFSMaximumNumberOfDetectionsInAssessmentPeriod=bwaVLDFSMaximumNumberOfDetectionsInAssessmentPeriod, bwaVLFramesSubmittedViaHighQueue=bwaVLFramesSubmittedViaHighQueue, bwaVLNeighborAuTable=bwaVLNeighborAuTable, bwaVLAutoSubBandFrequencySubsetBandIdx=bwaVLAutoSubBandFrequencySubsetBandIdx, bwaVLWirelessLinkPrioritizationOption=bwaVLWirelessLinkPrioritizationOption, bwaVLAdbCpldVer=bwaVLAdbCpldVer, bwaVLSelectSubBandIndex=bwaVLSelectSubBandIndex, bwaVLVLANForwarding=bwaVLVLANForwarding, bwaVLARPBroadcastOverrideFilter=bwaVLARPBroadcastOverrideFilter, bwaVLDFSRadarActivityAssessmentPeriod=bwaVLDFSRadarActivityAssessmentPeriod, bwaVLEthernetNegotiationMode=bwaVLEthernetNegotiationMode, bwaVLHWRetriesHighPriority=bwaVLHWRetriesHighPriority, bwaVLSubBandLowerFrequency=bwaVLSubBandLowerFrequency, bwaVLAUAdbEntry=bwaVLAUAdbEntry, bwaVLNumOfSoftwareRetries=bwaVLNumOfSoftwareRetries, bwaVLFTPClientMask=bwaVLFTPClientMask, bwaVLProducts=bwaVLProducts, bwa4900_SU_BD=bwa4900_SU_BD, bwaVLMacAddressDenyListRemove=bwaVLMacAddressDenyListRemove, bwaVLTransmitPowerIdx=bwaVLTransmitPowerIdx, bwaVLFramesDropped=bwaVLFramesDropped, bwaVLMirDownlink=bwaVLMirDownlink, bwaVLCountryDependentParameterFrequencies=bwaVLCountryDependentParameterFrequencies, bwaVLFTPSwDownload=bwaVLFTPSwDownload, bwaVLNeighborAuAssocLoadStatus=bwaVLNeighborAuAssocLoadStatus, bwaVLDFSRadarDetecetedTRAP=bwaVLDFSRadarDetecetedTRAP, bwaVLNeighborAuSecurityMode=bwaVLNeighborAuSecurityMode, bwaVLEventLogFileParams=bwaVLEventLogFileParams, bwaVLIpFilterEntry=bwaVLIpFilterEntry, bwaVLTrafficPriVLAN=bwaVLTrafficPriVLAN, bwaVLAccessToNwMng=bwaVLAccessToNwMng, bwaVLAdbTxSuccessModLevel1=bwaVLAdbTxSuccessModLevel1, bwaVLFTPParameters=bwaVLFTPParameters, bwaVLDeleteOneNwIpAddr=bwaVLDeleteOneNwIpAddr, bwaVLAdbDroppedFramesTotal=bwaVLAdbDroppedFramesTotal, bwaVLDeleteAllNwIpAddrs=bwaVLDeleteAllNwIpAddrs, bwaVLEthBroadcastMulticastLimiterSendTrapInterval=bwaVLEthBroadcastMulticastLimiterSendTrapInterval, bwaVLIPPrecedenceThreshold=bwaVLIPPrecedenceThreshold, bwaVLResetSpectrumCounters=bwaVLResetSpectrumCounters, bwaVLScanningStep=bwaVLScanningStep, bwaVLEthBroadcastMulticastLimiterThreshold=bwaVLEthBroadcastMulticastLimiterThreshold, bwaVLSpectrumAnalysisInformationEntry=bwaVLSpectrumAnalysisInformationEntry, bwaVLDataFramesSubmittedToBridge=bwaVLDataFramesSubmittedToBridge, MacAddress=MacAddress, bwaVLAUwirelessQualityTRAP=bwaVLAUwirelessQualityTRAP, bwaVLTrafficStatistics=bwaVLTrafficStatistics, bwaVLBestAu=bwaVLBestAu, bwaVLRunningFrom=bwaVLRunningFrom, bwaVLNwTrapTableIdx=bwaVLNwTrapTableIdx, bwaVLAuthenticationPromiscuousMode=bwaVLAuthenticationPromiscuousMode, bwaVLDrapNoOfActiveVoiceCalls=bwaVLDrapNoOfActiveVoiceCalls, bwaVLUseDhcp=bwaVLUseDhcp, bwaVLPerSuDistanceLearning=bwaVLPerSuDistanceLearning, bwaVLNeighborAuMark=bwaVLNeighborAuMark, bwaVLQinQEthertype=bwaVLQinQEthertype, bwaVLMeasuredCellDistance=bwaVLMeasuredCellDistance, bwaVLUdpPortRangeDeleteAll=bwaVLUdpPortRangeDeleteAll, bwaVLUdpPortRangeTable=bwaVLUdpPortRangeTable, bwaVLKey1=bwaVLKey1, bwaVLNwMngIpAddress=bwaVLNwMngIpAddress, bwaVLFTPSwFileName=bwaVLFTPSwFileName, bwaVLTotalTxFramesToWireless=bwaVLTotalTxFramesToWireless, bwaVLAdbMacAddress=bwaVLAdbMacAddress, bwaVLNwMngIpTableIdx=bwaVLNwMngIpTableIdx, bwaVLVlanRelayingEntry=bwaVLVlanRelayingEntry, bwaVLGracefulDegradationLimit=bwaVLGracefulDegradationLimit, bwaVLDrapGatewayIP=bwaVLDrapGatewayIP, bwaVLDFSChannelIdx=bwaVLDFSChannelIdx, bwaVLIpFilterRange=bwaVLIpFilterRange, bwaVLMaximumModulationLevel=bwaVLMaximumModulationLevel, bwaVLDataAndOtherMngFramesToWireless=bwaVLDataAndOtherMngFramesToWireless, bwaVLUdpPortRangeDelete=bwaVLUdpPortRangeDelete, bwaVLToSPrioritizationOption=bwaVLToSPrioritizationOption, bwaVLDrapUdpPort=bwaVLDrapUdpPort, bwaVLTelnetLogoutTimer=bwaVLTelnetLogoutTimer, bwaVLConcatenationMaxFrameSize=bwaVLConcatenationMaxFrameSize, bwaVLMacPinpointTable=bwaVLMacPinpointTable, bwaVLCirUplink=bwaVLCirUplink, bwaVLCellDistanceMode=bwaVLCellDistanceMode, bwaVLCRCErrors=bwaVLCRCErrors, bwaVLMngIpRangeEntry=bwaVLMngIpRangeEntry, bwaVLCurrentFrequencySubsetFrequencyNew=bwaVLCurrentFrequencySubsetFrequencyNew, bwaVLMngIpRangeIdx=bwaVLMngIpRangeIdx, bwaVLSU_BD=bwaVLSU_BD, bwaVLDFSMinimumPulsesToDetect=bwaVLDFSMinimumPulsesToDetect, bwaVLTrapTelnetUserIpAddress=bwaVLTrapTelnetUserIpAddress, bwaVLNeighborAuLearnCountryCodeBySU=bwaVLNeighborAuLearnCountryCodeBySU, bwaVLAdbStatus=bwaVLAdbStatus, bwaVLVLANSupport=bwaVLVLANSupport, ptp_BU_B100=ptp_BU_B100, bwaVLNeighborAuMacAdd=bwaVLNeighborAuMacAdd, bwaVLTotalRxConcatenatedFramesSingle=bwaVLTotalRxConcatenatedFramesSingle, bwaVLTotalRxFramesViaEthernet=bwaVLTotalRxFramesViaEthernet, bwaVLTxFramesToWireless=bwaVLTxFramesToWireless, bwaVLTcpPortRangeTable=bwaVLTcpPortRangeTable, bwaVLAutoSubBandFrequencySubsetFrequencyIdx=bwaVLAutoSubBandFrequencySubsetFrequencyIdx, bwaVLExecuteFTPConfigurationFileLoading=bwaVLExecuteFTPConfigurationFileLoading, bwaVLMaximumTransmitPowerIdx=bwaVLMaximumTransmitPowerIdx, bwaVLIPDSCPThreshold=bwaVLIPDSCPThreshold, bwaVLBridgeParameters=bwaVLBridgeParameters, bwaVLCountryDependentParameters=bwaVLCountryDependentParameters, bwaVLLoadingStatus=bwaVLLoadingStatus, bwaVLTxPower=bwaVLTxPower, bwaVLMacAddressDenyListEntry=bwaVLMacAddressDenyListEntry, bwaVLAdaptiveModulationDecisionThresholds=bwaVLAdaptiveModulationDecisionThresholds, bwaVLPhyErrors=bwaVLPhyErrors, bwaVLUpLinkQualityIndicator=bwaVLUpLinkQualityIndicator, bwaVLReadUpLinkQualityIndicator=bwaVLReadUpLinkQualityIndicator, bwaVLTxEvents=bwaVLTxEvents, bwaVLTrapSUMacAddr=bwaVLTrapSUMacAddr, bwaVLRunningSoftwareVersion=bwaVLRunningSoftwareVersion, bwaVLDFSOption=bwaVLDFSOption, bwaVLMaxNumOfAssociationsLimit=bwaVLMaxNumOfAssociationsLimit, bwaVLSU_54_BD=bwaVLSU_54_BD, bwaVLOperatorESSID=bwaVLOperatorESSID, bwaVLAdbCirTx=bwaVLAdbCirTx, bwaVLAdbHwRevision=bwaVLAdbHwRevision, bwaVLUdpPortRangeAdd=bwaVLUdpPortRangeAdd, bwaVLBurstInterval=bwaVLBurstInterval, bwaVLTotalRxConcatenatedFramesMore=bwaVLTotalRxConcatenatedFramesMore, bwaVLNeighborAuCountryCode=bwaVLNeighborAuCountryCode, bwaVLSpectrumAnalysisActivation=bwaVLSpectrumAnalysisActivation, bwaVLMngIpRangeEnd=bwaVLMngIpRangeEnd, bwaVLAutoSubBandSelectedFreqSubset=bwaVLAutoSubBandSelectedFreqSubset, bwaVLOperatorESSIDOption=bwaVLOperatorESSIDOption, bwaVLSerialNumber=bwaVLSerialNumber, bwaVLExitTelnet=bwaVLExitTelnet, bwaVLMirOnlyOption=bwaVLMirOnlyOption, bwaVLAdbUnitName=bwaVLAdbUnitName, bwaVLMacAddressDenyListAction=bwaVLMacAddressDenyListAction, bwaVLTrapToggle=bwaVLTrapToggle, bwaVLEthBroadcastMulticastLimiterOption=bwaVLEthBroadcastMulticastLimiterOption, bwaVLMaxTxApplicableModulationLevel=bwaVLMaxTxApplicableModulationLevel, bwaVLAdaptiveModulationAlgorithmOption=bwaVLAdaptiveModulationAlgorithmOption, bwaVLDeleteOneNwIpRange=bwaVLDeleteOneNwIpRange, bwaVLDrapTTL=bwaVLDrapTTL, bwaVLTotalTransmittedConcatenatedFramesDouble=bwaVLTotalTransmittedConcatenatedFramesDouble, bwaVLAdbTxSuccessModLevel2=bwaVLAdbTxSuccessModLevel2, bwaVLKey4=bwaVLKey4, bwaVLTrapText=bwaVLTrapText, bwaVLMaskID=bwaVLMaskID, bwaVLServiceParameters=bwaVLServiceParameters, bwaVLDFSChannelFrequency=bwaVLDFSChannelFrequency, bwaVLAccessToDHCP=bwaVLAccessToDHCP, bwaVLVlanForwardingTableIdx=bwaVLVlanForwardingTableIdx, bwaVLVLANPriorityThreshold=bwaVLVLANPriorityThreshold, bwaVLSpectrumAnalysisStatus=bwaVLSpectrumAnalysisStatus, bwaVLDrapMaxNumberOfVoiceCalls=bwaVLDrapMaxNumberOfVoiceCalls, bwaVLAdaptiveModulationParams=bwaVLAdaptiveModulationParams, bwaVLAdbDataEncyptOption=bwaVLAdbDataEncyptOption, bwaVLSoftwareRetrySupport=bwaVLSoftwareRetrySupport, bwaVLNeighborAuAtpcOption=bwaVLNeighborAuAtpcOption, bwaVLNeighborAuConcatenationOption=bwaVLNeighborAuConcatenationOption, bwaVLHardwareRetries=bwaVLHardwareRetries, bwaVLVlanForwardingEntry=bwaVLVlanForwardingEntry, mptUnitMACAddress=mptUnitMACAddress, bwaVLRoamingOption=bwaVLRoamingOption, bwaVLDrapGatewaysTable=bwaVLDrapGatewaysTable, bwaVLDrapGatewayType=bwaVLDrapGatewayType, bwaVLTcpPortRangeEntry=bwaVLTcpPortRangeEntry, mngIpFilterEntry=mngIpFilterEntry, bwaVLCountryDependentParameterEntry=bwaVLCountryDependentParameterEntry, bwaVLCurrentFrequencySubsetTableIdx=bwaVLCurrentFrequencySubsetTableIdx, ptp_BU_B28=ptp_BU_B28, bwaVLSysInfo=bwaVLSysInfo, bwaVLFlashMemoryControl=bwaVLFlashMemoryControl, bwaVLDFSChannelReuseParameters=bwaVLDFSChannelReuseParameters, bwaVLAdbConcatenationOption=bwaVLAdbConcatenationOption, bwaVLPowerUpFromReset=bwaVLPowerUpFromReset, bwaVLMaxContentionWindow=bwaVLMaxContentionWindow, bwaVLTrapSWVersion=bwaVLTrapSWVersion, bwaVLAdbTxSuccessModLevel6=bwaVLAdbTxSuccessModLevel6, bwaVLDeleteAllNwIpRanges=bwaVLDeleteAllNwIpRanges, bwaVLCurrentAUOperatingFrequency=bwaVLCurrentAUOperatingFrequency, bwaVLTelnetStatusTRAP=bwaVLTelnetStatusTRAP, bwaVLDFSClearRadarDetectedChannelsAfterReset=bwaVLDFSClearRadarDetectedChannelsAfterReset, ptp_BU_B14=ptp_BU_B14, bwaVLTotalRetransmittedFrames=bwaVLTotalRetransmittedFrames, bwaVLFTPServerIpAddress=bwaVLFTPServerIpAddress, bwaVLSaveCurrentConfigurationAsOperatorDefaults=bwaVLSaveCurrentConfigurationAsOperatorDefaults, bwaVLPreferredAuMacAddress=bwaVLPreferredAuMacAddress, bwaVLVlanID=bwaVLVlanID, bwaVLUnitWithMaxDistance=bwaVLUnitWithMaxDistance, bwaVLMacAddressDatabase=bwaVLMacAddressDatabase, bwaVLFTPServerParams=bwaVLFTPServerParams, bwaVLAutoSubBandFrequencySubsetFrequency=bwaVLAutoSubBandFrequencySubsetFrequency, bwaVLAIFS=bwaVLAIFS, bwaVLVlanRelayingSupport=bwaVLVlanRelayingSupport, bwaVLMaxModulationLevel=bwaVLMaxModulationLevel, bwaVLSU_3_4D=bwaVLSU_3_4D, bwaVLNewUnitTypeTrap=bwaVLNewUnitTypeTrap, bwaVLAdbTxFailedModLevel7=bwaVLAdbTxFailedModLevel7, bwaVLLowPriorityTrafficMinimumPercent=bwaVLLowPriorityTrafficMinimumPercent, bwaVLApplicableModulationLevel=bwaVLApplicableModulationLevel, bwaOID=bwaOID, bwaVLAdbSNR=bwaVLAdbSNR, bwaVLShadowVersionNumber=bwaVLShadowVersionNumber, bwaVLChangeUnitType=bwaVLChangeUnitType, bwaVLAdbTxSuccessModLevel8=bwaVLAdbTxSuccessModLevel8, bwaVLDFSChannelCheckTime=bwaVLDFSChannelCheckTime, bwaVLConcatenationOption=bwaVLConcatenationOption, bwaVLDHCPBroadcastOverrideFilter=bwaVLDHCPBroadcastOverrideFilter, bwaVLDroppedFrameEvents=bwaVLDroppedFrameEvents, bwaVLDFSParameters=bwaVLDFSParameters, bwaVLTrapMACAddress=bwaVLTrapMACAddress, bwaVLFrequencySubsetTableIdx=bwaVLFrequencySubsetTableIdx, bwaVLUnitBootVersion=bwaVLUnitBootVersion, bwaVLMinModulationLevel=bwaVLMinModulationLevel, bwaVLHWRetriesLowPriority=bwaVLHWRetriesLowPriority, bwaVLWirelessLinkEvents=bwaVLWirelessLinkEvents, bwaVLDefaultGWAddress=bwaVLDefaultGWAddress, bwaVLMeasureUpLinkQualityIndicator=bwaVLMeasureUpLinkQualityIndicator, bwaVLAverageReceiveSNR=bwaVLAverageReceiveSNR, bwaVLFTPSwSourceDir=bwaVLFTPSwSourceDir, bwaVLOperatorDefaultsFileName=bwaVLOperatorDefaultsFileName, bwaVLOID=bwaVLOID, products=products, bwaVLVlanIdRelaying=bwaVLVlanIdRelaying, bwaVLRunTimeDefaultIPGateway=bwaVLRunTimeDefaultIPGateway, bwaLighteAPWorkingMode=bwaLighteAPWorkingMode, bwaVLMinContentionWindow=bwaVLMinContentionWindow, bwaVLFrequencySubsetTable=bwaVLFrequencySubsetTable)
mibBuilder.exportSymbols("BWA-DOT11-WLAN-MIB", bwaVLUdpPortRangeNum=bwaVLUdpPortRangeNum, bwaVLAccessToNwTrap=bwaVLAccessToNwTrap, bwaVLNeighborAuDataEncyptOption=bwaVLNeighborAuDataEncyptOption, bwaVLTotalRecievedDataFrames=bwaVLTotalRecievedDataFrames, bwaVLRunTimeIPaddr=bwaVLRunTimeIPaddr, bwaVLSecurityModeSupport=bwaVLSecurityModeSupport, bwaVLMib=bwaVLMib, bwaVLUnitName=bwaVLUnitName, bwaVLVlanManagementPriority=bwaVLVlanManagementPriority, bwaVLEventLogDestinationDir=bwaVLEventLogDestinationDir, bwaVLAdbBurstModeOption=bwaVLAdbBurstModeOption, bwaVLPPPoEBroadcastOverrideFilter=bwaVLPPPoEBroadcastOverrideFilter, bwaVLAdbCirMaxDelay=bwaVLAdbCirMaxDelay, bwaVLSpectrumAnalysisChannelScanPeriod=bwaVLSpectrumAnalysisChannelScanPeriod, bwaVLTotalRxEvents=bwaVLTotalRxEvents, bwaVLAUBurstDurationHighPriority=bwaVLAUBurstDurationHighPriority, bwaVLSU=bwaVLSU, bwaVLTcpPortRangeIdx=bwaVLTcpPortRangeIdx, bwaVLSU_3_1D=bwaVLSU_3_1D, bwaVLEthernetLinkType=bwaVLEthernetLinkType, bwaVLDeleteAllUserFilters=bwaVLDeleteAllUserFilters, bwaVLAutoSubBandSelect=bwaVLAutoSubBandSelect, bwa4900_AU_BS=bwa4900_AU_BS, bwaVLTrapFtpOrTftpStatus=bwaVLTrapFtpOrTftpStatus, bwaVLTcpPortRangeEnd=bwaVLTcpPortRangeEnd, bwaVLUdpPortRangeConfig=bwaVLUdpPortRangeConfig, bwaVLBestAuSupport=bwaVLBestAuSupport, bwaVLUserFilterParams=bwaVLUserFilterParams, bwaVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages=bwaVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages, bwaVLTcpPortRangeNum=bwaVLTcpPortRangeNum, bwaVLTrapParameterChanged=bwaVLTrapParameterChanged, bwaVLUnitControl=bwaVLUnitControl, bwaVLAteTestResults=bwaVLAteTestResults, bwaVLCurrentAUOperatingFrequencyNew=bwaVLCurrentAUOperatingFrequencyNew, bwaVLFeatureUpgrade=bwaVLFeatureUpgrade, bwaVLSpectrumAnalysisInformationSignalSNR=bwaVLSpectrumAnalysisInformationSignalSNR, bwaVLAdbTxFailedModLevel8=bwaVLAdbTxFailedModLevel8, bwaVLReadOnlyPassword=bwaVLReadOnlyPassword, bwaVLTrafficPriUdpTcpPortRange=bwaVLTrafficPriUdpTcpPortRange, bwaVLSiteSurvey=bwaVLSiteSurvey, bwaVLPerformanceParams=bwaVLPerformanceParams, bwaVLUdpPortRangeStart=bwaVLUdpPortRangeStart, bwaVLPowerLevelSteps=bwaVLPowerLevelSteps, bwaVLAdbTxSuccessModLevel5=bwaVLAdbTxSuccessModLevel5, bwaVLConfigurationFileLoading=bwaVLConfigurationFileLoading, bwaVLToSPrecedenceThreshold=bwaVLToSPrecedenceThreshold, bwaVLUnitType=bwaVLUnitType, bwaVLDFSChannelAvoidancePeriod=bwaVLDFSChannelAvoidancePeriod, bwaVLSUassociatedTRAP=bwaVLSUassociatedTRAP, bwaVLSetDefaults=bwaVLSetDefaults, bwaVLNoOfDuplicateFramesDiscarded=bwaVLNoOfDuplicateFramesDiscarded, bwaVLDrapGatewayEntry=bwaVLDrapGatewayEntry, mngTrapEntry=mngTrapEntry, bwaVLBurstModeOption=bwaVLBurstModeOption, bwaVLAdbAuthOption=bwaVLAdbAuthOption, bwaVLAdbAtpcOption=bwaVLAdbAtpcOption, bwaVLAntennaGainChange=bwaVLAntennaGainChange, bwaVLMaximumTxPower=bwaVLMaximumTxPower, bwaVLScanningMode=bwaVLScanningMode, bwaVLMacAddressDenyListTable=bwaVLMacAddressDenyListTable, bwaVLAdbTxSuccessModLevel4=bwaVLAdbTxSuccessModLevel4, bwaVLVlanRelayingTableIdx=bwaVLVlanRelayingTableIdx, bwaVLMaxBurstDuration=bwaVLMaxBurstDuration, bwaVLManagementVlanID=bwaVLManagementVlanID, bwaVLWirelessLinkPrioritization=bwaVLWirelessLinkPrioritization, bwaVLMaximumTransmitPowerEntry=bwaVLMaximumTransmitPowerEntry, bwaVLConcatenationMaximumNumberOfFrames=bwaVLConcatenationMaximumNumberOfFrames, bwaVLDrapGatewayNoOfActiveVoiceCalls=bwaVLDrapGatewayNoOfActiveVoiceCalls, bwaVLAdbBootVer=bwaVLAdbBootVer, bwaVLDFSMoveFreq=bwaVLDFSMoveFreq, bwaVLAuthenticationAlgorithm=bwaVLAuthenticationAlgorithm, bwa=bwa, bwaVLVlanForwardingSupport=bwaVLVlanForwardingSupport, bwaVLFrequencySubsetFrequencyNew=bwaVLFrequencySubsetFrequencyNew, bwaVLFramesSubmittedViaMidQueue=bwaVLFramesSubmittedViaMidQueue, bwaVLDisassociate=bwaVLDisassociate, bwaVLSUPerModulationLevelCountersTxFailed=bwaVLSUPerModulationLevelCountersTxFailed, bwaVLAUBeaconsToWireless=bwaVLAUBeaconsToWireless, bwaVLSpectrumAnalysisInformationSignalWidth=bwaVLSpectrumAnalysisInformationSignalWidth)
