#
# PySNMP MIB module SAF-INTEGRAX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/saf/SAF-INTEGRAX-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 11:50:48 2024
# On host fv-az1427-842 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
pointToPoint, = mibBuilder.importSymbols("SAF-ENTERPRISE", "pointToPoint")
safIntegra, = mibBuilder.importSymbols("SAF-INTEGRA-MIB", "safIntegra")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, Counter32, MibIdentifier, NotificationType, IpAddress, iso, ObjectIdentity, Gauge32, Unsigned32, Bits, Counter64, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "MibIdentifier", "NotificationType", "IpAddress", "iso", "ObjectIdentity", "Gauge32", "Unsigned32", "Bits", "Counter64", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, PhysAddress, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString", "DateAndTime")
integraX = ModuleIdentity((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10))
integraX.setRevisions(('2020-06-26 00:00', '2020-05-19 00:00', '2020-05-08 00:00', '2020-01-14 00:00', '2019-11-27 00:00', '2019-06-11 00:00', '2019-04-23 00:00', '2019-03-07 00:00', '2019-03-06 00:00', '2019-02-17 00:00',))
if mibBuilder.loadTexts: integraX.setLastUpdated('202006260000Z')
if mibBuilder.loadTexts: integraX.setOrganization('SAF Tehnika')
class FixedDiv20(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-2'

class FixedDiv10(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

integraXtimestamp = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXtimestamp.setStatus('current')
integraXradio = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2))
integraXradioA = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1))
integraXradioAtxPower = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 1), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioAtxPower.setStatus('current')
integraXradioAtxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 2), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioAtxFrequency.setStatus('current')
integraXradioArxLevel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioArxLevel.setStatus('current')
integraXradioArxLevelState = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("low", 2), ("high", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioArxLevelState.setStatus('current')
integraXradioAside = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("low", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioAside.setStatus('current')
integraXradioAtxMute = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioAtxMute.setStatus('current')
integraXradioAtxMuteDuration = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioAtxMuteDuration.setStatus('current')
integraXradioAduplexShift = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 8), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioAduplexShift.setStatus('current')
integraXradioArxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 9), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioArxFrequency.setStatus('current')
integraXradioAtemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 10), FixedDiv10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioAtemperature.setStatus('current')
integraXradioApll = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioApll.setStatus('current')
integraXradioArangesTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 12), )
if mibBuilder.loadTexts: integraXradioArangesTable.setStatus('current')
integraXradioArangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 12, 1), ).setIndexNames((0, "SAF-INTEGRAX-MIB", "integraXradioArangeEntryIndex"))
if mibBuilder.loadTexts: integraXradioArangeEntry.setStatus('current')
integraXradioArangeEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioArangeEntryIndex.setStatus('current')
integraXradioArangeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioArangeDescr.setStatus('current')
integraXradioArangeTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 12, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioArangeTxPower.setStatus('current')
integraXradioArangeTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 1, 12, 1, 4), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioArangeTxFrequency.setStatus('current')
integraXradioB = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2))
integraXradioBtxPower = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 1), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBtxPower.setStatus('current')
integraXradioBtxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 2), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBtxFrequency.setStatus('current')
integraXradioBrxLevel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBrxLevel.setStatus('current')
integraXradioBrxLevelState = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("low", 2), ("high", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBrxLevelState.setStatus('current')
integraXradioBside = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("low", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBside.setStatus('current')
integraXradioBtxMute = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBtxMute.setStatus('current')
integraXradioBtxMuteDuration = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBtxMuteDuration.setStatus('current')
integraXradioBduplexShift = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 8), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBduplexShift.setStatus('current')
integraXradioBrxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 9), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBrxFrequency.setStatus('current')
integraXradioBtemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 10), FixedDiv10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBtemperature.setStatus('current')
integraXradioBpll = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBpll.setStatus('current')
integraXradioBrangesTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 12), )
if mibBuilder.loadTexts: integraXradioBrangesTable.setStatus('current')
integraXradioBrangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 12, 1), ).setIndexNames((0, "SAF-INTEGRAX-MIB", "integraXradioBrangeEntryIndex"))
if mibBuilder.loadTexts: integraXradioBrangeEntry.setStatus('current')
integraXradioBrangeEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBrangeEntryIndex.setStatus('current')
integraXradioBrangeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBrangeDescr.setStatus('current')
integraXradioBrangeTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 12, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBrangeTxPower.setStatus('current')
integraXradioBrangeTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 2, 2, 12, 1, 4), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXradioBrangeTxFrequency.setStatus('current')
integraXmodem = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3))
integraXmodemA = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1))
integraXmodemAacquireStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acquireInProgress", 1), ("acquireLocked", 2), ("acquireFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAacquireStatus.setStatus('current')
integraXmodemAnormalizedMse = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 2), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAnormalizedMse.setStatus('current')
integraXmodemAfecLoad = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAfecLoad.setStatus('current')
integraXmodemAxpdEst = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 4), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAxpdEst.setStatus('current')
integraXmodemAacquireLastStatusDetails = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 12, 13))).clone(namedValues=NamedValues(("acquireLocked", 1), ("acquireSweep", 4), ("acquireMSEerror", 5), ("acquireBITerror", 6), ("acquireStopped", 12), ("acquireSMerror", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAacquireLastStatusDetails.setStatus('current')
integraXmodemAtemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 6), FixedDiv10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAtemperature.setStatus('current')
integraXmodemArxModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemArxModulation.setStatus('current')
integraXmodemAtxModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAtxModulation.setStatus('current')
integraXmodemArxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 9), Integer32()).setUnits('kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemArxCapacity.setStatus('current')
integraXmodemAtxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 10), Integer32()).setUnits('kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAtxCapacity.setStatus('current')
integraXmodemAacmEngine = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAacmEngine.setStatus('current')
integraXmodemAcarrierOffset = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 12), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAcarrierOffset.setStatus('current')
integraXmodemAcountTime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 13), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAcountTime.setStatus('current')
integraXmodemAerroredBlock = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAerroredBlock.setStatus('current')
integraXmodemAerroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 15), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAerroredSecond.setStatus('current')
integraXmodemAseverelyErroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 16), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAseverelyErroredSecond.setStatus('current')
integraXmodemAbackgroundBlockError = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAbackgroundBlockError.setStatus('current')
integraXmodemAtotalBlockNumber = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAtotalBlockNumber.setStatus('current')
integraXmodemAerroredSecondRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAerroredSecondRatio.setStatus('current')
integraXmodemAseverelyErroredSecondRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAseverelyErroredSecondRatio.setStatus('current')
integraXmodemAbackgroundBlockErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAbackgroundBlockErrorRatio.setStatus('current')
integraXmodemAuptime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 22), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAuptime.setStatus('current')
integraXmodemAunavailtime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 23), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAunavailtime.setStatus('current')
integraXmodemAfecLdpcBlockCounter = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAfecLdpcBlockCounter.setStatus('current')
integraXmodemAfecLdpcUncorrectedBlockCounter = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAfecLdpcUncorrectedBlockCounter.setStatus('current')
integraXmodemAfecLdpcUncorrectedPercent = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 26), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAfecLdpcUncorrectedPercent.setStatus('current')
integraXmodemAfecRsBlockCounter = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAfecRsBlockCounter.setStatus('current')
integraXmodemAfecRsUncorrectedBlockCounter = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAfecRsUncorrectedBlockCounter.setStatus('current')
integraXmodemAmodulationACMmin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAmodulationACMmin.setStatus('current')
integraXmodemAmodulationACMmax = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemAmodulationACMmax.setStatus('current')
integraXmodemB = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2))
integraXmodemBacquireStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acquireInProgress", 1), ("acquireLocked", 2), ("acquireFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBacquireStatus.setStatus('current')
integraXmodemBnormalizedMse = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 2), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBnormalizedMse.setStatus('current')
integraXmodemBfecLoad = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBfecLoad.setStatus('current')
integraXmodemBxpdEst = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 4), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBxpdEst.setStatus('current')
integraXmodemBacquireLastStatusDetails = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 12, 13))).clone(namedValues=NamedValues(("acquireLocked", 1), ("acquireSweep", 4), ("acquireMSEerror", 5), ("acquireBITerror", 6), ("acquireStopped", 12), ("acquireSMerror", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBacquireLastStatusDetails.setStatus('current')
integraXmodemBtemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 6), FixedDiv10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBtemperature.setStatus('current')
integraXmodemBrxModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBrxModulation.setStatus('current')
integraXmodemBtxModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBtxModulation.setStatus('current')
integraXmodemBrxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 9), Integer32()).setUnits('kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBrxCapacity.setStatus('current')
integraXmodemBtxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 10), Integer32()).setUnits('kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBtxCapacity.setStatus('current')
integraXmodemBacmEngine = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBacmEngine.setStatus('current')
integraXmodemBcarrierOffset = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 12), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBcarrierOffset.setStatus('current')
integraXmodemBcountTime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 13), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBcountTime.setStatus('current')
integraXmodemBerroredBlock = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBerroredBlock.setStatus('current')
integraXmodemBerroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 15), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBerroredSecond.setStatus('current')
integraXmodemBseverelyErroredSecond = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 16), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBseverelyErroredSecond.setStatus('current')
integraXmodemBbackgroundBlockError = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBbackgroundBlockError.setStatus('current')
integraXmodemBtotalBlockNumber = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBtotalBlockNumber.setStatus('current')
integraXmodemBerroredSecondRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBerroredSecondRatio.setStatus('current')
integraXmodemBseverelyErroredSecondRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBseverelyErroredSecondRatio.setStatus('current')
integraXmodemBbackgroundBlockErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBbackgroundBlockErrorRatio.setStatus('current')
integraXmodemBuptime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 22), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBuptime.setStatus('current')
integraXmodemBunavailtime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 23), Counter64()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBunavailtime.setStatus('current')
integraXmodemBfecLdpcBlockCounter = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBfecLdpcBlockCounter.setStatus('current')
integraXmodemBfecLdpcUncorrectedBlockCounter = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBfecLdpcUncorrectedBlockCounter.setStatus('current')
integraXmodemBfecLdpcUncorrectedPercent = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 26), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBfecLdpcUncorrectedPercent.setStatus('current')
integraXmodemBfecRsBlockCounter = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBfecRsBlockCounter.setStatus('current')
integraXmodemBfecRsUncorrectedBlockCounter = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBfecRsUncorrectedBlockCounter.setStatus('current')
integraXmodemBmodulationACMmin = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBmodulationACMmin.setStatus('current')
integraXmodemBmodulationACMmax = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 2, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBmodulationACMmax.setStatus('current')
integraXmodemBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 3), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemBandwidth.setStatus('current')
integraXmodemModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXmodemModulation.setStatus('current')
integraXsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4))
integraXsysCPUtemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 2), FixedDiv10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysCPUtemperature.setStatus('current')
integraXsysLicenseExpire = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 3), Gauge32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysLicenseExpire.setStatus('current')
integraXsysLicenseGenStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("expired", 2), ("unknown", 3), ("unlimitedTime", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysLicenseGenStatus.setStatus('current')
integraXsysPSUvoltage = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 5), Integer32()).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysPSUvoltage.setStatus('current')
integraXsysPSUcurrent = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 6), Integer32()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysPSUcurrent.setStatus('current')
integraXsysPSUpower = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 7), Integer32()).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysPSUpower.setStatus('current')
integraXsysBoardTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 8), FixedDiv10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysBoardTemperature.setStatus('current')
integraXsysFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 9), FixedDiv10()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysFreeMemory.setStatus('current')
integraXsysCPUidle = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 10), FixedDiv10()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysCPUidle.setStatus('current')
integraXsysDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysDeviceType.setStatus('current')
integraXsysDeviceSerial = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysDeviceSerial.setStatus('current')
integraXsysDeviceProductModel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysDeviceProductModel.setStatus('current')
integraXsysFanError = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 14), Bits().clone(namedValues=NamedValues(("no", 0), ("fan1", 1), ("fan2", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysFanError.setStatus('current')
integraXsysSw1v0core = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 15), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysSw1v0core.setStatus('current')
integraXsysSw1v0avdd = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 16), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysSw1v0avdd.setStatus('current')
integraXsysSw1v2a = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 17), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysSw1v2a.setStatus('current')
integraXsysSw1v5ddr = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 18), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysSw1v5ddr.setStatus('current')
integraXsysSw1v8 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 19), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysSw1v8.setStatus('current')
integraXsysSw2v5 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 20), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysSw2v5.setStatus('current')
integraXsysSw3v3 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 21), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysSw3v3.setStatus('current')
integraXsysVttrefPs = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 22), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysVttrefPs.setStatus('current')
integraXsysVttddrPs = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 23), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysVttddrPs.setStatus('current')
integraXsysZq1v0 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 24), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysZq1v0.setStatus('current')
integraXsysZq1v5 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 25), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysZq1v5.setStatus('current')
integraXsysZq1v8 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 26), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysZq1v8.setStatus('current')
integraXsysZq2v5 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 27), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysZq2v5.setStatus('current')
integraXsysZq3v3 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 28), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysZq3v3.setStatus('current')
integraXsys5v0d = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 29), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsys5v0d.setStatus('current')
integraXsysSw1v2 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 30), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysSw1v2.setStatus('current')
integraXsysMdmVddcAvs = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 31), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysMdmVddcAvs.setStatus('current')
integraXsysMdm3v3 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 32), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysMdm3v3.setStatus('current')
integraXsysMdm1v0aPm = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 33), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysMdm1v0aPm.setStatus('current')
integraXsysMdm1v0a = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 34), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysMdm1v0a.setStatus('current')
integraXsysMdm1v8a = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 35), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysMdm1v8a.setStatus('current')
integraXsysMdmDAC02v5a = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 36), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysMdmDAC02v5a.setStatus('current')
integraXsysMdmDAC12v5 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 37), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysMdmDAC12v5.setStatus('current')
integraXsysMdmDAC22v5 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 38), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysMdmDAC22v5.setStatus('current')
integraXsysMdm1v8io = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 39), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysMdm1v8io.setStatus('current')
integraXsysMdm3v3io = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 40), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysMdm3v3io.setStatus('current')
integraXsys3v3Radio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 41), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsys3v3Radio.setStatus('current')
integraXsysMdm4v0 = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 42), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysMdm4v0.setStatus('current')
integraXsys5v0nRadio = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 43), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsys5v0nRadio.setStatus('current')
integraXsysCoreVddSns = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 44), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysCoreVddSns.setStatus('current')
integraXsys40v0RadioSns = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 45), FixedDiv20()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsys40v0RadioSns.setStatus('current')
integraXsysServices = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 46))
integraXsysServicesReboot = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 46, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXsysServicesReboot.setStatus('current')
integraXsysServicesFtpSwitch = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 46, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXsysServicesFtpSwitch.setStatus('current')
integraXsysServicesFwCurrInfo = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 46, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysServicesFwCurrInfo.setStatus('current')
integraXsysServicesFwAvailView = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 46, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysServicesFwAvailView.setStatus('current')
integraXsysServicesFwRemove = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 46, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("candfw1", 1), ("candfw2", 2), ("candfw3", 3), ("candfw4", 4), ("candfw5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXsysServicesFwRemove.setStatus('current')
integraXsysServicesFwRemoveAll = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 46, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("removeAllCandfw", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXsysServicesFwRemoveAll.setStatus('current')
integraXsysServicesFwUpload = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 46, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("upload", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXsysServicesFwUpload.setStatus('current')
integraXsysServicesFwInst = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 46, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("candfw1", 1), ("candfw2", 2), ("candfw3", 3), ("candfw4", 4), ("candfw5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXsysServicesFwInst.setStatus('current')
integraXsysServicesFwSwitchRunning = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 46, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fw1", 1), ("fw2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXsysServicesFwSwitchRunning.setStatus('current')
integraXsysServicesFwSwitchNext = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 4, 46, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fw1", 1), ("fw2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXsysServicesFwSwitchNext.setStatus('current')
integraXethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5))
integraXifStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1), )
if mibBuilder.loadTexts: integraXifStatusTable.setStatus('current')
integraXifPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1), ).setIndexNames((0, "SAF-INTEGRAX-MIB", "integraXifPortStatIndex"))
if mibBuilder.loadTexts: integraXifPortEntry.setStatus('current')
integraXifPortStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortStatIndex.setStatus('current')
integraXifPortStatDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortStatDescr.setStatus('current')
integraXifPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortType.setStatus('current')
integraXifPortMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 4), Integer32()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortMtu.setStatus('current')
integraXifPortHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 5), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortHighSpeed.setStatus('current')
integraXifPortPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortPhysAddress.setStatus('current')
integraXifPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortAdminStatus.setStatus('current')
integraXifPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortOperStatus.setStatus('current')
integraXifPortLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortLastChange.setStatus('current')
integraXifPortAutoneg = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortAutoneg.setStatus('current')
integraXifPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortDuplex.setStatus('current')
integraXifPortSyncEthActive = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortSyncEthActive.setStatus('current')
integraXifPortSyncEthPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortSyncEthPrio.setStatus('current')
integraXifPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortFlowControl.setStatus('current')
integraXifStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2), )
if mibBuilder.loadTexts: integraXifStatisticsTable.setStatus('current')
integraXifPortStcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1), ).setIndexNames((0, "SAF-INTEGRAX-MIB", "integraXifPortStcIndex"))
if mibBuilder.loadTexts: integraXifPortStcEntry.setStatus('current')
integraXifPortStcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortStcIndex.setStatus('current')
integraXifPortStcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifPortStcDescr.setStatus('current')
integraXifTimePassed = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 3), TimeTicks()).setUnits('s/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifTimePassed.setStatus('current')
integraXifIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 4), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifIngressPackets.setStatus('current')
integraXifIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 5), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifIngressBytes.setStatus('current')
integraXifEgressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 6), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEgressPackets.setStatus('current')
integraXifEgressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 7), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEgressBytes.setStatus('current')
integraXifEtherStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 8), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsMulticastPkts.setStatus('current')
integraXifEtherStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 9), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsBroadcastPkts.setStatus('current')
integraXifEtherStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 10), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsPkts64Octets.setStatus('current')
integraXifEtherStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 11), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsPkts65to127Octets.setStatus('current')
integraXifEtherStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 12), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsPkts128to255Octets.setStatus('current')
integraXifEtherStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 13), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsPkts256to511Octets.setStatus('current')
integraXifEtherStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 14), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsPkts512to1023Octets.setStatus('current')
integraXifEtherStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 15), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsPkts1024to1518Octets.setStatus('current')
integraXifEtherStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 16), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsOversizePkts.setStatus('current')
integraXifEtherRxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 17), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherRxOversizePkts.setStatus('current')
integraXifEtherTxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 18), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherTxOversizePkts.setStatus('current')
integraXifEtherStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 19), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsOctets.setStatus('current')
integraXifEtherStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 20), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsPkts.setStatus('current')
integraXifEtherStatsTXNoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 21), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsTXNoErrors.setStatus('current')
integraXifEtherStatsRXNoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 22), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsRXNoErrors.setStatus('current')
integraXifEtherStatsPkts1519to1522Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 23), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsPkts1519to1522Octets.setStatus('current')
integraXifIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 24), Counter64()).setUnits('octet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifIfInOctets.setStatus('current')
integraXifIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 25), Counter64()).setUnits('octet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifIfOutOctets.setStatus('current')
integraXifDot1dTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 26), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifDot1dTpPortInFrames.setStatus('current')
integraXifDot1dTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 27), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifDot1dTpPortOutFrames.setStatus('current')
integraXifReceivedPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 28), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifReceivedPkts64Octets.setStatus('current')
integraXifTransmittedPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 29), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifTransmittedPkts64Octets.setStatus('current')
integraXifReceivedPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 30), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifReceivedPkts65to127Octets.setStatus('current')
integraXifTransmittedPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 31), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifTransmittedPkts65to127Octets.setStatus('current')
integraXifReceivedPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 32), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifReceivedPkts128to255Octets.setStatus('current')
integraXifTransmittedPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 33), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifTransmittedPkts128to255Octets.setStatus('current')
integraXifReceivedPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 34), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifReceivedPkts256to511Octets.setStatus('current')
integraXifTransmittedPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 35), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifTransmittedPkts256to511Octets.setStatus('current')
integraXifReceivedPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 36), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifReceivedPkts512to1023Octets.setStatus('current')
integraXifTransmittedPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 37), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifTransmittedPkts512to1023Octets.setStatus('current')
integraXifReceivedPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 38), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifReceivedPkts1024to1518Octets.setStatus('current')
integraXifTransmittedPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 39), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifTransmittedPkts1024to1518Octets.setStatus('current')
integraXifIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 40), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifIfInBroadcastPkts.setStatus('current')
integraXifIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 41), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifIfOutBroadcastPkts.setStatus('current')
integraXifIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 42), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifIfInMulticastPkts.setStatus('current')
integraXifIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 43), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifIfOutMulticastPkts.setStatus('current')
integraXifDot3InPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 44), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifDot3InPauseFrames.setStatus('current')
integraXifDot3OutPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 45), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifDot3OutPauseFrames.setStatus('current')
integraXifEtherStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 46), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsUndersizePkts.setStatus('current')
integraXifEtherStatsFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 47), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsFragments.setStatus('current')
integraXifEtherStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 48), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsCRCAlignErrors.setStatus('current')
integraXifEtherStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 49), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEtherStatsJabbers.setStatus('current')
integraXifIngressBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 50), Integer32()).setUnits('Bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifIngressBPS.setStatus('current')
integraXifIngressPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 51), Integer32()).setUnits('pps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifIngressPPS.setStatus('current')
integraXifEgressBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 52), Integer32()).setUnits('Bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEgressBPS.setStatus('current')
integraXifEgressPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 53), Integer32()).setUnits('pps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifEgressPPS.setStatus('current')
integraXifAllCoSQoutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 54), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifAllCoSQoutPackets.setStatus('current')
integraXifAllCoSQoutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 55), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifAllCoSQoutBytes.setStatus('current')
integraXifAllCoSQdroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 56), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifAllCoSQdroppedPackets.setStatus('current')
integraXifAllCoSQdroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 57), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifAllCoSQdroppedBytes.setStatus('current')
integraXifProcessedRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 58), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifProcessedRxPackets.setStatus('current')
integraXifProcessedRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 2, 1, 59), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifProcessedRxBytes.setStatus('current')
integraXifLspPortAdminState = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("lsp", 2), ("backup", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifLspPortAdminState.setStatus('current')
integraXifLspPortList = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 4), Bits().clone(namedValues=NamedValues(("none", 0), ("lan1", 1), ("lan2", 2), ("lan3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifLspPortList.setStatus('current')
integraXifLspPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lspPortOK", 1), ("lspPortDownBlockedByLSP", 2), ("backupNoLink", 3), ("backupLinkActive", 4), ("backupLinkReady", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXifLspPortStatus.setStatus('current')
integraXexecuteConfig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXexecuteConfig.setStatus('current')
integraXneedStore = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXneedStore.setStatus('current')
integraXstoreConfig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("store", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXstoreConfig.setStatus('current')
integraXnetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 9))
integraXnetCfgIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXnetCfgIPaddress.setStatus('current')
integraXnetCfgIPmask = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXnetCfgIPmask.setStatus('current')
integraXnetCfgIPgateway = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraXnetCfgIPgateway.setStatus('current')
integraXnetCfgRemoteIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraXnetCfgRemoteIPaddress.setStatus('current')
integraXConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 10))
integraXCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 10, 1))
integraXCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 10, 1, 1)).setObjects(("SAF-INTEGRAX-MIB", "integraXMiscGroup"), ("SAF-INTEGRAX-MIB", "integraXRadioGroup"), ("SAF-INTEGRAX-MIB", "integraXModemGroup"), ("SAF-INTEGRAX-MIB", "integraXSystemGroup"), ("SAF-INTEGRAX-MIB", "integraXEthernetGeneralGroup"), ("SAF-INTEGRAX-MIB", "integraXEthernetMiiPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraXCompliance = integraXCompliance.setStatus('current')
integraXGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 10, 2))
integraXMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 10, 2, 1)).setObjects(("SAF-INTEGRAX-MIB", "integraXtimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraXMiscGroup = integraXMiscGroup.setStatus('current')
integraXRadioGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 10, 2, 2)).setObjects(("SAF-INTEGRAX-MIB", "integraXradioAtxPower"), ("SAF-INTEGRAX-MIB", "integraXradioAtxFrequency"), ("SAF-INTEGRAX-MIB", "integraXradioArxLevel"), ("SAF-INTEGRAX-MIB", "integraXradioArxLevelState"), ("SAF-INTEGRAX-MIB", "integraXradioAside"), ("SAF-INTEGRAX-MIB", "integraXradioAtxMute"), ("SAF-INTEGRAX-MIB", "integraXradioAtxMuteDuration"), ("SAF-INTEGRAX-MIB", "integraXradioAduplexShift"), ("SAF-INTEGRAX-MIB", "integraXradioArxFrequency"), ("SAF-INTEGRAX-MIB", "integraXradioAtemperature"), ("SAF-INTEGRAX-MIB", "integraXradioApll"), ("SAF-INTEGRAX-MIB", "integraXradioArangeEntryIndex"), ("SAF-INTEGRAX-MIB", "integraXradioArangeDescr"), ("SAF-INTEGRAX-MIB", "integraXradioArangeTxPower"), ("SAF-INTEGRAX-MIB", "integraXradioArangeTxFrequency"), ("SAF-INTEGRAX-MIB", "integraXradioBtxPower"), ("SAF-INTEGRAX-MIB", "integraXradioBtxFrequency"), ("SAF-INTEGRAX-MIB", "integraXradioBrxLevel"), ("SAF-INTEGRAX-MIB", "integraXradioBrxLevelState"), ("SAF-INTEGRAX-MIB", "integraXradioBside"), ("SAF-INTEGRAX-MIB", "integraXradioBtxMute"), ("SAF-INTEGRAX-MIB", "integraXradioBtxMuteDuration"), ("SAF-INTEGRAX-MIB", "integraXradioBduplexShift"), ("SAF-INTEGRAX-MIB", "integraXradioBrxFrequency"), ("SAF-INTEGRAX-MIB", "integraXradioBtemperature"), ("SAF-INTEGRAX-MIB", "integraXradioBpll"), ("SAF-INTEGRAX-MIB", "integraXradioBrangeEntryIndex"), ("SAF-INTEGRAX-MIB", "integraXradioBrangeDescr"), ("SAF-INTEGRAX-MIB", "integraXradioBrangeTxPower"), ("SAF-INTEGRAX-MIB", "integraXradioBrangeTxFrequency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraXRadioGroup = integraXRadioGroup.setStatus('current')
integraXModemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 10, 2, 3)).setObjects(("SAF-INTEGRAX-MIB", "integraXmodemAacquireStatus"), ("SAF-INTEGRAX-MIB", "integraXmodemAnormalizedMse"), ("SAF-INTEGRAX-MIB", "integraXmodemAfecLoad"), ("SAF-INTEGRAX-MIB", "integraXmodemAxpdEst"), ("SAF-INTEGRAX-MIB", "integraXmodemAacquireLastStatusDetails"), ("SAF-INTEGRAX-MIB", "integraXmodemAtemperature"), ("SAF-INTEGRAX-MIB", "integraXmodemArxModulation"), ("SAF-INTEGRAX-MIB", "integraXmodemAtxModulation"), ("SAF-INTEGRAX-MIB", "integraXmodemArxCapacity"), ("SAF-INTEGRAX-MIB", "integraXmodemAtxCapacity"), ("SAF-INTEGRAX-MIB", "integraXmodemAacmEngine"), ("SAF-INTEGRAX-MIB", "integraXmodemAcarrierOffset"), ("SAF-INTEGRAX-MIB", "integraXmodemAcountTime"), ("SAF-INTEGRAX-MIB", "integraXmodemAerroredBlock"), ("SAF-INTEGRAX-MIB", "integraXmodemAerroredSecond"), ("SAF-INTEGRAX-MIB", "integraXmodemAseverelyErroredSecond"), ("SAF-INTEGRAX-MIB", "integraXmodemAbackgroundBlockError"), ("SAF-INTEGRAX-MIB", "integraXmodemAtotalBlockNumber"), ("SAF-INTEGRAX-MIB", "integraXmodemAerroredSecondRatio"), ("SAF-INTEGRAX-MIB", "integraXmodemAseverelyErroredSecondRatio"), ("SAF-INTEGRAX-MIB", "integraXmodemAbackgroundBlockErrorRatio"), ("SAF-INTEGRAX-MIB", "integraXmodemAuptime"), ("SAF-INTEGRAX-MIB", "integraXmodemAunavailtime"), ("SAF-INTEGRAX-MIB", "integraXmodemAfecLdpcBlockCounter"), ("SAF-INTEGRAX-MIB", "integraXmodemAfecLdpcUncorrectedBlockCounter"), ("SAF-INTEGRAX-MIB", "integraXmodemAfecLdpcUncorrectedPercent"), ("SAF-INTEGRAX-MIB", "integraXmodemAfecRsBlockCounter"), ("SAF-INTEGRAX-MIB", "integraXmodemAfecRsUncorrectedBlockCounter"), ("SAF-INTEGRAX-MIB", "integraXmodemBacquireStatus"), ("SAF-INTEGRAX-MIB", "integraXmodemBnormalizedMse"), ("SAF-INTEGRAX-MIB", "integraXmodemBfecLoad"), ("SAF-INTEGRAX-MIB", "integraXmodemBxpdEst"), ("SAF-INTEGRAX-MIB", "integraXmodemBacquireLastStatusDetails"), ("SAF-INTEGRAX-MIB", "integraXmodemBtemperature"), ("SAF-INTEGRAX-MIB", "integraXmodemBrxModulation"), ("SAF-INTEGRAX-MIB", "integraXmodemBtxModulation"), ("SAF-INTEGRAX-MIB", "integraXmodemBrxCapacity"), ("SAF-INTEGRAX-MIB", "integraXmodemBtxCapacity"), ("SAF-INTEGRAX-MIB", "integraXmodemBacmEngine"), ("SAF-INTEGRAX-MIB", "integraXmodemBcarrierOffset"), ("SAF-INTEGRAX-MIB", "integraXmodemBcountTime"), ("SAF-INTEGRAX-MIB", "integraXmodemBerroredBlock"), ("SAF-INTEGRAX-MIB", "integraXmodemBerroredSecond"), ("SAF-INTEGRAX-MIB", "integraXmodemBseverelyErroredSecond"), ("SAF-INTEGRAX-MIB", "integraXmodemBbackgroundBlockError"), ("SAF-INTEGRAX-MIB", "integraXmodemBtotalBlockNumber"), ("SAF-INTEGRAX-MIB", "integraXmodemBerroredSecondRatio"), ("SAF-INTEGRAX-MIB", "integraXmodemBseverelyErroredSecondRatio"), ("SAF-INTEGRAX-MIB", "integraXmodemBbackgroundBlockErrorRatio"), ("SAF-INTEGRAX-MIB", "integraXmodemBuptime"), ("SAF-INTEGRAX-MIB", "integraXmodemBunavailtime"), ("SAF-INTEGRAX-MIB", "integraXmodemBfecLdpcBlockCounter"), ("SAF-INTEGRAX-MIB", "integraXmodemBfecLdpcUncorrectedBlockCounter"), ("SAF-INTEGRAX-MIB", "integraXmodemBfecLdpcUncorrectedPercent"), ("SAF-INTEGRAX-MIB", "integraXmodemBfecRsBlockCounter"), ("SAF-INTEGRAX-MIB", "integraXmodemBfecRsUncorrectedBlockCounter"), ("SAF-INTEGRAX-MIB", "integraXmodemBandwidth"), ("SAF-INTEGRAX-MIB", "integraXmodemModulation"), ("SAF-INTEGRAX-MIB", "integraXmodemAmodulationACMmin"), ("SAF-INTEGRAX-MIB", "integraXmodemAmodulationACMmax"), ("SAF-INTEGRAX-MIB", "integraXmodemBmodulationACMmin"), ("SAF-INTEGRAX-MIB", "integraXmodemBmodulationACMmax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraXModemGroup = integraXModemGroup.setStatus('current')
integraXSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 10, 2, 4)).setObjects(("SAF-INTEGRAX-MIB", "integraXsysCPUtemperature"), ("SAF-INTEGRAX-MIB", "integraXsysLicenseExpire"), ("SAF-INTEGRAX-MIB", "integraXsysLicenseGenStatus"), ("SAF-INTEGRAX-MIB", "integraXsysPSUvoltage"), ("SAF-INTEGRAX-MIB", "integraXsysPSUcurrent"), ("SAF-INTEGRAX-MIB", "integraXsysPSUpower"), ("SAF-INTEGRAX-MIB", "integraXsysBoardTemperature"), ("SAF-INTEGRAX-MIB", "integraXsysFreeMemory"), ("SAF-INTEGRAX-MIB", "integraXsysCPUidle"), ("SAF-INTEGRAX-MIB", "integraXsysDeviceType"), ("SAF-INTEGRAX-MIB", "integraXsysDeviceSerial"), ("SAF-INTEGRAX-MIB", "integraXsysDeviceProductModel"), ("SAF-INTEGRAX-MIB", "integraXsysFanError"), ("SAF-INTEGRAX-MIB", "integraXexecuteConfig"), ("SAF-INTEGRAX-MIB", "integraXneedStore"), ("SAF-INTEGRAX-MIB", "integraXstoreConfig"), ("SAF-INTEGRAX-MIB", "integraXsysSw1v0core"), ("SAF-INTEGRAX-MIB", "integraXsysSw1v0avdd"), ("SAF-INTEGRAX-MIB", "integraXsysSw1v2a"), ("SAF-INTEGRAX-MIB", "integraXsysSw1v5ddr"), ("SAF-INTEGRAX-MIB", "integraXsysSw1v8"), ("SAF-INTEGRAX-MIB", "integraXsysSw2v5"), ("SAF-INTEGRAX-MIB", "integraXsysSw3v3"), ("SAF-INTEGRAX-MIB", "integraXsysVttrefPs"), ("SAF-INTEGRAX-MIB", "integraXsysVttddrPs"), ("SAF-INTEGRAX-MIB", "integraXsysZq1v0"), ("SAF-INTEGRAX-MIB", "integraXsysZq1v5"), ("SAF-INTEGRAX-MIB", "integraXsysZq1v8"), ("SAF-INTEGRAX-MIB", "integraXsysZq2v5"), ("SAF-INTEGRAX-MIB", "integraXsysZq3v3"), ("SAF-INTEGRAX-MIB", "integraXsys5v0d"), ("SAF-INTEGRAX-MIB", "integraXsysSw1v2"), ("SAF-INTEGRAX-MIB", "integraXsysMdmVddcAvs"), ("SAF-INTEGRAX-MIB", "integraXsysMdm3v3"), ("SAF-INTEGRAX-MIB", "integraXsysMdm1v0aPm"), ("SAF-INTEGRAX-MIB", "integraXsysMdm1v0a"), ("SAF-INTEGRAX-MIB", "integraXsysMdm1v8a"), ("SAF-INTEGRAX-MIB", "integraXsysMdmDAC02v5a"), ("SAF-INTEGRAX-MIB", "integraXsysMdmDAC12v5"), ("SAF-INTEGRAX-MIB", "integraXsysMdmDAC22v5"), ("SAF-INTEGRAX-MIB", "integraXsysMdm1v8io"), ("SAF-INTEGRAX-MIB", "integraXsysMdm3v3io"), ("SAF-INTEGRAX-MIB", "integraXsys3v3Radio"), ("SAF-INTEGRAX-MIB", "integraXsysMdm4v0"), ("SAF-INTEGRAX-MIB", "integraXsys5v0nRadio"), ("SAF-INTEGRAX-MIB", "integraXsysCoreVddSns"), ("SAF-INTEGRAX-MIB", "integraXsys40v0RadioSns"), ("SAF-INTEGRAX-MIB", "integraXsysServicesReboot"), ("SAF-INTEGRAX-MIB", "integraXsysServicesFtpSwitch"), ("SAF-INTEGRAX-MIB", "integraXsysServicesFwCurrInfo"), ("SAF-INTEGRAX-MIB", "integraXsysServicesFwAvailView"), ("SAF-INTEGRAX-MIB", "integraXsysServicesFwRemove"), ("SAF-INTEGRAX-MIB", "integraXsysServicesFwRemoveAll"), ("SAF-INTEGRAX-MIB", "integraXsysServicesFwUpload"), ("SAF-INTEGRAX-MIB", "integraXsysServicesFwInst"), ("SAF-INTEGRAX-MIB", "integraXsysServicesFwSwitchRunning"), ("SAF-INTEGRAX-MIB", "integraXsysServicesFwSwitchNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraXSystemGroup = integraXSystemGroup.setStatus('current')
integraXEthernetGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 10, 2, 5)).setObjects(("SAF-INTEGRAX-MIB", "integraXifPortStatIndex"), ("SAF-INTEGRAX-MIB", "integraXifPortStatDescr"), ("SAF-INTEGRAX-MIB", "integraXifPortType"), ("SAF-INTEGRAX-MIB", "integraXifPortMtu"), ("SAF-INTEGRAX-MIB", "integraXifPortHighSpeed"), ("SAF-INTEGRAX-MIB", "integraXifPortPhysAddress"), ("SAF-INTEGRAX-MIB", "integraXifPortAdminStatus"), ("SAF-INTEGRAX-MIB", "integraXifPortOperStatus"), ("SAF-INTEGRAX-MIB", "integraXifPortLastChange"), ("SAF-INTEGRAX-MIB", "integraXifPortAutoneg"), ("SAF-INTEGRAX-MIB", "integraXifPortDuplex"), ("SAF-INTEGRAX-MIB", "integraXifPortSyncEthActive"), ("SAF-INTEGRAX-MIB", "integraXifPortSyncEthPrio"), ("SAF-INTEGRAX-MIB", "integraXifPortFlowControl"), ("SAF-INTEGRAX-MIB", "integraXifPortStcIndex"), ("SAF-INTEGRAX-MIB", "integraXifPortStcDescr"), ("SAF-INTEGRAX-MIB", "integraXifTimePassed"), ("SAF-INTEGRAX-MIB", "integraXifIngressPackets"), ("SAF-INTEGRAX-MIB", "integraXifIngressBytes"), ("SAF-INTEGRAX-MIB", "integraXifEgressPackets"), ("SAF-INTEGRAX-MIB", "integraXifEgressBytes"), ("SAF-INTEGRAX-MIB", "integraXifEtherRxOversizePkts"), ("SAF-INTEGRAX-MIB", "integraXifEtherTxOversizePkts"), ("SAF-INTEGRAX-MIB", "integraXifReceivedPkts64Octets"), ("SAF-INTEGRAX-MIB", "integraXifTransmittedPkts64Octets"), ("SAF-INTEGRAX-MIB", "integraXifReceivedPkts65to127Octets"), ("SAF-INTEGRAX-MIB", "integraXifTransmittedPkts65to127Octets"), ("SAF-INTEGRAX-MIB", "integraXifReceivedPkts128to255Octets"), ("SAF-INTEGRAX-MIB", "integraXifTransmittedPkts128to255Octets"), ("SAF-INTEGRAX-MIB", "integraXifReceivedPkts256to511Octets"), ("SAF-INTEGRAX-MIB", "integraXifTransmittedPkts256to511Octets"), ("SAF-INTEGRAX-MIB", "integraXifReceivedPkts512to1023Octets"), ("SAF-INTEGRAX-MIB", "integraXifTransmittedPkts512to1023Octets"), ("SAF-INTEGRAX-MIB", "integraXifReceivedPkts1024to1518Octets"), ("SAF-INTEGRAX-MIB", "integraXifTransmittedPkts1024to1518Octets"), ("SAF-INTEGRAX-MIB", "integraXifIfInBroadcastPkts"), ("SAF-INTEGRAX-MIB", "integraXifIfOutBroadcastPkts"), ("SAF-INTEGRAX-MIB", "integraXifIfInMulticastPkts"), ("SAF-INTEGRAX-MIB", "integraXifIfOutMulticastPkts"), ("SAF-INTEGRAX-MIB", "integraXifIngressBPS"), ("SAF-INTEGRAX-MIB", "integraXifIngressPPS"), ("SAF-INTEGRAX-MIB", "integraXifEgressBPS"), ("SAF-INTEGRAX-MIB", "integraXifEgressPPS"), ("SAF-INTEGRAX-MIB", "integraXifAllCoSQoutPackets"), ("SAF-INTEGRAX-MIB", "integraXifAllCoSQoutBytes"), ("SAF-INTEGRAX-MIB", "integraXifAllCoSQdroppedPackets"), ("SAF-INTEGRAX-MIB", "integraXifAllCoSQdroppedBytes"), ("SAF-INTEGRAX-MIB", "integraXifProcessedRxPackets"), ("SAF-INTEGRAX-MIB", "integraXifProcessedRxBytes"), ("SAF-INTEGRAX-MIB", "integraXnetCfgIPaddress"), ("SAF-INTEGRAX-MIB", "integraXnetCfgIPmask"), ("SAF-INTEGRAX-MIB", "integraXnetCfgIPgateway"), ("SAF-INTEGRAX-MIB", "integraXnetCfgRemoteIPaddress"), ("SAF-INTEGRAX-MIB", "integraXifLspPortAdminState"), ("SAF-INTEGRAX-MIB", "integraXifLspPortList"), ("SAF-INTEGRAX-MIB", "integraXifLspPortStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraXEthernetGeneralGroup = integraXEthernetGeneralGroup.setStatus('current')
integraXEthernetMiiPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 10, 10, 2, 6)).setObjects(("SAF-INTEGRAX-MIB", "integraXifEtherStatsMulticastPkts"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsBroadcastPkts"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsPkts64Octets"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsPkts65to127Octets"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsPkts128to255Octets"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsPkts256to511Octets"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsPkts512to1023Octets"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsPkts1024to1518Octets"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsOversizePkts"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsOctets"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsPkts"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsTXNoErrors"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsRXNoErrors"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsPkts1519to1522Octets"), ("SAF-INTEGRAX-MIB", "integraXifIfInOctets"), ("SAF-INTEGRAX-MIB", "integraXifIfOutOctets"), ("SAF-INTEGRAX-MIB", "integraXifDot1dTpPortInFrames"), ("SAF-INTEGRAX-MIB", "integraXifDot1dTpPortOutFrames"), ("SAF-INTEGRAX-MIB", "integraXifDot3InPauseFrames"), ("SAF-INTEGRAX-MIB", "integraXifDot3OutPauseFrames"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsUndersizePkts"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsFragments"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsCRCAlignErrors"), ("SAF-INTEGRAX-MIB", "integraXifEtherStatsJabbers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraXEthernetMiiPortGroup = integraXEthernetMiiPortGroup.setStatus('current')
mibBuilder.exportSymbols("SAF-INTEGRAX-MIB", integraXifPortHighSpeed=integraXifPortHighSpeed, integraXsysMdm1v8a=integraXsysMdm1v8a, integraXifTransmittedPkts64Octets=integraXifTransmittedPkts64Octets, integraXifReceivedPkts1024to1518Octets=integraXifReceivedPkts1024to1518Octets, integraXifPortOperStatus=integraXifPortOperStatus, integraXifEtherRxOversizePkts=integraXifEtherRxOversizePkts, integraXsysSw1v0avdd=integraXsysSw1v0avdd, integraXradioArangeEntry=integraXradioArangeEntry, integraXifEtherStatsPkts1024to1518Octets=integraXifEtherStatsPkts1024to1518Octets, integraXradioAduplexShift=integraXradioAduplexShift, integraXsysMdm3v3=integraXsysMdm3v3, integraXifPortStcDescr=integraXifPortStcDescr, integraXifIfOutOctets=integraXifIfOutOctets, FixedDiv20=FixedDiv20, integraXmodemBmodulationACMmax=integraXmodemBmodulationACMmax, integraXifTransmittedPkts256to511Octets=integraXifTransmittedPkts256to511Octets, integraXifLspPortAdminState=integraXifLspPortAdminState, integraXCompliances=integraXCompliances, integraXradioArxLevel=integraXradioArxLevel, integraXmodemAmodulationACMmax=integraXmodemAmodulationACMmax, integraXradioB=integraXradioB, integraXmodemAmodulationACMmin=integraXmodemAmodulationACMmin, integraXifPortAdminStatus=integraXifPortAdminStatus, integraXifTransmittedPkts128to255Octets=integraXifTransmittedPkts128to255Octets, integraXradioBrangeTxPower=integraXradioBrangeTxPower, integraXifAllCoSQdroppedPackets=integraXifAllCoSQdroppedPackets, integraXifPortSyncEthPrio=integraXifPortSyncEthPrio, integraXmodemAerroredSecondRatio=integraXmodemAerroredSecondRatio, integraXmodemBtotalBlockNumber=integraXmodemBtotalBlockNumber, integraXsysVttrefPs=integraXsysVttrefPs, integraXsysCPUidle=integraXsysCPUidle, integraXifIngressPackets=integraXifIngressPackets, integraXmodemAunavailtime=integraXmodemAunavailtime, integraXifLspPortStatus=integraXifLspPortStatus, integraXradioBtxMute=integraXradioBtxMute, integraXsysServicesFwUpload=integraXsysServicesFwUpload, integraXifPortStatDescr=integraXifPortStatDescr, integraXifIfInOctets=integraXifIfInOctets, integraXsysFanError=integraXsysFanError, integraXifEtherStatsPkts512to1023Octets=integraXifEtherStatsPkts512to1023Octets, integraXradioBpll=integraXradioBpll, integraXifEtherStatsPkts64Octets=integraXifEtherStatsPkts64Octets, integraXmodemAnormalizedMse=integraXmodemAnormalizedMse, integraXifEtherStatsUndersizePkts=integraXifEtherStatsUndersizePkts, integraXsysLicenseGenStatus=integraXsysLicenseGenStatus, integraXifEtherStatsJabbers=integraXifEtherStatsJabbers, integraXradioAtxMuteDuration=integraXradioAtxMuteDuration, integraXsysSw1v8=integraXsysSw1v8, integraXradioBrxFrequency=integraXradioBrxFrequency, integraXmodemAerroredSecond=integraXmodemAerroredSecond, integraXifEgressBytes=integraXifEgressBytes, integraXifEtherStatsFragments=integraXifEtherStatsFragments, integraXifDot1dTpPortOutFrames=integraXifDot1dTpPortOutFrames, integraXifReceivedPkts65to127Octets=integraXifReceivedPkts65to127Octets, integraXifPortSyncEthActive=integraXifPortSyncEthActive, integraXmodemAcarrierOffset=integraXmodemAcarrierOffset, integraXsysPSUpower=integraXsysPSUpower, integraXifEtherStatsPkts1519to1522Octets=integraXifEtherStatsPkts1519to1522Octets, integraXsysPSUcurrent=integraXsysPSUcurrent, integraXradio=integraXradio, integraXifIngressBytes=integraXifIngressBytes, integraXifStatisticsTable=integraXifStatisticsTable, integraXnetCfgRemoteIPaddress=integraXnetCfgRemoteIPaddress, integraXstoreConfig=integraXstoreConfig, integraXradioArangeEntryIndex=integraXradioArangeEntryIndex, integraXexecuteConfig=integraXexecuteConfig, integraXsysLicenseExpire=integraXsysLicenseExpire, integraXsys40v0RadioSns=integraXsys40v0RadioSns, integraXmodemBseverelyErroredSecondRatio=integraXmodemBseverelyErroredSecondRatio, integraXnetCfgIPaddress=integraXnetCfgIPaddress, integraXsysSw2v5=integraXsysSw2v5, integraXsysMdm1v8io=integraXsysMdm1v8io, integraXsysServicesFwRemove=integraXsysServicesFwRemove, integraXifIfInBroadcastPkts=integraXifIfInBroadcastPkts, integraXmodemAbackgroundBlockErrorRatio=integraXmodemAbackgroundBlockErrorRatio, integraXradioBduplexShift=integraXradioBduplexShift, integraXmodemArxCapacity=integraXmodemArxCapacity, integraXifEtherStatsMulticastPkts=integraXifEtherStatsMulticastPkts, integraXmodemBtxModulation=integraXmodemBtxModulation, integraXmodemAtemperature=integraXmodemAtemperature, integraXCompliance=integraXCompliance, integraXmodemAseverelyErroredSecond=integraXmodemAseverelyErroredSecond, integraXifTimePassed=integraXifTimePassed, integraXsysMdm3v3io=integraXsysMdm3v3io, integraXradioAtxFrequency=integraXradioAtxFrequency, integraXmodemBacquireLastStatusDetails=integraXmodemBacquireLastStatusDetails, integraXsysSw1v5ddr=integraXsysSw1v5ddr, integraXmodemAacquireStatus=integraXmodemAacquireStatus, integraXmodemAerroredBlock=integraXmodemAerroredBlock, integraXmodemAcountTime=integraXmodemAcountTime, integraXmodemBerroredBlock=integraXmodemBerroredBlock, integraXsysZq1v5=integraXsysZq1v5, integraXradioApll=integraXradioApll, integraXmodemAfecLdpcUncorrectedBlockCounter=integraXmodemAfecLdpcUncorrectedBlockCounter, integraXifEtherStatsOversizePkts=integraXifEtherStatsOversizePkts, integraXifEtherStatsPkts=integraXifEtherStatsPkts, integraXifReceivedPkts512to1023Octets=integraXifReceivedPkts512to1023Octets, integraXifTransmittedPkts1024to1518Octets=integraXifTransmittedPkts1024to1518Octets, integraXMiscGroup=integraXMiscGroup, integraXmodemAxpdEst=integraXmodemAxpdEst, integraXifIngressBPS=integraXifIngressBPS, integraXmodemAfecLoad=integraXmodemAfecLoad, integraXmodemBrxModulation=integraXmodemBrxModulation, integraXsysCoreVddSns=integraXsysCoreVddSns, integraXsysServicesReboot=integraXsysServicesReboot, integraXmodemA=integraXmodemA, integraXsysPSUvoltage=integraXsysPSUvoltage, integraXsysSw1v2=integraXsysSw1v2, integraXsysFreeMemory=integraXsysFreeMemory, integraXsysServicesFwSwitchNext=integraXsysServicesFwSwitchNext, integraXradioBrangeDescr=integraXradioBrangeDescr, integraXifEtherStatsTXNoErrors=integraXifEtherStatsTXNoErrors, integraXsysMdmVddcAvs=integraXsysMdmVddcAvs, integraXifEtherStatsPkts256to511Octets=integraXifEtherStatsPkts256to511Octets, integraXradioArxFrequency=integraXradioArxFrequency, integraXsysServicesFwAvailView=integraXsysServicesFwAvailView, integraXmodemAfecLdpcBlockCounter=integraXmodemAfecLdpcBlockCounter, integraXmodemBrxCapacity=integraXmodemBrxCapacity, integraXmodemBuptime=integraXmodemBuptime, integraXifPortType=integraXifPortType, integraXifDot1dTpPortInFrames=integraXifDot1dTpPortInFrames, PYSNMP_MODULE_ID=integraX, integraXradioBrangeTxFrequency=integraXradioBrangeTxFrequency, integraXnetCfg=integraXnetCfg, integraXmodemBandwidth=integraXmodemBandwidth, integraXsysMdmDAC12v5=integraXsysMdmDAC12v5, integraXmodemAfecRsBlockCounter=integraXmodemAfecRsBlockCounter, integraXradioBtxFrequency=integraXradioBtxFrequency, integraXifEgressPPS=integraXifEgressPPS, integraXifProcessedRxBytes=integraXifProcessedRxBytes, integraXmodemBunavailtime=integraXmodemBunavailtime, integraXifEgressBPS=integraXifEgressBPS, integraXnetCfgIPmask=integraXnetCfgIPmask, integraXifIfOutMulticastPkts=integraXifIfOutMulticastPkts, integraXsysServicesFwSwitchRunning=integraXsysServicesFwSwitchRunning, integraXradioAtxMute=integraXradioAtxMute, integraXsysDeviceSerial=integraXsysDeviceSerial, integraXsysServices=integraXsysServices, integraXsysServicesFtpSwitch=integraXsysServicesFtpSwitch, integraXsysSw3v3=integraXsysSw3v3, integraXifStatusTable=integraXifStatusTable, integraXifPortPhysAddress=integraXifPortPhysAddress, integraXmodemAfecLdpcUncorrectedPercent=integraXmodemAfecLdpcUncorrectedPercent, integraXsysMdmDAC02v5a=integraXsysMdmDAC02v5a, integraXradioA=integraXradioA, integraXmodemBxpdEst=integraXmodemBxpdEst, integraXifPortFlowControl=integraXifPortFlowControl, integraXmodemModulation=integraXmodemModulation, integraXsys5v0d=integraXsys5v0d, integraXModemGroup=integraXModemGroup, integraXsysServicesFwCurrInfo=integraXsysServicesFwCurrInfo, integraXradioArangeTxPower=integraXradioArangeTxPower, integraXradioBrxLevel=integraXradioBrxLevel, integraXtimestamp=integraXtimestamp, integraXsysBoardTemperature=integraXsysBoardTemperature, integraXsysSw1v0core=integraXsysSw1v0core, integraXifIfInMulticastPkts=integraXifIfInMulticastPkts, integraXradioAtemperature=integraXradioAtemperature, integraXsysServicesFwInst=integraXsysServicesFwInst, integraXifEtherTxOversizePkts=integraXifEtherTxOversizePkts, integraXifTransmittedPkts65to127Octets=integraXifTransmittedPkts65to127Octets, integraXsysZq2v5=integraXsysZq2v5, integraXmodemBmodulationACMmin=integraXmodemBmodulationACMmin, integraXmodemAtxCapacity=integraXmodemAtxCapacity, integraXsysDeviceType=integraXsysDeviceType, integraXmodemBcarrierOffset=integraXmodemBcarrierOffset, integraXradioBtemperature=integraXradioBtemperature, integraXsysVttddrPs=integraXsysVttddrPs, integraXifPortEntry=integraXifPortEntry, integraXifEtherStatsBroadcastPkts=integraXifEtherStatsBroadcastPkts, integraXifTransmittedPkts512to1023Octets=integraXifTransmittedPkts512to1023Octets, integraXmodemAtxModulation=integraXmodemAtxModulation, integraXSystemGroup=integraXSystemGroup, integraXmodemB=integraXmodemB, integraXmodemAacquireLastStatusDetails=integraXmodemAacquireLastStatusDetails, integraXsysMdm1v0aPm=integraXsysMdm1v0aPm, integraXifPortStcIndex=integraXifPortStcIndex, integraXradioBrxLevelState=integraXradioBrxLevelState, integraXifEtherStatsPkts65to127Octets=integraXifEtherStatsPkts65to127Octets, integraXEthernetGeneralGroup=integraXEthernetGeneralGroup, integraXifLspPortList=integraXifLspPortList, integraXEthernetMiiPortGroup=integraXEthernetMiiPortGroup, integraXmodemBseverelyErroredSecond=integraXmodemBseverelyErroredSecond, integraXsysServicesFwRemoveAll=integraXsysServicesFwRemoveAll, integraXmodemAfecRsUncorrectedBlockCounter=integraXmodemAfecRsUncorrectedBlockCounter, integraXradioBtxPower=integraXradioBtxPower, integraXmodemBbackgroundBlockError=integraXmodemBbackgroundBlockError, integraXifIngressPPS=integraXifIngressPPS, integraXsysMdmDAC22v5=integraXsysMdmDAC22v5, FixedDiv10=FixedDiv10, integraXifAllCoSQdroppedBytes=integraXifAllCoSQdroppedBytes, integraXGroups=integraXGroups, integraXifEtherStatsRXNoErrors=integraXifEtherStatsRXNoErrors, integraXifEtherStatsPkts128to255Octets=integraXifEtherStatsPkts128to255Octets, integraXsysMdm4v0=integraXsysMdm4v0, integraXmodemAseverelyErroredSecondRatio=integraXmodemAseverelyErroredSecondRatio, integraXsys3v3Radio=integraXsys3v3Radio, integraXradioArangeDescr=integraXradioArangeDescr, integraXradioArangesTable=integraXradioArangesTable, integraXifEtherStatsOctets=integraXifEtherStatsOctets, integraXmodemBacmEngine=integraXmodemBacmEngine, integraXsysDeviceProductModel=integraXsysDeviceProductModel, integraXmodemBerroredSecondRatio=integraXmodemBerroredSecondRatio, integraXifAllCoSQoutPackets=integraXifAllCoSQoutPackets, integraXifPortDuplex=integraXifPortDuplex, integraXifProcessedRxPackets=integraXifProcessedRxPackets, integraXnetCfgIPgateway=integraXnetCfgIPgateway, integraXradioBrangeEntry=integraXradioBrangeEntry, integraXmodemAtotalBlockNumber=integraXmodemAtotalBlockNumber, integraXsysMdm1v0a=integraXsysMdm1v0a, integraXConformance=integraXConformance, integraXradioAtxPower=integraXradioAtxPower, integraXradioBside=integraXradioBside, integraXradioArxLevelState=integraXradioArxLevelState, integraXmodemBfecLdpcUncorrectedBlockCounter=integraXmodemBfecLdpcUncorrectedBlockCounter, integraXsystem=integraXsystem, integraXmodemBcountTime=integraXmodemBcountTime, integraXmodemBfecRsBlockCounter=integraXmodemBfecRsBlockCounter, integraXmodemBfecLoad=integraXmodemBfecLoad, integraXsysSw1v2a=integraXsysSw1v2a, integraXmodemBtxCapacity=integraXmodemBtxCapacity, integraXmodemAuptime=integraXmodemAuptime, integraXsysZq3v3=integraXsysZq3v3, integraXradioBtxMuteDuration=integraXradioBtxMuteDuration, integraXmodemArxModulation=integraXmodemArxModulation, integraXifEgressPackets=integraXifEgressPackets, integraXifEtherStatsCRCAlignErrors=integraXifEtherStatsCRCAlignErrors, integraXifPortMtu=integraXifPortMtu, integraX=integraX, integraXsys5v0nRadio=integraXsys5v0nRadio, integraXifPortStcEntry=integraXifPortStcEntry, integraXmodem=integraXmodem, integraXmodemBfecLdpcBlockCounter=integraXmodemBfecLdpcBlockCounter, integraXifPortStatIndex=integraXifPortStatIndex, integraXethernet=integraXethernet, integraXifPortAutoneg=integraXifPortAutoneg, integraXradioAside=integraXradioAside, integraXmodemBtemperature=integraXmodemBtemperature, integraXmodemBbackgroundBlockErrorRatio=integraXmodemBbackgroundBlockErrorRatio, integraXsysZq1v8=integraXsysZq1v8, integraXifDot3OutPauseFrames=integraXifDot3OutPauseFrames, integraXmodemBerroredSecond=integraXmodemBerroredSecond, integraXsysCPUtemperature=integraXsysCPUtemperature, integraXmodemAacmEngine=integraXmodemAacmEngine, integraXifAllCoSQoutBytes=integraXifAllCoSQoutBytes, integraXradioBrangeEntryIndex=integraXradioBrangeEntryIndex, integraXneedStore=integraXneedStore, integraXradioBrangesTable=integraXradioBrangesTable, integraXmodemBfecLdpcUncorrectedPercent=integraXmodemBfecLdpcUncorrectedPercent, integraXmodemAbackgroundBlockError=integraXmodemAbackgroundBlockError, integraXradioArangeTxFrequency=integraXradioArangeTxFrequency, integraXmodemBfecRsUncorrectedBlockCounter=integraXmodemBfecRsUncorrectedBlockCounter, integraXRadioGroup=integraXRadioGroup, integraXifIfOutBroadcastPkts=integraXifIfOutBroadcastPkts)
mibBuilder.exportSymbols("SAF-INTEGRAX-MIB", integraXifDot3InPauseFrames=integraXifDot3InPauseFrames, integraXifReceivedPkts256to511Octets=integraXifReceivedPkts256to511Octets, integraXifReceivedPkts64Octets=integraXifReceivedPkts64Octets, integraXmodemBacquireStatus=integraXmodemBacquireStatus, integraXifPortLastChange=integraXifPortLastChange, integraXifReceivedPkts128to255Octets=integraXifReceivedPkts128to255Octets, integraXsysZq1v0=integraXsysZq1v0, integraXmodemBnormalizedMse=integraXmodemBnormalizedMse)
