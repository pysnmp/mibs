#
# PySNMP MIB module CM-SA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-SA-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 10:50:51 2024
# On host fv-az665-510 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
MepDestinationType, TrafficDirection, VlanId, PerfCounter64, SchedActivityStatus, OperationalState, CmPmBinAction, SecondaryState, ClassOfServiceType, VlanPriority, IpVersion, IpPriorityMapMode, PerfCounter32, AdminState, ScheduleType = mibBuilder.importSymbols("CM-COMMON-MIB", "MepDestinationType", "TrafficDirection", "VlanId", "PerfCounter64", "SchedActivityStatus", "OperationalState", "CmPmBinAction", "SecondaryState", "ClassOfServiceType", "VlanPriority", "IpVersion", "IpPriorityMapMode", "PerfCounter32", "AdminState", "ScheduleType")
slotIndex, shelfIndex, neIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "slotIndex", "shelfIndex", "neIndex")
PolicerColorMode, BitErrRate = mibBuilder.importSymbols("CM-FACILITY-MIB", "PolicerColorMode", "BitErrRate")
Dot1agCfmMepIdOrZero, = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMepIdOrZero")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, ObjectIdentity, TimeTicks, Gauge32, MibIdentifier, Unsigned32, Integer32, Counter64, iso, Counter32, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "ObjectIdentity", "TimeTicks", "Gauge32", "MibIdentifier", "Unsigned32", "Integer32", "Counter64", "iso", "Counter32", "NotificationType", "ModuleIdentity")
VariablePointer, StorageType, DateAndTime, TruthValue, DisplayString, MacAddress, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "VariablePointer", "StorageType", "DateAndTime", "TruthValue", "DisplayString", "MacAddress", "TextualConvention", "RowStatus")
cmServiceAssuranceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8))
cmServiceAssuranceMIB.setRevisions(('2019-12-01 00:00',))
if mibBuilder.loadTexts: cmServiceAssuranceMIB.setLastUpdated('201912010000Z')
if mibBuilder.loadTexts: cmServiceAssuranceMIB.setOrganization('ADVA Optical Networking SE')
cmServAssuranceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1))
cmServAssuranceNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 2))
cmServAssuranceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3))
class EcpaTestStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("initial", 1), ("in-progress", 2), ("stopped", 3), ("completed", 4), ("aborted", 5))

class EcpaPayloadType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fixed", 1), ("random", 2))

class EcpaTestType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("duration", 1), ("numframes", 2), ("continuous", 3))

class EcpaType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("regular", 1), ("enhanced", 2))

class EcpaMonitorPortType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("any", 1), ("source", 2))

class EcpaControlAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("start", 1), ("stop", 2))

class EsaProbeProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("icmpEcho", 1), ("udpEcho", 2), ("icmpTimestamp", 3), ("y1731", 4), ("y1731-slm-slr", 5), ("y1731-slm-dmm", 6))

class EsaProbeDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class EsaReflectorDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class EsaProbePmIntervalType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("current", 1), ("rollover", 2))

class EsaProbeHistoryIntervalType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("interval-1min", 1), ("interval-5min", 2), ("interval-10min", 3), ("interval-15min", 4), ("interval-60min", 5))

class EsaProbeDistStatsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("roundtrip-delay", 1), ("oneway-p2r-delay", 2), ("oneway-r2p-delay", 3), ("oneway-p2r-jitter", 4), ("oneway-r2p-jitter", 5), ("oneway-p2r-absjitter", 6), ("oneway-r2p-absjitter", 7), ("roundtrip-absjitter", 8), ("oneway-p2r-fdr", 9), ("oneway-r2p-fdr", 10), ("roundtrip-fdr", 11))

class EsaAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("suspend", 1), ("resume", 2), ("addEsaProbe", 3), ("removeEsaProbe", 4))

class EsaProbePktIntervalType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 0), ("interval-10ms", 1), ("interval-100ms", 2), ("interval-1sec", 3), ("interval-10sec", 4), ("interval-1min", 5))

class EsaProbeSLAMonitorType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("point-to-point", 1), ("point-to-multipoint", 2))

class BerTestStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("running", 1), ("not-running", 2))

class BerTestMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("generator", 1), ("monitor", 2), ("singleend", 3))

class BertControlAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("start", 1), ("stop", 2))

class BertPattern(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("not-applicable", 0), ("all-0", 1), ("all-1", 2), ("alt-1100", 3), ("bit-1in8", 4), ("bit-3in24", 5), ("bit-2exp20-qrss", 6), ("bit-2exp11-prbs", 7), ("bit-2exp15-prbs", 8), ("bit-2exp23-prbs", 9), ("userdefined", 10))

class BertUserPatternLength(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("length-1byte", 1), ("length-2byte", 2), ("length-3byte", 3), ("length-4byte", 4))

class BertSyncState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("sync", 1), ("outofsync", 2))

ecpaControlTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1), )
if mibBuilder.loadTexts: ecpaControlTable.setStatus('current')
ecpaControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "ecpaControlIndex"))
if mibBuilder.loadTexts: ecpaControlEntry.setStatus('current')
ecpaControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaControlIndex.setStatus('current')
ecpaControlSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlSourcePort.setStatus('current')
ecpaControlTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 3), EcpaTestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlTestType.setStatus('current')
ecpaControlNumFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlNumFrames.setStatus('current')
ecpaControlDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 259200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlDuration.setStatus('current')
ecpaControlInjectorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 6), TrafficDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlInjectorDirection.setStatus('current')
ecpaControlMonitorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 7), TrafficDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlMonitorDirection.setStatus('current')
ecpaControlStream1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlStream1.setStatus('current')
ecpaControlStream2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlStream2.setStatus('current')
ecpaControlStream3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlStream3.setStatus('current')
ecpaControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 11), EcpaControlAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlAction.setStatus('current')
ecpaControlTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 12), EcpaTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaControlTestStatus.setStatus('current')
ecpaControlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 13), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ecpaControlStorageType.setStatus('current')
ecpaControlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ecpaControlRowStatus.setStatus('current')
ecpaControlEcpaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 15), EcpaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlEcpaType.setStatus('current')
ecpaControlMonitorPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 16), EcpaMonitorPortType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ecpaControlMonitorPortType.setStatus('current')
ecpaConfigStreamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2), )
if mibBuilder.loadTexts: ecpaConfigStreamTable.setStatus('current')
ecpaConfigStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1), ).setIndexNames((0, "CM-SA-MIB", "ecpaConfigStreamIndex"))
if mibBuilder.loadTexts: ecpaConfigStreamEntry.setStatus('current')
ecpaConfigStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamIndex.setStatus('current')
ecpaConfigStreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamName.setStatus('current')
ecpaConfigStreamFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9612))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamFrameSize.setStatus('current')
ecpaConfigStreamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamRate.setStatus('current')
ecpaConfigStreamPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 5), EcpaPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamPayloadType.setStatus('current')
ecpaConfigStreamSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamSignature.setStatus('current')
ecpaConfigStreamDestinationMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamDestinationMAC.setStatus('current')
ecpaConfigStreamSourceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamSourceMAC.setStatus('current')
ecpaConfigStreamOuterVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanEnabled.setStatus('current')
ecpaConfigStreamOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 10), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanId.setStatus('current')
ecpaConfigStreamOuterVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 11), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanPrio.setStatus('current')
ecpaConfigStreamOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanEtherType.setStatus('current')
ecpaConfigStreamInnerVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanEnabled.setStatus('current')
ecpaConfigStreamInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 14), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanId.setStatus('current')
ecpaConfigStreamInnerVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 15), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanPrio.setStatus('current')
ecpaConfigStreamInnerVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanEtherType.setStatus('current')
ecpaConfigStreamIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 17), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamIpVersion.setStatus('current')
ecpaConfigStreamIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamIpV4Address.setStatus('current')
ecpaConfigStreamIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 19), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamIpV6Address.setStatus('current')
ecpaConfigStreamPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 20), IpPriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamPrioMapMode.setStatus('current')
ecpaConfigStreamPrioVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamPrioVal.setStatus('current')
ecpaConfigStreamInnerVlan2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2Enabled.setStatus('current')
ecpaConfigStreamInnerVlan2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 23), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2Id.setStatus('current')
ecpaConfigStreamInnerVlan2Prio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 24), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2Prio.setStatus('current')
ecpaConfigStreamInnerVlan2EtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2EtherType.setStatus('current')
ecpaConfigStreamDestIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamDestIpV4Address.setStatus('current')
ecpaConfigStreamDestIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 27), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamDestIpV6Address.setStatus('current')
ecpaConfigStreamUsePortSourceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamUsePortSourceMAC.setStatus('current')
ecpaConfigStreamRateHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamRateHi.setStatus('current')
ecpaConfigStreamUdpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamUdpControl.setStatus('current')
ecpaConfigStreamUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamUdpSrcPort.setStatus('current')
ecpaConfigStreamUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamUdpDstPort.setStatus('current')
ecpaTestStreamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3), )
if mibBuilder.loadTexts: ecpaTestStreamTable.setStatus('current')
ecpaTestStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "ecpaControlIndex"), (0, "CM-SA-MIB", "ecpaTestStreamIndex"))
if mibBuilder.loadTexts: ecpaTestStreamEntry.setStatus('current')
ecpaTestStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamIndex.setStatus('current')
ecpaTestStreamSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamSourcePort.setStatus('current')
ecpaTestStreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamName.setStatus('current')
ecpaTestStreamFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9612))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamFrameSize.setStatus('current')
ecpaTestStreamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamRate.setStatus('current')
ecpaTestStreamPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 6), EcpaPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamPayloadType.setStatus('current')
ecpaTestStreamSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamSignature.setStatus('current')
ecpaTestStreamDestinationMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamDestinationMAC.setStatus('current')
ecpaTestStreamSourceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamSourceMAC.setStatus('current')
ecpaTestStreamOuterVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanEnabled.setStatus('current')
ecpaTestStreamOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 11), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanId.setStatus('current')
ecpaTestStreamOuterVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 12), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanPrio.setStatus('current')
ecpaTestStreamOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanEtherType.setStatus('current')
ecpaTestStreamInnerVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanEnabled.setStatus('current')
ecpaTestStreamInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 15), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanId.setStatus('current')
ecpaTestStreamInnerVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 16), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanPrio.setStatus('current')
ecpaTestStreamInnerVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanEtherType.setStatus('current')
ecpaTestStreamIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 18), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamIpVersion.setStatus('current')
ecpaTestStreamIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamIpV4Address.setStatus('current')
ecpaTestStreamIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 20), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamIpV6Address.setStatus('current')
ecpaTestStreamPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 21), IpPriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamPrioMapMode.setStatus('current')
ecpaTestStreamPrioVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamPrioVal.setStatus('current')
ecpaTestStreamMonStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonStartTime.setStatus('current')
ecpaTestStreamMonEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonEndTime.setStatus('current')
ecpaTestStreamMonElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonElapsedTime.setStatus('current')
ecpaTestStreamMonTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonTxFrames.setStatus('current')
ecpaTestStreamMonRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxFrames.setStatus('current')
ecpaTestStreamMonRxPercentSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxPercentSuccess.setStatus('current')
ecpaTestStreamMonRxOutOfSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxOutOfSeqErrs.setStatus('current')
ecpaTestStreamMonRxSeqGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxSeqGaps.setStatus('current')
ecpaTestStreamMonRxNonEcpaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxNonEcpaFrames.setStatus('current')
ecpaTestStreamMonRxMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxMinDelay.setStatus('current')
ecpaTestStreamMonRxMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxMaxDelay.setStatus('current')
ecpaTestStreamMonRxAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxAvgDelay.setStatus('current')
ecpaTestStreamMonRx1stFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9612))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrameSize.setStatus('current')
ecpaTestStreamMonRx1stFrame1Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame1Octets.setStatus('current')
ecpaTestStreamMonRx1stFrame2Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame2Octets.setStatus('current')
ecpaTestStreamMonRx1stFrame3Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame3Octets.setStatus('current')
ecpaTestStreamMonRx1stFrame4Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame4Octets.setStatus('current')
ecpaTestStreamMonRx1stFrame5Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame5Octets.setStatus('current')
ecpaTestStreamMonRx1stFrame6Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame6Octets.setStatus('current')
ecpaTestStreamMonRx1stFrame7Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame7Octets.setStatus('current')
ecpaTestStreamMonRx1stFrame8Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame8Octets.setStatus('current')
ecpaTestStreamMonRx1stFrame9Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame9Octets.setStatus('current')
ecpaTestStreamMonRx1stFrame10Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame10Octets.setStatus('current')
ecpaTestStreamMonRxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxBitRate.setStatus('current')
ecpaTestStreamInnerVlan2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 47), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2Enabled.setStatus('current')
ecpaTestStreamInnerVlan2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 48), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2Id.setStatus('current')
ecpaTestStreamInnerVlan2Prio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 49), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2Prio.setStatus('current')
ecpaTestStreamInnerVlan2EtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2EtherType.setStatus('current')
ecpaTestStreamDestIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 51), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamDestIpV4Address.setStatus('current')
ecpaTestStreamDestIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 52), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamDestIpV6Address.setStatus('current')
ecpaTestStreamConfigChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 53), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamConfigChanged.setStatus('current')
ecpaTestStreamRateHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 54), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamRateHi.setStatus('current')
ecpaTestStreamUdpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamUdpControl.setStatus('current')
ecpaTestStreamUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamUdpSrcPort.setStatus('current')
ecpaTestStreamUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamUdpDstPort.setStatus('current')
esaProbeTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4), )
if mibBuilder.loadTexts: esaProbeTable.setStatus('current')
esaProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"))
if mibBuilder.loadTexts: esaProbeEntry.setStatus('current')
esaProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeIndex.setStatus('current')
esaProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeName.setStatus('current')
esaProbeSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 3), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSourcePort.setStatus('current')
esaProbeAssocSchedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 4), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeAssocSchedGroup.setStatus('current')
esaProbeDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 5), EsaProbeDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDirection.setStatus('current')
esaProbeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 6), EsaProbeProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeProtocol.setStatus('current')
esaProbeSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSrcIpAddress.setStatus('current')
esaProbeSrcSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSrcSubnetMask.setStatus('current')
esaProbeDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestIpAddress.setStatus('current')
esaProbeSrcMep = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSrcMep.setStatus('current')
esaProbeDestMepType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 11), MepDestinationType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestMepType.setStatus('current')
esaProbeDestMepMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 12), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestMepMacAddr.setStatus('current')
esaProbeDestMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 13), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestMepId.setStatus('current')
esaProbeVlanTagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeVlanTagEnabled.setStatus('current')
esaProbeVlanTagEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeVlanTagEtherType.setStatus('current')
esaProbeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 16), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeVlanId.setStatus('current')
esaProbeVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 17), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeVlanPrio.setStatus('current')
esaProbeInnerVlanTagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInnerVlanTagEnabled.setStatus('current')
esaProbeInnerVlanTagEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInnerVlanTagEtherType.setStatus('current')
esaProbeInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 20), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInnerVlanId.setStatus('current')
esaProbeInnerVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 21), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInnerVlanPrio.setStatus('current')
esaProbeIpPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 22), IpPriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeIpPrioMapMode.setStatus('current')
esaProbeIpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeIpPriority.setStatus('current')
esaProbePktsPerSample = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbePktsPerSample.setStatus('current')
esaProbePktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 2000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbePktSize.setStatus('current')
esaProbeInterPktGap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInterPktGap.setStatus('current')
esaProbePktDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbePktDeadInterval.setStatus('current')
esaProbeResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeResponseTimeout.setStatus('current')
esaProbeY1731DmmPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 9600), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeY1731DmmPktSize.setStatus('current')
esaProbeY1731LmmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 30), EsaProbePktIntervalType().clone('interval-1sec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeY1731LmmInterval.setStatus('current')
esaProbeY1731DmmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 31), EsaProbePktIntervalType().clone('interval-100ms')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeY1731DmmInterval.setStatus('current')
esaProbeHistoryBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeHistoryBins.setStatus('current')
esaProbeHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 33), EsaProbeHistoryIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeHistoryInterval.setStatus('current')
esaProbeDistHistoryBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistHistoryBins.setStatus('current')
esaProbeDistHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 35), EsaProbeHistoryIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistHistoryInterval.setStatus('current')
esaProbeCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 36), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeCreationTime.setStatus('current')
esaProbeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 37), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeStorageType.setStatus('current')
esaProbeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 38), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeRowStatus.setStatus('current')
esaProbeMultiCOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 39), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeMultiCOSEnabled.setStatus('current')
esaProbeSLAMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 40), EsaProbeSLAMonitorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSLAMonitorType.setStatus('current')
esaProbeCOSType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 41), ClassOfServiceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSType.setStatus('current')
esaProbeSLMMulticastMACEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 42), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSLMMulticastMACEnabled.setStatus('current')
esaProbeSOAMInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 43), EsaProbePktIntervalType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSOAMInterval.setStatus('current')
esaProbeSOAMPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 9612), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeSOAMPktSize.setStatus('current')
esaProbeInner2VlanTagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInner2VlanTagEnabled.setStatus('current')
esaProbeInner2VlanTagEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInner2VlanTagEtherType.setStatus('current')
esaProbeInner2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 47), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInner2VlanId.setStatus('current')
esaProbeInner2VlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 48), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInner2VlanPrio.setStatus('current')
esaProbeAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 49), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeAdminState.setStatus('current')
esaProbeOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 50), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeOperationalState.setStatus('current')
esaProbeSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 51), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeSecondaryState.setStatus('current')
esaProbeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 52), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeMacAddress.setStatus('current')
esaProbeAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeAlias.setStatus('current')
esaProbeScheduleGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5), )
if mibBuilder.loadTexts: esaProbeScheduleGroupTable.setStatus('current')
esaProbeScheduleGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeScheduleGroupIndex"))
if mibBuilder.loadTexts: esaProbeScheduleGroupEntry.setStatus('current')
esaProbeScheduleGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupIndex.setStatus('current')
esaProbeScheduleGroupDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupDescr.setStatus('current')
esaProbeScheduleGroupProbeList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupProbeList.setStatus('current')
esaProbeScheduleGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 4), ScheduleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupType.setStatus('current')
esaProbeScheduleGroupStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 5), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupStartTime.setStatus('current')
esaProbeScheduleGroupDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupDuration.setStatus('current')
esaProbeScheduleGroupInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupInterval.setStatus('current')
esaProbeScheduleGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 8), EsaAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeScheduleGroupAction.setStatus('current')
esaProbeScheduleGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 9), SchedActivityStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeScheduleGroupStatus.setStatus('current')
esaProbeScheduleGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupStorageType.setStatus('current')
esaProbeScheduleGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupRowStatus.setStatus('current')
esaProbeScheduleGroupActionProbeList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeScheduleGroupActionProbeList.setStatus('current')
esaReflectorTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6), )
if mibBuilder.loadTexts: esaReflectorTable.setStatus('current')
esaReflectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaReflectorIndex"))
if mibBuilder.loadTexts: esaReflectorEntry.setStatus('current')
esaReflectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorIndex.setStatus('current')
esaReflectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorName.setStatus('current')
esaReflectorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorIpAddress.setStatus('current')
esaReflectorSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorSubnetMask.setStatus('current')
esaReflectorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 5), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorSourcePort.setStatus('current')
esaReflectorIpPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 6), IpPriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaReflectorIpPrioMapMode.setStatus('current')
esaReflectorIpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaReflectorIpPriority.setStatus('current')
esaReflectorAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 8), EsaAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaReflectorAction.setStatus('current')
esaReflectorSuspended = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorSuspended.setStatus('current')
esaReflectorCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorCreationTime.setStatus('current')
esaReflectorStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorStorageType.setStatus('current')
esaReflectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorRowStatus.setStatus('current')
esaReflectorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 13), EsaReflectorDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorDirection.setStatus('current')
esaReflectorAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 14), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorAdminState.setStatus('current')
esaReflectorOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 15), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorOperationalState.setStatus('current')
esaReflectorSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 16), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorSecondaryState.setStatus('current')
esaReflectorMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorMacAddress.setStatus('current')
esaReflectorAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorAlias.setStatus('current')
esaProbeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7), )
if mibBuilder.loadTexts: esaProbeStatsTable.setStatus('current')
esaProbeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeStatsDestinationIndex"), (0, "CM-SA-MIB", "esaProbeStatsCOSIndex"), (0, "CM-SA-MIB", "esaProbeStatsIndex"))
if mibBuilder.loadTexts: esaProbeStatsEntry.setStatus('current')
esaProbeStatsDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsDestinationIndex.setStatus('current')
esaProbeStatsCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsCOSIndex.setStatus('current')
esaProbeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsIndex.setStatus('current')
esaProbeStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 4), EsaProbePmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsIntervalType.setStatus('current')
esaProbeStatsCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 5), ClassOfServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsCOS.setStatus('current')
esaProbeStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsValid.setStatus('current')
esaProbeStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 7), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeStatsAction.setStatus('current')
esaProbeStatsP2RPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsP2RPkts.setStatus('current')
esaProbeStatsP2RErredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsP2RErredPkts.setStatus('current')
esaProbeStatsP2RSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsP2RSyncErrs.setStatus('current')
esaProbeStatsP2RLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsP2RLostPkts.setStatus('current')
esaProbeStatsR2PPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsR2PPkts.setStatus('current')
esaProbeStatsR2PErredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsR2PErredPkts.setStatus('current')
esaProbeStatsR2PSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsR2PSyncErrs.setStatus('current')
esaProbeStatsR2PLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsR2PLostPkts.setStatus('current')
esaProbeStatsLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsLostPkts.setStatus('current')
esaProbeStatsSeqGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSeqGaps.setStatus('current')
esaProbeStatsOutOfSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsOutOfSeqErrs.setStatus('current')
esaProbeStatsMinRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinRoundTripDelay.setStatus('current')
esaProbeStatsMaxRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxRoundTripDelay.setStatus('current')
esaProbeStatsAvgRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsAvgRoundTripDelay.setStatus('current')
esaProbeStatsSumRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumRoundTripDelay.setStatus('current')
esaProbeStatsSumOfSqRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqRoundTripDelay.setStatus('current')
esaProbeStatsMinOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinOnewayP2RDelay.setStatus('current')
esaProbeStatsMaxOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxOnewayP2RDelay.setStatus('current')
esaProbeStatsAvgOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsAvgOnewayP2RDelay.setStatus('current')
esaProbeStatsSumOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOnewayP2RDelay.setStatus('current')
esaProbeStatsSumOfSqOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqOnewayP2RDelay.setStatus('current')
esaProbeStatsMinOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinOnewayR2PDelay.setStatus('current')
esaProbeStatsMaxOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxOnewayR2PDelay.setStatus('current')
esaProbeStatsAvgOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsAvgOnewayR2PDelay.setStatus('current')
esaProbeStatsSumOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOnewayR2PDelay.setStatus('current')
esaProbeStatsSumOfSqOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqOnewayR2PDelay.setStatus('current')
esaProbeStatsMinPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinPosP2RJitter.setStatus('current')
esaProbeStatsMaxPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxPosP2RJitter.setStatus('current')
esaProbeStatsNumPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumPosP2RJitter.setStatus('current')
esaProbeStatsSumPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumPosP2RJitter.setStatus('current')
esaProbeStatsSumOfSqPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqPosP2RJitter.setStatus('current')
esaProbeStatsMinNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinNegP2RJitter.setStatus('current')
esaProbeStatsMaxNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxNegP2RJitter.setStatus('current')
esaProbeStatsNumNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumNegP2RJitter.setStatus('current')
esaProbeStatsSumNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumNegP2RJitter.setStatus('current')
esaProbeStatsSumOfSqNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqNegP2RJitter.setStatus('current')
esaProbeStatsMinPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinPosR2PJitter.setStatus('current')
esaProbeStatsMaxPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxPosR2PJitter.setStatus('current')
esaProbeStatsNumPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumPosR2PJitter.setStatus('current')
esaProbeStatsSumPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumPosR2PJitter.setStatus('current')
esaProbeStatsSumOfSqPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqPosR2PJitter.setStatus('current')
esaProbeStatsMinNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinNegR2PJitter.setStatus('current')
esaProbeStatsMaxNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxNegR2PJitter.setStatus('current')
esaProbeStatsNumNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumNegR2PJitter.setStatus('current')
esaProbeStatsSumNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumNegR2PJitter.setStatus('current')
esaProbeStatsSumOfSqNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqNegR2PJitter.setStatus('current')
esaProbeStatsY1731P2RNegLossOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731P2RNegLossOccurrences.setStatus('current')
esaProbeStatsY1731R2PNegLossOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 55), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731R2PNegLossOccurrences.setStatus('current')
esaProbeStatsY1731RxLmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 56), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731RxLmSamples.setStatus('current')
esaProbeStatsY1731RxDmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 57), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731RxDmSamples.setStatus('current')
esaProbeStatsY1731P2RFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 58), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731P2RFrames.setStatus('current')
esaProbeStatsY1731R2PFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 59), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731R2PFrames.setStatus('current')
esaProbeStatsAvgAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsAvgAbsP2RJitter.setStatus('current')
esaProbeStatsAvgAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsAvgAbsR2PJitter.setStatus('current')
esaProbeStatsMinAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinAbsP2RJitter.setStatus('current')
esaProbeStatsMinAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinAbsR2PJitter.setStatus('current')
esaProbeStatsMaxAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxAbsP2RJitter.setStatus('current')
esaProbeStatsMaxAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxAbsR2PJitter.setStatus('current')
esaProbeStatsNumAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 66), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumAbsP2RJitter.setStatus('current')
esaProbeStatsNumAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 67), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumAbsR2PJitter.setStatus('current')
esaProbeStatsSumAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 68), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumAbsP2RJitter.setStatus('current')
esaProbeStatsSumAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 69), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumAbsR2PJitter.setStatus('current')
esaProbeStatsSumOfSqAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 70), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqAbsP2RJitter.setStatus('current')
esaProbeStatsSumOfSqAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 71), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqAbsR2PJitter.setStatus('current')
esaProbeHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8), )
if mibBuilder.loadTexts: esaProbeHistoryTable.setStatus('current')
esaProbeHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeHistoryDestinationIndex"), (0, "CM-SA-MIB", "esaProbeHistoryCOSIndex"), (0, "CM-SA-MIB", "esaProbeHistoryIndex"))
if mibBuilder.loadTexts: esaProbeHistoryEntry.setStatus('current')
esaProbeHistoryDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryDestinationIndex.setStatus('current')
esaProbeHistoryCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryCOSIndex.setStatus('current')
esaProbeHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryIndex.setStatus('current')
esaProbeHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryTime.setStatus('current')
esaProbeHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryValid.setStatus('current')
esaProbeHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 6), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeHistoryAction.setStatus('current')
esaProbeHistoryCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 7), ClassOfServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryCOS.setStatus('current')
esaProbeHistoryP2RPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryP2RPkts.setStatus('current')
esaProbeHistoryP2RErredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryP2RErredPkts.setStatus('current')
esaProbeHistoryP2RSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryP2RSyncErrs.setStatus('current')
esaProbeHistoryP2RLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryP2RLostPkts.setStatus('current')
esaProbeHistoryR2PPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryR2PPkts.setStatus('current')
esaProbeHistoryR2PErredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryR2PErredPkts.setStatus('current')
esaProbeHistoryR2PSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryR2PSyncErrs.setStatus('current')
esaProbeHistoryR2PLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryR2PLostPkts.setStatus('current')
esaProbeHistoryLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryLostPkts.setStatus('current')
esaProbeHistorySeqGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySeqGaps.setStatus('current')
esaProbeHistoryOutOfSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryOutOfSeqErrs.setStatus('current')
esaProbeHistoryMinRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinRoundTripDelay.setStatus('current')
esaProbeHistoryMaxRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxRoundTripDelay.setStatus('current')
esaProbeHistoryAvgRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryAvgRoundTripDelay.setStatus('current')
esaProbeHistorySumRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumRoundTripDelay.setStatus('current')
esaProbeHistorySumOfSqRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqRoundTripDelay.setStatus('current')
esaProbeHistoryMinOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinOnewayP2RDelay.setStatus('current')
esaProbeHistoryMaxOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxOnewayP2RDelay.setStatus('current')
esaProbeHistoryAvgOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryAvgOnewayP2RDelay.setStatus('current')
esaProbeHistorySumOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOnewayP2RDelay.setStatus('current')
esaProbeHistorySumOfSqOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqOnewayP2RDelay.setStatus('current')
esaProbeHistoryMinOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinOnewayR2PDelay.setStatus('current')
esaProbeHistoryMaxOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxOnewayR2PDelay.setStatus('current')
esaProbeHistoryAvgOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryAvgOnewayR2PDelay.setStatus('current')
esaProbeHistorySumOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOnewayR2PDelay.setStatus('current')
esaProbeHistorySumOfSqOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqOnewayR2PDelay.setStatus('current')
esaProbeHistoryMinPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinPosP2RJitter.setStatus('current')
esaProbeHistoryMaxPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxPosP2RJitter.setStatus('current')
esaProbeHistoryNumPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumPosP2RJitter.setStatus('current')
esaProbeHistorySumPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumPosP2RJitter.setStatus('current')
esaProbeHistorySumOfSqPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqPosP2RJitter.setStatus('current')
esaProbeHistoryMinNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinNegP2RJitter.setStatus('current')
esaProbeHistoryMaxNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxNegP2RJitter.setStatus('current')
esaProbeHistoryNumNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumNegP2RJitter.setStatus('current')
esaProbeHistorySumNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumNegP2RJitter.setStatus('current')
esaProbeHistorySumOfSqNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqNegP2RJitter.setStatus('current')
esaProbeHistoryMinPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinPosR2PJitter.setStatus('current')
esaProbeHistoryMaxPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxPosR2PJitter.setStatus('current')
esaProbeHistoryNumPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumPosR2PJitter.setStatus('current')
esaProbeHistorySumPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumPosR2PJitter.setStatus('current')
esaProbeHistorySumOfSqPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqPosR2PJitter.setStatus('current')
esaProbeHistoryMinNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinNegR2PJitter.setStatus('current')
esaProbeHistoryMaxNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxNegR2PJitter.setStatus('current')
esaProbeHistoryNumNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumNegR2PJitter.setStatus('current')
esaProbeHistorySumNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumNegR2PJitter.setStatus('current')
esaProbeHistorySumOfSqNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqNegR2PJitter.setStatus('current')
esaProbeHistoryY1731P2RNegLossOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731P2RNegLossOccurrences.setStatus('current')
esaProbeHistoryY1731R2PNegLossOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 55), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731R2PNegLossOccurrences.setStatus('current')
esaProbeHistoryY1731RxLmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 56), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731RxLmSamples.setStatus('current')
esaProbeHistoryY1731RxDmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 57), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731RxDmSamples.setStatus('current')
esaProbeHistoryY1731P2RFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 58), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731P2RFrames.setStatus('current')
esaProbeHistoryY1731R2PFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 59), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731R2PFrames.setStatus('current')
esaProbeHistoryAvgAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryAvgAbsP2RJitter.setStatus('current')
esaProbeHistoryAvgAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryAvgAbsR2PJitter.setStatus('current')
esaProbeHistoryMinAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinAbsP2RJitter.setStatus('current')
esaProbeHistoryMinAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinAbsR2PJitter.setStatus('current')
esaProbeHistoryMaxAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxAbsP2RJitter.setStatus('current')
esaProbeHistoryMaxAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxAbsR2PJitter.setStatus('current')
esaProbeHistoryNumAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 66), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumAbsP2RJitter.setStatus('current')
esaProbeHistoryNumAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 67), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumAbsR2PJitter.setStatus('current')
esaProbeHistorySumAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 68), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumAbsP2RJitter.setStatus('current')
esaProbeHistorySumAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 69), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumAbsR2PJitter.setStatus('current')
esaProbeHistorySumOfSqAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 70), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqAbsP2RJitter.setStatus('current')
esaProbeHistorySumOfSqAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 71), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqAbsR2PJitter.setStatus('current')
esaProbeDistStatsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9), )
if mibBuilder.loadTexts: esaProbeDistStatsConfigTable.setStatus('current')
esaProbeDistStatsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsConfigIndex"))
if mibBuilder.loadTexts: esaProbeDistStatsConfigEntry.setStatus('current')
esaProbeDistStatsConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsConfigIndex.setStatus('current')
esaProbeDistStatsConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 2), EsaProbeDistStatsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsConfigType.setStatus('current')
esaProbeDistStatsConfigMinVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigMinVal.setStatus('current')
esaProbeDistStatsConfigMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigMaxVal.setStatus('current')
esaProbeDistStatsConfigNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigNumBins.setStatus('current')
esaProbeDistStatsConfigLowBoundOfBin1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin1.setStatus('current')
esaProbeDistStatsConfigLowBoundOfBin2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin2.setStatus('current')
esaProbeDistStatsConfigLowBoundOfBin3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin3.setStatus('current')
esaProbeDistStatsConfigLowBoundOfBin4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin4.setStatus('current')
esaProbeDistStatsConfigLowBoundOfBin5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin5.setStatus('current')
esaProbeDistStatsConfigLowBoundOfBin6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin6.setStatus('current')
esaProbeDistStatsConfigLowBoundOfBin7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin7.setStatus('current')
esaProbeDistStatsConfigLowBoundOfBin8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin8.setStatus('current')
esaProbeDistStatsConfigLowBoundOfBin9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin9.setStatus('current')
esaProbeDistStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10), )
if mibBuilder.loadTexts: esaProbeDistStatsTable.setStatus('current')
esaProbeDistStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsConfigIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsDestinationIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsCOSIndex"))
if mibBuilder.loadTexts: esaProbeDistStatsEntry.setStatus('current')
esaProbeDistStatsDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsDestinationIndex.setStatus('current')
esaProbeDistStatsCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsCOSIndex.setStatus('current')
esaProbeDistStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 3), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsAction.setStatus('current')
esaProbeDistStatsCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 4), ClassOfServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsCOS.setStatus('current')
esaProbeDistStatsNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsNumBins.setStatus('current')
esaProbeDistStatsLTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsLTMin.setStatus('current')
esaProbeDistStatsGTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsGTMax.setStatus('current')
esaProbeDistStatsBinTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11), )
if mibBuilder.loadTexts: esaProbeDistStatsBinTable.setStatus('current')
esaProbeDistStatsBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsConfigIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsDestinationIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsCOSIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsBinIndex"))
if mibBuilder.loadTexts: esaProbeDistStatsBinEntry.setStatus('current')
esaProbeDistStatsBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsBinIndex.setStatus('current')
esaProbeDistStatsBinLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsBinLower.setStatus('current')
esaProbeDistStatsBinUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsBinUpper.setStatus('current')
esaProbeDistStatsBinNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsBinNumSamples.setStatus('current')
esaProbeDistHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12), )
if mibBuilder.loadTexts: esaProbeDistHistoryTable.setStatus('current')
esaProbeDistHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsConfigIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryDestinationIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryCOSIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryIndex"))
if mibBuilder.loadTexts: esaProbeDistHistoryEntry.setStatus('current')
esaProbeDistHistoryDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryDestinationIndex.setStatus('current')
esaProbeDistHistoryCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryCOSIndex.setStatus('current')
esaProbeDistHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryIndex.setStatus('current')
esaProbeDistHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryTime.setStatus('current')
esaProbeDistHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 5), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistHistoryAction.setStatus('current')
esaProbeDistHistoryCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 6), ClassOfServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryCOS.setStatus('current')
esaProbeDistHistoryNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryNumBins.setStatus('current')
esaProbeDistHistoryLTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryLTMin.setStatus('current')
esaProbeDistHistoryGTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryGTMax.setStatus('current')
esaProbeDistHistoryBinTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13), )
if mibBuilder.loadTexts: esaProbeDistHistoryBinTable.setStatus('current')
esaProbeDistHistoryBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsConfigIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryDestinationIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryCOSIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryBinIndex"))
if mibBuilder.loadTexts: esaProbeDistHistoryBinEntry.setStatus('current')
esaProbeDistHistoryBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryBinIndex.setStatus('current')
esaProbeDistHistoryBinLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryBinLower.setStatus('current')
esaProbeDistHistoryBinUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryBinUpper.setStatus('current')
esaProbeDistHistoryBinNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryBinNumSamples.setStatus('current')
esaProbeStatsThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14), )
if mibBuilder.loadTexts: esaProbeStatsThresholdTable.setStatus('current')
esaProbeStatsThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeStatsThresholdIndex"))
if mibBuilder.loadTexts: esaProbeStatsThresholdEntry.setStatus('current')
esaProbeStatsThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsThresholdIndex.setStatus('current')
esaProbeStatsThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsThresholdVariable.setStatus('current')
esaProbeStatsThresholdAbsValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeStatsThresholdAbsValueLo.setStatus('current')
esaProbeStatsThresholdAbsValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeStatsThresholdAbsValueHi.setStatus('current')
esaProbeStatsThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsThresholdMonValue.setStatus('current')
esaProbeCOSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15), )
if mibBuilder.loadTexts: esaProbeCOSConfigTable.setStatus('current')
esaProbeCOSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeCOSConfigIndex"))
if mibBuilder.loadTexts: esaProbeCOSConfigEntry.setStatus('current')
esaProbeCOSConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigIndex.setStatus('current')
esaProbeCOSConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 2), ClassOfServiceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigType.setStatus('current')
esaProbeCOSConfigInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 3), EsaProbePktIntervalType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigInterval.setStatus('current')
esaProbeCOSConfigPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9612))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigPktSize.setStatus('current')
esaProbeCOSConfigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigStorageType.setStatus('current')
esaProbeCOSConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigRowStatus.setStatus('current')
esaProbeCOSConfigslmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 7), EsaProbePktIntervalType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigslmInterval.setStatus('current')
esaProbeCOSConfigslmPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigslmPktSize.setStatus('current')
esaProbeCOSConfigSoamPmExtAvailFlrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeCOSConfigSoamPmExtAvailFlrThreshold.setStatus('current')
esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus.setStatus('current')
esaProbeCOSConfigSoamPmExtConDeltaTsForAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeCOSConfigSoamPmExtConDeltaTsForAvail.setStatus('current')
esaProbeMultiDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16), )
if mibBuilder.loadTexts: esaProbeMultiDestinationTable.setStatus('current')
esaProbeMultiDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDestinationIndex"))
if mibBuilder.loadTexts: esaProbeMultiDestinationEntry.setStatus('current')
esaProbeDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationIndex.setStatus('current')
esaProbeDestinationMepType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 2), MepDestinationType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationMepType.setStatus('current')
esaProbeDestinationMepMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationMepMacAddr.setStatus('current')
esaProbeDestinationMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 4), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationMepId.setStatus('current')
esaProbeDestinationStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationStorageType.setStatus('current')
esaProbeDestinationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationRowStatus.setStatus('current')
bertControlTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17), )
if mibBuilder.loadTexts: bertControlTable.setStatus('current')
bertControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "ecpaControlIndex"))
if mibBuilder.loadTexts: bertControlEntry.setStatus('current')
bertControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: bertControlIndex.setStatus('current')
bertControlSourceEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertControlSourceEntity.setStatus('current')
bertControlTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 3), BerTestMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertControlTestMode.setStatus('current')
bertControlDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 259200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertControlDuration.setStatus('current')
bertControlStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertControlStream.setStatus('current')
bertControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 6), BertControlAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertControlAction.setStatus('current')
bertControlTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 7), BerTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertControlTestStatus.setStatus('current')
bertConfigStreamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18), )
if mibBuilder.loadTexts: bertConfigStreamTable.setStatus('current')
bertConfigStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1), ).setIndexNames((0, "CM-SA-MIB", "bertConfigStreamIndex"))
if mibBuilder.loadTexts: bertConfigStreamEntry.setStatus('current')
bertConfigStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: bertConfigStreamIndex.setStatus('current')
bertConfigStreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamName.setStatus('current')
bertConfigStreamTxPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 3), BertPattern()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamTxPattern.setStatus('current')
bertConfigStreamErrInjectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamErrInjectEnabled.setStatus('current')
bertConfigStreamErrInjectRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 5), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamErrInjectRate.setStatus('current')
bertConfigStreamErrInjectRateMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamErrInjectRateMultiplier.setStatus('current')
bertConfigStreamUserPatternLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 7), BertUserPatternLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamUserPatternLength.setStatus('current')
bertConfigStreamUserPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamUserPattern.setStatus('current')
bertTestStreamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19), )
if mibBuilder.loadTexts: bertTestStreamTable.setStatus('current')
bertTestStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "bertControlIndex"), (0, "CM-SA-MIB", "bertTestStreamIndex"))
if mibBuilder.loadTexts: bertTestStreamEntry.setStatus('current')
bertTestStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: bertTestStreamIndex.setStatus('current')
bertTestStreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertTestStreamName.setStatus('current')
bertTestStreamTxPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 3), BertPattern()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamTxPattern.setStatus('current')
bertTestStreamErrInjectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamErrInjectEnabled.setStatus('current')
bertTestStreamErrInjectRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 5), BitErrRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamErrInjectRate.setStatus('current')
bertTestStreamErrInjectRateMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamErrInjectRateMultiplier.setStatus('current')
bertTestStreamUserPatternLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 7), BertUserPatternLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamUserPatternLength.setStatus('current')
bertTestStreamUserPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamUserPattern.setStatus('current')
bertTestStreamMonStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonStartTime.setStatus('current')
bertTestStreamMonEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonEndTime.setStatus('current')
bertTestStreamMonElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonElapsedTime.setStatus('current')
bertTestStreamMonSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 12), BertSyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonSyncState.setStatus('current')
bertTestStreamMonRxPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 13), BertPattern()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxPattern.setStatus('current')
bertTestStreamMonSyncCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonSyncCounts.setStatus('current')
bertTestStreamMonRxBitErrsSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxBitErrsSinceStart.setStatus('current')
bertTestStreamMonRxBitsSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxBitsSinceStart.setStatus('current')
bertTestStreamMonRxESsSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxESsSinceStart.setStatus('current')
bertTestStreamMonRxErrRateSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 18), BitErrRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateSinceStart.setStatus('current')
bertTestStreamMonRxErrRateMultiplierSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateMultiplierSinceStart.setStatus('current')
bertTestStreamMonRxBitErrsSinceLastSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxBitErrsSinceLastSync.setStatus('current')
bertTestStreamMonRxBitsSinceLastSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxBitsSinceLastSync.setStatus('current')
bertTestStreamMonRxESsSinceLastSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxESsSinceLastSync.setStatus('current')
bertTestStreamMonRxErrRateSinceLastSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 23), BitErrRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateSinceLastSync.setStatus('current')
bertTestStreamMonRxErrRateMultiplierSinceLastSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateMultiplierSinceLastSync.setStatus('current')
bertTestStreamConfigChangedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamConfigChangedFlag.setStatus('current')
bertTestStreamMonOOSSsSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonOOSSsSinceStart.setStatus('current')
f3EsaProbeCOSConfigSoamPmExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 20), )
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtTable.setStatus('current')
f3EsaProbeCOSConfigSoamPmExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 20, 1), )
esaProbeCOSConfigEntry.registerAugmentions(("CM-SA-MIB", "f3EsaProbeCOSConfigSoamPmExtEntry"))
f3EsaProbeCOSConfigSoamPmExtEntry.setIndexNames(*esaProbeCOSConfigEntry.getIndexNames())
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtEntry.setStatus('current')
f3EsaProbeCOSConfigSoamPmExtAvailFlrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtAvailFlrThreshold.setStatus('current')
f3EsaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus.setStatus('current')
f3EsaProbeCOSConfigSoamPmExtConDeltaTsForAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 20, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtConDeltaTsForAvail.setStatus('current')
f3EsaProbeStatsSoamPmExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21), )
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtTable.setStatus('current')
f3EsaProbeStatsSoamPmExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1), )
esaProbeStatsEntry.registerAugmentions(("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtEntry"))
f3EsaProbeStatsSoamPmExtEntry.setIndexNames(*esaProbeStatsEntry.getIndexNames())
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtEntry.setStatus('current')
f3EsaProbeStatsSoamPmExtMinP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 1), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMinP2RFlr.setStatus('current')
f3EsaProbeStatsSoamPmExtMaxP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxP2RFlr.setStatus('current')
f3EsaProbeStatsSoamPmExtAvgP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 3), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgP2RFlr.setStatus('current')
f3EsaProbeStatsSoamPmExtMinR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMinR2PFlr.setStatus('current')
f3EsaProbeStatsSoamPmExtMaxR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxR2PFlr.setStatus('current')
f3EsaProbeStatsSoamPmExtAvgR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgR2PFlr.setStatus('current')
f3EsaProbeStatsSoamPmExtP2rSeverelyErroredDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rSeverelyErroredDeltaTs.setStatus('current')
f3EsaProbeStatsSoamPmExtR2PSeverelyErroredDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2PSeverelyErroredDeltaTs.setStatus('current')
f3EsaProbeStatsSoamPmExtP2rAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rAvailableTime.setStatus('current')
f3EsaProbeStatsSoamPmExtR2PAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2PAvailableTime.setStatus('current')
f3EsaProbeStatsSoamPmExtP2rUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rUnavailableTime.setStatus('current')
f3EsaProbeStatsSoamPmExtR2PUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2PUnavailableTime.setStatus('current')
f3EsaProbeStatsSoamPmExtMinAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMinAbsRTJitter.setStatus('current')
f3EsaProbeStatsSoamPmExtMaxAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxAbsRTJitter.setStatus('current')
f3EsaProbeStatsSoamPmExtAvgAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgAbsRTJitter.setStatus('current')
f3EsaProbeStatsSoamPmExtNumAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumAbsRTJitter.setStatus('current')
f3EsaProbeStatsSoamPmExtSumAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumAbsRTJitter.setStatus('current')
f3EsaProbeStatsSoamPmExtSumOfSqAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqAbsRTJitter.setStatus('current')
f3EsaProbeStatsSoamPmExtMaxP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxP2RFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtAvgP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgP2RFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtNumP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumP2RFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtSumP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumP2RFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtSumOfSqP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqP2RFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtMaxR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxR2PFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtAvgR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgR2PFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtNumR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumR2PFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtSumR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumR2PFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtSumOfSqR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqR2PFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtMaxRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxRTFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtAvgRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgRTFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtNumRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumRTFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtSumRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumRTFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtSumOfSqRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqRTFDR.setStatus('current')
f3EsaProbeStatsSoamPmExtP2rAvailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rAvailableDeltaTs.setStatus('current')
f3EsaProbeStatsSoamPmExtR2pAvailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2pAvailableDeltaTs.setStatus('current')
f3EsaProbeStatsSoamPmExtP2rUnavailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rUnavailableDeltaTs.setStatus('current')
f3EsaProbeStatsSoamPmExtR2pUnavailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2pUnavailableDeltaTs.setStatus('current')
f3EsaProbeStatsSoamPmExtElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtElapsedTime.setStatus('current')
f3EsaProbeHistorySoamPmExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22), )
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtTable.setStatus('current')
f3EsaProbeHistorySoamPmExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1), )
esaProbeHistoryEntry.registerAugmentions(("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtEntry"))
f3EsaProbeHistorySoamPmExtEntry.setIndexNames(*esaProbeHistoryEntry.getIndexNames())
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtEntry.setStatus('current')
f3EsaProbeHistorySoamPmExtMinP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 1), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMinP2RFlr.setStatus('current')
f3EsaProbeHistorySoamPmExtMaxP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxP2RFlr.setStatus('current')
f3EsaProbeHistorySoamPmExtAvgP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 3), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgP2RFlr.setStatus('current')
f3EsaProbeHistorySoamPmExtMinR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMinR2PFlr.setStatus('current')
f3EsaProbeHistorySoamPmExtMaxR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxR2PFlr.setStatus('current')
f3EsaProbeHistorySoamPmExtAvgR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgR2PFlr.setStatus('current')
f3EsaProbeHistorySoamPmExtP2rSeverelyErroredDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rSeverelyErroredDeltaTs.setStatus('current')
f3EsaProbeHistorySoamPmExtR2PSeverelyErroredDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2PSeverelyErroredDeltaTs.setStatus('current')
f3EsaProbeHistorySoamPmExtP2rAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rAvailableTime.setStatus('current')
f3EsaProbeHistorySoamPmExtR2PAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2PAvailableTime.setStatus('current')
f3EsaProbeHistorySoamPmExtP2rUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rUnavailableTime.setStatus('current')
f3EsaProbeHistorySoamPmExtR2PUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2PUnavailableTime.setStatus('current')
f3EsaProbeHistorySoamPmExtMinAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMinAbsRTJitter.setStatus('current')
f3EsaProbeHistorySoamPmExtMaxAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxAbsRTJitter.setStatus('current')
f3EsaProbeHistorySoamPmExtAvgAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgAbsRTJitter.setStatus('current')
f3EsaProbeHistorySoamPmExtNumAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumAbsRTJitter.setStatus('current')
f3EsaProbeHistorySoamPmExtSumAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumAbsRTJitter.setStatus('current')
f3EsaProbeHistorySoamPmExtSumOfSqAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqAbsRTJitter.setStatus('current')
f3EsaProbeHistorySoamPmExtMaxP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxP2RFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtAvgP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgP2RFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtNumP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumP2RFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtSumP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumP2RFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtSumOfSqP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqP2RFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtMaxR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxR2PFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtAvgR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgR2PFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtNumR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumR2PFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtSumR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumR2PFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtSumOfSqR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqR2PFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtMaxRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxRTFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtAvgRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgRTFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtNumRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumRTFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtSumRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumRTFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtSumOfSqRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqRTFDR.setStatus('current')
f3EsaProbeHistorySoamPmExtP2rAvailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rAvailableDeltaTs.setStatus('current')
f3EsaProbeHistorySoamPmExtR2pAvailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2pAvailableDeltaTs.setStatus('current')
f3EsaProbeHistorySoamPmExtP2rUnavailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rUnavailableDeltaTs.setStatus('current')
f3EsaProbeHistorySoamPmExtR2pUnavailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2pUnavailableDeltaTs.setStatus('current')
f3EsaProbeHistorySoamPmExtElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtElapsedTime.setStatus('current')
cmOperateLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 2, 1))
if mibBuilder.loadTexts: cmOperateLoopbackTrap.setStatus('current')
cmReleaseLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 2, 2))
if mibBuilder.loadTexts: cmReleaseLoopbackTrap.setStatus('current')
esaProbeThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 2, 3)).setObjects(("CM-SA-MIB", "esaProbeStatsThresholdIndex"), ("CM-SA-MIB", "esaProbeStatsThresholdVariable"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueLo"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueHi"), ("CM-SA-MIB", "esaProbeStatsThresholdMonValue"))
if mibBuilder.loadTexts: esaProbeThresholdCrossingAlert.setStatus('current')
cmServAssuranceCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 1))
cmServAssuranceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2))
cmServAssuranceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 1, 1)).setObjects(("CM-SA-MIB", "cmServAssuranceObjectGroup"), ("CM-SA-MIB", "cmServAssuranceNotifGroup"), ("CM-SA-MIB", "cmEcpaGroup"), ("CM-SA-MIB", "cmEsaGroup"), ("CM-SA-MIB", "cmServAssuranceGenNotifGroup"), ("CM-SA-MIB", "cmServAssuranceEsaNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmServAssuranceCompliance = cmServAssuranceCompliance.setStatus('current')
cmServAssuranceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 1))
for _cmServAssuranceObjectGroup_obj in [[("CM-SA-MIB", "ecpaControlIndex"), ("CM-SA-MIB", "ecpaControlSourcePort"), ("CM-SA-MIB", "ecpaControlTestType"), ("CM-SA-MIB", "ecpaControlNumFrames"), ("CM-SA-MIB", "ecpaControlDuration"), ("CM-SA-MIB", "ecpaControlInjectorDirection"), ("CM-SA-MIB", "ecpaControlMonitorDirection"), ("CM-SA-MIB", "ecpaControlStream1"), ("CM-SA-MIB", "ecpaControlStream2"), ("CM-SA-MIB", "ecpaControlStream3"), ("CM-SA-MIB", "ecpaControlAction"), ("CM-SA-MIB", "ecpaControlTestStatus"), ("CM-SA-MIB", "ecpaControlEcpaType"), ("CM-SA-MIB", "ecpaControlMonitorPortType"), ("CM-SA-MIB", "ecpaConfigStreamIndex"), ("CM-SA-MIB", "ecpaConfigStreamName"), ("CM-SA-MIB", "ecpaConfigStreamFrameSize"), ("CM-SA-MIB", "ecpaConfigStreamRate"), ("CM-SA-MIB", "ecpaConfigStreamPayloadType"), ("CM-SA-MIB", "ecpaConfigStreamSignature"), ("CM-SA-MIB", "ecpaConfigStreamDestinationMAC"), ("CM-SA-MIB", "ecpaConfigStreamSourceMAC"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanEnabled"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanId"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanPrio"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanEtherType"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanEnabled"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanId"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanPrio"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanEtherType"), ("CM-SA-MIB", "ecpaConfigStreamIpVersion"), ("CM-SA-MIB", "ecpaConfigStreamIpV4Address"), ("CM-SA-MIB", "ecpaConfigStreamIpV6Address"), ("CM-SA-MIB", "ecpaConfigStreamPrioMapMode"), ("CM-SA-MIB", "ecpaConfigStreamPrioVal"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Enabled"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Id"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Prio"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2EtherType"), ("CM-SA-MIB", "ecpaConfigStreamDestIpV4Address"), ("CM-SA-MIB", "ecpaConfigStreamDestIpV6Address"), ("CM-SA-MIB", "ecpaConfigStreamUsePortSourceMAC"), ("CM-SA-MIB", "ecpaConfigStreamRateHi"), ("CM-SA-MIB", "ecpaConfigStreamUdpControl"), ("CM-SA-MIB", "ecpaConfigStreamUdpSrcPort"), ("CM-SA-MIB", "ecpaConfigStreamUdpDstPort"), ("CM-SA-MIB", "ecpaTestStreamIndex"), ("CM-SA-MIB", "ecpaTestStreamSourcePort"), ("CM-SA-MIB", "ecpaTestStreamName"), ("CM-SA-MIB", "ecpaTestStreamFrameSize"), ("CM-SA-MIB", "ecpaTestStreamRate"), ("CM-SA-MIB", "ecpaTestStreamPayloadType"), ("CM-SA-MIB", "ecpaTestStreamSignature"), ("CM-SA-MIB", "ecpaTestStreamDestinationMAC"), ("CM-SA-MIB", "ecpaTestStreamSourceMAC"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanEnabled"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanId"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanPrio"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanEtherType"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanEnabled"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanId"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanPrio"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanEtherType"), ("CM-SA-MIB", "ecpaTestStreamIpVersion"), ("CM-SA-MIB", "ecpaTestStreamIpV4Address"), ("CM-SA-MIB", "ecpaTestStreamIpV6Address"), ("CM-SA-MIB", "ecpaTestStreamPrioMapMode"), ("CM-SA-MIB", "ecpaTestStreamPrioVal"), ("CM-SA-MIB", "ecpaTestStreamMonStartTime"), ("CM-SA-MIB", "ecpaTestStreamMonEndTime"), ("CM-SA-MIB", "ecpaTestStreamMonElapsedTime"), ("CM-SA-MIB", "ecpaTestStreamMonTxFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxPercentSuccess"), ("CM-SA-MIB", "ecpaTestStreamMonRxOutOfSeqErrs"), ("CM-SA-MIB", "ecpaTestStreamMonRxSeqGaps"), ("CM-SA-MIB", "ecpaTestStreamMonRxNonEcpaFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxMinDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRxMaxDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRxAvgDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrameSize"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame1Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame2Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame3Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame4Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame5Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame6Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame7Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame8Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame9Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame10Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRxBitRate"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Enabled"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Id"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Prio"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2EtherType"), ("CM-SA-MIB", "ecpaTestStreamDestIpV4Address"), ("CM-SA-MIB", "ecpaTestStreamDestIpV6Address"), ("CM-SA-MIB", "ecpaTestStreamConfigChanged"), ("CM-SA-MIB", "ecpaTestStreamRateHi"), ("CM-SA-MIB", "ecpaTestStreamUdpControl"), ("CM-SA-MIB", "ecpaTestStreamUdpSrcPort"), ("CM-SA-MIB", "ecpaTestStreamUdpDstPort"), ("CM-SA-MIB", "esaProbeIndex"), ("CM-SA-MIB", "esaProbeName"), ("CM-SA-MIB", "esaProbeSourcePort"), ("CM-SA-MIB", "esaProbeAssocSchedGroup"), ("CM-SA-MIB", "esaProbeDirection"), ("CM-SA-MIB", "esaProbeProtocol"), ("CM-SA-MIB", "esaProbeSrcIpAddress"), ("CM-SA-MIB", "esaProbeSrcSubnetMask"), ("CM-SA-MIB", "esaProbeDestIpAddress"), ("CM-SA-MIB", "esaProbeSrcMep"), ("CM-SA-MIB", "esaProbeDestMepType"), ("CM-SA-MIB", "esaProbeDestMepMacAddr"), ("CM-SA-MIB", "esaProbeDestMepId"), ("CM-SA-MIB", "esaProbeVlanTagEnabled"), ("CM-SA-MIB", "esaProbeVlanTagEtherType"), ("CM-SA-MIB", "esaProbeVlanId"), ("CM-SA-MIB", "esaProbeVlanPrio"), ("CM-SA-MIB", "esaProbeInnerVlanTagEnabled"), ("CM-SA-MIB", "esaProbeInnerVlanTagEtherType"), ("CM-SA-MIB", "esaProbeInnerVlanId"), ("CM-SA-MIB", "esaProbeInnerVlanPrio"), ("CM-SA-MIB", "esaProbeIpPrioMapMode"), ("CM-SA-MIB", "esaProbeIpPriority"), ("CM-SA-MIB", "esaProbePktsPerSample"), ("CM-SA-MIB", "esaProbePktSize"), ("CM-SA-MIB", "esaProbeInterPktGap"), ("CM-SA-MIB", "esaProbePktDeadInterval"), ("CM-SA-MIB", "esaProbeResponseTimeout"), ("CM-SA-MIB", "esaProbeY1731DmmPktSize"), ("CM-SA-MIB", "esaProbeY1731LmmInterval"), ("CM-SA-MIB", "esaProbeY1731DmmInterval"), ("CM-SA-MIB", "esaProbeHistoryBins"), ("CM-SA-MIB", "esaProbeHistoryInterval"), ("CM-SA-MIB", "esaProbeDistHistoryBins"), ("CM-SA-MIB", "esaProbeDistHistoryInterval"), ("CM-SA-MIB", "esaProbeCreationTime"), ("CM-SA-MIB", "esaProbeStorageType"), ("CM-SA-MIB", "esaProbeRowStatus"), ("CM-SA-MIB", "esaProbeInner2VlanTagEnabled"), ("CM-SA-MIB", "esaProbeInner2VlanTagEtherType"), ("CM-SA-MIB", "esaProbeInner2VlanId"), ("CM-SA-MIB", "esaProbeInner2VlanPrio"), ("CM-SA-MIB", "esaProbeAdminState"), ("CM-SA-MIB", "esaProbeOperationalState"), ("CM-SA-MIB", "esaProbeSecondaryState"), ("CM-SA-MIB", "esaProbeScheduleGroupIndex"), ("CM-SA-MIB", "esaProbeScheduleGroupDescr"), ("CM-SA-MIB", "esaProbeScheduleGroupProbeList"), ("CM-SA-MIB", "esaProbeScheduleGroupType"), ("CM-SA-MIB", "esaProbeScheduleGroupStartTime"), ("CM-SA-MIB", "esaProbeScheduleGroupDuration"), ("CM-SA-MIB", "esaProbeScheduleGroupInterval"), ("CM-SA-MIB", "esaProbeScheduleGroupAction"), ("CM-SA-MIB", "esaProbeScheduleGroupStatus"), ("CM-SA-MIB", "esaProbeScheduleGroupStorageType"), ("CM-SA-MIB", "esaProbeScheduleGroupRowStatus"), ("CM-SA-MIB", "esaProbeScheduleGroupActionProbeList"), ("CM-SA-MIB", "esaReflectorIndex"), ("CM-SA-MIB", "esaReflectorName"), ("CM-SA-MIB", "esaReflectorIpAddress"), ("CM-SA-MIB", "esaReflectorSubnetMask"), ("CM-SA-MIB", "esaReflectorSourcePort"), ("CM-SA-MIB", "esaReflectorIpPrioMapMode"), ("CM-SA-MIB", "esaReflectorIpPriority"), ("CM-SA-MIB", "esaReflectorAction"), ("CM-SA-MIB", "esaReflectorSuspended"), ("CM-SA-MIB", "esaReflectorCreationTime"), ("CM-SA-MIB", "esaReflectorStorageType"), ("CM-SA-MIB", "esaReflectorRowStatus"), ("CM-SA-MIB", "esaReflectorDirection"), ("CM-SA-MIB", "esaReflectorAdminState"), ("CM-SA-MIB", "esaReflectorOperationalState"), ("CM-SA-MIB", "esaReflectorSecondaryState"), ("CM-SA-MIB", "esaProbeStatsDestinationIndex"), ("CM-SA-MIB", "esaProbeStatsCOSIndex"), ("CM-SA-MIB", "esaProbeStatsIndex"), ("CM-SA-MIB", "esaProbeStatsIntervalType"), ("CM-SA-MIB", "esaProbeStatsCOS"), ("CM-SA-MIB", "esaProbeStatsValid"), ("CM-SA-MIB", "esaProbeStatsAction"), ("CM-SA-MIB", "esaProbeStatsP2RPkts"), ("CM-SA-MIB", "esaProbeStatsP2RErredPkts"), ("CM-SA-MIB", "esaProbeStatsP2RSyncErrs"), ("CM-SA-MIB", "esaProbeStatsP2RLostPkts"), ("CM-SA-MIB", "esaProbeStatsR2PPkts"), ("CM-SA-MIB", "esaProbeStatsR2PErredPkts"), ("CM-SA-MIB", "esaProbeStatsR2PSyncErrs"), ("CM-SA-MIB", "esaProbeStatsR2PLostPkts"), ("CM-SA-MIB", "esaProbeStatsLostPkts"), ("CM-SA-MIB", "esaProbeStatsSeqGaps"), ("CM-SA-MIB", "esaProbeStatsOutOfSeqErrs"), ("CM-SA-MIB", "esaProbeStatsMinRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsMaxRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsAvgRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsSumRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsMinOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsMaxOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsAvgOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsSumOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsMinOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsMaxOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsAvgOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsSumOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsMinPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMinNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsY1731P2RNegLossOccurrences"), ("CM-SA-MIB", "esaProbeStatsY1731R2PNegLossOccurrences"), ("CM-SA-MIB", "esaProbeStatsY1731RxLmSamples"), ("CM-SA-MIB", "esaProbeStatsY1731RxDmSamples"), ("CM-SA-MIB", "esaProbeStatsY1731P2RFrames"), ("CM-SA-MIB", "esaProbeStatsY1731R2PFrames"), ("CM-SA-MIB", "esaProbeStatsAvgAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsAvgAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMinAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryDestinationIndex"), ("CM-SA-MIB", "esaProbeHistoryCOSIndex"), ("CM-SA-MIB", "esaProbeHistoryIndex"), ("CM-SA-MIB", "esaProbeHistoryTime"), ("CM-SA-MIB", "esaProbeHistoryValid"), ("CM-SA-MIB", "esaProbeHistoryAction"), ("CM-SA-MIB", "esaProbeHistoryCOS"), ("CM-SA-MIB", "esaProbeHistoryP2RPkts")], [("CM-SA-MIB", "esaProbeHistoryP2RErredPkts"), ("CM-SA-MIB", "esaProbeHistoryP2RSyncErrs"), ("CM-SA-MIB", "esaProbeHistoryP2RLostPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PErredPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PSyncErrs"), ("CM-SA-MIB", "esaProbeHistoryR2PLostPkts"), ("CM-SA-MIB", "esaProbeHistoryLostPkts"), ("CM-SA-MIB", "esaProbeHistorySeqGaps"), ("CM-SA-MIB", "esaProbeHistoryOutOfSeqErrs"), ("CM-SA-MIB", "esaProbeHistoryMinRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistorySumRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryMinOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistorySumOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryMinOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistorySumOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryMinPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMinNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryY1731P2RNegLossOccurrences"), ("CM-SA-MIB", "esaProbeHistoryY1731R2PNegLossOccurrences"), ("CM-SA-MIB", "esaProbeHistoryY1731RxLmSamples"), ("CM-SA-MIB", "esaProbeHistoryY1731RxDmSamples"), ("CM-SA-MIB", "esaProbeHistoryY1731P2RFrames"), ("CM-SA-MIB", "esaProbeHistoryY1731R2PFrames"), ("CM-SA-MIB", "esaProbeHistoryAvgAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryAvgAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMinAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqAbsR2PJitter"), ("CM-SA-MIB", "esaProbeDistStatsConfigIndex"), ("CM-SA-MIB", "esaProbeDistStatsConfigType"), ("CM-SA-MIB", "esaProbeDistStatsConfigMinVal"), ("CM-SA-MIB", "esaProbeDistStatsConfigMaxVal"), ("CM-SA-MIB", "esaProbeDistStatsConfigNumBins"), ("CM-SA-MIB", "esaProbeDistStatsDestinationIndex"), ("CM-SA-MIB", "esaProbeDistStatsCOSIndex"), ("CM-SA-MIB", "esaProbeDistStatsCOS"), ("CM-SA-MIB", "esaProbeDistStatsNumBins"), ("CM-SA-MIB", "esaProbeDistStatsLTMin"), ("CM-SA-MIB", "esaProbeDistStatsGTMax"), ("CM-SA-MIB", "esaProbeDistStatsBinIndex"), ("CM-SA-MIB", "esaProbeDistStatsBinLower"), ("CM-SA-MIB", "esaProbeDistStatsBinUpper"), ("CM-SA-MIB", "esaProbeDistStatsBinNumSamples"), ("CM-SA-MIB", "esaProbeDistHistoryDestinationIndex"), ("CM-SA-MIB", "esaProbeDistHistoryCOSIndex"), ("CM-SA-MIB", "esaProbeDistHistoryCOS"), ("CM-SA-MIB", "esaProbeDistHistoryIndex"), ("CM-SA-MIB", "esaProbeDistHistoryTime"), ("CM-SA-MIB", "esaProbeDistHistoryAction"), ("CM-SA-MIB", "esaProbeDistHistoryNumBins"), ("CM-SA-MIB", "esaProbeDistHistoryLTMin"), ("CM-SA-MIB", "esaProbeDistHistoryGTMax"), ("CM-SA-MIB", "esaProbeDistHistoryBinIndex"), ("CM-SA-MIB", "esaProbeDistHistoryBinLower"), ("CM-SA-MIB", "esaProbeDistHistoryBinUpper"), ("CM-SA-MIB", "esaProbeDistHistoryBinNumSamples"), ("CM-SA-MIB", "esaProbeStatsThresholdIndex"), ("CM-SA-MIB", "esaProbeStatsThresholdVariable"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueLo"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueHi"), ("CM-SA-MIB", "esaProbeStatsThresholdMonValue"), ("CM-SA-MIB", "esaProbeCOSConfigIndex"), ("CM-SA-MIB", "esaProbeCOSConfigType"), ("CM-SA-MIB", "esaProbeCOSConfigInterval"), ("CM-SA-MIB", "esaProbeCOSConfigPktSize"), ("CM-SA-MIB", "esaProbeCOSConfigStorageType"), ("CM-SA-MIB", "esaProbeCOSConfigRowStatus"), ("CM-SA-MIB", "esaProbeDestinationIndex"), ("CM-SA-MIB", "esaProbeDestinationMepType"), ("CM-SA-MIB", "esaProbeDestinationMepMacAddr"), ("CM-SA-MIB", "esaProbeDestinationMepId"), ("CM-SA-MIB", "esaProbeDestinationStorageType"), ("CM-SA-MIB", "esaProbeDestinationRowStatus")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        cmServAssuranceObjectGroup = cmServAssuranceObjectGroup.setObjects(*_cmServAssuranceObjectGroup_obj)
    else:
        cmServAssuranceObjectGroup = cmServAssuranceObjectGroup.setObjects(*_cmServAssuranceObjectGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmServAssuranceObjectGroup = cmServAssuranceObjectGroup.setStatus('deprecated')
cmServAssuranceNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 2)).setObjects(("CM-SA-MIB", "cmOperateLoopbackTrap"), ("CM-SA-MIB", "cmReleaseLoopbackTrap"), ("CM-SA-MIB", "esaProbeThresholdCrossingAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmServAssuranceNotifGroup = cmServAssuranceNotifGroup.setStatus('deprecated')
cmEcpaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 3)).setObjects(("CM-SA-MIB", "ecpaControlIndex"), ("CM-SA-MIB", "ecpaControlSourcePort"), ("CM-SA-MIB", "ecpaControlTestType"), ("CM-SA-MIB", "ecpaControlNumFrames"), ("CM-SA-MIB", "ecpaControlDuration"), ("CM-SA-MIB", "ecpaControlInjectorDirection"), ("CM-SA-MIB", "ecpaControlMonitorDirection"), ("CM-SA-MIB", "ecpaControlStream1"), ("CM-SA-MIB", "ecpaControlStream2"), ("CM-SA-MIB", "ecpaControlStream3"), ("CM-SA-MIB", "ecpaControlAction"), ("CM-SA-MIB", "ecpaControlTestStatus"), ("CM-SA-MIB", "ecpaControlStorageType"), ("CM-SA-MIB", "ecpaControlRowStatus"), ("CM-SA-MIB", "ecpaControlEcpaType"), ("CM-SA-MIB", "ecpaConfigStreamIndex"), ("CM-SA-MIB", "ecpaConfigStreamName"), ("CM-SA-MIB", "ecpaConfigStreamFrameSize"), ("CM-SA-MIB", "ecpaConfigStreamRate"), ("CM-SA-MIB", "ecpaConfigStreamPayloadType"), ("CM-SA-MIB", "ecpaConfigStreamSignature"), ("CM-SA-MIB", "ecpaConfigStreamDestinationMAC"), ("CM-SA-MIB", "ecpaConfigStreamSourceMAC"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanEnabled"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanId"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanPrio"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanEtherType"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanEnabled"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanId"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanPrio"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanEtherType"), ("CM-SA-MIB", "ecpaConfigStreamIpVersion"), ("CM-SA-MIB", "ecpaConfigStreamIpV4Address"), ("CM-SA-MIB", "ecpaConfigStreamIpV6Address"), ("CM-SA-MIB", "ecpaConfigStreamPrioMapMode"), ("CM-SA-MIB", "ecpaConfigStreamPrioVal"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Enabled"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Id"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Prio"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2EtherType"), ("CM-SA-MIB", "ecpaConfigStreamDestIpV4Address"), ("CM-SA-MIB", "ecpaConfigStreamDestIpV6Address"), ("CM-SA-MIB", "ecpaConfigStreamUsePortSourceMAC"), ("CM-SA-MIB", "ecpaConfigStreamRateHi"), ("CM-SA-MIB", "ecpaConfigStreamUdpControl"), ("CM-SA-MIB", "ecpaConfigStreamUdpSrcPort"), ("CM-SA-MIB", "ecpaConfigStreamUdpDstPort"), ("CM-SA-MIB", "ecpaTestStreamIndex"), ("CM-SA-MIB", "ecpaTestStreamSourcePort"), ("CM-SA-MIB", "ecpaTestStreamName"), ("CM-SA-MIB", "ecpaTestStreamFrameSize"), ("CM-SA-MIB", "ecpaTestStreamRate"), ("CM-SA-MIB", "ecpaTestStreamPayloadType"), ("CM-SA-MIB", "ecpaTestStreamSignature"), ("CM-SA-MIB", "ecpaTestStreamDestinationMAC"), ("CM-SA-MIB", "ecpaTestStreamSourceMAC"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanEnabled"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanId"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanPrio"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanEtherType"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanEnabled"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanId"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanPrio"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanEtherType"), ("CM-SA-MIB", "ecpaTestStreamIpVersion"), ("CM-SA-MIB", "ecpaTestStreamIpV4Address"), ("CM-SA-MIB", "ecpaTestStreamIpV6Address"), ("CM-SA-MIB", "ecpaTestStreamPrioMapMode"), ("CM-SA-MIB", "ecpaTestStreamPrioVal"), ("CM-SA-MIB", "ecpaTestStreamMonStartTime"), ("CM-SA-MIB", "ecpaTestStreamMonEndTime"), ("CM-SA-MIB", "ecpaTestStreamMonElapsedTime"), ("CM-SA-MIB", "ecpaTestStreamMonTxFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxPercentSuccess"), ("CM-SA-MIB", "ecpaTestStreamMonRxOutOfSeqErrs"), ("CM-SA-MIB", "ecpaTestStreamMonRxSeqGaps"), ("CM-SA-MIB", "ecpaTestStreamMonRxNonEcpaFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxMinDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRxMaxDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRxAvgDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrameSize"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame1Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame2Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame3Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame4Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame5Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame6Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame7Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame8Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame9Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame10Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRxBitRate"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Enabled"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Id"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Prio"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2EtherType"), ("CM-SA-MIB", "ecpaTestStreamDestIpV4Address"), ("CM-SA-MIB", "ecpaTestStreamDestIpV6Address"), ("CM-SA-MIB", "ecpaTestStreamConfigChanged"), ("CM-SA-MIB", "ecpaTestStreamRateHi"), ("CM-SA-MIB", "ecpaTestStreamUdpControl"), ("CM-SA-MIB", "ecpaTestStreamUdpSrcPort"), ("CM-SA-MIB", "ecpaTestStreamUdpDstPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEcpaGroup = cmEcpaGroup.setStatus('current')
cmEsaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 4))
for _cmEsaGroup_obj in [[("CM-SA-MIB", "esaProbeIndex"), ("CM-SA-MIB", "esaProbeName"), ("CM-SA-MIB", "esaProbeSourcePort"), ("CM-SA-MIB", "esaProbeAssocSchedGroup"), ("CM-SA-MIB", "esaProbeDirection"), ("CM-SA-MIB", "esaProbeProtocol"), ("CM-SA-MIB", "esaProbeSrcIpAddress"), ("CM-SA-MIB", "esaProbeSrcSubnetMask"), ("CM-SA-MIB", "esaProbeDestIpAddress"), ("CM-SA-MIB", "esaProbeSrcMep"), ("CM-SA-MIB", "esaProbeDestMepType"), ("CM-SA-MIB", "esaProbeDestMepMacAddr"), ("CM-SA-MIB", "esaProbeDestMepId"), ("CM-SA-MIB", "esaProbeVlanTagEnabled"), ("CM-SA-MIB", "esaProbeVlanTagEtherType"), ("CM-SA-MIB", "esaProbeVlanId"), ("CM-SA-MIB", "esaProbeVlanPrio"), ("CM-SA-MIB", "esaProbeInnerVlanTagEnabled"), ("CM-SA-MIB", "esaProbeInnerVlanTagEtherType"), ("CM-SA-MIB", "esaProbeInnerVlanId"), ("CM-SA-MIB", "esaProbeInnerVlanPrio"), ("CM-SA-MIB", "esaProbeIpPrioMapMode"), ("CM-SA-MIB", "esaProbeIpPriority"), ("CM-SA-MIB", "esaProbePktsPerSample"), ("CM-SA-MIB", "esaProbePktSize"), ("CM-SA-MIB", "esaProbeInterPktGap"), ("CM-SA-MIB", "esaProbePktDeadInterval"), ("CM-SA-MIB", "esaProbeResponseTimeout"), ("CM-SA-MIB", "esaProbeY1731DmmPktSize"), ("CM-SA-MIB", "esaProbeY1731LmmInterval"), ("CM-SA-MIB", "esaProbeY1731DmmInterval"), ("CM-SA-MIB", "esaProbeHistoryBins"), ("CM-SA-MIB", "esaProbeHistoryInterval"), ("CM-SA-MIB", "esaProbeDistHistoryBins"), ("CM-SA-MIB", "esaProbeDistHistoryInterval"), ("CM-SA-MIB", "esaProbeCreationTime"), ("CM-SA-MIB", "esaProbeStorageType"), ("CM-SA-MIB", "esaProbeRowStatus"), ("CM-SA-MIB", "esaProbeMultiCOSEnabled"), ("CM-SA-MIB", "esaProbeSLAMonitorType"), ("CM-SA-MIB", "esaProbeCOSType"), ("CM-SA-MIB", "esaProbeSLMMulticastMACEnabled"), ("CM-SA-MIB", "esaProbeSOAMInterval"), ("CM-SA-MIB", "esaProbeSOAMPktSize"), ("CM-SA-MIB", "esaProbeAdminState"), ("CM-SA-MIB", "esaProbeOperationalState"), ("CM-SA-MIB", "esaProbeSecondaryState"), ("CM-SA-MIB", "esaProbeAlias"), ("CM-SA-MIB", "esaProbeScheduleGroupIndex"), ("CM-SA-MIB", "esaProbeScheduleGroupDescr"), ("CM-SA-MIB", "esaProbeScheduleGroupProbeList"), ("CM-SA-MIB", "esaProbeScheduleGroupType"), ("CM-SA-MIB", "esaProbeScheduleGroupStartTime"), ("CM-SA-MIB", "esaProbeScheduleGroupDuration"), ("CM-SA-MIB", "esaProbeScheduleGroupInterval"), ("CM-SA-MIB", "esaProbeScheduleGroupAction"), ("CM-SA-MIB", "esaProbeScheduleGroupStatus"), ("CM-SA-MIB", "esaProbeScheduleGroupStorageType"), ("CM-SA-MIB", "esaProbeScheduleGroupRowStatus"), ("CM-SA-MIB", "esaReflectorIndex"), ("CM-SA-MIB", "esaReflectorName"), ("CM-SA-MIB", "esaReflectorIpAddress"), ("CM-SA-MIB", "esaReflectorSubnetMask"), ("CM-SA-MIB", "esaReflectorSourcePort"), ("CM-SA-MIB", "esaReflectorIpPrioMapMode"), ("CM-SA-MIB", "esaReflectorIpPriority"), ("CM-SA-MIB", "esaReflectorAction"), ("CM-SA-MIB", "esaReflectorSuspended"), ("CM-SA-MIB", "esaReflectorCreationTime"), ("CM-SA-MIB", "esaReflectorStorageType"), ("CM-SA-MIB", "esaReflectorRowStatus"), ("CM-SA-MIB", "esaReflectorDirection"), ("CM-SA-MIB", "esaReflectorAdminState"), ("CM-SA-MIB", "esaReflectorOperationalState"), ("CM-SA-MIB", "esaReflectorSecondaryState"), ("CM-SA-MIB", "esaReflectorAlias"), ("CM-SA-MIB", "esaProbeStatsDestinationIndex"), ("CM-SA-MIB", "esaProbeStatsCOSIndex"), ("CM-SA-MIB", "esaProbeStatsIndex"), ("CM-SA-MIB", "esaProbeStatsIntervalType"), ("CM-SA-MIB", "esaProbeStatsCOS"), ("CM-SA-MIB", "esaProbeStatsValid"), ("CM-SA-MIB", "esaProbeStatsAction"), ("CM-SA-MIB", "esaProbeStatsP2RPkts"), ("CM-SA-MIB", "esaProbeStatsP2RErredPkts"), ("CM-SA-MIB", "esaProbeStatsP2RSyncErrs"), ("CM-SA-MIB", "esaProbeStatsP2RLostPkts"), ("CM-SA-MIB", "esaProbeStatsR2PPkts"), ("CM-SA-MIB", "esaProbeStatsR2PErredPkts"), ("CM-SA-MIB", "esaProbeStatsR2PSyncErrs"), ("CM-SA-MIB", "esaProbeStatsR2PLostPkts"), ("CM-SA-MIB", "esaProbeStatsLostPkts"), ("CM-SA-MIB", "esaProbeStatsSeqGaps"), ("CM-SA-MIB", "esaProbeStatsOutOfSeqErrs"), ("CM-SA-MIB", "esaProbeStatsMinRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsMaxRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsAvgRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsSumRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsMinOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsMaxOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsAvgOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsSumOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsMinOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsMaxOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsAvgOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsSumOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsMinPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMinNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsY1731P2RNegLossOccurrences"), ("CM-SA-MIB", "esaProbeStatsY1731R2PNegLossOccurrences"), ("CM-SA-MIB", "esaProbeStatsY1731RxLmSamples"), ("CM-SA-MIB", "esaProbeStatsY1731RxDmSamples"), ("CM-SA-MIB", "esaProbeStatsY1731P2RFrames"), ("CM-SA-MIB", "esaProbeStatsY1731R2PFrames"), ("CM-SA-MIB", "esaProbeStatsAvgAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsAvgAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMinAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryDestinationIndex"), ("CM-SA-MIB", "esaProbeHistoryCOSIndex"), ("CM-SA-MIB", "esaProbeHistoryIndex"), ("CM-SA-MIB", "esaProbeHistoryTime"), ("CM-SA-MIB", "esaProbeHistoryValid"), ("CM-SA-MIB", "esaProbeHistoryAction"), ("CM-SA-MIB", "esaProbeHistoryCOS"), ("CM-SA-MIB", "esaProbeHistoryP2RPkts"), ("CM-SA-MIB", "esaProbeHistoryP2RErredPkts"), ("CM-SA-MIB", "esaProbeHistoryP2RSyncErrs"), ("CM-SA-MIB", "esaProbeHistoryP2RLostPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PErredPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PSyncErrs"), ("CM-SA-MIB", "esaProbeHistoryR2PLostPkts"), ("CM-SA-MIB", "esaProbeHistoryLostPkts"), ("CM-SA-MIB", "esaProbeHistorySeqGaps"), ("CM-SA-MIB", "esaProbeHistoryOutOfSeqErrs"), ("CM-SA-MIB", "esaProbeHistoryMinRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistorySumRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryMinOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistorySumOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryMinOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistorySumOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryMinPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMinNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryY1731P2RNegLossOccurrences"), ("CM-SA-MIB", "esaProbeHistoryY1731R2PNegLossOccurrences"), ("CM-SA-MIB", "esaProbeHistoryY1731RxLmSamples"), ("CM-SA-MIB", "esaProbeHistoryY1731RxDmSamples"), ("CM-SA-MIB", "esaProbeHistoryY1731P2RFrames"), ("CM-SA-MIB", "esaProbeHistoryY1731R2PFrames"), ("CM-SA-MIB", "esaProbeHistoryAvgAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryAvgAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMinAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqAbsR2PJitter"), ("CM-SA-MIB", "esaProbeDistStatsConfigIndex"), ("CM-SA-MIB", "esaProbeDistStatsConfigType"), ("CM-SA-MIB", "esaProbeDistStatsConfigMinVal"), ("CM-SA-MIB", "esaProbeDistStatsConfigMaxVal"), ("CM-SA-MIB", "esaProbeDistStatsConfigNumBins"), ("CM-SA-MIB", "esaProbeDistStatsDestinationIndex"), ("CM-SA-MIB", "esaProbeDistStatsCOSIndex"), ("CM-SA-MIB", "esaProbeDistStatsCOS"), ("CM-SA-MIB", "esaProbeDistStatsNumBins"), ("CM-SA-MIB", "esaProbeDistStatsLTMin"), ("CM-SA-MIB", "esaProbeDistStatsGTMax"), ("CM-SA-MIB", "esaProbeDistStatsBinIndex"), ("CM-SA-MIB", "esaProbeDistStatsBinLower"), ("CM-SA-MIB", "esaProbeDistStatsBinUpper"), ("CM-SA-MIB", "esaProbeDistStatsBinNumSamples"), ("CM-SA-MIB", "esaProbeDistHistoryDestinationIndex"), ("CM-SA-MIB", "esaProbeDistHistoryCOSIndex"), ("CM-SA-MIB", "esaProbeDistHistoryCOS"), ("CM-SA-MIB", "esaProbeDistHistoryIndex"), ("CM-SA-MIB", "esaProbeDistHistoryTime"), ("CM-SA-MIB", "esaProbeDistHistoryAction"), ("CM-SA-MIB", "esaProbeDistHistoryNumBins"), ("CM-SA-MIB", "esaProbeDistHistoryLTMin"), ("CM-SA-MIB", "esaProbeDistHistoryGTMax"), ("CM-SA-MIB", "esaProbeDistHistoryBinIndex"), ("CM-SA-MIB", "esaProbeDistHistoryBinLower"), ("CM-SA-MIB", "esaProbeDistHistoryBinUpper"), ("CM-SA-MIB", "esaProbeDistHistoryBinNumSamples"), ("CM-SA-MIB", "esaProbeStatsThresholdIndex"), ("CM-SA-MIB", "esaProbeStatsThresholdVariable"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueLo"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueHi"), ("CM-SA-MIB", "esaProbeStatsThresholdMonValue"), ("CM-SA-MIB", "esaProbeCOSConfigIndex"), ("CM-SA-MIB", "esaProbeCOSConfigType"), ("CM-SA-MIB", "esaProbeCOSConfigInterval"), ("CM-SA-MIB", "esaProbeCOSConfigPktSize")], [("CM-SA-MIB", "esaProbeCOSConfigStorageType"), ("CM-SA-MIB", "esaProbeCOSConfigRowStatus"), ("CM-SA-MIB", "esaProbeCOSConfigslmInterval"), ("CM-SA-MIB", "esaProbeCOSConfigslmPktSize"), ("CM-SA-MIB", "esaProbeCOSConfigSoamPmExtAvailFlrThreshold"), ("CM-SA-MIB", "esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus"), ("CM-SA-MIB", "esaProbeCOSConfigSoamPmExtConDeltaTsForAvail"), ("CM-SA-MIB", "esaProbeDestinationIndex"), ("CM-SA-MIB", "esaProbeDestinationMepType"), ("CM-SA-MIB", "esaProbeDestinationMepMacAddr"), ("CM-SA-MIB", "esaProbeDestinationMepId"), ("CM-SA-MIB", "esaProbeDestinationStorageType"), ("CM-SA-MIB", "esaProbeDestinationRowStatus"), ("CM-SA-MIB", "f3EsaProbeCOSConfigSoamPmExtAvailFlrThreshold"), ("CM-SA-MIB", "f3EsaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus"), ("CM-SA-MIB", "f3EsaProbeCOSConfigSoamPmExtConDeltaTsForAvail"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMinP2RFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxP2RFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgP2RFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMinR2PFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxR2PFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgR2PFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtP2rSeverelyErroredDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtR2PSeverelyErroredDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtP2rAvailableTime"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtR2PAvailableTime"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtP2rUnavailableTime"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtR2PUnavailableTime"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMinAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtNumAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumOfSqAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxP2RFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgP2RFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtNumP2RFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumP2RFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumOfSqP2RFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxR2PFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgR2PFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtNumR2PFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumR2PFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumOfSqR2PFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxRTFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgRTFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtNumRTFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumRTFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumOfSqRTFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtP2rAvailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtR2pAvailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtP2rUnavailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtR2pUnavailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtElapsedTime"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMinP2RFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxP2RFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgP2RFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMinR2PFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxR2PFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgR2PFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtP2rSeverelyErroredDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtR2PSeverelyErroredDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtP2rAvailableTime"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtR2PAvailableTime"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtP2rUnavailableTime"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtR2PUnavailableTime"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMinAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtNumAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumOfSqAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxP2RFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgP2RFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtNumP2RFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumP2RFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumOfSqP2RFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxR2PFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgR2PFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtNumR2PFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumR2PFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumOfSqR2PFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxRTFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgRTFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtNumRTFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumRTFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumOfSqRTFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtP2rAvailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtR2pAvailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtP2rUnavailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtR2pUnavailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtElapsedTime")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        cmEsaGroup = cmEsaGroup.setObjects(*_cmEsaGroup_obj)
    else:
        cmEsaGroup = cmEsaGroup.setObjects(*_cmEsaGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEsaGroup = cmEsaGroup.setStatus('current')
cmServAssuranceGenNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 5)).setObjects(("CM-SA-MIB", "cmOperateLoopbackTrap"), ("CM-SA-MIB", "cmReleaseLoopbackTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmServAssuranceGenNotifGroup = cmServAssuranceGenNotifGroup.setStatus('current')
cmServAssuranceEsaNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 6)).setObjects(("CM-SA-MIB", "esaProbeThresholdCrossingAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmServAssuranceEsaNotifGroup = cmServAssuranceEsaNotifGroup.setStatus('current')
cmBertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 7)).setObjects(("CM-SA-MIB", "bertControlIndex"), ("CM-SA-MIB", "bertControlSourceEntity"), ("CM-SA-MIB", "bertControlTestMode"), ("CM-SA-MIB", "bertControlDuration"), ("CM-SA-MIB", "bertControlStream"), ("CM-SA-MIB", "bertControlAction"), ("CM-SA-MIB", "bertControlTestStatus"), ("CM-SA-MIB", "bertConfigStreamIndex"), ("CM-SA-MIB", "bertConfigStreamName"), ("CM-SA-MIB", "bertConfigStreamTxPattern"), ("CM-SA-MIB", "bertConfigStreamErrInjectEnabled"), ("CM-SA-MIB", "bertConfigStreamErrInjectRate"), ("CM-SA-MIB", "bertConfigStreamErrInjectRateMultiplier"), ("CM-SA-MIB", "bertConfigStreamUserPatternLength"), ("CM-SA-MIB", "bertConfigStreamUserPattern"), ("CM-SA-MIB", "bertTestStreamIndex"), ("CM-SA-MIB", "bertTestStreamName"), ("CM-SA-MIB", "bertTestStreamTxPattern"), ("CM-SA-MIB", "bertTestStreamErrInjectEnabled"), ("CM-SA-MIB", "bertTestStreamErrInjectRate"), ("CM-SA-MIB", "bertTestStreamErrInjectRateMultiplier"), ("CM-SA-MIB", "bertTestStreamUserPatternLength"), ("CM-SA-MIB", "bertTestStreamUserPattern"), ("CM-SA-MIB", "bertTestStreamMonStartTime"), ("CM-SA-MIB", "bertTestStreamMonEndTime"), ("CM-SA-MIB", "bertTestStreamMonElapsedTime"), ("CM-SA-MIB", "bertTestStreamMonSyncState"), ("CM-SA-MIB", "bertTestStreamMonRxPattern"), ("CM-SA-MIB", "bertTestStreamMonSyncCounts"), ("CM-SA-MIB", "bertTestStreamMonRxBitErrsSinceStart"), ("CM-SA-MIB", "bertTestStreamMonRxBitsSinceStart"), ("CM-SA-MIB", "bertTestStreamMonRxESsSinceStart"), ("CM-SA-MIB", "bertTestStreamMonRxErrRateSinceStart"), ("CM-SA-MIB", "bertTestStreamMonRxErrRateMultiplierSinceStart"), ("CM-SA-MIB", "bertTestStreamMonRxBitErrsSinceLastSync"), ("CM-SA-MIB", "bertTestStreamMonRxBitsSinceLastSync"), ("CM-SA-MIB", "bertTestStreamMonRxESsSinceLastSync"), ("CM-SA-MIB", "bertTestStreamMonRxErrRateSinceLastSync"), ("CM-SA-MIB", "bertTestStreamMonRxErrRateMultiplierSinceLastSync"), ("CM-SA-MIB", "bertTestStreamConfigChangedFlag"), ("CM-SA-MIB", "bertTestStreamMonOOSSsSinceStart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmBertGroup = cmBertGroup.setStatus('current')
mibBuilder.exportSymbols("CM-SA-MIB", EsaProbePmIntervalType=EsaProbePmIntervalType, esaProbeHistoryMaxAbsP2RJitter=esaProbeHistoryMaxAbsP2RJitter, esaProbeScheduleGroupInterval=esaProbeScheduleGroupInterval, ecpaConfigStreamPayloadType=ecpaConfigStreamPayloadType, esaProbeScheduleGroupRowStatus=esaProbeScheduleGroupRowStatus, f3EsaProbeStatsSoamPmExtElapsedTime=f3EsaProbeStatsSoamPmExtElapsedTime, esaProbeDistStatsNumBins=esaProbeDistStatsNumBins, ecpaControlTestType=ecpaControlTestType, ecpaConfigStreamUdpDstPort=ecpaConfigStreamUdpDstPort, esaProbeDistHistoryDestinationIndex=esaProbeDistHistoryDestinationIndex, esaProbeAssocSchedGroup=esaProbeAssocSchedGroup, BerTestMode=BerTestMode, ecpaTestStreamMonRxSeqGaps=ecpaTestStreamMonRxSeqGaps, f3EsaProbeStatsSoamPmExtMinP2RFlr=f3EsaProbeStatsSoamPmExtMinP2RFlr, esaReflectorAdminState=esaReflectorAdminState, esaProbeStatsEntry=esaProbeStatsEntry, esaProbeDistStatsConfigLowBoundOfBin4=esaProbeDistStatsConfigLowBoundOfBin4, bertControlTable=bertControlTable, esaProbeStatsThresholdIndex=esaProbeStatsThresholdIndex, esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus=esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus, esaProbeStatsMaxAbsP2RJitter=esaProbeStatsMaxAbsP2RJitter, esaProbeAlias=esaProbeAlias, esaProbeHistoryY1731P2RFrames=esaProbeHistoryY1731P2RFrames, bertTestStreamMonRxBitsSinceLastSync=bertTestStreamMonRxBitsSinceLastSync, esaProbeDestinationRowStatus=esaProbeDestinationRowStatus, f3EsaProbeCOSConfigSoamPmExtConDeltaTsForAvail=f3EsaProbeCOSConfigSoamPmExtConDeltaTsForAvail, cmServAssuranceCompliances=cmServAssuranceCompliances, esaProbeStatsSumOfSqNegR2PJitter=esaProbeStatsSumOfSqNegR2PJitter, bertConfigStreamIndex=bertConfigStreamIndex, cmReleaseLoopbackTrap=cmReleaseLoopbackTrap, ecpaTestStreamInnerVlanId=ecpaTestStreamInnerVlanId, esaProbeHistoryMaxOnewayP2RDelay=esaProbeHistoryMaxOnewayP2RDelay, ecpaTestStreamInnerVlanEnabled=ecpaTestStreamInnerVlanEnabled, esaProbeInterPktGap=esaProbeInterPktGap, esaProbeStatsR2PErredPkts=esaProbeStatsR2PErredPkts, esaProbeDistHistoryBinEntry=esaProbeDistHistoryBinEntry, esaProbeHistoryAvgOnewayP2RDelay=esaProbeHistoryAvgOnewayP2RDelay, esaProbeHistoryR2PLostPkts=esaProbeHistoryR2PLostPkts, f3EsaProbeHistorySoamPmExtMaxR2PFDR=f3EsaProbeHistorySoamPmExtMaxR2PFDR, bertControlTestStatus=bertControlTestStatus, ecpaTestStreamMonRxMaxDelay=ecpaTestStreamMonRxMaxDelay, f3EsaProbeHistorySoamPmExtR2pUnavailableDeltaTs=f3EsaProbeHistorySoamPmExtR2pUnavailableDeltaTs, ecpaConfigStreamInnerVlanId=ecpaConfigStreamInnerVlanId, esaProbeInner2VlanId=esaProbeInner2VlanId, esaReflectorMacAddress=esaReflectorMacAddress, esaProbeStatsLostPkts=esaProbeStatsLostPkts, ecpaControlEntry=ecpaControlEntry, esaProbeScheduleGroupTable=esaProbeScheduleGroupTable, ecpaConfigStreamRate=ecpaConfigStreamRate, ecpaTestStreamMonRx1stFrameSize=ecpaTestStreamMonRx1stFrameSize, esaProbeStorageType=esaProbeStorageType, esaProbeHistorySumAbsP2RJitter=esaProbeHistorySumAbsP2RJitter, esaProbeDistStatsEntry=esaProbeDistStatsEntry, esaReflectorIpPriority=esaReflectorIpPriority, esaReflectorAction=esaReflectorAction, esaProbeDistHistoryTime=esaProbeDistHistoryTime, f3EsaProbeStatsSoamPmExtSumOfSqP2RFDR=f3EsaProbeStatsSoamPmExtSumOfSqP2RFDR, esaProbeDistHistoryEntry=esaProbeDistHistoryEntry, esaProbeDestMepType=esaProbeDestMepType, esaProbeStatsY1731R2PFrames=esaProbeStatsY1731R2PFrames, bertControlTestMode=bertControlTestMode, f3EsaProbeHistorySoamPmExtAvgAbsRTJitter=f3EsaProbeHistorySoamPmExtAvgAbsRTJitter, ecpaConfigStreamRateHi=ecpaConfigStreamRateHi, esaProbeCOSConfigSoamPmExtConDeltaTsForAvail=esaProbeCOSConfigSoamPmExtConDeltaTsForAvail, esaProbeDistStatsConfigLowBoundOfBin3=esaProbeDistStatsConfigLowBoundOfBin3, esaProbeStatsSumOfSqAbsP2RJitter=esaProbeStatsSumOfSqAbsP2RJitter, esaProbeDistHistoryAction=esaProbeDistHistoryAction, bertTestStreamMonRxPattern=bertTestStreamMonRxPattern, esaProbeCOSConfigslmPktSize=esaProbeCOSConfigslmPktSize, ecpaTestStreamUdpControl=ecpaTestStreamUdpControl, f3EsaProbeStatsSoamPmExtSumOfSqRTFDR=f3EsaProbeStatsSoamPmExtSumOfSqRTFDR, esaProbeDestMepMacAddr=esaProbeDestMepMacAddr, esaProbeSrcMep=esaProbeSrcMep, ecpaTestStreamMonStartTime=ecpaTestStreamMonStartTime, bertTestStreamMonRxBitErrsSinceLastSync=bertTestStreamMonRxBitErrsSinceLastSync, f3EsaProbeStatsSoamPmExtNumP2RFDR=f3EsaProbeStatsSoamPmExtNumP2RFDR, cmEsaGroup=cmEsaGroup, esaProbeHistoryValid=esaProbeHistoryValid, f3EsaProbeHistorySoamPmExtAvgR2PFDR=f3EsaProbeHistorySoamPmExtAvgR2PFDR, esaProbeStatsMinPosR2PJitter=esaProbeStatsMinPosR2PJitter, esaProbeInnerVlanTagEnabled=esaProbeInnerVlanTagEnabled, esaProbeStatsNumAbsP2RJitter=esaProbeStatsNumAbsP2RJitter, esaProbeDistStatsBinNumSamples=esaProbeDistStatsBinNumSamples, ecpaTestStreamFrameSize=ecpaTestStreamFrameSize, esaProbeMultiDestinationEntry=esaProbeMultiDestinationEntry, ecpaTestStreamDestIpV4Address=ecpaTestStreamDestIpV4Address, esaProbeStatsThresholdAbsValueHi=esaProbeStatsThresholdAbsValueHi, esaProbeHistoryY1731P2RNegLossOccurrences=esaProbeHistoryY1731P2RNegLossOccurrences, esaProbeHistoryNumAbsR2PJitter=esaProbeHistoryNumAbsR2PJitter, f3EsaProbeStatsSoamPmExtMaxP2RFDR=f3EsaProbeStatsSoamPmExtMaxP2RFDR, ecpaConfigStreamUdpSrcPort=ecpaConfigStreamUdpSrcPort, bertControlEntry=bertControlEntry, esaProbeScheduleGroupDescr=esaProbeScheduleGroupDescr, esaProbeStatsSumOfSqRoundTripDelay=esaProbeStatsSumOfSqRoundTripDelay, ecpaControlTable=ecpaControlTable, esaProbeDistStatsTable=esaProbeDistStatsTable, ecpaTestStreamPrioVal=ecpaTestStreamPrioVal, ecpaTestStreamIpV4Address=ecpaTestStreamIpV4Address, esaProbeDestinationStorageType=esaProbeDestinationStorageType, f3EsaProbeHistorySoamPmExtElapsedTime=f3EsaProbeHistorySoamPmExtElapsedTime, esaProbeDistHistoryBinUpper=esaProbeDistHistoryBinUpper, ecpaTestStreamUdpDstPort=ecpaTestStreamUdpDstPort, esaProbeHistoryMinPosP2RJitter=esaProbeHistoryMinPosP2RJitter, esaProbeHistoryAvgAbsR2PJitter=esaProbeHistoryAvgAbsR2PJitter, bertTestStreamMonRxErrRateSinceLastSync=bertTestStreamMonRxErrRateSinceLastSync, EsaProbeSLAMonitorType=EsaProbeSLAMonitorType, EsaProbeDistStatsType=EsaProbeDistStatsType, ecpaTestStreamSourcePort=ecpaTestStreamSourcePort, esaProbeStatsIndex=esaProbeStatsIndex, ecpaConfigStreamOuterVlanPrio=ecpaConfigStreamOuterVlanPrio, f3EsaProbeHistorySoamPmExtMinP2RFlr=f3EsaProbeHistorySoamPmExtMinP2RFlr, ecpaConfigStreamInnerVlanEnabled=ecpaConfigStreamInnerVlanEnabled, esaProbeHistoryAvgRoundTripDelay=esaProbeHistoryAvgRoundTripDelay, esaReflectorSourcePort=esaReflectorSourcePort, esaProbeSourcePort=esaProbeSourcePort, esaProbeHistoryNumPosR2PJitter=esaProbeHistoryNumPosR2PJitter, ecpaTestStreamEntry=ecpaTestStreamEntry, esaProbeDistStatsBinUpper=esaProbeDistStatsBinUpper, esaProbeStatsThresholdMonValue=esaProbeStatsThresholdMonValue, f3EsaProbeHistorySoamPmExtP2rUnavailableDeltaTs=f3EsaProbeHistorySoamPmExtP2rUnavailableDeltaTs, f3EsaProbeHistorySoamPmExtMaxAbsRTJitter=f3EsaProbeHistorySoamPmExtMaxAbsRTJitter, ecpaConfigStreamName=ecpaConfigStreamName, esaReflectorEntry=esaReflectorEntry, ecpaControlInjectorDirection=ecpaControlInjectorDirection, ecpaTestStreamInnerVlan2EtherType=ecpaTestStreamInnerVlan2EtherType, esaProbeHistoryOutOfSeqErrs=esaProbeHistoryOutOfSeqErrs, esaProbeSrcSubnetMask=esaProbeSrcSubnetMask, esaProbeDistHistoryBins=esaProbeDistHistoryBins, esaReflectorName=esaReflectorName, esaProbeInner2VlanTagEtherType=esaProbeInner2VlanTagEtherType, esaProbeHistorySumOnewayP2RDelay=esaProbeHistorySumOnewayP2RDelay, ecpaTestStreamConfigChanged=ecpaTestStreamConfigChanged, cmBertGroup=cmBertGroup, EcpaTestStatus=EcpaTestStatus, bertTestStreamMonRxBitsSinceStart=bertTestStreamMonRxBitsSinceStart, esaProbeStatsCOS=esaProbeStatsCOS, esaReflectorTable=esaReflectorTable, esaProbeStatsR2PLostPkts=esaProbeStatsR2PLostPkts, ecpaControlIndex=ecpaControlIndex, cmServAssuranceObjects=cmServAssuranceObjects, f3EsaProbeStatsSoamPmExtR2pUnavailableDeltaTs=f3EsaProbeStatsSoamPmExtR2pUnavailableDeltaTs, ecpaConfigStreamPrioVal=ecpaConfigStreamPrioVal, esaProbeHistoryAvgOnewayR2PDelay=esaProbeHistoryAvgOnewayR2PDelay, esaProbeStatsOutOfSeqErrs=esaProbeStatsOutOfSeqErrs, esaProbeStatsSumPosR2PJitter=esaProbeStatsSumPosR2PJitter, ecpaConfigStreamDestIpV6Address=ecpaConfigStreamDestIpV6Address, esaProbeDistStatsConfigMaxVal=esaProbeDistStatsConfigMaxVal, cmServAssuranceGroups=cmServAssuranceGroups, esaProbeMacAddress=esaProbeMacAddress, esaProbeInnerVlanPrio=esaProbeInnerVlanPrio, esaProbeRowStatus=esaProbeRowStatus, cmServiceAssuranceMIB=cmServiceAssuranceMIB, bertTestStreamIndex=bertTestStreamIndex, ecpaTestStreamOuterVlanId=ecpaTestStreamOuterVlanId, esaProbeHistoryMaxNegR2PJitter=esaProbeHistoryMaxNegR2PJitter, ecpaTestStreamMonEndTime=ecpaTestStreamMonEndTime, esaProbeStatsSeqGaps=esaProbeStatsSeqGaps, esaProbeSOAMInterval=esaProbeSOAMInterval, esaProbeVlanPrio=esaProbeVlanPrio, esaProbeDistStatsConfigLowBoundOfBin5=esaProbeDistStatsConfigLowBoundOfBin5, f3EsaProbeHistorySoamPmExtTable=f3EsaProbeHistorySoamPmExtTable, esaProbeHistoryR2PSyncErrs=esaProbeHistoryR2PSyncErrs, esaProbeHistoryY1731RxDmSamples=esaProbeHistoryY1731RxDmSamples, esaProbeStatsMinOnewayR2PDelay=esaProbeStatsMinOnewayR2PDelay, f3EsaProbeStatsSoamPmExtMinR2PFlr=f3EsaProbeStatsSoamPmExtMinR2PFlr, bertTestStreamUserPattern=bertTestStreamUserPattern, esaProbeTable=esaProbeTable, esaProbeProtocol=esaProbeProtocol, f3EsaProbeHistorySoamPmExtNumAbsRTJitter=f3EsaProbeHistorySoamPmExtNumAbsRTJitter, bertTestStreamMonRxESsSinceStart=bertTestStreamMonRxESsSinceStart, esaProbeHistoryP2RPkts=esaProbeHistoryP2RPkts, ecpaConfigStreamInnerVlanPrio=ecpaConfigStreamInnerVlanPrio, ecpaConfigStreamIpVersion=ecpaConfigStreamIpVersion, f3EsaProbeHistorySoamPmExtSumOfSqRTFDR=f3EsaProbeHistorySoamPmExtSumOfSqRTFDR, bertTestStreamMonStartTime=bertTestStreamMonStartTime, ecpaConfigStreamPrioMapMode=ecpaConfigStreamPrioMapMode, esaProbeY1731DmmInterval=esaProbeY1731DmmInterval, esaProbeCreationTime=esaProbeCreationTime, esaProbePktsPerSample=esaProbePktsPerSample, esaProbeDistStatsConfigLowBoundOfBin6=esaProbeDistStatsConfigLowBoundOfBin6, esaProbeDestinationIndex=esaProbeDestinationIndex, ecpaControlAction=ecpaControlAction, f3EsaProbeHistorySoamPmExtP2rSeverelyErroredDeltaTs=f3EsaProbeHistorySoamPmExtP2rSeverelyErroredDeltaTs, f3EsaProbeStatsSoamPmExtR2PSeverelyErroredDeltaTs=f3EsaProbeStatsSoamPmExtR2PSeverelyErroredDeltaTs, esaProbeStatsP2RSyncErrs=esaProbeStatsP2RSyncErrs, ecpaControlMonitorPortType=ecpaControlMonitorPortType, esaProbeCOSConfigInterval=esaProbeCOSConfigInterval, f3EsaProbeStatsSoamPmExtTable=f3EsaProbeStatsSoamPmExtTable, esaProbeIpPriority=esaProbeIpPriority, esaProbeHistorySumOfSqAbsR2PJitter=esaProbeHistorySumOfSqAbsR2PJitter, f3EsaProbeHistorySoamPmExtAvgRTFDR=f3EsaProbeHistorySoamPmExtAvgRTFDR, esaProbeSOAMPktSize=esaProbeSOAMPktSize, esaProbeDistHistoryInterval=esaProbeDistHistoryInterval, esaProbeSLAMonitorType=esaProbeSLAMonitorType, f3EsaProbeStatsSoamPmExtR2PUnavailableTime=f3EsaProbeStatsSoamPmExtR2PUnavailableTime, esaProbeDistStatsBinLower=esaProbeDistStatsBinLower, esaProbeDistStatsCOS=esaProbeDistStatsCOS, esaProbeDistStatsConfigLowBoundOfBin1=esaProbeDistStatsConfigLowBoundOfBin1, esaReflectorCreationTime=esaReflectorCreationTime, f3EsaProbeHistorySoamPmExtP2rUnavailableTime=f3EsaProbeHistorySoamPmExtP2rUnavailableTime, esaProbeHistoryMinAbsP2RJitter=esaProbeHistoryMinAbsP2RJitter, EcpaControlAction=EcpaControlAction, esaProbeHistoryTime=esaProbeHistoryTime, esaProbeStatsY1731R2PNegLossOccurrences=esaProbeStatsY1731R2PNegLossOccurrences, esaProbeDestIpAddress=esaProbeDestIpAddress, esaProbeScheduleGroupType=esaProbeScheduleGroupType, esaProbeAdminState=esaProbeAdminState, ecpaConfigStreamDestinationMAC=ecpaConfigStreamDestinationMAC, esaProbeDistHistoryCOSIndex=esaProbeDistHistoryCOSIndex, bertTestStreamConfigChangedFlag=bertTestStreamConfigChangedFlag, BertPattern=BertPattern, esaProbeSLMMulticastMACEnabled=esaProbeSLMMulticastMACEnabled, ecpaControlEcpaType=ecpaControlEcpaType, esaReflectorStorageType=esaReflectorStorageType, esaProbeStatsMinNegP2RJitter=esaProbeStatsMinNegP2RJitter, bertConfigStreamErrInjectRateMultiplier=bertConfigStreamErrInjectRateMultiplier, f3EsaProbeHistorySoamPmExtP2rAvailableTime=f3EsaProbeHistorySoamPmExtP2rAvailableTime, EcpaMonitorPortType=EcpaMonitorPortType, esaProbeStatsY1731RxDmSamples=esaProbeStatsY1731RxDmSamples, f3EsaProbeStatsSoamPmExtAvgP2RFDR=f3EsaProbeStatsSoamPmExtAvgP2RFDR, f3EsaProbeHistorySoamPmExtSumOfSqR2PFDR=f3EsaProbeHistorySoamPmExtSumOfSqR2PFDR, ecpaConfigStreamOuterVlanEnabled=ecpaConfigStreamOuterVlanEnabled, esaProbeStatsThresholdEntry=esaProbeStatsThresholdEntry, bertConfigStreamEntry=bertConfigStreamEntry, esaProbeStatsAvgAbsP2RJitter=esaProbeStatsAvgAbsP2RJitter, esaProbeStatsAvgOnewayP2RDelay=esaProbeStatsAvgOnewayP2RDelay, bertConfigStreamUserPattern=bertConfigStreamUserPattern, ecpaConfigStreamInnerVlan2Id=ecpaConfigStreamInnerVlan2Id, f3EsaProbeStatsSoamPmExtR2PAvailableTime=f3EsaProbeStatsSoamPmExtR2PAvailableTime, esaProbeThresholdCrossingAlert=esaProbeThresholdCrossingAlert, esaProbeHistoryInterval=esaProbeHistoryInterval, esaProbeHistorySumOfSqAbsP2RJitter=esaProbeHistorySumOfSqAbsP2RJitter, esaProbeHistorySumOnewayR2PDelay=esaProbeHistorySumOnewayR2PDelay, esaReflectorSuspended=esaReflectorSuspended, esaProbeStatsY1731P2RFrames=esaProbeStatsY1731P2RFrames, ecpaControlStream1=ecpaControlStream1, esaProbeDistStatsBinEntry=esaProbeDistStatsBinEntry, esaProbeScheduleGroupStatus=esaProbeScheduleGroupStatus, esaProbeOperationalState=esaProbeOperationalState, f3EsaProbeCOSConfigSoamPmExtTable=f3EsaProbeCOSConfigSoamPmExtTable, f3EsaProbeHistorySoamPmExtR2PUnavailableTime=f3EsaProbeHistorySoamPmExtR2PUnavailableTime, ecpaConfigStreamSignature=ecpaConfigStreamSignature, esaProbeStatsMaxPosR2PJitter=esaProbeStatsMaxPosR2PJitter, f3EsaProbeHistorySoamPmExtR2PAvailableTime=f3EsaProbeHistorySoamPmExtR2PAvailableTime, esaProbeHistorySumAbsR2PJitter=esaProbeHistorySumAbsR2PJitter, esaProbeHistorySumOfSqOnewayP2RDelay=esaProbeHistorySumOfSqOnewayP2RDelay, esaProbeScheduleGroupIndex=esaProbeScheduleGroupIndex, esaProbeStatsAvgOnewayR2PDelay=esaProbeStatsAvgOnewayR2PDelay, esaProbeHistoryMinNegR2PJitter=esaProbeHistoryMinNegR2PJitter, esaProbeSrcIpAddress=esaProbeSrcIpAddress, f3EsaProbeHistorySoamPmExtSumR2PFDR=f3EsaProbeHistorySoamPmExtSumR2PFDR, esaProbeHistorySumNegR2PJitter=esaProbeHistorySumNegR2PJitter, esaProbeHistoryNumPosP2RJitter=esaProbeHistoryNumPosP2RJitter, ecpaConfigStreamInnerVlan2Enabled=ecpaConfigStreamInnerVlan2Enabled)
mibBuilder.exportSymbols("CM-SA-MIB", f3EsaProbeStatsSoamPmExtSumRTFDR=f3EsaProbeStatsSoamPmExtSumRTFDR, esaProbeStatsNumNegP2RJitter=esaProbeStatsNumNegP2RJitter, f3EsaProbeStatsSoamPmExtMaxAbsRTJitter=f3EsaProbeStatsSoamPmExtMaxAbsRTJitter, ecpaConfigStreamIndex=ecpaConfigStreamIndex, EsaReflectorDirection=EsaReflectorDirection, esaProbeStatsNumAbsR2PJitter=esaProbeStatsNumAbsR2PJitter, esaProbeStatsMaxRoundTripDelay=esaProbeStatsMaxRoundTripDelay, esaProbeCOSConfigStorageType=esaProbeCOSConfigStorageType, esaProbeStatsCOSIndex=esaProbeStatsCOSIndex, esaProbeHistoryMaxPosP2RJitter=esaProbeHistoryMaxPosP2RJitter, bertTestStreamMonElapsedTime=bertTestStreamMonElapsedTime, esaProbeHistoryEntry=esaProbeHistoryEntry, esaProbeHistoryAvgAbsP2RJitter=esaProbeHistoryAvgAbsP2RJitter, ecpaTestStreamDestinationMAC=ecpaTestStreamDestinationMAC, esaProbeHistoryMinOnewayR2PDelay=esaProbeHistoryMinOnewayR2PDelay, esaReflectorIpPrioMapMode=esaReflectorIpPrioMapMode, esaProbeHistoryDestinationIndex=esaProbeHistoryDestinationIndex, esaProbeMultiDestinationTable=esaProbeMultiDestinationTable, esaProbeHistorySumPosP2RJitter=esaProbeHistorySumPosP2RJitter, esaProbeInnerVlanId=esaProbeInnerVlanId, esaProbeHistoryY1731R2PFrames=esaProbeHistoryY1731R2PFrames, EsaProbeDirection=EsaProbeDirection, f3EsaProbeStatsSoamPmExtP2rAvailableDeltaTs=f3EsaProbeStatsSoamPmExtP2rAvailableDeltaTs, esaProbeHistoryAction=esaProbeHistoryAction, EcpaType=EcpaType, esaProbeCOSConfigTable=esaProbeCOSConfigTable, f3EsaProbeCOSConfigSoamPmExtAvailFlrThreshold=f3EsaProbeCOSConfigSoamPmExtAvailFlrThreshold, ecpaControlNumFrames=ecpaControlNumFrames, esaProbeStatsY1731P2RNegLossOccurrences=esaProbeStatsY1731P2RNegLossOccurrences, esaProbeStatsSumOfSqNegP2RJitter=esaProbeStatsSumOfSqNegP2RJitter, ecpaTestStreamMonRx1stFrame2Octets=ecpaTestStreamMonRx1stFrame2Octets, esaProbeStatsSumRoundTripDelay=esaProbeStatsSumRoundTripDelay, esaProbeDistHistoryBinIndex=esaProbeDistHistoryBinIndex, f3EsaProbeHistorySoamPmExtMaxR2PFlr=f3EsaProbeHistorySoamPmExtMaxR2PFlr, esaProbeY1731LmmInterval=esaProbeY1731LmmInterval, ecpaControlDuration=ecpaControlDuration, esaProbeDistHistoryGTMax=esaProbeDistHistoryGTMax, ecpaTestStreamMonRx1stFrame5Octets=ecpaTestStreamMonRx1stFrame5Octets, esaProbeEntry=esaProbeEntry, ecpaTestStreamMonTxFrames=ecpaTestStreamMonTxFrames, esaProbeStatsP2RLostPkts=esaProbeStatsP2RLostPkts, bertConfigStreamUserPatternLength=bertConfigStreamUserPatternLength, bertTestStreamMonRxErrRateSinceStart=bertTestStreamMonRxErrRateSinceStart, ecpaConfigStreamInnerVlanEtherType=ecpaConfigStreamInnerVlanEtherType, bertControlSourceEntity=bertControlSourceEntity, EsaProbeHistoryIntervalType=EsaProbeHistoryIntervalType, cmServAssuranceEsaNotifGroup=cmServAssuranceEsaNotifGroup, esaProbeStatsR2PPkts=esaProbeStatsR2PPkts, esaProbeStatsSumAbsR2PJitter=esaProbeStatsSumAbsR2PJitter, ecpaConfigStreamIpV6Address=ecpaConfigStreamIpV6Address, cmServAssuranceCompliance=cmServAssuranceCompliance, ecpaControlSourcePort=ecpaControlSourcePort, ecpaTestStreamMonRxAvgDelay=ecpaTestStreamMonRxAvgDelay, ecpaTestStreamMonRxBitRate=ecpaTestStreamMonRxBitRate, esaProbeHistoryY1731RxLmSamples=esaProbeHistoryY1731RxLmSamples, esaProbeCOSConfigslmInterval=esaProbeCOSConfigslmInterval, esaProbeStatsMaxOnewayP2RDelay=esaProbeStatsMaxOnewayP2RDelay, bertConfigStreamTxPattern=bertConfigStreamTxPattern, esaProbeStatsP2RErredPkts=esaProbeStatsP2RErredPkts, ecpaConfigStreamOuterVlanId=ecpaConfigStreamOuterVlanId, f3EsaProbeStatsSoamPmExtAvgP2RFlr=f3EsaProbeStatsSoamPmExtAvgP2RFlr, ecpaTestStreamTable=ecpaTestStreamTable, BertSyncState=BertSyncState, f3EsaProbeStatsSoamPmExtMaxR2PFlr=f3EsaProbeStatsSoamPmExtMaxR2PFlr, f3EsaProbeHistorySoamPmExtMinAbsRTJitter=f3EsaProbeHistorySoamPmExtMinAbsRTJitter, BertControlAction=BertControlAction, esaProbeStatsSumNegR2PJitter=esaProbeStatsSumNegR2PJitter, ecpaConfigStreamIpV4Address=ecpaConfigStreamIpV4Address, esaProbeDistStatsBinTable=esaProbeDistStatsBinTable, esaProbeDistStatsConfigLowBoundOfBin8=esaProbeDistStatsConfigLowBoundOfBin8, esaProbeVlanTagEnabled=esaProbeVlanTagEnabled, esaProbeStatsAvgAbsR2PJitter=esaProbeStatsAvgAbsR2PJitter, esaProbeStatsY1731RxLmSamples=esaProbeStatsY1731RxLmSamples, esaProbeStatsP2RPkts=esaProbeStatsP2RPkts, esaProbeDistStatsLTMin=esaProbeDistStatsLTMin, esaProbePktSize=esaProbePktSize, esaProbeHistorySeqGaps=esaProbeHistorySeqGaps, esaProbeHistoryMaxPosR2PJitter=esaProbeHistoryMaxPosR2PJitter, esaProbeY1731DmmPktSize=esaProbeY1731DmmPktSize, f3EsaProbeHistorySoamPmExtAvgP2RFDR=f3EsaProbeHistorySoamPmExtAvgP2RFDR, ecpaTestStreamName=ecpaTestStreamName, esaReflectorIndex=esaReflectorIndex, esaProbeStatsMaxPosP2RJitter=esaProbeStatsMaxPosP2RJitter, EsaProbePktIntervalType=EsaProbePktIntervalType, f3EsaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus=f3EsaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus, EcpaPayloadType=EcpaPayloadType, cmServAssuranceObjectGroup=cmServAssuranceObjectGroup, esaProbeStatsMaxOnewayR2PDelay=esaProbeStatsMaxOnewayR2PDelay, bertControlIndex=bertControlIndex, f3EsaProbeHistorySoamPmExtAvgP2RFlr=f3EsaProbeHistorySoamPmExtAvgP2RFlr, f3EsaProbeStatsSoamPmExtSumR2PFDR=f3EsaProbeStatsSoamPmExtSumR2PFDR, esaProbeCOSConfigPktSize=esaProbeCOSConfigPktSize, esaProbeStatsSumOnewayP2RDelay=esaProbeStatsSumOnewayP2RDelay, cmEcpaGroup=cmEcpaGroup, ecpaTestStreamMonRx1stFrame6Octets=ecpaTestStreamMonRx1stFrame6Octets, ecpaTestStreamInnerVlan2Id=ecpaTestStreamInnerVlan2Id, esaReflectorSubnetMask=esaReflectorSubnetMask, esaProbeDistHistoryCOS=esaProbeDistHistoryCOS, f3EsaProbeStatsSoamPmExtMaxRTFDR=f3EsaProbeStatsSoamPmExtMaxRTFDR, bertTestStreamMonSyncState=bertTestStreamMonSyncState, f3EsaProbeStatsSoamPmExtAvgR2PFDR=f3EsaProbeStatsSoamPmExtAvgR2PFDR, esaProbeStatsThresholdTable=esaProbeStatsThresholdTable, esaProbeDestinationMepType=esaProbeDestinationMepType, esaProbeDistStatsConfigEntry=esaProbeDistStatsConfigEntry, bertTestStreamMonOOSSsSinceStart=bertTestStreamMonOOSSsSinceStart, esaProbeDistStatsConfigNumBins=esaProbeDistStatsConfigNumBins, ecpaConfigStreamOuterVlanEtherType=ecpaConfigStreamOuterVlanEtherType, esaReflectorRowStatus=esaReflectorRowStatus, f3EsaProbeStatsSoamPmExtAvgRTFDR=f3EsaProbeStatsSoamPmExtAvgRTFDR, esaProbeScheduleGroupStartTime=esaProbeScheduleGroupStartTime, esaProbeHistoryR2PPkts=esaProbeHistoryR2PPkts, ecpaConfigStreamFrameSize=ecpaConfigStreamFrameSize, f3EsaProbeStatsSoamPmExtR2pAvailableDeltaTs=f3EsaProbeStatsSoamPmExtR2pAvailableDeltaTs, f3EsaProbeStatsSoamPmExtSumOfSqAbsRTJitter=f3EsaProbeStatsSoamPmExtSumOfSqAbsRTJitter, esaProbeStatsSumOfSqPosP2RJitter=esaProbeStatsSumOfSqPosP2RJitter, esaProbeStatsMinAbsP2RJitter=esaProbeStatsMinAbsP2RJitter, esaProbeHistoryP2RLostPkts=esaProbeHistoryP2RLostPkts, f3EsaProbeHistorySoamPmExtP2rAvailableDeltaTs=f3EsaProbeHistorySoamPmExtP2rAvailableDeltaTs, esaProbeStatsNumPosR2PJitter=esaProbeStatsNumPosR2PJitter, ecpaControlRowStatus=ecpaControlRowStatus, esaProbeVlanTagEtherType=esaProbeVlanTagEtherType, ecpaTestStreamUdpSrcPort=ecpaTestStreamUdpSrcPort, esaProbeStatsMaxNegP2RJitter=esaProbeStatsMaxNegP2RJitter, esaProbeHistoryCOSIndex=esaProbeHistoryCOSIndex, cmServAssuranceNotifGroup=cmServAssuranceNotifGroup, ecpaConfigStreamUsePortSourceMAC=ecpaConfigStreamUsePortSourceMAC, esaProbeStatsMinOnewayP2RDelay=esaProbeStatsMinOnewayP2RDelay, f3EsaProbeStatsSoamPmExtP2rAvailableTime=f3EsaProbeStatsSoamPmExtP2rAvailableTime, esaProbeDestMepId=esaProbeDestMepId, bertTestStreamMonRxErrRateMultiplierSinceLastSync=bertTestStreamMonRxErrRateMultiplierSinceLastSync, esaProbeHistoryMinOnewayP2RDelay=esaProbeHistoryMinOnewayP2RDelay, esaProbeDistHistoryIndex=esaProbeDistHistoryIndex, esaProbeHistorySumOfSqPosP2RJitter=esaProbeHistorySumOfSqPosP2RJitter, esaProbeHistoryR2PErredPkts=esaProbeHistoryR2PErredPkts, BertUserPatternLength=BertUserPatternLength, bertControlDuration=bertControlDuration, bertTestStreamEntry=bertTestStreamEntry, bertConfigStreamTable=bertConfigStreamTable, ecpaTestStreamMonRxMinDelay=ecpaTestStreamMonRxMinDelay, ecpaConfigStreamUdpControl=ecpaConfigStreamUdpControl, esaProbeDistStatsConfigLowBoundOfBin2=esaProbeDistStatsConfigLowBoundOfBin2, ecpaTestStreamMonRxFrames=ecpaTestStreamMonRxFrames, EsaAction=EsaAction, ecpaTestStreamSourceMAC=ecpaTestStreamSourceMAC, esaProbeDistHistoryLTMin=esaProbeDistHistoryLTMin, f3EsaProbeStatsSoamPmExtEntry=f3EsaProbeStatsSoamPmExtEntry, bertControlAction=bertControlAction, f3EsaProbeCOSConfigSoamPmExtEntry=f3EsaProbeCOSConfigSoamPmExtEntry, esaProbeHistoryNumAbsP2RJitter=esaProbeHistoryNumAbsP2RJitter, bertTestStreamTable=bertTestStreamTable, esaProbeHistorySumOfSqRoundTripDelay=esaProbeHistorySumOfSqRoundTripDelay, esaProbeHistoryMaxAbsR2PJitter=esaProbeHistoryMaxAbsR2PJitter, cmServAssuranceNotifications=cmServAssuranceNotifications, f3EsaProbeHistorySoamPmExtSumOfSqP2RFDR=f3EsaProbeHistorySoamPmExtSumOfSqP2RFDR, esaProbeResponseTimeout=esaProbeResponseTimeout, ecpaTestStreamOuterVlanEtherType=ecpaTestStreamOuterVlanEtherType, ecpaTestStreamOuterVlanPrio=ecpaTestStreamOuterVlanPrio, ecpaTestStreamMonRxOutOfSeqErrs=ecpaTestStreamMonRxOutOfSeqErrs, f3EsaProbeHistorySoamPmExtNumRTFDR=f3EsaProbeHistorySoamPmExtNumRTFDR, EsaProbeProtocol=EsaProbeProtocol, ecpaTestStreamMonRxPercentSuccess=ecpaTestStreamMonRxPercentSuccess, ecpaTestStreamMonElapsedTime=ecpaTestStreamMonElapsedTime, ecpaTestStreamIndex=ecpaTestStreamIndex, esaProbeStatsMaxAbsR2PJitter=esaProbeStatsMaxAbsR2PJitter, esaProbeHistoryNumNegP2RJitter=esaProbeHistoryNumNegP2RJitter, esaProbeDistStatsConfigLowBoundOfBin7=esaProbeDistStatsConfigLowBoundOfBin7, bertTestStreamUserPatternLength=bertTestStreamUserPatternLength, ecpaTestStreamPayloadType=ecpaTestStreamPayloadType, esaProbeInnerVlanTagEtherType=esaProbeInnerVlanTagEtherType, ecpaTestStreamRate=ecpaTestStreamRate, ecpaControlStream3=ecpaControlStream3, esaProbeDistStatsGTMax=esaProbeDistStatsGTMax, bertTestStreamErrInjectEnabled=bertTestStreamErrInjectEnabled, esaProbeHistorySumPosR2PJitter=esaProbeHistorySumPosR2PJitter, esaProbeName=esaProbeName, esaProbeHistoryTable=esaProbeHistoryTable, esaReflectorIpAddress=esaReflectorIpAddress, esaProbeCOSConfigEntry=esaProbeCOSConfigEntry, ecpaTestStreamOuterVlanEnabled=ecpaTestStreamOuterVlanEnabled, ecpaControlStorageType=ecpaControlStorageType, ecpaTestStreamPrioMapMode=ecpaTestStreamPrioMapMode, ecpaTestStreamMonRx1stFrame3Octets=ecpaTestStreamMonRx1stFrame3Octets, f3EsaProbeStatsSoamPmExtNumAbsRTJitter=f3EsaProbeStatsSoamPmExtNumAbsRTJitter, esaProbeHistoryMinNegP2RJitter=esaProbeHistoryMinNegP2RJitter, bertTestStreamMonRxErrRateMultiplierSinceStart=bertTestStreamMonRxErrRateMultiplierSinceStart, f3EsaProbeStatsSoamPmExtMaxR2PFDR=f3EsaProbeStatsSoamPmExtMaxR2PFDR, esaProbeStatsNumNegR2PJitter=esaProbeStatsNumNegR2PJitter, esaProbeHistoryCOS=esaProbeHistoryCOS, esaProbeScheduleGroupStorageType=esaProbeScheduleGroupStorageType, esaProbeHistoryMaxRoundTripDelay=esaProbeHistoryMaxRoundTripDelay, ecpaTestStreamIpV6Address=ecpaTestStreamIpV6Address, esaReflectorDirection=esaReflectorDirection, esaProbeStatsDestinationIndex=esaProbeStatsDestinationIndex, esaProbeStatsMinPosP2RJitter=esaProbeStatsMinPosP2RJitter, esaProbeStatsThresholdVariable=esaProbeStatsThresholdVariable, esaProbeScheduleGroupProbeList=esaProbeScheduleGroupProbeList, esaProbeCOSType=esaProbeCOSType, f3EsaProbeHistorySoamPmExtAvgR2PFlr=f3EsaProbeHistorySoamPmExtAvgR2PFlr, esaReflectorOperationalState=esaReflectorOperationalState, esaProbeStatsMaxNegR2PJitter=esaProbeStatsMaxNegR2PJitter, f3EsaProbeHistorySoamPmExtSumAbsRTJitter=f3EsaProbeHistorySoamPmExtSumAbsRTJitter, bertTestStreamErrInjectRateMultiplier=bertTestStreamErrInjectRateMultiplier, bertTestStreamName=bertTestStreamName, esaProbeHistoryLostPkts=esaProbeHistoryLostPkts, esaProbeHistoryIndex=esaProbeHistoryIndex, f3EsaProbeHistorySoamPmExtSumOfSqAbsRTJitter=f3EsaProbeHistorySoamPmExtSumOfSqAbsRTJitter, esaProbeScheduleGroupAction=esaProbeScheduleGroupAction, f3EsaProbeHistorySoamPmExtR2pAvailableDeltaTs=f3EsaProbeHistorySoamPmExtR2pAvailableDeltaTs, esaProbeScheduleGroupDuration=esaProbeScheduleGroupDuration, ecpaTestStreamSignature=ecpaTestStreamSignature, bertTestStreamMonRxESsSinceLastSync=bertTestStreamMonRxESsSinceLastSync, esaProbeStatsSumPosP2RJitter=esaProbeStatsSumPosP2RJitter, f3EsaProbeHistorySoamPmExtMinR2PFlr=f3EsaProbeHistorySoamPmExtMinR2PFlr, esaProbeDistStatsBinIndex=esaProbeDistStatsBinIndex, bertTestStreamMonEndTime=bertTestStreamMonEndTime, f3EsaProbeStatsSoamPmExtAvgAbsRTJitter=f3EsaProbeStatsSoamPmExtAvgAbsRTJitter, cmOperateLoopbackTrap=cmOperateLoopbackTrap, ecpaTestStreamRateHi=ecpaTestStreamRateHi, cmServAssuranceConformance=cmServAssuranceConformance, esaProbeStatsNumPosP2RJitter=esaProbeStatsNumPosP2RJitter, esaProbeCOSConfigType=esaProbeCOSConfigType, esaProbeHistorySumOfSqOnewayR2PDelay=esaProbeHistorySumOfSqOnewayR2PDelay, esaProbeStatsMinRoundTripDelay=esaProbeStatsMinRoundTripDelay, esaProbeDistStatsConfigMinVal=esaProbeDistStatsConfigMinVal, esaProbeScheduleGroupEntry=esaProbeScheduleGroupEntry, ecpaConfigStreamDestIpV4Address=ecpaConfigStreamDestIpV4Address, f3EsaProbeHistorySoamPmExtNumP2RFDR=f3EsaProbeHistorySoamPmExtNumP2RFDR, esaProbeStatsAction=esaProbeStatsAction, esaProbeDistHistoryTable=esaProbeDistHistoryTable, PYSNMP_MODULE_ID=cmServiceAssuranceMIB, esaProbeVlanId=esaProbeVlanId, esaProbeStatsIntervalType=esaProbeStatsIntervalType, bertTestStreamErrInjectRate=bertTestStreamErrInjectRate, esaProbeHistoryNumNegR2PJitter=esaProbeHistoryNumNegR2PJitter, esaProbeInner2VlanPrio=esaProbeInner2VlanPrio, esaProbeStatsR2PSyncErrs=esaProbeStatsR2PSyncErrs, esaProbeHistoryBins=esaProbeHistoryBins, bertConfigStreamErrInjectEnabled=bertConfigStreamErrInjectEnabled, f3EsaProbeStatsSoamPmExtAvgR2PFlr=f3EsaProbeStatsSoamPmExtAvgR2PFlr, esaProbeDirection=esaProbeDirection, f3EsaProbeStatsSoamPmExtNumR2PFDR=f3EsaProbeStatsSoamPmExtNumR2PFDR, esaProbeHistoryMaxNegP2RJitter=esaProbeHistoryMaxNegP2RJitter, esaProbeDistHistoryBinLower=esaProbeDistHistoryBinLower, esaProbeHistoryP2RErredPkts=esaProbeHistoryP2RErredPkts, bertTestStreamTxPattern=bertTestStreamTxPattern, esaProbeDistStatsConfigTable=esaProbeDistStatsConfigTable, esaProbeDistStatsAction=esaProbeDistStatsAction, esaProbeDistHistoryBinNumSamples=esaProbeDistHistoryBinNumSamples, esaProbeHistorySumOfSqNegP2RJitter=esaProbeHistorySumOfSqNegP2RJitter, ecpaControlStream2=ecpaControlStream2, esaProbeDistHistoryBinTable=esaProbeDistHistoryBinTable, bertTestStreamMonSyncCounts=bertTestStreamMonSyncCounts, f3EsaProbeStatsSoamPmExtP2rSeverelyErroredDeltaTs=f3EsaProbeStatsSoamPmExtP2rSeverelyErroredDeltaTs, esaProbeStatsMinNegR2PJitter=esaProbeStatsMinNegR2PJitter)
mibBuilder.exportSymbols("CM-SA-MIB", esaProbePktDeadInterval=esaProbePktDeadInterval, esaProbeHistoryP2RSyncErrs=esaProbeHistoryP2RSyncErrs, ecpaControlTestStatus=ecpaControlTestStatus, esaProbeStatsSumOfSqOnewayR2PDelay=esaProbeStatsSumOfSqOnewayR2PDelay, esaReflectorSecondaryState=esaReflectorSecondaryState, ecpaTestStreamMonRx1stFrame4Octets=ecpaTestStreamMonRx1stFrame4Octets, f3EsaProbeStatsSoamPmExtP2rUnavailableDeltaTs=f3EsaProbeStatsSoamPmExtP2rUnavailableDeltaTs, ecpaConfigStreamEntry=ecpaConfigStreamEntry, esaProbeHistoryY1731R2PNegLossOccurrences=esaProbeHistoryY1731R2PNegLossOccurrences, f3EsaProbeHistorySoamPmExtMaxP2RFDR=f3EsaProbeHistorySoamPmExtMaxP2RFDR, esaProbeStatsSumOfSqAbsR2PJitter=esaProbeStatsSumOfSqAbsR2PJitter, f3EsaProbeHistorySoamPmExtSumP2RFDR=f3EsaProbeHistorySoamPmExtSumP2RFDR, esaProbeStatsAvgRoundTripDelay=esaProbeStatsAvgRoundTripDelay, esaProbeDistStatsCOSIndex=esaProbeDistStatsCOSIndex, ecpaTestStreamMonRx1stFrame8Octets=ecpaTestStreamMonRx1stFrame8Octets, ecpaTestStreamMonRx1stFrame10Octets=ecpaTestStreamMonRx1stFrame10Octets, f3EsaProbeHistorySoamPmExtEntry=f3EsaProbeHistorySoamPmExtEntry, ecpaConfigStreamInnerVlan2EtherType=ecpaConfigStreamInnerVlan2EtherType, ecpaTestStreamMonRx1stFrame7Octets=ecpaTestStreamMonRx1stFrame7Octets, esaProbeStatsMinAbsR2PJitter=esaProbeStatsMinAbsR2PJitter, bertConfigStreamName=bertConfigStreamName, esaProbeStatsTable=esaProbeStatsTable, f3EsaProbeHistorySoamPmExtNumR2PFDR=f3EsaProbeHistorySoamPmExtNumR2PFDR, ecpaTestStreamDestIpV6Address=ecpaTestStreamDestIpV6Address, esaProbeMultiCOSEnabled=esaProbeMultiCOSEnabled, BerTestStatus=BerTestStatus, ecpaConfigStreamSourceMAC=ecpaConfigStreamSourceMAC, ecpaTestStreamInnerVlanEtherType=ecpaTestStreamInnerVlanEtherType, esaProbeDistStatsDestinationIndex=esaProbeDistStatsDestinationIndex, esaProbeStatsThresholdAbsValueLo=esaProbeStatsThresholdAbsValueLo, esaProbeHistoryMinPosR2PJitter=esaProbeHistoryMinPosR2PJitter, esaProbeDistStatsConfigLowBoundOfBin9=esaProbeDistStatsConfigLowBoundOfBin9, ecpaTestStreamMonRxNonEcpaFrames=ecpaTestStreamMonRxNonEcpaFrames, esaProbeStatsSumOfSqOnewayP2RDelay=esaProbeStatsSumOfSqOnewayP2RDelay, esaProbeDistHistoryNumBins=esaProbeDistHistoryNumBins, bertTestStreamMonRxBitErrsSinceStart=bertTestStreamMonRxBitErrsSinceStart, esaProbeHistoryMinRoundTripDelay=esaProbeHistoryMinRoundTripDelay, esaProbeHistorySumOfSqPosR2PJitter=esaProbeHistorySumOfSqPosR2PJitter, esaProbeCOSConfigRowStatus=esaProbeCOSConfigRowStatus, f3EsaProbeStatsSoamPmExtP2rUnavailableTime=f3EsaProbeStatsSoamPmExtP2rUnavailableTime, f3EsaProbeHistorySoamPmExtMaxP2RFlr=f3EsaProbeHistorySoamPmExtMaxP2RFlr, esaProbeDistStatsConfigType=esaProbeDistStatsConfigType, esaProbeScheduleGroupActionProbeList=esaProbeScheduleGroupActionProbeList, esaProbeStatsSumOfSqPosR2PJitter=esaProbeStatsSumOfSqPosR2PJitter, f3EsaProbeStatsSoamPmExtMaxP2RFlr=f3EsaProbeStatsSoamPmExtMaxP2RFlr, f3EsaProbeHistorySoamPmExtSumRTFDR=f3EsaProbeHistorySoamPmExtSumRTFDR, esaProbeHistorySumNegP2RJitter=esaProbeHistorySumNegP2RJitter, esaReflectorAlias=esaReflectorAlias, f3EsaProbeStatsSoamPmExtSumOfSqR2PFDR=f3EsaProbeStatsSoamPmExtSumOfSqR2PFDR, esaProbeStatsValid=esaProbeStatsValid, f3EsaProbeHistorySoamPmExtMaxRTFDR=f3EsaProbeHistorySoamPmExtMaxRTFDR, esaProbeHistorySumRoundTripDelay=esaProbeHistorySumRoundTripDelay, esaProbeStatsSumNegP2RJitter=esaProbeStatsSumNegP2RJitter, esaProbeStatsSumOnewayR2PDelay=esaProbeStatsSumOnewayR2PDelay, ecpaConfigStreamTable=ecpaConfigStreamTable, ecpaTestStreamMonRx1stFrame1Octets=ecpaTestStreamMonRx1stFrame1Octets, ecpaTestStreamInnerVlan2Prio=ecpaTestStreamInnerVlan2Prio, f3EsaProbeStatsSoamPmExtNumRTFDR=f3EsaProbeStatsSoamPmExtNumRTFDR, f3EsaProbeStatsSoamPmExtSumAbsRTJitter=f3EsaProbeStatsSoamPmExtSumAbsRTJitter, esaProbeDistStatsConfigIndex=esaProbeDistStatsConfigIndex, esaProbeCOSConfigSoamPmExtAvailFlrThreshold=esaProbeCOSConfigSoamPmExtAvailFlrThreshold, ecpaTestStreamInnerVlan2Enabled=ecpaTestStreamInnerVlan2Enabled, esaProbeStatsSumAbsP2RJitter=esaProbeStatsSumAbsP2RJitter, ecpaTestStreamIpVersion=ecpaTestStreamIpVersion, ecpaConfigStreamInnerVlan2Prio=ecpaConfigStreamInnerVlan2Prio, esaProbeIndex=esaProbeIndex, ecpaControlMonitorDirection=ecpaControlMonitorDirection, esaProbeDestinationMepId=esaProbeDestinationMepId, cmServAssuranceGenNotifGroup=cmServAssuranceGenNotifGroup, EcpaTestType=EcpaTestType, f3EsaProbeHistorySoamPmExtR2PSeverelyErroredDeltaTs=f3EsaProbeHistorySoamPmExtR2PSeverelyErroredDeltaTs, bertConfigStreamErrInjectRate=bertConfigStreamErrInjectRate, esaProbeHistoryMinAbsR2PJitter=esaProbeHistoryMinAbsR2PJitter, ecpaTestStreamMonRx1stFrame9Octets=ecpaTestStreamMonRx1stFrame9Octets, f3EsaProbeStatsSoamPmExtMinAbsRTJitter=f3EsaProbeStatsSoamPmExtMinAbsRTJitter, f3EsaProbeStatsSoamPmExtSumP2RFDR=f3EsaProbeStatsSoamPmExtSumP2RFDR, ecpaTestStreamInnerVlanPrio=ecpaTestStreamInnerVlanPrio, esaProbeIpPrioMapMode=esaProbeIpPrioMapMode, esaProbeHistorySumOfSqNegR2PJitter=esaProbeHistorySumOfSqNegR2PJitter, esaProbeInner2VlanTagEnabled=esaProbeInner2VlanTagEnabled, esaProbeSecondaryState=esaProbeSecondaryState, bertControlStream=bertControlStream, esaProbeDestinationMepMacAddr=esaProbeDestinationMepMacAddr, esaProbeCOSConfigIndex=esaProbeCOSConfigIndex, esaProbeHistoryMaxOnewayR2PDelay=esaProbeHistoryMaxOnewayR2PDelay)
