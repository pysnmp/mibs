#
# PySNMP MIB module CM-FACILITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-FACILITY-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:04:29 2024
# On host fv-az1121-719 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
AdminState, VlanTagType, CmTrafficACLPriorityType, SfpMediaType, AfpTagControl, VlanEthertype, PriorityMapMode, EthernetPortSpeed, EthernetMediaType, FlowSecState, UsbOperationalMode, CmTrafficAclFilterType, CmTrafficAclProtocolType, F3DisplayString, TrafficDirection, CmTrafficAclFilterActionType, SecondaryState, VlanPriority, SfpConnectorValue, IpVersion, SignalDirectionType, TDMFrequencySourceType, SfpIdentifierValue, OperationalState, VlanId = mibBuilder.importSymbols("CM-COMMON-MIB", "AdminState", "VlanTagType", "CmTrafficACLPriorityType", "SfpMediaType", "AfpTagControl", "VlanEthertype", "PriorityMapMode", "EthernetPortSpeed", "EthernetMediaType", "FlowSecState", "UsbOperationalMode", "CmTrafficAclFilterType", "CmTrafficAclProtocolType", "F3DisplayString", "TrafficDirection", "CmTrafficAclFilterActionType", "SecondaryState", "VlanPriority", "SfpConnectorValue", "IpVersion", "SignalDirectionType", "TDMFrequencySourceType", "SfpIdentifierValue", "OperationalState", "VlanId")
neIndex, networkElementEntry, f3UsbHostIndex, slotIndex, shelfIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex", "networkElementEntry", "f3UsbHostIndex", "slotIndex", "shelfIndex")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
f3LagIndex, = mibBuilder.importSymbols("F3-LAG-MIB", "f3LagIndex")
SquelchControl, SSMQualityLevel, ClkSignalType, TimeSource = mibBuilder.importSymbols("F3-SYNC-MIB", "SquelchControl", "SSMQualityLevel", "ClkSignalType", "TimeSource")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, ObjectIdentity, ModuleIdentity, NotificationType, iso, Bits, Unsigned32, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "ModuleIdentity", "NotificationType", "iso", "Bits", "Unsigned32", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "Counter32", "IpAddress")
RowStatus, DateAndTime, MacAddress, TruthValue, VariablePointer, DisplayString, StorageType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "MacAddress", "TruthValue", "VariablePointer", "DisplayString", "StorageType", "TextualConvention")
cmFacilityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4))
cmFacilityMIB.setRevisions(('2021-01-27 00:00',))
if mibBuilder.loadTexts: cmFacilityMIB.setLastUpdated('202101270000Z')
if mibBuilder.loadTexts: cmFacilityMIB.setOrganization('ADVA Optical Networking SE')
cmFacilityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1))
cmFacilityConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2))
class LocationMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("navigation", 1), ("survey-in", 2), ("fixed", 3))

class TimeAdvanceMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("auto", 1), ("fixed", 2))

class SynceRxSsmQl(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("ql-dnu", 1), ("ssm-based", 2), ("ql-prc", 3))

class SynceMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("slave", 1), ("master", 2))

class SciSignalMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("sci-1pps", 1), ("sci-2M", 2), ("sci-10M", 3))

class SciSignalDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("output", 1), ("input", 2))

class SciRxSsmQL(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("prc", 1), ("dnu", 2))

class XDSLAnnex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 0), ("annexa", 1), ("annexb", 2), ("annexc", 3), ("annexl", 4), ("annexm", 5))

class XDSLMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("vdsl2", 1), ("adsl2Plus", 2), ("adsl2", 3), ("unkown", 4))

class XDSLCarrierSet(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 0), ("auto", 1), ("a43", 2), ("b43", 3), ("v43", 4), ("a43c", 5))

class XDSLStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 0), ("showtime", 1), ("training", 2), ("handshake", 3), ("idle", 4), ("other", 5))

class XDSLControlChannel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("none", 1), ("pppoe", 2))

class VDSLProfileField(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("notApplicable", 0), ("unknown", 1), ("profile-8a", 2), ("profile-8b", 3), ("profile-8c", 4), ("profile-8d", 5), ("profile-12a", 6), ("profile-12b", 7), ("profile-17a", 8), ("profile-30a", 9))

class VDSLProfileFields(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("profile-8a", 0), ("profile-8b", 1), ("profile-8c", 2), ("profile-8d", 3), ("profile-12a", 4), ("profile-12b", 5), ("profile-17a", 6), ("profile-30a", 7))

class XDSLModulationMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("notApplicable", 0), ("vdsl2", 1))

class PPPoEConnectionStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("connected", 1), ("connecting", 2), ("disconnected", 3))

class CmEthernetSvcPortMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("connection-oriented", 1), ("connection-less", 2))

class CmEthernetSvcType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("epl", 1), ("evpl", 2))

class CmEthernetTrafficSvcType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("all-to-one", 1), ("service-multiplexing", 2))

class CmAclConfiguration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("all-bk-l2", 1), ("all-bk-l2-ipv4", 2), ("two-bk-l2-ipv4", 3), ("one-bk-l2-ipv4", 4), ("none-bk-l2-ipv4", 5))

class CmAfpType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("tagged", 1), ("untagged", 2), ("all", 3))

class CmEthernetDiagAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 0), ("autoneg", 1), ("cable", 2), ("loopback", 3), ("efm-oam-lpbk", 4), ("all", 5))

class CmDiagCableCondType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("not-applicable", 0), ("cableshort", 1), ("cableopen", 2), ("cableimpedance", 3), ("cablenotfound", 4), ("cableok", 5), ("cablefailed", 6), ("cablenotrun", 7))

class CmDiagAutoNegCondType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("autonegok", 1), ("autonegfailed", 2), ("autonegnotrun", 3))

class CmDiagLpbkCondType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("lpbkok", 1), ("lpbkfailed", 2), ("lpbknotrun", 3))

class CmDiagEfmOamLpbkCondType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 0), ("efmlpbkok", 1), ("efmlpbkfailed", 2), ("efmlpbkfailednendNA", 3), ("efmlpbkfailedfendNA", 4), ("efmlpbknotrun", 5))

class CmDiagTestStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 0), ("initial", 1), ("in-progress", 2), ("stopped", 3), ("completed", 4), ("aborted", 5))

class CmControlProtocolFilterType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("efmoam", 1), ("pause", 2))

class CmLoopbackType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("lpbk-none", 1), ("efm-oam-remote", 2), ("efm-oam-remote-timed", 3), ("facility-port", 4), ("facility-port-timed", 5), ("facility-vlan", 6), ("terminal-port", 7), ("terminal-port-timed", 8), ("terminal-vlan", 9), ("efm-oam-tailend", 10), ("facility-payload", 11), ("facility-payload-timed", 12), ("remote-facility", 13), ("remote-facility-payload", 14), ("tailend-facility", 15), ("tailend-facility-payload", 16), ("terminal-itag", 17), ("facility-itag", 18), ("jdsu-terminal-port-tailend", 19), ("jdsu-terminal-vlan-tailend", 20), ("jdsu-facility-port-tailend", 21), ("jdsu-facility-vlan-tailend", 22), ("facility-och", 23), ("facility-och-timed", 24), ("terminal-och", 25), ("terminal-och-timed", 26), ("jdsu-facility-port-l3-tailend", 27), ("jdsu-facility-vlan-l3-tailend", 28))

class CmSwapSADAType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("not-applicable", 0), ("noswapSADA", 1), ("swapSADA", 2), ("swapDAOverrideSA", 3), ("swapSADAMacOnly", 4), ("swapDAOverridesSAMacOnly", 5), ("swapIP", 6), ("swapTCPUDP", 7))

class CmControlProtocolDispType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("not-applicable", 0), ("discard", 1), ("peer", 2), ("pass-thru", 3), ("use-group-setting", 4), ("not-active", 5), ("use-port-setting", 6), ("pass-thru-l2pt", 7), ("useMacSetting", 8))

class CmLinkLossFwdSignalType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("not-applicable", 0), ("llf-efm-signal", 1), ("llf-link-down", 2), ("llf-odu-ais", 3), ("llf-odu-lck", 4), ("llf-odu-tim", 5), ("llf-odu-bdi", 6), ("llf-opu-plm", 7), ("llf-opu-csf", 8), ("llf-eth-epc", 9))

class CmLinkLossFwdTriggerTypes(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("trig-efm-signal", 1), ("trig-link-down", 2), ("trig-odu-ais", 3), ("trig-odu-lck", 4), ("trig-odu-tim", 5), ("trig-odu-bdi", 6), ("trig-opu-plm", 7), ("trig-opu-csf", 8))

class CmLinkLossFwdTxActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("not-applicable", 0), ("llf-tx-no-action", 1), ("llf-tx-efm-signal", 2), ("llf-tx-link-down", 3), ("llf-odu-ais", 4), ("llf-opu-csf", 5), ("llf-otu-ais", 6))

class CmRemoteLinkIds(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("remoteLinkId1", 1), ("remoteLinkId2", 2), ("remoteLinkId3", 3), ("remoteLinkId4", 4), ("remoteLinkId5", 5), ("remoteLinkId6", 6), ("remoteLinkId7", 7), ("remoteLinkId8", 8), ("remoteLinkId9", 9), ("remoteLinkId10", 10), ("remoteLinkId11", 11), ("remoteLinkId12", 12), ("remoteLinkId13", 13), ("remoteLinkId14", 14), ("remoteLinkId15", 15), ("remoteLinkId16", 16), ("remoteLinkId17", 17), ("remoteLinkId18", 18), ("remoteLinkId19", 19), ("remoteLinkId20", 20), ("remoteLinkId21", 21), ("remoteLinkId22", 22), ("remoteLinkId23", 23), ("remoteLinkId24", 24), ("remoteLinkId25", 25), ("remoteLinkId26", 26))

class CmOamMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("active", 1), ("passive", 2))

class CmOamAdminState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("enabled", 1), ("disabled", 2))

class CmOamDiscoveryState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 0), ("fault", 1), ("activesendlocal", 2), ("passivewait", 3), ("sendlocalremote", 4), ("sendlocalremoteok", 5), ("sendany", 6))

class CmFlowType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("portbased", 1), ("regular", 2), ("default", 3))

class CmEthernetMDIXType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 1), ("auto-mdix", 2), ("crossed", 3), ("uncrossed", 4), ("notAvailable", 5))

class FlowTrafficType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("shaped-only", 1), ("policed-shaped", 2), ("policed-only", 3))

class FlowVlanActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("no-action", 1), ("add-vlan", 2), ("remove-vlan", 3))

class FlowTagControl(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("push", 2), ("swapvid", 3), ("pushvid", 4), ("pop", 5), ("pushisid", 6))

class PrioMapControlType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("swap", 2))

class PolicerAlgorithmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("srTCM", 1), ("trTCM", 2))

class PolicerColorMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("color-aware", 1), ("color-blind", 2))

class BitsPortType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("bits-in", 1), ("bits-out", 2))

class BitsPortLineType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("t1", 1), ("e1", 2), ("type-2048kHz", 3), ("other", 4))

class BitsPortLineCode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("t1-b8zs", 2), ("t1-ami", 3), ("e1-hdb3", 4), ("e1-ami", 5))

class BitsFrameFormat(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("t1-sf", 2), ("t1-esf", 3), ("e1-unframed", 4), ("e1-crc4", 5), ("e1-dualframe", 6))

class SaBitDesignation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("bit4", 2), ("bit5", 3), ("bit6", 4), ("bit7", 5), ("bit8", 6))

class CmActiveControlProtocolsType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("ciscoGroup", 1), ("isl", 2), ("pagp", 3), ("udld", 4), ("cdp", 5), ("vtp", 6), ("dtp", 7), ("pvstpplus", 8), ("uplinkfast", 9), ("vlanbridge", 10), ("l2pt", 11), ("bridgegroup", 12), ("bpdu", 13), ("pause", 14), ("lacp", 15), ("lacpmarker", 16), ("efmoam", 17), ("ssm", 18), ("portauthen", 19), ("bridgereserved", 20), ("lanbridges", 21), ("garpgroup", 22), ("gmrp", 23), ("gvrp", 24), ("garp", 25), ("lldp", 26), ("elmi", 27), ("mac00", 28), ("mac01", 29), ("mac02", 30), ("mac03", 31), ("mac04", 32), ("mac05", 33), ("mac06", 34), ("mac07", 35), ("mac08", 36), ("mac09", 37), ("mac0A", 38), ("mac0B", 39), ("mac0C", 40), ("mac0D", 41), ("mac0E", 42), ("mac0F", 43), ("nearestlldp", 44), ("nontpmrlldp", 45), ("customerlldp", 46), ("ptpNonfwdUntagged", 47), ("ptpNonfwdTagged", 48))

class PcpDEEncType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("enc-none", 1), ("enc-7p1d", 2), ("enc-6p2d", 3), ("enc-5p3d", 4), ("enc-custom", 5))

class PcpDEPairsAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("apply-pairs", 1))

class LineBuildOut(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 0), ("lbo-0-133ft", 1), ("lbo-133-266ft", 2), ("lbo-266-399ft", 3), ("lbo-399-533ft", 4), ("lbo-533-655ft", 5), ("lbo-7dot5db", 6), ("lbo-15db", 7), ("lbo-22dot5db", 8))

class BitsPortImpedanceMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("bits-120Ohm", 1), ("bits-100Ohm", 2), ("bits-75Ohm", 3), ("bits-50Ohm", 4))

class ShapingType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("port-based", 1), ("flow-based", 2), ("llq", 3))

class XgePhyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("lan", 1), ("wan", 2), ("otn", 3))

class F3Usb3GDCNPINCodeActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 0), ("enable-pin", 1), ("disable-pin", 2), ("change-pin", 3), ("authentication-pin", 4), ("unlock-pin", 5))

class F3Usb3GSimCardState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("ok", 1), ("notinserted", 2), ("networkrejected", 3), ("unknown", 4))

class F3Usb3GNetworkConnectionState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("connecting", 1), ("connected", 2), ("disconnected", 3))

class F3Usb3GRecvSignalStrengthInd(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("high", 1), ("medium", 2), ("low", 3), ("none", 4))

class TrailTraceFormat(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("onebytemode", 1), ("sixteenbytemode", 2), ("sixtyfourbytemode", 3))

class MultiplexingStructure(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("not-applicable", 0), ("vt-sts1", 1), ("sts1spe-sts1", 2), ("sts3cspe-sts3c", 3), ("vc12-vc4-aug", 4), ("vc12-vc3-aug", 5), ("vc3-aug", 6), ("vc3-vc4-aug", 7), ("vc4-aug", 8), ("custom", 9))

class EoTDMMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("eosdh", 1), ("eopdh", 2))

class BitErrRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 0), ("ber-1e-1", 1), ("ber-1e-2", 2), ("ber-1e-3", 3), ("ber-1e-4", 4), ("ber-1e-5", 5), ("ber-1e-6", 6), ("ber-1e-7", 7), ("ber-1e-8", 8), ("ber-1e-9", 9), ("ber-1e-10", 10))

class GFPEncapsulationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 0), ("gfp", 1), ("gfp-fcs", 2), ("gfp-novcat", 3), ("gfp-zerovcat", 4), ("gfp-fcs-novcat", 5), ("gfp-fcs-zerovcat", 6), ("x86", 7))

class PPSInputRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("pulse-per-sec", 1), ("pulse-per-2sec", 2))

class PPSPhyInterfaceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("pps", 1), ("tod", 2))

class OCNSTMPortType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("oc12", 1), ("oc3", 2), ("stm4", 3), ("stm1", 4))

class E1T1LineType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("t1", 1), ("e1", 2))

class E1T1LineCode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("t1-b8zs", 2), ("t1-ami", 3), ("e1-hdb3", 4), ("e1-ami", 5))

class E1T1FrameFormat(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("t1-sf", 2), ("t1-esf", 3), ("e1-unframed", 4), ("e1-crc4", 5), ("e1-dualframe", 6), ("t1-unframed", 7), ("e1-basicframe", 8))

class E1T1RcvSensitivity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("high-range", 1), ("low-range", 2))

class E3T3FrameFormat(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("dsx3CbitParity", 1), ("g832", 2), ("e3Unframed", 3), ("dsx3M23", 4), ("g751", 5), ("dsx3Unframed", 6))

class TDMPathType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 0), ("t1", 1), ("e1", 2), ("t3", 3), ("e3", 4), ("vc12", 5), ("vc3", 6), ("vc4", 7), ("vt15", 8), ("sts1", 9), ("sts3c", 10))

class PPSGenCondition(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tracked-1sat", 1), ("tracked-3sat", 2))

class GPSAntennaStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("open", 1), ("short", 2), ("normal", 3), ("unavailable", 4))

class PolicingControl(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("a2n", 1), ("n2a", 2), ("a2nN2a", 3), ("n2n", 4))

class FlowConfigType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("access", 1), ("passThru", 2))

class G3AuthStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("disabled", 1), ("ok", 2), ("input-pin", 3), ("input-puk", 4), ("locked", 5), ("none", 6))

class PsePowerLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("class1", 1), ("class2", 2), ("class0andclass3", 3), ("class4", 4))

class PSENonStandardPD(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class LearningAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("block", 1), ("forward", 2))

class SfpChannelIdentifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101))
    namedValues = NamedValues(("not-applicable", 0), ("none", 1), ("frequency-19610", 2), ("frequency-19595", 3), ("frequency-19585", 4), ("frequency-19575", 5), ("frequency-19565", 6), ("frequency-19555", 7), ("frequency-19545", 8), ("frequency-19535", 9), ("frequency-19525", 10), ("frequency-19515", 11), ("frequency-19505", 12), ("frequency-19495", 13), ("frequency-19485", 14), ("frequency-19475", 15), ("frequency-19465", 16), ("frequency-19455", 17), ("frequency-19445", 18), ("frequency-19435", 19), ("frequency-19425", 20), ("frequency-19415", 21), ("frequency-19405", 22), ("frequency-19395", 23), ("frequency-19385", 24), ("frequency-19375", 25), ("frequency-19365", 26), ("frequency-19355", 27), ("frequency-19345", 28), ("frequency-19335", 29), ("frequency-19325", 30), ("frequency-19315", 31), ("frequency-19305", 32), ("frequency-19295", 33), ("frequency-19285", 34), ("frequency-19275", 35), ("frequency-19265", 36), ("frequency-19255", 37), ("frequency-19245", 38), ("frequency-19235", 39), ("frequency-19225", 40), ("frequency-19215", 41), ("frequency-19205", 42), ("frequency-19600", 43), ("frequency-19590", 44), ("frequency-19580", 45), ("frequency-19570", 46), ("frequency-19560", 47), ("frequency-19550", 48), ("frequency-19540", 49), ("frequency-19530", 50), ("frequency-19520", 51), ("frequency-19510", 52), ("frequency-19500", 53), ("frequency-19490", 54), ("frequency-19480", 55), ("frequency-19470", 56), ("frequency-19460", 57), ("frequency-19450", 58), ("frequency-19440", 59), ("frequency-19430", 60), ("frequency-19420", 61), ("frequency-19410", 62), ("frequency-19400", 63), ("frequency-19390", 64), ("frequency-19380", 65), ("frequency-19370", 66), ("frequency-19360", 67), ("frequency-19350", 68), ("frequency-19340", 69), ("frequency-19330", 70), ("frequency-19320", 71), ("frequency-19310", 72), ("frequency-19300", 73), ("frequency-19290", 74), ("frequency-19280", 75), ("frequency-19270", 76), ("frequency-19260", 77), ("frequency-19250", 78), ("frequency-19240", 79), ("frequency-19230", 80), ("frequency-19220", 81), ("frequency-19210", 82), ("frequency-19200", 83), ("frequency-19195", 84), ("frequency-19190", 85), ("frequency-19185", 86), ("frequency-19180", 87), ("frequency-19175", 88), ("frequency-19170", 89), ("frequency-19165", 90), ("frequency-19160", 91), ("frequency-19155", 92), ("frequency-19150", 93), ("frequency-19145", 94), ("frequency-19140", 95), ("frequency-19135", 96), ("frequency-19130", 97), ("frequency-19125", 98), ("notTunable", 99), ("frequency-19605", 100), ("autoTuning", 101))

class BandwidthProfileMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("lineRate", 1), ("informationRate", 2))

class LearningConfigAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noAction", 1), ("flushFwdTable", 2), ("clearBlock", 3), ("resetAgingTimer", 4))

class TrafficPortDeleteEntitiesAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("no-action", 1), ("delete-esa-entities", 2), ("delete-cfm-entities", 3))

class UsbDCNMobileNetworkType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("secondGeneration", 2), ("thirdGeneration", 3), ("fourthGeneration", 4), ("notApplicable", 5))

class TxDeiAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("setToZero", 1), ("markColor", 2), ("noChange", 3))

class RxDeiAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ignore", 1), ("use", 2))

class DeiOuterTagType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("stag", 1), ("ctagOrStag", 2))

class ConstellationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("gps-only", 1), ("glonass-only", 2), ("gps-and-glonass", 3), ("beidou-and-gps", 4), ("beidou-only", 5))

class TODOutputFormat(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nmea", 1), ("ccsa", 2))

class ConstellationTypesBitMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("gps", 0), ("glonass", 1), ("beidou", 2), ("galileo", 3), ("sbas", 4), ("qzss", 5))

class InstallationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("full-sky-view", 1), ("limited-sky-view", 2))

class WIFIEncryptionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("wpa-psk", 1), ("wpa2-psk", 2), ("wpa-wpa2-psk", 3))

class DHCPType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("client", 1), ("server", 2))

class CosMappingMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("ethernet", 1), ("eompls", 2), ("vxlan", 3), ("gre", 4), ("sr-mpls", 5))

class EthernetPortTrafficModel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("accessFlow", 1), ("flowpoint", 2))

class SatelliteHealth(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("na", 1), ("ok", 2), ("weak", 3), ("dead", 4), ("no-data-modulation", 5))

class DelayOption(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3))
    namedValues = NamedValues(("nanoseconds", 2), ("meters", 3))

class AclRuleOperation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("accept", 1), ("deny", 2))

class EfIdentificationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("five-tuple", 1), ("seven-tuple", 2))

class UsbOperationalMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cellular-modem", 1), ("srv-access", 2))

class SaBitsState(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("bit4", 0), ("bit5", 1), ("bit6", 2), ("bit7", 3), ("bit8", 4))

class SignalShape(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sine", 1), ("square", 2))

class SignalFrequency(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("frequency-100kHz", 1), ("frequency-1MHz", 2), ("frequency-1544kHz", 3), ("frequency-2048kHz", 4), ("frequency-5MHz", 5), ("frequency-10MHz", 6), ("frequency-25MHz", 7), ("frequency-50MHz", 8))

class PpsPolarity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("positive", 1), ("negative", 2))

class PpsPortImpedanceMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-available", 0), ("pps-50Ohm", 1), ("pps-1MOhm", 2))

class AclNoMatchDispositionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("accept", 1), ("deny", 2))

class EfIdentificationFieldType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("srcMac", 0), ("destMac", 1), ("srcIp", 2), ("destIp", 3), ("ipProtocol", 4), ("srcPort", 5), ("destPort", 6))

class ToggleValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("not-available", 3))

class IrigTimeCode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("irig-a002", 1), ("irig-a007", 2), ("irig-a132", 3), ("irig-a137", 4), ("irig-b002", 5), ("irig-b004", 6), ("irig-b006", 7), ("irig-b007", 8), ("irig-b122", 9), ("irig-b124", 10), ("irig-b126", 11), ("irig-b127", 12), ("irig-g002", 13), ("irig-g007", 14), ("irig-g142", 15), ("irig-g146", 16), ("pps", 17), ("ppm", 18), ("pph", 19), ("have-quick", 20))

class IrigControlField(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ieee1344", 1), ("ieee37-118", 2))

class IrigRelayOperation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("every-hour", 1), ("every-minute", 2), ("locked", 3), ("alarm", 4))

class IrigOutputType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("digital", 1), ("analog", 2), ("optical", 3))

class IrigDigitalSignalVoltage(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("digital-5v", 1), ("digital-10v", 2))

class IrigGroupExtensionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("patch-panel", 1), ("extension-cable", 2), ("none", 3))

class CcPortDutyCycle(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cycle-63-37", 1), ("cycle-50-50", 2))

class CcActivePortState(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port8", 8), ("port8", 9))

class DynamicModelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("portable", 0), ("stationary", 1), ("pedestrian", 2), ("automotive", 3), ("sea", 4), ("airborne1g", 5), ("airborne2g", 6), ("airborne4g", 7))

class PoEStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("searching", 1), ("detection", 2), ("classification", 3), ("powerout", 4), ("idle", 5), ("failed", 6), ("na", 7))

class PlugType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("generic", 1), ("gMetro", 2))

class PlugMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tailEnd", 1), ("headEnd", 2))

class RelativeChannelIdentifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("channel1", 1), ("channel2", 2), ("channel3", 3), ("channel4", 4), ("channel5", 5), ("channel6", 6), ("channel7", 7), ("channel8", 8), ("channel9", 9))

class ChannelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ituCband", 1), ("relativeChannelNumber", 2), ("frequency", 3))

class OutOfBandChannelStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notApplicable", 1), ("disabled", 2), ("idle", 3), ("communicationInProgress", 4), ("communicationError", 5), ("autoTunningInProgress", 6))

class GMetroAutoTuningMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("pairedTuning", 1), ("blindTuning", 2), ("autonomousTuning", 3))

class FrequencyIdentifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49))
    namedValues = NamedValues(("frequency19120", 1), ("frequency19130", 2), ("frequency19140", 3), ("frequency19150", 4), ("frequency19160", 5), ("frequency19170", 6), ("frequency19180", 7), ("frequency19190", 8), ("frequency19200", 9), ("frequency19210", 10), ("frequency19220", 11), ("frequency19230", 12), ("frequency19240", 13), ("frequency19250", 14), ("frequency19260", 15), ("frequency19270", 16), ("frequency19280", 17), ("frequency19290", 18), ("frequency19300", 19), ("frequency19310", 20), ("frequency19320", 21), ("frequency19330", 22), ("frequency19340", 23), ("frequency19350", 24), ("frequency19360", 25), ("frequency19370", 26), ("frequency19380", 27), ("frequency19390", 28), ("frequency19400", 29), ("frequency19410", 30), ("frequency19420", 31), ("frequency19430", 32), ("frequency19440", 33), ("frequency19450", 34), ("frequency19460", 35), ("frequency19470", 36), ("frequency19480", 37), ("frequency19490", 38), ("frequency19500", 39), ("frequency19510", 40), ("frequency19520", 41), ("frequency19530", 42), ("frequency19540", 43), ("frequency19550", 44), ("frequency19560", 45), ("frequency19570", 46), ("frequency19580", 47), ("frequency19590", 48), ("frequency19600", 49))

class ITUCBandChannelIdentifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49))
    namedValues = NamedValues(("c12", 1), ("c13", 2), ("c14", 3), ("c15", 4), ("c16", 5), ("c17", 6), ("c18", 7), ("c19", 8), ("c20", 9), ("c21", 10), ("c22", 11), ("c23", 12), ("c24", 13), ("c25", 14), ("c26", 15), ("c27", 16), ("c28", 17), ("c29", 18), ("c30", 19), ("c31", 20), ("c32", 21), ("c33", 22), ("c34", 23), ("c35", 24), ("c36", 25), ("c37", 26), ("c38", 27), ("c39", 28), ("c40", 29), ("c41", 30), ("c42", 31), ("c43", 32), ("c44", 33), ("c45", 34), ("c46", 35), ("c47", 36), ("c48", 37), ("c49", 38), ("c50", 39), ("c51", 40), ("c52", 41), ("c53", 42), ("c54", 43), ("c55", 44), ("c56", 45), ("c57", 46), ("c58", 47), ("c59", 48), ("c60", 49))

cmEthernetAccPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1), )
if mibBuilder.loadTexts: cmEthernetAccPortTable.setStatus('current')
cmEthernetAccPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"))
if mibBuilder.loadTexts: cmEthernetAccPortEntry.setStatus('current')
cmEthernetAccPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortIndex.setStatus('current')
cmEthernetAccPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortIfIndex.setStatus('current')
cmEthernetAccPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortEntityIndex.setStatus('current')
cmEthernetAccPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortAdminState.setStatus('current')
cmEthernetAccPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOperationalState.setStatus('current')
cmEthernetAccPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSecondaryState.setStatus('current')
cmEthernetAccPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortMTU.setStatus('current')
cmEthernetAccPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 8), EthernetMediaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortMediaType.setStatus('current')
cmEthernetAccPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 9), EthernetPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortConfigSpeed.setStatus('current')
cmEthernetAccPortNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 10), EthernetPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortNegotiatedSpeed.setStatus('current')
cmEthernetAccPortMDIXType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 11), CmEthernetMDIXType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortMDIXType.setStatus('current')
cmEthernetAccPortJumboFramesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortJumboFramesEnabled.setStatus('current')
cmEthernetAccPortSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpVendorName.setStatus('current')
cmEthernetAccPortSfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpPartNumber.setStatus('current')
cmEthernetAccPortSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpSerialNumber.setStatus('current')
cmEthernetAccPortSfpDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpDateOfManufacture.setStatus('current')
cmEthernetAccPortSfpConnectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 17), SfpConnectorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpConnectorValue.setStatus('current')
cmEthernetAccPortInitiateDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 18), CmEthernetDiagAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortInitiateDiag.setStatus('current')
cmEthernetAccPortDiagnosePair1Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 19), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair1Cond.setStatus('current')
cmEthernetAccPortDiagnosePair2Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 20), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair2Cond.setStatus('current')
cmEthernetAccPortDiagnosePair3Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 21), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair3Cond.setStatus('current')
cmEthernetAccPortDiagnosePair4Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 22), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair4Cond.setStatus('current')
cmEthernetAccPortDiagnoseAutoNegCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 23), CmDiagAutoNegCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseAutoNegCond.setStatus('current')
cmEthernetAccPortDiagnoseLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 24), CmDiagLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseLpbkCond.setStatus('current')
cmEthernetAccPortDiagnoseEfmLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 25), CmDiagEfmOamLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseEfmLpbkCond.setStatus('current')
cmEthernetAccPortDiagnoseResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseResult.setStatus('current')
cmEthernetAccPortDiagnoseTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 27), CmDiagTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseTestStatus.setStatus('current')
cmEthernetAccPortDiagnoseTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseTestTime.setStatus('current')
cmEthernetAccPortLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 29), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackConfig.setStatus('current')
cmEthernetAccPortLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 30), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackStatus.setStatus('current')
cmEthernetAccPortLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTime.setStatus('current')
cmEthernetAccPortLoopbackSwapSADA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 32), CmSwapSADAType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackSwapSADA.setStatus('current')
cmEthernetAccPortOuterVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopbackMask.setStatus('current')
cmEthernetAccPortOuterVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopback1.setStatus('current')
cmEthernetAccPortOuterVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopback2.setStatus('current')
cmEthernetAccPortOuterVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopback3.setStatus('current')
cmEthernetAccPortInnerVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopbackMask.setStatus('current')
cmEthernetAccPortInnerVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopback1.setStatus('current')
cmEthernetAccPortInnerVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopback2.setStatus('current')
cmEthernetAccPortInnerVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopback3.setStatus('current')
cmEthernetAccPortLinkLossFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdEnabled.setStatus('current')
cmEthernetAccPortLinkLossFwdSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 42), CmLinkLossFwdSignalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdSignalType.setStatus('deprecated')
cmEthernetAccPortLinkLossFwdTriggerTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 43), CmLinkLossFwdTriggerTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdTriggerTypes.setStatus('current')
cmEthernetAccPortLinkLossFwdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdDelay.setStatus('current')
cmEthernetAccPortLinkLossFwdActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 45), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdActive.setStatus('current')
cmEthernetAccPortLinkLossFwdPartnerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 46), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdPartnerEnabled.setStatus('current')
cmEthernetAccPortLinkLossFwdLocalLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdLocalLinkId.setStatus('current')
cmEthernetAccPortLinkLossFwdRemoteLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 48), CmRemoteLinkIds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdRemoteLinkIds.setStatus('current')
cmEthernetAccPortOamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamId.setStatus('current')
cmEthernetAccPortOamAdminDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOamAdminDisposition.setStatus('deprecated')
cmEthernetAccPortOamDiscoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 51), CmOamDiscoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamDiscoveryState.setStatus('current')
cmEthernetAccPortOamLocalVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 52), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalVarRtrvsEnabled.setStatus('current')
cmEthernetAccPortOamLocalLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 53), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalLinkEventsEnabled.setStatus('current')
cmEthernetAccPortOamLocalOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 54), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalOamLoopbacksSupported.setStatus('current')
cmEthernetAccPortOamLocalUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 55), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalUnidirSupportEnabled.setStatus('current')
cmEthernetAccPortOamLocalMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalMaxPDUSize.setStatus('current')
cmEthernetAccPortOamLocalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 57), CmOamMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalMode.setStatus('current')
cmEthernetAccPortOamRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 58), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteMacAddress.setStatus('current')
cmEthernetAccPortOamRemoteVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 59), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteVarRtrvsEnabled.setStatus('current')
cmEthernetAccPortOamRemoteLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 60), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteLinkEventsEnabled.setStatus('current')
cmEthernetAccPortOamRemoteOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 61), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteOamLoopbacksSupported.setStatus('current')
cmEthernetAccPortOamRemoteUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 62), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteUnidirSupportEnabled.setStatus('current')
cmEthernetAccPortOamRemoteMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteMaxPDUSize.setStatus('current')
cmEthernetAccPortOamRemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 64), CmOamMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteMode.setStatus('current')
cmEthernetAccPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 65), CmEthernetSvcPortMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortMode.setStatus('current')
cmEthernetAccPortSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 66), CmEthernetSvcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortSvcType.setStatus('current')
cmEthernetAccPortRxPauseDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 67), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortRxPauseDisposition.setStatus('deprecated')
cmEthernetAccPortTxPauseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 68), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortTxPauseEnabled.setStatus('current')
cmEthernetAccPortAfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 69), CmAfpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortAfpType.setStatus('current')
cmEthernetAccPortMDIXStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 70), CmEthernetMDIXType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortMDIXStatus.setStatus('current')
cmEthernetAccPortSfpReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpReach.setStatus('current')
cmEthernetAccPortSfpLaserWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpLaserWaveLength.setStatus('current')
cmEthernetAccPortSfpMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 73), SfpMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpMediaType.setStatus('current')
cmEthernetAccPortOamEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOamEnabled.setStatus('current')
cmEthernetAccPortOamAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 75), CmOamAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamAdminState.setStatus('current')
cmEthernetAccPortShapingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 76), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortShapingEnabled.setStatus('current')
cmEthernetAccPortShapedSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 77), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortShapedSpeedLo.setStatus('current')
cmEthernetAccPortShapedSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 78), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortShapedSpeedHi.setStatus('current')
cmEthernetAccPortQinQEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 79), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortQinQEtherType.setStatus('current')
cmEthernetAccPortRxPauseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 80), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortRxPauseEnabled.setStatus('current')
cmEthernetAccPortAutoDiagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 81), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortAutoDiagEnabled.setStatus('current')
cmEthernetAccPortLinkLossFwdTxActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 82), CmLinkLossFwdTxActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdTxActionType.setStatus('current')
cmEthernetAccPortLinkLossFwdRxRLDLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 83), CmRemoteLinkIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdRxRLDLinkIds.setStatus('current')
cmEthernetAccPortN2AVlanTrunkingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 84), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortN2AVlanTrunkingEnabled.setStatus('current')
cmEthernetAccPortA2NPushPVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 85), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortA2NPushPVIDEnabled.setStatus('current')
cmEthernetAccPortN2APopPVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 86), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortN2APopPVIDEnabled.setStatus('current')
cmEthernetAccPortPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 87), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPortVlanId.setStatus('current')
cmEthernetAccPortPortVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 88), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPortVlanPriority.setStatus('current')
cmEthernetAccPortPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 89), PriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPrioMapMode.setStatus('current')
cmEthernetAccPortSyncEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 90), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortSyncEEnabled.setStatus('current')
cmEthernetAccPortQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 91), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortQLModeEnabled.setStatus('current')
cmEthernetAccPortExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 92), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortExpectedQL.setStatus('current')
cmEthernetAccPortAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 93), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortAssumedQL.setStatus('current')
cmEthernetAccPortReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 94), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortReceivedQL.setStatus('current')
cmEthernetAccPortTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 95), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortTransmitQL.setStatus('current')
cmEthernetAccPortDeiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 96), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortDeiEnable.setStatus('deprecated')
cmEthernetAccPortPcpDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 97), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPcpDEEncType.setStatus('current')
cmEthernetAccPortPcpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 98), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPcpDEPairsAction.setStatus('current')
cmEthernetAccPortSSMRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 99), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSSMRemoteMacAddress.setStatus('current')
cmEthernetAccPortXgePhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 100), XgePhyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortXgePhyType.setStatus('current')
cmEthernetAccPortLoopbackSourceMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 101), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackSourceMacControlEnabled.setStatus('current')
cmEthernetAccPortLoopbackDestMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 102), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackDestMacControlEnabled.setStatus('current')
cmEthernetAccPortLoopbackSourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 103), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackSourceMacAddress.setStatus('current')
cmEthernetAccPortLoopbackDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 104), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackDestMacAddress.setStatus('current')
cmEthernetAccPortLoopbackBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 105), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackBlockingEnabled.setStatus('current')
cmEthernetAccPortRxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 106), RxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortRxDeiAction.setStatus('current')
cmEthernetAccPortTxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 107), TxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortTxDeiAction.setStatus('current')
cmEthernetAccPortRxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 108), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortRxDeiOuterTagType.setStatus('current')
cmEthernetAccPortTxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 109), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortTxDeiOuterTagType.setStatus('current')
cmEthernetAccPortLaserWDMChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 110), SfpChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLaserWDMChannel.setStatus('current')
cmEthernetAccPortLaserIsTunable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 111), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLaserIsTunable.setStatus('current')
cmEthernetAccPortLaserFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 112), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLaserFrequency.setStatus('current')
cmEthernetAccPortMediaTypeAutoSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 113), EthernetMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortMediaTypeAutoSelected.setStatus('current')
cmEthernetAccPortLowLatencyQueuingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 114), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLowLatencyQueuingEnabled.setStatus('current')
cmEthernetAccPortA2nSwapPriorityVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 115), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortA2nSwapPriorityVIDEnabled.setStatus('current')
cmEthernetAccPortN2aSwapPriorityVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 116), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortN2aSwapPriorityVIDEnabled.setStatus('current')
cmEthernetAccPortSwapPriorityVID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 117), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortSwapPriorityVID.setStatus('current')
cmEthernetAccPortDiagnosticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 118), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosticMacAddress.setStatus('current')
cmEthernetAccPortIngressCOSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 119), VlanTagType().clone('outer-vlantag')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortIngressCOSPriority.setStatus('deprecated')
cmEthernetAccPortDefaultCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 120), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortDefaultCOS.setStatus('deprecated')
cmEthernetAccPortTrafficModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 121), EthernetPortTrafficModel().clone('accessFlow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortTrafficModel.setStatus('current')
cmEthernetAccPortIndependentShaperBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 122), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortIndependentShaperBW.setStatus('current')
cmEthernetAccPortJdsuLoopbackSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 123), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortJdsuLoopbackSrcIp.setStatus('current')
cmEthernetAccPortWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 124), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortWfqSegmentationCOS.setStatus('current')
cmEthernetAccPortWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 125), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortWfqGroupCOS.setStatus('current')
cmEthernetAccPortWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 126), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortWfqGroupEirLo.setStatus('current')
cmEthernetAccPortWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 127), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortWfqGroupEirHi.setStatus('current')
cmEthernetAccPortSilentStartControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 128), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortSilentStartControl.setStatus('current')
cmEthernetAccPortSfpLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 129), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpLinkLength.setStatus('current')
cmEthernetAccPortOuterTagTpidOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 130), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterTagTpidOverride.setStatus('current')
cmEthernetAccPortOuterTagTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 131), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterTagTpid.setStatus('current')
cmEthernetAccPortSfpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 132), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpName.setStatus('current')
cmEthernetAccPortSfpHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 133), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpHardwareRevision.setStatus('current')
cmEthernetAccPortPersistentLoopbackControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 134), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPersistentLoopbackControl.setStatus('current')
cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 135), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl.setStatus('current')
cmEthernetAccPortLoopbackTestReflectorIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 136), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv4Address.setStatus('current')
cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 137), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl.setStatus('current')
cmEthernetAccPortLoopbackTestReflectorIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 138), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv6Address.setStatus('current')
cmEthernetAccPortPowerdDeviceDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 139), ToggleValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPowerdDeviceDetection.setStatus('current')
cmEthernetAccPortPoEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 140), PoEStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortPoEStatus.setStatus('current')
cmEthernetAccPortSfpIdentifierValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 141), SfpIdentifierValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpIdentifierValue.setStatus('current')
cmEthernetAccPortCpdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2), )
if mibBuilder.loadTexts: cmEthernetAccPortCpdTable.setStatus('current')
cmEthernetAccPortCpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortCpdIndex"))
if mibBuilder.loadTexts: cmEthernetAccPortCpdEntry.setStatus('current')
cmEthernetAccPortCpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortCpdIndex.setStatus('current')
cmEthernetAccPortCpdFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 2), CmControlProtocolFilterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortCpdFilterType.setStatus('current')
cmEthernetAccPortCpdFilterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortCpdFilterDescr.setStatus('current')
cmEthernetAccPortCpdDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdDispType.setStatus('current')
cmEthernetAccPortCpdMacAddressMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdMacAddressMatch.setStatus('current')
cmEthernetAccPortCpdMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdMacAddressMask.setStatus('current')
cmEthernetAccPortCpdEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdEthertype.setStatus('current')
cmEthernetAccPortCpdEthertypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdEthertypeMask.setStatus('current')
cmEthernetAccPortCpdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdSubtype.setStatus('current')
cmEthernetAccPortCpdSubtypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdSubtypeMask.setStatus('current')
cmEthernetAccPortClbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3), )
if mibBuilder.loadTexts: cmEthernetAccPortClbTable.setStatus('current')
cmEthernetAccPortClbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortClbIndex"))
if mibBuilder.loadTexts: cmEthernetAccPortClbEntry.setStatus('current')
cmEthernetAccPortClbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortClbIndex.setStatus('current')
cmEthernetAccPortClbEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortClbEnabled.setStatus('current')
cmEthernetAccPortClbLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortClbLength.setStatus('current')
cmEthernetAccPortClbDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortClbDescr.setStatus('current')
cmFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4), )
if mibBuilder.loadTexts: cmFlowTable.setStatus('current')
cmFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"))
if mibBuilder.loadTexts: cmFlowEntry.setStatus('current')
cmFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowIndex.setStatus('current')
cmFlowCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCircuitName.setStatus('current')
cmFlowAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowAdminState.setStatus('current')
cmFlowOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowOperationalState.setStatus('current')
cmFlowSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowSecondaryState.setStatus('current')
cmFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 6), CmFlowType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowType.setStatus('current')
cmFlowMultiCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowMultiCOS.setStatus('current')
cmFlowA2NCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowA2NCIR.setStatus('current')
cmFlowA2NEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowA2NEIR.setStatus('current')
cmFlowN2ARateLimitingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2ARateLimitingEnabled.setStatus('current')
cmFlowN2ACIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2ACIR.setStatus('current')
cmFlowN2AEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2AEIR.setStatus('current')
cmFlowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 13), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowStorageType.setStatus('current')
cmFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowRowStatus.setStatus('current')
cmFlowTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 15), FlowTrafficType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowTrafficType.setStatus('current')
cmFlowCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCOS.setStatus('current')
cmFlowVlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowVlanMemberList.setStatus('current')
cmFlowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 18), FlowVlanActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowAction.setStatus('current')
cmFlowActionVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowActionVlan.setStatus('current')
cmFlowUntaggedMemberEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowUntaggedMemberEnabled.setStatus('current')
cmFlowA2NCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowA2NCIRHi.setStatus('current')
cmFlowA2NEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowA2NEIRHi.setStatus('current')
cmFlowN2ACIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2ACIRHi.setStatus('current')
cmFlowN2AEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2AEIRHi.setStatus('current')
cmFlowHCOSMgmtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 25), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowHCOSMgmtEnabled.setStatus('current')
cmFlowGuaranteedA2NBandwidthLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowGuaranteedA2NBandwidthLo.setStatus('current')
cmFlowGuaranteedA2NBandwidthHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowGuaranteedA2NBandwidthHi.setStatus('current')
cmFlowMaximumA2NBandwidthLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowMaximumA2NBandwidthLo.setStatus('current')
cmFlowMaximumA2NBandwidthHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowMaximumA2NBandwidthHi.setStatus('current')
cmFlowCTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 30), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCTagControl.setStatus('current')
cmFlowCTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 31), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCTagVlanId.setStatus('current')
cmFlowCTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 32), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCTagVlanPriority.setStatus('current')
cmFlowCTagMatchRxPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 33), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCTagMatchRxPrio.setStatus('current')
cmFlowSTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 34), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowSTagControl.setStatus('current')
cmFlowSTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 35), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowSTagVlanId.setStatus('current')
cmFlowSTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 36), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowSTagVlanPriority.setStatus('current')
cmFlowOuterTagPrioEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 37), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowOuterTagPrioEnabled.setStatus('current')
cmFlowN2ACOSPriorityTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 38), VlanTagType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2ACOSPriorityTagType.setStatus('current')
cmFlowESFramesLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowESFramesLossThreshold.setStatus('current')
cmFlowSESFramesLossThresholdRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowSESFramesLossThresholdRatio.setStatus('current')
cmFlowPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 41), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPolicingEnabled.setStatus('current')
cmFlowPreserveSTagProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 42), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPreserveSTagProperties.setStatus('current')
cmFlowInnerTagPrioEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 43), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowInnerTagPrioEnabled.setStatus('current')
cmFlowN2AOuterTagPrioEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 44), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2AOuterTagPrioEnabled.setStatus('current')
cmFlowA2NShapingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 45), ShapingType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowA2NShapingType.setStatus('current')
cmFlowN2AShapingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 46), ShapingType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2AShapingType.setStatus('current')
cmFlowSTagMatchRxPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 47), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowSTagMatchRxPrio.setStatus('current')
cmFlowAutoBandwidthConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 48), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowAutoBandwidthConfigEnabled.setStatus('current')
cmFlowPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 49), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPort1.setStatus('current')
cmFlowPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 50), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPort2.setStatus('current')
cmFlowPolicingControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 51), PolicingControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPolicingControl.setStatus('current')
cmFlowAutoCIRPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowAutoCIRPercentage.setStatus('current')
cmFlowLoopAvoidanceObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 53), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowLoopAvoidanceObject.setStatus('current')
cmFlowConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 54), FlowConfigType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowConfigType.setStatus('current')
cmFlowN2NForwardingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 55), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2NForwardingEnabled.setStatus('current')
cmFlowA2NMulticastRateLimitControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 56), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NMulticastRateLimitControl.setStatus('current')
cmFlowA2NMulticastRateLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NMulticastRateLimitLo.setStatus('current')
cmFlowA2NMulticastRateLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 58), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NMulticastRateLimitHi.setStatus('current')
cmFlowA2NBroadcastRateLimitControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NBroadcastRateLimitControl.setStatus('current')
cmFlowA2NBroadcastRateLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NBroadcastRateLimitLo.setStatus('current')
cmFlowA2NBroadcastRateLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NBroadcastRateLimitHi.setStatus('current')
cmFlowA2NCombinedRateLimitControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 62), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NCombinedRateLimitControl.setStatus('current')
cmFlowA2NCombinedRateLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NCombinedRateLimitLo.setStatus('current')
cmFlowA2NCombinedRateLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 64), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NCombinedRateLimitHi.setStatus('current')
cmFlowRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 65), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowRefPrioMapProfile.setStatus('current')
cmFlowRefEoMplsPwObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 66), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowRefEoMplsPwObject.setStatus('current')
cmFlowRefN2APrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 67), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowRefN2APrioMapProfile.setStatus('current')
cmFlowSecureBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 68), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowSecureBlockingEnabled.setStatus('current')
cmFlowRefConnectGuardFlowList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 69), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowRefConnectGuardFlowList.setStatus('current')
cmFlowSecureStateList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 70), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowSecureStateList.setStatus('current')
cmFlowIndependentA2NShaperBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 71), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowIndependentA2NShaperBW.setStatus('current')
cmFlowWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowWfqSegmentationCOS.setStatus('current')
cmFlowWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowWfqGroupCOS.setStatus('current')
cmFlowWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 74), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowWfqGroupEirLo.setStatus('current')
cmFlowWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 75), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowWfqGroupEirHi.setStatus('current')
cmFlowCpdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5), )
if mibBuilder.loadTexts: cmFlowCpdTable.setStatus('current')
cmFlowCpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmFlowCpdIndex"))
if mibBuilder.loadTexts: cmFlowCpdEntry.setStatus('current')
cmFlowCpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowCpdIndex.setStatus('current')
cmFlowCpdFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 2), CmControlProtocolFilterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowCpdFilterType.setStatus('current')
cmFlowCpdFilterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowCpdFilterDescr.setStatus('current')
cmFlowCpdDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdDispType.setStatus('current')
cmFlowCpdMacAddressMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdMacAddressMatch.setStatus('current')
cmFlowCpdMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdMacAddressMask.setStatus('current')
cmFlowCpdEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdEthertype.setStatus('current')
cmFlowCpdEthertypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdEthertypeMask.setStatus('current')
cmFlowCpdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdSubtype.setStatus('current')
cmFlowCpdSubtypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdSubtypeMask.setStatus('current')
cmQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6), )
if mibBuilder.loadTexts: cmQosShaperTable.setStatus('current')
cmQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperTypeIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperIndex"))
if mibBuilder.loadTexts: cmQosShaperEntry.setStatus('current')
cmQosShaperTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperTypeIndex.setStatus('current')
cmQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperIndex.setStatus('current')
cmQosShaperDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 3), TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperDirection.setStatus('current')
cmQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperAdminState.setStatus('current')
cmQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperOperationalState.setStatus('current')
cmQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperSecondaryState.setStatus('current')
cmQosShaperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperCIR.setStatus('current')
cmQosShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperCBS.setStatus('current')
cmQosShaperEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperEIR.setStatus('current')
cmQosShaperEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperEBS.setStatus('current')
cmQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperBufferSize.setStatus('current')
cmQosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 12), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperStorageType.setStatus('current')
cmQosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperRowStatus.setStatus('current')
cmQosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperCOS.setStatus('current')
cmQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperCIRHi.setStatus('current')
cmQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperEIRHi.setStatus('current')
cmQosShaperSoamCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperSoamCIRLo.setStatus('current')
cmQosShaperSoamCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperSoamCIRHi.setStatus('current')
cmQosShaperSoamEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperSoamEIRLo.setStatus('current')
cmQosShaperSoamEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperSoamEIRHi.setStatus('current')
cmQosShaperWredGreenMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredGreenMinQueueThreshold.setStatus('current')
cmQosShaperWredGreenMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredGreenMaxQueueThreshold.setStatus('current')
cmQosShaperWredGreenDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredGreenDropProbability.setStatus('current')
cmQosShaperWredYellowMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredYellowMinQueueThreshold.setStatus('current')
cmQosShaperWredYellowMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 25), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredYellowMaxQueueThreshold.setStatus('current')
cmQosShaperWredYellowDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 26), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredYellowDropProbability.setStatus('current')
cmQosShaperAvgFrameSizeBeforeFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperAvgFrameSizeBeforeFragment.setStatus('current')
cmQosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperWfqWeight.setStatus('current')
cmEthernetNetPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7), )
if mibBuilder.loadTexts: cmEthernetNetPortTable.setStatus('current')
cmEthernetNetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"))
if mibBuilder.loadTexts: cmEthernetNetPortEntry.setStatus('current')
cmEthernetNetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortIndex.setStatus('current')
cmEthernetNetPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortIfIndex.setStatus('current')
cmEthernetNetPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortEntityIndex.setStatus('current')
cmEthernetNetPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortAdminState.setStatus('current')
cmEthernetNetPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOperationalState.setStatus('current')
cmEthernetNetPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSecondaryState.setStatus('current')
cmEthernetNetPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortMTU.setStatus('current')
cmEthernetNetPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 8), EthernetMediaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortMediaType.setStatus('current')
cmEthernetNetPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 9), EthernetPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortConfigSpeed.setStatus('current')
cmEthernetNetPortNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 10), EthernetPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortNegotiatedSpeed.setStatus('current')
cmEthernetNetPortMDIXType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 11), CmEthernetMDIXType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortMDIXType.setStatus('current')
cmEthernetNetPortJumboFramesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortJumboFramesEnabled.setStatus('current')
cmEthernetNetPortSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpVendorName.setStatus('current')
cmEthernetNetPortSfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpPartNumber.setStatus('current')
cmEthernetNetPortSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpSerialNumber.setStatus('current')
cmEthernetNetPortSfpDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpDateOfManufacture.setStatus('current')
cmEthernetNetPortSfpConnectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 17), SfpConnectorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpConnectorValue.setStatus('current')
cmEthernetNetPortInitiateDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 18), CmEthernetDiagAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInitiateDiag.setStatus('current')
cmEthernetNetPortDiagnosePair1Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 19), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair1Cond.setStatus('current')
cmEthernetNetPortDiagnosePair2Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 20), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair2Cond.setStatus('current')
cmEthernetNetPortDiagnosePair3Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 21), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair3Cond.setStatus('current')
cmEthernetNetPortDiagnosePair4Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 22), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair4Cond.setStatus('current')
cmEthernetNetPortDiagnoseAutoNegCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 23), CmDiagAutoNegCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseAutoNegCond.setStatus('current')
cmEthernetNetPortDiagnoseLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 24), CmDiagLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseLpbkCond.setStatus('current')
cmEthernetNetPortDiagnoseEfmLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 25), CmDiagEfmOamLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseEfmLpbkCond.setStatus('current')
cmEthernetNetPortDiagnoseResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseResult.setStatus('current')
cmEthernetNetPortDiagnoseTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 27), CmDiagTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseTestStatus.setStatus('current')
cmEthernetNetPortDiagnoseTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseTestTime.setStatus('current')
cmEthernetNetPortLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 29), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackConfig.setStatus('current')
cmEthernetNetPortLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 30), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackStatus.setStatus('current')
cmEthernetNetPortLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTime.setStatus('current')
cmEthernetNetPortLoopbackSwapSADA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 32), CmSwapSADAType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackSwapSADA.setStatus('current')
cmEthernetNetPortOuterVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopbackMask.setStatus('current')
cmEthernetNetPortOuterVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopback1.setStatus('current')
cmEthernetNetPortOuterVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopback2.setStatus('current')
cmEthernetNetPortOuterVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopback3.setStatus('current')
cmEthernetNetPortInnerVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopbackMask.setStatus('current')
cmEthernetNetPortInnerVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopback1.setStatus('current')
cmEthernetNetPortInnerVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopback2.setStatus('current')
cmEthernetNetPortInnerVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopback3.setStatus('current')
cmEthernetNetPortLinkLossFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdEnabled.setStatus('current')
cmEthernetNetPortLinkLossFwdSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 42), CmLinkLossFwdSignalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdSignalType.setStatus('deprecated')
cmEthernetNetPortLinkLossFwdTriggerTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 43), CmLinkLossFwdTriggerTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdTriggerTypes.setStatus('current')
cmEthernetNetPortLinkLossFwdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdDelay.setStatus('current')
cmEthernetNetPortLinkLossFwdActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 45), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdActive.setStatus('current')
cmEthernetNetPortLinkLossFwdPartnerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 46), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdPartnerEnabled.setStatus('current')
cmEthernetNetPortLinkLossFwdLocalLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdLocalLinkId.setStatus('current')
cmEthernetNetPortLinkLossFwdRemoteLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 48), CmRemoteLinkIds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdRemoteLinkIds.setStatus('current')
cmEthernetNetPortOamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamId.setStatus('current')
cmEthernetNetPortOamAdminDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOamAdminDisposition.setStatus('deprecated')
cmEthernetNetPortOamDiscoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 51), CmOamDiscoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamDiscoveryState.setStatus('current')
cmEthernetNetPortOamLocalVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 52), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalVarRtrvsEnabled.setStatus('current')
cmEthernetNetPortOamLocalLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 53), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalLinkEventsEnabled.setStatus('current')
cmEthernetNetPortOamLocalOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 54), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalOamLoopbacksSupported.setStatus('current')
cmEthernetNetPortOamLocalUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 55), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalUnidirSupportEnabled.setStatus('current')
cmEthernetNetPortOamLocalMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalMaxPDUSize.setStatus('current')
cmEthernetNetPortOamLocalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 57), CmOamMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalMode.setStatus('current')
cmEthernetNetPortOamRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 58), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteMacAddress.setStatus('current')
cmEthernetNetPortOamRemoteVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 59), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteVarRtrvsEnabled.setStatus('current')
cmEthernetNetPortOamRemoteLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 60), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteLinkEventsEnabled.setStatus('current')
cmEthernetNetPortOamRemoteOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 61), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteOamLoopbacksSupported.setStatus('current')
cmEthernetNetPortOamRemoteUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 62), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteUnidirSupportEnabled.setStatus('current')
cmEthernetNetPortOamRemoteMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteMaxPDUSize.setStatus('current')
cmEthernetNetPortOamRemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 64), CmOamMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteMode.setStatus('current')
cmEthernetNetPortRxPauseDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 65), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortRxPauseDisposition.setStatus('current')
cmEthernetNetPortTxPauseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 66), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortTxPauseEnabled.setStatus('current')
cmEthernetNetPortAfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 67), CmAfpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortAfpType.setStatus('current')
cmEthernetNetPortMDIXStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 68), CmEthernetMDIXType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortMDIXStatus.setStatus('current')
cmEthernetNetPortSfpReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpReach.setStatus('current')
cmEthernetNetPortSfpLaserWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpLaserWaveLength.setStatus('current')
cmEthernetNetPortSfpMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 71), SfpMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpMediaType.setStatus('current')
cmEthernetNetPortOamEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 72), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOamEnabled.setStatus('current')
cmEthernetNetPortOamAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 73), CmOamAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamAdminState.setStatus('current')
cmEthernetNetPortShapingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortShapingEnabled.setStatus('current')
cmEthernetNetPortShapedSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 75), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortShapedSpeedLo.setStatus('current')
cmEthernetNetPortShapedSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 76), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortShapedSpeedHi.setStatus('current')
cmEthernetNetPortQinQEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 77), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortQinQEtherType.setStatus('current')
cmEthernetNetPortLinkLossFwdTxActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 78), CmLinkLossFwdTxActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdTxActionType.setStatus('current')
cmEthernetNetPortLinkLossFwdRxRLDLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 79), CmRemoteLinkIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdRxRLDLinkIds.setStatus('current')
cmEthernetNetPortAutoDiagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 80), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortAutoDiagEnabled.setStatus('current')
cmEthernetNetPortSyncEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 81), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortSyncEEnabled.setStatus('current')
cmEthernetNetPortQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 82), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortQLModeEnabled.setStatus('current')
cmEthernetNetPortExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 83), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortExpectedQL.setStatus('current')
cmEthernetNetPortAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 84), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortAssumedQL.setStatus('current')
cmEthernetNetPortReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 85), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortReceivedQL.setStatus('current')
cmEthernetNetPortTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 86), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortTransmitQL.setStatus('current')
cmEthernetNetPortPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 87), PriorityMapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortPrioMapMode.setStatus('current')
cmEthernetNetPortDeiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 88), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortDeiEnable.setStatus('deprecated')
cmEthernetNetPortPcpDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 89), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPcpDEEncType.setStatus('current')
cmEthernetNetPortPcpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 90), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPcpDEPairsAction.setStatus('current')
cmEthernetNetPortSSMRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 91), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSSMRemoteMacAddress.setStatus('current')
cmEthernetNetPortXgePhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 92), XgePhyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXgePhyType.setStatus('current')
cmEthernetNetPortLoopbackSourceMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 93), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackSourceMacControlEnabled.setStatus('current')
cmEthernetNetPortLoopbackDestMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 94), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackDestMacControlEnabled.setStatus('current')
cmEthernetNetPortLoopbackSourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 95), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackSourceMacAddress.setStatus('current')
cmEthernetNetPortLoopbackDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 96), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackDestMacAddress.setStatus('current')
cmEthernetNetPortLoopbackBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 97), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackBlockingEnabled.setStatus('current')
cmEthernetNetPortRxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 98), RxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortRxDeiAction.setStatus('current')
cmEthernetNetPortTxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 99), TxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortTxDeiAction.setStatus('current')
cmEthernetNetPortRxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 100), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortRxDeiOuterTagType.setStatus('current')
cmEthernetNetPortTxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 101), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortTxDeiOuterTagType.setStatus('current')
cmEthernetNetPortLaserWDMChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 102), SfpChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLaserWDMChannel.setStatus('current')
cmEthernetNetPortLaserIsTunable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 103), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLaserIsTunable.setStatus('current')
cmEthernetNetPortLaserFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 104), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLaserFrequency.setStatus('current')
cmEthernetNetPortMediaTypeAutoSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 105), EthernetMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortMediaTypeAutoSelected.setStatus('current')
cmEthernetNetPortLowLatencyQueuingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 106), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLowLatencyQueuingEnabled.setStatus('current')
cmEthernetNetPortDiagnosticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 107), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosticMacAddress.setStatus('current')
cmEthernetNetPortIngressCOSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 108), VlanTagType().clone('outer-vlantag')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortIngressCOSPriority.setStatus('deprecated')
cmEthernetNetPortDefaultCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 109), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortDefaultCOS.setStatus('deprecated')
cmEthernetNetPortTrafficModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 110), EthernetPortTrafficModel().clone('accessFlow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortTrafficModel.setStatus('current')
cmEthernetNetPortIndependentShaperBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 111), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortIndependentShaperBW.setStatus('current')
cmEthernetNetPortExpDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 112), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortExpDEEncType.setStatus('current')
cmEthernetNetPortExpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 113), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortExpDEPairsAction.setStatus('current')
cmEthernetNetPortIpPrecDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 114), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortIpPrecDEEncType.setStatus('current')
cmEthernetNetPortIpPrecDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 115), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortIpPrecDEPairsAction.setStatus('current')
cmEthernetNetPortEncapPcpDEEncodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 116), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortEncapPcpDEEncodingType.setStatus('current')
cmEthernetNetPortEncapPcpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 117), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortEncapPcpDEPairsAction.setStatus('current')
cmEthernetNetPortJdsuLoopbackSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 118), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortJdsuLoopbackSrcIp.setStatus('current')
cmEthernetNetPortWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 119), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortWfqSegmentationCOS.setStatus('current')
cmEthernetNetPortWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 120), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortWfqGroupCOS.setStatus('current')
cmEthernetNetPortWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 121), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortWfqGroupEirLo.setStatus('current')
cmEthernetNetPortWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 122), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortWfqGroupEirHi.setStatus('current')
cmEthernetNetPortSilentStartControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 123), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortSilentStartControl.setStatus('current')
cmEthernetNetPortSfpLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 124), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpLinkLength.setStatus('current')
cmEthernetNetPortOuterTagTpidOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 125), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterTagTpidOverride.setStatus('current')
cmEthernetNetPortOuterTagTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 126), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterTagTpid.setStatus('current')
cmEthernetNetPortSfpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 127), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpName.setStatus('current')
cmEthernetNetPortSfpHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 128), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpHardwareRevision.setStatus('current')
cmEthernetNetPortPersistentLoopbackControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 129), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPersistentLoopbackControl.setStatus('current')
cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 130), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl.setStatus('current')
cmEthernetNetPortLoopbackTestReflectorIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 131), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv4Address.setStatus('current')
cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 132), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl.setStatus('current')
cmEthernetNetPortLoopbackTestReflectorIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 133), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv6Address.setStatus('current')
cmEthernetNetPortSfpIdentifierValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 134), SfpIdentifierValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpIdentifierValue.setStatus('current')
cmEthernetNetPortCpdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8), )
if mibBuilder.loadTexts: cmEthernetNetPortCpdTable.setStatus('current')
cmEthernetNetPortCpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortCpdIndex"))
if mibBuilder.loadTexts: cmEthernetNetPortCpdEntry.setStatus('current')
cmEthernetNetPortCpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortCpdIndex.setStatus('current')
cmEthernetNetPortCpdFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 2), CmControlProtocolFilterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortCpdFilterType.setStatus('current')
cmEthernetNetPortCpdFilterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortCpdFilterDescr.setStatus('current')
cmEthernetNetPortCpdDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdDispType.setStatus('current')
cmEthernetNetPortCpdMacAddressMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdMacAddressMatch.setStatus('current')
cmEthernetNetPortCpdMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdMacAddressMask.setStatus('current')
cmEthernetNetPortCpdEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdEthertype.setStatus('current')
cmEthernetNetPortCpdEthertypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdEthertypeMask.setStatus('current')
cmEthernetNetPortCpdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdSubtype.setStatus('current')
cmEthernetNetPortCpdSubtypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdSubtypeMask.setStatus('current')
cmEthernetMgmtPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9), )
if mibBuilder.loadTexts: cmEthernetMgmtPortTable.setStatus('current')
cmEthernetMgmtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetMgmtPortIndex"))
if mibBuilder.loadTexts: cmEthernetMgmtPortEntry.setStatus('current')
cmEthernetMgmtPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortIndex.setStatus('current')
cmEthernetMgmtPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortEntityIndex.setStatus('current')
cmEthernetMgmtPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetMgmtPortAdminState.setStatus('current')
cmEthernetMgmtPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortOperationalState.setStatus('current')
cmEthernetMgmtPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortSecondaryState.setStatus('current')
cmEthernetMgmtPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortMTU.setStatus('current')
cmEthernetMgmtPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 7), EthernetPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetMgmtPortConfigSpeed.setStatus('current')
cmEthernetMgmtPortNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 8), EthernetPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortNegotiatedSpeed.setStatus('current')
cmEthernetMgmtPortMDIXType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 9), CmEthernetMDIXType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetMgmtPortMDIXType.setStatus('current')
cmEthernetMgmtPortMDIXStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 10), CmEthernetMDIXType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortMDIXStatus.setStatus('current')
cmEthernetMgmtPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 11), EthernetMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortMediaType.setStatus('current')
cmPrioMapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10), )
if mibBuilder.loadTexts: cmPrioMapTable.setStatus('current')
cmPrioMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmPrioMapIndex"))
if mibBuilder.loadTexts: cmPrioMapEntry.setStatus('current')
cmPrioMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmPrioMapIndex.setStatus('current')
cmPrioMapInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapInPriority.setStatus('current')
cmPrioMapXTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 3), PrioMapControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapXTagControl.setStatus('current')
cmPrioMapXTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapXTagPriority.setStatus('current')
cmPrioMapCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapCOS.setStatus('current')
cmPrioMapOuterTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 6), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapOuterTagPriority.setStatus('current')
cmPrioMapInnerTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 7), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapInnerTagPriority.setStatus('current')
cmQosFlowPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11), )
if mibBuilder.loadTexts: cmQosFlowPolicerTable.setStatus('current')
cmQosFlowPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmQosFlowPolicerTypeIndex"), (0, "CM-FACILITY-MIB", "cmQosFlowPolicerIndex"))
if mibBuilder.loadTexts: cmQosFlowPolicerEntry.setStatus('current')
cmQosFlowPolicerTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerTypeIndex.setStatus('current')
cmQosFlowPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerIndex.setStatus('current')
cmQosFlowPolicerDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 3), TrafficDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerDirection.setStatus('current')
cmQosFlowPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerAdminState.setStatus('current')
cmQosFlowPolicerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerOperationalState.setStatus('current')
cmQosFlowPolicerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerSecondaryState.setStatus('current')
cmQosFlowPolicerCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerCIRLo.setStatus('current')
cmQosFlowPolicerCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerCIRHi.setStatus('current')
cmQosFlowPolicerEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerEIRLo.setStatus('current')
cmQosFlowPolicerEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerEIRHi.setStatus('current')
cmQosFlowPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerCBS.setStatus('current')
cmQosFlowPolicerEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerEBS.setStatus('current')
cmQosFlowPolicerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 13), PolicerAlgorithmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerAlgorithm.setStatus('current')
cmQosFlowPolicerColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 14), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerColorMode.setStatus('current')
cmQosFlowPolicerColorMarkingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerColorMarkingFlag.setStatus('deprecated')
cmQosFlowPolicerCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerCouplingFlag.setStatus('current')
cmQosFlowPolicerAssociatedShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 17), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerAssociatedShaper.setStatus('current')
cmQosFlowPolicerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 18), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerStorageType.setStatus('current')
cmQosFlowPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerRowStatus.setStatus('current')
cmQosFlowPolicerCIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerCIRMaxHi.setStatus('current')
cmQosFlowPolicerCIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerCIRMaxLo.setStatus('current')
cmQosFlowPolicerEIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerEIRMaxHi.setStatus('current')
cmQosFlowPolicerEIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerEIRMaxLo.setStatus('current')
cmQosFlowPolicerEnvelopeObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 24), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerEnvelopeObject.setStatus('current')
cmQosFlowPolicerRank = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerRank.setStatus('current')
cmQosFlowPolicerPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerPolicingEnabled.setStatus('current')
cmAccPortQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12), )
if mibBuilder.loadTexts: cmAccPortQosShaperTable.setStatus('current')
cmAccPortQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmAccPortQosShaperIndex"))
if mibBuilder.loadTexts: cmAccPortQosShaperEntry.setStatus('current')
cmAccPortQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperIndex.setStatus('current')
cmAccPortQosShaperDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 2), TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperDirection.setStatus('current')
cmAccPortQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortQosShaperAdminState.setStatus('current')
cmAccPortQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperOperationalState.setStatus('current')
cmAccPortQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperSecondaryState.setStatus('current')
cmAccPortQosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperCIRLo.setStatus('current')
cmAccPortQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperCIRHi.setStatus('current')
cmAccPortQosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperEIRLo.setStatus('current')
cmAccPortQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperEIRHi.setStatus('current')
cmAccPortQosShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperCBS.setStatus('current')
cmAccPortQosShaperEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperEBS.setStatus('current')
cmAccPortQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperBufferSize.setStatus('current')
cmAccPortQosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperCOS.setStatus('current')
cmAccPortQosShaperSoamCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperSoamCIRLo.setStatus('current')
cmAccPortQosShaperSoamCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperSoamCIRHi.setStatus('current')
cmAccPortQosShaperSoamEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperSoamEIRLo.setStatus('current')
cmAccPortQosShaperSoamEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperSoamEIRHi.setStatus('current')
cmAccPortQosShaperWredGreenMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredGreenMinQueueThreshold.setStatus('current')
cmAccPortQosShaperWredGreenMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredGreenMaxQueueThreshold.setStatus('current')
cmAccPortQosShaperWredGreenDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredGreenDropProbability.setStatus('current')
cmAccPortQosShaperWredYellowMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredYellowMinQueueThreshold.setStatus('current')
cmAccPortQosShaperWredYellowMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredYellowMaxQueueThreshold.setStatus('current')
cmAccPortQosShaperWredYellowDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredYellowDropProbability.setStatus('current')
cmAccPortQosShaperAvgFrameSizeBeforeFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortQosShaperAvgFrameSizeBeforeFragment.setStatus('current')
cmAccPortQosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortQosShaperWfqWeight.setStatus('current')
cmEthernetAccPortCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13), )
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Table.setStatus('current')
cmEthernetAccPortCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Index"))
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Entry.setStatus('current')
cmEthernetAccPortCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Index.setStatus('current')
cmEthernetAccPortCpdV2CiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2CiscoGroupDispType.setStatus('deprecated')
cmEthernetAccPortCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2IslDispType.setStatus('current')
cmEthernetAccPortCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PagpDispType.setStatus('current')
cmEthernetAccPortCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2UdldDispType.setStatus('current')
cmEthernetAccPortCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2CdpDispType.setStatus('current')
cmEthernetAccPortCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2VtpDispType.setStatus('current')
cmEthernetAccPortCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2DtpDispType.setStatus('current')
cmEthernetAccPortCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PvstpPlusDispType.setStatus('current')
cmEthernetAccPortCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2UplinkFastDispType.setStatus('current')
cmEthernetAccPortCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2VlanBridgeDispType.setStatus('current')
cmEthernetAccPortCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2L2PTDispType.setStatus('current')
cmEthernetAccPortCpdV2BridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2BridgeGroupDispType.setStatus('deprecated')
cmEthernetAccPortCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2BPDUDispType.setStatus('current')
cmEthernetAccPortCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PauseDispType.setStatus('current')
cmEthernetAccPortCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LACPDispType.setStatus('current')
cmEthernetAccPortCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LACPMarkerDispType.setStatus('current')
cmEthernetAccPortCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2EfmOamDispType.setStatus('current')
cmEthernetAccPortCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2SSMDispType.setStatus('current')
cmEthernetAccPortCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PortAuthenDispType.setStatus('current')
cmEthernetAccPortCpdV2BridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2BridgeReservedDispType.setStatus('deprecated')
cmEthernetAccPortCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LANBridgesDispType.setStatus('current')
cmEthernetAccPortCpdV2GARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GARPGroupDispType.setStatus('deprecated')
cmEthernetAccPortCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GMRPDispType.setStatus('current')
cmEthernetAccPortCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GVRPDispType.setStatus('current')
cmEthernetAccPortCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GARPDispType.setStatus('current')
cmEthernetAccPortCpdV2LLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LLDPDispType.setStatus('deprecated')
cmEthernetAccPortCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2ELMIDispType.setStatus('current')
cmEthernetAccPortCpdV2L2PTTunnelMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2L2PTTunnelMac.setStatus('current')
cmEthernetAccPortCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac00DispType.setStatus('current')
cmEthernetAccPortCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac01DispType.setStatus('current')
cmEthernetAccPortCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac02DispType.setStatus('current')
cmEthernetAccPortCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac03DispType.setStatus('current')
cmEthernetAccPortCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac04DispType.setStatus('current')
cmEthernetAccPortCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac05DispType.setStatus('current')
cmEthernetAccPortCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac06DispType.setStatus('current')
cmEthernetAccPortCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac07DispType.setStatus('current')
cmEthernetAccPortCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac08DispType.setStatus('current')
cmEthernetAccPortCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac09DispType.setStatus('current')
cmEthernetAccPortCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0ADispType.setStatus('current')
cmEthernetAccPortCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0BDispType.setStatus('current')
cmEthernetAccPortCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0CDispType.setStatus('current')
cmEthernetAccPortCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0DDispType.setStatus('current')
cmEthernetAccPortCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0EDispType.setStatus('current')
cmEthernetAccPortCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0FDispType.setStatus('current')
cmEthernetAccPortCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2NearestLLDPDispType.setStatus('current')
cmEthernetAccPortCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2NonTpmrLLDPDispType.setStatus('current')
cmEthernetAccPortCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2CustomerLLDPDispType.setStatus('current')
cmEthernetAccPortCpdV2PtpUntaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 49), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PtpUntaggedDispType.setStatus('current')
cmEthernetAccPortCpdV2PtpTaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PtpTaggedDispType.setStatus('current')
cmFlowCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14), )
if mibBuilder.loadTexts: cmFlowCpdV2Table.setStatus('current')
cmFlowCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmFlowCpdV2Index"))
if mibBuilder.loadTexts: cmFlowCpdV2Entry.setStatus('current')
cmFlowCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowCpdV2Index.setStatus('current')
cmFlowCpdV2CiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2CiscoGroupDispType.setStatus('deprecated')
cmFlowCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2IslDispType.setStatus('current')
cmFlowCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2PagpDispType.setStatus('current')
cmFlowCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2UdldDispType.setStatus('current')
cmFlowCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2CdpDispType.setStatus('current')
cmFlowCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2VtpDispType.setStatus('current')
cmFlowCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2DtpDispType.setStatus('current')
cmFlowCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2PvstpPlusDispType.setStatus('current')
cmFlowCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2UplinkFastDispType.setStatus('current')
cmFlowCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2VlanBridgeDispType.setStatus('current')
cmFlowCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2L2PTDispType.setStatus('current')
cmFlowCpdV2BridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2BridgeGroupDispType.setStatus('deprecated')
cmFlowCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2BPDUDispType.setStatus('current')
cmFlowCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2PauseDispType.setStatus('current')
cmFlowCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2LACPDispType.setStatus('current')
cmFlowCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2LACPMarkerDispType.setStatus('current')
cmFlowCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2EfmOamDispType.setStatus('current')
cmFlowCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2SSMDispType.setStatus('current')
cmFlowCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2PortAuthenDispType.setStatus('current')
cmFlowCpdV2BridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2BridgeReservedDispType.setStatus('deprecated')
cmFlowCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2LANBridgesDispType.setStatus('current')
cmFlowCpdV2GARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2GARPGroupDispType.setStatus('deprecated')
cmFlowCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2GMRPDispType.setStatus('current')
cmFlowCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2GVRPDispType.setStatus('current')
cmFlowCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2GARPDispType.setStatus('current')
cmFlowCpdV2ActiveControlProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 27), CmActiveControlProtocolsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowCpdV2ActiveControlProtocols.setStatus('current')
cmFlowCpdV2LLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2LLDPDispType.setStatus('deprecated')
cmFlowCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 29), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2ELMIDispType.setStatus('current')
cmFlowCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac00DispType.setStatus('current')
cmFlowCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac01DispType.setStatus('current')
cmFlowCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac02DispType.setStatus('current')
cmFlowCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac03DispType.setStatus('current')
cmFlowCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac04DispType.setStatus('current')
cmFlowCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac05DispType.setStatus('current')
cmFlowCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac06DispType.setStatus('current')
cmFlowCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac07DispType.setStatus('current')
cmFlowCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac08DispType.setStatus('current')
cmFlowCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac09DispType.setStatus('current')
cmFlowCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0ADispType.setStatus('current')
cmFlowCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0BDispType.setStatus('current')
cmFlowCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0CDispType.setStatus('current')
cmFlowCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0DDispType.setStatus('current')
cmFlowCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0EDispType.setStatus('current')
cmFlowCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0FDispType.setStatus('current')
cmFlowCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2NearestLLDPDispType.setStatus('current')
cmFlowCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2NonTpmrLLDPDispType.setStatus('current')
cmFlowCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2CustomerLLDPDispType.setStatus('current')
cmEthernetNetPortCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15), )
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Table.setStatus('current')
cmEthernetNetPortCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Index"))
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Entry.setStatus('current')
cmEthernetNetPortCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Index.setStatus('current')
cmEthernetNetPortCpdV2CiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2CiscoGroupDispType.setStatus('deprecated')
cmEthernetNetPortCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2IslDispType.setStatus('current')
cmEthernetNetPortCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PagpDispType.setStatus('current')
cmEthernetNetPortCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2UdldDispType.setStatus('current')
cmEthernetNetPortCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2CdpDispType.setStatus('current')
cmEthernetNetPortCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2VtpDispType.setStatus('current')
cmEthernetNetPortCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2DtpDispType.setStatus('current')
cmEthernetNetPortCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PvstpPlusDispType.setStatus('current')
cmEthernetNetPortCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2UplinkFastDispType.setStatus('current')
cmEthernetNetPortCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2VlanBridgeDispType.setStatus('current')
cmEthernetNetPortCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2L2PTDispType.setStatus('current')
cmEthernetNetPortCpdV2BridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2BridgeGroupDispType.setStatus('deprecated')
cmEthernetNetPortCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2BPDUDispType.setStatus('current')
cmEthernetNetPortCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PauseDispType.setStatus('current')
cmEthernetNetPortCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LACPDispType.setStatus('current')
cmEthernetNetPortCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LACPMarkerDispType.setStatus('current')
cmEthernetNetPortCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2EfmOamDispType.setStatus('current')
cmEthernetNetPortCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2SSMDispType.setStatus('current')
cmEthernetNetPortCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PortAuthenDispType.setStatus('current')
cmEthernetNetPortCpdV2BridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2BridgeReservedDispType.setStatus('deprecated')
cmEthernetNetPortCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LANBridgesDispType.setStatus('current')
cmEthernetNetPortCpdV2GARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GARPGroupDispType.setStatus('deprecated')
cmEthernetNetPortCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GMRPDispType.setStatus('current')
cmEthernetNetPortCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GVRPDispType.setStatus('current')
cmEthernetNetPortCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GARPDispType.setStatus('current')
cmEthernetNetPortCpdV2LLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LLDPDispType.setStatus('deprecated')
cmEthernetNetPortCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2ELMIDispType.setStatus('current')
cmEthernetNetPortCpdV2L2PTTunnelMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2L2PTTunnelMac.setStatus('current')
cmEthernetNetPortCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac00DispType.setStatus('current')
cmEthernetNetPortCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac01DispType.setStatus('current')
cmEthernetNetPortCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac02DispType.setStatus('current')
cmEthernetNetPortCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac03DispType.setStatus('current')
cmEthernetNetPortCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac04DispType.setStatus('current')
cmEthernetNetPortCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac05DispType.setStatus('current')
cmEthernetNetPortCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac06DispType.setStatus('current')
cmEthernetNetPortCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac07DispType.setStatus('current')
cmEthernetNetPortCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac08DispType.setStatus('current')
cmEthernetNetPortCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac09DispType.setStatus('current')
cmEthernetNetPortCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0ADispType.setStatus('current')
cmEthernetNetPortCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0BDispType.setStatus('current')
cmEthernetNetPortCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0CDispType.setStatus('current')
cmEthernetNetPortCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0DDispType.setStatus('current')
cmEthernetNetPortCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0EDispType.setStatus('current')
cmEthernetNetPortCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0FDispType.setStatus('current')
cmEthernetNetPortCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2NearestLLDPDispType.setStatus('current')
cmEthernetNetPortCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2NonTpmrLLDPDispType.setStatus('current')
cmEthernetNetPortCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2CustomerLLDPDispType.setStatus('current')
cmEthernetNetPortCpdV2PtpUntaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 49), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PtpUntaggedDispType.setStatus('current')
cmEthernetNetPortCpdV2PtpTaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PtpTaggedDispType.setStatus('current')
bitsPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16), )
if mibBuilder.loadTexts: bitsPortTable.setStatus('current')
bitsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "bitsPortTypeIndex"), (0, "CM-FACILITY-MIB", "bitsPortIndex"))
if mibBuilder.loadTexts: bitsPortEntry.setStatus('current')
bitsPortTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortTypeIndex.setStatus('current')
bitsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortIndex.setStatus('current')
bitsPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortIfIndex.setStatus('current')
bitsPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 4), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortEntityIndex.setStatus('current')
bitsPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortAdminState.setStatus('current')
bitsPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortOperationalState.setStatus('current')
bitsPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortSecondaryState.setStatus('current')
bitsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 8), BitsPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortType.setStatus('current')
bitsPortLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 9), BitsPortLineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortLineType.setStatus('current')
bitsPortLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 10), BitsPortLineCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortLineCode.setStatus('current')
bitsPortFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 11), BitsFrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortFrameFormat.setStatus('current')
bitsPortSaBitDesignation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 12), SaBitDesignation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortSaBitDesignation.setStatus('current')
bitsPortQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortQLModeEnabled.setStatus('current')
bitsPortExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 14), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortExpectedQL.setStatus('current')
bitsPortAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 15), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortAssumedQL.setStatus('current')
bitsPortReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 16), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortReceivedQL.setStatus('current')
bitsPortTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 17), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortTransmitQL.setStatus('current')
bitsPortSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 18), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortSquelchQL.setStatus('current')
bitsPortLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 19), LineBuildOut()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortLineBuildOut.setStatus('current')
bitsPortImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 20), BitsPortImpedanceMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortImpedance.setStatus('current')
bitsPortCrc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortCrc4.setStatus('current')
bitsPortIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortIdleCode.setStatus('current')
bitsPortAis = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortAis.setStatus('current')
bitsPortSaBitsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 24), SaBitsState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortSaBitsAdminState.setStatus('current')
bitsPortSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 25), SquelchControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortSquelchControl.setStatus('current')
bitsPortSignalShape = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 26), SignalShape()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortSignalShape.setStatus('current')
bitsPortSignalFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 27), SignalFrequency()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortSignalFrequency.setStatus('current')
ieee1588EthernetPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17), )
if mibBuilder.loadTexts: ieee1588EthernetPortTable.setStatus('current')
ieee1588EthernetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ieee1588EthernetPortIndex"))
if mibBuilder.loadTexts: ieee1588EthernetPortEntry.setStatus('current')
ieee1588EthernetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortIndex.setStatus('current')
ieee1588EthernetPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortIfIndex.setStatus('current')
ieee1588EthernetPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortEntityIndex.setStatus('current')
ieee1588EthernetPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee1588EthernetPortAdminState.setStatus('current')
ieee1588EthernetPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortOperationalState.setStatus('current')
ieee1588EthernetPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortSecondaryState.setStatus('current')
ieee1588EthernetPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee1588EthernetPortMTU.setStatus('current')
ieee1588EthernetPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 8), EthernetMediaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee1588EthernetPortMediaType.setStatus('current')
ieee1588EthernetPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 9), EthernetPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee1588EthernetPortConfigSpeed.setStatus('current')
ieee1588EthernetPortNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 10), EthernetPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortNegotiatedSpeed.setStatus('current')
ieee1588EthernetPortMDIXType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 11), CmEthernetMDIXType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee1588EthernetPortMDIXType.setStatus('current')
gps10MHzPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18), )
if mibBuilder.loadTexts: gps10MHzPortTable.setStatus('current')
gps10MHzPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "gps10MHzPortIndex"))
if mibBuilder.loadTexts: gps10MHzPortEntry.setStatus('current')
gps10MHzPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortIndex.setStatus('current')
gps10MHzPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortIfIndex.setStatus('current')
gps10MHzPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortEntityIndex.setStatus('current')
gps10MHzPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortAdminState.setStatus('current')
gps10MHzPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortOperationalState.setStatus('current')
gps10MHzPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortSecondaryState.setStatus('current')
gps10MHzPortSignalDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 7), SignalDirectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortSignalDirection.setStatus('current')
gps10MHzPortSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 8), SquelchControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortSquelchControl.setStatus('current')
gps10MHzPortSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 9), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortSquelchQL.setStatus('current')
gps10MHzPortFrequencySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 10), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortFrequencySource.setStatus('current')
gps10MHzPortClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortClockClass.setStatus('deprecated')
gps10MHzPortClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortClockAccuracy.setStatus('deprecated')
gps10MHzPortTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 13), TimeSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortTimeSource.setStatus('deprecated')
gps10MHzPortAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 14), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortAssumedQL.setStatus('current')
gps10MHzPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortAlias.setStatus('current')
gps10MHzPortInputSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 16), ClkSignalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortInputSignalType.setStatus('current')
cmEthernetNetPortClbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19), )
if mibBuilder.loadTexts: cmEthernetNetPortClbTable.setStatus('current')
cmEthernetNetPortClbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortClbIndex"))
if mibBuilder.loadTexts: cmEthernetNetPortClbEntry.setStatus('current')
cmEthernetNetPortClbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortClbIndex.setStatus('current')
cmEthernetNetPortClbEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortClbEnabled.setStatus('current')
cmEthernetNetPortClbLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortClbLength.setStatus('current')
cmEthernetNetPortClbDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortClbDescr.setStatus('current')
cmNetPortPrioMapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20), )
if mibBuilder.loadTexts: cmNetPortPrioMapTable.setStatus('current')
cmNetPortPrioMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortPrioMapIndex"))
if mibBuilder.loadTexts: cmNetPortPrioMapEntry.setStatus('current')
cmNetPortPrioMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetPortPrioMapIndex.setStatus('current')
cmNetPortPrioMapInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPrioMapInPriority.setStatus('current')
cmNetPortPrioMapCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPrioMapCOS.setStatus('current')
cmNetPortPrioMapOuterTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPrioMapOuterTagPriority.setStatus('current')
cmAccPortPcpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21), )
if mibBuilder.loadTexts: cmAccPortPcpDEEncTable.setStatus('current')
cmAccPortPcpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmAccPortPcpDEEncIndex"))
if mibBuilder.loadTexts: cmAccPortPcpDEEncEntry.setStatus('current')
cmAccPortPcpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortPcpDEEncIndex.setStatus('current')
cmAccPortPcpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEEncInPriority.setStatus('current')
cmAccPortPcpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEEncDropIneligiblePrio.setStatus('current')
cmAccPortPcpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEEncDropEligiblePrio.setStatus('current')
cmAccPortPcpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22), )
if mibBuilder.loadTexts: cmAccPortPcpDEDecTable.setStatus('current')
cmAccPortPcpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmAccPortPcpDEDecIndex"))
if mibBuilder.loadTexts: cmAccPortPcpDEDecEntry.setStatus('current')
cmAccPortPcpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortPcpDEDecIndex.setStatus('current')
cmAccPortPcpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEDecInPriority.setStatus('current')
cmAccPortPcpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEDecOutPriority.setStatus('current')
cmAccPortPcpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEDecDropEligible.setStatus('current')
cmAccPortPcpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 23), )
if mibBuilder.loadTexts: cmAccPortPcpDEPairTable.setStatus('current')
cmAccPortPcpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 23, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmAccPortPcpDEPairIndex"))
if mibBuilder.loadTexts: cmAccPortPcpDEPairEntry.setStatus('current')
cmAccPortPcpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortPcpDEPairIndex.setStatus('current')
cmAccPortPcpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 23, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEDropIneligiblePrio.setStatus('current')
cmAccPortPcpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 23, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEDropEligiblePrio.setStatus('current')
cmNetPortPcpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24), )
if mibBuilder.loadTexts: cmNetPortPcpDEEncTable.setStatus('current')
cmNetPortPcpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortPcpDEEncIndex"))
if mibBuilder.loadTexts: cmNetPortPcpDEEncEntry.setStatus('current')
cmNetPortPcpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetPortPcpDEEncIndex.setStatus('current')
cmNetPortPcpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEEncInPriority.setStatus('current')
cmNetPortPcpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEEncDropIneligiblePrio.setStatus('current')
cmNetPortPcpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEEncDropEligiblePrio.setStatus('current')
cmNetPortPcpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25), )
if mibBuilder.loadTexts: cmNetPortPcpDEDecTable.setStatus('current')
cmNetPortPcpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortPcpDEDecIndex"))
if mibBuilder.loadTexts: cmNetPortPcpDEDecEntry.setStatus('current')
cmNetPortPcpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetPortPcpDEDecIndex.setStatus('current')
cmNetPortPcpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEDecInPriority.setStatus('current')
cmNetPortPcpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEDecOutPriority.setStatus('current')
cmNetPortPcpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEDecDropEligible.setStatus('current')
cmNetPortPcpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 26), )
if mibBuilder.loadTexts: cmNetPortPcpDEPairTable.setStatus('current')
cmNetPortPcpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 26, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortPcpDEPairIndex"))
if mibBuilder.loadTexts: cmNetPortPcpDEPairEntry.setStatus('current')
cmNetPortPcpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetPortPcpDEPairIndex.setStatus('current')
cmNetPortPcpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 26, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEDropIneligiblePrio.setStatus('current')
cmNetPortPcpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 26, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEDropEligiblePrio.setStatus('current')
cmEthernetTrafficPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27), )
if mibBuilder.loadTexts: cmEthernetTrafficPortTable.setStatus('current')
cmEthernetTrafficPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortEntry.setStatus('current')
cmEthernetTrafficPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortIndex.setStatus('current')
cmEthernetTrafficPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortIfIndex.setStatus('current')
cmEthernetTrafficPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortEntityIndex.setStatus('current')
cmEthernetTrafficPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortAdminState.setStatus('current')
cmEthernetTrafficPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOperationalState.setStatus('current')
cmEthernetTrafficPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSecondaryState.setStatus('current')
cmEthernetTrafficPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMTU.setStatus('current')
cmEthernetTrafficPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 8), EthernetMediaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMediaType.setStatus('current')
cmEthernetTrafficPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 9), EthernetPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortConfigSpeed.setStatus('current')
cmEthernetTrafficPortNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 10), EthernetPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortNegotiatedSpeed.setStatus('current')
cmEthernetTrafficPortMDIXType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 11), CmEthernetMDIXType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMDIXType.setStatus('current')
cmEthernetTrafficPortMDIXStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 12), CmEthernetMDIXType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortMDIXStatus.setStatus('current')
cmEthernetTrafficPortSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpVendorName.setStatus('current')
cmEthernetTrafficPortSfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpPartNumber.setStatus('current')
cmEthernetTrafficPortSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpSerialNumber.setStatus('current')
cmEthernetTrafficPortSfpDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpDateOfManufacture.setStatus('current')
cmEthernetTrafficPortSfpConnectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 17), SfpConnectorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpConnectorValue.setStatus('current')
cmEthernetTrafficPortSfpLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpLinkLength.setStatus('current')
cmEthernetTrafficPortSfpLaserWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpLaserWaveLength.setStatus('current')
cmEthernetTrafficPortSfpMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 20), SfpMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpMediaType.setStatus('current')
cmEthernetTrafficPortLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 21), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackConfig.setStatus('current')
cmEthernetTrafficPortLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 22), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackStatus.setStatus('current')
cmEthernetTrafficPortLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTime.setStatus('current')
cmEthernetTrafficPortLoopbackSwapSADA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 24), CmSwapSADAType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackSwapSADA.setStatus('current')
cmEthernetTrafficPortOuterVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopbackMask.setStatus('current')
cmEthernetTrafficPortOuterVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopback1.setStatus('current')
cmEthernetTrafficPortOuterVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopback2.setStatus('current')
cmEthernetTrafficPortOuterVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopback3.setStatus('current')
cmEthernetTrafficPortLinkLossFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdEnabled.setStatus('current')
cmEthernetTrafficPortLinkLossFwdSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 30), CmLinkLossFwdSignalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdSignalType.setStatus('current')
cmEthernetTrafficPortLinkLossFwdTriggerTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 31), CmLinkLossFwdTriggerTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdTriggerTypes.setStatus('current')
cmEthernetTrafficPortLinkLossFwdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdDelay.setStatus('current')
cmEthernetTrafficPortLinkLossFwdActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdActive.setStatus('current')
cmEthernetTrafficPortLinkLossFwdPartnerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdPartnerEnabled.setStatus('current')
cmEthernetTrafficPortLinkLossFwdLocalLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdLocalLinkId.setStatus('current')
cmEthernetTrafficPortLinkLossFwdRemoteLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdRemoteLinkIds.setStatus('current')
cmEthernetTrafficPortLinkLossFwdTxActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 37), CmLinkLossFwdTxActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdTxActionType.setStatus('current')
cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds.setStatus('current')
cmEthernetTrafficPortOamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamId.setStatus('current')
cmEthernetTrafficPortOamDiscoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 40), CmOamDiscoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamDiscoveryState.setStatus('current')
cmEthernetTrafficPortOamLocalVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalVarRtrvsEnabled.setStatus('current')
cmEthernetTrafficPortOamLocalLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalLinkEventsEnabled.setStatus('current')
cmEthernetTrafficPortOamLocalOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalOamLoopbacksSupported.setStatus('current')
cmEthernetTrafficPortOamLocalUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 44), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalUnidirSupportEnabled.setStatus('current')
cmEthernetTrafficPortOamLocalMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalMaxPDUSize.setStatus('current')
cmEthernetTrafficPortOamLocalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 46), CmOamMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalMode.setStatus('current')
cmEthernetTrafficPortOamRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 47), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteMacAddress.setStatus('current')
cmEthernetTrafficPortOamRemoteVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 48), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteVarRtrvsEnabled.setStatus('current')
cmEthernetTrafficPortOamRemoteLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 49), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteLinkEventsEnabled.setStatus('current')
cmEthernetTrafficPortOamRemoteOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 50), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteOamLoopbacksSupported.setStatus('current')
cmEthernetTrafficPortOamRemoteUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 51), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteUnidirSupportEnabled.setStatus('current')
cmEthernetTrafficPortOamRemoteMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteMaxPDUSize.setStatus('current')
cmEthernetTrafficPortOamRemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 53), CmOamMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteMode.setStatus('current')
cmEthernetTrafficPortOamEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 54), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamEnabled.setStatus('current')
cmEthernetTrafficPortOamAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 55), CmOamAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamAdminState.setStatus('current')
cmEthernetTrafficPortSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 56), CmEthernetTrafficSvcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortSvcType.setStatus('current')
cmEthernetTrafficPortRxPauseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 57), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRxPauseEnabled.setStatus('current')
cmEthernetTrafficPortTxPauseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 58), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTxPauseEnabled.setStatus('current')
cmEthernetTrafficPortAfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 59), CmAfpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortAfpType.setStatus('current')
cmEthernetTrafficPortShapingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortShapingEnabled.setStatus('current')
cmEthernetTrafficPortShapedSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortShapedSpeedLo.setStatus('current')
cmEthernetTrafficPortShapedSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 62), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortShapedSpeedHi.setStatus('current')
cmEthernetTrafficPortQinQEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortQinQEtherType.setStatus('current')
cmEthernetTrafficPortTagFrameControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 64), AfpTagControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTagFrameControl.setStatus('current')
cmEthernetTrafficPortEgressVlanTrunkingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 65), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressVlanTrunkingEnabled.setStatus('current')
cmEthernetTrafficPortIngressPushPVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 66), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressPushPVIDEnabled.setStatus('current')
cmEthernetTrafficPortEgressPopPVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 67), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressPopPVIDEnabled.setStatus('current')
cmEthernetTrafficPortEgressPopPriorityVidEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 68), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressPopPriorityVidEnabled.setStatus('current')
cmEthernetTrafficPortPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 69), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPortVlanId.setStatus('current')
cmEthernetTrafficPortPortVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 70), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPortVlanPriority.setStatus('current')
cmEthernetTrafficPortPriorityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 71), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPriorityVlanId.setStatus('deprecated')
cmEthernetTrafficPortIngressPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 72), PriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressPrioMapMode.setStatus('current')
cmEthernetTrafficPortIngressCOSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 73), VlanTagType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressCOSPriority.setStatus('deprecated')
cmEthernetTrafficPortSyncEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEEnabled.setStatus('current')
cmEthernetTrafficPortQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 75), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortQLModeEnabled.setStatus('current')
cmEthernetTrafficPortExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 76), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortExpectedQL.setStatus('current')
cmEthernetTrafficPortAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 77), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortAssumedQL.setStatus('current')
cmEthernetTrafficPortReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 78), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortReceivedQL.setStatus('current')
cmEthernetTrafficPortTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 79), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortTransmitQL.setStatus('current')
cmEthernetTrafficPortPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 80), XgePhyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPhyType.setStatus('current')
cmEthernetTrafficPortSfpLaserWaveLengthPicometer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 81), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpLaserWaveLengthPicometer.setStatus('current')
cmEthernetTrafficPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 82), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEthernetTrafficPortRowStatus.setStatus('current')
cmEthernetTrafficPortSSMRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 83), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSSMRemoteMacAddress.setStatus('current')
cmEthernetTrafficPortInnerVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopbackMask.setStatus('current')
cmEthernetTrafficPortInnerVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopback1.setStatus('current')
cmEthernetTrafficPortInnerVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 86), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopback2.setStatus('current')
cmEthernetTrafficPortInnerVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 87), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopback3.setStatus('current')
cmEthernetTrafficPortLaserWDMChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 88), SfpChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLaserWDMChannel.setStatus('current')
cmEthernetTrafficPortLaserIsTunable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 89), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLaserIsTunable.setStatus('current')
cmEthernetTrafficPortLaserFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 90), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLaserFrequency.setStatus('current')
cmEthernetTrafficPortDeiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 91), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortDeiEnable.setStatus('deprecated')
cmEthernetTrafficPortPcpDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 92), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncType.setStatus('current')
cmEthernetTrafficPortPcpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 93), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairsAction.setStatus('current')
cmEthernetTrafficPortInitiateDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 94), CmEthernetDiagAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortInitiateDiag.setStatus('current')
cmEthernetTrafficPortDiagnosePair1Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 95), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair1Cond.setStatus('current')
cmEthernetTrafficPortDiagnosePair2Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 96), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair2Cond.setStatus('current')
cmEthernetTrafficPortDiagnosePair3Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 97), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair3Cond.setStatus('current')
cmEthernetTrafficPortDiagnosePair4Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 98), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair4Cond.setStatus('current')
cmEthernetTrafficPortDiagnoseAutoNegCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 99), CmDiagAutoNegCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseAutoNegCond.setStatus('current')
cmEthernetTrafficPortDiagnoseLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 100), CmDiagLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseLpbkCond.setStatus('current')
cmEthernetTrafficPortDiagnoseEfmLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 101), CmDiagEfmOamLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseEfmLpbkCond.setStatus('current')
cmEthernetTrafficPortDiagnoseResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseResult.setStatus('current')
cmEthernetTrafficPortDiagnoseTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 103), CmDiagTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseTestStatus.setStatus('current')
cmEthernetTrafficPortDiagnoseTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 104), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseTestTime.setStatus('current')
cmEthernetTrafficPortAutoDiagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 105), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortAutoDiagEnabled.setStatus('current')
cmEthernetTrafficPortDeleteEntitiesAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 106), TrafficPortDeleteEntitiesAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortDeleteEntitiesAction.setStatus('current')
cmEthernetTrafficPortMaxMpFpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 107), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMaxMpFpNum.setStatus('current')
cmEthernetTrafficPortJdsuLoopbackEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 108), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuLoopbackEnabled.setStatus('deprecated')
cmEthernetTrafficPortJdsuLoopbackVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 109), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuLoopbackVlanId.setStatus('deprecated')
cmEthernetTrafficPortIngressPopPriorityVidEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 110), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressPopPriorityVidEnabled.setStatus('current')
cmEthernetTrafficPortRxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 111), RxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRxDeiAction.setStatus('current')
cmEthernetTrafficPortTxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 112), TxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTxDeiAction.setStatus('current')
cmEthernetTrafficPortRxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 113), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRxDeiOuterTagType.setStatus('current')
cmEthernetTrafficPortTxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 114), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTxDeiOuterTagType.setStatus('current')
cmEthernetTrafficPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 115), CmEthernetSvcPortMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMode.setStatus('current')
cmEthernetTrafficPortServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 116), CmEthernetSvcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortServiceType.setStatus('current')
cmEthernetTrafficPortLoopbackSourceMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 117), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackSourceMacControlEnabled.setStatus('current')
cmEthernetTrafficPortLoopbackDestMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 118), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackDestMacControlEnabled.setStatus('current')
cmEthernetTrafficPortLoopbackSourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 119), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackSourceMacAddress.setStatus('current')
cmEthernetTrafficPortLoopbackDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 120), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackDestMacAddress.setStatus('current')
cmEthernetTrafficPortLoopbackBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 121), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackBlockingEnabled.setStatus('current')
cmEthernetTrafficPortMediaTypeAutoSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 122), EthernetMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortMediaTypeAutoSelected.setStatus('current')
cmEthernetTrafficPortLowLatencyQueuingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 123), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLowLatencyQueuingEnabled.setStatus('current')
cmEthernetTrafficPortDiagnosticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 124), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosticMacAddress.setStatus('current')
cmEthernetTrafficPortIngressSwapPriorityVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 125), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressSwapPriorityVIDEnabled.setStatus('current')
cmEthernetTrafficPortEgressSwapPriorityVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 126), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressSwapPriorityVIDEnabled.setStatus('current')
cmEthernetTrafficPortSwapPriorityVID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 127), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortSwapPriorityVID.setStatus('current')
cmEthernetTrafficPortExpDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 128), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortExpDEEncType.setStatus('current')
cmEthernetTrafficPortExpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 129), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortExpDEPairsAction.setStatus('current')
cmEthernetTrafficPortJdsuLoopbackSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 130), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuLoopbackSrcIp.setStatus('current')
cmEthernetTrafficPortTxSsm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 131), ToggleValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTxSsm.setStatus('current')
cmEthernetTrafficPortRxSsmQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 132), SynceRxSsmQl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRxSsmQL.setStatus('current')
cmEthernetTrafficPortSyncEMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 133), SynceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEMode.setStatus('current')
cmEthernetTrafficPortSyncEServiceAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 134), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEServiceAvailableTime.setStatus('current')
cmEthernetTrafficPortSyncEServiceUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 135), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEServiceUnavailableTime.setStatus('current')
cmEthernetTrafficPortSyncEServiceAvailablePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 136), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEServiceAvailablePercentage.setStatus('current')
cmEthernetTrafficPortWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 137), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqSegmentationCOS.setStatus('current')
cmEthernetTrafficPortWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 138), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqGroupCOS.setStatus('current')
cmEthernetTrafficPortWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 139), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqGroupEirLo.setStatus('current')
cmEthernetTrafficPortWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 140), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqGroupEirHi.setStatus('current')
cmEthernetTrafficPortOuterTagTpidOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 141), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterTagTpidOverride.setStatus('current')
cmEthernetTrafficPortOuterTagTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 142), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterTagTpid.setStatus('current')
cmEthernetTrafficPortSfpTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 143), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpTxPowerLevel.setStatus('current')
cmEthernetTrafficPortSfpRxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 144), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpRxPowerLevel.setStatus('current')
cmEthernetTrafficPortBwResourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 145), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortBwResourcePort.setStatus('current')
cmEthernetTrafficPortSfpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 146), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpName.setStatus('current')
cmEthernetTrafficPortSfpHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 147), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpHardwareRevision.setStatus('current')
cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 148), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl.setStatus('current')
cmEthernetTrafficPortLoopbackTestReflectorIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 149), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv4Address.setStatus('current')
cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 150), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl.setStatus('current')
cmEthernetTrafficPortLoopbackTestReflectorIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 151), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv6Address.setStatus('current')
cmEthernetTrafficPortSfpIdentifierValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 152), SfpIdentifierValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpIdentifierValue.setStatus('current')
cmEthernetTrafficPortPlugType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 153), PlugType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugType.setStatus('current')
cmEthernetTrafficPortPlugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 154), PlugMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugMode.setStatus('current')
cmEthernetTrafficPortPlugGMetroAutoTuningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 155), GMetroAutoTuningMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugGMetroAutoTuningMode.setStatus('current')
cmEthernetTrafficPortPlugChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 156), ChannelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugChannelType.setStatus('current')
cmEthernetTrafficPortPlugITUCbandChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 157), ITUCBandChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugITUCbandChannel.setStatus('current')
cmEthernetTrafficPortPlugRelativeChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 158), RelativeChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugRelativeChannel.setStatus('current')
cmEthernetTrafficPortPlugFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 159), FrequencyIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugFrequency.setStatus('current')
cmEthernetTrafficPortPlugOutOfBandChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 160), OutOfBandChannelStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugOutOfBandChannelStatus.setStatus('current')
cmEthernetTrafficPortRemotePlugITUCbandChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 161), ITUCBandChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemotePlugITUCbandChannel.setStatus('current')
cmEthernetTrafficPortRemotePlugRelativeChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 162), RelativeChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemotePlugRelativeChannel.setStatus('current')
cmEthernetTrafficPortRemotePlugFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 163), FrequencyIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemotePlugFrequency.setStatus('current')
cmEthernetTrafficPortRemoteSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 164), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpVendorName.setStatus('current')
cmEthernetTrafficPortRemoteSfpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 165), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpName.setStatus('current')
cmEthernetTrafficPortRemoteSfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 166), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpPartNumber.setStatus('current')
cmEthernetTrafficPortRemoteSfpHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 167), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpHardwareRevision.setStatus('current')
cmEthernetTrafficPortRemoteSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 168), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpSerialNumber.setStatus('current')
cmEthernetTrafficPortRemoteSfpDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 169), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpDateOfManufacture.setStatus('current')
cmEthernetTrafficPortRemoteSfpLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 170), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpLinkLength.setStatus('current')
cmEthernetTrafficPortRemoteSfpLaserWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 171), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpLaserWaveLength.setStatus('current')
cmEthernetTrafficPortRemoteSfpLaserFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 172), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpLaserFrequency.setStatus('current')
cmEthernetTrafficPortRemoteSfpMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 173), SfpMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpMediaType.setStatus('current')
cmEthernetTrafficPortRemoteSfpConnectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 174), SfpConnectorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpConnectorValue.setStatus('current')
cmEthernetTrafficPortRemoteSfpIdentifierValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 175), SfpIdentifierValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpIdentifierValue.setStatus('current')
cmElineFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28), )
if mibBuilder.loadTexts: cmElineFlowTable.setStatus('current')
cmElineFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmElineFlowIndex"))
if mibBuilder.loadTexts: cmElineFlowEntry.setStatus('current')
cmElineFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowIndex.setStatus('current')
cmElineFlowCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowCircuitName.setStatus('current')
cmElineFlowAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmElineFlowAdminState.setStatus('current')
cmElineFlowOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmElineFlowOperationalState.setStatus('current')
cmElineFlowSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmElineFlowSecondaryState.setStatus('current')
cmElineFlowFP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 6), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowFP1.setStatus('current')
cmElineFlowFP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 7), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowFP2.setStatus('current')
cmElineFlowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowStorageType.setStatus('current')
cmElineFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowRowStatus.setStatus('current')
cmFlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29), )
if mibBuilder.loadTexts: cmFlowPointTable.setStatus('current')
cmFlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"))
if mibBuilder.loadTexts: cmFlowPointEntry.setStatus('current')
cmFlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointIndex.setStatus('current')
cmFlowPointCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCircuitName.setStatus('current')
cmFlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointAdminState.setStatus('current')
cmFlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointOperationalState.setStatus('current')
cmFlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointSecondaryState.setStatus('current')
cmFlowPointAssociatedFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 6), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointAssociatedFlowId.setStatus('current')
cmFlowPointIngressMultiCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointIngressMultiCOS.setStatus('current')
cmFlowPointIngressCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointIngressCOS.setStatus('current')
cmFlowPointIngressVlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointIngressVlanMemberList.setStatus('current')
cmFlowPointVlanMemberAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 10), FlowVlanActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointVlanMemberAction.setStatus('current')
cmFlowPointVlanMemberActionVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointVlanMemberActionVlan.setStatus('current')
cmFlowPointIngressUntaggedFrameEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointIngressUntaggedFrameEnabled.setStatus('current')
cmFlowPointCTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 13), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCTagControl.setStatus('current')
cmFlowPointCTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 14), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCTagVlanId.setStatus('current')
cmFlowPointCTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 15), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCTagVlanPriority.setStatus('current')
cmFlowPointSTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 16), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointSTagControl.setStatus('current')
cmFlowPointSTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 17), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointSTagVlanId.setStatus('current')
cmFlowPointSTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 18), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointSTagVlanPriority.setStatus('current')
cmFlowPointEgressOuterTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointEgressOuterTagPrioMapEnabled.setStatus('current')
cmFlowPointColorMarkingSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointColorMarkingSupported.setStatus('current')
cmFlowPointAssociatedAclProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 21), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointAssociatedAclProfile.setStatus('current')
cmFlowPointSESFramesLossThresholdRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointSESFramesLossThresholdRatio.setStatus('current')
cmFlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 23), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointStorageType.setStatus('current')
cmFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointRowStatus.setStatus('current')
cmFlowPointDefaultMemberEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointDefaultMemberEnabled.setStatus('current')
cmFlowPointMcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastRateLimitEnabled.setStatus('current')
cmFlowPointMcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastRateLimitSpeedLo.setStatus('current')
cmFlowPointMcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastRateLimitSpeedHi.setStatus('current')
cmFlowPointBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointBcastRateLimitEnabled.setStatus('current')
cmFlowPointBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointBcastRateLimitSpeedLo.setStatus('current')
cmFlowPointBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointBcastRateLimitSpeedHi.setStatus('current')
cmFlowPointSplitHorizonGroupOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 32), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointSplitHorizonGroupOID.setStatus('current')
cmFlowPointLoopAvoidance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 33), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointLoopAvoidance.setStatus('current')
cmFlowPointHierarchicalCosEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointHierarchicalCosEnabled.setStatus('current')
cmFlowPointWfqQid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqQid.setStatus('current')
cmFlowPointWfqOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqOutPriority.setStatus('current')
cmFlowPointMaximumBWLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMaximumBWLo.setStatus('current')
cmFlowPointMaximumBWHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMaximumBWHi.setStatus('current')
cmFlowPointGuaranteedBWLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointGuaranteedBWLo.setStatus('current')
cmFlowPointGuaranteedBWHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointGuaranteedBWHi.setStatus('current')
cmFlowPointRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 41), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointRefPrioMapProfile.setStatus('current')
cmFlowPointMcastAndBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 42), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastAndBcastRateLimitEnabled.setStatus('current')
cmFlowPointMcastAndBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastAndBcastRateLimitSpeedLo.setStatus('current')
cmFlowPointMcastAndBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 44), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastAndBcastRateLimitSpeedHi.setStatus('current')
cmFlowPointEgressShapingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 45), ShapingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointEgressShapingType.setStatus('current')
cmFlowPointEgressInnerTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 46), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointEgressInnerTagPrioMapEnabled.setStatus('current')
cmFlowPointAutoBandwidthConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 47), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointAutoBandwidthConfigEnabled.setStatus('current')
cmFlowPointAutoCIRPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointAutoCIRPercentage.setStatus('current')
cmFlowPointFrameFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 49), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointFrameFwdEnabled.setStatus('current')
cmFlowPointUsePortPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 50), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointUsePortPrioMapProfile.setStatus('current')
cmFlowPointRefEoMplsPwObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 51), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointRefEoMplsPwObject.setStatus('current')
cmFlowPointElmiEvcIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 52), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointElmiEvcIdentifier.setStatus('current')
cmFlowPointRefElpObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 53), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointRefElpObject.setStatus('current')
cmFlowPointEfEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 54), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointEfEnabled.setStatus('current')
cmFlowPointEfIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 55), EfIdentificationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointEfIdentificationType.setStatus('current')
cmFlowPointEfRateThresholdLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 56), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointEfRateThresholdLo.setStatus('current')
cmFlowPointEfRateThresholdHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointEfRateThresholdHi.setStatus('current')
cmFlowPointAclNoMatchDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 58), AclNoMatchDispositionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointAclNoMatchDisposition.setStatus('current')
cmFlowPointEfIdentificationFields = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 59), EfIdentificationFieldType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointEfIdentificationFields.setStatus('current')
cmFlowPointWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqSegmentationCOS.setStatus('current')
cmFlowPointWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqGroupCOS.setStatus('current')
cmFlowPointWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 62), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqGroupEirLo.setStatus('current')
cmFlowPointWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqGroupEirHi.setStatus('current')
cmOAMFlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30), )
if mibBuilder.loadTexts: cmOAMFlowPointTable.setStatus('current')
cmOAMFlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmOAMFlowPointIndex"))
if mibBuilder.loadTexts: cmOAMFlowPointEntry.setStatus('current')
cmOAMFlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointIndex.setStatus('current')
cmOAMFlowPointCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointCircuitName.setStatus('current')
cmOAMFlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmOAMFlowPointAdminState.setStatus('current')
cmOAMFlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointOperationalState.setStatus('current')
cmOAMFlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointSecondaryState.setStatus('current')
cmOAMFlowPointIngressVlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointIngressVlanMemberList.setStatus('current')
cmOAMFlowPointVlanMemberAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 7), FlowVlanActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmOAMFlowPointVlanMemberAction.setStatus('current')
cmOAMFlowPointVlanMemberActionVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointVlanMemberActionVlan.setStatus('current')
cmOAMFlowPointIngressUntaggedFrameSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointIngressUntaggedFrameSupported.setStatus('current')
cmOAMFlowPointSESFramesLossThresholdRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmOAMFlowPointSESFramesLossThresholdRatio.setStatus('current')
cmOAMFlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointStorageType.setStatus('current')
cmOAMFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointRowStatus.setStatus('current')
cmIngressPrioMapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 31), )
if mibBuilder.loadTexts: cmIngressPrioMapTable.setStatus('current')
cmIngressPrioMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 31, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmIngressPrioMapIndex"))
if mibBuilder.loadTexts: cmIngressPrioMapEntry.setStatus('current')
cmIngressPrioMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIngressPrioMapIndex.setStatus('current')
cmIngressPrioMapInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIngressPrioMapInPriority.setStatus('current')
cmIngressPrioMapCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIngressPrioMapCOS.setStatus('current')
cmEgressPrioMapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32), )
if mibBuilder.loadTexts: cmEgressPrioMapTable.setStatus('current')
cmEgressPrioMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEgressCOSIndex"))
if mibBuilder.loadTexts: cmEgressPrioMapEntry.setStatus('current')
cmEgressCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEgressCOSIndex.setStatus('current')
cmEgressCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEgressCOS.setStatus('current')
cmEgressOuterTagCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32, 1, 3), PrioMapControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEgressOuterTagCtrl.setStatus('current')
cmEgressOuterTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEgressOuterTagPriority.setStatus('current')
cmPortCpdProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33), )
if mibBuilder.loadTexts: cmPortCpdProfileTable.setStatus('current')
cmPortCpdProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPortCpdProfileIndex"))
if mibBuilder.loadTexts: cmPortCpdProfileEntry.setStatus('current')
cmPortCpdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmPortCpdProfileIndex.setStatus('current')
cmPortCpdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileName.setStatus('current')
cmPortCpdProfileCiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileCiscoGroupDispType.setStatus('deprecated')
cmPortCpdProfileIslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileIslDispType.setStatus('current')
cmPortCpdProfilePagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfilePagpDispType.setStatus('current')
cmPortCpdProfileUdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileUdldDispType.setStatus('current')
cmPortCpdProfileCdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileCdpDispType.setStatus('current')
cmPortCpdProfileVtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileVtpDispType.setStatus('current')
cmPortCpdProfileDtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileDtpDispType.setStatus('current')
cmPortCpdProfilePvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfilePvstpPlusDispType.setStatus('current')
cmPortCpdProfileUplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileUplinkFastDispType.setStatus('current')
cmPortCpdProfileVlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileVlanBridgeDispType.setStatus('current')
cmPortCpdProfileL2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileL2PTDispType.setStatus('current')
cmPortCpdProfileBridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileBridgeGroupDispType.setStatus('deprecated')
cmPortCpdProfileBPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileBPDUDispType.setStatus('current')
cmPortCpdProfilePauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfilePauseDispType.setStatus('current')
cmPortCpdProfileLACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileLACPDispType.setStatus('current')
cmPortCpdProfileLACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileLACPMarkerDispType.setStatus('current')
cmPortCpdProfileEfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileEfmOamDispType.setStatus('current')
cmPortCpdProfileSSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileSSMDispType.setStatus('current')
cmPortCpdProfilePortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfilePortAuthenDispType.setStatus('current')
cmPortCpdProfileBridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileBridgeReservedDispType.setStatus('deprecated')
cmPortCpdProfileLANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileLANBridgesDispType.setStatus('current')
cmPortCpdProfileGARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileGARPGroupDispType.setStatus('deprecated')
cmPortCpdProfileGMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileGMRPDispType.setStatus('current')
cmPortCpdProfileGVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileGVRPDispType.setStatus('current')
cmPortCpdProfileGARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileGARPDispType.setStatus('current')
cmPortCpdProfileLldpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileLldpDispType.setStatus('deprecated')
cmPortCpdProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 29), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmPortCpdProfileStorageType.setStatus('current')
cmPortCpdProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmPortCpdProfileRowStatus.setStatus('current')
cmPortCpdProfileMac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac00DispType.setStatus('current')
cmPortCpdProfileMac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac01DispType.setStatus('current')
cmPortCpdProfileMac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac02DispType.setStatus('current')
cmPortCpdProfileMac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac03DispType.setStatus('current')
cmPortCpdProfileMac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac04DispType.setStatus('current')
cmPortCpdProfileMac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac05DispType.setStatus('current')
cmPortCpdProfileMac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac06DispType.setStatus('current')
cmPortCpdProfileMac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac07DispType.setStatus('current')
cmPortCpdProfileMac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac08DispType.setStatus('current')
cmPortCpdProfileMac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac09DispType.setStatus('current')
cmPortCpdProfileMac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0ADispType.setStatus('current')
cmPortCpdProfileMac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0BDispType.setStatus('current')
cmPortCpdProfileMac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0CDispType.setStatus('current')
cmPortCpdProfileMac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0DDispType.setStatus('current')
cmPortCpdProfileMac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0EDispType.setStatus('current')
cmPortCpdProfileMac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0FDispType.setStatus('current')
cmPortCpdProfileNearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileNearestLLDPDispType.setStatus('current')
cmPortCpdProfileNonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileNonTpmrLLDPDispType.setStatus('current')
cmPortCpdProfileCustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 49), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileCustomerLLDPDispType.setStatus('current')
cmPortCpdProfileELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileELMIDispType.setStatus('current')
cmFlowPointCpdProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34), )
if mibBuilder.loadTexts: cmFlowPointCpdProfileTable.setStatus('current')
cmFlowPointCpdProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmFlowPointCpdProfileIndex"))
if mibBuilder.loadTexts: cmFlowPointCpdProfileEntry.setStatus('current')
cmFlowPointCpdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointCpdProfileIndex.setStatus('current')
cmFlowPointCpdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileName.setStatus('current')
cmFlowPointCpdProfileCiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileCiscoGroupDispType.setStatus('deprecated')
cmFlowPointCpdProfileIslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileIslDispType.setStatus('current')
cmFlowPointCpdProfilePagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfilePagpDispType.setStatus('current')
cmFlowPointCpdProfileUdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileUdldDispType.setStatus('current')
cmFlowPointCpdProfileCdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileCdpDispType.setStatus('current')
cmFlowPointCpdProfileVtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileVtpDispType.setStatus('current')
cmFlowPointCpdProfileDtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileDtpDispType.setStatus('current')
cmFlowPointCpdProfilePvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfilePvstpPlusDispType.setStatus('current')
cmFlowPointCpdProfileUplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileUplinkFastDispType.setStatus('current')
cmFlowPointCpdProfileVlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileVlanBridgeDispType.setStatus('current')
cmFlowPointCpdProfileL2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileL2PTDispType.setStatus('current')
cmFlowPointCpdProfileBridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileBridgeGroupDispType.setStatus('deprecated')
cmFlowPointCpdProfileBPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileBPDUDispType.setStatus('current')
cmFlowPointCpdProfilePauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfilePauseDispType.setStatus('current')
cmFlowPointCpdProfileLACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileLACPDispType.setStatus('current')
cmFlowPointCpdProfileLACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileLACPMarkerDispType.setStatus('current')
cmFlowPointCpdProfileEfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileEfmOamDispType.setStatus('current')
cmFlowPointCpdProfileSSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileSSMDispType.setStatus('current')
cmFlowPointCpdProfilePortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfilePortAuthenDispType.setStatus('current')
cmFlowPointCpdProfileBridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileBridgeReservedDispType.setStatus('deprecated')
cmFlowPointCpdProfileLANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileLANBridgesDispType.setStatus('current')
cmFlowPointCpdProfileGARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileGARPGroupDispType.setStatus('deprecated')
cmFlowPointCpdProfileGMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileGMRPDispType.setStatus('current')
cmFlowPointCpdProfileGVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileGVRPDispType.setStatus('current')
cmFlowPointCpdProfileGARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileGARPDispType.setStatus('current')
cmFlowPointCpdProfileLldpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileLldpDispType.setStatus('deprecated')
cmFlowPointCpdProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 29), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCpdProfileStorageType.setStatus('current')
cmFlowPointCpdProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCpdProfileRowStatus.setStatus('current')
cmFlowPointCpdProfileMac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac00DispType.setStatus('current')
cmFlowPointCpdProfileMac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac01DispType.setStatus('current')
cmFlowPointCpdProfileMac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac02DispType.setStatus('current')
cmFlowPointCpdProfileMac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac03DispType.setStatus('current')
cmFlowPointCpdProfileMac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac04DispType.setStatus('current')
cmFlowPointCpdProfileMac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac05DispType.setStatus('current')
cmFlowPointCpdProfileMac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac06DispType.setStatus('current')
cmFlowPointCpdProfileMac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac07DispType.setStatus('current')
cmFlowPointCpdProfileMac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac08DispType.setStatus('current')
cmFlowPointCpdProfileMac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac09DispType.setStatus('current')
cmFlowPointCpdProfileMac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0ADispType.setStatus('current')
cmFlowPointCpdProfileMac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0BDispType.setStatus('current')
cmFlowPointCpdProfileMac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0CDispType.setStatus('current')
cmFlowPointCpdProfileMac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0DDispType.setStatus('current')
cmFlowPointCpdProfileMac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0EDispType.setStatus('current')
cmFlowPointCpdProfileMac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0FDispType.setStatus('current')
cmFlowPointCpdProfileNearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileNearestLLDPDispType.setStatus('current')
cmFlowPointCpdProfileNonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileNonTpmrLLDPDispType.setStatus('current')
cmFlowPointCpdProfileCustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 49), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileCustomerLLDPDispType.setStatus('current')
cmFlowPointCpdProfileELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileELMIDispType.setStatus('current')
cmEthernetTrafficPortCpdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 35), )
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdTable.setStatus('current')
cmEthernetTrafficPortCpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 35, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortCpdIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdEntry.setStatus('current')
cmEthernetTrafficPortCpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdIndex.setStatus('current')
cmEthernetTrafficPortAssociatedCpdProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 35, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortAssociatedCpdProfile.setStatus('current')
cmEthernetFlowPointCpdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 36), )
if mibBuilder.loadTexts: cmEthernetFlowPointCpdTable.setStatus('current')
cmEthernetFlowPointCpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 36, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmEthernetFlowPointCpdIndex"))
if mibBuilder.loadTexts: cmEthernetFlowPointCpdEntry.setStatus('current')
cmEthernetFlowPointCpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetFlowPointCpdIndex.setStatus('current')
cmEthernetFlowPointAssociatedCpdProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 36, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetFlowPointAssociatedCpdProfile.setStatus('current')
cmTrafficAclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37), )
if mibBuilder.loadTexts: cmTrafficAclProfileTable.setStatus('current')
cmTrafficAclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmTrafficAclProfileIndex"))
if mibBuilder.loadTexts: cmTrafficAclProfileEntry.setStatus('current')
cmTrafficAclProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclProfileIndex.setStatus('current')
cmTrafficAclProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclProfileName.setStatus('current')
cmTrafficAclProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclProfileStorageType.setStatus('current')
cmTrafficAclProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclProfileRowStatus.setStatus('current')
cmTrafficAclRulesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38), )
if mibBuilder.loadTexts: cmTrafficAclRulesTable.setStatus('current')
cmTrafficAclRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmTrafficAclProfileIndex"), (0, "CM-FACILITY-MIB", "cmTrafficAclRulesIndex"))
if mibBuilder.loadTexts: cmTrafficAclRulesEntry.setStatus('current')
cmTrafficAclRulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclRulesIndex.setStatus('current')
cmTrafficAclFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 2), CmTrafficAclFilterActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclFilterAction.setStatus('current')
cmTrafficAclFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 3), CmTrafficAclFilterType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclFilterType.setStatus('current')
cmTrafficAclEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclEnabled.setStatus('current')
cmTrafficAclSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcMacAddr.setStatus('current')
cmTrafficAclSrcMacAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcMacAddrEnabled.setStatus('current')
cmTrafficAclDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstMacAddr.setStatus('current')
cmTrafficAclDstMacAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstMacAddrEnabled.setStatus('current')
cmTrafficAclSrcIpFilterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcIpFilterEnabled.setStatus('current')
cmTrafficAclDstIpFilterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstIpFilterEnabled.setStatus('current')
cmTrafficAclSrcIpV4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcIpV4Addr.setStatus('current')
cmTrafficAclSrcIpV4AddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcIpV4AddrMask.setStatus('current')
cmTrafficAclDstIpV4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstIpV4Addr.setStatus('current')
cmTrafficAclDstIpV4AddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstIpV4AddrMask.setStatus('current')
cmTrafficAclSrcIpV6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 15), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcIpV6Addr.setStatus('current')
cmTrafficAclSrcIpV6AddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 16), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcIpV6AddrMask.setStatus('current')
cmTrafficAclDstIpV6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 17), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstIpV6Addr.setStatus('current')
cmTrafficAclDstIpV6AddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 18), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstIpV6AddrMask.setStatus('current')
cmTrafficAclTcpUdpSrcPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpSrcPortNum.setStatus('current')
cmTrafficAclTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpSrcPortMask.setStatus('current')
cmTrafficAclTcpUdpSrcPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpSrcPortEnabled.setStatus('current')
cmTrafficAclTcpUdpDstPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpDstPortNum.setStatus('current')
cmTrafficAclTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpDstPortMask.setStatus('current')
cmTrafficAclTcpUdpDstPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpDstPortEnabled.setStatus('current')
cmTrafficAclIpQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 25), CmTrafficACLPriorityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclIpQosType.setStatus('current')
cmTrafficAclIpQosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclIpQosValue.setStatus('current')
cmTrafficAclIpQosTypeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclIpQosTypeEnabled.setStatus('current')
cmTrafficAclVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 28), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclVlanId.setStatus('current')
cmTrafficAclVlanIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclVlanIdEnabled.setStatus('current')
cmTrafficAclVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclVlanPriority.setStatus('current')
cmTrafficAclVlanPriorityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclVlanPriorityEnabled.setStatus('current')
cmTrafficAclProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 32), CmTrafficAclProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclProtocolType.setStatus('current')
cmTrafficAclProtocolTypeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclProtocolTypeEnabled.setStatus('current')
cmTrafficAclStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 34), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclStorageType.setStatus('current')
cmTrafficAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclRowStatus.setStatus('current')
cmQosPolicerProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39), )
if mibBuilder.loadTexts: cmQosPolicerProfileTable.setStatus('current')
cmQosPolicerProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmQosPolicerProfileIndex"))
if mibBuilder.loadTexts: cmQosPolicerProfileEntry.setStatus('current')
cmQosPolicerProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileIndex.setStatus('current')
cmQosPolicerProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileName.setStatus('current')
cmQosPolicerProfileCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileCIRLo.setStatus('current')
cmQosPolicerProfileCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileCIRHi.setStatus('current')
cmQosPolicerProfileEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileEIRLo.setStatus('current')
cmQosPolicerProfileEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileEIRHi.setStatus('current')
cmQosPolicerProfileCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileCBS.setStatus('current')
cmQosPolicerProfileEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileEBS.setStatus('current')
cmQosPolicerProfileColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 9), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileColorMode.setStatus('current')
cmQosPolicerProfileCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileCouplingFlag.setStatus('current')
cmQosPolicerProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileStorageType.setStatus('current')
cmQosPolicerProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileRowStatus.setStatus('current')
cmQosQueueProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40), )
if mibBuilder.loadTexts: cmQosQueueProfileTable.setStatus('current')
cmQosQueueProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmQosQueueProfileIndex"))
if mibBuilder.loadTexts: cmQosQueueProfileEntry.setStatus('current')
cmQosQueueProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileIndex.setStatus('current')
cmQosQueueProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileName.setStatus('current')
cmQosQueueProfileBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileBufferSize.setStatus('current')
cmQosQueueProfileREDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileREDEnabled.setStatus('current')
cmQosQueueProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileStorageType.setStatus('current')
cmQosQueueProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileRowStatus.setStatus('current')
cmQosPolicerV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41), )
if mibBuilder.loadTexts: cmQosPolicerV2Table.setStatus('current')
cmQosPolicerV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmQosPolicerV2Index"))
if mibBuilder.loadTexts: cmQosPolicerV2Entry.setStatus('current')
cmQosPolicerV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerV2Index.setStatus('current')
cmQosPolicerV2AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosPolicerV2AdminState.setStatus('current')
cmQosPolicerV2OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2OperationalState.setStatus('current')
cmQosPolicerV2SecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2SecondaryState.setStatus('current')
cmQosPolicerV2ColorMarkingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2ColorMarkingEnabled.setStatus('current')
cmQosPolicerV2AssociatedProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 6), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerV2AssociatedProfile.setStatus('current')
cmQosPolicerV2StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerV2StorageType.setStatus('current')
cmQosPolicerV2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerV2RowStatus.setStatus('current')
cmQosPolicerV2PolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosPolicerV2PolicingEnabled.setStatus('current')
cmQosShaperV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42), )
if mibBuilder.loadTexts: cmQosShaperV2Table.setStatus('current')
cmQosShaperV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperV2Index"))
if mibBuilder.loadTexts: cmQosShaperV2Entry.setStatus('current')
cmQosShaperV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperV2Index.setStatus('current')
cmQosShaperV2AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2AdminState.setStatus('current')
cmQosShaperV2OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2OperationalState.setStatus('current')
cmQosShaperV2SecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2SecondaryState.setStatus('current')
cmQosShaperV2AssociatedQueueProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 5), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperV2AssociatedQueueProfile.setStatus('current')
cmQosShaperV2CIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2CIRLo.setStatus('current')
cmQosShaperV2CIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2CIRHi.setStatus('current')
cmQosShaperV2EIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2EIRLo.setStatus('current')
cmQosShaperV2EIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2EIRHi.setStatus('current')
cmQosShaperV2IngressAverageFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperV2IngressAverageFrameSize.setStatus('current')
cmQosShaperV2StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperV2StorageType.setStatus('current')
cmQosShaperV2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperV2RowStatus.setStatus('current')
cmQosShaperV2AdditionalCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2AdditionalCIRLo.setStatus('current')
cmQosShaperV2AdditionalCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2AdditionalCIRHi.setStatus('current')
cmQosShaperV2WFQWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2WFQWeight.setStatus('current')
cmQosShaperV2ActualCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2ActualCIR.setStatus('current')
cmQosShaperV2ActualEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2ActualEIR.setStatus('current')
cmQosShaperV2LowLatencyControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2LowLatencyControl.setStatus('current')
cmTrafficPortQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43), )
if mibBuilder.loadTexts: cmTrafficPortQosShaperTable.setStatus('current')
cmTrafficPortQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmTrafficPortQosShaperIndex"))
if mibBuilder.loadTexts: cmTrafficPortQosShaperEntry.setStatus('current')
cmTrafficPortQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperIndex.setStatus('current')
cmTrafficPortQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficPortQosShaperAdminState.setStatus('current')
cmTrafficPortQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperOperationalState.setStatus('current')
cmTrafficPortQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperSecondaryState.setStatus('current')
cmTrafficPortQosShaperAssociatedQueueProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 5), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperAssociatedQueueProfile.setStatus('current')
cmTrafficPortQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperBufferSize.setStatus('current')
cmTrafficPortQosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperCIRLo.setStatus('current')
cmTrafficPortQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperCIRHi.setStatus('current')
cmTrafficPortQosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperEIRLo.setStatus('current')
cmTrafficPortQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperEIRHi.setStatus('current')
cmTrafficPortQosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStorageType.setStatus('current')
cmTrafficPortQosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperRowStatus.setStatus('current')
cmTrafficPortQosShaperIngressAverageFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperIngressAverageFrameSize.setStatus('current')
cmTrafficPortQosShaperAdditionalCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperAdditionalCIRLo.setStatus('current')
cmTrafficPortQosShaperAdditionalCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperAdditionalCIRHi.setStatus('current')
cmTrafficPortQosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficPortQosShaperWfqWeight.setStatus('current')
cmTrafficAclRscAllocation = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 44), CmAclConfiguration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclRscAllocation.setStatus('current')
f3NetPortQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45), )
if mibBuilder.loadTexts: f3NetPortQosShaperTable.setStatus('current')
f3NetPortQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "f3NetPortQosShaperIndex"))
if mibBuilder.loadTexts: f3NetPortQosShaperEntry.setStatus('current')
f3NetPortQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperIndex.setStatus('current')
f3NetPortQosShaperDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 2), TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperDirection.setStatus('current')
f3NetPortQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetPortQosShaperAdminState.setStatus('current')
f3NetPortQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperOperationalState.setStatus('current')
f3NetPortQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperSecondaryState.setStatus('current')
f3NetPortQosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperCIRLo.setStatus('current')
f3NetPortQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperCIRHi.setStatus('current')
f3NetPortQosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperEIRLo.setStatus('current')
f3NetPortQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperEIRHi.setStatus('current')
f3NetPortQosShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperCBS.setStatus('current')
f3NetPortQosShaperEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperEBS.setStatus('current')
f3NetPortQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperBufferSize.setStatus('current')
f3NetPortQosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperCOS.setStatus('current')
f3NetPortQosShaperSoamCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperSoamCIRLo.setStatus('current')
f3NetPortQosShaperSoamCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperSoamCIRHi.setStatus('current')
f3NetPortQosShaperSoamEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperSoamEIRLo.setStatus('current')
f3NetPortQosShaperSoamEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperSoamEIRHi.setStatus('current')
f3NetPortQosShaperWredGreenMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredGreenMinQueueThreshold.setStatus('current')
f3NetPortQosShaperWredGreenMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredGreenMaxQueueThreshold.setStatus('current')
f3NetPortQosShaperWredGreenDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredGreenDropProbability.setStatus('current')
f3NetPortQosShaperWredYellowMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredYellowMinQueueThreshold.setStatus('current')
f3NetPortQosShaperWredYellowMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredYellowMaxQueueThreshold.setStatus('current')
f3NetPortQosShaperWredYellowDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredYellowDropProbability.setStatus('current')
f3NetPortQosShaperAvgFrameSizeBeforeFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetPortQosShaperAvgFrameSizeBeforeFragment.setStatus('current')
f3NetPortQosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetPortQosShaperWfqWeight.setStatus('current')
f3Usb3GDCNPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46), )
if mibBuilder.loadTexts: f3Usb3GDCNPortTable.setStatus('current')
f3Usb3GDCNPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-ENTITY-MIB", "f3UsbHostIndex"))
if mibBuilder.loadTexts: f3Usb3GDCNPortEntry.setStatus('current')
f3Usb3GDCNPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortIndex.setStatus('current')
f3Usb3GDCNPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortIfIndex.setStatus('current')
f3Usb3GDCNPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortEntityIndex.setStatus('current')
f3Usb3GDCNPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortAdminState.setStatus('current')
f3Usb3GDCNPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortOperationalState.setStatus('current')
f3Usb3GDCNPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortSecondaryState.setStatus('current')
f3Usb3GDCNPortVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortVendorName.setStatus('current')
f3Usb3GDCNPortModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortModel.setStatus('current')
f3Usb3GDCNPortFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortFSN.setStatus('current')
f3Usb3GDCNPortIMEI = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortIMEI.setStatus('current')
f3Usb3GDCNPortHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortHardwareVersion.setStatus('current')
f3Usb3GDCNPortFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortFirmwareVersion.setStatus('current')
f3Usb3GDCNPortSIMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 13), F3Usb3GSimCardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortSIMStatus.setStatus('current')
f3Usb3GDCNPortPINLeftChances = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortPINLeftChances.setStatus('current')
f3Usb3GDCNPortPUKLeftChances = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortPUKLeftChances.setStatus('current')
f3Usb3GDCNPortConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 16), F3Usb3GNetworkConnectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortConnectionStatus.setStatus('current')
f3Usb3GDCNPortRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 17), F3Usb3GRecvSignalStrengthInd()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortRSSI.setStatus('current')
f3Usb3GDCNPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortSpeed.setStatus('current')
f3Usb3GDCNPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortMTU.setStatus('current')
f3Usb3GDCNPortProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortProviderName.setStatus('current')
f3Usb3GDCNPortDNS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortDNS1.setStatus('current')
f3Usb3GDCNPortDNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortDNS2.setStatus('current')
f3Usb3GDCNPortAPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortAPN.setStatus('current')
f3Usb3GDCNPortUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortUserName.setStatus('current')
f3Usb3GDCNPortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortPassword.setStatus('current')
f3Usb3GDCNPortDailNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortDailNumber.setStatus('current')
f3Usb3GDCNPortRedialTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortRedialTimer.setStatus('current')
f3Usb3GDCNPortCurrentPinCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPortCurrentPinCode.setStatus('current')
f3Usb3GDCNPortNewPinCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPortNewPinCode.setStatus('current')
f3Usb3GDCNPortConfirmPinCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPortConfirmPinCode.setStatus('current')
f3Usb3GDCNPortCurrentPukCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPortCurrentPukCode.setStatus('current')
f3Usb3GDCNPINCodeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 32), F3Usb3GDCNPINCodeActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPINCodeAction.setStatus('current')
f3Usb3GDCNPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 33), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPortStorageType.setStatus('current')
f3Usb3GDCNPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 34), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortRowStatus.setStatus('current')
f3Usb3GDCNPortIMSI = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortIMSI.setStatus('current')
f3Usb3GDCNPortPINStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 36), G3AuthStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortPINStatus.setStatus('current')
f3UsbDCNPortMobileNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 37), UsbDCNMobileNetworkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbDCNPortMobileNetworkType.setStatus('current')
f3Usb3GDCNMuxOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 38), UsbOperationalMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNMuxOperationalMode.setStatus('current')
f3Usb3GDCNPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortIpAddress.setStatus('current')
f3Usb3GDCNPortNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortNetMask.setStatus('current')
ocnStmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47), )
if mibBuilder.loadTexts: ocnStmTable.setStatus('current')
ocnStmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"))
if mibBuilder.loadTexts: ocnStmEntry.setStatus('current')
ocnStmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 1), Integer32())
if mibBuilder.loadTexts: ocnStmIndex.setStatus('current')
ocnStmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmIfIndex.setStatus('current')
ocnStmEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmEntityIndex.setStatus('current')
ocnStmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmAdminState.setStatus('current')
ocnStmOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmOperationalState.setStatus('current')
ocnStmSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSecondaryState.setStatus('current')
ocnStmSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpVendorName.setStatus('current')
ocnStmSfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpPartNumber.setStatus('current')
ocnStmSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpSerialNumber.setStatus('current')
ocnStmSfpDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpDateOfManufacture.setStatus('current')
ocnStmSfpConnectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 11), SfpConnectorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpConnectorValue.setStatus('current')
ocnStmSfpLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpLinkLength.setStatus('current')
ocnStmSfpLaserWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpLaserWaveLength.setStatus('current')
ocnStmSfpLaserWaveLengthPicometer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpLaserWaveLengthPicometer.setStatus('current')
ocnStmSfpMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 15), SfpMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpMediaType.setStatus('current')
ocnStmMultiplexingStructures = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 16), MultiplexingStructure()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmMultiplexingStructures.setStatus('current')
ocnStmEoTDMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 17), EoTDMMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmEoTDMMode.setStatus('current')
ocnStmLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 18), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmLoopbackConfig.setStatus('current')
ocnStmLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 19), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmLoopbackStatus.setStatus('current')
ocnStmLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmLoopbackTime.setStatus('current')
ocnStmInsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmInsertingAIS.setStatus('current')
ocnStmBerExcThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 22), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmBerExcThreshold.setStatus('current')
ocnStmBerDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 23), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmBerDegThreshold.setStatus('current')
ocnStmRxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmRxTrailTrace.setStatus('current')
ocnStmTxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmTxTrailTrace.setStatus('current')
ocnStmExpectedTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmExpectedTrailTrace.setStatus('current')
ocnStmTrailTraceFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 27), TrailTraceFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmTrailTraceFormat.setStatus('current')
ocnStmQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmQLModeEnabled.setStatus('current')
ocnStmExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 29), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmExpectedQL.setStatus('current')
ocnStmAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 30), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmAssumedQL.setStatus('current')
ocnStmReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 31), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmReceivedQL.setStatus('current')
ocnStmTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 32), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmTransmitQL.setStatus('current')
ocnStmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 33), OCNSTMPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmPortType.setStatus('current')
ocnStmFreqSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 34), TDMFrequencySourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmFreqSourceType.setStatus('current')
ocnStmHighOrderPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 35), TDMPathType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmHighOrderPathType.setStatus('current')
ocnStmSfpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpName.setStatus('current')
ocnStmSfpHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpHardwareRevision.setStatus('current')
stsVcPathTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48), )
if mibBuilder.loadTexts: stsVcPathTable.setStatus('current')
stsVcPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-FACILITY-MIB", "stsVcPathParentIfIndex"), (0, "CM-FACILITY-MIB", "stsVcPathIndex"))
if mibBuilder.loadTexts: stsVcPathEntry.setStatus('current')
stsVcPathParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: stsVcPathParentIfIndex.setStatus('current')
stsVcPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 2), Unsigned32())
if mibBuilder.loadTexts: stsVcPathIndex.setStatus('current')
stsVcPathIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathIfIndex.setStatus('current')
stsVcPathAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathAdminState.setStatus('current')
stsVcPathOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathOperationalState.setStatus('current')
stsVcPathSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathSecondaryState.setStatus('current')
stsVcPathLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 7), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathLoopbackConfig.setStatus('current')
stsVcPathLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 8), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathLoopbackStatus.setStatus('current')
stsVcPathLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathLoopbackTime.setStatus('current')
stsVcPathInsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathInsertingAIS.setStatus('current')
stsVcPathBerExcThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 11), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathBerExcThreshold.setStatus('current')
stsVcPathBerDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 12), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathBerDegThreshold.setStatus('current')
stsVcPathTrailTraceFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 13), TrailTraceFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathTrailTraceFormat.setStatus('current')
stsVcPathRxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathRxTrailTrace.setStatus('current')
stsVcPathTxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathTxTrailTrace.setStatus('current')
stsVcPathExpectedTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathExpectedTrailTrace.setStatus('current')
stsVcPathRxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathRxSignalLabel.setStatus('current')
stsVcPathTxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathTxSignalLabel.setStatus('current')
stsVcPathExpectedSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathExpectedSignalLabel.setStatus('current')
stsVcPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsVcPathRowStatus.setStatus('current')
stsVcPathLowOrderPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 21), TDMPathType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathLowOrderPathType.setStatus('current')
vtVcPathTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49), )
if mibBuilder.loadTexts: vtVcPathTable.setStatus('current')
vtVcPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-FACILITY-MIB", "vtVcPathParentIfIndex"), (0, "CM-FACILITY-MIB", "vtVcPathIndex"))
if mibBuilder.loadTexts: vtVcPathEntry.setStatus('current')
vtVcPathParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: vtVcPathParentIfIndex.setStatus('current')
vtVcPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 2), Unsigned32())
if mibBuilder.loadTexts: vtVcPathIndex.setStatus('current')
vtVcPathIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathIfIndex.setStatus('current')
vtVcPathAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathAdminState.setStatus('current')
vtVcPathOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathOperationalState.setStatus('current')
vtVcPathSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathSecondaryState.setStatus('current')
vtVcPathLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 7), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathLoopbackConfig.setStatus('current')
vtVcPathLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 8), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathLoopbackStatus.setStatus('current')
vtVcPathLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathLoopbackTime.setStatus('current')
vtVcPathInsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathInsertingAIS.setStatus('current')
vtVcPathBerExcThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 11), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathBerExcThreshold.setStatus('current')
vtVcPathBerDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 12), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathBerDegThreshold.setStatus('current')
vtVcPathTrailTraceFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 13), TrailTraceFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathTrailTraceFormat.setStatus('current')
vtVcPathRxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathRxTrailTrace.setStatus('current')
vtVcPathTxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathTxTrailTrace.setStatus('current')
vtVcPathExpectedTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathExpectedTrailTrace.setStatus('current')
vtVcPathRxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathRxSignalLabel.setStatus('current')
vtVcPathTxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathTxSignalLabel.setStatus('current')
vtVcPathExpectedSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathExpectedSignalLabel.setStatus('current')
vtVcPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtVcPathRowStatus.setStatus('current')
e1t1Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50), )
if mibBuilder.loadTexts: e1t1Table.setStatus('current')
e1t1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "e1t1ParentIfIndex"), (0, "CM-FACILITY-MIB", "e1t1Index"))
if mibBuilder.loadTexts: e1t1Entry.setStatus('current')
e1t1ParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: e1t1ParentIfIndex.setStatus('current')
e1t1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 2), Unsigned32())
if mibBuilder.loadTexts: e1t1Index.setStatus('current')
e1t1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1IfIndex.setStatus('current')
e1t1EntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 4), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EntityIndex.setStatus('current')
e1t1AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1AdminState.setStatus('current')
e1t1OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1OperationalState.setStatus('current')
e1t1SecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1SecondaryState.setStatus('current')
e1t1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 8), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1LoopbackConfig.setStatus('current')
e1t1LoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 9), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1LoopbackStatus.setStatus('current')
e1t1LoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1LoopbackTime.setStatus('current')
e1t1RemoteLoopbackRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1RemoteLoopbackRequest.setStatus('current')
e1t1InsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1InsertingAIS.setStatus('current')
e1t1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1t1RowStatus.setStatus('current')
e1t1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 14), E1T1LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1LineType.setStatus('current')
e1t1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 15), E1T1LineCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1LineCode.setStatus('current')
e1t1FrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 16), E1T1FrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1FrameFormat.setStatus('current')
e1t1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 17), LineBuildOut()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1LineBuildOut.setStatus('current')
e1t1TimingDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 18), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1TimingDomain.setStatus('current')
e1t1RcvSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 19), E1T1RcvSensitivity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1RcvSensitivity.setStatus('current')
e1t1IdlePatternProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 20), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1IdlePatternProfile.setStatus('current')
e1t1LoopbackProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 21), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1LoopbackProfile.setStatus('current')
e1t1RelatedContainerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 22), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1RelatedContainerId.setStatus('current')
e1t1PatternLpbkControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1PatternLpbkControl.setStatus('current')
class E3T3Type(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("e3", 1), ("t3", 2))

class PortState(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7))

e3t3Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51), )
if mibBuilder.loadTexts: e3t3Table.setStatus('current')
e3t3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "e3t3ParentIfIndex"), (0, "CM-FACILITY-MIB", "e3t3Index"))
if mibBuilder.loadTexts: e3t3Entry.setStatus('current')
e3t3ParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: e3t3ParentIfIndex.setStatus('current')
e3t3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 2), Unsigned32())
if mibBuilder.loadTexts: e3t3Index.setStatus('current')
e3t3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3IfIndex.setStatus('current')
e3t3EntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 4), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3EntityIndex.setStatus('current')
e3t3AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3AdminState.setStatus('current')
e3t3OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3OperationalState.setStatus('current')
e3t3SecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3SecondaryState.setStatus('current')
e3t3LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 8), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3LoopbackConfig.setStatus('current')
e3t3LoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 9), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3LoopbackStatus.setStatus('current')
e3t3LoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3LoopbackTime.setStatus('current')
e3t3RemoteLoopbackRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3RemoteLoopbackRequest.setStatus('current')
e3t3InsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3InsertingAIS.setStatus('current')
e3t3CBitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3CBitEnable.setStatus('current')
e3t3T3Channelized = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3T3Channelized.setStatus('current')
e3t3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e3t3RowStatus.setStatus('current')
e3t3FrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 16), E3T3FrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3FrameFormat.setStatus('current')
e3t3RelatedContainerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 17), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3RelatedContainerId.setStatus('current')
cmEthernetTrafficPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52), )
if mibBuilder.loadTexts: cmEthernetTrafficPortExtTable.setStatus('current')
cmEthernetTrafficPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1), )
cmEthernetTrafficPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetTrafficPortExtEntry"))
cmEthernetTrafficPortExtEntry.setIndexNames(*cmEthernetTrafficPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetTrafficPortExtEntry.setStatus('current')
cmEthernetTrafficPortTDMEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 1), GFPEncapsulationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTDMEncapsulation.setStatus('current')
cmEthernetTrafficPortRelatedVCG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRelatedVCG.setStatus('current')
cmEthernetTrafficPortMcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMcastRateLimitEnabled.setStatus('current')
cmEthernetTrafficPortMcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMcastRateLimitSpeedLo.setStatus('current')
cmEthernetTrafficPortMcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMcastRateLimitSpeedHi.setStatus('current')
cmEthernetTrafficPortBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortBcastRateLimitEnabled.setStatus('current')
cmEthernetTrafficPortBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortBcastRateLimitSpeedLo.setStatus('current')
cmEthernetTrafficPortBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortBcastRateLimitSpeedHi.setStatus('current')
cmEthernetTrafficPortCombinedRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCombinedRateLimitEnabled.setStatus('current')
cmEthernetTrafficPortCombinedRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCombinedRateLimitSpeedLo.setStatus('current')
cmEthernetTrafficPortCombinedRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCombinedRateLimitSpeedHi.setStatus('current')
cmEthernetTrafficPortRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 12), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRefPrioMapProfile.setStatus('current')
f3PulsePerSecondPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53), )
if mibBuilder.loadTexts: f3PulsePerSecondPortTable.setStatus('current')
f3PulsePerSecondPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3PulsePerSecondPortIndex"))
if mibBuilder.loadTexts: f3PulsePerSecondPortEntry.setStatus('current')
f3PulsePerSecondPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PulsePerSecondPortIndex.setStatus('current')
f3PulsePerSecondPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortIfIndex.setStatus('current')
f3PulsePerSecondPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortEntityIndex.setStatus('current')
f3PulsePerSecondPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortAdminState.setStatus('current')
f3PulsePerSecondPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortOperationalState.setStatus('current')
f3PulsePerSecondPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortSecondaryState.setStatus('current')
f3PulsePerSecondPortSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 7), SquelchControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortSquelchControl.setStatus('current')
f3PulsePerSecondPortSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 8), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortSquelchQL.setStatus('current')
f3PulsePerSecondPortTODSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 9), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortTODSource.setStatus('current')
f3PulsePerSecondPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 10), SignalDirectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortDirection.setStatus('current')
f3PulsePerSecondPortInputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 11), PPSInputRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortInputRate.setStatus('current')
f3PulsePerSecondPortDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000000, 5000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortDelayCompensation.setStatus('current')
f3PulsePerSecondPortClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortClockClass.setStatus('deprecated')
f3PulsePerSecondPortClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortClockAccuracy.setStatus('deprecated')
f3PulsePerSecondPortTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 15), TimeSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortTimeSource.setStatus('deprecated')
f3PulsePerSecondPortPhyInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 16), PPSPhyInterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortPhyInterfaceType.setStatus('current')
f3PulsePerSecondPortOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortOutputDelay.setStatus('current')
f3PulsePerSecondPortWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 250000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortWidth.setStatus('current')
f3PulsePerSecondPortPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 19), PpsPolarity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortPolarity.setStatus('current')
f3PulsePerSecondPortImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 20), PpsPortImpedanceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortImpedance.setStatus('current')
f3PulsePerSecondPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PulsePerSecondPortAlias.setStatus('current')
f3PulsePerSecondPortAssumedClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortAssumedClockClass.setStatus('current')
f3TimeOfDayPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55), )
if mibBuilder.loadTexts: f3TimeOfDayPortTable.setStatus('current')
f3TimeOfDayPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3TimeOfDayPortIndex"))
if mibBuilder.loadTexts: f3TimeOfDayPortEntry.setStatus('current')
f3TimeOfDayPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3TimeOfDayPortIndex.setStatus('current')
f3TimeOfDayPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeOfDayPortIfIndex.setStatus('current')
f3TimeOfDayPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeOfDayPortEntityIndex.setStatus('current')
f3TimeOfDayPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortAdminState.setStatus('current')
f3TimeOfDayPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeOfDayPortOperationalState.setStatus('current')
f3TimeOfDayPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeOfDayPortSecondaryState.setStatus('current')
f3TimeOfDayPortSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 7), SquelchControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortSquelchControl.setStatus('current')
f3TimeOfDayPortSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 8), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortSquelchQL.setStatus('current')
f3TimeOfDayPortTODSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 9), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortTODSource.setStatus('current')
f3TimeOfDayPortOutputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 10), TODOutputFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortOutputFormat.setStatus('current')
f3TimeOfDayPortSignalDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 11), SignalDirectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortSignalDirection.setStatus('current')
f3TimeOfDayPortInputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 12), PPSInputRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortInputRate.setStatus('current')
f3TimeOfDayPortDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000000, 5000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortDelayCompensation.setStatus('current')
f3TimeOfDayPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TimeOfDayPortAlias.setStatus('current')
f3TimeOfDayPortAssumedClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortAssumedClockClass.setStatus('current')
cmEthernetNetPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 56), )
if mibBuilder.loadTexts: cmEthernetNetPortExtTable.setStatus('current')
cmEthernetNetPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 56, 1), )
cmEthernetNetPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetNetPortExtEntry"))
cmEthernetNetPortExtEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetNetPortExtEntry.setStatus('current')
cmEthernetNetPortTDMEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 56, 1, 1), GFPEncapsulationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortTDMEncapsulation.setStatus('current')
cmEthernetNetPortAssociatedTdmEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 56, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortAssociatedTdmEntity.setStatus('current')
cmEthernetNetPortInsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 56, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInsertingAIS.setStatus('current')
f3GPSReceiverPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57), )
if mibBuilder.loadTexts: f3GPSReceiverPortTable.setStatus('current')
f3GPSReceiverPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3GPSReceiverPortIndex"))
if mibBuilder.loadTexts: f3GPSReceiverPortEntry.setStatus('current')
f3GPSReceiverPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3GPSReceiverPortIndex.setStatus('current')
f3GPSReceiverPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortIfIndex.setStatus('current')
f3GPSReceiverPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortEntityIndex.setStatus('current')
f3GPSReceiverPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortAdminState.setStatus('current')
f3GPSReceiverPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortOperationalState.setStatus('current')
f3GPSReceiverPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortSecondaryState.setStatus('current')
f3GPSReceiverPortPPSGenCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 7), PPSGenCondition()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortPPSGenCondition.setStatus('current')
f3GPSReceiverPortAntennaCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaCableLength.setStatus('deprecated')
f3GPSReceiverPortAntennaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 9), GPSAntennaStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaStatus.setStatus('current')
f3GPSReceiverPortSatellitesUsableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortSatellitesUsableFlag.setStatus('current')
f3GPSReceiverPortNumTrackingSatellites = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortNumTrackingSatellites.setStatus('current')
f3GPSReceiverPortSelfSurveyProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyProgress.setStatus('current')
f3GPSReceiverPortPPSGeneratedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortPPSGeneratedFlag.setStatus('current')
f3GPSReceiverPortGnssSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 14), ConstellationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortGnssSystem.setStatus('deprecated')
f3GPSReceiverPortInstallationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 15), InstallationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortInstallationType.setStatus('current')
f3GPSReceiverPortGnssTOD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortGnssTOD.setStatus('current')
f3GPSReceiverPortGnssSystemsBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 17), ConstellationTypesBitMap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortGnssSystemsBitMap.setStatus('current')
f3GPSReceiverPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3GPSReceiverPortAlias.setStatus('current')
f3GPSReceiverPortAntennaDelayValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaDelayValue.setStatus('current')
f3GPSReceiverPortAntennaDelayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 20), DelayOption()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaDelayType.setStatus('current')
f3GPSReceiverPortCNOMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 55))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortCNOMask.setStatus('current')
f3GPSReceiverPortElevationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortElevationMask.setStatus('current')
f3GPSReceiverPortCoordinateLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateLatitude.setStatus('current')
f3GPSReceiverPortCoordinateLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateLongitude.setStatus('current')
f3GPSReceiverPortCoordinateAltitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateAltitude.setStatus('current')
f3GPSReceiverPortFirmwareUpgradePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortFirmwareUpgradePercent.setStatus('current')
f3GPSReceiverPortPDOPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortPDOPMask.setStatus('current')
f3GPSReceiverPortSelfSurveyPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyPeriod.setStatus('current')
f3GPSReceiverPortSatMin1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSatMin1Threshold.setStatus('current')
f3GPSReceiverPortSatMin2Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSatMin2Threshold.setStatus('current')
f3GPSReceiverPortPDOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortPDOP.setStatus('current')
f3GPSReceiverPortSelfSurveyControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 32), ToggleValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyControl.setStatus('current')
f3GPSReceiverPortCoordinateStringAltitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateStringAltitude.setStatus('current')
f3GPSReceiverPortLocationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 34), LocationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortLocationMode.setStatus('current')
f3GPSReceiverPortTimeAdvanceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 35), TimeAdvanceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortTimeAdvanceMode.setStatus('current')
f3GPSReceiverPortTimeAdvanceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortTimeAdvanceValue.setStatus('current')
f3GPSReceiverPortForcedAntennaConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 37), ToggleValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortForcedAntennaConnected.setStatus('current')
f3GPSReceiverPortServiceAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortServiceAvailableTime.setStatus('current')
f3GPSReceiverPortServiceUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortServiceUnavailableTime.setStatus('current')
f3GPSReceiverPortServiceAvailablePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortServiceAvailablePercentage.setStatus('current')
f3GPSReceiverPortAGC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortAGC.setStatus('current')
f3GPSReceiverPortSelfSurveyPositionAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyPositionAccuracy.setStatus('current')
f3GPSReceiverPortHorizontalAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortHorizontalAccuracy.setStatus('current')
f3GPSReceiverPortVerticalAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortVerticalAccuracy.setStatus('current')
f3GPSReceiverPortTDOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortTDOP.setStatus('current')
f3GPSReceiverPortHDOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortHDOP.setStatus('current')
f3GPSReceiverPortVDOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortVDOP.setStatus('current')
f3GPSReceiverPortFailureSuspendTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortFailureSuspendTime.setStatus('current')
f3GPSReceiverPortSpoofingPpsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingPpsThreshold.setStatus('current')
f3GPSReceiverPortSpoofingPpsDifference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingPpsDifference.setStatus('current')
f3GPSReceiverPortSpoofingLocationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingLocationThreshold.setStatus('current')
f3GPSReceiverPortSpoofingLocationDifference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingLocationDifference.setStatus('current')
f3GPSReceiverPortGnssDynamicModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 53), DynamicModelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortGnssDynamicModel.setStatus('current')
cmPethPsePortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58), )
if mibBuilder.loadTexts: cmPethPsePortExtTable.setStatus('current')
cmPethPsePortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPethPsePortExtGroupIndex"), (0, "CM-FACILITY-MIB", "cmPethPsePortExtIndex"))
if mibBuilder.loadTexts: cmPethPsePortExtEntry.setStatus('current')
cmPethPsePortExtGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1, 1), Integer32())
if mibBuilder.loadTexts: cmPethPsePortExtGroupIndex.setStatus('current')
cmPethPsePortExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1, 2), Integer32())
if mibBuilder.loadTexts: cmPethPsePortExtIndex.setStatus('current')
cmPethPsePortExtAssociatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1, 3), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPethPsePortExtAssociatedPort.setStatus('current')
pethPsePortExtPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortExtPowerConsumption.setStatus('current')
pethPsePortExtAvailablePowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1, 5), PsePowerLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortExtAvailablePowerLevel.setStatus('current')
pethMainPseEXTTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 59), )
if mibBuilder.loadTexts: pethMainPseEXTTable.setStatus('current')
pethMainPseEXTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 59, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "pethMainPseExtGroupIndex"))
if mibBuilder.loadTexts: pethMainPseEXTEntry.setStatus('current')
pethMainPseExtGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 59, 1, 1), Integer32())
if mibBuilder.loadTexts: pethMainPseExtGroupIndex.setStatus('current')
pethMainPseExtNonStandardPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 59, 1, 2), PSENonStandardPD()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethMainPseExtNonStandardPD.setStatus('current')
cmMPFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60), )
if mibBuilder.loadTexts: cmMPFlowTable.setStatus('current')
cmMPFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowIndex"))
if mibBuilder.loadTexts: cmMPFlowEntry.setStatus('current')
cmMPFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmMPFlowIndex.setStatus('current')
cmMPFlowCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 2), F3DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowCircuitName.setStatus('current')
cmMPFlowAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowAdminState.setStatus('current')
cmMPFlowOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMPFlowOperationalState.setStatus('current')
cmMPFlowSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMPFlowSecondaryState.setStatus('current')
cmMPFlowLearningEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowLearningEnabled.setStatus('current')
cmMPFlowAgingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowAgingTimer.setStatus('current')
cmMPFlowFwdTableSizeProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 8), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowFwdTableSizeProfileID.setStatus('current')
cmMPFlowtableFullAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 9), LearningAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowtableFullAction.setStatus('current')
cmMPFlowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmMPFlowStorageType.setStatus('current')
cmMPFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmMPFlowRowStatus.setStatus('current')
cmMPFlowLearningConfigAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 12), LearningConfigAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowLearningConfigAction.setStatus('current')
cmMPFlowFPList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 13), F3DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowFPList.setStatus('current')
cmMPFlowMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 61), )
if mibBuilder.loadTexts: cmMPFlowMemberTable.setStatus('current')
cmMPFlowMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 61, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowMemberFPIndex"))
if mibBuilder.loadTexts: cmMPFlowMemberEntry.setStatus('current')
cmMPFlowMemberFPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 61, 1, 1), VariablePointer())
if mibBuilder.loadTexts: cmMPFlowMemberFPIndex.setStatus('current')
cmMPFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 61, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmMPFlowPointRowStatus.setStatus('current')
cmEthernetTrafficPortPcpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62), )
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncTable.setStatus('current')
cmEthernetTrafficPortPcpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncEntry.setStatus('current')
cmEthernetTrafficPortPcpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncIndex.setStatus('current')
cmEthernetTrafficPortPcpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncInPriority.setStatus('current')
cmEthernetTrafficPortPcpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncDropIneligiblePrio.setStatus('current')
cmEthernetTrafficPortPcpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncDropEligiblePrio.setStatus('current')
cmEthernetTrafficPortPcpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63), )
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecTable.setStatus('current')
cmEthernetTrafficPortPcpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDecIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecEntry.setStatus('current')
cmEthernetTrafficPortPcpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecIndex.setStatus('current')
cmEthernetTrafficPortPcpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecInPriority.setStatus('current')
cmEthernetTrafficPortPcpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecOutPriority.setStatus('current')
cmEthernetTrafficPortPcpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecDropEligible.setStatus('current')
cmEthernetTrafficPortPcpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 64), )
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairTable.setStatus('current')
cmEthernetTrafficPortPcpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 64, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEPairIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairEntry.setStatus('current')
cmEthernetTrafficPortPcpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 64, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairIndex.setStatus('current')
cmEthernetTrafficPortPcpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 64, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDropIneligiblePrio.setStatus('current')
cmEthernetTrafficPortPcpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 64, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDropEligiblePrio.setStatus('current')
cmEthernetTrafficPortClbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65), )
if mibBuilder.loadTexts: cmEthernetTrafficPortClbTable.setStatus('current')
cmEthernetTrafficPortClbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortClbIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortClbEntry.setStatus('current')
cmEthernetTrafficPortClbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortClbIndex.setStatus('current')
cmEthernetTrafficPortClbEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortClbEnabled.setStatus('current')
cmEthernetTrafficPortClbLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortClbLength.setStatus('current')
cmEthernetTrafficPortClbDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortClbDescr.setStatus('current')
networkElementTMParamsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 66), )
if mibBuilder.loadTexts: networkElementTMParamsTable.setStatus('current')
networkElementTMParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 66, 1), )
networkElementEntry.registerAugmentions(("CM-FACILITY-MIB", "networkElementTMParamsEntry"))
networkElementTMParamsEntry.setIndexNames(*networkElementEntry.getIndexNames())
if mibBuilder.loadTexts: networkElementTMParamsEntry.setStatus('current')
neTMParamsBandwidthProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 66, 1, 1), BandwidthProfileMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neTMParamsBandwidthProfileMode.setStatus('current')
neTMParamsAgingtime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 66, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neTMParamsAgingtime.setStatus('current')
cmEthernetAccPortJdsuExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 67), )
if mibBuilder.loadTexts: cmEthernetAccPortJdsuExtTable.setStatus('current')
cmEthernetAccPortJdsuExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 67, 1), )
cmEthernetAccPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetAccPortJdsuExtEntry"))
cmEthernetAccPortJdsuExtEntry.setIndexNames(*cmEthernetAccPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetAccPortJdsuExtEntry.setStatus('current')
cmEthernetAccPortJDSUControlFramesSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 67, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortJDSUControlFramesSnoopingEnabled.setStatus('current')
cmEthernetAccPortJDSULoopbackVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 67, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortJDSULoopbackVlan.setStatus('current')
cmEthernetAccPortJDSULoopbackVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 67, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortJDSULoopbackVlanList.setStatus('current')
cmEthernetNetPortJdsuExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 68), )
if mibBuilder.loadTexts: cmEthernetNetPortJdsuExtTable.setStatus('current')
cmEthernetNetPortJdsuExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 68, 1), )
cmEthernetNetPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetNetPortJdsuExtEntry"))
cmEthernetNetPortJdsuExtEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetNetPortJdsuExtEntry.setStatus('current')
cmEthernetNetPortJDSUControlFramesSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 68, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortJDSUControlFramesSnoopingEnabled.setStatus('current')
cmEthernetNetPortJDSULoopbackVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 68, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortJDSULoopbackVlan.setStatus('current')
cmEthernetNetPortJDSULoopbackVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 68, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortJDSULoopbackVlanList.setStatus('current')
cmEthernetTrafficPortLpbkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69), )
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkTable.setStatus('current')
cmEthernetTrafficPortLpbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkEntry.setStatus('current')
cmEthernetTrafficPortLpbkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 1), Integer32())
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkIndex.setStatus('current')
cmEthernetTrafficPortLpbkInnerVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkInnerVlanEnabled.setStatus('current')
cmEthernetTrafficPortLpbkInnerVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkInnerVlanTag.setStatus('current')
cmEthernetTrafficPortLpbkOuterVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkOuterVlanEnabled.setStatus('current')
cmEthernetTrafficPortLpbkOuterVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkOuterVlanTag.setStatus('current')
cmEthernetTrafficPortLpbkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkTime.setStatus('current')
cmEthernetTrafficPortLpbkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 7), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkStatus.setStatus('current')
cmEthernetTrafficPortLpbkConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 8), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkConfig.setStatus('current')
cmPrioMapV2ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70), )
if mibBuilder.loadTexts: cmPrioMapV2ProfileTable.setStatus('current')
cmPrioMapV2ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"))
if mibBuilder.loadTexts: cmPrioMapV2ProfileEntry.setStatus('current')
cmPrioMapV2ProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 1), Integer32())
if mibBuilder.loadTexts: cmPrioMapV2ProfileIndex.setStatus('current')
cmPrioMapV2ProfileAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileAlias.setStatus('current')
cmPrioMapV2ProfileMapModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 3), PriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileMapModeType.setStatus('current')
cmPrioMapV2ProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmPrioMapV2ProfileStorageType.setStatus('current')
cmPrioMapV2ProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmPrioMapV2ProfileRowStatus.setStatus('current')
cmPrioMapV2ProfileIngressCosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 6), VlanTagType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmPrioMapV2ProfileIngressCosPriority.setStatus('deprecated')
cmPrioMapV2ProfileCosMapModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 7), CosMappingMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileCosMapModeType.setStatus('current')
cmPrioMapV2ProfileCosMapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileCosMapControl.setStatus('current')
cmPrioMapV2ProfileDefaultCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileDefaultCos.setStatus('current')
cmPrioMapV2ProfileEgressCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileEgressCos.setStatus('current')
cmPrioMapV2IngressPrioMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 71), )
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingTable.setStatus('current')
cmPrioMapV2IngressPrioMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 71, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"), (0, "CM-FACILITY-MIB", "cmPrioMapV2IngressPrioMappingIndex"))
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingEntry.setStatus('current')
cmPrioMapV2IngressPrioMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 71, 1, 1), Integer32())
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingIndex.setStatus('current')
cmPrioMapV2IngressPrioMappingInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 71, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingInPriority.setStatus('current')
cmPrioMapV2IngressPrioMappingCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 71, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingCOS.setStatus('current')
cmPrioMapV2PrioMappingCOSTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72), )
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSTable.setStatus('current')
cmPrioMapV2PrioMappingCOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"), (0, "CM-FACILITY-MIB", "cmPrioMapV2PrioMappingCOSIndex"))
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSEntry.setStatus('current')
cmPrioMapV2PrioMappingCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 1), Integer32())
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSIndex.setStatus('current')
cmPrioMapV2PrioMappingCOSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSValue.setStatus('current')
cmPrioMapV2PrioMappingCOSOuterTagPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSOuterTagPri.setStatus('current')
cmPrioMapV2PrioMappingCOSInnerTagPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSInnerTagPri.setStatus('current')
cmPrioMapV2PrioMappingEncapOuterTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingEncapOuterTagPriority.setStatus('current')
cmPrioMapV2PrioMappingEncapInnerTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingEncapInnerTagPriority.setStatus('current')
cmPrioMapV2PrioMappingEncapOuterDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingEncapOuterDscpValue.setStatus('current')
cmPrioMapV2PrioMappingDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingDscpValue.setStatus('current')
cmPrioMapV2PrioMappingPriTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73), )
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriTable.setStatus('current')
cmPrioMapV2PrioMappingPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"), (0, "CM-FACILITY-MIB", "cmPrioMapV2PrioMappingPriIndex"))
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriEntry.setStatus('current')
cmPrioMapV2PrioMappingPriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1, 1), Integer32())
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriIndex.setStatus('current')
cmPrioMapV2PrioMappingPriInPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriInPrio.setStatus('current')
cmPrioMapV2PrioMappingPriPrioControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1, 3), PrioMapControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriPrioControl.setStatus('current')
cmPrioMapV2PrioMappingPriXTagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriXTagPrio.setStatus('current')
cmPrioMapV2PrioMappingPriCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriCOS.setStatus('current')
cmPrioMapV2ProfileAppliedObjTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 74), )
if mibBuilder.loadTexts: cmPrioMapV2ProfileAppliedObjTable.setStatus('current')
cmPrioMapV2ProfileAppliedObjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 74, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"), (0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileAppliedObj"))
if mibBuilder.loadTexts: cmPrioMapV2ProfileAppliedObjEntry.setStatus('current')
cmPrioMapV2ProfileAppliedObj = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 74, 1, 1), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmPrioMapV2ProfileAppliedObj.setStatus('current')
cmAccPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75), )
if mibBuilder.loadTexts: cmAccPortExtTable.setStatus('current')
cmAccPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1), )
cmEthernetAccPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmAccPortExtEntry"))
cmAccPortExtEntry.setIndexNames(*cmEthernetAccPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmAccPortExtEntry.setStatus('current')
cmAccPortExtMcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtMcastRateLimitEnabled.setStatus('current')
cmAccPortExtMcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtMcastRateLimitSpeedLo.setStatus('current')
cmAccPortExtMcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtMcastRateLimitSpeedHi.setStatus('current')
cmAccPortExtBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtBcastRateLimitEnabled.setStatus('current')
cmAccPortExtBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtBcastRateLimitSpeedLo.setStatus('current')
cmAccPortExtBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtBcastRateLimitSpeedHi.setStatus('current')
cmAccPortExtCombinedRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtCombinedRateLimitEnabled.setStatus('current')
cmAccPortExtCombinedRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtCombinedRateLimitSpeedLo.setStatus('current')
cmAccPortExtCombinedRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtCombinedRateLimitSpeedHi.setStatus('current')
cmAccPortExtRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 10), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtRefPrioMapProfile.setStatus('current')
cmNetPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76), )
if mibBuilder.loadTexts: cmNetPortExtTable.setStatus('current')
cmNetPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1), )
cmEthernetNetPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmNetPortExtEntry"))
cmNetPortExtEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmNetPortExtEntry.setStatus('current')
cmNetPortExtMcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtMcastRateLimitEnabled.setStatus('current')
cmNetPortExtMcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtMcastRateLimitSpeedLo.setStatus('current')
cmNetPortExtMcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtMcastRateLimitSpeedHi.setStatus('current')
cmNetPortExtBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtBcastRateLimitEnabled.setStatus('current')
cmNetPortExtBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtBcastRateLimitSpeedLo.setStatus('current')
cmNetPortExtBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtBcastRateLimitSpeedHi.setStatus('current')
cmNetPortExtCombinedRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtCombinedRateLimitEnabled.setStatus('current')
cmNetPortExtCombinedRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtCombinedRateLimitSpeedLo.setStatus('current')
cmNetPortExtCombinedRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtCombinedRateLimitSpeedHi.setStatus('current')
cmNetPortExtRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 10), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtRefPrioMapProfile.setStatus('current')
f3UsbWIFIDonglePortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77), )
if mibBuilder.loadTexts: f3UsbWIFIDonglePortTable.setStatus('current')
f3UsbWIFIDonglePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-ENTITY-MIB", "f3UsbHostIndex"))
if mibBuilder.loadTexts: f3UsbWIFIDonglePortEntry.setStatus('current')
f3UsbWIFIDonglePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 1), Integer32())
if mibBuilder.loadTexts: f3UsbWIFIDonglePortIndex.setStatus('current')
f3UsbWIFIDonglePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortIfIndex.setStatus('current')
f3UsbWIFIDonglePortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortEntityIndex.setStatus('current')
f3UsbWIFIDonglePortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortAdminState.setStatus('current')
f3UsbWIFIDonglePortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortOperationalState.setStatus('current')
f3UsbWIFIDonglePortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortSecondaryState.setStatus('current')
f3UsbWIFIDonglePortSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortSSID.setStatus('current')
f3UsbWIFIDonglePortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortPassword.setStatus('current')
f3UsbWIFIDonglePortEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 9), WIFIEncryptionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortEncryption.setStatus('current')
f3UsbWIFIDonglePortIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortIPAddress.setStatus('current')
f3UsbWIFIDonglePortwWIFIIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortwWIFIIPNetMask.setStatus('current')
f3UsbWIFIDonglePortWIFIDHCPRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 12), DHCPType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortWIFIDHCPRole.setStatus('current')
f3UsbWIFIDonglePortWIFIAllocatedIPFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortWIFIAllocatedIPFrom.setStatus('current')
f3UsbWIFIDonglePortWIFIAllocatedIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortWIFIAllocatedIPEnd.setStatus('current')
f3UsbWIFIDonglePortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 15), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortStorageType.setStatus('current')
f3UsbWIFIDonglePortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortRowStatus.setStatus('current')
f3UsbWIFIDonglePortAccessdUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortAccessdUsers.setStatus('current')
f3UsbWIFIDonglePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortName.setStatus('current')
bits8PortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78), )
if mibBuilder.loadTexts: bits8PortGroupTable.setStatus('current')
bits8PortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "bits8PortGroupIndex"))
if mibBuilder.loadTexts: bits8PortGroupEntry.setStatus('current')
bits8PortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits8PortGroupIndex.setStatus('current')
bits8PortGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits8PortGroupIfIndex.setStatus('current')
bits8PortGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupAdminState.setStatus('current')
bits8PortGroupOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits8PortGroupOperationalState.setStatus('current')
bits8PortGroupSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits8PortGroupSecondaryState.setStatus('current')
bits8PortGroupLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 6), BitsPortLineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupLineType.setStatus('current')
bits8PortGroupLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 7), BitsPortLineCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupLineCode.setStatus('current')
bits8PortGroupFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 8), BitsFrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupFrameFormat.setStatus('current')
bits8PortGroupSaBitDesignation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 9), SaBitDesignation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupSaBitDesignation.setStatus('current')
bits8PortGroupQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupQLModeEnabled.setStatus('current')
bits8PortGroupTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 11), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits8PortGroupTransmitQL.setStatus('current')
bits8PortGroupSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 12), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupSquelchQL.setStatus('current')
bits8PortGroupLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 13), LineBuildOut()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupLineBuildOut.setStatus('current')
bits8PortGroupImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 14), BitsPortImpedanceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupImpedance.setStatus('current')
bits8PortGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bits8PortGroupRowStatus.setStatus('current')
bits8PortGroupActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 16), PortState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupActivePorts.setStatus('current')
bits8PortGroupClkIfEnabledPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 17), PortState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupClkIfEnabledPorts.setStatus('current')
pps16PortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79), )
if mibBuilder.loadTexts: pps16PortGroupTable.setStatus('current')
pps16PortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "pps16PortGroupIndex"))
if mibBuilder.loadTexts: pps16PortGroupEntry.setStatus('current')
pps16PortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupIndex.setStatus('current')
pps16PortGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupIfIndex.setStatus('current')
pps16PortGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 3), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupAdminState.setStatus('current')
pps16PortGroupOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupOperationalState.setStatus('current')
pps16PortGroupSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupSecondaryState.setStatus('current')
pps16PortGroupAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupAlias.setStatus('current')
pps16PortGroupSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 7), SquelchControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupSquelchControl.setStatus('current')
pps16PortGroupTODSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 8), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupTODSource.setStatus('current')
pps16PortGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 9), SignalDirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupDirection.setStatus('current')
pps16PortGroupDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pps16PortGroupDelayCompensation.setStatus('current')
pps16PortGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pps16PortGroupRowStatus.setStatus('current')
clk16PortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80), )
if mibBuilder.loadTexts: clk16PortGroupTable.setStatus('current')
clk16PortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "clk16PortGroupIndex"))
if mibBuilder.loadTexts: clk16PortGroupEntry.setStatus('current')
clk16PortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupIndex.setStatus('current')
clk16PortGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupIfIndex.setStatus('current')
clk16PortGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 3), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupAdminState.setStatus('current')
clk16PortGroupOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupOperationalState.setStatus('current')
clk16PortGroupSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupSecondaryState.setStatus('current')
clk16PortGroupAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupAlias.setStatus('current')
clk16PortGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 7), SignalDirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupDirection.setStatus('current')
clk16PortGroupSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 8), SquelchControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupSquelchControl.setStatus('current')
clk16PortGroupSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 9), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupSquelchQL.setStatus('current')
clk16PortGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clk16PortGroupRowStatus.setStatus('current')
todPps16PortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81), )
if mibBuilder.loadTexts: todPps16PortGroupTable.setStatus('current')
todPps16PortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "todPps16PortGroupIndex"))
if mibBuilder.loadTexts: todPps16PortGroupEntry.setStatus('current')
todPps16PortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupIndex.setStatus('current')
todPps16PortGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupIfIndex.setStatus('current')
todPps16PortGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 3), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupAdminState.setStatus('current')
todPps16PortGroupOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupOperationalState.setStatus('current')
todPps16PortGroupSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupSecondaryState.setStatus('current')
todPps16PortGroupAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupAlias.setStatus('current')
todPps16PortGroupSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 7), SquelchControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupSquelchControl.setStatus('current')
todPps16PortGroupSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 8), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupSquelchQL.setStatus('current')
todPps16PortGroupTODSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 9), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupTODSource.setStatus('current')
todPps16PortGroupOutputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 10), TODOutputFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupOutputFormat.setStatus('current')
todPps16PortGroupDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: todPps16PortGroupDelayCompensation.setStatus('current')
todPps16PortGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: todPps16PortGroupRowStatus.setStatus('current')
f3PolicerEnvelopeTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82), )
if mibBuilder.loadTexts: f3PolicerEnvelopeTable.setStatus('current')
f3PolicerEnvelopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "f3PolicerEnvelopeIndex"))
if mibBuilder.loadTexts: f3PolicerEnvelopeEntry.setStatus('current')
f3PolicerEnvelopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PolicerEnvelopeIndex.setStatus('current')
f3PolicerEnvelopeCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PolicerEnvelopeCouplingFlag.setStatus('current')
f3PolicerEnvelopeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PolicerEnvelopeStorageType.setStatus('current')
f3PolicerEnvelopeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PolicerEnvelopeRowStatus.setStatus('current')
f3EnvelopeAssocPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 83), )
if mibBuilder.loadTexts: f3EnvelopeAssocPolicerTable.setStatus('current')
f3EnvelopeAssocPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 83, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "f3PolicerEnvelopeIndex"), (0, "CM-FACILITY-MIB", "f3EnvelopeAssocPolicer"))
if mibBuilder.loadTexts: f3EnvelopeAssocPolicerEntry.setStatus('current')
f3EnvelopeAssocPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 83, 1, 1), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EnvelopeAssocPolicer.setStatus('current')
cmNetPortExpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84), )
if mibBuilder.loadTexts: cmNetPortExpDEEncTable.setStatus('current')
cmNetPortExpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortExpDEEncIndex"))
if mibBuilder.loadTexts: cmNetPortExpDEEncEntry.setStatus('current')
cmNetPortExpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortExpDEEncIndex.setStatus('current')
cmNetPortExpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEEncInPriority.setStatus('current')
cmNetPortExpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEEncDropIneligiblePrio.setStatus('current')
cmNetPortExpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEEncDropEligiblePrio.setStatus('current')
cmNetPortExpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85), )
if mibBuilder.loadTexts: cmNetPortExpDEDecTable.setStatus('current')
cmNetPortExpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortExpDEDecIndex"))
if mibBuilder.loadTexts: cmNetPortExpDEDecEntry.setStatus('current')
cmNetPortExpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortExpDEDecIndex.setStatus('current')
cmNetPortExpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEDecInPriority.setStatus('current')
cmNetPortExpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEDecOutPriority.setStatus('current')
cmNetPortExpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEDecDropEligible.setStatus('current')
cmNetPortExpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 86), )
if mibBuilder.loadTexts: cmNetPortExpDEPairTable.setStatus('current')
cmNetPortExpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 86, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortExpDEPairIndex"))
if mibBuilder.loadTexts: cmNetPortExpDEPairEntry.setStatus('current')
cmNetPortExpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 86, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortExpDEPairIndex.setStatus('current')
cmNetPortExpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 86, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEDropIneligiblePrio.setStatus('current')
cmNetPortExpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 86, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEDropEligiblePrio.setStatus('current')
cmNetPortIpPrecDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87), )
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncTable.setStatus('current')
cmNetPortIpPrecDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortIpPrecDEEncIndex"))
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncEntry.setStatus('current')
cmNetPortIpPrecDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncIndex.setStatus('current')
cmNetPortIpPrecDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncInPriority.setStatus('current')
cmNetPortIpPrecDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncDropIneligiblePrio.setStatus('current')
cmNetPortIpPrecDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncDropEligiblePrio.setStatus('current')
cmNetPortIpPrecDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88), )
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecTable.setStatus('current')
cmNetPortIpPrecDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortIpPrecDEDecIndex"))
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecEntry.setStatus('current')
cmNetPortIpPrecDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecIndex.setStatus('current')
cmNetPortIpPrecDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecInPriority.setStatus('current')
cmNetPortIpPrecDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecOutPriority.setStatus('current')
cmNetPortIpPrecDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecDropEligible.setStatus('current')
cmNetPortIpPrecDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 89), )
if mibBuilder.loadTexts: cmNetPortIpPrecDEPairTable.setStatus('current')
cmNetPortIpPrecDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 89, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortIpPrecDEPairIndex"))
if mibBuilder.loadTexts: cmNetPortIpPrecDEPairEntry.setStatus('current')
cmNetPortIpPrecDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 89, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortIpPrecDEPairIndex.setStatus('current')
cmNetPortIpPrecDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 89, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEDropIneligiblePrio.setStatus('current')
cmNetPortIpPrecDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 89, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEDropEligiblePrio.setStatus('current')
cmNetPortEncapPcpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90), )
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncTable.setStatus('current')
cmNetPortEncapPcpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortEncapPcpDEEncIndex"))
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncEntry.setStatus('current')
cmNetPortEncapPcpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncIndex.setStatus('current')
cmNetPortEncapPcpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncInPriority.setStatus('current')
cmNetPortEncapPcpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncDropIneligiblePrio.setStatus('current')
cmNetPortEncapPcpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncDropEligiblePrio.setStatus('current')
cmNetPortEncapPcpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91), )
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecTable.setStatus('current')
cmNetPortEncapPcpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortEncapPcpDEDecIndex"))
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecEntry.setStatus('current')
cmNetPortEncapPcpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecIndex.setStatus('current')
cmNetPortEncapPcpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecInPriority.setStatus('current')
cmNetPortEncapPcpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecOutPriority.setStatus('current')
cmNetPortEncapPcpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecDropEligible.setStatus('current')
cmNetPortEncapPcpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 92), )
if mibBuilder.loadTexts: cmNetPortEncapPcpDEPairTable.setStatus('current')
cmNetPortEncapPcpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 92, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortEncapPcpDEPairIndex"))
if mibBuilder.loadTexts: cmNetPortEncapPcpDEPairEntry.setStatus('current')
cmNetPortEncapPcpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 92, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortEncapPcpDEPairIndex.setStatus('current')
cmNetPortEncapPcpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 92, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDropIneligiblePrio.setStatus('current')
cmNetPortEncapPcpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 92, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDropEligiblePrio.setStatus('current')
f3SatelliteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93), )
if mibBuilder.loadTexts: f3SatelliteTable.setStatus('current')
f3SatelliteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "f3SatelliteIndex"))
if mibBuilder.loadTexts: f3SatelliteEntry.setStatus('current')
f3SatelliteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3SatelliteIndex.setStatus('current')
f3SatelliteInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteInUse.setStatus('current')
f3SatelliteSV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteSV.setStatus('current')
f3SatelliteSVType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 4), ConstellationTypesBitMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteSVType.setStatus('current')
f3SatelliteCNO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteCNO.setStatus('current')
f3SatelliteHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 6), SatelliteHealth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteHealth.setStatus('current')
f3SatelliteAzimuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteAzimuth.setStatus('current')
f3SatelliteElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteElevation.setStatus('current')
f3SatelliteGnssReceiverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 9), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteGnssReceiverPort.setStatus('current')
cmEthernetTrafficPortJdsuExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 94), )
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuExtTable.setStatus('current')
cmEthernetTrafficPortJdsuExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 94, 1), )
cmEthernetTrafficPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetTrafficPortJdsuExtEntry"))
cmEthernetTrafficPortJdsuExtEntry.setIndexNames(*cmEthernetTrafficPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuExtEntry.setStatus('current')
cmEthernetTrafficPortJDSUControlFramesSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 94, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortJDSUControlFramesSnoopingEnabled.setStatus('current')
cmEthernetTrafficPortJDSULoopbackVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 94, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortJDSULoopbackVlan.setStatus('current')
cmEthernetTrafficPortJDSULoopbackVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 94, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortJDSULoopbackVlanList.setStatus('current')
f3FpQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95), )
if mibBuilder.loadTexts: f3FpQosShaperTable.setStatus('current')
f3FpQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FpQosShaperIndex"))
if mibBuilder.loadTexts: f3FpQosShaperEntry.setStatus('current')
f3FpQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: f3FpQosShaperIndex.setStatus('current')
f3FpQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 2), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperAdminState.setStatus('current')
f3FpQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperOperationalState.setStatus('current')
f3FpQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperSecondaryState.setStatus('current')
f3FpQosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperCIRLo.setStatus('current')
f3FpQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperCIRHi.setStatus('current')
f3FpQosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperEIRLo.setStatus('current')
f3FpQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperEIRHi.setStatus('current')
f3FpQosShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperCBS.setStatus('current')
f3FpQosShaperEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperEBS.setStatus('current')
f3FpQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperBufferSize.setStatus('current')
f3FpQosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperCOS.setStatus('current')
f3FpQosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 13), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperStorageType.setStatus('current')
f3FpQosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperRowStatus.setStatus('current')
f3FpQosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosShaperWfqWeight.setStatus('current')
f3FpQosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96), )
if mibBuilder.loadTexts: f3FpQosPolicerTable.setStatus('current')
f3FpQosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FpQosPolicerIndex"))
if mibBuilder.loadTexts: f3FpQosPolicerEntry.setStatus('current')
f3FpQosPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: f3FpQosPolicerIndex.setStatus('current')
f3FpQosPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 2), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerAdminState.setStatus('current')
f3FpQosPolicerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerOperationalState.setStatus('current')
f3FpQosPolicerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerSecondaryState.setStatus('current')
f3FpQosPolicerCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerCIRLo.setStatus('current')
f3FpQosPolicerCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerCIRHi.setStatus('current')
f3FpQosPolicerEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerEIRLo.setStatus('current')
f3FpQosPolicerEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerEIRHi.setStatus('current')
f3FpQosPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerCBS.setStatus('current')
f3FpQosPolicerEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerEBS.setStatus('current')
f3FpQosPolicerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 11), PolicerAlgorithmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerAlgorithm.setStatus('current')
f3FpQosPolicerColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 12), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerColorMode.setStatus('current')
f3FpQosPolicerCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerCouplingFlag.setStatus('current')
f3FpQosPolicerPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerPolicingEnabled.setStatus('current')
f3FpQosPolicerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 15), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerStorageType.setStatus('current')
f3FpQosPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerRowStatus.setStatus('current')
f3FpQosPolicerCIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerCIRMaxHi.setStatus('current')
f3FpQosPolicerCIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerCIRMaxLo.setStatus('current')
f3FpQosPolicerEIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerEIRMaxHi.setStatus('current')
f3FpQosPolicerEIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerEIRMaxLo.setStatus('current')
f3FpQosPolicerEnvelopeObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 21), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerEnvelopeObject.setStatus('current')
f3FpQosPolicerRank = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerRank.setStatus('current')
cmEthernetTrafficPortCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97), )
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Table.setStatus('current')
cmEthernetTrafficPortCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Index"))
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Entry.setStatus('current')
cmEthernetTrafficPortCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Index.setStatus('current')
cmEthernetTrafficPortCpdV2CiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2CiscoGroupDispType.setStatus('deprecated')
cmEthernetTrafficPortCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2IslDispType.setStatus('current')
cmEthernetTrafficPortCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PagpDispType.setStatus('current')
cmEthernetTrafficPortCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2UdldDispType.setStatus('current')
cmEthernetTrafficPortCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2CdpDispType.setStatus('current')
cmEthernetTrafficPortCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2VtpDispType.setStatus('current')
cmEthernetTrafficPortCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2DtpDispType.setStatus('current')
cmEthernetTrafficPortCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PvstpPlusDispType.setStatus('current')
cmEthernetTrafficPortCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2UplinkFastDispType.setStatus('current')
cmEthernetTrafficPortCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2VlanBridgeDispType.setStatus('current')
cmEthernetTrafficPortCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2L2PTDispType.setStatus('current')
cmEthernetTrafficPortCpdV2BridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2BridgeGroupDispType.setStatus('deprecated')
cmEthernetTrafficPortCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2BPDUDispType.setStatus('current')
cmEthernetTrafficPortCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PauseDispType.setStatus('current')
cmEthernetTrafficPortCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LACPDispType.setStatus('current')
cmEthernetTrafficPortCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LACPMarkerDispType.setStatus('current')
cmEthernetTrafficPortCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2EfmOamDispType.setStatus('current')
cmEthernetTrafficPortCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2SSMDispType.setStatus('current')
cmEthernetTrafficPortCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PortAuthenDispType.setStatus('current')
cmEthernetTrafficPortCpdV2BridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2BridgeReservedDispType.setStatus('deprecated')
cmEthernetTrafficPortCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LANBridgesDispType.setStatus('current')
cmEthernetTrafficPortCpdV2GARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GARPGroupDispType.setStatus('deprecated')
cmEthernetTrafficPortCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GMRPDispType.setStatus('current')
cmEthernetTrafficPortCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GVRPDispType.setStatus('current')
cmEthernetTrafficPortCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GARPDispType.setStatus('current')
cmEthernetTrafficPortCpdV2LLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LLDPDispType.setStatus('deprecated')
cmEthernetTrafficPortCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2ELMIDispType.setStatus('current')
cmEthernetTrafficPortCpdV2L2PTTunnelMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2L2PTTunnelMac.setStatus('current')
cmEthernetTrafficPortCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac00DispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac01DispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac02DispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac03DispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac04DispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac05DispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac06DispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac07DispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac08DispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac09DispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0ADispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0BDispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0CDispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0DDispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0EDispType.setStatus('current')
cmEthernetTrafficPortCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0FDispType.setStatus('current')
cmEthernetTrafficPortCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2NearestLLDPDispType.setStatus('current')
cmEthernetTrafficPortCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2NonTpmrLLDPDispType.setStatus('current')
cmEthernetTrafficPortCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2CustomerLLDPDispType.setStatus('current')
cmEthernetTrafficPortCpdV2PtpUntaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 49), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PtpUntaggedDispType.setStatus('current')
cmEthernetTrafficPortCpdV2PtpTaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PtpTaggedDispType.setStatus('current')
f3FlowPointCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98), )
if mibBuilder.loadTexts: f3FlowPointCpdV2Table.setStatus('current')
f3FlowPointCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FlowPointCpdV2Index"))
if mibBuilder.loadTexts: f3FlowPointCpdV2Entry.setStatus('current')
f3FlowPointCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 1), Integer32())
if mibBuilder.loadTexts: f3FlowPointCpdV2Index.setStatus('current')
f3FlowPointCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2IslDispType.setStatus('current')
f3FlowPointCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2PagpDispType.setStatus('current')
f3FlowPointCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2UdldDispType.setStatus('current')
f3FlowPointCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2CdpDispType.setStatus('current')
f3FlowPointCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2VtpDispType.setStatus('current')
f3FlowPointCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2DtpDispType.setStatus('current')
f3FlowPointCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2PvstpPlusDispType.setStatus('current')
f3FlowPointCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2UplinkFastDispType.setStatus('current')
f3FlowPointCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2VlanBridgeDispType.setStatus('current')
f3FlowPointCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2L2PTDispType.setStatus('current')
f3FlowPointCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2BPDUDispType.setStatus('current')
f3FlowPointCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2PauseDispType.setStatus('current')
f3FlowPointCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2LACPDispType.setStatus('current')
f3FlowPointCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2LACPMarkerDispType.setStatus('current')
f3FlowPointCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2EfmOamDispType.setStatus('current')
f3FlowPointCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2SSMDispType.setStatus('current')
f3FlowPointCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2PortAuthenDispType.setStatus('current')
f3FlowPointCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2LANBridgesDispType.setStatus('current')
f3FlowPointCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2GMRPDispType.setStatus('current')
f3FlowPointCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2GVRPDispType.setStatus('current')
f3FlowPointCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2GARPDispType.setStatus('current')
f3FlowPointCpdV2ActiveControlProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 23), CmActiveControlProtocolsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowPointCpdV2ActiveControlProtocols.setStatus('current')
f3FlowPointCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2ELMIDispType.setStatus('current')
f3FlowPointCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac00DispType.setStatus('current')
f3FlowPointCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac01DispType.setStatus('current')
f3FlowPointCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac02DispType.setStatus('current')
f3FlowPointCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac03DispType.setStatus('current')
f3FlowPointCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 29), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac04DispType.setStatus('current')
f3FlowPointCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac05DispType.setStatus('current')
f3FlowPointCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac06DispType.setStatus('current')
f3FlowPointCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac07DispType.setStatus('current')
f3FlowPointCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac08DispType.setStatus('current')
f3FlowPointCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac09DispType.setStatus('current')
f3FlowPointCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0ADispType.setStatus('current')
f3FlowPointCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0BDispType.setStatus('current')
f3FlowPointCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0CDispType.setStatus('current')
f3FlowPointCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0DDispType.setStatus('current')
f3FlowPointCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0EDispType.setStatus('current')
f3FlowPointCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0FDispType.setStatus('current')
f3FlowPointCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2NearestLLDPDispType.setStatus('current')
f3FlowPointCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2NonTpmrLLDPDispType.setStatus('current')
f3FlowPointCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2CustomerLLDPDispType.setStatus('current')
f3AclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99), )
if mibBuilder.loadTexts: f3AclRuleTable.setStatus('current')
f3AclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3AclRuleIndex"))
if mibBuilder.loadTexts: f3AclRuleEntry.setStatus('current')
f3AclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 1), Integer32())
if mibBuilder.loadTexts: f3AclRuleIndex.setStatus('current')
f3AclRuleAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleAdminState.setStatus('current')
f3AclRuleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 3), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleAlias.setStatus('current')
f3AclRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRulePriority.setStatus('current')
f3AclRuleOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 5), AclRuleOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOperation.setStatus('current')
f3AclRuleCosOverrideControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleCosOverrideControl.setStatus('current')
f3AclRuleCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleCOS.setStatus('current')
f3AclRuleSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcMacAddressControl.setStatus('current')
f3AclRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcMacAddress.setStatus('current')
f3AclRuleSrcMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcMacAddressMask.setStatus('current')
f3AclRuleDstMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstMacAddressControl.setStatus('current')
f3AclRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstMacAddress.setStatus('current')
f3AclRuleDstMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 13), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstMacAddressMask.setStatus('current')
f3AclRuleOuterVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanVIDControl.setStatus('current')
f3AclRuleOuterVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 15), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanVIDLowLimit.setStatus('current')
f3AclRuleOuterVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 16), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanVIDHighLimit.setStatus('current')
f3AclRuleInnerVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanVIDControl.setStatus('current')
f3AclRuleInnerVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 18), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanVIDLowLimit.setStatus('current')
f3AclRuleInnerVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 19), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanVIDHighLimit.setStatus('current')
f3AclRuleOuterVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanPcpControl.setStatus('current')
f3AclRuleOuterVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 21), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanPcpLowLimit.setStatus('current')
f3AclRuleOuterVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 22), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanPcpHighLimit.setStatus('current')
f3AclRuleInnerVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanPcpControl.setStatus('current')
f3AclRuleInnerVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 24), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanPcpLowLimit.setStatus('current')
f3AclRuleInnerVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 25), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanPcpHighLimit.setStatus('current')
f3AclRuleOuterVlanDeiControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanDeiControl.setStatus('current')
f3AclRuleOuterVlanDei = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanDei.setStatus('current')
f3AclRuleEtherTypeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleEtherTypeControl.setStatus('current')
f3AclRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleEtherType.setStatus('current')
f3AclRuleIpv4PriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleIpv4PriorityControl.setStatus('deprecated')
f3AclRuleIpv4PriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleIpv4PriorityLowLimit.setStatus('deprecated')
f3AclRuleIpv4PriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleIpv4PriorityHighLimit.setStatus('deprecated')
f3AclRuleProtocolControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleProtocolControl.setStatus('current')
f3AclRuleProtocolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleProtocolNumber.setStatus('current')
f3AclRuleSrcIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv4AddressControl.setStatus('current')
f3AclRuleSrcIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 36), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv4AddressLowLimit.setStatus('current')
f3AclRuleSrcIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 37), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv4AddressHighLimit.setStatus('current')
f3AclRuleDstIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv4AddressControl.setStatus('current')
f3AclRuleDstIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 39), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv4AddressLowLimit.setStatus('current')
f3AclRuleDstIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 40), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv4AddressHighLimit.setStatus('current')
f3AclRuleSrcPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcPortControl.setStatus('current')
f3AclRuleSrcPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcPortLowLimit.setStatus('current')
f3AclRuleSrcPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcPortHighLimit.setStatus('current')
f3AclRuleDstPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstPortControl.setStatus('current')
f3AclRuleDstPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstPortLowLimit.setStatus('current')
f3AclRuleDstPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstPortHighLimit.setStatus('current')
f3AclRuleTcpFlagsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleTcpFlagsControl.setStatus('current')
f3AclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleTcpFlags.setStatus('current')
f3AclRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 49), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AclRuleStorageType.setStatus('current')
f3AclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AclRuleRowStatus.setStatus('current')
f3AclRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 51), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleActive.setStatus('current')
f3AclRuleSrcIpv6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 52), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv6AddressControl.setStatus('current')
f3AclRuleSrcIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 53), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv6Address.setStatus('current')
f3AclRuleSrcIpv6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv6AddressPrefixLen.setStatus('current')
f3AclRuleDstIpv6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv6AddressControl.setStatus('current')
f3AclRuleDstIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 56), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv6Address.setStatus('current')
f3AclRuleDstIpv6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv6AddressPrefixLen.setStatus('current')
f3AclRuleIpV6FlowLabelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 58), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleIpV6FlowLabelControl.setStatus('current')
f3AclRuleIpV6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleIpV6FlowLabel.setStatus('current')
f3AclRulePriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRulePriorityControl.setStatus('deprecated')
f3AclRulePriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRulePriorityLowLimit.setStatus('deprecated')
f3AclRulePriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRulePriorityHighLimit.setStatus('deprecated')
f3EthernetTrafficPortExpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100), )
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncTable.setStatus('current')
f3EthernetTrafficPortExpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEEncIndex"))
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncEntry.setStatus('current')
f3EthernetTrafficPortExpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100, 1, 1), Integer32())
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncIndex.setStatus('current')
f3EthernetTrafficPortExpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncInPriority.setStatus('current')
f3EthernetTrafficPortExpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncDropIneligiblePrio.setStatus('current')
f3EthernetTrafficPortExpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncDropEligiblePrio.setStatus('current')
f3EthernetTrafficPortExpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101), )
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecTable.setStatus('current')
f3EthernetTrafficPortExpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDecIndex"))
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecEntry.setStatus('current')
f3EthernetTrafficPortExpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101, 1, 1), Integer32())
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecIndex.setStatus('current')
f3EthernetTrafficPortExpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecInPriority.setStatus('current')
f3EthernetTrafficPortExpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecOutPriority.setStatus('current')
f3EthernetTrafficPortExpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecDropEligible.setStatus('current')
f3EthernetTrafficPortExpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 102), )
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEPairTable.setStatus('current')
f3EthernetTrafficPortExpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 102, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEPairIndex"))
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEPairEntry.setStatus('current')
f3EthernetTrafficPortExpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 102, 1, 1), Integer32())
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEPairIndex.setStatus('current')
f3EthernetTrafficPortExpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 102, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDropIneligiblePrio.setStatus('current')
f3EthernetTrafficPortExpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 102, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDropEligiblePrio.setStatus('current')
cmEthernetNetPortPppoeParamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103), )
if mibBuilder.loadTexts: cmEthernetNetPortPppoeParamTable.setStatus('current')
cmEthernetNetPortPppoeParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1), )
cmEthernetNetPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetNetPortPppoeParamEntry"))
cmEthernetNetPortPppoeParamEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetNetPortPppoeParamEntry.setStatus('current')
cmEthernetNetPortPppoeOuterVlanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanControl.setStatus('current')
cmEthernetNetPortPppoeOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanEtherType.setStatus('current')
cmEthernetNetPortPppoeOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 3), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanId.setStatus('current')
cmEthernetNetPortPppoeOuterVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanPriority.setStatus('current')
cmEthernetNetPortPppoeInnerVlanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanControl.setStatus('current')
cmEthernetNetPortPppoeInnerVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanEtherType.setStatus('current')
cmEthernetNetPortPppoeInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 7), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanId.setStatus('current')
cmEthernetNetPortPppoeInnerVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 8), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanPriority.setStatus('current')
cmEthernetNetPortPppoeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeServiceName.setStatus('current')
cmEthernetNetPortPppoeLcpKeepAlivePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeLcpKeepAlivePeriod.setStatus('current')
cmEthernetNetPortPppoeLcpRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeLcpRetryThreshold.setStatus('current')
cmEthernetNetPortPppoeRxAcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeRxAcName.setStatus('current')
cmEthernetNetPortPppoeRxServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeRxServiceName.setStatus('current')
cmEthernetNetPortPppoeSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeSessionId.setStatus('current')
cmEthernetNetPortPppoeConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 15), PPPoEConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeConnStatus.setStatus('current')
cmEthernetNetPortXdslParamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104), )
if mibBuilder.loadTexts: cmEthernetNetPortXdslParamTable.setStatus('current')
cmEthernetNetPortXdslParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1), )
cmEthernetNetPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetNetPortXdslParamEntry"))
cmEthernetNetPortXdslParamEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetNetPortXdslParamEntry.setStatus('current')
cmEthernetNetPortXdslConnControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslConnControl.setStatus('current')
cmEthernetNetPortXdslModulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 2), XDSLModulationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslModulationMode.setStatus('current')
cmEthernetNetPortXdslBitSwapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslBitSwapEnabled.setStatus('current')
cmEthernetNetPortXdslGvectorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslGvectorEnabled.setStatus('current')
cmEthernetNetPortXdslVdslProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 5), VDSLProfileFields()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslVdslProfile.setStatus('current')
cmEthernetNetPortXdslStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 6), XDSLStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslStatus.setStatus('current')
cmEthernetNetPortXdslCurVdslProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 7), VDSLProfileField()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslCurVdslProfile.setStatus('current')
cmEthernetNetPortXdslActualLinkRateUpStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslActualLinkRateUpStream.setStatus('current')
cmEthernetNetPortXdslActualLinkRateDownStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslActualLinkRateDownStream.setStatus('current')
cmEthernetNetPortXdslControlChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 10), XDSLControlChannel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslControlChannel.setStatus('current')
cmEthernetNetPortXdslCarrierSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 11), XDSLCarrierSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslCarrierSet.setStatus('current')
cmEthernetNetPortXdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 12), XDSLMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslMode.setStatus('current')
cmEthernetNetPortXdslAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 13), XDSLAnnex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslAnnex.setStatus('current')
cmEthernetNetPortXdslDsSNRMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsSNRMargin.setStatus('current')
cmEthernetNetPortXdslUsSNRMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslUsSNRMargin.setStatus('current')
cmEthernetNetPortXdslDsSignalAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsSignalAttenuation.setStatus('current')
cmEthernetNetPortXdslDsLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsLineAttenuation.setStatus('current')
cmEthernetNetPortXdslDsTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsTxPower.setStatus('current')
cmEthernetNetPortXdslUsTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslUsTxPower.setStatus('current')
cmEthernetNetPortXdslDsAttainableRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsAttainableRate.setStatus('current')
cmEthernetNetPortXdslUsAttainableRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslUsAttainableRate.setStatus('current')
sciPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105), )
if mibBuilder.loadTexts: sciPortTable.setStatus('current')
sciPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "sciPortIndex"))
if mibBuilder.loadTexts: sciPortEntry.setStatus('current')
sciPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciPortIndex.setStatus('current')
sciPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sciPortAdminState.setStatus('current')
sciPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciPortOperationalState.setStatus('current')
sciPortSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 4), SciSignalMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sciPortSignalMode.setStatus('current')
sciPortSignalDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 5), SciSignalDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sciPortSignalDirection.setStatus('current')
sciPortRxSsmQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 6), SciRxSsmQL()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sciPortRxSsmQL.setStatus('current')
f3IrigRs422OutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106), )
if mibBuilder.loadTexts: f3IrigRs422OutputPortTable.setStatus('current')
f3IrigRs422OutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3IrigRs422OutputPortIndex"))
if mibBuilder.loadTexts: f3IrigRs422OutputPortEntry.setStatus('current')
f3IrigRs422OutputPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3IrigRs422OutputPortIndex.setStatus('current')
f3IrigRs422OutputPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRs422OutputPortIfIndex.setStatus('current')
f3IrigRs422OutputPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRs422OutputPortEntityIndex.setStatus('current')
f3IrigRs422OutputPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRs422OutputPortAlias.setStatus('current')
f3IrigRs422OutputPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRs422OutputPortAdminState.setStatus('current')
f3IrigRs422OutputPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRs422OutputPortOperationalState.setStatus('current')
f3IrigRs422OutputPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRs422OutputPortSecondaryState.setStatus('current')
f3IrigRs422OutputPortTimeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 8), IrigTimeCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRs422OutputPortTimeCode.setStatus('current')
f3IrigRs422OutputPortControlField = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 9), IrigControlField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRs422OutputPortControlField.setStatus('current')
f3IrigOpticalOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107), )
if mibBuilder.loadTexts: f3IrigOpticalOutputPortTable.setStatus('current')
f3IrigOpticalOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3IrigOpticalOutputPortIndex"))
if mibBuilder.loadTexts: f3IrigOpticalOutputPortEntry.setStatus('current')
f3IrigOpticalOutputPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3IrigOpticalOutputPortIndex.setStatus('current')
f3IrigOpticalOutputPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortIfIndex.setStatus('current')
f3IrigOpticalOutputPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortEntityIndex.setStatus('current')
f3IrigOpticalOutputPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortAlias.setStatus('current')
f3IrigOpticalOutputPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortAdminState.setStatus('current')
f3IrigOpticalOutputPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortOperationalState.setStatus('current')
f3IrigOpticalOutputPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortSecondaryState.setStatus('current')
f3IrigOpticalOutputPortTimeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 8), IrigTimeCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortTimeCode.setStatus('current')
f3IrigOpticalOutputPortControlField = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 9), IrigControlField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortControlField.setStatus('current')
f3IrigRelayOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108), )
if mibBuilder.loadTexts: f3IrigRelayOutputPortTable.setStatus('current')
f3IrigRelayOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3IrigRelayOutputPortIndex"))
if mibBuilder.loadTexts: f3IrigRelayOutputPortEntry.setStatus('current')
f3IrigRelayOutputPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3IrigRelayOutputPortIndex.setStatus('current')
f3IrigRelayOutputPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRelayOutputPortIfIndex.setStatus('current')
f3IrigRelayOutputPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRelayOutputPortEntityIndex.setStatus('current')
f3IrigRelayOutputPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRelayOutputPortAlias.setStatus('current')
f3IrigRelayOutputPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRelayOutputPortAdminState.setStatus('current')
f3IrigRelayOutputPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRelayOutputPortOperationalState.setStatus('current')
f3IrigRelayOutputPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRelayOutputPortSecondaryState.setStatus('current')
f3IrigRelayOutputPortRelayOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 8), IrigRelayOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRelayOutputPortRelayOperation.setStatus('current')
f3IrigOutputGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109), )
if mibBuilder.loadTexts: f3IrigOutputGroupTable.setStatus('current')
f3IrigOutputGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3IrigOutputGroupIndex"))
if mibBuilder.loadTexts: f3IrigOutputGroupEntry.setStatus('current')
f3IrigOutputGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3IrigOutputGroupIndex.setStatus('current')
f3IrigOutputGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputGroupIfIndex.setStatus('current')
f3IrigOutputGroupEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputGroupEntityIndex.setStatus('current')
f3IrigOutputGroupAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputGroupAlias.setStatus('current')
f3IrigOutputGroupExtensionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 5), IrigGroupExtensionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputGroupExtensionType.setStatus('current')
f3IrigOutputGroupExtensionDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputGroupExtensionDetection.setStatus('current')
f3IrigOutputUnitPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110), )
if mibBuilder.loadTexts: f3IrigOutputUnitPortTable.setStatus('current')
f3IrigOutputUnitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3IrigOutputGroupIndex"), (0, "CM-FACILITY-MIB", "f3IrigOutputUnitPortIndex"))
if mibBuilder.loadTexts: f3IrigOutputUnitPortEntry.setStatus('current')
f3IrigOutputUnitPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3IrigOutputUnitPortIndex.setStatus('current')
f3IrigOutputUnitPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputUnitPortIfIndex.setStatus('current')
f3IrigOutputUnitPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputUnitPortEntityIndex.setStatus('current')
f3IrigOutputUnitPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortAlias.setStatus('current')
f3IrigOutputUnitPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortAdminState.setStatus('current')
f3IrigOutputUnitPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputUnitPortOperationalState.setStatus('current')
f3IrigOutputUnitPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputUnitPortSecondaryState.setStatus('current')
f3IrigOutputUnitPortTimeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 8), IrigTimeCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortTimeCode.setStatus('current')
f3IrigOutputUnitPortControlField = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 9), IrigControlField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortControlField.setStatus('current')
f3IrigOutputUnitPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 10), IrigOutputType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortType.setStatus('current')
f3IrigOutputUnitPortDigitalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 11), IrigDigitalSignalVoltage()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortDigitalVoltage.setStatus('current')
ccInputPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111), )
if mibBuilder.loadTexts: ccInputPortTable.setStatus('current')
ccInputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ccInputPortIndex"))
if mibBuilder.loadTexts: ccInputPortEntry.setStatus('current')
ccInputPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccInputPortIndex.setStatus('current')
ccInputPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccInputPortIfIndex.setStatus('current')
ccInputPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccInputPortEntityIndex.setStatus('current')
ccInputPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccInputPortAlias.setStatus('current')
ccInputPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccInputPortAdminState.setStatus('current')
ccInputPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccInputPortOperationalState.setStatus('current')
ccInputPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccInputPortSecondaryState.setStatus('current')
ccGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112), )
if mibBuilder.loadTexts: ccGroupTable.setStatus('current')
ccGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ccGroupIndex"))
if mibBuilder.loadTexts: ccGroupEntry.setStatus('current')
ccGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccGroupIndex.setStatus('current')
ccGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccGroupIfIndex.setStatus('current')
ccGroupEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccGroupEntityIndex.setStatus('current')
ccGroupAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccGroupAlias.setStatus('current')
ccGroupActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 5), CcActivePortState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccGroupActivePorts.setStatus('current')
ccGroupPhaseAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccGroupPhaseAdjust.setStatus('current')
ccGroupDutyCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 7), CcPortDutyCycle()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccGroupDutyCycle.setStatus('current')
cmEncapFlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113), )
if mibBuilder.loadTexts: cmEncapFlowPointTable.setStatus('current')
cmEncapFlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmEncapFlowPointIndex"))
if mibBuilder.loadTexts: cmEncapFlowPointEntry.setStatus('current')
cmEncapFlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointIndex.setStatus('current')
cmEncapFlowPointCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointCircuitName.setStatus('current')
cmEncapFlowPointAssociatedFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEncapFlowPointAssociatedFlowId.setStatus('current')
cmEncapFlowPointRefEoMplsPwObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 4), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointRefEoMplsPwObject.setStatus('current')
cmEncapFlowPointCTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 5), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointCTagControl.setStatus('current')
cmEncapFlowPointCTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 6), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointCTagVlanId.setStatus('current')
cmEncapFlowPointCTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 7), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointCTagVlanPriority.setStatus('current')
cmEncapFlowPointSTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 8), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointSTagControl.setStatus('current')
cmEncapFlowPointSTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 9), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointSTagVlanId.setStatus('current')
cmEncapFlowPointSTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 10), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointSTagVlanPriority.setStatus('current')
cmEncapFlowPointEgressOuterTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointEgressOuterTagPrioMapEnabled.setStatus('current')
cmEncapFlowPointEgressInnerTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointEgressInnerTagPrioMapEnabled.setStatus('current')
cmEncapFlowPointRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 13), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEncapFlowPointRefPrioMapProfile.setStatus('current')
cmEncapFlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 14), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointStorageType.setStatus('current')
cmEncapFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointRowStatus.setStatus('current')
cmFacilityCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 1))
cmFacilityGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2))
cmFacilityCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 1, 1)).setObjects(("CM-FACILITY-MIB", "cmFacilityObjectGroup"), ("CM-FACILITY-MIB", "ethernetAccessPortGroup"), ("CM-FACILITY-MIB", "ethernetNetworkPortGroup"), ("CM-FACILITY-MIB", "ethernetMgmtPortGroup"), ("CM-FACILITY-MIB", "bitsPortGroup"), ("CM-FACILITY-MIB", "trafficGroup"), ("CM-FACILITY-MIB", "prioMapGroup"), ("CM-FACILITY-MIB", "pcpEncodeGroup"), ("CM-FACILITY-MIB", "cpdV2Group"), ("CM-FACILITY-MIB", "trafficGroupCmHub"), ("CM-FACILITY-MIB", "ocnStmGroup"), ("CM-FACILITY-MIB", "stsVcPathGroup"), ("CM-FACILITY-MIB", "vtVcPathGroup"), ("CM-FACILITY-MIB", "e1t1InterfaceGroup"), ("CM-FACILITY-MIB", "e3t3InterfaceGroup"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortGroup"), ("CM-FACILITY-MIB", "f3TimeOfDayPortGroup"), ("CM-FACILITY-MIB", "f3Gps10MhzPortGroup"), ("CM-FACILITY-MIB", "neTMParamsGroup"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJdsuExtGroup"), ("CM-FACILITY-MIB", "f3FpQosShaperGroup"), ("CM-FACILITY-MIB", "f3FpQosPolicerGroup"), ("CM-FACILITY-MIB", "cpdV2TrafficPortGroup"), ("CM-FACILITY-MIB", "f3AclRuleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmFacilityCompliance = cmFacilityCompliance.setStatus('current')
cmFacilityObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 1))
for _cmFacilityObjectGroup_obj in [[("CM-FACILITY-MIB", "cmEthernetAccPortIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetAccPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetAccPortMTU"), ("CM-FACILITY-MIB", "cmEthernetAccPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetAccPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetAccPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetAccPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetAccPortJumboFramesEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetAccPortInitiateDiag"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair1Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair2Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair3Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair4Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseAutoNegCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseEfmLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseResult"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseTestStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseTestTime"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamId"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamAdminDisposition"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortSvcType"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxPauseDisposition"), ("CM-FACILITY-MIB", "cmEthernetAccPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdFilterType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdFilterDescr"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdMacAddressMatch"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdMacAddressMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdEthertype"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdEthertypeMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdSubtype"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdSubtypeMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbLength"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbDescr"), ("CM-FACILITY-MIB", "cmEthernetAccPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpReach"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetAccPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortAutoDiagEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetAccPortN2AVlanTrunkingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortA2NPushPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortN2APopPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortPortVlanId"), ("CM-FACILITY-MIB", "cmEthernetAccPortPortVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetAccPortPrioMapMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmFlowIndex"), ("CM-FACILITY-MIB", "cmFlowCircuitName"), ("CM-FACILITY-MIB", "cmFlowAdminState"), ("CM-FACILITY-MIB", "cmFlowOperationalState"), ("CM-FACILITY-MIB", "cmFlowSecondaryState"), ("CM-FACILITY-MIB", "cmFlowType"), ("CM-FACILITY-MIB", "cmFlowMultiCOS"), ("CM-FACILITY-MIB", "cmFlowA2NCIR"), ("CM-FACILITY-MIB", "cmFlowA2NEIR"), ("CM-FACILITY-MIB", "cmFlowN2ARateLimitingEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACIR"), ("CM-FACILITY-MIB", "cmFlowN2AEIR"), ("CM-FACILITY-MIB", "cmFlowStorageType"), ("CM-FACILITY-MIB", "cmFlowRowStatus"), ("CM-FACILITY-MIB", "cmFlowTrafficType"), ("CM-FACILITY-MIB", "cmFlowCOS"), ("CM-FACILITY-MIB", "cmFlowVlanMemberList"), ("CM-FACILITY-MIB", "cmFlowAction"), ("CM-FACILITY-MIB", "cmFlowActionVlan"), ("CM-FACILITY-MIB", "cmFlowUntaggedMemberEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NCIRHi"), ("CM-FACILITY-MIB", "cmFlowA2NEIRHi"), ("CM-FACILITY-MIB", "cmFlowN2ACIRHi"), ("CM-FACILITY-MIB", "cmFlowN2AEIRHi"), ("CM-FACILITY-MIB", "cmFlowHCOSMgmtEnabled"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowCTagControl"), ("CM-FACILITY-MIB", "cmFlowCTagVlanId"), ("CM-FACILITY-MIB", "cmFlowCTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowCTagMatchRxPrio"), ("CM-FACILITY-MIB", "cmFlowSTagControl"), ("CM-FACILITY-MIB", "cmFlowSTagVlanId"), ("CM-FACILITY-MIB", "cmFlowSTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACOSPriorityTagType"), ("CM-FACILITY-MIB", "cmFlowESFramesLossThreshold"), ("CM-FACILITY-MIB", "cmFlowSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmFlowPolicingEnabled"), ("CM-FACILITY-MIB", "cmFlowPreserveSTagProperties"), ("CM-FACILITY-MIB", "cmFlowInnerTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowN2AOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowCpdIndex"), ("CM-FACILITY-MIB", "cmFlowCpdFilterType"), ("CM-FACILITY-MIB", "cmFlowCpdFilterDescr"), ("CM-FACILITY-MIB", "cmFlowCpdDispType"), ("CM-FACILITY-MIB", "cmFlowCpdMacAddressMatch"), ("CM-FACILITY-MIB", "cmFlowCpdMacAddressMask"), ("CM-FACILITY-MIB", "cmFlowCpdEthertype"), ("CM-FACILITY-MIB", "cmFlowCpdEthertypeMask"), ("CM-FACILITY-MIB", "cmFlowCpdSubtype"), ("CM-FACILITY-MIB", "cmFlowCpdSubtypeMask"), ("CM-FACILITY-MIB", "cmQosShaperTypeIndex"), ("CM-FACILITY-MIB", "cmQosShaperIndex"), ("CM-FACILITY-MIB", "cmQosShaperDirection"), ("CM-FACILITY-MIB", "cmQosShaperAdminState"), ("CM-FACILITY-MIB", "cmQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmQosShaperCIR"), ("CM-FACILITY-MIB", "cmQosShaperCBS"), ("CM-FACILITY-MIB", "cmQosShaperEIR"), ("CM-FACILITY-MIB", "cmQosShaperEBS"), ("CM-FACILITY-MIB", "cmQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmQosShaperStorageType"), ("CM-FACILITY-MIB", "cmQosShaperRowStatus"), ("CM-FACILITY-MIB", "cmQosShaperCOS"), ("CM-FACILITY-MIB", "cmQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmEthernetNetPortIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetNetPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetNetPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetNetPortMTU"), ("CM-FACILITY-MIB", "cmEthernetNetPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetNetPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetNetPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetNetPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetNetPortJumboFramesEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetNetPortInitiateDiag"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair1Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair2Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair3Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair4Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseAutoNegCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseEfmLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseResult"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseTestStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseTestTime"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamId"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamAdminDisposition"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortRxPauseDisposition"), ("CM-FACILITY-MIB", "cmEthernetNetPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetNetPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpReach"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetNetPortShapingEnabled")], [("CM-FACILITY-MIB", "cmEthernetNetPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetNetPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetNetPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetNetPortAutoDiagEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdFilterType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdFilterDescr"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdMacAddressMatch"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdMacAddressMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdEthertype"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdEthertypeMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdSubtype"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdSubtypeMask"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortIndex"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMTU"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMDIXStatus"), ("CM-FACILITY-MIB", "cmPrioMapIndex"), ("CM-FACILITY-MIB", "cmPrioMapInPriority"), ("CM-FACILITY-MIB", "cmPrioMapXTagControl"), ("CM-FACILITY-MIB", "cmPrioMapXTagPriority"), ("CM-FACILITY-MIB", "cmPrioMapCOS"), ("CM-FACILITY-MIB", "cmPrioMapOuterTagPriority"), ("CM-FACILITY-MIB", "cmPrioMapInnerTagPriority"), ("CM-FACILITY-MIB", "cmQosFlowPolicerTypeIndex"), ("CM-FACILITY-MIB", "cmQosFlowPolicerIndex"), ("CM-FACILITY-MIB", "cmQosFlowPolicerDirection"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAdminState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerOperationalState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerSecondaryState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCBS"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEBS"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAlgorithm"), ("CM-FACILITY-MIB", "cmQosFlowPolicerColorMode"), ("CM-FACILITY-MIB", "cmQosFlowPolicerColorMarkingFlag"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCouplingFlag"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAssociatedShaper"), ("CM-FACILITY-MIB", "cmQosFlowPolicerStorageType"), ("CM-FACILITY-MIB", "cmQosFlowPolicerRowStatus"), ("CM-FACILITY-MIB", "cmAccPortQosShaperIndex"), ("CM-FACILITY-MIB", "cmAccPortQosShaperDirection"), ("CM-FACILITY-MIB", "cmAccPortQosShaperAdminState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCBS"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEBS"), ("CM-FACILITY-MIB", "cmAccPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCOS"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Index"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Index"), ("CM-FACILITY-MIB", "cmFlowCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2ActiveControlProtocols"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Index"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GARPDispType"), ("CM-FACILITY-MIB", "bitsPortTypeIndex"), ("CM-FACILITY-MIB", "bitsPortIndex"), ("CM-FACILITY-MIB", "bitsPortIfIndex"), ("CM-FACILITY-MIB", "bitsPortEntityIndex"), ("CM-FACILITY-MIB", "bitsPortAdminState"), ("CM-FACILITY-MIB", "bitsPortOperationalState"), ("CM-FACILITY-MIB", "bitsPortSecondaryState"), ("CM-FACILITY-MIB", "bitsPortType"), ("CM-FACILITY-MIB", "bitsPortLineType"), ("CM-FACILITY-MIB", "bitsPortLineCode"), ("CM-FACILITY-MIB", "bitsPortFrameFormat"), ("CM-FACILITY-MIB", "bitsPortSaBitDesignation"), ("CM-FACILITY-MIB", "bitsPortQLModeEnabled"), ("CM-FACILITY-MIB", "bitsPortExpectedQL"), ("CM-FACILITY-MIB", "bitsPortAssumedQL"), ("CM-FACILITY-MIB", "bitsPortReceivedQL"), ("CM-FACILITY-MIB", "bitsPortTransmitQL"), ("CM-FACILITY-MIB", "bitsPortSquelchQL"), ("CM-FACILITY-MIB", "bitsPortLineBuildOut"), ("CM-FACILITY-MIB", "bitsPortImpedance"), ("CM-FACILITY-MIB", "bitsPortCrc4"), ("CM-FACILITY-MIB", "bitsPortIdleCode"), ("CM-FACILITY-MIB", "bitsPortAis"), ("CM-FACILITY-MIB", "bitsPortSaBitsAdminState"), ("CM-FACILITY-MIB", "bitsPortSquelchControl"), ("CM-FACILITY-MIB", "bitsPortSignalShape"), ("CM-FACILITY-MIB", "bitsPortSignalFrequency"), ("CM-FACILITY-MIB", "ieee1588EthernetPortIndex"), ("CM-FACILITY-MIB", "ieee1588EthernetPortIfIndex"), ("CM-FACILITY-MIB", "ieee1588EthernetPortEntityIndex"), ("CM-FACILITY-MIB", "ieee1588EthernetPortAdminState"), ("CM-FACILITY-MIB", "ieee1588EthernetPortOperationalState"), ("CM-FACILITY-MIB", "ieee1588EthernetPortSecondaryState"), ("CM-FACILITY-MIB", "ieee1588EthernetPortMTU"), ("CM-FACILITY-MIB", "ieee1588EthernetPortMediaType"), ("CM-FACILITY-MIB", "ieee1588EthernetPortConfigSpeed"), ("CM-FACILITY-MIB", "ieee1588EthernetPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "ieee1588EthernetPortMDIXType"), ("CM-FACILITY-MIB", "gps10MHzPortIndex"), ("CM-FACILITY-MIB", "gps10MHzPortIfIndex"), ("CM-FACILITY-MIB", "gps10MHzPortEntityIndex"), ("CM-FACILITY-MIB", "gps10MHzPortAdminState"), ("CM-FACILITY-MIB", "gps10MHzPortOperationalState"), ("CM-FACILITY-MIB", "gps10MHzPortSecondaryState"), ("CM-FACILITY-MIB", "gps10MHzPortSignalDirection"), ("CM-FACILITY-MIB", "gps10MHzPortSquelchControl"), ("CM-FACILITY-MIB", "gps10MHzPortSquelchQL"), ("CM-FACILITY-MIB", "gps10MHzPortFrequencySource"), ("CM-FACILITY-MIB", "gps10MHzPortClockClass"), ("CM-FACILITY-MIB", "gps10MHzPortClockAccuracy"), ("CM-FACILITY-MIB", "gps10MHzPortTimeSource"), ("CM-FACILITY-MIB", "gps10MHzPortAssumedQL"), ("CM-FACILITY-MIB", "gps10MHzPortAlias"), ("CM-FACILITY-MIB", "gps10MHzPortInputSignalType"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbLength"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbDescr"), ("CM-FACILITY-MIB", "cmNetPortPrioMapIndex"), ("CM-FACILITY-MIB", "cmNetPortPrioMapInPriority"), ("CM-FACILITY-MIB", "cmNetPortPrioMapCOS"), ("CM-FACILITY-MIB", "cmNetPortPrioMapOuterTagPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmAccPortPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmNetPortPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDropEligiblePrio"), ("CM-FACILITY-MIB", "cmPortCpdProfileIndex"), ("CM-FACILITY-MIB", "cmPortCpdProfileName"), ("CM-FACILITY-MIB", "cmPortCpdProfileCiscoGroupDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileIslDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfilePagpDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileUdldDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileCdpDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileVtpDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileDtpDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfilePvstpPlusDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileUplinkFastDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileVlanBridgeDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileL2PTDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileBridgeGroupDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileBPDUDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfilePauseDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileLACPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileLACPMarkerDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileEfmOamDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileSSMDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfilePortAuthenDispType")], [("CM-FACILITY-MIB", "cmPortCpdProfileBridgeReservedDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileLANBridgesDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileGARPGroupDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileGMRPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileGVRPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileGARPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileLldpDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileStorageType"), ("CM-FACILITY-MIB", "cmPortCpdProfileRowStatus"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac00DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac01DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac02DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac03DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac04DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac05DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac06DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac07DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac08DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac09DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0ADispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0BDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0CDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0DDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0EDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0FDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileNearestLLDPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileNonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileCustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileELMIDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileIndex"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileName"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileCiscoGroupDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileIslDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfilePagpDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileUdldDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileCdpDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileVtpDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileDtpDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfilePvstpPlusDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileUplinkFastDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileVlanBridgeDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileL2PTDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileBridgeGroupDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileBPDUDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfilePauseDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileLACPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileLACPMarkerDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileEfmOamDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileSSMDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfilePortAuthenDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileBridgeReservedDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileLANBridgesDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileGARPGroupDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileGMRPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileGVRPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileGARPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileLldpDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileStorageType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileRowStatus"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac00DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac01DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac02DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac03DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac04DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac05DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac06DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac07DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac08DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac09DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0ADispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0BDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0CDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0DDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0EDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0FDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileNearestLLDPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileNonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileCustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileELMIDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAssociatedCpdProfile"), ("CM-FACILITY-MIB", "cmEthernetFlowPointCpdIndex"), ("CM-FACILITY-MIB", "cmEthernetFlowPointAssociatedCpdProfile"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMTU"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSvcType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressVlanTrunkingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressPushPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressPopPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPortVlanId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPortVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPriorityVlanId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressPrioMapMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressCOSPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressPopPriorityVidEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTagFrameControl"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPhyType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLaserWaveLengthPicometer"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRowStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSSMRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugGMetroAutoTuningMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugChannelType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugITUCbandChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugRelativeChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugOutOfBandChannelStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugITUCbandChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugRelativeChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLaserFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpConnectorValue"), ("CM-FACILITY-MIB", "cmIngressPrioMapIndex"), ("CM-FACILITY-MIB", "cmIngressPrioMapInPriority"), ("CM-FACILITY-MIB", "cmIngressPrioMapCOS"), ("CM-FACILITY-MIB", "cmEgressCOSIndex"), ("CM-FACILITY-MIB", "cmEgressOuterTagCtrl"), ("CM-FACILITY-MIB", "cmEgressCOS"), ("CM-FACILITY-MIB", "cmEgressOuterTagPriority"), ("CM-FACILITY-MIB", "cmElineFlowIndex"), ("CM-FACILITY-MIB", "cmElineFlowCircuitName"), ("CM-FACILITY-MIB", "cmElineFlowAdminState"), ("CM-FACILITY-MIB", "cmElineFlowOperationalState"), ("CM-FACILITY-MIB", "cmElineFlowSecondaryState"), ("CM-FACILITY-MIB", "cmElineFlowFP1"), ("CM-FACILITY-MIB", "cmElineFlowFP2"), ("CM-FACILITY-MIB", "cmElineFlowStorageType"), ("CM-FACILITY-MIB", "cmElineFlowRowStatus"), ("CM-FACILITY-MIB", "cmFlowPointIndex"), ("CM-FACILITY-MIB", "cmFlowPointCircuitName"), ("CM-FACILITY-MIB", "cmFlowPointAdminState"), ("CM-FACILITY-MIB", "cmFlowPointOperationalState"), ("CM-FACILITY-MIB", "cmFlowPointSecondaryState"), ("CM-FACILITY-MIB", "cmFlowPointAssociatedFlowId"), ("CM-FACILITY-MIB", "cmFlowPointIngressMultiCOS"), ("CM-FACILITY-MIB", "cmFlowPointIngressCOS"), ("CM-FACILITY-MIB", "cmFlowPointIngressVlanMemberList"), ("CM-FACILITY-MIB", "cmFlowPointVlanMemberAction"), ("CM-FACILITY-MIB", "cmFlowPointAssociatedAclProfile"), ("CM-FACILITY-MIB", "cmFlowPointSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmFlowPointVlanMemberActionVlan"), ("CM-FACILITY-MIB", "cmFlowPointIngressUntaggedFrameEnabled"), ("CM-FACILITY-MIB", "cmFlowPointCTagControl"), ("CM-FACILITY-MIB", "cmFlowPointCTagVlanId"), ("CM-FACILITY-MIB", "cmFlowPointCTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowPointSTagControl"), ("CM-FACILITY-MIB", "cmFlowPointSTagVlanId"), ("CM-FACILITY-MIB", "cmFlowPointSTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowPointEgressOuterTagPrioMapEnabled"), ("CM-FACILITY-MIB", "cmFlowPointColorMarkingSupported"), ("CM-FACILITY-MIB", "cmFlowPointStorageType"), ("CM-FACILITY-MIB", "cmFlowPointRowStatus"), ("CM-FACILITY-MIB", "cmQosPolicerV2Index"), ("CM-FACILITY-MIB", "cmQosPolicerV2AdminState"), ("CM-FACILITY-MIB", "cmQosPolicerV2OperationalState"), ("CM-FACILITY-MIB", "cmQosPolicerV2SecondaryState"), ("CM-FACILITY-MIB", "cmQosPolicerV2ColorMarkingEnabled"), ("CM-FACILITY-MIB", "cmQosPolicerV2AssociatedProfile"), ("CM-FACILITY-MIB", "cmQosPolicerV2StorageType"), ("CM-FACILITY-MIB", "cmQosPolicerV2RowStatus"), ("CM-FACILITY-MIB", "cmQosShaperV2Index"), ("CM-FACILITY-MIB", "cmQosShaperV2AdminState"), ("CM-FACILITY-MIB", "cmQosShaperV2OperationalState"), ("CM-FACILITY-MIB", "cmQosShaperV2SecondaryState"), ("CM-FACILITY-MIB", "cmQosShaperV2AssociatedQueueProfile"), ("CM-FACILITY-MIB", "cmQosShaperV2CIRLo"), ("CM-FACILITY-MIB", "cmQosShaperV2CIRHi"), ("CM-FACILITY-MIB", "cmQosShaperV2EIRLo"), ("CM-FACILITY-MIB", "cmQosShaperV2EIRHi"), ("CM-FACILITY-MIB", "cmQosShaperV2IngressAverageFrameSize"), ("CM-FACILITY-MIB", "cmQosShaperV2StorageType"), ("CM-FACILITY-MIB", "cmQosShaperV2RowStatus"), ("CM-FACILITY-MIB", "cmQosShaperV2AdditionalCIRLo")], [("CM-FACILITY-MIB", "cmQosShaperV2AdditionalCIRHi"), ("CM-FACILITY-MIB", "cmQosShaperV2ActualCIR"), ("CM-FACILITY-MIB", "cmQosShaperV2ActualEIR"), ("CM-FACILITY-MIB", "cmQosShaperV2WFQWeight"), ("CM-FACILITY-MIB", "cmQosShaperV2LowLatencyControl"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperIndex"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdminState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAssociatedQueueProfile"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperStorageType"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperRowStatus"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperIngressAverageFrameSize"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdditionalCIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdditionalCIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperWfqWeight"), ("CM-FACILITY-MIB", "cmQosPolicerProfileIndex"), ("CM-FACILITY-MIB", "cmQosPolicerProfileName"), ("CM-FACILITY-MIB", "cmQosPolicerProfileCIRLo"), ("CM-FACILITY-MIB", "cmQosPolicerProfileCIRHi"), ("CM-FACILITY-MIB", "cmQosPolicerProfileEIRLo"), ("CM-FACILITY-MIB", "cmQosPolicerProfileEIRHi"), ("CM-FACILITY-MIB", "cmQosPolicerProfileCBS"), ("CM-FACILITY-MIB", "cmQosPolicerProfileEBS"), ("CM-FACILITY-MIB", "cmQosPolicerProfileColorMode"), ("CM-FACILITY-MIB", "cmQosPolicerProfileCouplingFlag"), ("CM-FACILITY-MIB", "cmQosPolicerProfileStorageType"), ("CM-FACILITY-MIB", "cmQosPolicerProfileRowStatus"), ("CM-FACILITY-MIB", "cmQosQueueProfileIndex"), ("CM-FACILITY-MIB", "cmQosQueueProfileName"), ("CM-FACILITY-MIB", "cmQosQueueProfileBufferSize"), ("CM-FACILITY-MIB", "cmQosQueueProfileREDEnabled"), ("CM-FACILITY-MIB", "cmQosQueueProfileStorageType"), ("CM-FACILITY-MIB", "cmQosQueueProfileRowStatus"), ("CM-FACILITY-MIB", "cmOAMFlowPointIndex"), ("CM-FACILITY-MIB", "cmOAMFlowPointCircuitName"), ("CM-FACILITY-MIB", "cmOAMFlowPointAdminState"), ("CM-FACILITY-MIB", "cmOAMFlowPointOperationalState"), ("CM-FACILITY-MIB", "cmOAMFlowPointSecondaryState"), ("CM-FACILITY-MIB", "cmOAMFlowPointIngressVlanMemberList"), ("CM-FACILITY-MIB", "cmOAMFlowPointVlanMemberAction"), ("CM-FACILITY-MIB", "cmOAMFlowPointIngressUntaggedFrameSupported"), ("CM-FACILITY-MIB", "cmOAMFlowPointSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmOAMFlowPointStorageType"), ("CM-FACILITY-MIB", "cmOAMFlowPointRowStatus"), ("CM-FACILITY-MIB", "cmTrafficAclRulesIndex"), ("CM-FACILITY-MIB", "cmTrafficAclFilterAction"), ("CM-FACILITY-MIB", "cmTrafficAclFilterType"), ("CM-FACILITY-MIB", "cmTrafficAclEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclSrcMacAddr"), ("CM-FACILITY-MIB", "cmTrafficAclSrcMacAddrEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclDstMacAddr"), ("CM-FACILITY-MIB", "cmTrafficAclDstMacAddrEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclSrcIpFilterEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclDstIpFilterEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclSrcIpV4Addr"), ("CM-FACILITY-MIB", "cmTrafficAclSrcIpV4AddrMask"), ("CM-FACILITY-MIB", "cmTrafficAclDstIpV4Addr"), ("CM-FACILITY-MIB", "cmTrafficAclDstIpV4AddrMask"), ("CM-FACILITY-MIB", "cmTrafficAclSrcIpV6Addr"), ("CM-FACILITY-MIB", "cmTrafficAclSrcIpV6AddrMask"), ("CM-FACILITY-MIB", "cmTrafficAclDstIpV6Addr"), ("CM-FACILITY-MIB", "cmTrafficAclDstIpV6AddrMask"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpSrcPortNum"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpSrcPortMask"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpSrcPortEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpDstPortNum"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpDstPortMask"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpDstPortEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclIpQosType"), ("CM-FACILITY-MIB", "cmTrafficAclIpQosValue"), ("CM-FACILITY-MIB", "cmTrafficAclIpQosTypeEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclVlanId"), ("CM-FACILITY-MIB", "cmTrafficAclVlanIdEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclVlanPriority"), ("CM-FACILITY-MIB", "cmTrafficAclVlanPriorityEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclProtocolType"), ("CM-FACILITY-MIB", "cmTrafficAclProtocolTypeEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclStorageType"), ("CM-FACILITY-MIB", "cmTrafficAclRowStatus"), ("CM-FACILITY-MIB", "f3NetPortQosShaperIndex"), ("CM-FACILITY-MIB", "f3NetPortQosShaperDirection"), ("CM-FACILITY-MIB", "f3NetPortQosShaperAdminState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCBS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEBS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCOS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamCIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamCIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamEIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamEIRHi"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortIndex"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortIfIndex"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortEntityIndex"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortAdminState"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortOperationalState"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortSecondaryState"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortVendorName"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortModel"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortFSN"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortIMEI"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortHardwareVersion"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortFirmwareVersion"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortSIMStatus"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortPINLeftChances"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortPUKLeftChances"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortConnectionStatus"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortRSSI"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortSpeed"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortMTU"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortProviderName"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortDNS1"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortDNS2"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortAPN"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortUserName"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortPassword"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortDailNumber"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortRedialTimer"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortCurrentPinCode"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortNewPinCode"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortConfirmPinCode"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortCurrentPukCode"), ("CM-FACILITY-MIB", "f3Usb3GDCNPINCodeAction"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortStorageType"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortRowStatus"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortIMSI"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortPINStatus"), ("CM-FACILITY-MIB", "f3UsbDCNPortMobileNetworkType"), ("CM-FACILITY-MIB", "f3Usb3GDCNMuxOperationalMode"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortIpAddress"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortNetMask"), ("CM-FACILITY-MIB", "ocnStmIndex"), ("CM-FACILITY-MIB", "ocnStmIfIndex"), ("CM-FACILITY-MIB", "ocnStmEntityIndex"), ("CM-FACILITY-MIB", "ocnStmAdminState"), ("CM-FACILITY-MIB", "ocnStmOperationalState"), ("CM-FACILITY-MIB", "ocnStmSecondaryState"), ("CM-FACILITY-MIB", "ocnStmSfpVendorName"), ("CM-FACILITY-MIB", "ocnStmSfpPartNumber"), ("CM-FACILITY-MIB", "ocnStmSfpSerialNumber"), ("CM-FACILITY-MIB", "ocnStmSfpDateOfManufacture"), ("CM-FACILITY-MIB", "ocnStmSfpConnectorValue"), ("CM-FACILITY-MIB", "ocnStmSfpLinkLength"), ("CM-FACILITY-MIB", "ocnStmSfpLaserWaveLength"), ("CM-FACILITY-MIB", "ocnStmSfpLaserWaveLengthPicometer"), ("CM-FACILITY-MIB", "ocnStmSfpMediaType"), ("CM-FACILITY-MIB", "ocnStmMultiplexingStructures"), ("CM-FACILITY-MIB", "ocnStmEoTDMMode"), ("CM-FACILITY-MIB", "ocnStmLoopbackConfig"), ("CM-FACILITY-MIB", "ocnStmLoopbackStatus"), ("CM-FACILITY-MIB", "ocnStmLoopbackTime"), ("CM-FACILITY-MIB", "ocnStmInsertingAIS"), ("CM-FACILITY-MIB", "ocnStmBerExcThreshold"), ("CM-FACILITY-MIB", "ocnStmBerDegThreshold"), ("CM-FACILITY-MIB", "ocnStmRxTrailTrace"), ("CM-FACILITY-MIB", "ocnStmTxTrailTrace"), ("CM-FACILITY-MIB", "ocnStmExpectedTrailTrace"), ("CM-FACILITY-MIB", "ocnStmTrailTraceFormat"), ("CM-FACILITY-MIB", "ocnStmQLModeEnabled"), ("CM-FACILITY-MIB", "ocnStmExpectedQL"), ("CM-FACILITY-MIB", "ocnStmAssumedQL"), ("CM-FACILITY-MIB", "ocnStmReceivedQL"), ("CM-FACILITY-MIB", "ocnStmTransmitQL"), ("CM-FACILITY-MIB", "ocnStmSfpName"), ("CM-FACILITY-MIB", "ocnStmSfpHardwareRevision"), ("CM-FACILITY-MIB", "stsVcPathParentIfIndex"), ("CM-FACILITY-MIB", "stsVcPathIndex"), ("CM-FACILITY-MIB", "stsVcPathIfIndex"), ("CM-FACILITY-MIB", "stsVcPathAdminState"), ("CM-FACILITY-MIB", "stsVcPathOperationalState"), ("CM-FACILITY-MIB", "stsVcPathSecondaryState"), ("CM-FACILITY-MIB", "stsVcPathLoopbackConfig"), ("CM-FACILITY-MIB", "stsVcPathLoopbackStatus"), ("CM-FACILITY-MIB", "stsVcPathLoopbackTime"), ("CM-FACILITY-MIB", "stsVcPathInsertingAIS"), ("CM-FACILITY-MIB", "stsVcPathBerExcThreshold"), ("CM-FACILITY-MIB", "stsVcPathBerDegThreshold"), ("CM-FACILITY-MIB", "stsVcPathTrailTraceFormat"), ("CM-FACILITY-MIB", "stsVcPathRxTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathTxTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathExpectedTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathRxSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathTxSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathExpectedSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathRowStatus"), ("CM-FACILITY-MIB", "vtVcPathRowStatus"), ("CM-FACILITY-MIB", "vtVcPathParentIfIndex"), ("CM-FACILITY-MIB", "vtVcPathIndex"), ("CM-FACILITY-MIB", "vtVcPathIfIndex"), ("CM-FACILITY-MIB", "vtVcPathAdminState"), ("CM-FACILITY-MIB", "vtVcPathOperationalState"), ("CM-FACILITY-MIB", "vtVcPathSecondaryState"), ("CM-FACILITY-MIB", "vtVcPathLoopbackConfig"), ("CM-FACILITY-MIB", "vtVcPathLoopbackStatus"), ("CM-FACILITY-MIB", "vtVcPathLoopbackTime"), ("CM-FACILITY-MIB", "vtVcPathInsertingAIS"), ("CM-FACILITY-MIB", "vtVcPathBerExcThreshold"), ("CM-FACILITY-MIB", "vtVcPathBerDegThreshold"), ("CM-FACILITY-MIB", "vtVcPathTrailTraceFormat"), ("CM-FACILITY-MIB", "vtVcPathRxTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathTxTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathExpectedTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathRxSignalLabel"), ("CM-FACILITY-MIB", "vtVcPathTxSignalLabel"), ("CM-FACILITY-MIB", "vtVcPathExpectedSignalLabel"), ("CM-FACILITY-MIB", "e1t1ParentIfIndex"), ("CM-FACILITY-MIB", "e1t1Index"), ("CM-FACILITY-MIB", "e1t1IfIndex"), ("CM-FACILITY-MIB", "e1t1AdminState"), ("CM-FACILITY-MIB", "e1t1OperationalState"), ("CM-FACILITY-MIB", "e1t1SecondaryState"), ("CM-FACILITY-MIB", "e1t1LoopbackConfig"), ("CM-FACILITY-MIB", "e1t1LoopbackStatus"), ("CM-FACILITY-MIB", "e1t1LoopbackTime"), ("CM-FACILITY-MIB", "e1t1RemoteLoopbackRequest"), ("CM-FACILITY-MIB", "e1t1InsertingAIS"), ("CM-FACILITY-MIB", "e1t1RowStatus"), ("CM-FACILITY-MIB", "e3t3ParentIfIndex"), ("CM-FACILITY-MIB", "e3t3Index"), ("CM-FACILITY-MIB", "e3t3IfIndex"), ("CM-FACILITY-MIB", "e3t3EntityIndex"), ("CM-FACILITY-MIB", "e3t3AdminState"), ("CM-FACILITY-MIB", "e3t3OperationalState"), ("CM-FACILITY-MIB", "e3t3SecondaryState"), ("CM-FACILITY-MIB", "e3t3LoopbackConfig"), ("CM-FACILITY-MIB", "e3t3LoopbackStatus"), ("CM-FACILITY-MIB", "e3t3LoopbackTime"), ("CM-FACILITY-MIB", "e3t3RemoteLoopbackRequest"), ("CM-FACILITY-MIB", "e3t3InsertingAIS"), ("CM-FACILITY-MIB", "e3t3CBitEnable"), ("CM-FACILITY-MIB", "e3t3T3Channelized"), ("CM-FACILITY-MIB", "e3t3RowStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTDMEncapsulation"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRelatedVCG"), ("CM-FACILITY-MIB", "bits8PortGroupIndex"), ("CM-FACILITY-MIB", "bits8PortGroupIfIndex"), ("CM-FACILITY-MIB", "bits8PortGroupAdminState"), ("CM-FACILITY-MIB", "bits8PortGroupOperationalState"), ("CM-FACILITY-MIB", "bits8PortGroupSecondaryState"), ("CM-FACILITY-MIB", "bits8PortGroupLineType"), ("CM-FACILITY-MIB", "bits8PortGroupLineCode"), ("CM-FACILITY-MIB", "bits8PortGroupFrameFormat"), ("CM-FACILITY-MIB", "bits8PortGroupSaBitDesignation"), ("CM-FACILITY-MIB", "bits8PortGroupQLModeEnabled")], [("CM-FACILITY-MIB", "bits8PortGroupTransmitQL"), ("CM-FACILITY-MIB", "bits8PortGroupSquelchQL"), ("CM-FACILITY-MIB", "bits8PortGroupLineBuildOut"), ("CM-FACILITY-MIB", "bits8PortGroupImpedance"), ("CM-FACILITY-MIB", "bits8PortGroupRowStatus"), ("CM-FACILITY-MIB", "bits8PortGroupActivePorts"), ("CM-FACILITY-MIB", "bits8PortGroupClkIfEnabledPorts"), ("CM-FACILITY-MIB", "pps16PortGroupIndex"), ("CM-FACILITY-MIB", "pps16PortGroupIfIndex"), ("CM-FACILITY-MIB", "pps16PortGroupAdminState"), ("CM-FACILITY-MIB", "pps16PortGroupOperationalState"), ("CM-FACILITY-MIB", "pps16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "pps16PortGroupAlias"), ("CM-FACILITY-MIB", "pps16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "pps16PortGroupTODSource"), ("CM-FACILITY-MIB", "pps16PortGroupDirection"), ("CM-FACILITY-MIB", "pps16PortGroupDelayCompensation"), ("CM-FACILITY-MIB", "pps16PortGroupRowStatus"), ("CM-FACILITY-MIB", "clk16PortGroupIndex"), ("CM-FACILITY-MIB", "clk16PortGroupIfIndex"), ("CM-FACILITY-MIB", "clk16PortGroupAdminState"), ("CM-FACILITY-MIB", "clk16PortGroupOperationalState"), ("CM-FACILITY-MIB", "clk16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "clk16PortGroupAlias"), ("CM-FACILITY-MIB", "clk16PortGroupDirection"), ("CM-FACILITY-MIB", "clk16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "clk16PortGroupSquelchQL"), ("CM-FACILITY-MIB", "clk16PortGroupRowStatus"), ("CM-FACILITY-MIB", "todPps16PortGroupIndex"), ("CM-FACILITY-MIB", "todPps16PortGroupIfIndex"), ("CM-FACILITY-MIB", "todPps16PortGroupAdminState"), ("CM-FACILITY-MIB", "todPps16PortGroupOperationalState"), ("CM-FACILITY-MIB", "todPps16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "todPps16PortGroupAlias"), ("CM-FACILITY-MIB", "todPps16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "todPps16PortGroupSquelchQL"), ("CM-FACILITY-MIB", "todPps16PortGroupTODSource"), ("CM-FACILITY-MIB", "todPps16PortGroupOutputFormat"), ("CM-FACILITY-MIB", "todPps16PortGroupDelayCompensation"), ("CM-FACILITY-MIB", "todPps16PortGroupRowStatus"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortControlField"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortControlField"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortRelayOperation"), ("CM-FACILITY-MIB", "f3IrigOutputGroupIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupIfIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupAlias"), ("CM-FACILITY-MIB", "f3IrigOutputGroupExtensionType"), ("CM-FACILITY-MIB", "f3IrigOutputGroupExtensionDetection"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortAlias"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortAdminState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortControlField"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortType"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortDigitalVoltage"), ("CM-FACILITY-MIB", "ccInputPortIndex"), ("CM-FACILITY-MIB", "ccInputPortIfIndex"), ("CM-FACILITY-MIB", "ccInputPortEntityIndex"), ("CM-FACILITY-MIB", "ccInputPortAlias"), ("CM-FACILITY-MIB", "ccInputPortAdminState"), ("CM-FACILITY-MIB", "ccInputPortOperationalState"), ("CM-FACILITY-MIB", "ccInputPortSecondaryState"), ("CM-FACILITY-MIB", "ccGroupIndex"), ("CM-FACILITY-MIB", "ccGroupIfIndex"), ("CM-FACILITY-MIB", "ccGroupEntityIndex"), ("CM-FACILITY-MIB", "ccGroupAlias"), ("CM-FACILITY-MIB", "ccGroupActivePorts"), ("CM-FACILITY-MIB", "ccGroupPhaseAdjust"), ("CM-FACILITY-MIB", "ccGroupDutyCycle")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        cmFacilityObjectGroup = cmFacilityObjectGroup.setObjects(*_cmFacilityObjectGroup_obj)
    else:
        cmFacilityObjectGroup = cmFacilityObjectGroup.setObjects(*_cmFacilityObjectGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmFacilityObjectGroup = cmFacilityObjectGroup.setStatus('deprecated')
ethernetAccessPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 2)).setObjects(("CM-FACILITY-MIB", "cmEthernetAccPortIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetAccPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetAccPortMTU"), ("CM-FACILITY-MIB", "cmEthernetAccPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetAccPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetAccPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetAccPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetAccPortJumboFramesEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetAccPortInitiateDiag"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair1Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair2Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair3Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair4Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseAutoNegCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseEfmLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseResult"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseTestStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseTestTime"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamId"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamAdminDisposition"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortSvcType"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxPauseDisposition"), ("CM-FACILITY-MIB", "cmEthernetAccPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetAccPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpReach"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetAccPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortAutoDiagEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetAccPortN2AVlanTrunkingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortA2NPushPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortN2APopPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortPortVlanId"), ("CM-FACILITY-MIB", "cmEthernetAccPortPortVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetAccPortPrioMapMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortDeiEnable"), ("CM-FACILITY-MIB", "cmEthernetAccPortPcpDEEncType"), ("CM-FACILITY-MIB", "cmEthernetAccPortPcpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbLength"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbDescr"), ("CM-FACILITY-MIB", "cmEthernetAccPortSSMRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortXgePhyType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackSourceMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackDestMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackSourceMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackDestMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackBlockingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetAccPortTxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetAccPortTxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLaserWDMChannel"), ("CM-FACILITY-MIB", "cmEthernetAccPortLaserIsTunable"), ("CM-FACILITY-MIB", "cmEthernetAccPortLaserFrequency"), ("CM-FACILITY-MIB", "cmEthernetAccPortMediaTypeAutoSelected"), ("CM-FACILITY-MIB", "cmEthernetAccPortLowLatencyQueuingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortA2nSwapPriorityVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortN2aSwapPriorityVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortSwapPriorityVID"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosticMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortIngressCOSPriority"), ("CM-FACILITY-MIB", "cmEthernetAccPortDefaultCOS"), ("CM-FACILITY-MIB", "cmEthernetAccPortTrafficModel"), ("CM-FACILITY-MIB", "cmEthernetAccPortIndependentShaperBW"), ("CM-FACILITY-MIB", "cmEthernetAccPortJdsuLoopbackSrcIp"), ("CM-FACILITY-MIB", "cmEthernetAccPortWfqSegmentationCOS"), ("CM-FACILITY-MIB", "cmEthernetAccPortWfqGroupCOS"), ("CM-FACILITY-MIB", "cmEthernetAccPortWfqGroupEirLo"), ("CM-FACILITY-MIB", "cmEthernetAccPortWfqGroupEirHi"), ("CM-FACILITY-MIB", "cmEthernetAccPortSilentStartControl"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterTagTpidOverride"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterTagTpid"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetAccPortPersistentLoopbackControl"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTestReflectorIPv4Address"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTestReflectorIPv6Address"), ("CM-FACILITY-MIB", "cmEthernetAccPortPowerdDeviceDetection"), ("CM-FACILITY-MIB", "cmEthernetAccPortPoEStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpIdentifierValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetAccessPortGroup = ethernetAccessPortGroup.setStatus('current')
ethernetNetworkPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 3)).setObjects(("CM-FACILITY-MIB", "cmEthernetNetPortIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetNetPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetNetPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetNetPortMTU"), ("CM-FACILITY-MIB", "cmEthernetNetPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetNetPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetNetPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetNetPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetNetPortJumboFramesEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetNetPortInitiateDiag"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair1Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair2Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair3Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair4Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseAutoNegCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseEfmLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseResult"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseTestStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseTestTime"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamId"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamAdminDisposition"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortRxPauseDisposition"), ("CM-FACILITY-MIB", "cmEthernetNetPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetNetPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpReach"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetNetPortShapingEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetNetPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetNetPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetNetPortAutoDiagEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortDeiEnable"), ("CM-FACILITY-MIB", "cmEthernetNetPortPcpDEEncType"), ("CM-FACILITY-MIB", "cmEthernetNetPortPcpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbLength"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbDescr"), ("CM-FACILITY-MIB", "cmEthernetNetPortSSMRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortXgePhyType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackSourceMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackDestMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackSourceMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackDestMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackBlockingEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortRxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortTxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortRxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetNetPortTxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLaserWDMChannel"), ("CM-FACILITY-MIB", "cmEthernetNetPortLaserIsTunable"), ("CM-FACILITY-MIB", "cmEthernetNetPortLaserFrequency"), ("CM-FACILITY-MIB", "cmEthernetNetPortMediaTypeAutoSelected"), ("CM-FACILITY-MIB", "cmEthernetNetPortLowLatencyQueuingEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosticMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortIngressCOSPriority"), ("CM-FACILITY-MIB", "cmEthernetNetPortDefaultCOS"), ("CM-FACILITY-MIB", "cmEthernetNetPortTrafficModel"), ("CM-FACILITY-MIB", "cmEthernetNetPortIndependentShaperBW"), ("CM-FACILITY-MIB", "cmEthernetNetPortExpDEEncType"), ("CM-FACILITY-MIB", "cmEthernetNetPortExpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortIpPrecDEEncType"), ("CM-FACILITY-MIB", "cmEthernetNetPortIpPrecDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortEncapPcpDEEncodingType"), ("CM-FACILITY-MIB", "cmEthernetNetPortEncapPcpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortJdsuLoopbackSrcIp"), ("CM-FACILITY-MIB", "cmEthernetNetPortWfqSegmentationCOS"), ("CM-FACILITY-MIB", "cmEthernetNetPortWfqGroupCOS"), ("CM-FACILITY-MIB", "cmEthernetNetPortWfqGroupEirLo"), ("CM-FACILITY-MIB", "cmEthernetNetPortWfqGroupEirHi"), ("CM-FACILITY-MIB", "cmEthernetNetPortSilentStartControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterTagTpidOverride"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterTagTpid"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetNetPortPersistentLoopbackControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTestReflectorIPv4Address"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTestReflectorIPv6Address"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpIdentifierValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetNetworkPortGroup = ethernetNetworkPortGroup.setStatus('current')
ethernetMgmtPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 4)).setObjects(("CM-FACILITY-MIB", "cmEthernetMgmtPortIndex"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMTU"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMediaType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetMgmtPortGroup = ethernetMgmtPortGroup.setStatus('current')
bitsPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 5)).setObjects(("CM-FACILITY-MIB", "bitsPortTypeIndex"), ("CM-FACILITY-MIB", "bitsPortIndex"), ("CM-FACILITY-MIB", "bitsPortIfIndex"), ("CM-FACILITY-MIB", "bitsPortEntityIndex"), ("CM-FACILITY-MIB", "bitsPortAdminState"), ("CM-FACILITY-MIB", "bitsPortOperationalState"), ("CM-FACILITY-MIB", "bitsPortSecondaryState"), ("CM-FACILITY-MIB", "bitsPortType"), ("CM-FACILITY-MIB", "bitsPortLineType"), ("CM-FACILITY-MIB", "bitsPortLineCode"), ("CM-FACILITY-MIB", "bitsPortFrameFormat"), ("CM-FACILITY-MIB", "bitsPortSaBitDesignation"), ("CM-FACILITY-MIB", "bitsPortQLModeEnabled"), ("CM-FACILITY-MIB", "bitsPortExpectedQL"), ("CM-FACILITY-MIB", "bitsPortAssumedQL"), ("CM-FACILITY-MIB", "bitsPortReceivedQL"), ("CM-FACILITY-MIB", "bitsPortTransmitQL"), ("CM-FACILITY-MIB", "bitsPortSquelchQL"), ("CM-FACILITY-MIB", "bitsPortLineBuildOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bitsPortGroup = bitsPortGroup.setStatus('current')
trafficGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 6)).setObjects(("CM-FACILITY-MIB", "cmFlowIndex"), ("CM-FACILITY-MIB", "cmFlowCircuitName"), ("CM-FACILITY-MIB", "cmFlowAdminState"), ("CM-FACILITY-MIB", "cmFlowOperationalState"), ("CM-FACILITY-MIB", "cmFlowSecondaryState"), ("CM-FACILITY-MIB", "cmFlowType"), ("CM-FACILITY-MIB", "cmFlowMultiCOS"), ("CM-FACILITY-MIB", "cmFlowA2NCIR"), ("CM-FACILITY-MIB", "cmFlowA2NEIR"), ("CM-FACILITY-MIB", "cmFlowN2ARateLimitingEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACIR"), ("CM-FACILITY-MIB", "cmFlowN2AEIR"), ("CM-FACILITY-MIB", "cmFlowStorageType"), ("CM-FACILITY-MIB", "cmFlowRowStatus"), ("CM-FACILITY-MIB", "cmFlowTrafficType"), ("CM-FACILITY-MIB", "cmFlowCOS"), ("CM-FACILITY-MIB", "cmFlowVlanMemberList"), ("CM-FACILITY-MIB", "cmFlowAction"), ("CM-FACILITY-MIB", "cmFlowActionVlan"), ("CM-FACILITY-MIB", "cmFlowUntaggedMemberEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NCIRHi"), ("CM-FACILITY-MIB", "cmFlowA2NEIRHi"), ("CM-FACILITY-MIB", "cmFlowN2ACIRHi"), ("CM-FACILITY-MIB", "cmFlowN2AEIRHi"), ("CM-FACILITY-MIB", "cmFlowHCOSMgmtEnabled"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowCTagControl"), ("CM-FACILITY-MIB", "cmFlowCTagVlanId"), ("CM-FACILITY-MIB", "cmFlowCTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowCTagMatchRxPrio"), ("CM-FACILITY-MIB", "cmFlowSTagControl"), ("CM-FACILITY-MIB", "cmFlowSTagVlanId"), ("CM-FACILITY-MIB", "cmFlowSTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACOSPriorityTagType"), ("CM-FACILITY-MIB", "cmFlowESFramesLossThreshold"), ("CM-FACILITY-MIB", "cmFlowSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmFlowPolicingEnabled"), ("CM-FACILITY-MIB", "cmFlowPreserveSTagProperties"), ("CM-FACILITY-MIB", "cmFlowInnerTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NShapingType"), ("CM-FACILITY-MIB", "cmFlowN2AShapingType"), ("CM-FACILITY-MIB", "cmFlowN2AOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowSTagMatchRxPrio"), ("CM-FACILITY-MIB", "cmFlowAutoBandwidthConfigEnabled"), ("CM-FACILITY-MIB", "cmFlowPort1"), ("CM-FACILITY-MIB", "cmFlowPort2"), ("CM-FACILITY-MIB", "cmFlowPolicingControl"), ("CM-FACILITY-MIB", "cmFlowAutoCIRPercentage"), ("CM-FACILITY-MIB", "cmFlowLoopAvoidanceObject"), ("CM-FACILITY-MIB", "cmFlowConfigType"), ("CM-FACILITY-MIB", "cmFlowN2NForwardingEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NMulticastRateLimitControl"), ("CM-FACILITY-MIB", "cmFlowA2NMulticastRateLimitLo"), ("CM-FACILITY-MIB", "cmFlowA2NMulticastRateLimitHi"), ("CM-FACILITY-MIB", "cmFlowA2NBroadcastRateLimitControl"), ("CM-FACILITY-MIB", "cmFlowA2NBroadcastRateLimitLo"), ("CM-FACILITY-MIB", "cmFlowA2NBroadcastRateLimitHi"), ("CM-FACILITY-MIB", "cmFlowA2NCombinedRateLimitControl"), ("CM-FACILITY-MIB", "cmFlowA2NCombinedRateLimitLo"), ("CM-FACILITY-MIB", "cmFlowA2NCombinedRateLimitHi"), ("CM-FACILITY-MIB", "cmFlowRefPrioMapProfile"), ("CM-FACILITY-MIB", "cmFlowRefEoMplsPwObject"), ("CM-FACILITY-MIB", "cmFlowRefN2APrioMapProfile"), ("CM-FACILITY-MIB", "cmFlowSecureBlockingEnabled"), ("CM-FACILITY-MIB", "cmFlowRefConnectGuardFlowList"), ("CM-FACILITY-MIB", "cmFlowSecureStateList"), ("CM-FACILITY-MIB", "cmFlowIndependentA2NShaperBW"), ("CM-FACILITY-MIB", "cmFlowWfqSegmentationCOS"), ("CM-FACILITY-MIB", "cmFlowWfqGroupCOS"), ("CM-FACILITY-MIB", "cmFlowWfqGroupEirLo"), ("CM-FACILITY-MIB", "cmFlowWfqGroupEirHi"), ("CM-FACILITY-MIB", "cmQosShaperTypeIndex"), ("CM-FACILITY-MIB", "cmQosShaperIndex"), ("CM-FACILITY-MIB", "cmQosShaperDirection"), ("CM-FACILITY-MIB", "cmQosShaperAdminState"), ("CM-FACILITY-MIB", "cmQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmQosShaperCIR"), ("CM-FACILITY-MIB", "cmQosShaperCBS"), ("CM-FACILITY-MIB", "cmQosShaperEIR"), ("CM-FACILITY-MIB", "cmQosShaperEBS"), ("CM-FACILITY-MIB", "cmQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmQosShaperStorageType"), ("CM-FACILITY-MIB", "cmQosShaperRowStatus"), ("CM-FACILITY-MIB", "cmQosShaperSoamCIRLo"), ("CM-FACILITY-MIB", "cmQosShaperSoamCIRHi"), ("CM-FACILITY-MIB", "cmQosShaperSoamEIRLo"), ("CM-FACILITY-MIB", "cmQosShaperSoamEIRHi"), ("CM-FACILITY-MIB", "cmQosShaperWredGreenMinQueueThreshold"), ("CM-FACILITY-MIB", "cmQosShaperWredGreenMaxQueueThreshold"), ("CM-FACILITY-MIB", "cmQosShaperWredGreenDropProbability"), ("CM-FACILITY-MIB", "cmQosShaperWredYellowMinQueueThreshold"), ("CM-FACILITY-MIB", "cmQosShaperWredYellowMaxQueueThreshold"), ("CM-FACILITY-MIB", "cmQosShaperWredYellowDropProbability"), ("CM-FACILITY-MIB", "cmQosShaperAvgFrameSizeBeforeFragment"), ("CM-FACILITY-MIB", "cmQosShaperWfqWeight"), ("CM-FACILITY-MIB", "cmQosShaperCOS"), ("CM-FACILITY-MIB", "cmQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerTypeIndex"), ("CM-FACILITY-MIB", "cmQosFlowPolicerIndex"), ("CM-FACILITY-MIB", "cmQosFlowPolicerDirection"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAdminState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerOperationalState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerSecondaryState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCBS"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEBS"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAlgorithm"), ("CM-FACILITY-MIB", "cmQosFlowPolicerColorMode"), ("CM-FACILITY-MIB", "cmQosFlowPolicerColorMarkingFlag"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCouplingFlag"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAssociatedShaper"), ("CM-FACILITY-MIB", "cmQosFlowPolicerStorageType"), ("CM-FACILITY-MIB", "cmQosFlowPolicerRowStatus"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRMaxHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRMaxLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRMaxHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRMaxLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEnvelopeObject"), ("CM-FACILITY-MIB", "cmQosFlowPolicerRank"), ("CM-FACILITY-MIB", "cmQosFlowPolicerPolicingEnabled"), ("CM-FACILITY-MIB", "cmAccPortQosShaperIndex"), ("CM-FACILITY-MIB", "cmAccPortQosShaperDirection"), ("CM-FACILITY-MIB", "cmAccPortQosShaperAdminState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCBS"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEBS"), ("CM-FACILITY-MIB", "cmAccPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCOS"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSoamCIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSoamCIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSoamEIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSoamEIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredGreenMinQueueThreshold"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredGreenMaxQueueThreshold"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredGreenDropProbability"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredYellowMinQueueThreshold"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredYellowMaxQueueThreshold"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredYellowDropProbability"), ("CM-FACILITY-MIB", "cmAccPortQosShaperAvgFrameSizeBeforeFragment"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWfqWeight"), ("CM-FACILITY-MIB", "f3NetPortQosShaperIndex"), ("CM-FACILITY-MIB", "f3NetPortQosShaperDirection"), ("CM-FACILITY-MIB", "f3NetPortQosShaperAdminState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCBS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEBS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCOS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamCIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamCIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamEIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamEIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredGreenMinQueueThreshold"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredGreenMaxQueueThreshold"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredGreenDropProbability"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredYellowMinQueueThreshold"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredYellowMaxQueueThreshold"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredYellowDropProbability"), ("CM-FACILITY-MIB", "f3NetPortQosShaperAvgFrameSizeBeforeFragment"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWfqWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trafficGroup = trafficGroup.setStatus('current')
prioMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 7)).setObjects(("CM-FACILITY-MIB", "cmPrioMapIndex"), ("CM-FACILITY-MIB", "cmPrioMapInPriority"), ("CM-FACILITY-MIB", "cmPrioMapXTagControl"), ("CM-FACILITY-MIB", "cmPrioMapXTagPriority"), ("CM-FACILITY-MIB", "cmPrioMapCOS"), ("CM-FACILITY-MIB", "cmPrioMapOuterTagPriority"), ("CM-FACILITY-MIB", "cmPrioMapInnerTagPriority"), ("CM-FACILITY-MIB", "cmNetPortPrioMapIndex"), ("CM-FACILITY-MIB", "cmNetPortPrioMapInPriority"), ("CM-FACILITY-MIB", "cmNetPortPrioMapCOS"), ("CM-FACILITY-MIB", "cmNetPortPrioMapOuterTagPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prioMapGroup = prioMapGroup.setStatus('current')
pcpEncodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 8)).setObjects(("CM-FACILITY-MIB", "cmAccPortPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmAccPortPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmNetPortPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDropEligiblePrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcpEncodeGroup = pcpEncodeGroup.setStatus('current')
cpdV2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 9)).setObjects(("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Index"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac00DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac01DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac02DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac03DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac04DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac05DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac06DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac07DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac08DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac09DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0ADispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0BDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0CDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0DDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0EDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0FDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2NearestLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2NonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2CustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PtpUntaggedDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PtpTaggedDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Index"), ("CM-FACILITY-MIB", "cmFlowCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2ActiveControlProtocols"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac00DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac01DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac02DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac03DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac04DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac05DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac06DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac07DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac08DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac09DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0ADispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0BDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0CDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0DDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0EDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0FDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2NearestLLDPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2NonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2CustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Index"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac00DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac01DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac02DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac03DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac04DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac05DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac06DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac07DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac08DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac09DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0ADispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0BDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0CDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0DDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0EDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0FDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2NearestLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2NonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2CustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PtpUntaggedDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PtpTaggedDispType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpdV2Group = cpdV2Group.setStatus('current')
trafficGroupCmHub = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 10)).setObjects(("CM-FACILITY-MIB", "cmFlowIndex"), ("CM-FACILITY-MIB", "cmFlowCircuitName"), ("CM-FACILITY-MIB", "cmFlowAdminState"), ("CM-FACILITY-MIB", "cmFlowOperationalState"), ("CM-FACILITY-MIB", "cmFlowSecondaryState"), ("CM-FACILITY-MIB", "cmFlowType"), ("CM-FACILITY-MIB", "cmFlowMultiCOS"), ("CM-FACILITY-MIB", "cmFlowA2NCIR"), ("CM-FACILITY-MIB", "cmFlowA2NEIR"), ("CM-FACILITY-MIB", "cmFlowN2ARateLimitingEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACIR"), ("CM-FACILITY-MIB", "cmFlowN2AEIR"), ("CM-FACILITY-MIB", "cmFlowStorageType"), ("CM-FACILITY-MIB", "cmFlowRowStatus"), ("CM-FACILITY-MIB", "cmFlowTrafficType"), ("CM-FACILITY-MIB", "cmFlowCOS"), ("CM-FACILITY-MIB", "cmFlowVlanMemberList"), ("CM-FACILITY-MIB", "cmFlowAction"), ("CM-FACILITY-MIB", "cmFlowActionVlan"), ("CM-FACILITY-MIB", "cmFlowUntaggedMemberEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NCIRHi"), ("CM-FACILITY-MIB", "cmFlowA2NEIRHi"), ("CM-FACILITY-MIB", "cmFlowN2ACIRHi"), ("CM-FACILITY-MIB", "cmFlowN2AEIRHi"), ("CM-FACILITY-MIB", "cmFlowHCOSMgmtEnabled"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowCTagControl"), ("CM-FACILITY-MIB", "cmFlowCTagVlanId"), ("CM-FACILITY-MIB", "cmFlowCTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowCTagMatchRxPrio"), ("CM-FACILITY-MIB", "cmFlowSTagControl"), ("CM-FACILITY-MIB", "cmFlowSTagVlanId"), ("CM-FACILITY-MIB", "cmFlowSTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACOSPriorityTagType"), ("CM-FACILITY-MIB", "cmFlowESFramesLossThreshold"), ("CM-FACILITY-MIB", "cmFlowSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmFlowPolicingEnabled"), ("CM-FACILITY-MIB", "cmFlowPreserveSTagProperties"), ("CM-FACILITY-MIB", "cmFlowInnerTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NShapingType"), ("CM-FACILITY-MIB", "cmFlowN2AShapingType"), ("CM-FACILITY-MIB", "cmFlowN2AOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowSTagMatchRxPrio"), ("CM-FACILITY-MIB", "cmQosShaperTypeIndex"), ("CM-FACILITY-MIB", "cmQosShaperIndex"), ("CM-FACILITY-MIB", "cmQosShaperDirection"), ("CM-FACILITY-MIB", "cmQosShaperAdminState"), ("CM-FACILITY-MIB", "cmQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmQosShaperCIR"), ("CM-FACILITY-MIB", "cmQosShaperCBS"), ("CM-FACILITY-MIB", "cmQosShaperEIR"), ("CM-FACILITY-MIB", "cmQosShaperEBS"), ("CM-FACILITY-MIB", "cmQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmQosShaperStorageType"), ("CM-FACILITY-MIB", "cmQosShaperRowStatus"), ("CM-FACILITY-MIB", "cmQosShaperCOS"), ("CM-FACILITY-MIB", "cmQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmQosShaperEIRHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trafficGroupCmHub = trafficGroupCmHub.setStatus('current')
ocnStmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 11)).setObjects(("CM-FACILITY-MIB", "ocnStmIndex"), ("CM-FACILITY-MIB", "ocnStmIfIndex"), ("CM-FACILITY-MIB", "ocnStmEntityIndex"), ("CM-FACILITY-MIB", "ocnStmAdminState"), ("CM-FACILITY-MIB", "ocnStmOperationalState"), ("CM-FACILITY-MIB", "ocnStmSecondaryState"), ("CM-FACILITY-MIB", "ocnStmSfpVendorName"), ("CM-FACILITY-MIB", "ocnStmSfpPartNumber"), ("CM-FACILITY-MIB", "ocnStmSfpSerialNumber"), ("CM-FACILITY-MIB", "ocnStmSfpDateOfManufacture"), ("CM-FACILITY-MIB", "ocnStmMultiplexingStructures"), ("CM-FACILITY-MIB", "ocnStmEoTDMMode"), ("CM-FACILITY-MIB", "ocnStmLoopbackConfig"), ("CM-FACILITY-MIB", "ocnStmLoopbackStatus"), ("CM-FACILITY-MIB", "ocnStmLoopbackTime"), ("CM-FACILITY-MIB", "ocnStmInsertingAIS"), ("CM-FACILITY-MIB", "ocnStmBerExcThreshold"), ("CM-FACILITY-MIB", "ocnStmBerDegThreshold"), ("CM-FACILITY-MIB", "ocnStmRxTrailTrace"), ("CM-FACILITY-MIB", "ocnStmTxTrailTrace"), ("CM-FACILITY-MIB", "ocnStmExpectedTrailTrace"), ("CM-FACILITY-MIB", "ocnStmTrailTraceFormat"), ("CM-FACILITY-MIB", "ocnStmQLModeEnabled"), ("CM-FACILITY-MIB", "ocnStmExpectedQL"), ("CM-FACILITY-MIB", "ocnStmAssumedQL"), ("CM-FACILITY-MIB", "ocnStmReceivedQL"), ("CM-FACILITY-MIB", "ocnStmTransmitQL"), ("CM-FACILITY-MIB", "ocnStmPortType"), ("CM-FACILITY-MIB", "ocnStmFreqSourceType"), ("CM-FACILITY-MIB", "ocnStmSfpName"), ("CM-FACILITY-MIB", "ocnStmSfpHardwareRevision"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ocnStmGroup = ocnStmGroup.setStatus('current')
stsVcPathGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 12)).setObjects(("CM-FACILITY-MIB", "stsVcPathParentIfIndex"), ("CM-FACILITY-MIB", "stsVcPathIndex"), ("CM-FACILITY-MIB", "stsVcPathIfIndex"), ("CM-FACILITY-MIB", "stsVcPathAdminState"), ("CM-FACILITY-MIB", "stsVcPathOperationalState"), ("CM-FACILITY-MIB", "stsVcPathSecondaryState"), ("CM-FACILITY-MIB", "stsVcPathLoopbackConfig"), ("CM-FACILITY-MIB", "stsVcPathLoopbackStatus"), ("CM-FACILITY-MIB", "stsVcPathLoopbackTime"), ("CM-FACILITY-MIB", "stsVcPathInsertingAIS"), ("CM-FACILITY-MIB", "stsVcPathBerExcThreshold"), ("CM-FACILITY-MIB", "stsVcPathBerDegThreshold"), ("CM-FACILITY-MIB", "stsVcPathTrailTraceFormat"), ("CM-FACILITY-MIB", "stsVcPathRxTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathTxTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathExpectedTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathRxSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathTxSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathExpectedSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathRowStatus"), ("CM-FACILITY-MIB", "stsVcPathLowOrderPathType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stsVcPathGroup = stsVcPathGroup.setStatus('current')
vtVcPathGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 13)).setObjects(("CM-FACILITY-MIB", "vtVcPathParentIfIndex"), ("CM-FACILITY-MIB", "vtVcPathIndex"), ("CM-FACILITY-MIB", "vtVcPathIfIndex"), ("CM-FACILITY-MIB", "vtVcPathAdminState"), ("CM-FACILITY-MIB", "vtVcPathOperationalState"), ("CM-FACILITY-MIB", "vtVcPathSecondaryState"), ("CM-FACILITY-MIB", "vtVcPathLoopbackConfig"), ("CM-FACILITY-MIB", "vtVcPathLoopbackStatus"), ("CM-FACILITY-MIB", "vtVcPathLoopbackTime"), ("CM-FACILITY-MIB", "vtVcPathInsertingAIS"), ("CM-FACILITY-MIB", "vtVcPathBerExcThreshold"), ("CM-FACILITY-MIB", "vtVcPathBerDegThreshold"), ("CM-FACILITY-MIB", "vtVcPathTrailTraceFormat"), ("CM-FACILITY-MIB", "vtVcPathRxTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathTxTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathExpectedTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathRxSignalLabel"), ("CM-FACILITY-MIB", "vtVcPathTxSignalLabel"), ("CM-FACILITY-MIB", "vtVcPathExpectedSignalLabel"), ("CM-FACILITY-MIB", "vtVcPathRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtVcPathGroup = vtVcPathGroup.setStatus('current')
e1t1InterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 14)).setObjects(("CM-FACILITY-MIB", "e1t1ParentIfIndex"), ("CM-FACILITY-MIB", "e1t1Index"), ("CM-FACILITY-MIB", "e1t1IfIndex"), ("CM-FACILITY-MIB", "e1t1EntityIndex"), ("CM-FACILITY-MIB", "e1t1AdminState"), ("CM-FACILITY-MIB", "e1t1OperationalState"), ("CM-FACILITY-MIB", "e1t1SecondaryState"), ("CM-FACILITY-MIB", "e1t1LoopbackConfig"), ("CM-FACILITY-MIB", "e1t1LoopbackStatus"), ("CM-FACILITY-MIB", "e1t1LoopbackTime"), ("CM-FACILITY-MIB", "e1t1RemoteLoopbackRequest"), ("CM-FACILITY-MIB", "e1t1InsertingAIS"), ("CM-FACILITY-MIB", "e1t1RowStatus"), ("CM-FACILITY-MIB", "e1t1LineType"), ("CM-FACILITY-MIB", "e1t1LineCode"), ("CM-FACILITY-MIB", "e1t1FrameFormat"), ("CM-FACILITY-MIB", "e1t1LineBuildOut"), ("CM-FACILITY-MIB", "e1t1TimingDomain"), ("CM-FACILITY-MIB", "e1t1RcvSensitivity"), ("CM-FACILITY-MIB", "e1t1IdlePatternProfile"), ("CM-FACILITY-MIB", "e1t1LoopbackProfile"), ("CM-FACILITY-MIB", "e1t1RelatedContainerId"), ("CM-FACILITY-MIB", "e1t1PatternLpbkControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    e1t1InterfaceGroup = e1t1InterfaceGroup.setStatus('current')
e3t3InterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 15)).setObjects(("CM-FACILITY-MIB", "e3t3ParentIfIndex"), ("CM-FACILITY-MIB", "e3t3Index"), ("CM-FACILITY-MIB", "e3t3IfIndex"), ("CM-FACILITY-MIB", "e3t3EntityIndex"), ("CM-FACILITY-MIB", "e3t3AdminState"), ("CM-FACILITY-MIB", "e3t3OperationalState"), ("CM-FACILITY-MIB", "e3t3SecondaryState"), ("CM-FACILITY-MIB", "e3t3LoopbackConfig"), ("CM-FACILITY-MIB", "e3t3LoopbackStatus"), ("CM-FACILITY-MIB", "e3t3LoopbackTime"), ("CM-FACILITY-MIB", "e3t3RemoteLoopbackRequest"), ("CM-FACILITY-MIB", "e3t3InsertingAIS"), ("CM-FACILITY-MIB", "e3t3CBitEnable"), ("CM-FACILITY-MIB", "e3t3T3Channelized"), ("CM-FACILITY-MIB", "e3t3RowStatus"), ("CM-FACILITY-MIB", "e3t3FrameFormat"), ("CM-FACILITY-MIB", "e3t3RelatedContainerId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    e3t3InterfaceGroup = e3t3InterfaceGroup.setStatus('current')
f3PulsePerSecondPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 16)).setObjects(("CM-FACILITY-MIB", "f3PulsePerSecondPortIndex"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortIfIndex"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortEntityIndex"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortAdminState"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortOperationalState"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortSecondaryState"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortSquelchControl"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortSquelchQL"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortTODSource"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortDirection"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortInputRate"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortDelayCompensation"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortClockClass"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortClockAccuracy"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortTimeSource"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortPhyInterfaceType"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortOutputDelay"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortWidth"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortPolarity"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortImpedance"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortAlias"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortAssumedClockClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PulsePerSecondPortGroup = f3PulsePerSecondPortGroup.setStatus('current')
f3TimeOfDayPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 17)).setObjects(("CM-FACILITY-MIB", "f3TimeOfDayPortIndex"), ("CM-FACILITY-MIB", "f3TimeOfDayPortIfIndex"), ("CM-FACILITY-MIB", "f3TimeOfDayPortEntityIndex"), ("CM-FACILITY-MIB", "f3TimeOfDayPortAdminState"), ("CM-FACILITY-MIB", "f3TimeOfDayPortOperationalState"), ("CM-FACILITY-MIB", "f3TimeOfDayPortSecondaryState"), ("CM-FACILITY-MIB", "f3TimeOfDayPortSquelchControl"), ("CM-FACILITY-MIB", "f3TimeOfDayPortSquelchQL"), ("CM-FACILITY-MIB", "f3TimeOfDayPortTODSource"), ("CM-FACILITY-MIB", "f3TimeOfDayPortOutputFormat"), ("CM-FACILITY-MIB", "f3TimeOfDayPortSignalDirection"), ("CM-FACILITY-MIB", "f3TimeOfDayPortInputRate"), ("CM-FACILITY-MIB", "f3TimeOfDayPortDelayCompensation"), ("CM-FACILITY-MIB", "f3TimeOfDayPortAlias"), ("CM-FACILITY-MIB", "f3TimeOfDayPortAssumedClockClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TimeOfDayPortGroup = f3TimeOfDayPortGroup.setStatus('current')
f3Gps10MhzPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 18)).setObjects(("CM-FACILITY-MIB", "gps10MHzPortIndex"), ("CM-FACILITY-MIB", "gps10MHzPortIfIndex"), ("CM-FACILITY-MIB", "gps10MHzPortEntityIndex"), ("CM-FACILITY-MIB", "gps10MHzPortAdminState"), ("CM-FACILITY-MIB", "gps10MHzPortOperationalState"), ("CM-FACILITY-MIB", "gps10MHzPortSecondaryState"), ("CM-FACILITY-MIB", "gps10MHzPortSignalDirection"), ("CM-FACILITY-MIB", "gps10MHzPortSquelchControl"), ("CM-FACILITY-MIB", "gps10MHzPortSquelchQL"), ("CM-FACILITY-MIB", "gps10MHzPortFrequencySource"), ("CM-FACILITY-MIB", "gps10MHzPortClockClass"), ("CM-FACILITY-MIB", "gps10MHzPortClockAccuracy"), ("CM-FACILITY-MIB", "gps10MHzPortTimeSource"), ("CM-FACILITY-MIB", "gps10MHzPortAssumedQL"), ("CM-FACILITY-MIB", "gps10MHzPortAlias"), ("CM-FACILITY-MIB", "gps10MHzPortInputSignalType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3Gps10MhzPortGroup = f3Gps10MhzPortGroup.setStatus('current')
ethernetNetworkPortExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 19)).setObjects(("CM-FACILITY-MIB", "cmEthernetNetPortTDMEncapsulation"), ("CM-FACILITY-MIB", "cmEthernetNetPortAssociatedTdmEntity"), ("CM-FACILITY-MIB", "cmEthernetNetPortInsertingAIS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetNetworkPortExtGroup = ethernetNetworkPortExtGroup.setStatus('current')
f3GPSReceiverPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 20)).setObjects(("CM-FACILITY-MIB", "f3GPSReceiverPortIndex"), ("CM-FACILITY-MIB", "f3GPSReceiverPortIfIndex"), ("CM-FACILITY-MIB", "f3GPSReceiverPortEntityIndex"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAdminState"), ("CM-FACILITY-MIB", "f3GPSReceiverPortOperationalState"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSecondaryState"), ("CM-FACILITY-MIB", "f3GPSReceiverPortPPSGenCondition"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAntennaCableLength"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAntennaStatus"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSatellitesUsableFlag"), ("CM-FACILITY-MIB", "f3GPSReceiverPortNumTrackingSatellites"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSelfSurveyProgress"), ("CM-FACILITY-MIB", "f3GPSReceiverPortPPSGeneratedFlag"), ("CM-FACILITY-MIB", "f3GPSReceiverPortGnssSystem"), ("CM-FACILITY-MIB", "f3GPSReceiverPortInstallationType"), ("CM-FACILITY-MIB", "f3GPSReceiverPortGnssTOD"), ("CM-FACILITY-MIB", "f3GPSReceiverPortGnssSystemsBitMap"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAlias"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAntennaDelayValue"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAntennaDelayType"), ("CM-FACILITY-MIB", "f3GPSReceiverPortCNOMask"), ("CM-FACILITY-MIB", "f3GPSReceiverPortElevationMask"), ("CM-FACILITY-MIB", "f3GPSReceiverPortCoordinateLatitude"), ("CM-FACILITY-MIB", "f3GPSReceiverPortCoordinateLongitude"), ("CM-FACILITY-MIB", "f3GPSReceiverPortCoordinateAltitude"), ("CM-FACILITY-MIB", "f3GPSReceiverPortFirmwareUpgradePercent"), ("CM-FACILITY-MIB", "f3GPSReceiverPortPDOPMask"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSelfSurveyPeriod"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSatMin1Threshold"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSatMin2Threshold"), ("CM-FACILITY-MIB", "f3GPSReceiverPortPDOP"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSelfSurveyControl"), ("CM-FACILITY-MIB", "f3GPSReceiverPortCoordinateStringAltitude"), ("CM-FACILITY-MIB", "f3GPSReceiverPortLocationMode"), ("CM-FACILITY-MIB", "f3GPSReceiverPortTimeAdvanceMode"), ("CM-FACILITY-MIB", "f3GPSReceiverPortTimeAdvanceValue"), ("CM-FACILITY-MIB", "f3GPSReceiverPortForcedAntennaConnected"), ("CM-FACILITY-MIB", "f3GPSReceiverPortServiceAvailableTime"), ("CM-FACILITY-MIB", "f3GPSReceiverPortServiceUnavailableTime"), ("CM-FACILITY-MIB", "f3GPSReceiverPortServiceAvailablePercentage"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAGC"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSelfSurveyPositionAccuracy"), ("CM-FACILITY-MIB", "f3GPSReceiverPortHorizontalAccuracy"), ("CM-FACILITY-MIB", "f3GPSReceiverPortVerticalAccuracy"), ("CM-FACILITY-MIB", "f3GPSReceiverPortTDOP"), ("CM-FACILITY-MIB", "f3GPSReceiverPortHDOP"), ("CM-FACILITY-MIB", "f3GPSReceiverPortVDOP"), ("CM-FACILITY-MIB", "f3GPSReceiverPortFailureSuspendTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3GPSReceiverPortGroup = f3GPSReceiverPortGroup.setStatus('current')
cmPsePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 21)).setObjects(("CM-FACILITY-MIB", "cmPethPsePortExtGroupIndex"), ("CM-FACILITY-MIB", "cmPethPsePortExtIndex"), ("CM-FACILITY-MIB", "cmPethPsePortExtAssociatedPort"), ("CM-FACILITY-MIB", "pethPsePortExtPowerConsumption"), ("CM-FACILITY-MIB", "pethPsePortExtAvailablePowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPsePortGroup = cmPsePortGroup.setStatus('current')
cmPseEXTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 22)).setObjects(("CM-FACILITY-MIB", "pethMainPseExtGroupIndex"), ("CM-FACILITY-MIB", "pethMainPseExtNonStandardPD"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPseEXTGroup = cmPseEXTGroup.setStatus('current')
cmMPFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 23)).setObjects(("CM-FACILITY-MIB", "cmMPFlowIndex"), ("CM-FACILITY-MIB", "cmMPFlowCircuitName"), ("CM-FACILITY-MIB", "cmMPFlowAdminState"), ("CM-FACILITY-MIB", "cmMPFlowOperationalState"), ("CM-FACILITY-MIB", "cmMPFlowSecondaryState"), ("CM-FACILITY-MIB", "cmMPFlowLearningEnabled"), ("CM-FACILITY-MIB", "cmMPFlowAgingTimer"), ("CM-FACILITY-MIB", "cmMPFlowFwdTableSizeProfileID"), ("CM-FACILITY-MIB", "cmMPFlowtableFullAction"), ("CM-FACILITY-MIB", "cmMPFlowStorageType"), ("CM-FACILITY-MIB", "cmMPFlowRowStatus"), ("CM-FACILITY-MIB", "cmMPFlowLearningConfigAction"), ("CM-FACILITY-MIB", "cmMPFlowFPList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmMPFlowGroup = cmMPFlowGroup.setStatus('current')
cmMPFlowMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 24)).setObjects(("CM-FACILITY-MIB", "cmMPFlowMemberFPIndex"), ("CM-FACILITY-MIB", "cmMPFlowPointRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmMPFlowMemberGroup = cmMPFlowMemberGroup.setStatus('current')
cmEthernetTrafficPortPcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 25)).setObjects(("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDropEligiblePrio"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortClbIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortClbEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortClbLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortClbDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEthernetTrafficPortPcpGroup = cmEthernetTrafficPortPcpGroup.setStatus('current')
neTMParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 26)).setObjects(("CM-FACILITY-MIB", "neTMParamsBandwidthProfileMode"), ("CM-FACILITY-MIB", "neTMParamsAgingtime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    neTMParamsGroup = neTMParamsGroup.setStatus('current')
cmEthernetTrafficPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 27)).setObjects(("CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMTU"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSvcType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressVlanTrunkingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressPushPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressPopPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPortVlanId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPortVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPriorityVlanId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressPrioMapMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressCOSPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressPopPriorityVidEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTagFrameControl"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPhyType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLaserWaveLengthPicometer"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRowStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSSMRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLaserWDMChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLaserIsTunable"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLaserFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDeiEnable"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInitiateDiag"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnosePair1Cond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnosePair2Cond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnosePair3Cond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnosePair4Cond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseAutoNegCond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseEfmLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseResult"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseTestStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseTestTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAutoDiagEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDeleteEntitiesAction"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMaxMpFpNum"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJdsuLoopbackEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJdsuLoopbackVlanId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressPopPriorityVidEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortServiceType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackSourceMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackDestMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackSourceMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackDestMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackBlockingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMediaTypeAutoSelected"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLowLatencyQueuingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnosticMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMcastRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortBcastRateLimitEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortBcastRateLimitSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortBcastRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCombinedRateLimitEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCombinedRateLimitSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCombinedRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRefPrioMapProfile"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressSwapPriorityVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressSwapPriorityVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSwapPriorityVID"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortExpDEEncType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortExpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJdsuLoopbackSrcIp"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTxSsm"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRxSsmQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEServiceAvailableTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEServiceUnavailableTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEServiceAvailablePercentage"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortWfqSegmentationCOS"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortWfqGroupCOS"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortWfqGroupEirLo"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortWfqGroupEirHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterTagTpidOverride"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterTagTpid"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpTxPowerLevel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpRxPowerLevel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortBwResourcePort"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTestReflectorIPv4Address"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTestReflectorIPv6Address"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpIdentifierValue"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugGMetroAutoTuningMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugChannelType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugITUCbandChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugRelativeChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugOutOfBandChannelStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugITUCbandChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugRelativeChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLaserFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpIdentifierValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEthernetTrafficPortGroup = cmEthernetTrafficPortGroup.setStatus('current')
cmFlowPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 28)).setObjects(("CM-FACILITY-MIB", "cmFlowPointIndex"), ("CM-FACILITY-MIB", "cmFlowPointCircuitName"), ("CM-FACILITY-MIB", "cmFlowPointAdminState"), ("CM-FACILITY-MIB", "cmFlowPointOperationalState"), ("CM-FACILITY-MIB", "cmFlowPointSecondaryState"), ("CM-FACILITY-MIB", "cmFlowPointAssociatedFlowId"), ("CM-FACILITY-MIB", "cmFlowPointIngressMultiCOS"), ("CM-FACILITY-MIB", "cmFlowPointIngressCOS"), ("CM-FACILITY-MIB", "cmFlowPointIngressVlanMemberList"), ("CM-FACILITY-MIB", "cmFlowPointVlanMemberAction"), ("CM-FACILITY-MIB", "cmFlowPointAssociatedAclProfile"), ("CM-FACILITY-MIB", "cmFlowPointSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmFlowPointVlanMemberActionVlan"), ("CM-FACILITY-MIB", "cmFlowPointIngressUntaggedFrameEnabled"), ("CM-FACILITY-MIB", "cmFlowPointCTagControl"), ("CM-FACILITY-MIB", "cmFlowPointCTagVlanId"), ("CM-FACILITY-MIB", "cmFlowPointCTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowPointSTagControl"), ("CM-FACILITY-MIB", "cmFlowPointSTagVlanId"), ("CM-FACILITY-MIB", "cmFlowPointSTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowPointEgressOuterTagPrioMapEnabled"), ("CM-FACILITY-MIB", "cmFlowPointColorMarkingSupported"), ("CM-FACILITY-MIB", "cmFlowPointStorageType"), ("CM-FACILITY-MIB", "cmFlowPointRowStatus"), ("CM-FACILITY-MIB", "cmFlowPointDefaultMemberEnabled"), ("CM-FACILITY-MIB", "cmFlowPointMcastRateLimitEnabled"), ("CM-FACILITY-MIB", "cmFlowPointMcastRateLimitSpeedLo"), ("CM-FACILITY-MIB", "cmFlowPointMcastRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmFlowPointBcastRateLimitEnabled"), ("CM-FACILITY-MIB", "cmFlowPointBcastRateLimitSpeedLo"), ("CM-FACILITY-MIB", "cmFlowPointBcastRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmFlowPointSplitHorizonGroupOID"), ("CM-FACILITY-MIB", "cmFlowPointLoopAvoidance"), ("CM-FACILITY-MIB", "cmFlowPointHierarchicalCosEnabled"), ("CM-FACILITY-MIB", "cmFlowPointWfqQid"), ("CM-FACILITY-MIB", "cmFlowPointWfqOutPriority"), ("CM-FACILITY-MIB", "cmFlowPointMaximumBWLo"), ("CM-FACILITY-MIB", "cmFlowPointGuaranteedBWLo"), ("CM-FACILITY-MIB", "cmFlowPointMaximumBWHi"), ("CM-FACILITY-MIB", "cmFlowPointGuaranteedBWHi"), ("CM-FACILITY-MIB", "cmFlowPointRefPrioMapProfile"), ("CM-FACILITY-MIB", "cmFlowPointMcastAndBcastRateLimitEnabled"), ("CM-FACILITY-MIB", "cmFlowPointMcastAndBcastRateLimitSpeedLo"), ("CM-FACILITY-MIB", "cmFlowPointMcastAndBcastRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmFlowPointEgressShapingType"), ("CM-FACILITY-MIB", "cmFlowPointEgressInnerTagPrioMapEnabled"), ("CM-FACILITY-MIB", "cmFlowPointAutoBandwidthConfigEnabled"), ("CM-FACILITY-MIB", "cmFlowPointAutoCIRPercentage"), ("CM-FACILITY-MIB", "cmFlowPointFrameFwdEnabled"), ("CM-FACILITY-MIB", "cmFlowPointUsePortPrioMapProfile"), ("CM-FACILITY-MIB", "cmFlowPointRefEoMplsPwObject"), ("CM-FACILITY-MIB", "cmFlowPointElmiEvcIdentifier"), ("CM-FACILITY-MIB", "cmFlowPointRefElpObject"), ("CM-FACILITY-MIB", "cmFlowPointEfEnabled"), ("CM-FACILITY-MIB", "cmFlowPointEfIdentificationType"), ("CM-FACILITY-MIB", "cmFlowPointEfRateThresholdLo"), ("CM-FACILITY-MIB", "cmFlowPointEfRateThresholdHi"), ("CM-FACILITY-MIB", "cmFlowPointAclNoMatchDisposition"), ("CM-FACILITY-MIB", "cmFlowPointEfIdentificationFields"), ("CM-FACILITY-MIB", "cmFlowPointWfqSegmentationCOS"), ("CM-FACILITY-MIB", "cmFlowPointWfqGroupCOS"), ("CM-FACILITY-MIB", "cmFlowPointWfqGroupEirLo"), ("CM-FACILITY-MIB", "cmFlowPointWfqGroupEirHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmFlowPointGroup = cmFlowPointGroup.setStatus('current')
ethernetAccessPortJdsuExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 29)).setObjects(("CM-FACILITY-MIB", "cmEthernetAccPortJDSUControlFramesSnoopingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortJDSULoopbackVlan"), ("CM-FACILITY-MIB", "cmEthernetAccPortJDSULoopbackVlanList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetAccessPortJdsuExtGroup = ethernetAccessPortJdsuExtGroup.setStatus('current')
ethernetNetworkPortJdsuExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 30)).setObjects(("CM-FACILITY-MIB", "cmEthernetNetPortJDSUControlFramesSnoopingEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortJDSULoopbackVlan"), ("CM-FACILITY-MIB", "cmEthernetNetPortJDSULoopbackVlanList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetNetworkPortJdsuExtGroup = ethernetNetworkPortJdsuExtGroup.setStatus('current')
cmTrafficPortLpbkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 31)).setObjects(("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkInnerVlanEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkInnerVlanTag"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkOuterVlanEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkOuterVlanTag"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmTrafficPortLpbkGroup = cmTrafficPortLpbkGroup.setStatus('current')
cmPrioMapV2ProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 32)).setObjects(("CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"), ("CM-FACILITY-MIB", "cmPrioMapV2ProfileAlias"), ("CM-FACILITY-MIB", "cmPrioMapV2ProfileMapModeType"), ("CM-FACILITY-MIB", "cmPrioMapV2ProfileStorageType"), ("CM-FACILITY-MIB", "cmPrioMapV2ProfileRowStatus"), ("CM-FACILITY-MIB", "cmPrioMapV2ProfileIngressCosPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPrioMapV2ProfileGroup = cmPrioMapV2ProfileGroup.setStatus('current')
cmPrioMapV2IngressPrioMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 33)).setObjects(("CM-FACILITY-MIB", "cmPrioMapV2IngressPrioMappingIndex"), ("CM-FACILITY-MIB", "cmPrioMapV2IngressPrioMappingInPriority"), ("CM-FACILITY-MIB", "cmPrioMapV2IngressPrioMappingCOS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPrioMapV2IngressPrioMappingGroup = cmPrioMapV2IngressPrioMappingGroup.setStatus('current')
bits8PortGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 34)).setObjects(("CM-FACILITY-MIB", "bits8PortGroupIndex"), ("CM-FACILITY-MIB", "bits8PortGroupIfIndex"), ("CM-FACILITY-MIB", "bits8PortGroupAdminState"), ("CM-FACILITY-MIB", "bits8PortGroupOperationalState"), ("CM-FACILITY-MIB", "bits8PortGroupSecondaryState"), ("CM-FACILITY-MIB", "bits8PortGroupLineType"), ("CM-FACILITY-MIB", "bits8PortGroupLineCode"), ("CM-FACILITY-MIB", "bits8PortGroupFrameFormat"), ("CM-FACILITY-MIB", "bits8PortGroupSaBitDesignation"), ("CM-FACILITY-MIB", "bits8PortGroupQLModeEnabled"), ("CM-FACILITY-MIB", "bits8PortGroupTransmitQL"), ("CM-FACILITY-MIB", "bits8PortGroupSquelchQL"), ("CM-FACILITY-MIB", "bits8PortGroupLineBuildOut"), ("CM-FACILITY-MIB", "bits8PortGroupImpedance"), ("CM-FACILITY-MIB", "bits8PortGroupRowStatus"), ("CM-FACILITY-MIB", "bits8PortGroupActivePorts"), ("CM-FACILITY-MIB", "bits8PortGroupClkIfEnabledPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bits8PortGroupGroup = bits8PortGroupGroup.setStatus('current')
pps16PortGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 35)).setObjects(("CM-FACILITY-MIB", "pps16PortGroupIndex"), ("CM-FACILITY-MIB", "pps16PortGroupIfIndex"), ("CM-FACILITY-MIB", "pps16PortGroupAdminState"), ("CM-FACILITY-MIB", "pps16PortGroupOperationalState"), ("CM-FACILITY-MIB", "pps16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "pps16PortGroupAlias"), ("CM-FACILITY-MIB", "pps16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "pps16PortGroupTODSource"), ("CM-FACILITY-MIB", "pps16PortGroupDirection"), ("CM-FACILITY-MIB", "pps16PortGroupDelayCompensation"), ("CM-FACILITY-MIB", "pps16PortGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pps16PortGroupGroup = pps16PortGroupGroup.setStatus('current')
clk16PortGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 36)).setObjects(("CM-FACILITY-MIB", "clk16PortGroupIndex"), ("CM-FACILITY-MIB", "clk16PortGroupIfIndex"), ("CM-FACILITY-MIB", "clk16PortGroupAdminState"), ("CM-FACILITY-MIB", "clk16PortGroupOperationalState"), ("CM-FACILITY-MIB", "clk16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "clk16PortGroupAlias"), ("CM-FACILITY-MIB", "clk16PortGroupDirection"), ("CM-FACILITY-MIB", "clk16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "clk16PortGroupSquelchQL"), ("CM-FACILITY-MIB", "clk16PortGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clk16PortGroupGroup = clk16PortGroupGroup.setStatus('current')
todPps16PortGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 37)).setObjects(("CM-FACILITY-MIB", "todPps16PortGroupIndex"), ("CM-FACILITY-MIB", "todPps16PortGroupIfIndex"), ("CM-FACILITY-MIB", "todPps16PortGroupAdminState"), ("CM-FACILITY-MIB", "todPps16PortGroupOperationalState"), ("CM-FACILITY-MIB", "todPps16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "todPps16PortGroupAlias"), ("CM-FACILITY-MIB", "todPps16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "todPps16PortGroupSquelchQL"), ("CM-FACILITY-MIB", "todPps16PortGroupTODSource"), ("CM-FACILITY-MIB", "todPps16PortGroupOutputFormat"), ("CM-FACILITY-MIB", "todPps16PortGroupDelayCompensation"), ("CM-FACILITY-MIB", "todPps16PortGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    todPps16PortGroupGroup = todPps16PortGroupGroup.setStatus('current')
f3PolicerEnvelopeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 38)).setObjects(("CM-FACILITY-MIB", "f3PolicerEnvelopeIndex"), ("CM-FACILITY-MIB", "f3PolicerEnvelopeCouplingFlag"), ("CM-FACILITY-MIB", "f3PolicerEnvelopeStorageType"), ("CM-FACILITY-MIB", "f3PolicerEnvelopeRowStatus"), ("CM-FACILITY-MIB", "f3EnvelopeAssocPolicer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PolicerEnvelopeGroup = f3PolicerEnvelopeGroup.setStatus('current')
cmNetPortExpDeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 39)).setObjects(("CM-FACILITY-MIB", "cmNetPortExpDEEncIndex"), ("CM-FACILITY-MIB", "cmNetPortExpDEEncInPriority"), ("CM-FACILITY-MIB", "cmNetPortExpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortExpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortExpDEDecIndex"), ("CM-FACILITY-MIB", "cmNetPortExpDEDecInPriority"), ("CM-FACILITY-MIB", "cmNetPortExpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmNetPortExpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmNetPortExpDEPairIndex"), ("CM-FACILITY-MIB", "cmNetPortExpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortExpDEDropEligiblePrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmNetPortExpDeGroup = cmNetPortExpDeGroup.setStatus('current')
cmNetPortIpPrecDeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 40)).setObjects(("CM-FACILITY-MIB", "cmNetPortIpPrecDEEncIndex"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEEncInPriority"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDecIndex"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDecInPriority"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDecOutPriority"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDecDropEligible"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEPairIndex"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDropEligiblePrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmNetPortIpPrecDeGroup = cmNetPortIpPrecDeGroup.setStatus('current')
cmNetPortEncapPcpDeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 41)).setObjects(("CM-FACILITY-MIB", "cmNetPortEncapPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDropEligiblePrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmNetPortEncapPcpDeGroup = cmNetPortEncapPcpDeGroup.setStatus('current')
f3SatelliteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 42)).setObjects(("CM-FACILITY-MIB", "f3SatelliteIndex"), ("CM-FACILITY-MIB", "f3SatelliteSV"), ("CM-FACILITY-MIB", "f3SatelliteInUse"), ("CM-FACILITY-MIB", "f3SatelliteSVType"), ("CM-FACILITY-MIB", "f3SatelliteCNO"), ("CM-FACILITY-MIB", "f3SatelliteHealth"), ("CM-FACILITY-MIB", "f3SatelliteAzimuth"), ("CM-FACILITY-MIB", "f3SatelliteElevation"), ("CM-FACILITY-MIB", "f3SatelliteGnssReceiverPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SatelliteGroup = f3SatelliteGroup.setStatus('current')
cmEthernetTrafficPortJdsuExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 43)).setObjects(("CM-FACILITY-MIB", "cmEthernetTrafficPortJDSUControlFramesSnoopingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJDSULoopbackVlan"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJDSULoopbackVlanList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEthernetTrafficPortJdsuExtGroup = cmEthernetTrafficPortJdsuExtGroup.setStatus('current')
f3FpQosShaperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 44)).setObjects(("CM-FACILITY-MIB", "f3FpQosShaperIndex"), ("CM-FACILITY-MIB", "f3FpQosShaperAdminState"), ("CM-FACILITY-MIB", "f3FpQosShaperOperationalState"), ("CM-FACILITY-MIB", "f3FpQosShaperSecondaryState"), ("CM-FACILITY-MIB", "f3FpQosShaperCIRLo"), ("CM-FACILITY-MIB", "f3FpQosShaperCIRHi"), ("CM-FACILITY-MIB", "f3FpQosShaperEIRLo"), ("CM-FACILITY-MIB", "f3FpQosShaperEIRHi"), ("CM-FACILITY-MIB", "f3FpQosShaperCBS"), ("CM-FACILITY-MIB", "f3FpQosShaperEBS"), ("CM-FACILITY-MIB", "f3FpQosShaperBufferSize"), ("CM-FACILITY-MIB", "f3FpQosShaperCOS"), ("CM-FACILITY-MIB", "f3FpQosShaperStorageType"), ("CM-FACILITY-MIB", "f3FpQosShaperRowStatus"), ("CM-FACILITY-MIB", "f3FpQosShaperWfqWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FpQosShaperGroup = f3FpQosShaperGroup.setStatus('current')
f3FpQosPolicerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 45)).setObjects(("CM-FACILITY-MIB", "f3FpQosPolicerIndex"), ("CM-FACILITY-MIB", "f3FpQosPolicerAdminState"), ("CM-FACILITY-MIB", "f3FpQosPolicerOperationalState"), ("CM-FACILITY-MIB", "f3FpQosPolicerSecondaryState"), ("CM-FACILITY-MIB", "f3FpQosPolicerCIRLo"), ("CM-FACILITY-MIB", "f3FpQosPolicerCIRHi"), ("CM-FACILITY-MIB", "f3FpQosPolicerEIRLo"), ("CM-FACILITY-MIB", "f3FpQosPolicerEIRHi"), ("CM-FACILITY-MIB", "f3FpQosPolicerCBS"), ("CM-FACILITY-MIB", "f3FpQosPolicerEBS"), ("CM-FACILITY-MIB", "f3FpQosPolicerAlgorithm"), ("CM-FACILITY-MIB", "f3FpQosPolicerColorMode"), ("CM-FACILITY-MIB", "f3FpQosPolicerCouplingFlag"), ("CM-FACILITY-MIB", "f3FpQosPolicerPolicingEnabled"), ("CM-FACILITY-MIB", "f3FpQosPolicerStorageType"), ("CM-FACILITY-MIB", "f3FpQosPolicerRowStatus"), ("CM-FACILITY-MIB", "f3FpQosPolicerCIRMaxHi"), ("CM-FACILITY-MIB", "f3FpQosPolicerCIRMaxLo"), ("CM-FACILITY-MIB", "f3FpQosPolicerEIRMaxHi"), ("CM-FACILITY-MIB", "f3FpQosPolicerEIRMaxLo"), ("CM-FACILITY-MIB", "f3FpQosPolicerEnvelopeObject"), ("CM-FACILITY-MIB", "f3FpQosPolicerRank"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FpQosPolicerGroup = f3FpQosPolicerGroup.setStatus('current')
cpdV2TrafficPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 46)).setObjects(("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Index"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac00DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac01DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac02DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac03DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac04DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac05DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac06DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac07DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac08DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac09DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0ADispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0BDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0CDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0DDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0EDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0FDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2NearestLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2NonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2CustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PtpUntaggedDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PtpTaggedDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Index"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2IslDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2PagpDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2UdldDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2CdpDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2VtpDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2DtpDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2PauseDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2LACPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2SSMDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2GARPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2ActiveControlProtocols"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2ELMIDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac00DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac01DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac02DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac03DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac04DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac05DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac06DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac07DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac08DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac09DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0ADispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0BDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0CDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0DDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0EDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0FDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2NearestLLDPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2NonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2CustomerLLDPDispType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpdV2TrafficPortGroup = cpdV2TrafficPortGroup.setStatus('current')
f3AclRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 47)).setObjects(("CM-FACILITY-MIB", "f3AclRuleIndex"), ("CM-FACILITY-MIB", "f3AclRuleAdminState"), ("CM-FACILITY-MIB", "f3AclRuleAlias"), ("CM-FACILITY-MIB", "f3AclRulePriority"), ("CM-FACILITY-MIB", "f3AclRuleOperation"), ("CM-FACILITY-MIB", "f3AclRuleCosOverrideControl"), ("CM-FACILITY-MIB", "f3AclRuleCOS"), ("CM-FACILITY-MIB", "f3AclRuleSrcMacAddressControl"), ("CM-FACILITY-MIB", "f3AclRuleSrcMacAddress"), ("CM-FACILITY-MIB", "f3AclRuleSrcMacAddressMask"), ("CM-FACILITY-MIB", "f3AclRuleDstMacAddressControl"), ("CM-FACILITY-MIB", "f3AclRuleDstMacAddress"), ("CM-FACILITY-MIB", "f3AclRuleDstMacAddressMask"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanVIDControl"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanVIDLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanVIDHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanVIDControl"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanVIDLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanVIDHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanPcpControl"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanPcpLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanPcpHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanPcpControl"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanPcpLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanPcpHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanDeiControl"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanDei"), ("CM-FACILITY-MIB", "f3AclRuleEtherTypeControl"), ("CM-FACILITY-MIB", "f3AclRuleEtherType"), ("CM-FACILITY-MIB", "f3AclRuleIpv4PriorityControl"), ("CM-FACILITY-MIB", "f3AclRuleIpv4PriorityLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleIpv4PriorityHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleProtocolControl"), ("CM-FACILITY-MIB", "f3AclRuleProtocolNumber"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv4AddressControl"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv4AddressLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv4AddressHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv4AddressControl"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv4AddressLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv4AddressHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleSrcPortControl"), ("CM-FACILITY-MIB", "f3AclRuleSrcPortLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleSrcPortHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleDstPortControl"), ("CM-FACILITY-MIB", "f3AclRuleDstPortLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleDstPortHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleTcpFlagsControl"), ("CM-FACILITY-MIB", "f3AclRuleTcpFlags"), ("CM-FACILITY-MIB", "f3AclRuleStorageType"), ("CM-FACILITY-MIB", "f3AclRuleRowStatus"), ("CM-FACILITY-MIB", "f3AclRuleActive"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv6AddressControl"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv6Address"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv6AddressPrefixLen"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv6AddressControl"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv6Address"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv6AddressPrefixLen"), ("CM-FACILITY-MIB", "f3AclRuleIpV6FlowLabelControl"), ("CM-FACILITY-MIB", "f3AclRuleIpV6FlowLabel"), ("CM-FACILITY-MIB", "f3AclRulePriorityControl"), ("CM-FACILITY-MIB", "f3AclRulePriorityLowLimit"), ("CM-FACILITY-MIB", "f3AclRulePriorityHighLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3AclRuleGroup = f3AclRuleGroup.setStatus('current')
f3EthernetTrafficPortExpDeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 48)).setObjects(("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEEncIndex"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEEncInPriority"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDecIndex"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDecInPriority"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDecOutPriority"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDecDropEligible"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEPairIndex"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDropEligiblePrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3EthernetTrafficPortExpDeGroup = f3EthernetTrafficPortExpDeGroup.setStatus('current')
f3XdslAndPpppoeParamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 49)).setObjects(("CM-FACILITY-MIB", "cmEthernetNetPortXdslConnControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslModulationMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslBitSwapEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslGvectorEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslVdslProfile"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslCurVdslProfile"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslActualLinkRateUpStream"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslActualLinkRateDownStream"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslControlChannel"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslCarrierSet"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslAnnex"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslDsSNRMargin"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslUsSNRMargin"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslDsSignalAttenuation"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslDsLineAttenuation"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslDsTxPower"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslUsTxPower"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslDsAttainableRate"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslUsAttainableRate"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeOuterVlanControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeOuterVlanEtherType"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeOuterVlanId"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeOuterVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeInnerVlanControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeInnerVlanEtherType"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeInnerVlanId"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeInnerVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeServiceName"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeLcpKeepAlivePeriod"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeLcpRetryThreshold"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeRxAcName"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeRxServiceName"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeSessionId"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeConnStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3XdslAndPpppoeParamGroup = f3XdslAndPpppoeParamGroup.setStatus('current')
sciPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 50)).setObjects(("CM-FACILITY-MIB", "sciPortIndex"), ("CM-FACILITY-MIB", "sciPortAdminState"), ("CM-FACILITY-MIB", "sciPortOperationalState"), ("CM-FACILITY-MIB", "sciPortSignalMode"), ("CM-FACILITY-MIB", "sciPortSignalDirection"), ("CM-FACILITY-MIB", "sciPortRxSsmQL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sciPortGroup = sciPortGroup.setStatus('current')
cmTrafficPortQosShaperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 51)).setObjects(("CM-FACILITY-MIB", "cmTrafficPortQosShaperIndex"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdminState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAssociatedQueueProfile"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperStorageType"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperRowStatus"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperIngressAverageFrameSize"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdditionalCIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdditionalCIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperWfqWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmTrafficPortQosShaperGroup = cmTrafficPortQosShaperGroup.setStatus('current')
f3IrigPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 52)).setObjects(("CM-FACILITY-MIB", "f3IrigRs422OutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortControlField"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortControlField"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortRelayOperation"), ("CM-FACILITY-MIB", "f3IrigOutputGroupIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupIfIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupAlias"), ("CM-FACILITY-MIB", "f3IrigOutputGroupExtensionType"), ("CM-FACILITY-MIB", "f3IrigOutputGroupExtensionDetection"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortAlias"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortAdminState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortControlField"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortType"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortDigitalVoltage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3IrigPortGroup = f3IrigPortGroup.setStatus('current')
ccGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 53)).setObjects(("CM-FACILITY-MIB", "ccInputPortIndex"), ("CM-FACILITY-MIB", "ccInputPortIfIndex"), ("CM-FACILITY-MIB", "ccInputPortEntityIndex"), ("CM-FACILITY-MIB", "ccInputPortAlias"), ("CM-FACILITY-MIB", "ccInputPortAdminState"), ("CM-FACILITY-MIB", "ccInputPortOperationalState"), ("CM-FACILITY-MIB", "ccInputPortSecondaryState"), ("CM-FACILITY-MIB", "ccGroupIndex"), ("CM-FACILITY-MIB", "ccGroupIfIndex"), ("CM-FACILITY-MIB", "ccGroupEntityIndex"), ("CM-FACILITY-MIB", "ccGroupAlias"), ("CM-FACILITY-MIB", "ccGroupActivePorts"), ("CM-FACILITY-MIB", "ccGroupPhaseAdjust"), ("CM-FACILITY-MIB", "ccGroupDutyCycle"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccGroup = ccGroup.setStatus('current')
cmEncapFlowPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 54)).setObjects(("CM-FACILITY-MIB", "cmEncapFlowPointIndex"), ("CM-FACILITY-MIB", "cmEncapFlowPointCircuitName"), ("CM-FACILITY-MIB", "cmEncapFlowPointAssociatedFlowId"), ("CM-FACILITY-MIB", "cmEncapFlowPointRefEoMplsPwObject"), ("CM-FACILITY-MIB", "cmEncapFlowPointCTagControl"), ("CM-FACILITY-MIB", "cmEncapFlowPointCTagVlanId"), ("CM-FACILITY-MIB", "cmEncapFlowPointCTagVlanPriority"), ("CM-FACILITY-MIB", "cmEncapFlowPointSTagControl"), ("CM-FACILITY-MIB", "cmEncapFlowPointSTagVlanId"), ("CM-FACILITY-MIB", "cmEncapFlowPointSTagVlanPriority"), ("CM-FACILITY-MIB", "cmEncapFlowPointEgressOuterTagPrioMapEnabled"), ("CM-FACILITY-MIB", "cmEncapFlowPointEgressInnerTagPrioMapEnabled"), ("CM-FACILITY-MIB", "cmEncapFlowPointRefPrioMapProfile"), ("CM-FACILITY-MIB", "cmEncapFlowPointStorageType"), ("CM-FACILITY-MIB", "cmEncapFlowPointRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEncapFlowPointGroup = cmEncapFlowPointGroup.setStatus('current')
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmTrafficAclDstMacAddr=cmTrafficAclDstMacAddr, cmEthernetTrafficPortLpbkEntry=cmEthernetTrafficPortLpbkEntry, cmEthernetTrafficPortSfpVendorName=cmEthernetTrafficPortSfpVendorName, cmEthernetTrafficPortAssumedQL=cmEthernetTrafficPortAssumedQL, cmEthernetAccPortCpdV2UplinkFastDispType=cmEthernetAccPortCpdV2UplinkFastDispType, cmEthernetTrafficPortLaserWDMChannel=cmEthernetTrafficPortLaserWDMChannel, cmOAMFlowPointTable=cmOAMFlowPointTable, cmFlowCpdV2BridgeReservedDispType=cmFlowCpdV2BridgeReservedDispType, CmAclConfiguration=CmAclConfiguration, cmTrafficPortQosShaperRowStatus=cmTrafficPortQosShaperRowStatus, f3FpQosPolicerRank=f3FpQosPolicerRank, f3GPSReceiverPortGnssSystemsBitMap=f3GPSReceiverPortGnssSystemsBitMap, cmMPFlowCircuitName=cmMPFlowCircuitName, cmTrafficAclVlanPriority=cmTrafficAclVlanPriority, cmEthernetAccPortSfpSerialNumber=cmEthernetAccPortSfpSerialNumber, cmEthernetNetPortTxDeiOuterTagType=cmEthernetNetPortTxDeiOuterTagType, f3AclRuleSrcMacAddress=f3AclRuleSrcMacAddress, cmEthernetNetPortPppoeSessionId=cmEthernetNetPortPppoeSessionId, f3IrigOutputUnitPortType=f3IrigOutputUnitPortType, cmEthernetAccPortShapedSpeedHi=cmEthernetAccPortShapedSpeedHi, f3FlowPointCpdV2Mac0FDispType=f3FlowPointCpdV2Mac0FDispType, cmNetPortIpPrecDeGroup=cmNetPortIpPrecDeGroup, cmEthernetAccPortCpdSubtypeMask=cmEthernetAccPortCpdSubtypeMask, cmEthernetNetPortXgePhyType=cmEthernetNetPortXgePhyType, cmEthernetNetPortTxPauseEnabled=cmEthernetNetPortTxPauseEnabled, cmEthernetNetPortLoopbackDestMacControlEnabled=cmEthernetNetPortLoopbackDestMacControlEnabled, ShapingType=ShapingType, cmEthernetAccPortCpdV2Mac0DDispType=cmEthernetAccPortCpdV2Mac0DDispType, f3SatelliteAzimuth=f3SatelliteAzimuth, EoTDMMode=EoTDMMode, cmFlowPointWfqGroupEirHi=cmFlowPointWfqGroupEirHi, OCNSTMPortType=OCNSTMPortType, cmAccPortQosShaperWredYellowMinQueueThreshold=cmAccPortQosShaperWredYellowMinQueueThreshold, cmEthernetTrafficPortCombinedRateLimitEnabled=cmEthernetTrafficPortCombinedRateLimitEnabled, cmNetPortIpPrecDEDecInPriority=cmNetPortIpPrecDEDecInPriority, cmEthernetNetPortPppoeInnerVlanId=cmEthernetNetPortPppoeInnerVlanId, stsVcPathRxTrailTrace=stsVcPathRxTrailTrace, f3XdslAndPpppoeParamGroup=f3XdslAndPpppoeParamGroup, cmEthernetAccPortLinkLossFwdDelay=cmEthernetAccPortLinkLossFwdDelay, cmOAMFlowPointOperationalState=cmOAMFlowPointOperationalState, f3AclRuleEtherTypeControl=f3AclRuleEtherTypeControl, f3IrigRs422OutputPortSecondaryState=f3IrigRs422OutputPortSecondaryState, bitsPortEntityIndex=bitsPortEntityIndex, f3UsbWIFIDonglePortStorageType=f3UsbWIFIDonglePortStorageType, cmEthernetAccPortOuterVlanLoopbackMask=cmEthernetAccPortOuterVlanLoopbackMask, cmNetPortIpPrecDEEncIndex=cmNetPortIpPrecDEEncIndex, cmEthernetNetPortXdslDsSignalAttenuation=cmEthernetNetPortXdslDsSignalAttenuation, cmEthernetNetPortOamRemoteUnidirSupportEnabled=cmEthernetNetPortOamRemoteUnidirSupportEnabled, e1t1ParentIfIndex=e1t1ParentIfIndex, cmAccPortQosShaperCIRLo=cmAccPortQosShaperCIRLo, stsVcPathTable=stsVcPathTable, ocnStmSfpLinkLength=ocnStmSfpLinkLength, MultiplexingStructure=MultiplexingStructure, cmEthernetAccPortQLModeEnabled=cmEthernetAccPortQLModeEnabled, cmEthernetNetPortCpdV2Mac06DispType=cmEthernetNetPortCpdV2Mac06DispType, cmQosFlowPolicerCIRHi=cmQosFlowPolicerCIRHi, cmFlowPreserveSTagProperties=cmFlowPreserveSTagProperties, f3GPSReceiverPortPDOPMask=f3GPSReceiverPortPDOPMask, GPSAntennaStatus=GPSAntennaStatus, G3AuthStatus=G3AuthStatus, clk16PortGroupOperationalState=clk16PortGroupOperationalState, e3t3Table=e3t3Table, cmAccPortExtMcastRateLimitEnabled=cmAccPortExtMcastRateLimitEnabled, cmEthernetAccPortCpdV2Entry=cmEthernetAccPortCpdV2Entry, cmEthernetTrafficPortPcpDEPairEntry=cmEthernetTrafficPortPcpDEPairEntry, cmPortCpdProfileMac04DispType=cmPortCpdProfileMac04DispType, ocnStmTransmitQL=ocnStmTransmitQL, cmEthernetNetPortXdslConnControl=cmEthernetNetPortXdslConnControl, ocnStmTable=ocnStmTable, cmEthernetTrafficPortDiagnosePair2Cond=cmEthernetTrafficPortDiagnosePair2Cond, FlowConfigType=FlowConfigType, cmPrioMapInPriority=cmPrioMapInPriority, cmAccPortQosShaperAdminState=cmAccPortQosShaperAdminState, cmAccPortQosShaperEBS=cmAccPortQosShaperEBS, gps10MHzPortAlias=gps10MHzPortAlias, cmFlowPointSecondaryState=cmFlowPointSecondaryState, cmEthernetAccPortOamLocalVarRtrvsEnabled=cmEthernetAccPortOamLocalVarRtrvsEnabled, cmFlowPointCpdProfileGVRPDispType=cmFlowPointCpdProfileGVRPDispType, cmEthernetTrafficPortLinkLossFwdPartnerEnabled=cmEthernetTrafficPortLinkLossFwdPartnerEnabled, f3GPSReceiverPortGnssDynamicModel=f3GPSReceiverPortGnssDynamicModel, cmEthernetFlowPointAssociatedCpdProfile=cmEthernetFlowPointAssociatedCpdProfile, cmEthernetNetPortIngressCOSPriority=cmEthernetNetPortIngressCOSPriority, bitsPortSignalShape=bitsPortSignalShape, cmTrafficPortQosShaperIngressAverageFrameSize=cmTrafficPortQosShaperIngressAverageFrameSize, cmPrioMapV2ProfileAppliedObj=cmPrioMapV2ProfileAppliedObj, cmNetPortEncapPcpDEPairIndex=cmNetPortEncapPcpDEPairIndex, f3PulsePerSecondPortSecondaryState=f3PulsePerSecondPortSecondaryState, cmPortCpdProfileLACPDispType=cmPortCpdProfileLACPDispType, cmFlowIndex=cmFlowIndex, ocnStmSfpSerialNumber=ocnStmSfpSerialNumber, cmEthernetNetPortIndependentShaperBW=cmEthernetNetPortIndependentShaperBW, cmEthernetNetPortXdslControlChannel=cmEthernetNetPortXdslControlChannel, cmEthernetTrafficPortMcastRateLimitSpeedHi=cmEthernetTrafficPortMcastRateLimitSpeedHi, cmEthernetNetPortPppoeLcpRetryThreshold=cmEthernetNetPortPppoeLcpRetryThreshold, SignalFrequency=SignalFrequency, f3EnvelopeAssocPolicer=f3EnvelopeAssocPolicer, cmMPFlowFwdTableSizeProfileID=cmMPFlowFwdTableSizeProfileID, cmFlowCpdV2Mac02DispType=cmFlowCpdV2Mac02DispType, cmEthernetNetPortCpdV2Index=cmEthernetNetPortCpdV2Index, cmTrafficAclRscAllocation=cmTrafficAclRscAllocation, cmPrioMapV2ProfileIndex=cmPrioMapV2ProfileIndex, todPps16PortGroupIfIndex=todPps16PortGroupIfIndex, f3EthernetTrafficPortExpDEPairTable=f3EthernetTrafficPortExpDEPairTable, cmEthernetNetPortSfpName=cmEthernetNetPortSfpName, cmEthernetNetPortLoopbackConfig=cmEthernetNetPortLoopbackConfig, cmEthernetTrafficPortShapedSpeedHi=cmEthernetTrafficPortShapedSpeedHi, cmEthernetNetPortOuterTagTpid=cmEthernetNetPortOuterTagTpid, f3UsbWIFIDonglePortIfIndex=f3UsbWIFIDonglePortIfIndex, f3AclRuleStorageType=f3AclRuleStorageType, cmEthernetAccPortLoopbackBlockingEnabled=cmEthernetAccPortLoopbackBlockingEnabled, cmEthernetAccPortOamLocalLinkEventsEnabled=cmEthernetAccPortOamLocalLinkEventsEnabled, ieee1588EthernetPortIfIndex=ieee1588EthernetPortIfIndex, ccGroupDutyCycle=ccGroupDutyCycle, ocnStmMultiplexingStructures=ocnStmMultiplexingStructures, cmEthernetTrafficPortShapedSpeedLo=cmEthernetTrafficPortShapedSpeedLo, cmEthernetNetPortExpectedQL=cmEthernetNetPortExpectedQL, cmEthernetTrafficPortPcpDEDecTable=cmEthernetTrafficPortPcpDEDecTable, bitsPortIdleCode=bitsPortIdleCode, cmPortCpdProfileBridgeGroupDispType=cmPortCpdProfileBridgeGroupDispType, cmEthernetNetPortDeiEnable=cmEthernetNetPortDeiEnable, cmEthernetAccPortCpdEntry=cmEthernetAccPortCpdEntry, cmQosQueueProfileEntry=cmQosQueueProfileEntry, cmPortCpdProfileBridgeReservedDispType=cmPortCpdProfileBridgeReservedDispType, f3GPSReceiverPortFailureSuspendTime=f3GPSReceiverPortFailureSuspendTime, cmEthernetNetPortJDSUControlFramesSnoopingEnabled=cmEthernetNetPortJDSUControlFramesSnoopingEnabled, cmQosShaperV2ActualCIR=cmQosShaperV2ActualCIR, cmEthernetNetPortDiagnosePair3Cond=cmEthernetNetPortDiagnosePair3Cond, cmEthernetAccPortInnerVlanLoopback1=cmEthernetAccPortInnerVlanLoopback1, AclNoMatchDispositionType=AclNoMatchDispositionType, cmEthernetTrafficPortDiagnoseResult=cmEthernetTrafficPortDiagnoseResult, f3Usb3GDCNPortPUKLeftChances=f3Usb3GDCNPortPUKLeftChances, todPps16PortGroupSquelchQL=todPps16PortGroupSquelchQL, sciPortOperationalState=sciPortOperationalState, cmQosShaperBufferSize=cmQosShaperBufferSize, clk16PortGroupIfIndex=clk16PortGroupIfIndex, cmPrioMapV2IngressPrioMappingGroup=cmPrioMapV2IngressPrioMappingGroup, cmEthernetTrafficPortCpdV2UdldDispType=cmEthernetTrafficPortCpdV2UdldDispType, ccGroupIfIndex=ccGroupIfIndex, cmTrafficAclProfileName=cmTrafficAclProfileName, clk16PortGroupSquelchControl=clk16PortGroupSquelchControl, cmAccPortPcpDEEncEntry=cmAccPortPcpDEEncEntry, cmEthernetNetPortCpdV2LACPMarkerDispType=cmEthernetNetPortCpdV2LACPMarkerDispType, cmFlowA2NShapingType=cmFlowA2NShapingType, cmQosShaperV2CIRHi=cmQosShaperV2CIRHi, vtVcPathTxTrailTrace=vtVcPathTxTrailTrace, stsVcPathBerDegThreshold=stsVcPathBerDegThreshold, cmEthernetTrafficPortPlugMode=cmEthernetTrafficPortPlugMode, cmEthernetNetPortSfpConnectorValue=cmEthernetNetPortSfpConnectorValue, cmFlowPointCpdProfileMac0BDispType=cmFlowPointCpdProfileMac0BDispType, cmQosPolicerProfileIndex=cmQosPolicerProfileIndex, cmPortCpdProfileVlanBridgeDispType=cmPortCpdProfileVlanBridgeDispType, cmAccPortExtBcastRateLimitEnabled=cmAccPortExtBcastRateLimitEnabled, cmEthernetAccPortCpdV2PortAuthenDispType=cmEthernetAccPortCpdV2PortAuthenDispType, cmEthernetTrafficPortRemoteSfpVendorName=cmEthernetTrafficPortRemoteSfpVendorName, cmQosPolicerV2RowStatus=cmQosPolicerV2RowStatus, cmEthernetTrafficPortEgressPopPVIDEnabled=cmEthernetTrafficPortEgressPopPVIDEnabled, cmQosShaperV2SecondaryState=cmQosShaperV2SecondaryState, ethernetAccessPortGroup=ethernetAccessPortGroup, f3UsbWIFIDonglePortSecondaryState=f3UsbWIFIDonglePortSecondaryState, bits8PortGroupLineCode=bits8PortGroupLineCode, cmEthernetNetPortTDMEncapsulation=cmEthernetNetPortTDMEncapsulation, cmEthernetAccPortSfpVendorName=cmEthernetAccPortSfpVendorName, f3FlowPointCpdV2Mac06DispType=f3FlowPointCpdV2Mac06DispType, ToggleValue=ToggleValue, cmEthernetNetPortClbEnabled=cmEthernetNetPortClbEnabled, cmTrafficAclRulesTable=cmTrafficAclRulesTable, cmEthernetNetPortQLModeEnabled=cmEthernetNetPortQLModeEnabled, cmNetPortPcpDEDropEligiblePrio=cmNetPortPcpDEDropEligiblePrio, cmFlowPointRefElpObject=cmFlowPointRefElpObject, cmEthernetNetPortCpdV2PvstpPlusDispType=cmEthernetNetPortCpdV2PvstpPlusDispType, cmEthernetTrafficPortCpdV2Table=cmEthernetTrafficPortCpdV2Table, cmNetPortPcpDEPairIndex=cmNetPortPcpDEPairIndex, cmFlowPointCpdProfilePortAuthenDispType=cmFlowPointCpdProfilePortAuthenDispType, cmEthernetTrafficPortIngressPopPriorityVidEnabled=cmEthernetTrafficPortIngressPopPriorityVidEnabled, f3UsbWIFIDonglePortPassword=f3UsbWIFIDonglePortPassword, sciPortEntry=sciPortEntry, E1T1LineType=E1T1LineType, f3IrigOutputUnitPortEntry=f3IrigOutputUnitPortEntry, cmPrioMapV2ProfileGroup=cmPrioMapV2ProfileGroup, cmEthernetMgmtPortEntry=cmEthernetMgmtPortEntry, cmQosShaperV2AssociatedQueueProfile=cmQosShaperV2AssociatedQueueProfile, cmEthernetTrafficPortCpdV2Mac0DDispType=cmEthernetTrafficPortCpdV2Mac0DDispType, f3AclRuleSrcIpv6AddressPrefixLen=f3AclRuleSrcIpv6AddressPrefixLen, cmEthernetAccPortMode=cmEthernetAccPortMode, cmEthernetTrafficPortCpdV2IslDispType=cmEthernetTrafficPortCpdV2IslDispType, cmEthernetAccPortCpdV2DtpDispType=cmEthernetAccPortCpdV2DtpDispType, bits8PortGroupTable=bits8PortGroupTable, cmPortCpdProfileLldpDispType=cmPortCpdProfileLldpDispType, cmEthernetNetPortCpdIndex=cmEthernetNetPortCpdIndex, f3SatelliteCNO=f3SatelliteCNO, cmEthernetNetPortCpdV2CdpDispType=cmEthernetNetPortCpdV2CdpDispType, cmEthernetTrafficPortOamRemoteMode=cmEthernetTrafficPortOamRemoteMode, cmEthernetTrafficPortWfqGroupEirLo=cmEthernetTrafficPortWfqGroupEirLo, f3TimeOfDayPortInputRate=f3TimeOfDayPortInputRate, cmEthernetNetPortOamLocalOamLoopbacksSupported=cmEthernetNetPortOamLocalOamLoopbacksSupported, cmEthernetNetPortTransmitQL=cmEthernetNetPortTransmitQL, cmFlowCpdV2Mac03DispType=cmFlowCpdV2Mac03DispType, ccGroup=ccGroup, f3FpQosPolicerEIRMaxHi=f3FpQosPolicerEIRMaxHi, f3Usb3GDCNPortConnectionStatus=f3Usb3GDCNPortConnectionStatus, CmDiagAutoNegCondType=CmDiagAutoNegCondType, cmPortCpdProfileMac08DispType=cmPortCpdProfileMac08DispType, ocnStmSfpPartNumber=ocnStmSfpPartNumber, f3GPSReceiverPortTable=f3GPSReceiverPortTable, F3Usb3GRecvSignalStrengthInd=F3Usb3GRecvSignalStrengthInd, cmEthernetAccPortDiagnosePair3Cond=cmEthernetAccPortDiagnosePair3Cond, cmTrafficPortQosShaperEIRHi=cmTrafficPortQosShaperEIRHi, cmFlowPointGuaranteedBWHi=cmFlowPointGuaranteedBWHi, cmEncapFlowPointEntry=cmEncapFlowPointEntry, cmNetPortEncapPcpDEPairEntry=cmNetPortEncapPcpDEPairEntry, cmEthernetNetPortCpdV2Mac05DispType=cmEthernetNetPortCpdV2Mac05DispType, cmEthernetTrafficPortPcpDEDecEntry=cmEthernetTrafficPortPcpDEDecEntry, cmNetPortExpDEDropEligiblePrio=cmNetPortExpDEDropEligiblePrio, cmEthernetTrafficPortCpdV2PagpDispType=cmEthernetTrafficPortCpdV2PagpDispType, cmFlowPointCpdProfileNonTpmrLLDPDispType=cmFlowPointCpdProfileNonTpmrLLDPDispType, cmFlowN2ARateLimitingEnabled=cmFlowN2ARateLimitingEnabled, cmPrioMapV2ProfileTable=cmPrioMapV2ProfileTable, cmEthernetNetPortXdslAnnex=cmEthernetNetPortXdslAnnex, f3IrigRelayOutputPortEntry=f3IrigRelayOutputPortEntry, cmNetPortIpPrecDEDecTable=cmNetPortIpPrecDEDecTable, SatelliteHealth=SatelliteHealth, cmEthernetNetPortSecondaryState=cmEthernetNetPortSecondaryState, cmNetPortExpDEPairIndex=cmNetPortExpDEPairIndex, cmPortCpdProfileStorageType=cmPortCpdProfileStorageType, cmEthernetMgmtPortNegotiatedSpeed=cmEthernetMgmtPortNegotiatedSpeed, ocnStmSfpHardwareRevision=ocnStmSfpHardwareRevision, cmFlowPointCpdProfileMac0CDispType=cmFlowPointCpdProfileMac0CDispType, cmFlowPointIngressMultiCOS=cmFlowPointIngressMultiCOS, f3NetPortQosShaperSoamEIRLo=f3NetPortQosShaperSoamEIRLo, e3t3T3Channelized=e3t3T3Channelized, cmNetPortPcpDEDecTable=cmNetPortPcpDEDecTable, cmTrafficAclSrcIpFilterEnabled=cmTrafficAclSrcIpFilterEnabled, cmEthernetTrafficPortLpbkTable=cmEthernetTrafficPortLpbkTable, cmFlowWfqGroupCOS=cmFlowWfqGroupCOS, bits8PortGroupOperationalState=bits8PortGroupOperationalState, cmEthernetTrafficPortCpdV2ELMIDispType=cmEthernetTrafficPortCpdV2ELMIDispType, cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl=cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl, cmQosFlowPolicerOperationalState=cmQosFlowPolicerOperationalState, cmNetPortExpDEPairTable=cmNetPortExpDEPairTable, ocnStmPortType=ocnStmPortType, cmEthernetTrafficPortOamRemoteMacAddress=cmEthernetTrafficPortOamRemoteMacAddress, cmNetPortEncapPcpDEEncInPriority=cmNetPortEncapPcpDEEncInPriority, cmFlowPointSTagVlanId=cmFlowPointSTagVlanId, cmFlowPointCpdProfileName=cmFlowPointCpdProfileName, f3AclRuleDstMacAddressControl=f3AclRuleDstMacAddressControl, cmEthernetAccPortOuterTagTpidOverride=cmEthernetAccPortOuterTagTpidOverride, ieee1588EthernetPortMDIXType=ieee1588EthernetPortMDIXType, cmEthernetNetPortCpdV2LANBridgesDispType=cmEthernetNetPortCpdV2LANBridgesDispType, cmFlowPointCpdProfileVlanBridgeDispType=cmFlowPointCpdProfileVlanBridgeDispType, cmEncapFlowPointSTagControl=cmEncapFlowPointSTagControl, cmPortCpdProfileMac0ADispType=cmPortCpdProfileMac0ADispType, cmNetPortPcpDEDecEntry=cmNetPortPcpDEDecEntry, cmEthernetAccPortOamEnabled=cmEthernetAccPortOamEnabled, cmFlowSecondaryState=cmFlowSecondaryState)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmEthernetAccPortCpdV2UdldDispType=cmEthernetAccPortCpdV2UdldDispType, e1t1PatternLpbkControl=e1t1PatternLpbkControl, cmEthernetTrafficPortDiagnosePair4Cond=cmEthernetTrafficPortDiagnosePair4Cond, cmTrafficPortQosShaperSecondaryState=cmTrafficPortQosShaperSecondaryState, cmEthernetTrafficPortCpdV2EfmOamDispType=cmEthernetTrafficPortCpdV2EfmOamDispType, f3FlowPointCpdV2PvstpPlusDispType=f3FlowPointCpdV2PvstpPlusDispType, gps10MHzPortAssumedQL=gps10MHzPortAssumedQL, cmMPFlowTable=cmMPFlowTable, cmEthernetNetPortAfpType=cmEthernetNetPortAfpType, cmPortCpdProfileCiscoGroupDispType=cmPortCpdProfileCiscoGroupDispType, e1t1SecondaryState=e1t1SecondaryState, f3SatelliteInUse=f3SatelliteInUse, cmEthernetNetPortDiagnosePair1Cond=cmEthernetNetPortDiagnosePair1Cond, ieee1588EthernetPortMTU=ieee1588EthernetPortMTU, cmEthernetNetPortCpdV2PortAuthenDispType=cmEthernetNetPortCpdV2PortAuthenDispType, cmAccPortPcpDEEncDropIneligiblePrio=cmAccPortPcpDEEncDropIneligiblePrio, cmEthernetAccPortLoopbackConfig=cmEthernetAccPortLoopbackConfig, cmEthernetNetPortLinkLossFwdPartnerEnabled=cmEthernetNetPortLinkLossFwdPartnerEnabled, cmEthernetAccPortCpdV2CustomerLLDPDispType=cmEthernetAccPortCpdV2CustomerLLDPDispType, cmEthernetAccPortJDSULoopbackVlanList=cmEthernetAccPortJDSULoopbackVlanList, cmEthernetAccPortIndex=cmEthernetAccPortIndex, f3FpQosPolicerStorageType=f3FpQosPolicerStorageType, f3FlowPointCpdV2CdpDispType=f3FlowPointCpdV2CdpDispType, f3PulsePerSecondPortAlias=f3PulsePerSecondPortAlias, cmEthernetTrafficPortTxDeiOuterTagType=cmEthernetTrafficPortTxDeiOuterTagType, cmFlowCpdV2PortAuthenDispType=cmFlowCpdV2PortAuthenDispType, cmEthernetAccPortOperationalState=cmEthernetAccPortOperationalState, f3GPSReceiverPortSelfSurveyControl=f3GPSReceiverPortSelfSurveyControl, cmFlowPointCpdProfileGMRPDispType=cmFlowPointCpdProfileGMRPDispType, cmFlowPointCpdProfileMac01DispType=cmFlowPointCpdProfileMac01DispType, cmQosShaperWredGreenMinQueueThreshold=cmQosShaperWredGreenMinQueueThreshold, cmEthernetAccPortCpdV2Mac0EDispType=cmEthernetAccPortCpdV2Mac0EDispType, f3Usb3GDCNPortSpeed=f3Usb3GDCNPortSpeed, clk16PortGroupIndex=clk16PortGroupIndex, cmEthernetAccPortEntry=cmEthernetAccPortEntry, cmFlowType=cmFlowType, cmFlowPointEgressInnerTagPrioMapEnabled=cmFlowPointEgressInnerTagPrioMapEnabled, cmEthernetNetPortSilentStartControl=cmEthernetNetPortSilentStartControl, pps16PortGroupAlias=pps16PortGroupAlias, cmEthernetAccPortCpdV2GMRPDispType=cmEthernetAccPortCpdV2GMRPDispType, ccInputPortEntry=ccInputPortEntry, PPSInputRate=PPSInputRate, cmAccPortQosShaperSoamCIRHi=cmAccPortQosShaperSoamCIRHi, f3Usb3GDCNPortProviderName=f3Usb3GDCNPortProviderName, cmEthernetNetPortInnerVlanLoopback2=cmEthernetNetPortInnerVlanLoopback2, cmFlowN2ACIR=cmFlowN2ACIR, CmEthernetSvcPortMode=CmEthernetSvcPortMode, cmEthernetNetPortShapedSpeedHi=cmEthernetNetPortShapedSpeedHi, cmFlowPointCpdProfileBPDUDispType=cmFlowPointCpdProfileBPDUDispType, cmEthernetAccPortCpdV2LANBridgesDispType=cmEthernetAccPortCpdV2LANBridgesDispType, cmQosShaperWredGreenDropProbability=cmQosShaperWredGreenDropProbability, cmTrafficAclEnabled=cmTrafficAclEnabled, cmAccPortQosShaperDirection=cmAccPortQosShaperDirection, cmEthernetNetPortConfigSpeed=cmEthernetNetPortConfigSpeed, cmEthernetTrafficPortClbDescr=cmEthernetTrafficPortClbDescr, cmAccPortPcpDEEncInPriority=cmAccPortPcpDEEncInPriority, cmFlowA2NBroadcastRateLimitLo=cmFlowA2NBroadcastRateLimitLo, cmEthernetTrafficPortCpdV2Mac04DispType=cmEthernetTrafficPortCpdV2Mac04DispType, e3t3OperationalState=e3t3OperationalState, cmFlowPointCpdProfileLACPDispType=cmFlowPointCpdProfileLACPDispType, cmEthernetAccPortTxPauseEnabled=cmEthernetAccPortTxPauseEnabled, cmQosFlowPolicerTypeIndex=cmQosFlowPolicerTypeIndex, vtVcPathBerDegThreshold=vtVcPathBerDegThreshold, f3UsbWIFIDonglePortName=f3UsbWIFIDonglePortName, f3GPSReceiverPortForcedAntennaConnected=f3GPSReceiverPortForcedAntennaConnected, f3AclRuleOuterVlanVIDControl=f3AclRuleOuterVlanVIDControl, f3FlowPointCpdV2DtpDispType=f3FlowPointCpdV2DtpDispType, bitsPortAssumedQL=bitsPortAssumedQL, cmEthernetAccPortClbDescr=cmEthernetAccPortClbDescr, cmEthernetAccPortCpdV2L2PTTunnelMac=cmEthernetAccPortCpdV2L2PTTunnelMac, f3FlowPointCpdV2Mac0EDispType=f3FlowPointCpdV2Mac0EDispType, cmEthernetAccPortMTU=cmEthernetAccPortMTU, cmEthernetMgmtPortIndex=cmEthernetMgmtPortIndex, cmNetPortPcpDEEncDropEligiblePrio=cmNetPortPcpDEEncDropEligiblePrio, cmQosPolicerV2Entry=cmQosPolicerV2Entry, stsVcPathRxSignalLabel=stsVcPathRxSignalLabel, f3FpQosPolicerTable=f3FpQosPolicerTable, cmFlowCpdV2NonTpmrLLDPDispType=cmFlowCpdV2NonTpmrLLDPDispType, cmTrafficPortQosShaperStorageType=cmTrafficPortQosShaperStorageType, f3EnvelopeAssocPolicerEntry=f3EnvelopeAssocPolicerEntry, f3Usb3GDCNPortIfIndex=f3Usb3GDCNPortIfIndex, cmEthernetTrafficPortPcpDEDecInPriority=cmEthernetTrafficPortPcpDEDecInPriority, cmEthernetTrafficPortIngressPushPVIDEnabled=cmEthernetTrafficPortIngressPushPVIDEnabled, cmEthernetAccPortSwapPriorityVID=cmEthernetAccPortSwapPriorityVID, cmEthernetTrafficPortSfpConnectorValue=cmEthernetTrafficPortSfpConnectorValue, f3AclRuleDstIpv4AddressLowLimit=f3AclRuleDstIpv4AddressLowLimit, cmQosFlowPolicerCIRMaxHi=cmQosFlowPolicerCIRMaxHi, cmTrafficPortQosShaperGroup=cmTrafficPortQosShaperGroup, cmEthernetNetPortCpdV2Mac0FDispType=cmEthernetNetPortCpdV2Mac0FDispType, CmEthernetMDIXType=CmEthernetMDIXType, e1t1LineBuildOut=e1t1LineBuildOut, cmFlowPointAutoCIRPercentage=cmFlowPointAutoCIRPercentage, cmEthernetAccPortClbTable=cmEthernetAccPortClbTable, cmPrioMapV2ProfileMapModeType=cmPrioMapV2ProfileMapModeType, cmAccPortExtCombinedRateLimitSpeedHi=cmAccPortExtCombinedRateLimitSpeedHi, cmEthernetNetPortQinQEtherType=cmEthernetNetPortQinQEtherType, cmEthernetAccPortConfigSpeed=cmEthernetAccPortConfigSpeed, sciPortSignalMode=sciPortSignalMode, f3AclRuleSrcMacAddressControl=f3AclRuleSrcMacAddressControl, RelativeChannelIdentifier=RelativeChannelIdentifier, cmEthernetTrafficPortJDSULoopbackVlan=cmEthernetTrafficPortJDSULoopbackVlan, cmPsePortGroup=cmPsePortGroup, cmEthernetNetPortTrafficModel=cmEthernetNetPortTrafficModel, cmQosShaperAvgFrameSizeBeforeFragment=cmQosShaperAvgFrameSizeBeforeFragment, f3Usb3GDCNPINCodeAction=f3Usb3GDCNPINCodeAction, ccGroupPhaseAdjust=ccGroupPhaseAdjust, cmEthernetAccPortClbIndex=cmEthernetAccPortClbIndex, cmAccPortQosShaperWredGreenMinQueueThreshold=cmAccPortQosShaperWredGreenMinQueueThreshold, f3IrigOpticalOutputPortTable=f3IrigOpticalOutputPortTable, cmAccPortQosShaperBufferSize=cmAccPortQosShaperBufferSize, cmEthernetTrafficPortCpdV2Mac02DispType=cmEthernetTrafficPortCpdV2Mac02DispType, cmTrafficPortLpbkGroup=cmTrafficPortLpbkGroup, f3AclRuleDstPortControl=f3AclRuleDstPortControl, f3SatelliteHealth=f3SatelliteHealth, cmPrioMapV2ProfileCosMapModeType=cmPrioMapV2ProfileCosMapModeType, cmAccPortQosShaperIndex=cmAccPortQosShaperIndex, f3FlowPointCpdV2CustomerLLDPDispType=f3FlowPointCpdV2CustomerLLDPDispType, cmNetPortEncapPcpDEDecEntry=cmNetPortEncapPcpDEDecEntry, cmEthernetAccPortOamLocalMaxPDUSize=cmEthernetAccPortOamLocalMaxPDUSize, f3AclRuleCosOverrideControl=f3AclRuleCosOverrideControl, cmEncapFlowPointEgressOuterTagPrioMapEnabled=cmEncapFlowPointEgressOuterTagPrioMapEnabled, ccInputPortEntityIndex=ccInputPortEntityIndex, cmEthernetTrafficPortPcpDEEncType=cmEthernetTrafficPortPcpDEEncType, cmEthernetNetPortAutoDiagEnabled=cmEthernetNetPortAutoDiagEnabled, cmEthernetTrafficPortRefPrioMapProfile=cmEthernetTrafficPortRefPrioMapProfile, cmQosPolicerProfileName=cmQosPolicerProfileName, cmEthernetNetPortSfpHardwareRevision=cmEthernetNetPortSfpHardwareRevision, cmEthernetMgmtPortOperationalState=cmEthernetMgmtPortOperationalState, ocnStmAdminState=ocnStmAdminState, f3Usb3GDCNPortIndex=f3Usb3GDCNPortIndex, cmFlowPort2=cmFlowPort2, cmNetPortPcpDEEncEntry=cmNetPortPcpDEEncEntry, cmEthernetNetPortLinkLossFwdLocalLinkId=cmEthernetNetPortLinkLossFwdLocalLinkId, cmTrafficAclVlanPriorityEnabled=cmTrafficAclVlanPriorityEnabled, cmFlowPointCpdProfileL2PTDispType=cmFlowPointCpdProfileL2PTDispType, cmEthernetNetPortCpdFilterType=cmEthernetNetPortCpdFilterType, cmEthernetNetPortLinkLossFwdRxRLDLinkIds=cmEthernetNetPortLinkLossFwdRxRLDLinkIds, cmEthernetTrafficPortExtTable=cmEthernetTrafficPortExtTable, cmEncapFlowPointGroup=cmEncapFlowPointGroup, f3PolicerEnvelopeCouplingFlag=f3PolicerEnvelopeCouplingFlag, cmOAMFlowPointSESFramesLossThresholdRatio=cmOAMFlowPointSESFramesLossThresholdRatio, cmEthernetTrafficPortSvcType=cmEthernetTrafficPortSvcType, f3AclRuleDstPortHighLimit=f3AclRuleDstPortHighLimit, cmFlowPointAutoBandwidthConfigEnabled=cmFlowPointAutoBandwidthConfigEnabled, cmEthernetTrafficPortRemoteSfpLaserFrequency=cmEthernetTrafficPortRemoteSfpLaserFrequency, cmQosPolicerProfileEntry=cmQosPolicerProfileEntry, pethMainPseEXTTable=pethMainPseEXTTable, vtVcPathLoopbackTime=vtVcPathLoopbackTime, cmEthernetNetPortCpdMacAddressMatch=cmEthernetNetPortCpdMacAddressMatch, cmFlowCpdV2PagpDispType=cmFlowCpdV2PagpDispType, f3FlowPointCpdV2GVRPDispType=f3FlowPointCpdV2GVRPDispType, cmEthernetTrafficPortOuterTagTpid=cmEthernetTrafficPortOuterTagTpid, cmEthernetAccPortCpdV2Mac09DispType=cmEthernetAccPortCpdV2Mac09DispType, f3IrigOutputUnitPortControlField=f3IrigOutputUnitPortControlField, f3EthernetTrafficPortExpDEDecTable=f3EthernetTrafficPortExpDEDecTable, f3AclRuleInnerVlanVIDHighLimit=f3AclRuleInnerVlanVIDHighLimit, neTMParamsBandwidthProfileMode=neTMParamsBandwidthProfileMode, cmEthernetNetPortShapedSpeedLo=cmEthernetNetPortShapedSpeedLo, e1t1RemoteLoopbackRequest=e1t1RemoteLoopbackRequest, PcpDEEncType=PcpDEEncType, ccGroupEntry=ccGroupEntry, cmEthernetNetPortDiagnoseLpbkCond=cmEthernetNetPortDiagnoseLpbkCond, cmFlowPointIngressUntaggedFrameEnabled=cmFlowPointIngressUntaggedFrameEnabled, cmFlowCpdV2GMRPDispType=cmFlowCpdV2GMRPDispType, f3Usb3GDCNPortAPN=f3Usb3GDCNPortAPN, cmEthernetAccPortSecondaryState=cmEthernetAccPortSecondaryState, cmFlowCpdV2CdpDispType=cmFlowCpdV2CdpDispType, cmPrioMapXTagControl=cmPrioMapXTagControl, f3SatelliteSV=f3SatelliteSV, cmEthernetAccPortWfqGroupEirHi=cmEthernetAccPortWfqGroupEirHi, bitsPortSaBitDesignation=bitsPortSaBitDesignation, cmPortCpdProfileSSMDispType=cmPortCpdProfileSSMDispType, cmFlowPointCpdProfileStorageType=cmFlowPointCpdProfileStorageType, f3TimeOfDayPortGroup=f3TimeOfDayPortGroup, f3TimeOfDayPortSecondaryState=f3TimeOfDayPortSecondaryState, cmEthernetAccPortLinkLossFwdSignalType=cmEthernetAccPortLinkLossFwdSignalType, cmEthernetTrafficPortOamRemoteMaxPDUSize=cmEthernetTrafficPortOamRemoteMaxPDUSize, bitsPortTable=bitsPortTable, cmMPFlowtableFullAction=cmMPFlowtableFullAction, cmFlowLoopAvoidanceObject=cmFlowLoopAvoidanceObject, InstallationType=InstallationType, IrigOutputType=IrigOutputType, gps10MHzPortAdminState=gps10MHzPortAdminState, cmNetPortExtTable=cmNetPortExtTable, f3FpQosPolicerEIRHi=f3FpQosPolicerEIRHi, cmEthernetTrafficPortCpdV2BridgeReservedDispType=cmEthernetTrafficPortCpdV2BridgeReservedDispType, f3AclRuleRowStatus=f3AclRuleRowStatus, f3FpQosShaperWfqWeight=f3FpQosShaperWfqWeight, cmEthernetTrafficPortJdsuExtTable=cmEthernetTrafficPortJdsuExtTable, cmElineFlowEntry=cmElineFlowEntry, ieee1588EthernetPortEntityIndex=ieee1588EthernetPortEntityIndex, cmEthernetTrafficPortLinkLossFwdRemoteLinkIds=cmEthernetTrafficPortLinkLossFwdRemoteLinkIds, cmEthernetNetPortLoopbackTestReflectorIPv4Address=cmEthernetNetPortLoopbackTestReflectorIPv4Address, cmEthernetAccPortCpdV2Mac06DispType=cmEthernetAccPortCpdV2Mac06DispType, cmOAMFlowPointAdminState=cmOAMFlowPointAdminState, cmTrafficAclTcpUdpDstPortNum=cmTrafficAclTcpUdpDstPortNum, f3PulsePerSecondPortPhyInterfaceType=f3PulsePerSecondPortPhyInterfaceType, f3AclRuleDstIpv4AddressControl=f3AclRuleDstIpv4AddressControl, cmEthernetTrafficPortSyncEEnabled=cmEthernetTrafficPortSyncEEnabled, cmFlowUntaggedMemberEnabled=cmFlowUntaggedMemberEnabled, cmEthernetTrafficPortOamId=cmEthernetTrafficPortOamId, f3AclRuleIpv4PriorityHighLimit=f3AclRuleIpv4PriorityHighLimit, cmEthernetTrafficPortClbEnabled=cmEthernetTrafficPortClbEnabled, cmTrafficAclProfileRowStatus=cmTrafficAclProfileRowStatus, cmEthernetAccPortSyncEEnabled=cmEthernetAccPortSyncEEnabled, cmFlowPolicingControl=cmFlowPolicingControl, f3GPSReceiverPortOperationalState=f3GPSReceiverPortOperationalState, ethernetMgmtPortGroup=ethernetMgmtPortGroup, cmPrioMapEntry=cmPrioMapEntry, cmQosFlowPolicerRowStatus=cmQosFlowPolicerRowStatus, cmEthernetTrafficPortSfpHardwareRevision=cmEthernetTrafficPortSfpHardwareRevision, todPps16PortGroupSecondaryState=todPps16PortGroupSecondaryState, cmFlowCpdV2SSMDispType=cmFlowCpdV2SSMDispType, cmEthernetTrafficPortPlugOutOfBandChannelStatus=cmEthernetTrafficPortPlugOutOfBandChannelStatus, cmNetPortExtCombinedRateLimitSpeedLo=cmNetPortExtCombinedRateLimitSpeedLo, f3EthernetTrafficPortExpDEPairIndex=f3EthernetTrafficPortExpDEPairIndex, ocnStmGroup=ocnStmGroup, cmEthernetAccPortXgePhyType=cmEthernetAccPortXgePhyType, cmFlowA2NBroadcastRateLimitControl=cmFlowA2NBroadcastRateLimitControl, cmOAMFlowPointRowStatus=cmOAMFlowPointRowStatus, cmFlowMaximumA2NBandwidthLo=cmFlowMaximumA2NBandwidthLo, cmEthernetTrafficPortQLModeEnabled=cmEthernetTrafficPortQLModeEnabled, f3IrigOutputUnitPortTable=f3IrigOutputUnitPortTable, cmFlowA2NEIR=cmFlowA2NEIR, e3t3Index=e3t3Index, cmAccPortQosShaperAvgFrameSizeBeforeFragment=cmAccPortQosShaperAvgFrameSizeBeforeFragment, cmEthernetAccPortRxPauseEnabled=cmEthernetAccPortRxPauseEnabled, cmEthernetTrafficPortCpdV2L2PTTunnelMac=cmEthernetTrafficPortCpdV2L2PTTunnelMac, e3t3AdminState=e3t3AdminState, cmNetPortIpPrecDEEncTable=cmNetPortIpPrecDEEncTable, cmEthernetNetPortLinkLossFwdDelay=cmEthernetNetPortLinkLossFwdDelay, cmFlowGuaranteedA2NBandwidthLo=cmFlowGuaranteedA2NBandwidthLo, bits8PortGroupIfIndex=bits8PortGroupIfIndex, cmFlowPointMcastAndBcastRateLimitEnabled=cmFlowPointMcastAndBcastRateLimitEnabled, cmFlowPointCpdProfileMac0ADispType=cmFlowPointCpdProfileMac0ADispType, f3SatelliteGroup=f3SatelliteGroup, bitsPortAdminState=bitsPortAdminState, cmEthernetNetPortCpdV2SSMDispType=cmEthernetNetPortCpdV2SSMDispType, cmEthernetNetPortEntry=cmEthernetNetPortEntry, cmEthernetNetPortClbIndex=cmEthernetNetPortClbIndex, cmPortCpdProfileVtpDispType=cmPortCpdProfileVtpDispType, cmEthernetTrafficPortCpdV2NearestLLDPDispType=cmEthernetTrafficPortCpdV2NearestLLDPDispType, cmEthernetNetPortCpdV2DtpDispType=cmEthernetNetPortCpdV2DtpDispType, cmPortCpdProfileLACPMarkerDispType=cmPortCpdProfileLACPMarkerDispType, cmEthernetAccPortDiagnoseTestTime=cmEthernetAccPortDiagnoseTestTime, cmFlowMultiCOS=cmFlowMultiCOS, ieee1588EthernetPortEntry=ieee1588EthernetPortEntry, cmEthernetAccPortTrafficModel=cmEthernetAccPortTrafficModel, f3SatelliteEntry=f3SatelliteEntry, cmQosPolicerV2Index=cmQosPolicerV2Index, cmFlowPointSESFramesLossThresholdRatio=cmFlowPointSESFramesLossThresholdRatio, ocnStmSfpConnectorValue=ocnStmSfpConnectorValue, cmFlowN2AOuterTagPrioEnabled=cmFlowN2AOuterTagPrioEnabled, cmMPFlowAdminState=cmMPFlowAdminState)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmFlowPointCpdProfileMac00DispType=cmFlowPointCpdProfileMac00DispType, CmControlProtocolFilterType=CmControlProtocolFilterType, cmEthernetNetPortRxPauseDisposition=cmEthernetNetPortRxPauseDisposition, cmFlowSTagVlanId=cmFlowSTagVlanId, gps10MHzPortSecondaryState=gps10MHzPortSecondaryState, cmEthernetAccPortCpdV2Index=cmEthernetAccPortCpdV2Index, cmNetPortExtRefPrioMapProfile=cmNetPortExtRefPrioMapProfile, cmPrioMapV2PrioMappingEncapOuterDscpValue=cmPrioMapV2PrioMappingEncapOuterDscpValue, cmEthernetNetPortOamLocalVarRtrvsEnabled=cmEthernetNetPortOamLocalVarRtrvsEnabled, cmQosPolicerV2OperationalState=cmQosPolicerV2OperationalState, cmNetPortPcpDEEncDropIneligiblePrio=cmNetPortPcpDEEncDropIneligiblePrio, cmEthernetTrafficPortRemoteSfpLaserWaveLength=cmEthernetTrafficPortRemoteSfpLaserWaveLength, cmPortCpdProfileMac0FDispType=cmPortCpdProfileMac0FDispType, cmQosFlowPolicerStorageType=cmQosFlowPolicerStorageType, ocnStmSfpLaserWaveLength=ocnStmSfpLaserWaveLength, cmEthernetAccPortLinkLossFwdLocalLinkId=cmEthernetAccPortLinkLossFwdLocalLinkId, pethPsePortExtPowerConsumption=pethPsePortExtPowerConsumption, cmEthernetTrafficPortCpdV2LACPMarkerDispType=cmEthernetTrafficPortCpdV2LACPMarkerDispType, LearningAction=LearningAction, vtVcPathExpectedTrailTrace=vtVcPathExpectedTrailTrace, f3AclRuleOuterVlanPcpLowLimit=f3AclRuleOuterVlanPcpLowLimit, RxDeiAction=RxDeiAction, F3Usb3GSimCardState=F3Usb3GSimCardState, cmEthernetAccPortRxPauseDisposition=cmEthernetAccPortRxPauseDisposition, f3PolicerEnvelopeIndex=f3PolicerEnvelopeIndex, e1t1IdlePatternProfile=e1t1IdlePatternProfile, stsVcPathLoopbackStatus=stsVcPathLoopbackStatus, BitErrRate=BitErrRate, cmEthernetTrafficPortLoopbackStatus=cmEthernetTrafficPortLoopbackStatus, f3TimeOfDayPortAssumedClockClass=f3TimeOfDayPortAssumedClockClass, cmPrioMapV2PrioMappingPriEntry=cmPrioMapV2PrioMappingPriEntry, cmAccPortQosShaperWredYellowMaxQueueThreshold=cmAccPortQosShaperWredYellowMaxQueueThreshold, cmQosPolicerProfileCIRHi=cmQosPolicerProfileCIRHi, f3AclRuleInnerVlanPcpHighLimit=f3AclRuleInnerVlanPcpHighLimit, ieee1588EthernetPortTable=ieee1588EthernetPortTable, cmEthernetTrafficPortPcpDEEncDropIneligiblePrio=cmEthernetTrafficPortPcpDEEncDropIneligiblePrio, f3GPSReceiverPortTDOP=f3GPSReceiverPortTDOP, cmEthernetTrafficPortCombinedRateLimitSpeedHi=cmEthernetTrafficPortCombinedRateLimitSpeedHi, f3PolicerEnvelopeRowStatus=f3PolicerEnvelopeRowStatus, cmTrafficAclIpQosValue=cmTrafficAclIpQosValue, f3FpQosShaperGroup=f3FpQosShaperGroup, cmFlowPointWfqSegmentationCOS=cmFlowPointWfqSegmentationCOS, cmEthernetAccPortCpdV2L2PTDispType=cmEthernetAccPortCpdV2L2PTDispType, f3EthernetTrafficPortExpDEDecInPriority=f3EthernetTrafficPortExpDEDecInPriority, cmEgressPrioMapTable=cmEgressPrioMapTable, cmAccPortQosShaperWredYellowDropProbability=cmAccPortQosShaperWredYellowDropProbability, bitsPortLineType=bitsPortLineType, cmFlowPointBcastRateLimitSpeedHi=cmFlowPointBcastRateLimitSpeedHi, f3TimeOfDayPortDelayCompensation=f3TimeOfDayPortDelayCompensation, f3Usb3GDCNPortOperationalState=f3Usb3GDCNPortOperationalState, f3PulsePerSecondPortSquelchQL=f3PulsePerSecondPortSquelchQL, CmDiagLpbkCondType=CmDiagLpbkCondType, cmEthernetAccPortLinkLossFwdRemoteLinkIds=cmEthernetAccPortLinkLossFwdRemoteLinkIds, cmEthernetNetPortDefaultCOS=cmEthernetNetPortDefaultCOS, cmEthernetTrafficPortCpdV2GMRPDispType=cmEthernetTrafficPortCpdV2GMRPDispType, cmEthernetAccPortCpdFilterType=cmEthernetAccPortCpdFilterType, f3NetPortQosShaperSecondaryState=f3NetPortQosShaperSecondaryState, cmEthernetNetPortClbTable=cmEthernetNetPortClbTable, cmEthernetTrafficPortSfpDateOfManufacture=cmEthernetTrafficPortSfpDateOfManufacture, vtVcPathRowStatus=vtVcPathRowStatus, cmEthernetAccPortLaserWDMChannel=cmEthernetAccPortLaserWDMChannel, SaBitDesignation=SaBitDesignation, PYSNMP_MODULE_ID=cmFacilityMIB, f3GPSReceiverPortEntry=f3GPSReceiverPortEntry, IrigRelayOperation=IrigRelayOperation, f3EthernetTrafficPortExpDEEncTable=f3EthernetTrafficPortExpDEEncTable, f3PulsePerSecondPortWidth=f3PulsePerSecondPortWidth, f3AclRuleAdminState=f3AclRuleAdminState, cmEthernetTrafficPortLinkLossFwdActive=cmEthernetTrafficPortLinkLossFwdActive, cmFlowPointAdminState=cmFlowPointAdminState, cmFlowPointVlanMemberActionVlan=cmFlowPointVlanMemberActionVlan, cmAccPortQosShaperCBS=cmAccPortQosShaperCBS, cmEthernetNetPortCpdV2VlanBridgeDispType=cmEthernetNetPortCpdV2VlanBridgeDispType, f3GPSReceiverPortSelfSurveyProgress=f3GPSReceiverPortSelfSurveyProgress, cmQosFlowPolicerEIRLo=cmQosFlowPolicerEIRLo, cmAccPortPcpDEPairEntry=cmAccPortPcpDEPairEntry, cmQosFlowPolicerEIRMaxLo=cmQosFlowPolicerEIRMaxLo, ccGroupIndex=ccGroupIndex, gps10MHzPortClockClass=gps10MHzPortClockClass, cmQosShaperEIRHi=cmQosShaperEIRHi, e3t3LoopbackStatus=e3t3LoopbackStatus, bitsPortAis=bitsPortAis, cmEthernetTrafficPortPlugFrequency=cmEthernetTrafficPortPlugFrequency, cmEthernetNetPortLinkLossFwdEnabled=cmEthernetNetPortLinkLossFwdEnabled, cmQosShaperRowStatus=cmQosShaperRowStatus, f3NetPortQosShaperEntry=f3NetPortQosShaperEntry, cmEthernetTrafficPortCpdV2CiscoGroupDispType=cmEthernetTrafficPortCpdV2CiscoGroupDispType, f3PulsePerSecondPortTable=f3PulsePerSecondPortTable, cmQosPolicerProfileEIRLo=cmQosPolicerProfileEIRLo, f3Usb3GDCNPortModel=f3Usb3GDCNPortModel, cmEthernetAccPortNegotiatedSpeed=cmEthernetAccPortNegotiatedSpeed, vtVcPathIndex=vtVcPathIndex, cmFlowPointCpdProfileLACPMarkerDispType=cmFlowPointCpdProfileLACPMarkerDispType, cmEthernetTrafficPortPortVlanId=cmEthernetTrafficPortPortVlanId, CmLinkLossFwdTxActionType=CmLinkLossFwdTxActionType, f3NetPortQosShaperAvgFrameSizeBeforeFragment=f3NetPortQosShaperAvgFrameSizeBeforeFragment, bits8PortGroupQLModeEnabled=bits8PortGroupQLModeEnabled, cmEthernetTrafficPortCpdV2PtpTaggedDispType=cmEthernetTrafficPortCpdV2PtpTaggedDispType, cmOAMFlowPointIngressVlanMemberList=cmOAMFlowPointIngressVlanMemberList, f3IrigRelayOutputPortIndex=f3IrigRelayOutputPortIndex, cmEthernetNetPortInsertingAIS=cmEthernetNetPortInsertingAIS, cmPortCpdProfileCustomerLLDPDispType=cmPortCpdProfileCustomerLLDPDispType, f3IrigRs422OutputPortEntityIndex=f3IrigRs422OutputPortEntityIndex, cmEthernetTrafficPortPcpDEPairTable=cmEthernetTrafficPortPcpDEPairTable, cmFlowCpdV2GARPGroupDispType=cmFlowCpdV2GARPGroupDispType, f3GPSReceiverPortSelfSurveyPeriod=f3GPSReceiverPortSelfSurveyPeriod, cmAccPortPcpDEPairIndex=cmAccPortPcpDEPairIndex, f3IrigOpticalOutputPortOperationalState=f3IrigOpticalOutputPortOperationalState, cmEthernetTrafficPortLinkLossFwdTxActionType=cmEthernetTrafficPortLinkLossFwdTxActionType, cmEncapFlowPointCTagVlanId=cmEncapFlowPointCTagVlanId, cmFlowWfqSegmentationCOS=cmFlowWfqSegmentationCOS, cmFlowPointCpdProfileMac03DispType=cmFlowPointCpdProfileMac03DispType, cmEthernetAccPortCpdV2Mac0FDispType=cmEthernetAccPortCpdV2Mac0FDispType, e3t3LoopbackConfig=e3t3LoopbackConfig, cmQosShaperV2StorageType=cmQosShaperV2StorageType, cmPortCpdProfileMac0BDispType=cmPortCpdProfileMac0BDispType, cmEthernetAccPortCpdV2LACPDispType=cmEthernetAccPortCpdV2LACPDispType, cmEthernetAccPortWfqSegmentationCOS=cmEthernetAccPortWfqSegmentationCOS, cmEthernetTrafficPortSfpRxPowerLevel=cmEthernetTrafficPortSfpRxPowerLevel, f3IrigOpticalOutputPortTimeCode=f3IrigOpticalOutputPortTimeCode, UsbDCNMobileNetworkType=UsbDCNMobileNetworkType, E1T1RcvSensitivity=E1T1RcvSensitivity, f3AclRuleOuterVlanDei=f3AclRuleOuterVlanDei, cmEthernetTrafficPortJdsuLoopbackVlanId=cmEthernetTrafficPortJdsuLoopbackVlanId, ocnStmLoopbackStatus=ocnStmLoopbackStatus, cmEthernetNetPortOamLocalMode=cmEthernetNetPortOamLocalMode, ocnStmFreqSourceType=ocnStmFreqSourceType, cmNetPortPcpDEPairEntry=cmNetPortPcpDEPairEntry, cmEthernetNetPortLinkLossFwdTriggerTypes=cmEthernetNetPortLinkLossFwdTriggerTypes, cmQosFlowPolicerCIRLo=cmQosFlowPolicerCIRLo, cmEthernetNetPortCpdV2NonTpmrLLDPDispType=cmEthernetNetPortCpdV2NonTpmrLLDPDispType, cmNetPortExpDEDecEntry=cmNetPortExpDEDecEntry, cmEthernetAccPortN2aSwapPriorityVIDEnabled=cmEthernetAccPortN2aSwapPriorityVIDEnabled, cmEthernetTrafficPortMDIXType=cmEthernetTrafficPortMDIXType, cmPrioMapV2PrioMappingPriCOS=cmPrioMapV2PrioMappingPriCOS, cmEthernetTrafficPortCpdV2PortAuthenDispType=cmEthernetTrafficPortCpdV2PortAuthenDispType, stsVcPathLoopbackTime=stsVcPathLoopbackTime, f3FpQosShaperCIRLo=f3FpQosShaperCIRLo, clk16PortGroupGroup=clk16PortGroupGroup, cmFlowPointEfIdentificationType=cmFlowPointEfIdentificationType, cmEthernetAccPortCpdV2LACPMarkerDispType=cmEthernetAccPortCpdV2LACPMarkerDispType, cmFlowStorageType=cmFlowStorageType, SciRxSsmQL=SciRxSsmQL, bitsPortExpectedQL=bitsPortExpectedQL, cmPrioMapV2ProfileRowStatus=cmPrioMapV2ProfileRowStatus, cmEthernetNetPortPcpDEPairsAction=cmEthernetNetPortPcpDEPairsAction, cmTrafficPortQosShaperBufferSize=cmTrafficPortQosShaperBufferSize, f3UsbWIFIDonglePortTable=f3UsbWIFIDonglePortTable, cmEthernetNetPortXdslCarrierSet=cmEthernetNetPortXdslCarrierSet, cmFlowCpdV2Mac0EDispType=cmFlowCpdV2Mac0EDispType, cmFlowPointCpdProfileCdpDispType=cmFlowPointCpdProfileCdpDispType, cmEthernetAccPortCpdV2Table=cmEthernetAccPortCpdV2Table, FlowVlanActionType=FlowVlanActionType, vtVcPathIfIndex=vtVcPathIfIndex, OutOfBandChannelStatus=OutOfBandChannelStatus, cmEthernetTrafficPortClbTable=cmEthernetTrafficPortClbTable, bits8PortGroupAdminState=bits8PortGroupAdminState, cmFlowCpdV2BPDUDispType=cmFlowCpdV2BPDUDispType, f3GPSReceiverPortServiceUnavailableTime=f3GPSReceiverPortServiceUnavailableTime, cmEthernetNetPortXdslDsAttainableRate=cmEthernetNetPortXdslDsAttainableRate, CosMappingMode=CosMappingMode, cmEthernetAccPortLinkLossFwdTxActionType=cmEthernetAccPortLinkLossFwdTxActionType, f3NetPortQosShaperWredGreenMaxQueueThreshold=f3NetPortQosShaperWredGreenMaxQueueThreshold, ccInputPortIndex=ccInputPortIndex, cmFlowCpdV2Mac0CDispType=cmFlowCpdV2Mac0CDispType, cmEthernetTrafficPortLinkLossFwdDelay=cmEthernetTrafficPortLinkLossFwdDelay, f3UsbWIFIDonglePortEntityIndex=f3UsbWIFIDonglePortEntityIndex, f3IrigRelayOutputPortIfIndex=f3IrigRelayOutputPortIfIndex, cmEthernetNetPortAssociatedTdmEntity=cmEthernetNetPortAssociatedTdmEntity, todPps16PortGroupRowStatus=todPps16PortGroupRowStatus, cmEthernetNetPortXdslParamEntry=cmEthernetNetPortXdslParamEntry, CmOamDiscoveryState=CmOamDiscoveryState, f3FpQosPolicerGroup=f3FpQosPolicerGroup, cmEthernetNetPortCpdV2IslDispType=cmEthernetNetPortCpdV2IslDispType, cmFlowPointCpdProfileGARPDispType=cmFlowPointCpdProfileGARPDispType, cmEthernetAccPortOamLocalUnidirSupportEnabled=cmEthernetAccPortOamLocalUnidirSupportEnabled, cmTrafficAclSrcIpV4Addr=cmTrafficAclSrcIpV4Addr, cmPortCpdProfileLANBridgesDispType=cmPortCpdProfileLANBridgesDispType, cmQosShaperWredYellowMinQueueThreshold=cmQosShaperWredYellowMinQueueThreshold, cmFlowPointWfqOutPriority=cmFlowPointWfqOutPriority, bits8PortGroupEntry=bits8PortGroupEntry, ConstellationType=ConstellationType, cmQosPolicerProfileCIRLo=cmQosPolicerProfileCIRLo, todPps16PortGroupAlias=todPps16PortGroupAlias, cmEthernetNetPortCpdV2VtpDispType=cmEthernetNetPortCpdV2VtpDispType, f3SatelliteElevation=f3SatelliteElevation, f3IrigOutputUnitPortEntityIndex=f3IrigOutputUnitPortEntityIndex, cmEthernetTrafficPortLoopbackConfig=cmEthernetTrafficPortLoopbackConfig, cmEthernetTrafficPortClbEntry=cmEthernetTrafficPortClbEntry, ocnStmExpectedTrailTrace=ocnStmExpectedTrailTrace, cmFlowRefN2APrioMapProfile=cmFlowRefN2APrioMapProfile, cmEthernetTrafficPortSfpLaserWaveLength=cmEthernetTrafficPortSfpLaserWaveLength, e1t1FrameFormat=e1t1FrameFormat, f3IrigRs422OutputPortAlias=f3IrigRs422OutputPortAlias, cmEthernetAccPortCpdV2PtpUntaggedDispType=cmEthernetAccPortCpdV2PtpUntaggedDispType, cmEthernetNetPortCpdFilterDescr=cmEthernetNetPortCpdFilterDescr, cmEthernetNetPortOamRemoteLinkEventsEnabled=cmEthernetNetPortOamRemoteLinkEventsEnabled, GMetroAutoTuningMode=GMetroAutoTuningMode, cmEthernetAccPortLoopbackTestReflectorIPv4Address=cmEthernetAccPortLoopbackTestReflectorIPv4Address, cmFlowCpdV2LACPDispType=cmFlowCpdV2LACPDispType, f3FpQosPolicerEIRMaxLo=f3FpQosPolicerEIRMaxLo, cmNetPortExtBcastRateLimitSpeedHi=cmNetPortExtBcastRateLimitSpeedHi, cmEthernetAccPortCpdV2PauseDispType=cmEthernetAccPortCpdV2PauseDispType, cmNetPortPcpDEEncIndex=cmNetPortPcpDEEncIndex, cmEthernetNetPortJdsuExtEntry=cmEthernetNetPortJdsuExtEntry, cmQosPolicerProfileTable=cmQosPolicerProfileTable, cmEthernetNetPortLinkLossFwdRemoteLinkIds=cmEthernetNetPortLinkLossFwdRemoteLinkIds, f3GPSReceiverPortTimeAdvanceValue=f3GPSReceiverPortTimeAdvanceValue, cmEthernetNetPortOamDiscoveryState=cmEthernetNetPortOamDiscoveryState, cmPrioMapV2PrioMappingCOSIndex=cmPrioMapV2PrioMappingCOSIndex, cmEthernetAccPortOamAdminDisposition=cmEthernetAccPortOamAdminDisposition, cmFlowEntry=cmFlowEntry, cmFlowTrafficType=cmFlowTrafficType, cmFlowRefConnectGuardFlowList=cmFlowRefConnectGuardFlowList, cmEthernetNetPortPppoeOuterVlanControl=cmEthernetNetPortPppoeOuterVlanControl, f3Usb3GDCNMuxOperationalMode=f3Usb3GDCNMuxOperationalMode, stsVcPathSecondaryState=stsVcPathSecondaryState, BitsPortLineType=BitsPortLineType, f3FlowPointCpdV2Index=f3FlowPointCpdV2Index, cmNetPortExtBcastRateLimitEnabled=cmNetPortExtBcastRateLimitEnabled, cmEthernetNetPortClbEntry=cmEthernetNetPortClbEntry, f3NetPortQosShaperWredYellowMinQueueThreshold=f3NetPortQosShaperWredYellowMinQueueThreshold, f3AclRuleSrcIpv6Address=f3AclRuleSrcIpv6Address, f3PulsePerSecondPortClockClass=f3PulsePerSecondPortClockClass, cmEthernetTrafficPortCpdV2BridgeGroupDispType=cmEthernetTrafficPortCpdV2BridgeGroupDispType, cmEthernetNetPortCpdV2UdldDispType=cmEthernetNetPortCpdV2UdldDispType, stsVcPathBerExcThreshold=stsVcPathBerExcThreshold, cmQosPolicerV2AdminState=cmQosPolicerV2AdminState, cmEthernetTrafficPortPcpDEEncEntry=cmEthernetTrafficPortPcpDEEncEntry, f3FpQosPolicerIndex=f3FpQosPolicerIndex, f3FlowPointCpdV2UplinkFastDispType=f3FlowPointCpdV2UplinkFastDispType, cmEthernetTrafficPortLaserFrequency=cmEthernetTrafficPortLaserFrequency, cmQosShaperV2OperationalState=cmQosShaperV2OperationalState, todPps16PortGroupOperationalState=todPps16PortGroupOperationalState, f3SatelliteIndex=f3SatelliteIndex, ocnStmExpectedQL=ocnStmExpectedQL, f3IrigOutputUnitPortDigitalVoltage=f3IrigOutputUnitPortDigitalVoltage, cmEthernetAccPortCpdMacAddressMatch=cmEthernetAccPortCpdMacAddressMatch, cmNetPortEncapPcpDEPairTable=cmNetPortEncapPcpDEPairTable, f3IrigOutputUnitPortAlias=f3IrigOutputUnitPortAlias, cmEthernetNetPortMediaType=cmEthernetNetPortMediaType, cmEthernetTrafficPortOuterTagTpidOverride=cmEthernetTrafficPortOuterTagTpidOverride, f3PulsePerSecondPortTimeSource=f3PulsePerSecondPortTimeSource, cmEthernetTrafficPortMcastRateLimitSpeedLo=cmEthernetTrafficPortMcastRateLimitSpeedLo, f3Usb3GDCNPortCurrentPukCode=f3Usb3GDCNPortCurrentPukCode, cmFlowCpdV2Table=cmFlowCpdV2Table, cmEthernetTrafficPortMode=cmEthernetTrafficPortMode, cmFlowPointCpdProfileMac02DispType=cmFlowPointCpdProfileMac02DispType, cmEthernetTrafficPortCpdV2GARPDispType=cmEthernetTrafficPortCpdV2GARPDispType, cmEthernetNetPortSfpIdentifierValue=cmEthernetNetPortSfpIdentifierValue, cmEthernetAccPortCpdV2Mac08DispType=cmEthernetAccPortCpdV2Mac08DispType, f3AclRulePriorityControl=f3AclRulePriorityControl, f3GPSReceiverPortFirmwareUpgradePercent=f3GPSReceiverPortFirmwareUpgradePercent, f3GPSReceiverPortHorizontalAccuracy=f3GPSReceiverPortHorizontalAccuracy)
mibBuilder.exportSymbols("CM-FACILITY-MIB", f3NetPortQosShaperWredYellowDropProbability=f3NetPortQosShaperWredYellowDropProbability, f3PulsePerSecondPortOperationalState=f3PulsePerSecondPortOperationalState, cmNetPortExpDEDecInPriority=cmNetPortExpDEDecInPriority, cmMPFlowRowStatus=cmMPFlowRowStatus, cmNetPortIpPrecDEDecIndex=cmNetPortIpPrecDEDecIndex, stsVcPathInsertingAIS=stsVcPathInsertingAIS, sciPortIndex=sciPortIndex, cmEncapFlowPointStorageType=cmEncapFlowPointStorageType, cmFlowCpdV2Index=cmFlowCpdV2Index, cmQosFlowPolicerEIRHi=cmQosFlowPolicerEIRHi, f3EnvelopeAssocPolicerTable=f3EnvelopeAssocPolicerTable, todPps16PortGroupTODSource=todPps16PortGroupTODSource, cmAccPortQosShaperWredGreenDropProbability=cmAccPortQosShaperWredGreenDropProbability, cmEthernetNetPortPppoeInnerVlanControl=cmEthernetNetPortPppoeInnerVlanControl, cmFlowPointMaximumBWLo=cmFlowPointMaximumBWLo, cmPortCpdProfileL2PTDispType=cmPortCpdProfileL2PTDispType, e1t1LoopbackProfile=e1t1LoopbackProfile, cmEthernetNetPortAssumedQL=cmEthernetNetPortAssumedQL, cmTrafficAclDstIpV6Addr=cmTrafficAclDstIpV6Addr, cmFacilityCompliances=cmFacilityCompliances, f3Usb3GDCNPortPINLeftChances=f3Usb3GDCNPortPINLeftChances, f3IrigOpticalOutputPortAdminState=f3IrigOpticalOutputPortAdminState, cmElineFlowStorageType=cmElineFlowStorageType, f3GPSReceiverPortElevationMask=f3GPSReceiverPortElevationMask, ccInputPortAdminState=ccInputPortAdminState, cmQosShaperV2RowStatus=cmQosShaperV2RowStatus, cmEthernetTrafficPortPcpDEDecIndex=cmEthernetTrafficPortPcpDEDecIndex, f3AclRuleSrcPortLowLimit=f3AclRuleSrcPortLowLimit, cmNetPortExpDEEncEntry=cmNetPortExpDEEncEntry, TrafficPortDeleteEntitiesAction=TrafficPortDeleteEntitiesAction, cmEthernetAccPortCpdV2Mac02DispType=cmEthernetAccPortCpdV2Mac02DispType, ccInputPortOperationalState=ccInputPortOperationalState, f3NetPortQosShaperTable=f3NetPortQosShaperTable, f3Usb3GDCNPortDNS2=f3Usb3GDCNPortDNS2, cmEthernetTrafficPortLinkLossFwdTriggerTypes=cmEthernetTrafficPortLinkLossFwdTriggerTypes, cmEthernetAccPortCpdV2VlanBridgeDispType=cmEthernetAccPortCpdV2VlanBridgeDispType, cmQosFlowPolicerColorMode=cmQosFlowPolicerColorMode, cmFlowPointCpdProfileTable=cmFlowPointCpdProfileTable, ccInputPortTable=ccInputPortTable, VDSLProfileFields=VDSLProfileFields, bits8PortGroupLineBuildOut=bits8PortGroupLineBuildOut, stsVcPathLowOrderPathType=stsVcPathLowOrderPathType, cmEthernetNetPortXdslDsLineAttenuation=cmEthernetNetPortXdslDsLineAttenuation, e1t1LoopbackStatus=e1t1LoopbackStatus, f3AclRuleDstIpv6AddressControl=f3AclRuleDstIpv6AddressControl, bitsPortSignalFrequency=bitsPortSignalFrequency, cmNetPortEncapPcpDEEncTable=cmNetPortEncapPcpDEEncTable, cmEthernetNetPortSfpSerialNumber=cmEthernetNetPortSfpSerialNumber, cmFlowSecureStateList=cmFlowSecureStateList, EfIdentificationType=EfIdentificationType, cmEthernetTrafficPortCpdV2PvstpPlusDispType=cmEthernetTrafficPortCpdV2PvstpPlusDispType, cmEthernetNetPortMTU=cmEthernetNetPortMTU, cmFlowCpdMacAddressMatch=cmFlowCpdMacAddressMatch, cmQosFlowPolicerCBS=cmQosFlowPolicerCBS, f3NetPortQosShaperCOS=f3NetPortQosShaperCOS, cmEthernetAccPortAfpType=cmEthernetAccPortAfpType, f3GPSReceiverPortLocationMode=f3GPSReceiverPortLocationMode, ccGroupEntityIndex=ccGroupEntityIndex, cmQosShaperDirection=cmQosShaperDirection, CmActiveControlProtocolsType=CmActiveControlProtocolsType, cmNetPortExpDEEncIndex=cmNetPortExpDEEncIndex, cmEncapFlowPointCircuitName=cmEncapFlowPointCircuitName, bits8PortGroupGroup=bits8PortGroupGroup, cmFlowPointEfIdentificationFields=cmFlowPointEfIdentificationFields, f3NetPortQosShaperDirection=f3NetPortQosShaperDirection, f3AclRulePriorityLowLimit=f3AclRulePriorityLowLimit, XDSLCarrierSet=XDSLCarrierSet, cmTrafficAclProtocolType=cmTrafficAclProtocolType, f3FpQosPolicerOperationalState=f3FpQosPolicerOperationalState, cmPortCpdProfilePauseDispType=cmPortCpdProfilePauseDispType, ocnStmHighOrderPathType=ocnStmHighOrderPathType, ieee1588EthernetPortMediaType=ieee1588EthernetPortMediaType, ocnStmTxTrailTrace=ocnStmTxTrailTrace, f3Usb3GDCNPortNetMask=f3Usb3GDCNPortNetMask, cmEthernetNetPortXdslActualLinkRateUpStream=cmEthernetNetPortXdslActualLinkRateUpStream, cmEthernetTrafficPortNegotiatedSpeed=cmEthernetTrafficPortNegotiatedSpeed, cmEthernetNetPortCpdV2Mac03DispType=cmEthernetNetPortCpdV2Mac03DispType, DeiOuterTagType=DeiOuterTagType, IrigTimeCode=IrigTimeCode, cmPortCpdProfileEfmOamDispType=cmPortCpdProfileEfmOamDispType, cmEthernetNetPortCpdV2Mac01DispType=cmEthernetNetPortCpdV2Mac01DispType, f3EthernetTrafficPortExpDEDecEntry=f3EthernetTrafficPortExpDEDecEntry, cmEthernetNetPortCpdV2L2PTTunnelMac=cmEthernetNetPortCpdV2L2PTTunnelMac, f3FlowPointCpdV2Mac01DispType=f3FlowPointCpdV2Mac01DispType, cmPrioMapV2IngressPrioMappingTable=cmPrioMapV2IngressPrioMappingTable, cmMPFlowGroup=cmMPFlowGroup, cmFlowTable=cmFlowTable, vtVcPathRxSignalLabel=vtVcPathRxSignalLabel, e1t1InterfaceGroup=e1t1InterfaceGroup, cmNetPortPcpDEDecDropEligible=cmNetPortPcpDEDecDropEligible, f3AclRuleTcpFlagsControl=f3AclRuleTcpFlagsControl, f3NetPortQosShaperIndex=f3NetPortQosShaperIndex, f3UsbWIFIDonglePortEncryption=f3UsbWIFIDonglePortEncryption, cmEthernetAccPortCpdMacAddressMask=cmEthernetAccPortCpdMacAddressMask, cmAccPortQosShaperSoamEIRHi=cmAccPortQosShaperSoamEIRHi, cmFlowPointCpdProfileMac09DispType=cmFlowPointCpdProfileMac09DispType, cmEthernetTrafficPortExpDEPairsAction=cmEthernetTrafficPortExpDEPairsAction, cmEthernetTrafficPortCpdEntry=cmEthernetTrafficPortCpdEntry, e3t3RemoteLoopbackRequest=e3t3RemoteLoopbackRequest, cmEthernetNetPortCpdEthertype=cmEthernetNetPortCpdEthertype, cmNetPortIpPrecDEDecEntry=cmNetPortIpPrecDEDecEntry, cmNetPortIpPrecDEDropEligiblePrio=cmNetPortIpPrecDEDropEligiblePrio, cmAccPortPcpDEDecDropEligible=cmAccPortPcpDEDecDropEligible, vtVcPathBerExcThreshold=vtVcPathBerExcThreshold, cmQosShaperWredYellowMaxQueueThreshold=cmQosShaperWredYellowMaxQueueThreshold, cmEthernetAccPortDiagnosePair2Cond=cmEthernetAccPortDiagnosePair2Cond, f3EthernetTrafficPortExpDeGroup=f3EthernetTrafficPortExpDeGroup, f3GPSReceiverPortSpoofingPpsDifference=f3GPSReceiverPortSpoofingPpsDifference, TxDeiAction=TxDeiAction, cmQosShaperCIRHi=cmQosShaperCIRHi, CmOamAdminState=CmOamAdminState, DynamicModelType=DynamicModelType, cmEthernetTrafficPortDiagnoseAutoNegCond=cmEthernetTrafficPortDiagnoseAutoNegCond, cmFlowPointCTagControl=cmFlowPointCTagControl, cmTrafficPortQosShaperCIRHi=cmTrafficPortQosShaperCIRHi, cmEthernetTrafficPortDeiEnable=cmEthernetTrafficPortDeiEnable, cmEthernetAccPortSSMRemoteMacAddress=cmEthernetAccPortSSMRemoteMacAddress, cmEthernetTrafficPortInnerVlanLoopbackMask=cmEthernetTrafficPortInnerVlanLoopbackMask, cmEthernetAccPortJdsuExtTable=cmEthernetAccPortJdsuExtTable, cmTrafficAclTcpUdpSrcPortNum=cmTrafficAclTcpUdpSrcPortNum, cmFlowCpdV2Mac06DispType=cmFlowCpdV2Mac06DispType, cmEthernetNetPortLinkLossFwdActive=cmEthernetNetPortLinkLossFwdActive, cmEthernetAccPortCpdV2Mac0CDispType=cmEthernetAccPortCpdV2Mac0CDispType, cmQosPolicerV2PolicingEnabled=cmQosPolicerV2PolicingEnabled, ocnStmSfpVendorName=ocnStmSfpVendorName, cmEthernetTrafficPortCpdV2Mac09DispType=cmEthernetTrafficPortCpdV2Mac09DispType, PsePowerLevel=PsePowerLevel, cmEthernetAccPortCpdV2PvstpPlusDispType=cmEthernetAccPortCpdV2PvstpPlusDispType, cmFlowPointEfRateThresholdLo=cmFlowPointEfRateThresholdLo, cmTrafficAclTcpUdpDstPortEnabled=cmTrafficAclTcpUdpDstPortEnabled, f3FlowPointCpdV2PagpDispType=f3FlowPointCpdV2PagpDispType, cmEthernetNetPortCpdEthertypeMask=cmEthernetNetPortCpdEthertypeMask, clk16PortGroupDirection=clk16PortGroupDirection, cmNetPortIpPrecDEEncDropEligiblePrio=cmNetPortIpPrecDEEncDropEligiblePrio, cmEthernetNetPortSfpLaserWaveLength=cmEthernetNetPortSfpLaserWaveLength, cmEthernetFlowPointCpdTable=cmEthernetFlowPointCpdTable, cmFlowPointCpdProfileMac04DispType=cmFlowPointCpdProfileMac04DispType, cmFlowCpdV2PvstpPlusDispType=cmFlowCpdV2PvstpPlusDispType, cmEthernetAccPortCpdV2Mac01DispType=cmEthernetAccPortCpdV2Mac01DispType, cmNetPortEncapPcpDEDropEligiblePrio=cmNetPortEncapPcpDEDropEligiblePrio, vtVcPathOperationalState=vtVcPathOperationalState, cmEthernetTrafficPortRxSsmQL=cmEthernetTrafficPortRxSsmQL, cmEthernetAccPortSfpReach=cmEthernetAccPortSfpReach, TrailTraceFormat=TrailTraceFormat, cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl=cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl, F3Usb3GDCNPINCodeActionType=F3Usb3GDCNPINCodeActionType, cmEthernetTrafficPortSfpTxPowerLevel=cmEthernetTrafficPortSfpTxPowerLevel, cmEthernetTrafficPortBcastRateLimitEnabled=cmEthernetTrafficPortBcastRateLimitEnabled, cmEthernetAccPortJumboFramesEnabled=cmEthernetAccPortJumboFramesEnabled, cmPortCpdProfileMac07DispType=cmPortCpdProfileMac07DispType, cmEthernetAccPortOamAdminState=cmEthernetAccPortOamAdminState, cmFlowPointCpdProfileMac0EDispType=cmFlowPointCpdProfileMac0EDispType, cmEthernetNetPortDiagnoseAutoNegCond=cmEthernetNetPortDiagnoseAutoNegCond, cmFlowPointUsePortPrioMapProfile=cmFlowPointUsePortPrioMapProfile, cmPethPsePortExtIndex=cmPethPsePortExtIndex, cmFlowPointElmiEvcIdentifier=cmFlowPointElmiEvcIdentifier, f3EthernetTrafficPortExpDEPairEntry=f3EthernetTrafficPortExpDEPairEntry, cmFlowCTagVlanPriority=cmFlowCTagVlanPriority, cmEthernetTrafficPortOamLocalMaxPDUSize=cmEthernetTrafficPortOamLocalMaxPDUSize, cmFlowPointEfRateThresholdHi=cmFlowPointEfRateThresholdHi, cmElineFlowFP2=cmElineFlowFP2, f3Usb3GDCNPortStorageType=f3Usb3GDCNPortStorageType, cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl=cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl, cmMPFlowLearningConfigAction=cmMPFlowLearningConfigAction, cmEthernetAccPortCpdV2GVRPDispType=cmEthernetAccPortCpdV2GVRPDispType, cmFlowAdminState=cmFlowAdminState, SciSignalMode=SciSignalMode, cmEthernetNetPortJDSULoopbackVlan=cmEthernetNetPortJDSULoopbackVlan, cmEthernetNetPortCpdV2Entry=cmEthernetNetPortCpdV2Entry, vtVcPathParentIfIndex=vtVcPathParentIfIndex, f3IrigOutputGroupEntry=f3IrigOutputGroupEntry, f3AclRuleSrcIpv4AddressHighLimit=f3AclRuleSrcIpv4AddressHighLimit, cmEthernetTrafficPortLinkLossFwdSignalType=cmEthernetTrafficPortLinkLossFwdSignalType, cmEthernetTrafficPortServiceType=cmEthernetTrafficPortServiceType, cmEthernetNetPortOamAdminDisposition=cmEthernetNetPortOamAdminDisposition, f3FlowPointCpdV2Mac09DispType=f3FlowPointCpdV2Mac09DispType, cmEthernetTrafficPortMaxMpFpNum=cmEthernetTrafficPortMaxMpFpNum, cmNetPortEncapPcpDEEncEntry=cmNetPortEncapPcpDEEncEntry, cmEthernetTrafficPortCpdV2Mac0CDispType=cmEthernetTrafficPortCpdV2Mac0CDispType, cmPrioMapV2IngressPrioMappingInPriority=cmPrioMapV2IngressPrioMappingInPriority, f3NetPortQosShaperSoamCIRLo=f3NetPortQosShaperSoamCIRLo, f3Usb3GDCNPortDailNumber=f3Usb3GDCNPortDailNumber, cmEthernetAccPortPortVlanPriority=cmEthernetAccPortPortVlanPriority, cmEthernetTrafficPortCpdV2LANBridgesDispType=cmEthernetTrafficPortCpdV2LANBridgesDispType, cmFlowRefPrioMapProfile=cmFlowRefPrioMapProfile, cmEthernetNetPortLinkLossFwdSignalType=cmEthernetNetPortLinkLossFwdSignalType, cmEthernetNetPortPppoeInnerVlanPriority=cmEthernetNetPortPppoeInnerVlanPriority, cmPrioMapV2PrioMappingCOSEntry=cmPrioMapV2PrioMappingCOSEntry, cmEthernetNetPortOamEnabled=cmEthernetNetPortOamEnabled, cmPortCpdProfilePvstpPlusDispType=cmPortCpdProfilePvstpPlusDispType, cmFlowA2NBroadcastRateLimitHi=cmFlowA2NBroadcastRateLimitHi, cmEthernetAccPortLinkLossFwdTriggerTypes=cmEthernetAccPortLinkLossFwdTriggerTypes, cmNetPortPrioMapIndex=cmNetPortPrioMapIndex, cmEthernetNetPortCpdSubtypeMask=cmEthernetNetPortCpdSubtypeMask, cmPortCpdProfileBPDUDispType=cmPortCpdProfileBPDUDispType, cmEthernetTrafficPortSyncEServiceAvailableTime=cmEthernetTrafficPortSyncEServiceAvailableTime, cmEthernetNetPortLaserFrequency=cmEthernetNetPortLaserFrequency, cmEthernetTrafficPortConfigSpeed=cmEthernetTrafficPortConfigSpeed, cmFlowCpdSubtypeMask=cmFlowCpdSubtypeMask, cmFlowCpdV2Mac08DispType=cmFlowCpdV2Mac08DispType, cmEthernetNetPortEncapPcpDEPairsAction=cmEthernetNetPortEncapPcpDEPairsAction, cmNetPortExpDEDecIndex=cmNetPortExpDEDecIndex, cmNetPortExpDEEncInPriority=cmNetPortExpDEEncInPriority, cmEthernetTrafficPortDiagnoseLpbkCond=cmEthernetTrafficPortDiagnoseLpbkCond, cmEthernetTrafficPortCpdIndex=cmEthernetTrafficPortCpdIndex, sciPortGroup=sciPortGroup, cmEthernetNetPortCpdV2Mac0BDispType=cmEthernetNetPortCpdV2Mac0BDispType, cmEthernetTrafficPortBwResourcePort=cmEthernetTrafficPortBwResourcePort, cmEthernetAccPortMediaType=cmEthernetAccPortMediaType, f3GPSReceiverPortSelfSurveyPositionAccuracy=f3GPSReceiverPortSelfSurveyPositionAccuracy, ieee1588EthernetPortSecondaryState=ieee1588EthernetPortSecondaryState, cmEthernetNetPortDiagnoseEfmLpbkCond=cmEthernetNetPortDiagnoseEfmLpbkCond, ocnStmBerExcThreshold=ocnStmBerExcThreshold, f3SatelliteTable=f3SatelliteTable, cmNetPortIpPrecDEPairIndex=cmNetPortIpPrecDEPairIndex, cmMPFlowSecondaryState=cmMPFlowSecondaryState, f3GPSReceiverPortSatMin2Threshold=f3GPSReceiverPortSatMin2Threshold, vtVcPathTable=vtVcPathTable, f3GPSReceiverPortHDOP=f3GPSReceiverPortHDOP, cmEthernetTrafficPortEgressSwapPriorityVIDEnabled=cmEthernetTrafficPortEgressSwapPriorityVIDEnabled, cmEthernetTrafficPortDiagnosePair3Cond=cmEthernetTrafficPortDiagnosePair3Cond, f3UsbWIFIDonglePortWIFIAllocatedIPEnd=f3UsbWIFIDonglePortWIFIAllocatedIPEnd, cmQosFlowPolicerEnvelopeObject=cmQosFlowPolicerEnvelopeObject, f3Usb3GDCNPortUserName=f3Usb3GDCNPortUserName, cmEthernetNetPortEntityIndex=cmEthernetNetPortEntityIndex, cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds=cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds, cmEthernetAccPortLaserIsTunable=cmEthernetAccPortLaserIsTunable, pps16PortGroupSecondaryState=pps16PortGroupSecondaryState, cmNetPortPrioMapInPriority=cmNetPortPrioMapInPriority, cmEthernetTrafficPortTDMEncapsulation=cmEthernetTrafficPortTDMEncapsulation, cmEthernetNetPortRxDeiAction=cmEthernetNetPortRxDeiAction, cmEthernetNetPortCpdV2GARPDispType=cmEthernetNetPortCpdV2GARPDispType, cmEthernetTrafficPortWfqSegmentationCOS=cmEthernetTrafficPortWfqSegmentationCOS, cmEthernetAccPortCpdV2Mac0BDispType=cmEthernetAccPortCpdV2Mac0BDispType, E1T1LineCode=E1T1LineCode, cmEthernetAccPortCpdV2IslDispType=cmEthernetAccPortCpdV2IslDispType, cmQosShaperV2AdditionalCIRLo=cmQosShaperV2AdditionalCIRLo, SynceMode=SynceMode, f3AclRuleIpV6FlowLabel=f3AclRuleIpV6FlowLabel, f3UsbWIFIDonglePortwWIFIIPNetMask=f3UsbWIFIDonglePortwWIFIIPNetMask, cmFlowPointCpdProfileLANBridgesDispType=cmFlowPointCpdProfileLANBridgesDispType, cmEthernetTrafficPortInitiateDiag=cmEthernetTrafficPortInitiateDiag, e1t1InsertingAIS=e1t1InsertingAIS, f3Usb3GDCNPortAdminState=f3Usb3GDCNPortAdminState, cmPortCpdProfileMac02DispType=cmPortCpdProfileMac02DispType, cmPortCpdProfileMac03DispType=cmPortCpdProfileMac03DispType, cmFlowPointCircuitName=cmFlowPointCircuitName, cmEthernetAccPortMDIXStatus=cmEthernetAccPortMDIXStatus, f3TimeOfDayPortAdminState=f3TimeOfDayPortAdminState, stsVcPathIndex=stsVcPathIndex, cmEthernetNetPortXdslCurVdslProfile=cmEthernetNetPortXdslCurVdslProfile, cmPortCpdProfileMac0EDispType=cmPortCpdProfileMac0EDispType, cmEthernetNetPortPppoeOuterVlanPriority=cmEthernetNetPortPppoeOuterVlanPriority, cmPrioMapV2PrioMappingPriPrioControl=cmPrioMapV2PrioMappingPriPrioControl)
mibBuilder.exportSymbols("CM-FACILITY-MIB", stsVcPathTxTrailTrace=stsVcPathTxTrailTrace, GFPEncapsulationType=GFPEncapsulationType, cmEthernetTrafficPortInnerVlanLoopback1=cmEthernetTrafficPortInnerVlanLoopback1, cmFlowCpdV2Mac0ADispType=cmFlowCpdV2Mac0ADispType, PolicerColorMode=PolicerColorMode, cmEthernetNetPortXdslUsAttainableRate=cmEthernetNetPortXdslUsAttainableRate, cmIngressPrioMapIndex=cmIngressPrioMapIndex, cmMPFlowEntry=cmMPFlowEntry, f3FpQosPolicerCIRMaxLo=f3FpQosPolicerCIRMaxLo, cmFlowCpdV2LACPMarkerDispType=cmFlowCpdV2LACPMarkerDispType, cmEthernetTrafficPortOamLocalLinkEventsEnabled=cmEthernetTrafficPortOamLocalLinkEventsEnabled, cmPortCpdProfileGVRPDispType=cmPortCpdProfileGVRPDispType, f3IrigOutputGroupIfIndex=f3IrigOutputGroupIfIndex, cmEthernetAccPortCpdIndex=cmEthernetAccPortCpdIndex, f3GPSReceiverPortServiceAvailableTime=f3GPSReceiverPortServiceAvailableTime, cmEthernetTrafficPortSSMRemoteMacAddress=cmEthernetTrafficPortSSMRemoteMacAddress, cmEthernetTrafficPortLoopbackDestMacAddress=cmEthernetTrafficPortLoopbackDestMacAddress, cmEthernetAccPortTxDeiAction=cmEthernetAccPortTxDeiAction, cmQosShaperV2EIRHi=cmQosShaperV2EIRHi, cmEthernetAccPortRxDeiAction=cmEthernetAccPortRxDeiAction, cmEthernetAccPortAutoDiagEnabled=cmEthernetAccPortAutoDiagEnabled, pethMainPseExtGroupIndex=pethMainPseExtGroupIndex, cmQosShaperV2CIRLo=cmQosShaperV2CIRLo, f3NetPortQosShaperCIRLo=f3NetPortQosShaperCIRLo, cmEthernetTrafficPortCpdV2Mac0FDispType=cmEthernetTrafficPortCpdV2Mac0FDispType, cmNetPortPrioMapEntry=cmNetPortPrioMapEntry, cmEthernetNetPortPppoeRxServiceName=cmEthernetNetPortPppoeRxServiceName, SciSignalDirection=SciSignalDirection, cmQosFlowPolicerRank=cmQosFlowPolicerRank, cmEthernetNetPortLoopbackSwapSADA=cmEthernetNetPortLoopbackSwapSADA, CmLinkLossFwdSignalType=CmLinkLossFwdSignalType, cmEthernetMgmtPortMDIXStatus=cmEthernetMgmtPortMDIXStatus, cmTrafficAclSrcMacAddr=cmTrafficAclSrcMacAddr, ocnStmSfpName=ocnStmSfpName, f3TimeOfDayPortIndex=f3TimeOfDayPortIndex, cmFlowA2NCombinedRateLimitControl=cmFlowA2NCombinedRateLimitControl, f3IrigRs422OutputPortIndex=f3IrigRs422OutputPortIndex, vtVcPathSecondaryState=vtVcPathSecondaryState, pps16PortGroupGroup=pps16PortGroupGroup, cmPrioMapV2PrioMappingCOSOuterTagPri=cmPrioMapV2PrioMappingCOSOuterTagPri, cmEthernetAccPortCpdV2VtpDispType=cmEthernetAccPortCpdV2VtpDispType, cmEthernetAccPortClbEnabled=cmEthernetAccPortClbEnabled, cmEthernetAccPortLoopbackSourceMacAddress=cmEthernetAccPortLoopbackSourceMacAddress, cmEthernetNetPortPersistentLoopbackControl=cmEthernetNetPortPersistentLoopbackControl, cmEthernetAccPortPortVlanId=cmEthernetAccPortPortVlanId, bitsPortSquelchControl=bitsPortSquelchControl, cmEthernetTrafficPortSfpName=cmEthernetTrafficPortSfpName, stsVcPathExpectedTrailTrace=stsVcPathExpectedTrailTrace, cmQosShaperV2LowLatencyControl=cmQosShaperV2LowLatencyControl, CmEthernetSvcType=CmEthernetSvcType, cmNetPortPrioMapTable=cmNetPortPrioMapTable, f3GPSReceiverPortSatellitesUsableFlag=f3GPSReceiverPortSatellitesUsableFlag, cmEthernetAccPortOuterTagTpid=cmEthernetAccPortOuterTagTpid, cmPrioMapV2IngressPrioMappingIndex=cmPrioMapV2IngressPrioMappingIndex, f3UsbWIFIDonglePortAccessdUsers=f3UsbWIFIDonglePortAccessdUsers, cmPrioMapXTagPriority=cmPrioMapXTagPriority, cmEthernetTrafficPortJDSUControlFramesSnoopingEnabled=cmEthernetTrafficPortJDSUControlFramesSnoopingEnabled, f3FlowPointCpdV2Mac02DispType=f3FlowPointCpdV2Mac02DispType, cmEthernetAccPortLoopbackTestReflectorIPv6Address=cmEthernetAccPortLoopbackTestReflectorIPv6Address, BitsPortType=BitsPortType, cmMPFlowPointRowStatus=cmMPFlowPointRowStatus, cmEncapFlowPointSTagVlanPriority=cmEncapFlowPointSTagVlanPriority, PlugType=PlugType, cmPortCpdProfileUplinkFastDispType=cmPortCpdProfileUplinkFastDispType, cmAccPortPcpDEDecTable=cmAccPortPcpDEDecTable, todPps16PortGroupEntry=todPps16PortGroupEntry, cmPortCpdProfileUdldDispType=cmPortCpdProfileUdldDispType, cmPrioMapV2ProfileAppliedObjEntry=cmPrioMapV2ProfileAppliedObjEntry, cmEthernetTrafficPortDiagnoseTestStatus=cmEthernetTrafficPortDiagnoseTestStatus, cmNetPortEncapPcpDEDecInPriority=cmNetPortEncapPcpDEDecInPriority, cmEthernetMgmtPortMTU=cmEthernetMgmtPortMTU, cmQosFlowPolicerAssociatedShaper=cmQosFlowPolicerAssociatedShaper, BandwidthProfileMode=BandwidthProfileMode, cmEthernetNetPortXdslMode=cmEthernetNetPortXdslMode, bits8PortGroupClkIfEnabledPorts=bits8PortGroupClkIfEnabledPorts, ocnStmSfpDateOfManufacture=ocnStmSfpDateOfManufacture, clk16PortGroupRowStatus=clk16PortGroupRowStatus, cmEthernetTrafficPortTable=cmEthernetTrafficPortTable, cmAccPortQosShaperCOS=cmAccPortQosShaperCOS, cmEthernetAccPortPowerdDeviceDetection=cmEthernetAccPortPowerdDeviceDetection, PoEStatus=PoEStatus, cmAccPortExtCombinedRateLimitSpeedLo=cmAccPortExtCombinedRateLimitSpeedLo, cmEthernetAccPortIndependentShaperBW=cmEthernetAccPortIndependentShaperBW, f3AclRuleInnerVlanPcpControl=f3AclRuleInnerVlanPcpControl, cmFlowPointCpdProfileCiscoGroupDispType=cmFlowPointCpdProfileCiscoGroupDispType, stsVcPathTxSignalLabel=stsVcPathTxSignalLabel, cmEthernetNetPortReceivedQL=cmEthernetNetPortReceivedQL, cmEthernetNetPortIfIndex=cmEthernetNetPortIfIndex, cmEthernetTrafficPortLpbkConfig=cmEthernetTrafficPortLpbkConfig, cmEthernetNetPortXdslDsTxPower=cmEthernetNetPortXdslDsTxPower, FlowTagControl=FlowTagControl, f3Usb3GDCNPortMTU=f3Usb3GDCNPortMTU, cmEthernetNetPortCpdV2LLDPDispType=cmEthernetNetPortCpdV2LLDPDispType, cmFlowN2ACOSPriorityTagType=cmFlowN2ACOSPriorityTagType, e1t1EntityIndex=e1t1EntityIndex, cmEthernetTrafficPortCombinedRateLimitSpeedLo=cmEthernetTrafficPortCombinedRateLimitSpeedLo, cmEthernetNetPortLowLatencyQueuingEnabled=cmEthernetNetPortLowLatencyQueuingEnabled, e1t1TimingDomain=e1t1TimingDomain, ocnStmQLModeEnabled=ocnStmQLModeEnabled, cmPrioMapV2PrioMappingCOSTable=cmPrioMapV2PrioMappingCOSTable, cmTrafficAclVlanIdEnabled=cmTrafficAclVlanIdEnabled, cmQosShaperSoamCIRLo=cmQosShaperSoamCIRLo, cmQosShaperCIR=cmQosShaperCIR, cmEthernetTrafficPortRemoteSfpSerialNumber=cmEthernetTrafficPortRemoteSfpSerialNumber, cmEthernetNetPortAdminState=cmEthernetNetPortAdminState, bitsPortLineBuildOut=bitsPortLineBuildOut, cmQosShaperEBS=cmQosShaperEBS, cmQosFlowPolicerTable=cmQosFlowPolicerTable, f3Usb3GDCNPortRowStatus=f3Usb3GDCNPortRowStatus, cmEthernetTrafficPortLpbkIndex=cmEthernetTrafficPortLpbkIndex, cmEthernetAccPortDiagnosePair1Cond=cmEthernetAccPortDiagnosePair1Cond, f3PulsePerSecondPortDelayCompensation=f3PulsePerSecondPortDelayCompensation, f3Gps10MhzPortGroup=f3Gps10MhzPortGroup, f3PulsePerSecondPortIndex=f3PulsePerSecondPortIndex, cmEthernetTrafficPortJdsuLoopbackSrcIp=cmEthernetTrafficPortJdsuLoopbackSrcIp, cmQosFlowPolicerColorMarkingFlag=cmQosFlowPolicerColorMarkingFlag, FrequencyIdentifier=FrequencyIdentifier, cmTrafficAclIpQosTypeEnabled=cmTrafficAclIpQosTypeEnabled, f3Usb3GDCNPortRedialTimer=f3Usb3GDCNPortRedialTimer, f3AclRuleDstPortLowLimit=f3AclRuleDstPortLowLimit, cmAccPortPcpDEDropIneligiblePrio=cmAccPortPcpDEDropIneligiblePrio, cmNetPortExtCombinedRateLimitEnabled=cmNetPortExtCombinedRateLimitEnabled, f3NetPortQosShaperCBS=f3NetPortQosShaperCBS, cmEthernetNetPortSfpLinkLength=cmEthernetNetPortSfpLinkLength, cmFlowPointAclNoMatchDisposition=cmFlowPointAclNoMatchDisposition, cmEthernetTrafficPortJdsuExtEntry=cmEthernetTrafficPortJdsuExtEntry, cmEthernetTrafficPortRemoteSfpLinkLength=cmEthernetTrafficPortRemoteSfpLinkLength, cmTrafficPortQosShaperAdditionalCIRHi=cmTrafficPortQosShaperAdditionalCIRHi, cmEthernetTrafficPortGroup=cmEthernetTrafficPortGroup, gps10MHzPortInputSignalType=gps10MHzPortInputSignalType, f3FpQosShaperCOS=f3FpQosShaperCOS, cmEthernetNetPortCpdV2NearestLLDPDispType=cmEthernetNetPortCpdV2NearestLLDPDispType, f3NetPortQosShaperEIRHi=f3NetPortQosShaperEIRHi, f3PulsePerSecondPortGroup=f3PulsePerSecondPortGroup, cmPortCpdProfileMac0DDispType=cmPortCpdProfileMac0DDispType, cmEthernetTrafficPortCpdV2CdpDispType=cmEthernetTrafficPortCpdV2CdpDispType, cmMPFlowMemberTable=cmMPFlowMemberTable, cmPrioMapV2ProfileCosMapControl=cmPrioMapV2ProfileCosMapControl, e3t3RowStatus=e3t3RowStatus, f3UsbWIFIDonglePortEntry=f3UsbWIFIDonglePortEntry, stsVcPathOperationalState=stsVcPathOperationalState, f3FlowPointCpdV2L2PTDispType=f3FlowPointCpdV2L2PTDispType, f3IrigRelayOutputPortRelayOperation=f3IrigRelayOutputPortRelayOperation, cmQosShaperSecondaryState=cmQosShaperSecondaryState, cmFlowPointCpdProfileVtpDispType=cmFlowPointCpdProfileVtpDispType, todPps16PortGroupOutputFormat=todPps16PortGroupOutputFormat, f3FpQosPolicerCouplingFlag=f3FpQosPolicerCouplingFlag, f3IrigRs422OutputPortIfIndex=f3IrigRs422OutputPortIfIndex, cmAccPortPcpDEEncIndex=cmAccPortPcpDEEncIndex, cmPortCpdProfileMac01DispType=cmPortCpdProfileMac01DispType, cmEthernetTrafficPortCpdV2NonTpmrLLDPDispType=cmEthernetTrafficPortCpdV2NonTpmrLLDPDispType, cmFlowCpdV2VtpDispType=cmFlowCpdV2VtpDispType, cmEthernetMgmtPortMDIXType=cmEthernetMgmtPortMDIXType, pps16PortGroupDelayCompensation=pps16PortGroupDelayCompensation, cmAccPortQosShaperOperationalState=cmAccPortQosShaperOperationalState, cmEthernetTrafficPortWfqGroupCOS=cmEthernetTrafficPortWfqGroupCOS, cmQosShaperWredGreenMaxQueueThreshold=cmQosShaperWredGreenMaxQueueThreshold, cmFlowESFramesLossThreshold=cmFlowESFramesLossThreshold, cmFlowPointHierarchicalCosEnabled=cmFlowPointHierarchicalCosEnabled, cmEthernetTrafficPortIngressCOSPriority=cmEthernetTrafficPortIngressCOSPriority, pethMainPseEXTEntry=pethMainPseEXTEntry, neTMParamsAgingtime=neTMParamsAgingtime, cmFlowCpdV2Mac09DispType=cmFlowCpdV2Mac09DispType, bits8PortGroupSquelchQL=bits8PortGroupSquelchQL, cmNetPortEncapPcpDEDecOutPriority=cmNetPortEncapPcpDEDecOutPriority, cmPrioMapV2PrioMappingCOSInnerTagPri=cmPrioMapV2PrioMappingCOSInnerTagPri, cmAccPortQosShaperEntry=cmAccPortQosShaperEntry, cmTrafficPortQosShaperOperationalState=cmTrafficPortQosShaperOperationalState, f3AclRuleProtocolControl=f3AclRuleProtocolControl, f3FlowPointCpdV2GARPDispType=f3FlowPointCpdV2GARPDispType, f3IrigOutputGroupTable=f3IrigOutputGroupTable, sciPortAdminState=sciPortAdminState, cmEthernetAccPortSfpDateOfManufacture=cmEthernetAccPortSfpDateOfManufacture, vtVcPathExpectedSignalLabel=vtVcPathExpectedSignalLabel, cmEthernetTrafficPortCpdV2GARPGroupDispType=cmEthernetTrafficPortCpdV2GARPGroupDispType, cmEthernetTrafficPortMediaTypeAutoSelected=cmEthernetTrafficPortMediaTypeAutoSelected, f3AclRuleOuterVlanVIDHighLimit=f3AclRuleOuterVlanVIDHighLimit, gps10MHzPortOperationalState=gps10MHzPortOperationalState, cmEthernetTrafficPortIngressPrioMapMode=cmEthernetTrafficPortIngressPrioMapMode, cmNetPortIpPrecDEEncDropIneligiblePrio=cmNetPortIpPrecDEEncDropIneligiblePrio, cmEthernetAccPortLinkLossFwdEnabled=cmEthernetAccPortLinkLossFwdEnabled, cmFlowPointCpdProfileNearestLLDPDispType=cmFlowPointCpdProfileNearestLLDPDispType, f3TimeOfDayPortEntry=f3TimeOfDayPortEntry, CmAfpType=CmAfpType, cmEthernetTrafficPortOamLocalOamLoopbacksSupported=cmEthernetTrafficPortOamLocalOamLoopbacksSupported, cmEthernetTrafficPortTagFrameControl=cmEthernetTrafficPortTagFrameControl, cmFlowAutoBandwidthConfigEnabled=cmFlowAutoBandwidthConfigEnabled, cmEthernetNetPortCpdV2Table=cmEthernetNetPortCpdV2Table, f3FlowPointCpdV2Mac0DDispType=f3FlowPointCpdV2Mac0DDispType, e1t1Table=e1t1Table, cmPortCpdProfileMac0CDispType=cmPortCpdProfileMac0CDispType, cmEthernetNetPortCpdV2GMRPDispType=cmEthernetNetPortCpdV2GMRPDispType, cmEthernetAccPortLoopbackTime=cmEthernetAccPortLoopbackTime, cmEthernetNetPortWfqGroupEirHi=cmEthernetNetPortWfqGroupEirHi, cmFlowSecureBlockingEnabled=cmFlowSecureBlockingEnabled, cmEthernetTrafficPortCpdV2SSMDispType=cmEthernetTrafficPortCpdV2SSMDispType, f3FlowPointCpdV2NonTpmrLLDPDispType=f3FlowPointCpdV2NonTpmrLLDPDispType, cmEthernetTrafficPortSfpIdentifierValue=cmEthernetTrafficPortSfpIdentifierValue, cmEthernetAccPortIngressCOSPriority=cmEthernetAccPortIngressCOSPriority, XDSLStatus=XDSLStatus, f3PulsePerSecondPortIfIndex=f3PulsePerSecondPortIfIndex, cmPortCpdProfileELMIDispType=cmPortCpdProfileELMIDispType, cmEthernetNetPortCpdV2Mac0CDispType=cmEthernetNetPortCpdV2Mac0CDispType, cmFlowConfigType=cmFlowConfigType, cmFlowPointMcastAndBcastRateLimitSpeedHi=cmFlowPointMcastAndBcastRateLimitSpeedHi, cmEthernetTrafficPortSfpLaserWaveLengthPicometer=cmEthernetTrafficPortSfpLaserWaveLengthPicometer, f3AclRuleIpV6FlowLabelControl=f3AclRuleIpV6FlowLabelControl, cmElineFlowIndex=cmElineFlowIndex, cmEthernetAccPortCpdV2EfmOamDispType=cmEthernetAccPortCpdV2EfmOamDispType, ccInputPortIfIndex=ccInputPortIfIndex, cmFlowPointIndex=cmFlowPointIndex, cmEthernetTrafficPortExpectedQL=cmEthernetTrafficPortExpectedQL, f3SatelliteGnssReceiverPort=f3SatelliteGnssReceiverPort, cmQosShaperTypeIndex=cmQosShaperTypeIndex, cmNetPortPcpDEEncInPriority=cmNetPortPcpDEEncInPriority, ocnStmSfpMediaType=ocnStmSfpMediaType, cmFlowCpdTable=cmFlowCpdTable, cmEthernetAccPortDiagnoseAutoNegCond=cmEthernetAccPortDiagnoseAutoNegCond, f3GPSReceiverPortAntennaStatus=f3GPSReceiverPortAntennaStatus, cmEthernetNetPortIpPrecDEPairsAction=cmEthernetNetPortIpPrecDEPairsAction, cmQosPolicerV2StorageType=cmQosPolicerV2StorageType, cmTrafficAclDstMacAddrEnabled=cmTrafficAclDstMacAddrEnabled, cmEthernetTrafficPortJdsuExtGroup=cmEthernetTrafficPortJdsuExtGroup, cmEthernetTrafficPortOperationalState=cmEthernetTrafficPortOperationalState, cmEthernetTrafficPortPlugType=cmEthernetTrafficPortPlugType, PpsPortImpedanceMode=PpsPortImpedanceMode, cmEthernetAccPortOamLocalOamLoopbacksSupported=cmEthernetAccPortOamLocalOamLoopbacksSupported, e3t3RelatedContainerId=e3t3RelatedContainerId, cmTrafficPortQosShaperCIRLo=cmTrafficPortQosShaperCIRLo, cmEthernetAccPortCpdV2BridgeGroupDispType=cmEthernetAccPortCpdV2BridgeGroupDispType, cmQosPolicerV2ColorMarkingEnabled=cmQosPolicerV2ColorMarkingEnabled, cmEthernetTrafficPortPcpDEEncInPriority=cmEthernetTrafficPortPcpDEEncInPriority, cmEthernetNetPortIpPrecDEEncType=cmEthernetNetPortIpPrecDEEncType, cmEthernetAccPortCpdV2Mac03DispType=cmEthernetAccPortCpdV2Mac03DispType, cmQosQueueProfileREDEnabled=cmQosQueueProfileREDEnabled, gps10MHzPortClockAccuracy=gps10MHzPortClockAccuracy, f3Usb3GDCNPortHardwareVersion=f3Usb3GDCNPortHardwareVersion, cmEthernetAccPortCpdV2BridgeReservedDispType=cmEthernetAccPortCpdV2BridgeReservedDispType, f3EthernetTrafficPortExpDEEncDropIneligiblePrio=f3EthernetTrafficPortExpDEEncDropIneligiblePrio, cmEthernetNetPortSfpDateOfManufacture=cmEthernetNetPortSfpDateOfManufacture, cmFlowPointCpdProfileSSMDispType=cmFlowPointCpdProfileSSMDispType, cmEgressPrioMapEntry=cmEgressPrioMapEntry, cmEthernetNetPortOperationalState=cmEthernetNetPortOperationalState, cmMPFlowMemberFPIndex=cmMPFlowMemberFPIndex, cmEthernetTrafficPortCpdV2Mac01DispType=cmEthernetTrafficPortCpdV2Mac01DispType, cmTrafficAclVlanId=cmTrafficAclVlanId, cmEthernetNetPortClbDescr=cmEthernetNetPortClbDescr, cmEthernetTrafficPortSfpLinkLength=cmEthernetTrafficPortSfpLinkLength, cmEthernetTrafficPortRxPauseEnabled=cmEthernetTrafficPortRxPauseEnabled, cmTrafficAclRowStatus=cmTrafficAclRowStatus, f3FlowPointCpdV2NearestLLDPDispType=f3FlowPointCpdV2NearestLLDPDispType, ocnStmBerDegThreshold=ocnStmBerDegThreshold, bitsPortTransmitQL=bitsPortTransmitQL, todPps16PortGroupDelayCompensation=todPps16PortGroupDelayCompensation)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmFlowPointWfqQid=cmFlowPointWfqQid, f3Usb3GDCNPortNewPinCode=f3Usb3GDCNPortNewPinCode, cmQosFlowPolicerEntry=cmQosFlowPolicerEntry, cmPortCpdProfileGMRPDispType=cmPortCpdProfileGMRPDispType, LineBuildOut=LineBuildOut, cmFacilityObjectGroup=cmFacilityObjectGroup, cmEthernetNetPortLaserIsTunable=cmEthernetNetPortLaserIsTunable, f3AclRuleSrcIpv6AddressControl=f3AclRuleSrcIpv6AddressControl, cmNetPortExtMcastRateLimitSpeedHi=cmNetPortExtMcastRateLimitSpeedHi, cmFlowCpdV2Mac07DispType=cmFlowCpdV2Mac07DispType, E3T3Type=E3T3Type, cmQosFlowPolicerEIRMaxHi=cmQosFlowPolicerEIRMaxHi, cmTrafficAclProfileTable=cmTrafficAclProfileTable, cmPortCpdProfilePortAuthenDispType=cmPortCpdProfilePortAuthenDispType, f3IrigOpticalOutputPortIndex=f3IrigOpticalOutputPortIndex, f3UsbWIFIDonglePortIndex=f3UsbWIFIDonglePortIndex, cmEthernetNetPortMDIXStatus=cmEthernetNetPortMDIXStatus, cmFlowPointCpdProfilePagpDispType=cmFlowPointCpdProfilePagpDispType, cmEthernetAccPortLaserFrequency=cmEthernetAccPortLaserFrequency, cmEthernetTrafficPortQinQEtherType=cmEthernetTrafficPortQinQEtherType, cmFlowPointEgressOuterTagPrioMapEnabled=cmFlowPointEgressOuterTagPrioMapEnabled, f3AclRuleOperation=f3AclRuleOperation, cmNetPortIpPrecDEPairEntry=cmNetPortIpPrecDEPairEntry, cmNetPortExpDEEncDropEligiblePrio=cmNetPortExpDEEncDropEligiblePrio, ccGroupActivePorts=ccGroupActivePorts, cmEthernetTrafficPortDiagnosticMacAddress=cmEthernetTrafficPortDiagnosticMacAddress, cmQosQueueProfileName=cmQosQueueProfileName, cmQosShaperOperationalState=cmQosShaperOperationalState, cmPortCpdProfileGARPGroupDispType=cmPortCpdProfileGARPGroupDispType, bits8PortGroupActivePorts=bits8PortGroupActivePorts, f3SatelliteSVType=f3SatelliteSVType, cmPrioMapV2PrioMappingPriIndex=cmPrioMapV2PrioMappingPriIndex, ocnStmReceivedQL=ocnStmReceivedQL, cmEthernetAccPortCpdV2PtpTaggedDispType=cmEthernetAccPortCpdV2PtpTaggedDispType, cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl=cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl, cmPortCpdProfileIndex=cmPortCpdProfileIndex, f3GPSReceiverPortAdminState=f3GPSReceiverPortAdminState, cmFlowPolicingEnabled=cmFlowPolicingEnabled, f3PulsePerSecondPortEntry=f3PulsePerSecondPortEntry, cmEthernetNetPortJdsuExtTable=cmEthernetNetPortJdsuExtTable, f3EthernetTrafficPortExpDEEncEntry=f3EthernetTrafficPortExpDEEncEntry, cmEthernetAccPortN2AVlanTrunkingEnabled=cmEthernetAccPortN2AVlanTrunkingEnabled, cmEthernetAccPortCpdV2SSMDispType=cmEthernetAccPortCpdV2SSMDispType, PSENonStandardPD=PSENonStandardPD, cmEthernetNetPortCpdMacAddressMask=cmEthernetNetPortCpdMacAddressMask, cmFlowPointCpdProfileELMIDispType=cmFlowPointCpdProfileELMIDispType, e1t1RcvSensitivity=e1t1RcvSensitivity, f3AclRuleSrcPortControl=f3AclRuleSrcPortControl, cmPrioMapV2ProfileStorageType=cmPrioMapV2ProfileStorageType, cmEthernetMgmtPortMediaType=cmEthernetMgmtPortMediaType, cmEthernetAccPortCpdFilterDescr=cmEthernetAccPortCpdFilterDescr, bits8PortGroupFrameFormat=bits8PortGroupFrameFormat, cmEthernetTrafficPortLinkLossFwdEnabled=cmEthernetTrafficPortLinkLossFwdEnabled, e3t3EntityIndex=e3t3EntityIndex, cmEthernetNetPortXdslDsSNRMargin=cmEthernetNetPortXdslDsSNRMargin, cmEthernetTrafficPortOuterVlanLoopbackMask=cmEthernetTrafficPortOuterVlanLoopbackMask, bits8PortGroupLineType=bits8PortGroupLineType, cmFlowPointCpdProfileRowStatus=cmFlowPointCpdProfileRowStatus, cmFlowN2NForwardingEnabled=cmFlowN2NForwardingEnabled, cmMPFlowStorageType=cmMPFlowStorageType, cmEthernetTrafficPortTransmitQL=cmEthernetTrafficPortTransmitQL, cmAccPortPcpDEEncTable=cmAccPortPcpDEEncTable, cmTrafficAclSrcIpV6Addr=cmTrafficAclSrcIpV6Addr, f3FlowPointCpdV2Mac0ADispType=f3FlowPointCpdV2Mac0ADispType, cmEthernetTrafficPortCpdV2UplinkFastDispType=cmEthernetTrafficPortCpdV2UplinkFastDispType, cmEthernetNetPortPppoeLcpKeepAlivePeriod=cmEthernetNetPortPppoeLcpKeepAlivePeriod, cmTrafficAclProfileEntry=cmTrafficAclProfileEntry, cmEthernetNetPortCpdV2Mac09DispType=cmEthernetNetPortCpdV2Mac09DispType, e3t3CBitEnable=e3t3CBitEnable, cmEthernetNetPortPppoeParamEntry=cmEthernetNetPortPppoeParamEntry, f3NetPortQosShaperAdminState=f3NetPortQosShaperAdminState, f3Usb3GDCNPortSecondaryState=f3Usb3GDCNPortSecondaryState, f3GPSReceiverPortAlias=f3GPSReceiverPortAlias, cmQosShaperEIR=cmQosShaperEIR, e3t3FrameFormat=e3t3FrameFormat, cmEgressCOSIndex=cmEgressCOSIndex, cmFlowCpdMacAddressMask=cmFlowCpdMacAddressMask, cmEthernetTrafficPortCpdV2Mac00DispType=cmEthernetTrafficPortCpdV2Mac00DispType, f3Usb3GDCNPortVendorName=f3Usb3GDCNPortVendorName, vtVcPathTrailTraceFormat=vtVcPathTrailTraceFormat, cmPortCpdProfileGARPDispType=cmPortCpdProfileGARPDispType, cmEthernetNetPortIndex=cmEthernetNetPortIndex, f3AclRuleDstIpv6AddressPrefixLen=f3AclRuleDstIpv6AddressPrefixLen, cmElineFlowTable=cmElineFlowTable, e3t3ParentIfIndex=e3t3ParentIfIndex, cmAccPortQosShaperSoamEIRLo=cmAccPortQosShaperSoamEIRLo, ccInputPortSecondaryState=ccInputPortSecondaryState, cmTrafficAclProfileIndex=cmTrafficAclProfileIndex, gps10MHzPortEntityIndex=gps10MHzPortEntityIndex, cmTrafficPortQosShaperAdditionalCIRLo=cmTrafficPortQosShaperAdditionalCIRLo, cmEthernetAccPortCpdV2LLDPDispType=cmEthernetAccPortCpdV2LLDPDispType, f3GPSReceiverPortSpoofingLocationDifference=f3GPSReceiverPortSpoofingLocationDifference, cmEthernetNetPortPppoeRxAcName=cmEthernetNetPortPppoeRxAcName, sciPortTable=sciPortTable, cmEthernetNetPortExpDEPairsAction=cmEthernetNetPortExpDEPairsAction, cmEthernetNetPortLoopbackTime=cmEthernetNetPortLoopbackTime, f3FlowPointCpdV2PortAuthenDispType=f3FlowPointCpdV2PortAuthenDispType, cmEthernetAccPortMDIXType=cmEthernetAccPortMDIXType, cmEthernetNetPortCpdV2Mac0DDispType=cmEthernetNetPortCpdV2Mac0DDispType, cmEthernetTrafficPortRemotePlugFrequency=cmEthernetTrafficPortRemotePlugFrequency, stsVcPathTrailTraceFormat=stsVcPathTrailTraceFormat, cmFlowSTagVlanPriority=cmFlowSTagVlanPriority, cmElineFlowFP1=cmElineFlowFP1, cmEthernetNetPortCpdV2PagpDispType=cmEthernetNetPortCpdV2PagpDispType, f3NetPortQosShaperOperationalState=f3NetPortQosShaperOperationalState, cmPrioMapV2ProfileAlias=cmPrioMapV2ProfileAlias, f3IrigRs422OutputPortOperationalState=f3IrigRs422OutputPortOperationalState, cmNetPortIpPrecDEEncInPriority=cmNetPortIpPrecDEEncInPriority, f3FlowPointCpdV2LACPDispType=f3FlowPointCpdV2LACPDispType, cmEthernetTrafficPortCpdTable=cmEthernetTrafficPortCpdTable, cmFlowCpdV2CustomerLLDPDispType=cmFlowCpdV2CustomerLLDPDispType, f3EthernetTrafficPortExpDEDecIndex=f3EthernetTrafficPortExpDEDecIndex, f3IrigOutputUnitPortIfIndex=f3IrigOutputUnitPortIfIndex, cmEthernetTrafficPortRemotePlugITUCbandChannel=cmEthernetTrafficPortRemotePlugITUCbandChannel, cmEthernetTrafficPortCpdV2PtpUntaggedDispType=cmEthernetTrafficPortCpdV2PtpUntaggedDispType, cmFlowPointSTagVlanPriority=cmFlowPointSTagVlanPriority, ocnStmLoopbackTime=ocnStmLoopbackTime, f3TimeOfDayPortSquelchQL=f3TimeOfDayPortSquelchQL, ocnStmLoopbackConfig=ocnStmLoopbackConfig, cmEthernetNetPortXdslGvectorEnabled=cmEthernetNetPortXdslGvectorEnabled, stsVcPathRowStatus=stsVcPathRowStatus, cmEthernetAccPortLinkLossFwdActive=cmEthernetAccPortLinkLossFwdActive, cmEthernetAccPortCpdV2Mac00DispType=cmEthernetAccPortCpdV2Mac00DispType, cmEthernetNetPortCpdV2Mac08DispType=cmEthernetNetPortCpdV2Mac08DispType, cmFlowHCOSMgmtEnabled=cmFlowHCOSMgmtEnabled, cmOAMFlowPointVlanMemberActionVlan=cmOAMFlowPointVlanMemberActionVlan, f3NetPortQosShaperWredGreenDropProbability=f3NetPortQosShaperWredGreenDropProbability, cmTrafficAclProtocolTypeEnabled=cmTrafficAclProtocolTypeEnabled, cmAccPortExtMcastRateLimitSpeedLo=cmAccPortExtMcastRateLimitSpeedLo, cmEthernetNetPortLoopbackSourceMacAddress=cmEthernetNetPortLoopbackSourceMacAddress, f3IrigOpticalOutputPortEntry=f3IrigOpticalOutputPortEntry, cmNetPortEncapPcpDEEncDropIneligiblePrio=cmNetPortEncapPcpDEEncDropIneligiblePrio, pethMainPseExtNonStandardPD=pethMainPseExtNonStandardPD, cmQosPolicerProfileStorageType=cmQosPolicerProfileStorageType, f3Usb3GDCNPortIpAddress=f3Usb3GDCNPortIpAddress, DHCPType=DHCPType, cmFlowPointEgressShapingType=cmFlowPointEgressShapingType, cmPortCpdProfileCdpDispType=cmPortCpdProfileCdpDispType, cmFlowPointAssociatedFlowId=cmFlowPointAssociatedFlowId, e1t1Entry=e1t1Entry, e3t3InsertingAIS=e3t3InsertingAIS, cmFlowVlanMemberList=cmFlowVlanMemberList, cmQosPolicerProfileColorMode=cmQosPolicerProfileColorMode, cmPortCpdProfileMac00DispType=cmPortCpdProfileMac00DispType, f3NetPortQosShaperWfqWeight=f3NetPortQosShaperWfqWeight, cmNetPortEncapPcpDEDecIndex=cmNetPortEncapPcpDEDecIndex, cmPrioMapV2ProfileIngressCosPriority=cmPrioMapV2ProfileIngressCosPriority, todPps16PortGroupAdminState=todPps16PortGroupAdminState, PPSPhyInterfaceType=PPSPhyInterfaceType, cmEthernetTrafficPortPriorityVlanId=cmEthernetTrafficPortPriorityVlanId, cmEthernetNetPortWfqSegmentationCOS=cmEthernetNetPortWfqSegmentationCOS, cmQosFlowPolicerCIRMaxLo=cmQosFlowPolicerCIRMaxLo, cmEthernetTrafficPortLoopbackSourceMacControlEnabled=cmEthernetTrafficPortLoopbackSourceMacControlEnabled, e1t1LineCode=e1t1LineCode, cmEthernetTrafficPortCpdV2GVRPDispType=cmEthernetTrafficPortCpdV2GVRPDispType, vtVcPathLoopbackConfig=vtVcPathLoopbackConfig, cmNetPortExpDEDecDropEligible=cmNetPortExpDEDecDropEligible, CmSwapSADAType=CmSwapSADAType, cmFlowPointCpdProfilePauseDispType=cmFlowPointCpdProfilePauseDispType, cmEncapFlowPointTable=cmEncapFlowPointTable, f3GPSReceiverPortCoordinateStringAltitude=f3GPSReceiverPortCoordinateStringAltitude, UsbOperationalMode=UsbOperationalMode, DelayOption=DelayOption, e1t1RowStatus=e1t1RowStatus, f3NetPortQosShaperSoamCIRHi=f3NetPortQosShaperSoamCIRHi, PolicerAlgorithmType=PolicerAlgorithmType, cmAccPortPcpDEDecIndex=cmAccPortPcpDEDecIndex, cmEncapFlowPointEgressInnerTagPrioMapEnabled=cmEncapFlowPointEgressInnerTagPrioMapEnabled, f3AclRuleAlias=f3AclRuleAlias, SignalShape=SignalShape, cmEncapFlowPointIndex=cmEncapFlowPointIndex, cmTrafficAclSrcIpV4AddrMask=cmTrafficAclSrcIpV4AddrMask, cmFlowPointMcastRateLimitSpeedHi=cmFlowPointMcastRateLimitSpeedHi, cmPrioMapV2IngressPrioMappingCOS=cmPrioMapV2IngressPrioMappingCOS, cmPortCpdProfileMac05DispType=cmPortCpdProfileMac05DispType, cmQosShaperV2EIRLo=cmQosShaperV2EIRLo, cmEthernetNetPortOamId=cmEthernetNetPortOamId, cmFlowN2AEIRHi=cmFlowN2AEIRHi, cmEthernetTrafficPortSyncEServiceAvailablePercentage=cmEthernetTrafficPortSyncEServiceAvailablePercentage, ChannelType=ChannelType, cmEthernetTrafficPortCpdV2LLDPDispType=cmEthernetTrafficPortCpdV2LLDPDispType, bits8PortGroupIndex=bits8PortGroupIndex, cmFlowPointLoopAvoidance=cmFlowPointLoopAvoidance, trafficGroup=trafficGroup, cmQosShaperV2IngressAverageFrameSize=cmQosShaperV2IngressAverageFrameSize, cmPseEXTGroup=cmPseEXTGroup, f3GPSReceiverPortCoordinateLatitude=f3GPSReceiverPortCoordinateLatitude, cmEthernetTrafficPortOamRemoteLinkEventsEnabled=cmEthernetTrafficPortOamRemoteLinkEventsEnabled, f3Usb3GDCNPortRSSI=f3Usb3GDCNPortRSSI, cmEthernetNetPortXdslStatus=cmEthernetNetPortXdslStatus, cmIngressPrioMapTable=cmIngressPrioMapTable, cmNetPortEncapPcpDEDropIneligiblePrio=cmNetPortEncapPcpDEDropIneligiblePrio, f3TimeOfDayPortTable=f3TimeOfDayPortTable, f3GPSReceiverPortPPSGeneratedFlag=f3GPSReceiverPortPPSGeneratedFlag, f3GPSReceiverPortCoordinateAltitude=f3GPSReceiverPortCoordinateAltitude, stsVcPathGroup=stsVcPathGroup, cmEthernetTrafficPortRelatedVCG=cmEthernetTrafficPortRelatedVCG, cmQosPolicerProfileEIRHi=cmQosPolicerProfileEIRHi, cmEthernetNetPortCpdSubtype=cmEthernetNetPortCpdSubtype, cmPortCpdProfileEntry=cmPortCpdProfileEntry, cmTrafficAclDstIpV6AddrMask=cmTrafficAclDstIpV6AddrMask, cmEthernetTrafficPortLpbkInnerVlanTag=cmEthernetTrafficPortLpbkInnerVlanTag, cmPrioMapV2IngressPrioMappingEntry=cmPrioMapV2IngressPrioMappingEntry, cmNetPortExtEntry=cmNetPortExtEntry, cmEthernetAccPortOamRemoteMaxPDUSize=cmEthernetAccPortOamRemoteMaxPDUSize, cmEthernetAccPortPcpDEPairsAction=cmEthernetAccPortPcpDEPairsAction, e1t1LoopbackConfig=e1t1LoopbackConfig, f3Usb3GDCNPortTable=f3Usb3GDCNPortTable, cmFlowCpdV2Mac05DispType=cmFlowCpdV2Mac05DispType, cmEthernetNetPortOamLocalMaxPDUSize=cmEthernetNetPortOamLocalMaxPDUSize, cmPortCpdProfileRowStatus=cmPortCpdProfileRowStatus, cmTrafficAclIpQosType=cmTrafficAclIpQosType, CmDiagCableCondType=CmDiagCableCondType, f3FlowPointCpdV2ELMIDispType=f3FlowPointCpdV2ELMIDispType, cmFlowRefEoMplsPwObject=cmFlowRefEoMplsPwObject, cmFlowCpdV2UdldDispType=cmFlowCpdV2UdldDispType, cmOAMFlowPointIndex=cmOAMFlowPointIndex, cmFlowN2ACIRHi=cmFlowN2ACIRHi, cmEthernetTrafficPortLowLatencyQueuingEnabled=cmEthernetTrafficPortLowLatencyQueuingEnabled, cmEthernetTrafficPortSfpMediaType=cmEthernetTrafficPortSfpMediaType, cmEthernetNetPortOamRemoteVarRtrvsEnabled=cmEthernetNetPortOamRemoteVarRtrvsEnabled, cmFlowPointCpdProfileLldpDispType=cmFlowPointCpdProfileLldpDispType, cmEthernetTrafficPortLinkLossFwdLocalLinkId=cmEthernetTrafficPortLinkLossFwdLocalLinkId, cmEthernetTrafficPortSyncEServiceUnavailableTime=cmEthernetTrafficPortSyncEServiceUnavailableTime, cmTrafficAclProfileStorageType=cmTrafficAclProfileStorageType, cmFlowPointTable=cmFlowPointTable, f3GPSReceiverPortServiceAvailablePercentage=f3GPSReceiverPortServiceAvailablePercentage, PPPoEConnectionStatus=PPPoEConnectionStatus, cmFlowCTagMatchRxPrio=cmFlowCTagMatchRxPrio, cmTrafficPortQosShaperWfqWeight=cmTrafficPortQosShaperWfqWeight, cmEthernetTrafficPortDeleteEntitiesAction=cmEthernetTrafficPortDeleteEntitiesAction, CmLoopbackType=CmLoopbackType, cmAccPortQosShaperSoamCIRLo=cmAccPortQosShaperSoamCIRLo, f3FlowPointCpdV2GMRPDispType=f3FlowPointCpdV2GMRPDispType, cmAccPortPcpDEEncDropEligiblePrio=cmAccPortPcpDEEncDropEligiblePrio, cmNetPortPcpDEEncTable=cmNetPortPcpDEEncTable, E3T3FrameFormat=E3T3FrameFormat, f3FlowPointCpdV2SSMDispType=f3FlowPointCpdV2SSMDispType, cmEthernetAccPortSfpMediaType=cmEthernetAccPortSfpMediaType, cmFacilityConformance=cmFacilityConformance, f3FpQosPolicerColorMode=f3FpQosPolicerColorMode, f3FpQosPolicerEIRLo=f3FpQosPolicerEIRLo, e1t1LineType=e1t1LineType, cmEthernetAccPortOamId=cmEthernetAccPortOamId, cmFlowCOS=cmFlowCOS, ocnStmSfpLaserWaveLengthPicometer=ocnStmSfpLaserWaveLengthPicometer, ocnStmAssumedQL=ocnStmAssumedQL, cmElineFlowCircuitName=cmElineFlowCircuitName, cmPortCpdProfileMac06DispType=cmPortCpdProfileMac06DispType, cmEthernetTrafficPortCpdV2Index=cmEthernetTrafficPortCpdV2Index, cmIngressPrioMapCOS=cmIngressPrioMapCOS, XDSLModulationMode=XDSLModulationMode, f3IrigOpticalOutputPortAlias=f3IrigOpticalOutputPortAlias, cmQosShaperSoamEIRHi=cmQosShaperSoamEIRHi)
mibBuilder.exportSymbols("CM-FACILITY-MIB", CmEthernetDiagAction=CmEthernetDiagAction, cmFlowPointCpdProfileMac08DispType=cmFlowPointCpdProfileMac08DispType, cmEthernetNetPortOuterVlanLoopback2=cmEthernetNetPortOuterVlanLoopback2, cmEthernetTrafficPortTxSsm=cmEthernetTrafficPortTxSsm, stsVcPathIfIndex=stsVcPathIfIndex, cmNetPortPcpDEDropIneligiblePrio=cmNetPortPcpDEDropIneligiblePrio, f3GPSReceiverPortGroup=f3GPSReceiverPortGroup, cmEthernetTrafficPortEntry=cmEthernetTrafficPortEntry, cmEthernetAccPortTxDeiOuterTagType=cmEthernetAccPortTxDeiOuterTagType, cmEthernetAccPortDiagnoseEfmLpbkCond=cmEthernetAccPortDiagnoseEfmLpbkCond, cmEthernetTrafficPortLoopbackTestReflectorIPv4Address=cmEthernetTrafficPortLoopbackTestReflectorIPv4Address, cmPethPsePortExtGroupIndex=cmPethPsePortExtGroupIndex, f3IrigOutputGroupIndex=f3IrigOutputGroupIndex, f3PulsePerSecondPortImpedance=f3PulsePerSecondPortImpedance, f3Usb3GDCNPortSIMStatus=f3Usb3GDCNPortSIMStatus, cmNetPortEncapPcpDeGroup=cmNetPortEncapPcpDeGroup, cmEthernetTrafficPortEgressVlanTrunkingEnabled=cmEthernetTrafficPortEgressVlanTrunkingEnabled, f3IrigOutputGroupExtensionType=f3IrigOutputGroupExtensionType, cmPrioMapV2PrioMappingCOSValue=cmPrioMapV2PrioMappingCOSValue, f3PolicerEnvelopeStorageType=f3PolicerEnvelopeStorageType, cmEthernetNetPortMDIXType=cmEthernetNetPortMDIXType, f3TimeOfDayPortSignalDirection=f3TimeOfDayPortSignalDirection, cmOAMFlowPointEntry=cmOAMFlowPointEntry, cmFlowCpdFilterDescr=cmFlowCpdFilterDescr, f3FlowPointCpdV2UdldDispType=f3FlowPointCpdV2UdldDispType, ccGroupAlias=ccGroupAlias, cmFacilityMIB=cmFacilityMIB, cmFlowPointCTagVlanId=cmFlowPointCTagVlanId, f3NetPortQosShaperEBS=f3NetPortQosShaperEBS, cmEthernetTrafficPortCpdV2Mac07DispType=cmEthernetTrafficPortCpdV2Mac07DispType, cmTrafficAclFilterType=cmTrafficAclFilterType, cmFlowActionVlan=cmFlowActionVlan, pps16PortGroupEntry=pps16PortGroupEntry, cmEthernetNetPortDiagnosePair4Cond=cmEthernetNetPortDiagnosePair4Cond, cmEthernetAccPortClbLength=cmEthernetAccPortClbLength, cmEthernetTrafficPortRemoteSfpHardwareRevision=cmEthernetTrafficPortRemoteSfpHardwareRevision, cmEthernetTrafficPortClbIndex=cmEthernetTrafficPortClbIndex, pps16PortGroupOperationalState=pps16PortGroupOperationalState, cmEthernetNetPortCpdV2PtpTaggedDispType=cmEthernetNetPortCpdV2PtpTaggedDispType, cmTrafficPortQosShaperEntry=cmTrafficPortQosShaperEntry, cmEncapFlowPointCTagControl=cmEncapFlowPointCTagControl, cmMPFlowMemberGroup=cmMPFlowMemberGroup, bitsPortIndex=bitsPortIndex, cmEthernetAccPortInnerVlanLoopback2=cmEthernetAccPortInnerVlanLoopback2, cmEthernetAccPortCpdV2PagpDispType=cmEthernetAccPortCpdV2PagpDispType, cmEthernetTrafficPortTxDeiAction=cmEthernetTrafficPortTxDeiAction, cmQosPolicerV2Table=cmQosPolicerV2Table, cmPrioMapV2PrioMappingDscpValue=cmPrioMapV2PrioMappingDscpValue, pps16PortGroupDirection=pps16PortGroupDirection, cmEthernetNetPortSSMRemoteMacAddress=cmEthernetNetPortSSMRemoteMacAddress, F3Usb3GNetworkConnectionState=F3Usb3GNetworkConnectionState, f3UsbWIFIDonglePortRowStatus=f3UsbWIFIDonglePortRowStatus, bitsPortIfIndex=bitsPortIfIndex, f3AclRuleTcpFlags=f3AclRuleTcpFlags, cmEthernetNetPortCpdV2Mac02DispType=cmEthernetNetPortCpdV2Mac02DispType, ITUCBandChannelIdentifier=ITUCBandChannelIdentifier, f3FpQosShaperEIRHi=f3FpQosShaperEIRHi, cmFlowCpdV2ActiveControlProtocols=cmFlowCpdV2ActiveControlProtocols, cmEthernetTrafficPortOuterVlanLoopback3=cmEthernetTrafficPortOuterVlanLoopback3, cmNetPortIpPrecDEPairTable=cmNetPortIpPrecDEPairTable, cmEthernetTrafficPortLpbkStatus=cmEthernetTrafficPortLpbkStatus, cmNetPortIpPrecDEDecOutPriority=cmNetPortIpPrecDEDecOutPriority, cmEthernetAccPortCpdV2BPDUDispType=cmEthernetAccPortCpdV2BPDUDispType, cmEthernetTrafficPortPcpDEDropEligiblePrio=cmEthernetTrafficPortPcpDEDropEligiblePrio, cmMPFlowMemberEntry=cmMPFlowMemberEntry, cmEthernetNetPortCpdV2ELMIDispType=cmEthernetNetPortCpdV2ELMIDispType, f3FpQosShaperCIRHi=f3FpQosShaperCIRHi, f3FpQosPolicerCIRHi=f3FpQosPolicerCIRHi, cmEthernetNetPortXdslParamTable=cmEthernetNetPortXdslParamTable, WIFIEncryptionType=WIFIEncryptionType, cmEthernetMgmtPortConfigSpeed=cmEthernetMgmtPortConfigSpeed, f3AclRuleGroup=f3AclRuleGroup, f3FlowPointCpdV2Mac07DispType=f3FlowPointCpdV2Mac07DispType, cmPrioMapV2PrioMappingPriXTagPrio=cmPrioMapV2PrioMappingPriXTagPrio, cmNetPortExpDEPairEntry=cmNetPortExpDEPairEntry, EfIdentificationFieldType=EfIdentificationFieldType, f3NetPortQosShaperEIRLo=f3NetPortQosShaperEIRLo, f3GPSReceiverPortAntennaDelayValue=f3GPSReceiverPortAntennaDelayValue, f3FlowPointCpdV2Mac03DispType=f3FlowPointCpdV2Mac03DispType, SaBitsState=SaBitsState, cmEncapFlowPointSTagVlanId=cmEncapFlowPointSTagVlanId, cmEthernetAccPortRxDeiOuterTagType=cmEthernetAccPortRxDeiOuterTagType, cmFlowAction=cmFlowAction, cmEthernetNetPortJdsuLoopbackSrcIp=cmEthernetNetPortJdsuLoopbackSrcIp, cmFlowPointEntry=cmFlowPointEntry, cmFlowCpdV2BridgeGroupDispType=cmFlowCpdV2BridgeGroupDispType, cmPrioMapV2ProfileEgressCos=cmPrioMapV2ProfileEgressCos, cmEthernetTrafficPortRowStatus=cmEthernetTrafficPortRowStatus, ocnStmIndex=ocnStmIndex, cmEthernetTrafficPortClbLength=cmEthernetTrafficPortClbLength, cmEthernetNetPortCpdV2L2PTDispType=cmEthernetNetPortCpdV2L2PTDispType, XDSLControlChannel=XDSLControlChannel, LearningConfigAction=LearningConfigAction, e1t1AdminState=e1t1AdminState, cmPortCpdProfileIslDispType=cmPortCpdProfileIslDispType, cmElineFlowSecondaryState=cmElineFlowSecondaryState, cmFlowPointCpdProfileMac0FDispType=cmFlowPointCpdProfileMac0FDispType, cmEthernetTrafficPortLpbkInnerVlanEnabled=cmEthernetTrafficPortLpbkInnerVlanEnabled, cmNetPortExpDEEncDropIneligiblePrio=cmNetPortExpDEEncDropIneligiblePrio, cmTrafficPortQosShaperIndex=cmTrafficPortQosShaperIndex, cmFlowCpdFilterType=cmFlowCpdFilterType, cmEthernetTrafficPortSwapPriorityVID=cmEthernetTrafficPortSwapPriorityVID, cmFlowA2NEIRHi=cmFlowA2NEIRHi, cmTrafficAclDstIpV4AddrMask=cmTrafficAclDstIpV4AddrMask, gps10MHzPortIndex=gps10MHzPortIndex, cmQosFlowPolicerAdminState=cmQosFlowPolicerAdminState, cmPrioMapTable=cmPrioMapTable, cmTrafficAclStorageType=cmTrafficAclStorageType, cmPethPsePortExtAssociatedPort=cmPethPsePortExtAssociatedPort, cmTrafficAclRulesIndex=cmTrafficAclRulesIndex, cmPrioMapV2ProfileDefaultCos=cmPrioMapV2ProfileDefaultCos, cmQosShaperSoamEIRLo=cmQosShaperSoamEIRLo, cmEthernetNetPortLoopbackDestMacAddress=cmEthernetNetPortLoopbackDestMacAddress, f3GPSReceiverPortVerticalAccuracy=f3GPSReceiverPortVerticalAccuracy, cmNetPortExtCombinedRateLimitSpeedHi=cmNetPortExtCombinedRateLimitSpeedHi, bits8PortGroupTransmitQL=bits8PortGroupTransmitQL, cmEthernetTrafficPortSfpSerialNumber=cmEthernetTrafficPortSfpSerialNumber, cmPrioMapInnerTagPriority=cmPrioMapInnerTagPriority, PolicingControl=PolicingControl, BitsPortLineCode=BitsPortLineCode, cmQosFlowPolicerAlgorithm=cmQosFlowPolicerAlgorithm, cmEthernetAccPortLowLatencyQueuingEnabled=cmEthernetAccPortLowLatencyQueuingEnabled, IrigGroupExtensionType=IrigGroupExtensionType, cmEthernetTrafficPortPortVlanPriority=cmEthernetTrafficPortPortVlanPriority, cmTrafficAclSrcMacAddrEnabled=cmTrafficAclSrcMacAddrEnabled, cmEthernetAccPortInnerVlanLoopback3=cmEthernetAccPortInnerVlanLoopback3, cmEthernetNetPortCpdV2Mac00DispType=cmEthernetNetPortCpdV2Mac00DispType, f3AclRuleCOS=f3AclRuleCOS, cmEthernetTrafficPortRemoteSfpName=cmEthernetTrafficPortRemoteSfpName, f3AclRuleInnerVlanPcpLowLimit=f3AclRuleInnerVlanPcpLowLimit, cmEthernetAccPortClbEntry=cmEthernetAccPortClbEntry, cmEthernetAccPortMediaTypeAutoSelected=cmEthernetAccPortMediaTypeAutoSelected, cmEthernetNetPortCpdV2Mac04DispType=cmEthernetNetPortCpdV2Mac04DispType, cmEthernetNetPortOuterVlanLoopback3=cmEthernetNetPortOuterVlanLoopback3, cmAccPortQosShaperWfqWeight=cmAccPortQosShaperWfqWeight, ethernetNetworkPortJdsuExtGroup=ethernetNetworkPortJdsuExtGroup, cmEthernetAccPortSfpName=cmEthernetAccPortSfpName, networkElementTMParamsTable=networkElementTMParamsTable, cmEthernetNetPortInnerVlanLoopback1=cmEthernetNetPortInnerVlanLoopback1, PPSGenCondition=PPSGenCondition, cmEthernetAccPortAssumedQL=cmEthernetAccPortAssumedQL, ConstellationTypesBitMap=ConstellationTypesBitMap, cmEthernetAccPortSfpPartNumber=cmEthernetAccPortSfpPartNumber, cmEthernetTrafficPortRemoteSfpIdentifierValue=cmEthernetTrafficPortRemoteSfpIdentifierValue, cmFlowA2NCIRHi=cmFlowA2NCIRHi, SfpChannelIdentifier=SfpChannelIdentifier, cmEthernetNetPortClbLength=cmEthernetNetPortClbLength, cmEthernetAccPortShapingEnabled=cmEthernetAccPortShapingEnabled, cmEthernetAccPortJdsuExtEntry=cmEthernetAccPortJdsuExtEntry, f3AclRuleOuterVlanVIDLowLimit=f3AclRuleOuterVlanVIDLowLimit, cmEthernetTrafficPortBcastRateLimitSpeedLo=cmEthernetTrafficPortBcastRateLimitSpeedLo, f3IrigOpticalOutputPortControlField=f3IrigOpticalOutputPortControlField, cmEthernetAccPortPoEStatus=cmEthernetAccPortPoEStatus, cmEthernetNetPortDiagnoseTestTime=cmEthernetNetPortDiagnoseTestTime, vtVcPathRxTrailTrace=vtVcPathRxTrailTrace, cmEthernetAccPortExpectedQL=cmEthernetAccPortExpectedQL, cmEthernetTrafficPortAssociatedCpdProfile=cmEthernetTrafficPortAssociatedCpdProfile, gps10MHzPortIfIndex=gps10MHzPortIfIndex, cmEthernetNetPortPrioMapMode=cmEthernetNetPortPrioMapMode, f3IrigPortGroup=f3IrigPortGroup, cmNetPortExpDEDecTable=cmNetPortExpDEDecTable, f3TimeOfDayPortAlias=f3TimeOfDayPortAlias, f3GPSReceiverPortPDOP=f3GPSReceiverPortPDOP, cmFlowPointVlanMemberAction=cmFlowPointVlanMemberAction, cmNetPortPcpDEDecInPriority=cmNetPortPcpDEDecInPriority, cmFlowSESFramesLossThresholdRatio=cmFlowSESFramesLossThresholdRatio, cmNetPortPcpDEPairTable=cmNetPortPcpDEPairTable, cmTrafficPortQosShaperAssociatedQueueProfile=cmTrafficPortQosShaperAssociatedQueueProfile, cmEthernetAccPortOuterVlanLoopback3=cmEthernetAccPortOuterVlanLoopback3, cmEthernetNetPortSfpMediaType=cmEthernetNetPortSfpMediaType, cmFlowCpdEthertype=cmFlowCpdEthertype, cmEthernetAccPortSvcType=cmEthernetAccPortSvcType, cmEthernetNetPortDiagnosticMacAddress=cmEthernetNetPortDiagnosticMacAddress, cmFlowPointCpdProfileEntry=cmFlowPointCpdProfileEntry, cmEthernetTrafficPortCpdV2Mac05DispType=cmEthernetTrafficPortCpdV2Mac05DispType, cmTrafficAclRulesEntry=cmTrafficAclRulesEntry, CcPortDutyCycle=CcPortDutyCycle, cmFlowPointMaximumBWHi=cmFlowPointMaximumBWHi, cmEthernetTrafficPortCpdV2BPDUDispType=cmEthernetTrafficPortCpdV2BPDUDispType, f3AclRuleEntry=f3AclRuleEntry, cmEthernetNetPortPppoeOuterVlanEtherType=cmEthernetNetPortPppoeOuterVlanEtherType, cmNetPortIpPrecDEDecDropEligible=cmNetPortIpPrecDEDecDropEligible, cmQosFlowPolicerIndex=cmQosFlowPolicerIndex, cmEthernetAccPortOamRemoteOamLoopbacksSupported=cmEthernetAccPortOamRemoteOamLoopbacksSupported, f3IrigOpticalOutputPortEntityIndex=f3IrigOpticalOutputPortEntityIndex, cmEthernetTrafficPortIngressSwapPriorityVIDEnabled=cmEthernetTrafficPortIngressSwapPriorityVIDEnabled, cmEncapFlowPointRowStatus=cmEncapFlowPointRowStatus, cmEthernetTrafficPortIfIndex=cmEthernetTrafficPortIfIndex, f3NetPortQosShaperWredGreenMinQueueThreshold=f3NetPortQosShaperWredGreenMinQueueThreshold, f3PulsePerSecondPortPolarity=f3PulsePerSecondPortPolarity, f3FpQosPolicerAdminState=f3FpQosPolicerAdminState, cmFlowA2NMulticastRateLimitControl=cmFlowA2NMulticastRateLimitControl, f3GPSReceiverPortIndex=f3GPSReceiverPortIndex, cpdV2Group=cpdV2Group, cmEthernetNetPortExtEntry=cmEthernetNetPortExtEntry, f3TimeOfDayPortTODSource=f3TimeOfDayPortTODSource, cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl=cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl, cmEthernetTrafficPortCpdV2Mac03DispType=cmEthernetTrafficPortCpdV2Mac03DispType, cmFlowPointCpdProfileUdldDispType=cmFlowPointCpdProfileUdldDispType, cmFlowCpdV2Entry=cmFlowCpdV2Entry, cmEthernetAccPortShapedSpeedLo=cmEthernetAccPortShapedSpeedLo, cmFlowMaximumA2NBandwidthHi=cmFlowMaximumA2NBandwidthHi, f3FpQosShaperAdminState=f3FpQosShaperAdminState, cmFlowSTagMatchRxPrio=cmFlowSTagMatchRxPrio, cmOAMFlowPointVlanMemberAction=cmOAMFlowPointVlanMemberAction, todPps16PortGroupTable=todPps16PortGroupTable, cmAccPortExtMcastRateLimitSpeedHi=cmAccPortExtMcastRateLimitSpeedHi, cmEthernetTrafficPortInnerVlanLoopback2=cmEthernetTrafficPortInnerVlanLoopback2, f3PulsePerSecondPortSquelchControl=f3PulsePerSecondPortSquelchControl, stsVcPathParentIfIndex=stsVcPathParentIfIndex, cmFlowCpdV2PauseDispType=cmFlowCpdV2PauseDispType, f3FlowPointCpdV2IslDispType=f3FlowPointCpdV2IslDispType, cmTrafficAclTcpUdpSrcPortMask=cmTrafficAclTcpUdpSrcPortMask, cmEthernetAccPortReceivedQL=cmEthernetAccPortReceivedQL, f3Usb3GDCNPortPassword=f3Usb3GDCNPortPassword, CmLinkLossFwdTriggerTypes=CmLinkLossFwdTriggerTypes, f3UsbWIFIDonglePortWIFIDHCPRole=f3UsbWIFIDonglePortWIFIDHCPRole, cmEthernetAccPortDiagnosePair4Cond=cmEthernetAccPortDiagnosePair4Cond, f3IrigOutputUnitPortSecondaryState=f3IrigOutputUnitPortSecondaryState, f3GPSReceiverPortEntityIndex=f3GPSReceiverPortEntityIndex, cmNetPortPcpDEDecIndex=cmNetPortPcpDEDecIndex, PrioMapControlType=PrioMapControlType, FlowTrafficType=FlowTrafficType, cmEthernetMgmtPortAdminState=cmEthernetMgmtPortAdminState, cmEthernetAccPortLoopbackSourceMacControlEnabled=cmEthernetAccPortLoopbackSourceMacControlEnabled, cmEthernetAccPortCpdV2ELMIDispType=cmEthernetAccPortCpdV2ELMIDispType, f3GPSReceiverPortPPSGenCondition=f3GPSReceiverPortPPSGenCondition, f3Usb3GDCNPortFirmwareVersion=f3Usb3GDCNPortFirmwareVersion, VDSLProfileField=VDSLProfileField, cmEthernetTrafficPortPcpDEEncDropEligiblePrio=cmEthernetTrafficPortPcpDEEncDropEligiblePrio, f3FpQosPolicerEntry=f3FpQosPolicerEntry, cmFlowCpdV2Mac01DispType=cmFlowCpdV2Mac01DispType, f3IrigOutputGroupAlias=f3IrigOutputGroupAlias, ethernetNetworkPortGroup=ethernetNetworkPortGroup, cmTrafficPortQosShaperAdminState=cmTrafficPortQosShaperAdminState, cmEthernetTrafficPortBcastRateLimitSpeedHi=cmEthernetTrafficPortBcastRateLimitSpeedHi, f3FlowPointCpdV2Mac05DispType=f3FlowPointCpdV2Mac05DispType, cmEthernetNetPortXdslUsSNRMargin=cmEthernetNetPortXdslUsSNRMargin, cmEthernetNetPortJDSULoopbackVlanList=cmEthernetNetPortJDSULoopbackVlanList, cmEthernetMgmtPortEntityIndex=cmEthernetMgmtPortEntityIndex, cmEthernetTrafficPortPlugRelativeChannel=cmEthernetTrafficPortPlugRelativeChannel, cmQosShaperSoamCIRHi=cmQosShaperSoamCIRHi, cmQosQueueProfileBufferSize=cmQosQueueProfileBufferSize, cmEthernetTrafficPortCpdV2Mac08DispType=cmEthernetTrafficPortCpdV2Mac08DispType, cmEthernetNetPortRxDeiOuterTagType=cmEthernetNetPortRxDeiOuterTagType, cmEthernetAccPortEntityIndex=cmEthernetAccPortEntityIndex, cmIngressPrioMapEntry=cmIngressPrioMapEntry, cmEthernetNetPortCpdEntry=cmEthernetNetPortCpdEntry, e3t3SecondaryState=e3t3SecondaryState, cmEthernetAccPortSfpHardwareRevision=cmEthernetAccPortSfpHardwareRevision, cmEthernetAccPortDeiEnable=cmEthernetAccPortDeiEnable, cmQosPolicerProfileEBS=cmQosPolicerProfileEBS, cmNetPortEncapPcpDEDecDropEligible=cmNetPortEncapPcpDEDecDropEligible, cmFlowA2NCombinedRateLimitHi=cmFlowA2NCombinedRateLimitHi)
mibBuilder.exportSymbols("CM-FACILITY-MIB", f3FlowPointCpdV2VtpDispType=f3FlowPointCpdV2VtpDispType, cmEthernetMgmtPortSecondaryState=cmEthernetMgmtPortSecondaryState, cmEthernetNetPortXdslBitSwapEnabled=cmEthernetNetPortXdslBitSwapEnabled, cmEthernetAccPortLoopbackSwapSADA=cmEthernetAccPortLoopbackSwapSADA, cmPethPsePortExtTable=cmPethPsePortExtTable, e3t3Entry=e3t3Entry, cmEthernetAccPortLinkLossFwdPartnerEnabled=cmEthernetAccPortLinkLossFwdPartnerEnabled, cmEthernetNetPortCpdV2PauseDispType=cmEthernetNetPortCpdV2PauseDispType, f3FlowPointCpdV2PauseDispType=f3FlowPointCpdV2PauseDispType, f3IrigRs422OutputPortAdminState=f3IrigRs422OutputPortAdminState, cmNetPortExpDeGroup=cmNetPortExpDeGroup, f3GPSReceiverPortAGC=f3GPSReceiverPortAGC, cmPrioMapV2PrioMappingEncapInnerTagPriority=cmPrioMapV2PrioMappingEncapInnerTagPriority, cmEthernetTrafficPortCpdV2Mac0ADispType=cmEthernetTrafficPortCpdV2Mac0ADispType, cmAccPortExtBcastRateLimitSpeedHi=cmAccPortExtBcastRateLimitSpeedHi, bitsPortReceivedQL=bitsPortReceivedQL, cmEthernetTrafficPortRemoteSfpConnectorValue=cmEthernetTrafficPortRemoteSfpConnectorValue, cmEthernetNetPortCpdV2EfmOamDispType=cmEthernetNetPortCpdV2EfmOamDispType, cmEthernetAccPortA2nSwapPriorityVIDEnabled=cmEthernetAccPortA2nSwapPriorityVIDEnabled, cmFlowPointDefaultMemberEnabled=cmFlowPointDefaultMemberEnabled, f3TimeOfDayPortSquelchControl=f3TimeOfDayPortSquelchControl, f3IrigOpticalOutputPortIfIndex=f3IrigOpticalOutputPortIfIndex, bitsPortEntry=bitsPortEntry, cmEthernetNetPortPppoeOuterVlanId=cmEthernetNetPortPppoeOuterVlanId, f3UsbWIFIDonglePortSSID=f3UsbWIFIDonglePortSSID, f3TimeOfDayPortOperationalState=f3TimeOfDayPortOperationalState, cmFlowCTagControl=cmFlowCTagControl, ethernetAccessPortJdsuExtGroup=ethernetAccessPortJdsuExtGroup, TDMPathType=TDMPathType, PlugMode=PlugMode, cmEthernetNetPortLoopbackSourceMacControlEnabled=cmEthernetNetPortLoopbackSourceMacControlEnabled, cmEthernetNetPortCpdV2BPDUDispType=cmEthernetNetPortCpdV2BPDUDispType, cmFlowPointGroup=cmFlowPointGroup, cmEthernetAccPortPersistentLoopbackControl=cmEthernetAccPortPersistentLoopbackControl, cmFlowOperationalState=cmFlowOperationalState, SynceRxSsmQl=SynceRxSsmQl, cmEthernetAccPortCpdTable=cmEthernetAccPortCpdTable, bitsPortSecondaryState=bitsPortSecondaryState, cmPethPsePortExtEntry=cmPethPsePortExtEntry, bitsPortTypeIndex=bitsPortTypeIndex, cmEthernetTrafficPortCpdV2Mac06DispType=cmEthernetTrafficPortCpdV2Mac06DispType, cmAccPortPcpDEPairTable=cmAccPortPcpDEPairTable, cmFlowPointWfqGroupEirLo=cmFlowPointWfqGroupEirLo, cmTrafficAclTcpUdpDstPortMask=cmTrafficAclTcpUdpDstPortMask, cmEthernetNetPortShapingEnabled=cmEthernetNetPortShapingEnabled, cmFlowPointSTagControl=cmFlowPointSTagControl, cmFlowPointMcastAndBcastRateLimitSpeedLo=cmFlowPointMcastAndBcastRateLimitSpeedLo, cmEthernetTrafficPortOamRemoteOamLoopbacksSupported=cmEthernetTrafficPortOamRemoteOamLoopbacksSupported, gps10MHzPortSignalDirection=gps10MHzPortSignalDirection, cmEthernetNetPortOuterVlanLoopbackMask=cmEthernetNetPortOuterVlanLoopbackMask, bits8PortGroupSecondaryState=bits8PortGroupSecondaryState, pcpEncodeGroup=pcpEncodeGroup, e1t1RelatedContainerId=e1t1RelatedContainerId, trafficGroupCmHub=trafficGroupCmHub, cmFlowAutoCIRPercentage=cmFlowAutoCIRPercentage, cmEthernetTrafficPortOamLocalVarRtrvsEnabled=cmEthernetTrafficPortOamLocalVarRtrvsEnabled, cmPortCpdProfileNonTpmrLLDPDispType=cmPortCpdProfileNonTpmrLLDPDispType, cmFlowCpdDispType=cmFlowCpdDispType, f3PulsePerSecondPortClockAccuracy=f3PulsePerSecondPortClockAccuracy, ethernetNetworkPortExtGroup=ethernetNetworkPortExtGroup, f3FpQosPolicerEnvelopeObject=f3FpQosPolicerEnvelopeObject, f3EthernetTrafficPortExpDEDecOutPriority=f3EthernetTrafficPortExpDEDecOutPriority, bitsPortLineCode=bitsPortLineCode, cmFlowA2NMulticastRateLimitLo=cmFlowA2NMulticastRateLimitLo, ocnStmRxTrailTrace=ocnStmRxTrailTrace, cmAccPortPcpDEDecEntry=cmAccPortPcpDEDecEntry, ieee1588EthernetPortAdminState=ieee1588EthernetPortAdminState, cmEthernetTrafficPortRemotePlugRelativeChannel=cmEthernetTrafficPortRemotePlugRelativeChannel, f3PolicerEnvelopeTable=f3PolicerEnvelopeTable, cmEthernetNetPortMediaTypeAutoSelected=cmEthernetNetPortMediaTypeAutoSelected, cmNetPortIpPrecDEEncEntry=cmNetPortIpPrecDEEncEntry, cmEthernetAccPortOuterVlanLoopback2=cmEthernetAccPortOuterVlanLoopback2, cmEthernetAccPortLinkLossFwdRxRLDLinkIds=cmEthernetAccPortLinkLossFwdRxRLDLinkIds, cmEthernetTrafficPortPcpDEEncIndex=cmEthernetTrafficPortPcpDEEncIndex, bitsPortQLModeEnabled=bitsPortQLModeEnabled, cmAccPortExtCombinedRateLimitEnabled=cmAccPortExtCombinedRateLimitEnabled, cmElineFlowOperationalState=cmElineFlowOperationalState, cmEthernetFlowPointCpdEntry=cmEthernetFlowPointCpdEntry, CmFlowType=CmFlowType, cmFlowPointFrameFwdEnabled=cmFlowPointFrameFwdEnabled, cmEthernetTrafficPortLoopbackDestMacControlEnabled=cmEthernetTrafficPortLoopbackDestMacControlEnabled, PpsPolarity=PpsPolarity, f3FpQosShaperSecondaryState=f3FpQosShaperSecondaryState, f3AclRuleSrcPortHighLimit=f3AclRuleSrcPortHighLimit, cmQosQueueProfileIndex=cmQosQueueProfileIndex, cmEthernetTrafficPortOamRemoteVarRtrvsEnabled=cmEthernetTrafficPortOamRemoteVarRtrvsEnabled, cmEthernetNetPortSfpReach=cmEthernetNetPortSfpReach, cmEthernetNetPortSyncEEnabled=cmEthernetNetPortSyncEEnabled, CmDiagEfmOamLpbkCondType=CmDiagEfmOamLpbkCondType, f3FpQosPolicerEBS=f3FpQosPolicerEBS, sciPortRxSsmQL=sciPortRxSsmQL, cmEgressCOS=cmEgressCOS, cmFlowGuaranteedA2NBandwidthHi=cmFlowGuaranteedA2NBandwidthHi, cmEthernetAccPortDefaultCOS=cmEthernetAccPortDefaultCOS, cmFlowPointOperationalState=cmFlowPointOperationalState, cmFlowCpdV2GVRPDispType=cmFlowCpdV2GVRPDispType, gps10MHzPortSquelchControl=gps10MHzPortSquelchControl, f3PulsePerSecondPortOutputDelay=f3PulsePerSecondPortOutputDelay, cmEthernetTrafficPortSecondaryState=cmEthernetTrafficPortSecondaryState, f3Usb3GDCNPortDNS1=f3Usb3GDCNPortDNS1, cmQosShaperV2WFQWeight=cmQosShaperV2WFQWeight, cmFlowPointCpdProfilePvstpPlusDispType=cmFlowPointCpdProfilePvstpPlusDispType, f3Usb3GDCNPortIMEI=f3Usb3GDCNPortIMEI, f3AclRuleOuterVlanPcpHighLimit=f3AclRuleOuterVlanPcpHighLimit, PcpDEPairsAction=PcpDEPairsAction, cmFlowPointSplitHorizonGroupOID=cmFlowPointSplitHorizonGroupOID, f3IrigRs422OutputPortTimeCode=f3IrigRs422OutputPortTimeCode, cmEthernetTrafficPortIndex=cmEthernetTrafficPortIndex, f3GPSReceiverPortAntennaCableLength=f3GPSReceiverPortAntennaCableLength, cmEthernetAccPortCpdV2Mac04DispType=cmEthernetAccPortCpdV2Mac04DispType, f3AclRuleDstIpv6Address=f3AclRuleDstIpv6Address, cmAccPortQosShaperWredGreenMaxQueueThreshold=cmAccPortQosShaperWredGreenMaxQueueThreshold, cmEthernetNetPortCpdV2LACPDispType=cmEthernetNetPortCpdV2LACPDispType, cmNetPortEncapPcpDEDecTable=cmNetPortEncapPcpDEDecTable, cmEthernetNetPortCpdDispType=cmEthernetNetPortCpdDispType, cmEthernetTrafficPortOuterVlanLoopback2=cmEthernetTrafficPortOuterVlanLoopback2, f3GPSReceiverPortSatMin1Threshold=f3GPSReceiverPortSatMin1Threshold, stsVcPathEntry=stsVcPathEntry, f3UsbWIFIDonglePortOperationalState=f3UsbWIFIDonglePortOperationalState, cmEthernetNetPortPppoeServiceName=cmEthernetNetPortPppoeServiceName, cmEthernetAccPortOamRemoteVarRtrvsEnabled=cmEthernetAccPortOamRemoteVarRtrvsEnabled, f3FlowPointCpdV2Mac0BDispType=f3FlowPointCpdV2Mac0BDispType, cmNetPortEncapPcpDEEncIndex=cmNetPortEncapPcpDEEncIndex, cmFacilityObjects=cmFacilityObjects, cmEthernetAccPortCpdV2CiscoGroupDispType=cmEthernetAccPortCpdV2CiscoGroupDispType, f3IrigRs422OutputPortTable=f3IrigRs422OutputPortTable, f3FlowPointCpdV2VlanBridgeDispType=f3FlowPointCpdV2VlanBridgeDispType, cmEthernetAccPortCpdV2GARPDispType=cmEthernetAccPortCpdV2GARPDispType, cmEthernetAccPortDiagnoseLpbkCond=cmEthernetAccPortDiagnoseLpbkCond, CmOamMode=CmOamMode, cmEthernetTrafficPortPcpDEEncTable=cmEthernetTrafficPortPcpDEEncTable, vtVcPathGroup=vtVcPathGroup, cmQosQueueProfileStorageType=cmQosQueueProfileStorageType, cmFlowPointMcastRateLimitEnabled=cmFlowPointMcastRateLimitEnabled, cmEthernetTrafficPortInnerVlanLoopback3=cmEthernetTrafficPortInnerVlanLoopback3, f3FpQosShaperStorageType=f3FpQosShaperStorageType, f3FlowPointCpdV2BPDUDispType=f3FlowPointCpdV2BPDUDispType, cmEthernetNetPortCpdV2CustomerLLDPDispType=cmEthernetNetPortCpdV2CustomerLLDPDispType, cmEthernetNetPortTable=cmEthernetNetPortTable, cmFlowPointCpdProfileBridgeReservedDispType=cmFlowPointCpdProfileBridgeReservedDispType, pps16PortGroupIfIndex=pps16PortGroupIfIndex, pps16PortGroupAdminState=pps16PortGroupAdminState, cmAccPortQosShaperEIRHi=cmAccPortQosShaperEIRHi, cmEthernetTrafficPortMediaType=cmEthernetTrafficPortMediaType, f3GPSReceiverPortSecondaryState=f3GPSReceiverPortSecondaryState, cmEthernetTrafficPortCpdV2CustomerLLDPDispType=cmEthernetTrafficPortCpdV2CustomerLLDPDispType, cmEthernetTrafficPortPlugChannelType=cmEthernetTrafficPortPlugChannelType, ieee1588EthernetPortNegotiatedSpeed=ieee1588EthernetPortNegotiatedSpeed, cmPortCpdProfileMac09DispType=cmPortCpdProfileMac09DispType, cmQosPolicerProfileCBS=cmQosPolicerProfileCBS, cmEthernetTrafficPortAdminState=cmEthernetTrafficPortAdminState, cmEthernetTrafficPortLoopbackTime=cmEthernetTrafficPortLoopbackTime, cmEthernetTrafficPortOamLocalMode=cmEthernetTrafficPortOamLocalMode, f3AclRuleInnerVlanVIDControl=f3AclRuleInnerVlanVIDControl, f3AclRuleIndex=f3AclRuleIndex, f3GPSReceiverPortVDOP=f3GPSReceiverPortVDOP, cmTrafficPortQosShaperEIRLo=cmTrafficPortQosShaperEIRLo, f3GPSReceiverPortIfIndex=f3GPSReceiverPortIfIndex, cmEthernetTrafficPortPcpDEDropIneligiblePrio=cmEthernetTrafficPortPcpDEDropIneligiblePrio, cmMPFlowAgingTimer=cmMPFlowAgingTimer, cmEthernetNetPortOamAdminState=cmEthernetNetPortOamAdminState, e1t1LoopbackTime=e1t1LoopbackTime, f3IrigRs422OutputPortEntry=f3IrigRs422OutputPortEntry, cmPrioMapOuterTagPriority=cmPrioMapOuterTagPriority, cmEthernetTrafficPortDiagnoseEfmLpbkCond=cmEthernetTrafficPortDiagnoseEfmLpbkCond, f3AclRuleDstMacAddress=f3AclRuleDstMacAddress, cmEthernetTrafficPortPcpDEPairIndex=cmEthernetTrafficPortPcpDEPairIndex, cmFlowCpdV2Mac00DispType=cmFlowCpdV2Mac00DispType, cmFlowCircuitName=cmFlowCircuitName, cmFlowN2AEIR=cmFlowN2AEIR, cmAccPortExtRefPrioMapProfile=cmAccPortExtRefPrioMapProfile, cmMPFlowLearningEnabled=cmMPFlowLearningEnabled, bitsPortSquelchQL=bitsPortSquelchQL, cmEthernetAccPortOamRemoteMode=cmEthernetAccPortOamRemoteMode, cmQosShaperAdminState=cmQosShaperAdminState, cmFlowPointWfqGroupCOS=cmFlowPointWfqGroupCOS, cmQosFlowPolicerCouplingFlag=cmQosFlowPolicerCouplingFlag, cmEthernetAccPortCpdDispType=cmEthernetAccPortCpdDispType, f3NetPortQosShaperBufferSize=f3NetPortQosShaperBufferSize, clk16PortGroupAdminState=clk16PortGroupAdminState, f3UsbWIFIDonglePortWIFIAllocatedIPFrom=f3UsbWIFIDonglePortWIFIAllocatedIPFrom, cmOAMFlowPointSecondaryState=cmOAMFlowPointSecondaryState, vtVcPathInsertingAIS=vtVcPathInsertingAIS, cmEthernetTrafficPortMcastRateLimitEnabled=cmEthernetTrafficPortMcastRateLimitEnabled, cmEncapFlowPointCTagVlanPriority=cmEncapFlowPointCTagVlanPriority, cmEthernetAccPortDiagnoseTestStatus=cmEthernetAccPortDiagnoseTestStatus, cmFlowPointCpdProfileIslDispType=cmFlowPointCpdProfileIslDispType, f3UsbWIFIDonglePortAdminState=f3UsbWIFIDonglePortAdminState, cmFlowPointCpdProfileMac06DispType=cmFlowPointCpdProfileMac06DispType, clk16PortGroupSquelchQL=clk16PortGroupSquelchQL, f3AclRuleIpv4PriorityLowLimit=f3AclRuleIpv4PriorityLowLimit, cmPortCpdProfileDtpDispType=cmPortCpdProfileDtpDispType, f3AclRulePriorityHighLimit=f3AclRulePriorityHighLimit, bitsPortType=bitsPortType, cmAccPortExtTable=cmAccPortExtTable, f3FlowPointCpdV2EfmOamDispType=f3FlowPointCpdV2EfmOamDispType, bitsPortImpedance=bitsPortImpedance, ieee1588EthernetPortConfigSpeed=ieee1588EthernetPortConfigSpeed, cmEthernetTrafficPortWfqGroupEirHi=cmEthernetTrafficPortWfqGroupEirHi, cmFlowInnerTagPrioEnabled=cmFlowInnerTagPrioEnabled, cmEthernetTrafficPortPlugGMetroAutoTuningMode=cmEthernetTrafficPortPlugGMetroAutoTuningMode, f3FlowPointCpdV2LANBridgesDispType=f3FlowPointCpdV2LANBridgesDispType, cmFlowCpdV2EfmOamDispType=cmFlowCpdV2EfmOamDispType, f3FpQosPolicerCBS=f3FpQosPolicerCBS, cmEthernetTrafficPortReceivedQL=cmEthernetTrafficPortReceivedQL, f3FlowPointCpdV2Entry=f3FlowPointCpdV2Entry, cmQosShaperWfqWeight=cmQosShaperWfqWeight, f3GPSReceiverPortInstallationType=f3GPSReceiverPortInstallationType, cmEthernetTrafficPortPcpDEDecOutPriority=cmEthernetTrafficPortPcpDEDecOutPriority, pps16PortGroupIndex=pps16PortGroupIndex, cmEthernetNetPortPppoeParamTable=cmEthernetNetPortPppoeParamTable, cmEthernetAccPortSilentStartControl=cmEthernetAccPortSilentStartControl, cmPortCpdProfilePagpDispType=cmPortCpdProfilePagpDispType, f3IrigOutputUnitPortOperationalState=f3IrigOutputUnitPortOperationalState, f3NetPortQosShaperWredYellowMaxQueueThreshold=f3NetPortQosShaperWredYellowMaxQueueThreshold, cmTrafficAclSrcIpV6AddrMask=cmTrafficAclSrcIpV6AddrMask, cmAccPortExtBcastRateLimitSpeedLo=cmAccPortExtBcastRateLimitSpeedLo, f3AclRuleTable=f3AclRuleTable, f3GPSReceiverPortGnssSystem=f3GPSReceiverPortGnssSystem, cmFlowPointRowStatus=cmFlowPointRowStatus, cmAccPortExtEntry=cmAccPortExtEntry, cmEthernetTrafficPortMTU=cmEthernetTrafficPortMTU, f3PolicerEnvelopeGroup=f3PolicerEnvelopeGroup, cmEthernetAccPortLoopbackDestMacAddress=cmEthernetAccPortLoopbackDestMacAddress, cmQosPolicerV2AssociatedProfile=cmQosPolicerV2AssociatedProfile, cmEthernetAccPortCpdV2Mac0ADispType=cmEthernetAccPortCpdV2Mac0ADispType, cmEthernetAccPortPcpDEEncType=cmEthernetAccPortPcpDEEncType, f3IrigOutputUnitPortAdminState=f3IrigOutputUnitPortAdminState, vtVcPathLoopbackStatus=vtVcPathLoopbackStatus, f3GPSReceiverPortSpoofingPpsThreshold=f3GPSReceiverPortSpoofingPpsThreshold, cmEthernetNetPortPppoeConnStatus=cmEthernetNetPortPppoeConnStatus, bitsPortGroup=bitsPortGroup, clk16PortGroupEntry=clk16PortGroupEntry, f3AclRuleOuterVlanPcpControl=f3AclRuleOuterVlanPcpControl, CcActivePortState=CcActivePortState, cmEgressOuterTagCtrl=cmEgressOuterTagCtrl, cmQosShaperCOS=cmQosShaperCOS, cmEthernetTrafficPortLoopbackSourceMacAddress=cmEthernetTrafficPortLoopbackSourceMacAddress, cmEthernetAccPortSfpLaserWaveLength=cmEthernetAccPortSfpLaserWaveLength, ocnStmEntityIndex=ocnStmEntityIndex, cmNetPortIpPrecDEDropIneligiblePrio=cmNetPortIpPrecDEDropIneligiblePrio, cmEthernetTrafficPortCpdV2L2PTDispType=cmEthernetTrafficPortCpdV2L2PTDispType, cmFlowSTagControl=cmFlowSTagControl, f3GPSReceiverPortSpoofingLocationThreshold=f3GPSReceiverPortSpoofingLocationThreshold, f3IrigRelayOutputPortSecondaryState=f3IrigRelayOutputPortSecondaryState, CmControlProtocolDispType=CmControlProtocolDispType, cmQosPolicerProfileRowStatus=cmQosPolicerProfileRowStatus, e3t3InterfaceGroup=e3t3InterfaceGroup, cmFlowPointCpdProfileDtpDispType=cmFlowPointCpdProfileDtpDispType, XgePhyType=XgePhyType, cmEthernetNetPortCpdV2PtpUntaggedDispType=cmEthernetNetPortCpdV2PtpUntaggedDispType, cmEthernetTrafficPortLpbkTime=cmEthernetTrafficPortLpbkTime, f3AclRuleProtocolNumber=f3AclRuleProtocolNumber, pps16PortGroupRowStatus=pps16PortGroupRowStatus)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmEthernetTrafficPortLoopbackBlockingEnabled=cmEthernetTrafficPortLoopbackBlockingEnabled, cmTrafficAclTcpUdpSrcPortEnabled=cmTrafficAclTcpUdpSrcPortEnabled, f3TimeOfDayPortIfIndex=f3TimeOfDayPortIfIndex, cmEthernetNetPortOuterTagTpidOverride=cmEthernetNetPortOuterTagTpidOverride, cmEthernetTrafficPortOamRemoteUnidirSupportEnabled=cmEthernetTrafficPortOamRemoteUnidirSupportEnabled, f3AclRuleOuterVlanDeiControl=f3AclRuleOuterVlanDeiControl, cmFlowA2NCIR=cmFlowA2NCIR, f3NetPortQosShaperCIRHi=f3NetPortQosShaperCIRHi, cmFacilityCompliance=cmFacilityCompliance, ocnStmTrailTraceFormat=ocnStmTrailTraceFormat, cmEthernetAccPortQinQEtherType=cmEthernetAccPortQinQEtherType, cmOAMFlowPointCircuitName=cmOAMFlowPointCircuitName, PortState=PortState, cmPrioMapV2ProfileAppliedObjTable=cmPrioMapV2ProfileAppliedObjTable, cmFlowCpdIndex=cmFlowCpdIndex, cmEthernetTrafficPortDiagnosePair1Cond=cmEthernetTrafficPortDiagnosePair1Cond, cmNetPortPrioMapOuterTagPriority=cmNetPortPrioMapOuterTagPriority, cmEthernetAccPortTransmitQL=cmEthernetAccPortTransmitQL, cmQosShaperEntry=cmQosShaperEntry, cmEthernetAccPortSfpLinkLength=cmEthernetAccPortSfpLinkLength, cmAccPortQosShaperSecondaryState=cmAccPortQosShaperSecondaryState, EthernetPortTrafficModel=EthernetPortTrafficModel, ocnStmEoTDMMode=ocnStmEoTDMMode, cmEthernetTrafficPortLaserIsTunable=cmEthernetTrafficPortLaserIsTunable, cmEthernetNetPortTxDeiAction=cmEthernetNetPortTxDeiAction, f3UsbWIFIDonglePortIPAddress=f3UsbWIFIDonglePortIPAddress, cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl=cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl, cmNetPortPrioMapCOS=cmNetPortPrioMapCOS, bitsPortOperationalState=bitsPortOperationalState, f3EthernetTrafficPortExpDEEncDropEligiblePrio=f3EthernetTrafficPortExpDEEncDropEligiblePrio, f3IrigOutputGroupEntityIndex=f3IrigOutputGroupEntityIndex, f3EthernetTrafficPortExpDEDecDropEligible=f3EthernetTrafficPortExpDEDecDropEligible, f3AclRuleDstIpv4AddressHighLimit=f3AclRuleDstIpv4AddressHighLimit, cmFlowCpdV2LANBridgesDispType=cmFlowCpdV2LANBridgesDispType, cmEthernetTrafficPortPcpGroup=cmEthernetTrafficPortPcpGroup, pps16PortGroupTable=pps16PortGroupTable, cmEthernetTrafficPortJdsuLoopbackEnabled=cmEthernetTrafficPortJdsuLoopbackEnabled, cmPrioMapV2PrioMappingEncapOuterTagPriority=cmPrioMapV2PrioMappingEncapOuterTagPriority, cmQosShaperV2Index=cmQosShaperV2Index, cmEthernetTrafficPortCpdV2Mac0BDispType=cmEthernetTrafficPortCpdV2Mac0BDispType, cmEthernetTrafficPortCpdV2Entry=cmEthernetTrafficPortCpdV2Entry, cmEthernetAccPortWfqGroupCOS=cmEthernetAccPortWfqGroupCOS, cmMPFlowOperationalState=cmMPFlowOperationalState, cmAccPortQosShaperCIRHi=cmAccPortQosShaperCIRHi, cmEthernetNetPortXdslActualLinkRateDownStream=cmEthernetNetPortXdslActualLinkRateDownStream, cmEthernetAccPortCpdV2Mac07DispType=cmEthernetAccPortCpdV2Mac07DispType, f3GPSReceiverPortAntennaDelayType=f3GPSReceiverPortAntennaDelayType, f3PulsePerSecondPortInputRate=f3PulsePerSecondPortInputRate, cmQosQueueProfileTable=cmQosQueueProfileTable, LocationMode=LocationMode, f3FpQosShaperEntry=f3FpQosShaperEntry, cmFlowCpdV2GARPDispType=cmFlowCpdV2GARPDispType, cmFlowCpdEntry=cmFlowCpdEntry, cmQosShaperTable=cmQosShaperTable, cmAccPortPcpDEDropEligiblePrio=cmAccPortPcpDEDropEligiblePrio, cmEthernetNetPortExpDEEncType=cmEthernetNetPortExpDEEncType, cmEthernetAccPortDiagnoseResult=cmEthernetAccPortDiagnoseResult, cmFlowCpdV2CiscoGroupDispType=cmFlowCpdV2CiscoGroupDispType, f3PulsePerSecondPortEntityIndex=f3PulsePerSecondPortEntityIndex, cmEthernetTrafficPortPcpDEPairsAction=cmEthernetTrafficPortPcpDEPairsAction, cmEthernetNetPortCpdV2Mac0EDispType=cmEthernetNetPortCpdV2Mac0EDispType, cmEthernetNetPortOamRemoteMode=cmEthernetNetPortOamRemoteMode, cmEthernetNetPortWfqGroupEirLo=cmEthernetNetPortWfqGroupEirLo, f3UsbDCNPortMobileNetworkType=f3UsbDCNPortMobileNetworkType, CmDiagTestStatus=CmDiagTestStatus, cmFacilityGroups=cmFacilityGroups, cmOAMFlowPointIngressUntaggedFrameSupported=cmOAMFlowPointIngressUntaggedFrameSupported, cmEthernetNetPortLinkLossFwdTxActionType=cmEthernetNetPortLinkLossFwdTxActionType, XDSLAnnex=XDSLAnnex, f3PolicerEnvelopeEntry=f3PolicerEnvelopeEntry, f3FpQosShaperCBS=f3FpQosShaperCBS, cmEthernetAccPortInnerVlanLoopbackMask=cmEthernetAccPortInnerVlanLoopbackMask, cmEthernetAccPortCpdV2NearestLLDPDispType=cmEthernetAccPortCpdV2NearestLLDPDispType, f3PulsePerSecondPortDirection=f3PulsePerSecondPortDirection, cmEthernetNetPortEncapPcpDEEncodingType=cmEthernetNetPortEncapPcpDEEncodingType, cmQosShaperCBS=cmQosShaperCBS, cmEthernetNetPortCpdTable=cmEthernetNetPortCpdTable, E1T1FrameFormat=E1T1FrameFormat, stsVcPathExpectedSignalLabel=stsVcPathExpectedSignalLabel, stsVcPathAdminState=stsVcPathAdminState, networkElementTMParamsEntry=networkElementTMParamsEntry, cmEthernetNetPortJumboFramesEnabled=cmEthernetNetPortJumboFramesEnabled, cmPortCpdProfileTable=cmPortCpdProfileTable, f3FpQosShaperOperationalState=f3FpQosShaperOperationalState, f3FpQosShaperTable=f3FpQosShaperTable, cmFlowCpdV2Mac0FDispType=cmFlowCpdV2Mac0FDispType, ocnStmSecondaryState=ocnStmSecondaryState, cmQosShaperV2ActualEIR=cmQosShaperV2ActualEIR, cmFlowPort1=cmFlowPort1, cmEthernetNetPortLaserWDMChannel=cmEthernetNetPortLaserWDMChannel, cmEthernetTrafficPortEntityIndex=cmEthernetTrafficPortEntityIndex, f3GPSReceiverPortCoordinateLongitude=f3GPSReceiverPortCoordinateLongitude, cmFlowPointCpdProfileEfmOamDispType=cmFlowPointCpdProfileEfmOamDispType, f3FlowPointCpdV2Mac00DispType=f3FlowPointCpdV2Mac00DispType, vtVcPathAdminState=vtVcPathAdminState, cmEthernetAccPortAdminState=cmEthernetAccPortAdminState, cmQosPolicerProfileCouplingFlag=cmQosPolicerProfileCouplingFlag, cmFlowPointCpdProfileMac05DispType=cmFlowPointCpdProfileMac05DispType, f3FlowPointCpdV2Mac0CDispType=f3FlowPointCpdV2Mac0CDispType, cmFlowPointCpdProfileMac07DispType=cmFlowPointCpdProfileMac07DispType, cmEthernetTrafficPortCpdV2DtpDispType=cmEthernetTrafficPortCpdV2DtpDispType, cmEthernetNetPortDiagnosePair2Cond=cmEthernetNetPortDiagnosePair2Cond, cmNetPortExtMcastRateLimitEnabled=cmNetPortExtMcastRateLimitEnabled, cmEthernetAccPortLoopbackStatus=cmEthernetAccPortLoopbackStatus, f3EthernetTrafficPortExpDEEncInPriority=f3EthernetTrafficPortExpDEEncInPriority, cmEthernetTrafficPortAutoDiagEnabled=cmEthernetTrafficPortAutoDiagEnabled, f3FpQosPolicerCIRMaxHi=f3FpQosPolicerCIRMaxHi, cmEthernetTrafficPortRemoteSfpMediaType=cmEthernetTrafficPortRemoteSfpMediaType, e1t1OperationalState=e1t1OperationalState, f3FpQosShaperEBS=f3FpQosShaperEBS, cmEthernetNetPortSfpVendorName=cmEthernetNetPortSfpVendorName, cmFlowPointCpdProfileMac0DDispType=cmFlowPointCpdProfileMac0DDispType, f3FlowPointCpdV2Mac04DispType=f3FlowPointCpdV2Mac04DispType, cmEthernetNetPortCpdV2BridgeReservedDispType=cmEthernetNetPortCpdV2BridgeReservedDispType, cmPortCpdProfileName=cmPortCpdProfileName, cmFlowPointAssociatedAclProfile=cmFlowPointAssociatedAclProfile, cmNetPortExpDEEncTable=cmNetPortExpDEEncTable, cmFlowA2NMulticastRateLimitHi=cmFlowA2NMulticastRateLimitHi, cmEthernetTrafficPortPlugITUCbandChannel=cmEthernetTrafficPortPlugITUCbandChannel, cmQosShaperStorageType=cmQosShaperStorageType, cmFlowCpdV2ELMIDispType=cmFlowCpdV2ELMIDispType, cmEncapFlowPointRefEoMplsPwObject=cmEncapFlowPointRefEoMplsPwObject, cmEthernetNetPortExtTable=cmEthernetNetPortExtTable, BitsFrameFormat=BitsFrameFormat, cmQosShaperV2Table=cmQosShaperV2Table, cmEthernetTrafficPortLoopbackSwapSADA=cmEthernetTrafficPortLoopbackSwapSADA, cmFlowPointCpdProfileCustomerLLDPDispType=cmFlowPointCpdProfileCustomerLLDPDispType, f3Usb3GDCNPortCurrentPinCode=f3Usb3GDCNPortCurrentPinCode, cmEthernetTrafficPortDiagnoseTestTime=cmEthernetTrafficPortDiagnoseTestTime, cmQosFlowPolicerDirection=cmQosFlowPolicerDirection, cmQosFlowPolicerSecondaryState=cmQosFlowPolicerSecondaryState, cmEthernetAccPortJdsuLoopbackSrcIp=cmEthernetAccPortJdsuLoopbackSrcIp, cmEthernetNetPortCpdV2UplinkFastDispType=cmEthernetNetPortCpdV2UplinkFastDispType, bits8PortGroupSaBitDesignation=bits8PortGroupSaBitDesignation, cmEthernetAccPortJDSULoopbackVlan=cmEthernetAccPortJDSULoopbackVlan, f3GPSReceiverPortGnssTOD=f3GPSReceiverPortGnssTOD, cmNetPortExtBcastRateLimitSpeedLo=cmNetPortExtBcastRateLimitSpeedLo, cmPrioMapV2ProfileEntry=cmPrioMapV2ProfileEntry, cmEthernetNetPortXdslVdslProfile=cmEthernetNetPortXdslVdslProfile, cmEthernetTrafficPortOamEnabled=cmEthernetTrafficPortOamEnabled, ccInputPortAlias=ccInputPortAlias, f3AclRuleIpv4PriorityControl=f3AclRuleIpv4PriorityControl, cpdV2TrafficPortGroup=cpdV2TrafficPortGroup, cmEthernetNetPortOamLocalLinkEventsEnabled=cmEthernetNetPortOamLocalLinkEventsEnabled, cmQosShaperV2AdditionalCIRHi=cmQosShaperV2AdditionalCIRHi, clk16PortGroupAlias=clk16PortGroupAlias, cmFlowCpdV2DtpDispType=cmFlowCpdV2DtpDispType, f3AclRuleActive=f3AclRuleActive, f3EthernetTrafficPortExpDEDropIneligiblePrio=f3EthernetTrafficPortExpDEDropIneligiblePrio, f3GPSReceiverPortTimeAdvanceMode=f3GPSReceiverPortTimeAdvanceMode, e1t1IfIndex=e1t1IfIndex, f3FpQosShaperRowStatus=f3FpQosShaperRowStatus, f3PulsePerSecondPortTODSource=f3PulsePerSecondPortTODSource, cmQosPolicerV2SecondaryState=cmQosPolicerV2SecondaryState, cmEthernetAccPortCpdV2GARPGroupDispType=cmEthernetAccPortCpdV2GARPGroupDispType, cmEthernetAccPortIfIndex=cmEthernetAccPortIfIndex, IrigDigitalSignalVoltage=IrigDigitalSignalVoltage, cmTrafficPortQosShaperTable=cmTrafficPortQosShaperTable, f3IrigOpticalOutputPortSecondaryState=f3IrigOpticalOutputPortSecondaryState, cmEthernetAccPortDiagnosticMacAddress=cmEthernetAccPortDiagnosticMacAddress, cmEthernetAccPortOamLocalMode=cmEthernetAccPortOamLocalMode, pethPsePortExtAvailablePowerLevel=pethPsePortExtAvailablePowerLevel, cmEthernetTrafficPortOuterVlanLoopback1=cmEthernetTrafficPortOuterVlanLoopback1, cmEthernetTrafficPortExtEntry=cmEthernetTrafficPortExtEntry, cmFlowPointCTagVlanPriority=cmFlowPointCTagVlanPriority, cmEthernetTrafficPortOamLocalUnidirSupportEnabled=cmEthernetTrafficPortOamLocalUnidirSupportEnabled, cmTrafficAclDstIpFilterEnabled=cmTrafficAclDstIpFilterEnabled, clk16PortGroupTable=clk16PortGroupTable, cmFlowPointCpdProfileBridgeGroupDispType=cmFlowPointCpdProfileBridgeGroupDispType, bits8PortGroupRowStatus=bits8PortGroupRowStatus, cmQosFlowPolicerEBS=cmQosFlowPolicerEBS, cmNetPortEncapPcpDEEncDropEligiblePrio=cmNetPortEncapPcpDEEncDropEligiblePrio, cmEthernetNetPortCpdV2Mac0ADispType=cmEthernetNetPortCpdV2Mac0ADispType, neTMParamsGroup=neTMParamsGroup, cmFlowPointGuaranteedBWLo=cmFlowPointGuaranteedBWLo, f3FpQosPolicerAlgorithm=f3FpQosPolicerAlgorithm, cmEthernetNetPortXdslModulationMode=cmEthernetNetPortXdslModulationMode, cmFlowPointMcastRateLimitSpeedLo=cmFlowPointMcastRateLimitSpeedLo, cmEthernetTrafficPortLpbkOuterVlanEnabled=cmEthernetTrafficPortLpbkOuterVlanEnabled, cmPrioMapV2PrioMappingPriTable=cmPrioMapV2PrioMappingPriTable, cmFlowPointEfEnabled=cmFlowPointEfEnabled, prioMapGroup=prioMapGroup, gps10MHzPortFrequencySource=gps10MHzPortFrequencySource, cmEthernetNetPortLoopbackTestReflectorIPv6Address=cmEthernetNetPortLoopbackTestReflectorIPv6Address, cmFlowPointBcastRateLimitSpeedLo=cmFlowPointBcastRateLimitSpeedLo, cmEthernetTrafficPortLpbkOuterVlanTag=cmEthernetTrafficPortLpbkOuterVlanTag, f3IrigRelayOutputPortAlias=f3IrigRelayOutputPortAlias, f3IrigOutputGroupExtensionDetection=f3IrigOutputGroupExtensionDetection, cmFlowPointStorageType=cmFlowPointStorageType, f3TimeOfDayPortOutputFormat=f3TimeOfDayPortOutputFormat, bitsPortFrameFormat=bitsPortFrameFormat, f3PulsePerSecondPortAssumedClockClass=f3PulsePerSecondPortAssumedClockClass, f3Usb3GDCNPortEntityIndex=f3Usb3GDCNPortEntityIndex, cmEthernetNetPortCpdV2BridgeGroupDispType=cmEthernetNetPortCpdV2BridgeGroupDispType, XDSLMode=XDSLMode, f3AclRuleDstMacAddressMask=f3AclRuleDstMacAddressMask, cmEthernetNetPortInnerVlanLoopbackMask=cmEthernetNetPortInnerVlanLoopbackMask, cmEthernetNetPortPcpDEEncType=cmEthernetNetPortPcpDEEncType, f3FpQosShaperBufferSize=f3FpQosShaperBufferSize, cmEthernetNetPortPppoeInnerVlanEtherType=cmEthernetNetPortPppoeInnerVlanEtherType, cmEthernetTrafficPortRemoteSfpDateOfManufacture=cmEthernetTrafficPortRemoteSfpDateOfManufacture, cmEthernetAccPortInitiateDiag=cmEthernetAccPortInitiateDiag, stsVcPathLoopbackConfig=stsVcPathLoopbackConfig, cmEncapFlowPointAssociatedFlowId=cmEncapFlowPointAssociatedFlowId, cmQosShaperV2AdminState=cmQosShaperV2AdminState, f3FpQosPolicerCIRLo=f3FpQosPolicerCIRLo, f3FlowPointCpdV2Table=f3FlowPointCpdV2Table, cmFlowCpdEthertypeMask=cmFlowCpdEthertypeMask, vtVcPathEntry=vtVcPathEntry, cmFlowPointRefEoMplsPwObject=cmFlowPointRefEoMplsPwObject, e3t3LoopbackTime=e3t3LoopbackTime, cmEthernetNetPortLoopbackBlockingEnabled=cmEthernetNetPortLoopbackBlockingEnabled, ieee1588EthernetPortOperationalState=ieee1588EthernetPortOperationalState, BitsPortImpedanceMode=BitsPortImpedanceMode, f3IrigRelayOutputPortAdminState=f3IrigRelayOutputPortAdminState, f3TimeOfDayPortEntityIndex=f3TimeOfDayPortEntityIndex, f3GPSReceiverPortNumTrackingSatellites=f3GPSReceiverPortNumTrackingSatellites, cmFlowPointCpdProfileIndex=cmFlowPointCpdProfileIndex, f3Usb3GDCNPortConfirmPinCode=f3Usb3GDCNPortConfirmPinCode, f3FpQosPolicerPolicingEnabled=f3FpQosPolicerPolicingEnabled, cmEthernetNetPortOamLocalUnidirSupportEnabled=cmEthernetNetPortOamLocalUnidirSupportEnabled, cmEthernetAccPortCpdV2Mac05DispType=cmEthernetAccPortCpdV2Mac05DispType, cmFlowCpdV2Mac0DDispType=cmFlowCpdV2Mac0DDispType, cmEthernetAccPortCpdV2NonTpmrLLDPDispType=cmEthernetAccPortCpdV2NonTpmrLLDPDispType, e3t3IfIndex=e3t3IfIndex, cmFlowN2AShapingType=cmFlowN2AShapingType, cmEthernetAccPortSfpIdentifierValue=cmEthernetAccPortSfpIdentifierValue, cmNetPortExpDEDecOutPriority=cmNetPortExpDEDecOutPriority, CmRemoteLinkIds=CmRemoteLinkIds, cmEthernetNetPortCpdV2CiscoGroupDispType=cmEthernetNetPortCpdV2CiscoGroupDispType, e1t1Index=e1t1Index, cmEthernetNetPortLoopbackStatus=cmEthernetNetPortLoopbackStatus, f3FpQosShaperIndex=f3FpQosShaperIndex, todPps16PortGroupSquelchControl=todPps16PortGroupSquelchControl, f3IrigRelayOutputPortEntityIndex=f3IrigRelayOutputPortEntityIndex, cmEthernetNetPortInitiateDiag=cmEthernetNetPortInitiateDiag, f3EthernetTrafficPortExpDEDropEligiblePrio=f3EthernetTrafficPortExpDEDropEligiblePrio, cmFlowPointRefPrioMapProfile=cmFlowPointRefPrioMapProfile, cmEthernetAccPortOamRemoteLinkEventsEnabled=cmEthernetAccPortOamRemoteLinkEventsEnabled, cmEthernetTrafficPortCpdV2LACPDispType=cmEthernetTrafficPortCpdV2LACPDispType, cmFlowPointColorMarkingSupported=cmFlowPointColorMarkingSupported, f3IrigOutputUnitPortIndex=f3IrigOutputUnitPortIndex, cmTrafficAclDstIpV4Addr=cmTrafficAclDstIpV4Addr, todPps16PortGroupIndex=todPps16PortGroupIndex, cmFlowCpdV2Mac04DispType=cmFlowCpdV2Mac04DispType, cmFlowCpdV2VlanBridgeDispType=cmFlowCpdV2VlanBridgeDispType, ocnStmIfIndex=ocnStmIfIndex, cmEthernetAccPortN2APopPVIDEnabled=cmEthernetAccPortN2APopPVIDEnabled, cmEthernetAccPortCpdSubtype=cmEthernetAccPortCpdSubtype, cmFlowWfqGroupEirHi=cmFlowWfqGroupEirHi, cmEgressOuterTagPriority=cmEgressOuterTagPriority, cmEthernetTrafficPortCpdV2VlanBridgeDispType=cmEthernetTrafficPortCpdV2VlanBridgeDispType, f3IrigOutputUnitPortTimeCode=f3IrigOutputUnitPortTimeCode, cmEthernetAccPortCpdEthertypeMask=cmEthernetAccPortCpdEthertypeMask)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmFlowCpdV2UplinkFastDispType=cmFlowCpdV2UplinkFastDispType, cmEthernetNetPortOuterVlanLoopback1=cmEthernetNetPortOuterVlanLoopback1, cmEthernetAccPortCpdV2CdpDispType=cmEthernetAccPortCpdV2CdpDispType, cmEthernetTrafficPortOamAdminState=cmEthernetTrafficPortOamAdminState, f3FlowPointCpdV2ActiveControlProtocols=f3FlowPointCpdV2ActiveControlProtocols, cmEthernetAccPortTable=cmEthernetAccPortTable, f3GPSReceiverPortCNOMask=f3GPSReceiverPortCNOMask, TimeAdvanceMode=TimeAdvanceMode, cmEthernetNetPortXdslUsTxPower=cmEthernetNetPortXdslUsTxPower, cmEthernetTrafficPortCpdV2Mac0EDispType=cmEthernetTrafficPortCpdV2Mac0EDispType, f3PulsePerSecondPortAdminState=f3PulsePerSecondPortAdminState, cmEthernetNetPortNegotiatedSpeed=cmEthernetNetPortNegotiatedSpeed, cmEthernetNetPortCpdV2GARPGroupDispType=cmEthernetNetPortCpdV2GARPGroupDispType, cmFlowCpdV2L2PTDispType=cmFlowCpdV2L2PTDispType, todPps16PortGroupGroup=todPps16PortGroupGroup, cmEthernetAccPortWfqGroupEirLo=cmEthernetAccPortWfqGroupEirLo, cmNetPortExpDEDropIneligiblePrio=cmNetPortExpDEDropIneligiblePrio, gps10MHzPortTable=gps10MHzPortTable, TODOutputFormat=TODOutputFormat, cmFlowPointIngressVlanMemberList=cmFlowPointIngressVlanMemberList, cmEthernetTrafficPortOamDiscoveryState=cmEthernetTrafficPortOamDiscoveryState, cmEthernetAccPortJDSUControlFramesSnoopingEnabled=cmEthernetAccPortJDSUControlFramesSnoopingEnabled, cmNetPortExtMcastRateLimitSpeedLo=cmNetPortExtMcastRateLimitSpeedLo, f3AclRuleInnerVlanVIDLowLimit=f3AclRuleInnerVlanVIDLowLimit, cmMPFlowIndex=cmMPFlowIndex, cmQosFlowPolicerPolicingEnabled=cmQosFlowPolicerPolicingEnabled, cmEthernetTrafficPortSfpPartNumber=cmEthernetTrafficPortSfpPartNumber, cmFlowPointCpdProfileGARPGroupDispType=cmFlowPointCpdProfileGARPGroupDispType, f3Usb3GDCNPortEntry=f3Usb3GDCNPortEntry, cmEthernetAccPortLoopbackDestMacControlEnabled=cmEthernetAccPortLoopbackDestMacControlEnabled, cmEthernetTrafficPortSyncEMode=cmEthernetTrafficPortSyncEMode, cmAccPortPcpDEDecInPriority=cmAccPortPcpDEDecInPriority, cmTrafficAclFilterAction=cmTrafficAclFilterAction, cmEthernetFlowPointCpdIndex=cmEthernetFlowPointCpdIndex, bitsPortSaBitsAdminState=bitsPortSaBitsAdminState, cmEthernetNetPortWfqGroupCOS=cmEthernetNetPortWfqGroupCOS, cmEthernetAccPortOamRemoteMacAddress=cmEthernetAccPortOamRemoteMacAddress, cmFlowIndependentA2NShaperBW=cmFlowIndependentA2NShaperBW, cmFlowOuterTagPrioEnabled=cmFlowOuterTagPrioEnabled, cmEthernetNetPortDiagnoseResult=cmEthernetNetPortDiagnoseResult, f3FpQosShaperEIRLo=f3FpQosShaperEIRLo, f3EthernetTrafficPortExpDEEncIndex=f3EthernetTrafficPortExpDEEncIndex, cmEthernetAccPortSfpConnectorValue=cmEthernetAccPortSfpConnectorValue, cmEthernetNetPortSfpPartNumber=cmEthernetNetPortSfpPartNumber, f3FpQosPolicerSecondaryState=f3FpQosPolicerSecondaryState, cmAccPortQosShaperTable=cmAccPortQosShaperTable, cmFlowPointCpdProfileUplinkFastDispType=cmFlowPointCpdProfileUplinkFastDispType, cmEthernetAccPortOamRemoteUnidirSupportEnabled=cmEthernetAccPortOamRemoteUnidirSupportEnabled, cmFlowCpdV2LLDPDispType=cmFlowCpdV2LLDPDispType, ocnStmOperationalState=ocnStmOperationalState, cmElineFlowRowStatus=cmElineFlowRowStatus, sciPortSignalDirection=sciPortSignalDirection, ccGroupTable=ccGroupTable, f3AclRuleEtherType=f3AclRuleEtherType, gps10MHzPortEntry=gps10MHzPortEntry, cmMPFlowFPList=cmMPFlowFPList, cmEthernetTrafficPortCpdV2PauseDispType=cmEthernetTrafficPortCpdV2PauseDispType, f3Usb3GDCNPortFSN=f3Usb3GDCNPortFSN, cmEthernetTrafficPortLoopbackTestReflectorIPv6Address=cmEthernetTrafficPortLoopbackTestReflectorIPv6Address, vtVcPathTxSignalLabel=vtVcPathTxSignalLabel, cmEthernetNetPortInnerVlanLoopback3=cmEthernetNetPortInnerVlanLoopback3, cmEthernetTrafficPortEgressPopPriorityVidEnabled=cmEthernetTrafficPortEgressPopPriorityVidEnabled, f3AclRuleSrcIpv4AddressLowLimit=f3AclRuleSrcIpv4AddressLowLimit, cmFlowA2NCombinedRateLimitLo=cmFlowA2NCombinedRateLimitLo, cmEthernetNetPortDiagnoseTestStatus=cmEthernetNetPortDiagnoseTestStatus, bits8PortGroupImpedance=bits8PortGroupImpedance, f3FpQosPolicerRowStatus=f3FpQosPolicerRowStatus, cmQosShaperV2Entry=cmQosShaperV2Entry, cmElineFlowAdminState=cmElineFlowAdminState, f3FlowPointCpdV2LACPMarkerDispType=f3FlowPointCpdV2LACPMarkerDispType, f3NetPortQosShaperSoamEIRHi=f3NetPortQosShaperSoamEIRHi, AclRuleOperation=AclRuleOperation, cmEthernetAccPortA2NPushPVIDEnabled=cmEthernetAccPortA2NPushPVIDEnabled, cmEthernetNetPortOamRemoteMacAddress=cmEthernetNetPortOamRemoteMacAddress, cmPrioMapCOS=cmPrioMapCOS, cmAccPortQosShaperEIRLo=cmAccPortQosShaperEIRLo, cmEthernetTrafficPortShapingEnabled=cmEthernetTrafficPortShapingEnabled, f3Usb3GDCNPortIMSI=f3Usb3GDCNPortIMSI, cmEthernetAccPortOamDiscoveryState=cmEthernetAccPortOamDiscoveryState, cmFlowPointIngressCOS=cmFlowPointIngressCOS, pps16PortGroupTODSource=pps16PortGroupTODSource, cmEncapFlowPointRefPrioMapProfile=cmEncapFlowPointRefPrioMapProfile, cmEthernetTrafficPortPhyType=cmEthernetTrafficPortPhyType, ocnStmEntry=ocnStmEntry, cmOAMFlowPointStorageType=cmOAMFlowPointStorageType, cmAccPortPcpDEDecOutPriority=cmAccPortPcpDEDecOutPriority, gps10MHzPortTimeSource=gps10MHzPortTimeSource, clk16PortGroupSecondaryState=clk16PortGroupSecondaryState, cmEthernetAccPortCpdEthertype=cmEthernetAccPortCpdEthertype, cmFlowWfqGroupEirLo=cmFlowWfqGroupEirLo, cmEthernetNetPortOamRemoteMaxPDUSize=cmEthernetNetPortOamRemoteMaxPDUSize, cmEthernetTrafficPortExpDEEncType=cmEthernetTrafficPortExpDEEncType, cmFlowCpdV2IslDispType=cmFlowCpdV2IslDispType, cmQosQueueProfileRowStatus=cmQosQueueProfileRowStatus, f3Usb3GDCNPortPINStatus=f3Usb3GDCNPortPINStatus, bitsPortCrc4=bitsPortCrc4, IrigControlField=IrigControlField, cmEthernetTrafficPortPcpDEDecDropEligible=cmEthernetTrafficPortPcpDEDecDropEligible, f3AclRuleSrcIpv4AddressControl=f3AclRuleSrcIpv4AddressControl, cmEthernetMgmtPortTable=cmEthernetMgmtPortTable, cmQosShaperWredYellowDropProbability=cmQosShaperWredYellowDropProbability, cmEthernetTrafficPortRxDeiAction=cmEthernetTrafficPortRxDeiAction, cmEthernetTrafficPortMDIXStatus=cmEthernetTrafficPortMDIXStatus, cmEthernetTrafficPortRxDeiOuterTagType=cmEthernetTrafficPortRxDeiOuterTagType, cmEthernetNetPortCpdV2GVRPDispType=cmEthernetNetPortCpdV2GVRPDispType, f3IrigRelayOutputPortTable=f3IrigRelayOutputPortTable, cmFlowRowStatus=cmFlowRowStatus, cmQosShaperIndex=cmQosShaperIndex, cmPortCpdProfileNearestLLDPDispType=cmPortCpdProfileNearestLLDPDispType, cmPrioMapIndex=cmPrioMapIndex, cmFlowCpdV2Mac0BDispType=cmFlowCpdV2Mac0BDispType, cmFlowCTagVlanId=cmFlowCTagVlanId, cmNetPortPcpDEDecOutPriority=cmNetPortPcpDEDecOutPriority, ieee1588EthernetPortIndex=ieee1588EthernetPortIndex, cmPrioMapV2PrioMappingPriInPrio=cmPrioMapV2PrioMappingPriInPrio, f3AclRuleSrcMacAddressMask=f3AclRuleSrcMacAddressMask, cmEthernetNetPortCpdV2Mac07DispType=cmEthernetNetPortCpdV2Mac07DispType, ocnStmInsertingAIS=ocnStmInsertingAIS, cmEthernetTrafficPortJDSULoopbackVlanList=cmEthernetTrafficPortJDSULoopbackVlanList, f3AclRulePriority=f3AclRulePriority, f3IrigRs422OutputPortControlField=f3IrigRs422OutputPortControlField, cmFlowCpdSubtype=cmFlowCpdSubtype, CmEthernetTrafficSvcType=CmEthernetTrafficSvcType, cmEthernetTrafficPortTxPauseEnabled=cmEthernetTrafficPortTxPauseEnabled, cmEthernetAccPortOuterVlanLoopback1=cmEthernetAccPortOuterVlanLoopback1, cmEthernetAccPortPrioMapMode=cmEthernetAccPortPrioMapMode, cmEthernetNetPortOamRemoteOamLoopbacksSupported=cmEthernetNetPortOamRemoteOamLoopbacksSupported, cmEthernetTrafficPortRemoteSfpPartNumber=cmEthernetTrafficPortRemoteSfpPartNumber, pps16PortGroupSquelchControl=pps16PortGroupSquelchControl, gps10MHzPortSquelchQL=gps10MHzPortSquelchQL, cmEthernetTrafficPortAfpType=cmEthernetTrafficPortAfpType, cmFlowPointBcastRateLimitEnabled=cmFlowPointBcastRateLimitEnabled, cmEthernetTrafficPortCpdV2VtpDispType=cmEthernetTrafficPortCpdV2VtpDispType, f3IrigRelayOutputPortOperationalState=f3IrigRelayOutputPortOperationalState, cmFlowCpdV2NearestLLDPDispType=cmFlowCpdV2NearestLLDPDispType, cmIngressPrioMapInPriority=cmIngressPrioMapInPriority, f3FlowPointCpdV2Mac08DispType=f3FlowPointCpdV2Mac08DispType)
