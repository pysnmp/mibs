#
# PySNMP MIB module ALCATEL-NMC-PROXY-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alcatel/ALCATEL-NMC-PROXY-AGENT-MIB
# Produced by pysmi-1.1.12 at Wed Oct  9 02:15:50 2024
# On host fv-az1144-128 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
openViewSeverity, = mibBuilder.importSymbols("HPOV-NNM-MIB", "openViewSeverity")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, ModuleIdentity, Unsigned32, NotificationType, TimeTicks, enterprises, Bits, Integer32, iso, Counter32, Gauge32, ObjectIdentity, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "ModuleIdentity", "Unsigned32", "NotificationType", "TimeTicks", "enterprises", "Bits", "Integer32", "iso", "Counter32", "Gauge32", "ObjectIdentity", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
alcatel = MibIdentifier((1, 3, 6, 1, 4, 1, 637))
abs = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64))
nmc4755 = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0))
notification = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10))
nmcProxyAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1))
nmcProxyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 2))
cmipEventArg = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1))
objectClass = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 1))
objectInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2))
topClass = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topClass.setStatus('mandatory')
baseClass = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseClass.setStatus('mandatory')
containmentTree = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 1))
a4400 = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 1, 89))
shelf = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 1, 89, 29))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 1, 89, 29, 23))
actOrSuEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 1, 89, 29, 23, 175))
terminal = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 1, 89, 29, 23, 175, 82))
logicalLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 1, 89, 101))
dect = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 1, 89, 201))
rdnDepth = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnDepth.setStatus('mandatory')
rdnValues = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3))
rdn1 = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 1))
classId1 = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classId1.setStatus('mandatory')
rdnValue1 = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnValue1.setStatus('mandatory')
rdn2 = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 2))
classId2 = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classId2.setStatus('mandatory')
rdnValue2 = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnValue2.setStatus('mandatory')
rdn3 = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 3))
classId3 = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classId3.setStatus('mandatory')
rdnValue3 = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 3, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnValue3.setStatus('mandatory')
rdn4 = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 4))
classId4 = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classId4.setStatus('mandatory')
rdnValue4 = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnValue4.setStatus('mandatory')
rdn5 = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 5))
classId5 = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classId5.setStatus('mandatory')
rdnValue5 = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 3, 5, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnValue5.setStatus('mandatory')
eventTime = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTime.setStatus('mandatory')
eventType = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 10, 11))).clone(namedValues=NamedValues(("communicationAlarm", 2), ("environmentalAlarm", 3), ("equipmentAlarm", 4), ("processingErrorAlarm", 10), ("qualityOfServiceAlarm", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventType.setStatus('mandatory')
severity = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("indeterminate", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("clear", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: severity.setStatus('mandatory')
probableCause = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57))).clone(namedValues=NamedValues(("Unknown", 0), ("AdapterError", 1), ("ApplicationSubsystemFailure", 2), ("BandWidthReduced", 3), ("CallEstablishmentError", 4), ("CommunicationsProtocolError", 5), ("CommunicationsSubsystemFailure", 6), ("ConfigurationOrCustomizationError", 7), ("Congestion", 8), ("CorruptData", 9), ("CpuCyclesLimitExceeded", 10), ("DataSetOrModemError", 11), ("DegradedSignal", 12), ("DteDceInterfaceError", 13), ("EnclosureDoorOpen", 14), ("EquipmentMalFunction", 15), ("ExcessiveVibration", 16), ("FileError", 17), ("FireDetected", 18), ("FloodDetected", 19), ("FramingError", 20), ("HeatingVentilationCoolingSystemProblem", 21), ("HumidityUnacceptable", 22), ("InputOutputDeviceError", 23), ("InputDeviceError", 24), ("LANError", 25), ("LeakDetected", 26), ("LocalNodeTransmissionError", 27), ("LossOfFrame", 28), ("LossOfSignal", 29), ("MaterialSupplyExhausted", 30), ("MultiplexerProblem", 31), ("OutOfMemory", 32), ("OutputDeviceError", 33), ("PerformanceDegraded", 34), ("PowerProblem", 35), ("PressureUnacceptable", 36), ("ProcessorProblem", 37), ("PumpFailure", 38), ("QueueSizeExceeded", 39), ("ReceiveFailure", 40), ("ReceiverFailure", 41), ("RemoteNodeTransmissionFailure", 42), ("ResourceAtOrNearingCapacity", 43), ("ResponseTimeExcessive", 44), ("RetransmissionRateExcessive", 45), ("SoftwareError", 46), ("SoftwareProgramAbnormallyTerminated", 47), ("SoftwareProgramError", 48), ("StorageCapacityProblem", 49), ("TemperatureUnacceptable", 50), ("ThresholdCrossed", 51), ("TimingProblem", 52), ("ToxicLeakDetected", 53), ("TransmitFailure", 54), ("TransmitterFailure", 55), ("UnderlyingResourceUnavailable", 56), ("VersionMismatch", 57)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: probableCause.setStatus('mandatory')
voiceIds = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 4))
objectNumber = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectNumber.setStatus('optional')
parentNumber = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parentNumber.setStatus('optional')
packedForm = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packedForm.setStatus('mandatory')
notificationId = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notificationId.setStatus('mandatory')
addText = MibScalar((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addText.setStatus('optional')
packedCmipTrap = NotificationType((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 2) + (0,1)).setObjects(("HPOV-NNM-MIB", "openViewSeverity"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "packedForm"))
startOfResyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 2) + (0,2))
cmipTrap = NotificationType((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 2) + (0,3)).setObjects(("ALCATEL-NMC-PROXY-AGENT-MIB", "topClass"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "baseClass"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "rdnDepth"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "classId1"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "rdnValue1"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "classId2"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "rdnValue2"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "classId3"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "rdnValue3"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "classId4"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "rdnValue4"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "classId5"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "rdnValue5"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "eventTime"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "eventType"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "severity"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "probableCause"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "notificationId"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "addText"))
startProxyTrap = NotificationType((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 2) + (0,4))
stopProxyTrap = NotificationType((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 2) + (0,5))
eventLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 2) + (0,6))
topClassStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 637, 64, 0, 10, 1, 2) + (0,7)).setObjects(("ALCATEL-NMC-PROXY-AGENT-MIB", "classId1"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "rdnValue1"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "severity"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "objectNumber"), ("ALCATEL-NMC-PROXY-AGENT-MIB", "parentNumber"))
mibBuilder.exportSymbols("ALCATEL-NMC-PROXY-AGENT-MIB", classId2=classId2, classId3=classId3, nmcProxyTraps=nmcProxyTraps, startProxyTrap=startProxyTrap, parentNumber=parentNumber, eventType=eventType, topClass=topClass, rdnValue1=rdnValue1, startOfResyncTrap=startOfResyncTrap, board=board, rdn5=rdn5, eventTime=eventTime, packedCmipTrap=packedCmipTrap, a4400=a4400, logicalLinks=logicalLinks, rdnValue4=rdnValue4, actOrSuEvents=actOrSuEvents, topClassStateTrap=topClassStateTrap, cmipEventArg=cmipEventArg, notification=notification, objectClass=objectClass, objectInstance=objectInstance, containmentTree=containmentTree, rdnDepth=rdnDepth, rdnValue2=rdnValue2, voiceIds=voiceIds, dect=dect, stopProxyTrap=stopProxyTrap, alcatel=alcatel, rdnValue3=rdnValue3, addText=addText, notificationId=notificationId, shelf=shelf, nmcProxyAgent=nmcProxyAgent, classId4=classId4, baseClass=baseClass, rdn1=rdn1, probableCause=probableCause, rdnValue5=rdnValue5, rdn2=rdn2, nmc4755=nmc4755, cmipTrap=cmipTrap, rdnValues=rdnValues, rdn3=rdn3, severity=severity, eventLostTrap=eventLostTrap, objectNumber=objectNumber, rdn4=rdn4, terminal=terminal, classId1=classId1, abs=abs, packedForm=packedForm, classId5=classId5)
